

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 08 09:45:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	intentry,global,class=CODE,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	dabs	1,0x7E,2
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  011D                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  018E                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0194                     	;# 
   215  0195                     	;# 
   216  0196                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020D                     	;# 
   230  0210                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  0291                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0293                     	;# 
   250  0298                     	;# 
   251  0298                     	;# 
   252  0299                     	;# 
   253  029A                     	;# 
   254  0394                     	;# 
   255  0395                     	;# 
   256  0396                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0095                     	;# 
   302  0096                     	;# 
   303  0097                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0116                     	;# 
   315  0117                     	;# 
   316  011D                     	;# 
   317  018C                     	;# 
   318  018D                     	;# 
   319  018E                     	;# 
   320  0191                     	;# 
   321  0191                     	;# 
   322  0192                     	;# 
   323  0193                     	;# 
   324  0193                     	;# 
   325  0194                     	;# 
   326  0195                     	;# 
   327  0196                     	;# 
   328  0197                     	;# 
   329  0199                     	;# 
   330  019A                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019C                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020D                     	;# 
   341  0210                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0298                     	;# 
   362  0298                     	;# 
   363  0299                     	;# 
   364  029A                     	;# 
   365  0394                     	;# 
   366  0395                     	;# 
   367  0396                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  0090                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0095                     	;# 
   413  0096                     	;# 
   414  0097                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009B                     	;# 
   419  009C                     	;# 
   420  009D                     	;# 
   421  009E                     	;# 
   422  010C                     	;# 
   423  010D                     	;# 
   424  010E                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  011D                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0194                     	;# 
   437  0195                     	;# 
   438  0196                     	;# 
   439  0197                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019C                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020D                     	;# 
   452  0210                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0291                     	;# 
   469  0291                     	;# 
   470  0292                     	;# 
   471  0293                     	;# 
   472  0298                     	;# 
   473  0298                     	;# 
   474  0299                     	;# 
   475  029A                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0FE4                     	;# 
   480  0FE5                     	;# 
   481  0FE6                     	;# 
   482  0FE7                     	;# 
   483  0FE8                     	;# 
   484  0FE9                     	;# 
   485  0FEA                     	;# 
   486  0FEB                     	;# 
   487  0FED                     	;# 
   488  0FEE                     	;# 
   489  0FEF                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  0010                     	;# 
   506  0011                     	;# 
   507  0012                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0016                     	;# 
   511  0017                     	;# 
   512  0018                     	;# 
   513  0019                     	;# 
   514  001A                     	;# 
   515  001B                     	;# 
   516  001C                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0090                     	;# 
   521  0091                     	;# 
   522  0092                     	;# 
   523  0095                     	;# 
   524  0096                     	;# 
   525  0097                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009B                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  010C                     	;# 
   534  010D                     	;# 
   535  010E                     	;# 
   536  0116                     	;# 
   537  0117                     	;# 
   538  011D                     	;# 
   539  018C                     	;# 
   540  018D                     	;# 
   541  018E                     	;# 
   542  0191                     	;# 
   543  0191                     	;# 
   544  0192                     	;# 
   545  0193                     	;# 
   546  0193                     	;# 
   547  0194                     	;# 
   548  0195                     	;# 
   549  0196                     	;# 
   550  0197                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019E                     	;# 
   561  019F                     	;# 
   562  020D                     	;# 
   563  0210                     	;# 
   564  0211                     	;# 
   565  0211                     	;# 
   566  0212                     	;# 
   567  0212                     	;# 
   568  0213                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0214                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0216                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0217                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0298                     	;# 
   584  0298                     	;# 
   585  0299                     	;# 
   586  029A                     	;# 
   587  0394                     	;# 
   588  0395                     	;# 
   589  0396                     	;# 
   590  0FE4                     	;# 
   591  0FE5                     	;# 
   592  0FE6                     	;# 
   593  0FE7                     	;# 
   594  0FE8                     	;# 
   595  0FE9                     	;# 
   596  0FEA                     	;# 
   597  0FEB                     	;# 
   598  0FED                     	;# 
   599  0FEE                     	;# 
   600  0FEF                     	;# 
   601  0000                     	;# 
   602  0001                     	;# 
   603  0002                     	;# 
   604  0003                     	;# 
   605  0004                     	;# 
   606  0005                     	;# 
   607  0006                     	;# 
   608  0007                     	;# 
   609  0008                     	;# 
   610  0009                     	;# 
   611  000A                     	;# 
   612  000B                     	;# 
   613  000C                     	;# 
   614  000D                     	;# 
   615  000E                     	;# 
   616  0010                     	;# 
   617  0011                     	;# 
   618  0012                     	;# 
   619  0015                     	;# 
   620  0016                     	;# 
   621  0016                     	;# 
   622  0017                     	;# 
   623  0018                     	;# 
   624  0019                     	;# 
   625  001A                     	;# 
   626  001B                     	;# 
   627  001C                     	;# 
   628  008C                     	;# 
   629  008D                     	;# 
   630  008E                     	;# 
   631  0090                     	;# 
   632  0091                     	;# 
   633  0092                     	;# 
   634  0095                     	;# 
   635  0096                     	;# 
   636  0097                     	;# 
   637  0099                     	;# 
   638  009A                     	;# 
   639  009B                     	;# 
   640  009B                     	;# 
   641  009C                     	;# 
   642  009D                     	;# 
   643  009E                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  0116                     	;# 
   648  0117                     	;# 
   649  011D                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  018E                     	;# 
   653  0191                     	;# 
   654  0191                     	;# 
   655  0192                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0197                     	;# 
   662  0199                     	;# 
   663  019A                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019C                     	;# 
   669  019C                     	;# 
   670  019D                     	;# 
   671  019E                     	;# 
   672  019F                     	;# 
   673  020D                     	;# 
   674  0210                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0216                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0217                     	;# 
   690  0291                     	;# 
   691  0291                     	;# 
   692  0292                     	;# 
   693  0293                     	;# 
   694  0298                     	;# 
   695  0298                     	;# 
   696  0299                     	;# 
   697  029A                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  0FE4                     	;# 
   702  0FE5                     	;# 
   703  0FE6                     	;# 
   704  0FE7                     	;# 
   705  0FE8                     	;# 
   706  0FE9                     	;# 
   707  0FEA                     	;# 
   708  0FEB                     	;# 
   709  0FED                     	;# 
   710  0FEE                     	;# 
   711  0FEF                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0008                     	;# 
   721  0009                     	;# 
   722  000A                     	;# 
   723  000B                     	;# 
   724  000C                     	;# 
   725  000D                     	;# 
   726  000E                     	;# 
   727  0010                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0095                     	;# 
   746  0096                     	;# 
   747  0097                     	;# 
   748  0099                     	;# 
   749  009A                     	;# 
   750  009B                     	;# 
   751  009B                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009E                     	;# 
   755  010C                     	;# 
   756  010D                     	;# 
   757  010E                     	;# 
   758  0116                     	;# 
   759  0117                     	;# 
   760  011D                     	;# 
   761  018C                     	;# 
   762  018D                     	;# 
   763  018E                     	;# 
   764  0191                     	;# 
   765  0191                     	;# 
   766  0192                     	;# 
   767  0193                     	;# 
   768  0193                     	;# 
   769  0194                     	;# 
   770  0195                     	;# 
   771  0196                     	;# 
   772  0197                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019C                     	;# 
   780  019C                     	;# 
   781  019D                     	;# 
   782  019E                     	;# 
   783  019F                     	;# 
   784  020D                     	;# 
   785  0210                     	;# 
   786  0211                     	;# 
   787  0211                     	;# 
   788  0212                     	;# 
   789  0212                     	;# 
   790  0213                     	;# 
   791  0213                     	;# 
   792  0214                     	;# 
   793  0214                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0216                     	;# 
   798  0216                     	;# 
   799  0217                     	;# 
   800  0217                     	;# 
   801  0291                     	;# 
   802  0291                     	;# 
   803  0292                     	;# 
   804  0293                     	;# 
   805  0298                     	;# 
   806  0298                     	;# 
   807  0299                     	;# 
   808  029A                     	;# 
   809  0394                     	;# 
   810  0395                     	;# 
   811  0396                     	;# 
   812  0FE4                     	;# 
   813  0FE5                     	;# 
   814  0FE6                     	;# 
   815  0FE7                     	;# 
   816  0FE8                     	;# 
   817  0FE9                     	;# 
   818  0FEA                     	;# 
   819  0FEB                     	;# 
   820  0FED                     	;# 
   821  0FEE                     	;# 
   822  0FEF                     	;# 
   823  0000                     	;# 
   824  0001                     	;# 
   825  0002                     	;# 
   826  0003                     	;# 
   827  0004                     	;# 
   828  0005                     	;# 
   829  0006                     	;# 
   830  0007                     	;# 
   831  0008                     	;# 
   832  0009                     	;# 
   833  000A                     	;# 
   834  000B                     	;# 
   835  000C                     	;# 
   836  000D                     	;# 
   837  000E                     	;# 
   838  0010                     	;# 
   839  0011                     	;# 
   840  0012                     	;# 
   841  0015                     	;# 
   842  0016                     	;# 
   843  0016                     	;# 
   844  0017                     	;# 
   845  0018                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  0090                     	;# 
   854  0091                     	;# 
   855  0092                     	;# 
   856  0095                     	;# 
   857  0096                     	;# 
   858  0097                     	;# 
   859  0099                     	;# 
   860  009A                     	;# 
   861  009B                     	;# 
   862  009B                     	;# 
   863  009C                     	;# 
   864  009D                     	;# 
   865  009E                     	;# 
   866  010C                     	;# 
   867  010D                     	;# 
   868  010E                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  011D                     	;# 
   872  018C                     	;# 
   873  018D                     	;# 
   874  018E                     	;# 
   875  0191                     	;# 
   876  0191                     	;# 
   877  0192                     	;# 
   878  0193                     	;# 
   879  0193                     	;# 
   880  0194                     	;# 
   881  0195                     	;# 
   882  0196                     	;# 
   883  0197                     	;# 
   884  0199                     	;# 
   885  019A                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020D                     	;# 
   896  0210                     	;# 
   897  0211                     	;# 
   898  0211                     	;# 
   899  0212                     	;# 
   900  0212                     	;# 
   901  0213                     	;# 
   902  0213                     	;# 
   903  0214                     	;# 
   904  0214                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0216                     	;# 
   910  0217                     	;# 
   911  0217                     	;# 
   912  0291                     	;# 
   913  0291                     	;# 
   914  0292                     	;# 
   915  0293                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  0394                     	;# 
   921  0395                     	;# 
   922  0396                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0010                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0090                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  010C                     	;# 
   978  010D                     	;# 
   979  010E                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0197                     	;# 
   995  0199                     	;# 
   996  019A                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019C                     	;# 
  1002  019C                     	;# 
  1003  019D                     	;# 
  1004  019E                     	;# 
  1005  019F                     	;# 
  1006  020D                     	;# 
  1007  0210                     	;# 
  1008  0211                     	;# 
  1009  0211                     	;# 
  1010  0212                     	;# 
  1011  0212                     	;# 
  1012  0213                     	;# 
  1013  0213                     	;# 
  1014  0214                     	;# 
  1015  0214                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0216                     	;# 
  1020  0216                     	;# 
  1021  0217                     	;# 
  1022  0217                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0298                     	;# 
  1028  0298                     	;# 
  1029  0299                     	;# 
  1030  029A                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0FE4                     	;# 
  1035  0FE5                     	;# 
  1036  0FE6                     	;# 
  1037  0FE7                     	;# 
  1038  0FE8                     	;# 
  1039  0FE9                     	;# 
  1040  0FEA                     	;# 
  1041  0FEB                     	;# 
  1042  0FED                     	;# 
  1043  0FEE                     	;# 
  1044  0FEF                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0008                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0015                     	;# 
  1064  0016                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001C                     	;# 
  1072  008C                     	;# 
  1073  008D                     	;# 
  1074  008E                     	;# 
  1075  0090                     	;# 
  1076  0091                     	;# 
  1077  0092                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0099                     	;# 
  1082  009A                     	;# 
  1083  009B                     	;# 
  1084  009B                     	;# 
  1085  009C                     	;# 
  1086  009D                     	;# 
  1087  009E                     	;# 
  1088  010C                     	;# 
  1089  010D                     	;# 
  1090  010E                     	;# 
  1091  0116                     	;# 
  1092  0117                     	;# 
  1093  011D                     	;# 
  1094  018C                     	;# 
  1095  018D                     	;# 
  1096  018E                     	;# 
  1097  0191                     	;# 
  1098  0191                     	;# 
  1099  0192                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0194                     	;# 
  1103  0195                     	;# 
  1104  0196                     	;# 
  1105  0197                     	;# 
  1106  0199                     	;# 
  1107  019A                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019C                     	;# 
  1113  019C                     	;# 
  1114  019D                     	;# 
  1115  019E                     	;# 
  1116  019F                     	;# 
  1117  020D                     	;# 
  1118  0210                     	;# 
  1119  0211                     	;# 
  1120  0211                     	;# 
  1121  0212                     	;# 
  1122  0212                     	;# 
  1123  0213                     	;# 
  1124  0213                     	;# 
  1125  0214                     	;# 
  1126  0214                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0216                     	;# 
  1131  0216                     	;# 
  1132  0217                     	;# 
  1133  0217                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0298                     	;# 
  1139  0298                     	;# 
  1140  0299                     	;# 
  1141  029A                     	;# 
  1142  0394                     	;# 
  1143  0395                     	;# 
  1144  0396                     	;# 
  1145  0FE4                     	;# 
  1146  0FE5                     	;# 
  1147  0FE6                     	;# 
  1148  0FE7                     	;# 
  1149  0FE8                     	;# 
  1150  0FE9                     	;# 
  1151  0FEA                     	;# 
  1152  0FEB                     	;# 
  1153  0FED                     	;# 
  1154  0FEE                     	;# 
  1155  0FEF                     	;# 
  1156  0000                     	;# 
  1157  0001                     	;# 
  1158  0002                     	;# 
  1159  0003                     	;# 
  1160  0004                     	;# 
  1161  0005                     	;# 
  1162  0006                     	;# 
  1163  0007                     	;# 
  1164  0008                     	;# 
  1165  0009                     	;# 
  1166  000A                     	;# 
  1167  000B                     	;# 
  1168  000C                     	;# 
  1169  000D                     	;# 
  1170  000E                     	;# 
  1171  0010                     	;# 
  1172  0011                     	;# 
  1173  0012                     	;# 
  1174  0015                     	;# 
  1175  0016                     	;# 
  1176  0016                     	;# 
  1177  0017                     	;# 
  1178  0018                     	;# 
  1179  0019                     	;# 
  1180  001A                     	;# 
  1181  001B                     	;# 
  1182  001C                     	;# 
  1183  008C                     	;# 
  1184  008D                     	;# 
  1185  008E                     	;# 
  1186  0090                     	;# 
  1187  0091                     	;# 
  1188  0092                     	;# 
  1189  0095                     	;# 
  1190  0096                     	;# 
  1191  0097                     	;# 
  1192  0099                     	;# 
  1193  009A                     	;# 
  1194  009B                     	;# 
  1195  009B                     	;# 
  1196  009C                     	;# 
  1197  009D                     	;# 
  1198  009E                     	;# 
  1199  010C                     	;# 
  1200  010D                     	;# 
  1201  010E                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  011D                     	;# 
  1205  018C                     	;# 
  1206  018D                     	;# 
  1207  018E                     	;# 
  1208  0191                     	;# 
  1209  0191                     	;# 
  1210  0192                     	;# 
  1211  0193                     	;# 
  1212  0193                     	;# 
  1213  0194                     	;# 
  1214  0195                     	;# 
  1215  0196                     	;# 
  1216  0197                     	;# 
  1217  0199                     	;# 
  1218  019A                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019C                     	;# 
  1224  019C                     	;# 
  1225  019D                     	;# 
  1226  019E                     	;# 
  1227  019F                     	;# 
  1228  020D                     	;# 
  1229  0210                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  0212                     	;# 
  1233  0212                     	;# 
  1234  0213                     	;# 
  1235  0213                     	;# 
  1236  0214                     	;# 
  1237  0214                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0298                     	;# 
  1250  0298                     	;# 
  1251  0299                     	;# 
  1252  029A                     	;# 
  1253  0394                     	;# 
  1254  0395                     	;# 
  1255  0396                     	;# 
  1256  0FE4                     	;# 
  1257  0FE5                     	;# 
  1258  0FE6                     	;# 
  1259  0FE7                     	;# 
  1260  0FE8                     	;# 
  1261  0FE9                     	;# 
  1262  0FEA                     	;# 
  1263  0FEB                     	;# 
  1264  0FED                     	;# 
  1265  0FEE                     	;# 
  1266  0FEF                     	;# 
  1267  0000                     	;# 
  1268  0001                     	;# 
  1269  0002                     	;# 
  1270  0003                     	;# 
  1271  0004                     	;# 
  1272  0005                     	;# 
  1273  0006                     	;# 
  1274  0007                     	;# 
  1275  0008                     	;# 
  1276  0009                     	;# 
  1277  000A                     	;# 
  1278  000B                     	;# 
  1279  000C                     	;# 
  1280  000D                     	;# 
  1281  000E                     	;# 
  1282  0010                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  008C                     	;# 
  1295  008D                     	;# 
  1296  008E                     	;# 
  1297  0090                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0095                     	;# 
  1301  0096                     	;# 
  1302  0097                     	;# 
  1303  0099                     	;# 
  1304  009A                     	;# 
  1305  009B                     	;# 
  1306  009B                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009E                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010E                     	;# 
  1313  0116                     	;# 
  1314  0117                     	;# 
  1315  011D                     	;# 
  1316  018C                     	;# 
  1317  018D                     	;# 
  1318  018E                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0194                     	;# 
  1325  0195                     	;# 
  1326  0196                     	;# 
  1327  0197                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019C                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020D                     	;# 
  1340  0210                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0216                     	;# 
  1353  0216                     	;# 
  1354  0217                     	;# 
  1355  0217                     	;# 
  1356  0291                     	;# 
  1357  0291                     	;# 
  1358  0292                     	;# 
  1359  0293                     	;# 
  1360  0298                     	;# 
  1361  0298                     	;# 
  1362  0299                     	;# 
  1363  029A                     	;# 
  1364  0394                     	;# 
  1365  0395                     	;# 
  1366  0396                     	;# 
  1367  0FE4                     	;# 
  1368  0FE5                     	;# 
  1369  0FE6                     	;# 
  1370  0FE7                     	;# 
  1371  0FE8                     	;# 
  1372  0FE9                     	;# 
  1373  0FEA                     	;# 
  1374  0FEB                     	;# 
  1375  0FED                     	;# 
  1376  0FEE                     	;# 
  1377  0FEF                     	;# 
  1378  0000                     	;# 
  1379  0001                     	;# 
  1380  0002                     	;# 
  1381  0003                     	;# 
  1382  0004                     	;# 
  1383  0005                     	;# 
  1384  0006                     	;# 
  1385  0007                     	;# 
  1386  0008                     	;# 
  1387  0009                     	;# 
  1388  000A                     	;# 
  1389  000B                     	;# 
  1390  000C                     	;# 
  1391  000D                     	;# 
  1392  000E                     	;# 
  1393  0010                     	;# 
  1394  0011                     	;# 
  1395  0012                     	;# 
  1396  0015                     	;# 
  1397  0016                     	;# 
  1398  0016                     	;# 
  1399  0017                     	;# 
  1400  0018                     	;# 
  1401  0019                     	;# 
  1402  001A                     	;# 
  1403  001B                     	;# 
  1404  001C                     	;# 
  1405  008C                     	;# 
  1406  008D                     	;# 
  1407  008E                     	;# 
  1408  0090                     	;# 
  1409  0091                     	;# 
  1410  0092                     	;# 
  1411  0095                     	;# 
  1412  0096                     	;# 
  1413  0097                     	;# 
  1414  0099                     	;# 
  1415  009A                     	;# 
  1416  009B                     	;# 
  1417  009B                     	;# 
  1418  009C                     	;# 
  1419  009D                     	;# 
  1420  009E                     	;# 
  1421  010C                     	;# 
  1422  010D                     	;# 
  1423  010E                     	;# 
  1424  0116                     	;# 
  1425  0117                     	;# 
  1426  011D                     	;# 
  1427  018C                     	;# 
  1428  018D                     	;# 
  1429  018E                     	;# 
  1430  0191                     	;# 
  1431  0191                     	;# 
  1432  0192                     	;# 
  1433  0193                     	;# 
  1434  0193                     	;# 
  1435  0194                     	;# 
  1436  0195                     	;# 
  1437  0196                     	;# 
  1438  0197                     	;# 
  1439  0199                     	;# 
  1440  019A                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019C                     	;# 
  1446  019C                     	;# 
  1447  019D                     	;# 
  1448  019E                     	;# 
  1449  019F                     	;# 
  1450  020D                     	;# 
  1451  0210                     	;# 
  1452  0211                     	;# 
  1453  0211                     	;# 
  1454  0212                     	;# 
  1455  0212                     	;# 
  1456  0213                     	;# 
  1457  0213                     	;# 
  1458  0214                     	;# 
  1459  0214                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0216                     	;# 
  1464  0216                     	;# 
  1465  0217                     	;# 
  1466  0217                     	;# 
  1467  0291                     	;# 
  1468  0291                     	;# 
  1469  0292                     	;# 
  1470  0293                     	;# 
  1471  0298                     	;# 
  1472  0298                     	;# 
  1473  0299                     	;# 
  1474  029A                     	;# 
  1475  0394                     	;# 
  1476  0395                     	;# 
  1477  0396                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0090                     	;# 
  1520  0091                     	;# 
  1521  0092                     	;# 
  1522  0095                     	;# 
  1523  0096                     	;# 
  1524  0097                     	;# 
  1525  0099                     	;# 
  1526  009A                     	;# 
  1527  009B                     	;# 
  1528  009B                     	;# 
  1529  009C                     	;# 
  1530  009D                     	;# 
  1531  009E                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0197                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020D                     	;# 
  1562  0210                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0291                     	;# 
  1579  0291                     	;# 
  1580  0292                     	;# 
  1581  0293                     	;# 
  1582  0298                     	;# 
  1583  0298                     	;# 
  1584  0299                     	;# 
  1585  029A                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0011                     	;# 
  1617  0012                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  008C                     	;# 
  1628  008D                     	;# 
  1629  008E                     	;# 
  1630  0090                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0095                     	;# 
  1634  0096                     	;# 
  1635  0097                     	;# 
  1636  0099                     	;# 
  1637  009A                     	;# 
  1638  009B                     	;# 
  1639  009B                     	;# 
  1640  009C                     	;# 
  1641  009D                     	;# 
  1642  009E                     	;# 
  1643  010C                     	;# 
  1644  010D                     	;# 
  1645  010E                     	;# 
  1646  0116                     	;# 
  1647  0117                     	;# 
  1648  011D                     	;# 
  1649  018C                     	;# 
  1650  018D                     	;# 
  1651  018E                     	;# 
  1652  0191                     	;# 
  1653  0191                     	;# 
  1654  0192                     	;# 
  1655  0193                     	;# 
  1656  0193                     	;# 
  1657  0194                     	;# 
  1658  0195                     	;# 
  1659  0196                     	;# 
  1660  0197                     	;# 
  1661  0199                     	;# 
  1662  019A                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019D                     	;# 
  1670  019E                     	;# 
  1671  019F                     	;# 
  1672  020D                     	;# 
  1673  0210                     	;# 
  1674  0211                     	;# 
  1675  0211                     	;# 
  1676  0212                     	;# 
  1677  0212                     	;# 
  1678  0213                     	;# 
  1679  0213                     	;# 
  1680  0214                     	;# 
  1681  0214                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0216                     	;# 
  1686  0216                     	;# 
  1687  0217                     	;# 
  1688  0217                     	;# 
  1689  0291                     	;# 
  1690  0291                     	;# 
  1691  0292                     	;# 
  1692  0293                     	;# 
  1693  0298                     	;# 
  1694  0298                     	;# 
  1695  0299                     	;# 
  1696  029A                     	;# 
  1697  0394                     	;# 
  1698  0395                     	;# 
  1699  0396                     	;# 
  1700  0FE4                     	;# 
  1701  0FE5                     	;# 
  1702  0FE6                     	;# 
  1703  0FE7                     	;# 
  1704  0FE8                     	;# 
  1705  0FE9                     	;# 
  1706  0FEA                     	;# 
  1707  0FEB                     	;# 
  1708  0FED                     	;# 
  1709  0FEE                     	;# 
  1710  0FEF                     	;# 
  1711  0000                     	;# 
  1712  0001                     	;# 
  1713  0002                     	;# 
  1714  0003                     	;# 
  1715  0004                     	;# 
  1716  0005                     	;# 
  1717  0006                     	;# 
  1718  0007                     	;# 
  1719  0008                     	;# 
  1720  0009                     	;# 
  1721  000A                     	;# 
  1722  000B                     	;# 
  1723  000C                     	;# 
  1724  000D                     	;# 
  1725  000E                     	;# 
  1726  0010                     	;# 
  1727  0011                     	;# 
  1728  0012                     	;# 
  1729  0015                     	;# 
  1730  0016                     	;# 
  1731  0016                     	;# 
  1732  0017                     	;# 
  1733  0018                     	;# 
  1734  0019                     	;# 
  1735  001A                     	;# 
  1736  001B                     	;# 
  1737  001C                     	;# 
  1738  008C                     	;# 
  1739  008D                     	;# 
  1740  008E                     	;# 
  1741  0090                     	;# 
  1742  0091                     	;# 
  1743  0092                     	;# 
  1744  0095                     	;# 
  1745  0096                     	;# 
  1746  0097                     	;# 
  1747  0099                     	;# 
  1748  009A                     	;# 
  1749  009B                     	;# 
  1750  009B                     	;# 
  1751  009C                     	;# 
  1752  009D                     	;# 
  1753  009E                     	;# 
  1754  010C                     	;# 
  1755  010D                     	;# 
  1756  010E                     	;# 
  1757  0116                     	;# 
  1758  0117                     	;# 
  1759  011D                     	;# 
  1760  018C                     	;# 
  1761  018D                     	;# 
  1762  018E                     	;# 
  1763  0191                     	;# 
  1764  0191                     	;# 
  1765  0192                     	;# 
  1766  0193                     	;# 
  1767  0193                     	;# 
  1768  0194                     	;# 
  1769  0195                     	;# 
  1770  0196                     	;# 
  1771  0197                     	;# 
  1772  0199                     	;# 
  1773  019A                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019C                     	;# 
  1779  019C                     	;# 
  1780  019D                     	;# 
  1781  019E                     	;# 
  1782  019F                     	;# 
  1783  020D                     	;# 
  1784  0210                     	;# 
  1785  0211                     	;# 
  1786  0211                     	;# 
  1787  0212                     	;# 
  1788  0212                     	;# 
  1789  0213                     	;# 
  1790  0213                     	;# 
  1791  0214                     	;# 
  1792  0214                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0216                     	;# 
  1797  0216                     	;# 
  1798  0217                     	;# 
  1799  0217                     	;# 
  1800  0291                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0298                     	;# 
  1805  0298                     	;# 
  1806  0299                     	;# 
  1807  029A                     	;# 
  1808  0394                     	;# 
  1809  0395                     	;# 
  1810  0396                     	;# 
  1811  0FE4                     	;# 
  1812  0FE5                     	;# 
  1813  0FE6                     	;# 
  1814  0FE7                     	;# 
  1815  0FE8                     	;# 
  1816  0FE9                     	;# 
  1817  0FEA                     	;# 
  1818  0FEB                     	;# 
  1819  0FED                     	;# 
  1820  0FEE                     	;# 
  1821  0FEF                     	;# 
  1822  0000                     	;# 
  1823  0001                     	;# 
  1824  0002                     	;# 
  1825  0003                     	;# 
  1826  0004                     	;# 
  1827  0005                     	;# 
  1828  0006                     	;# 
  1829  0007                     	;# 
  1830  0008                     	;# 
  1831  0009                     	;# 
  1832  000A                     	;# 
  1833  000B                     	;# 
  1834  000C                     	;# 
  1835  000D                     	;# 
  1836  000E                     	;# 
  1837  0010                     	;# 
  1838  0011                     	;# 
  1839  0012                     	;# 
  1840  0015                     	;# 
  1841  0016                     	;# 
  1842  0016                     	;# 
  1843  0017                     	;# 
  1844  0018                     	;# 
  1845  0019                     	;# 
  1846  001A                     	;# 
  1847  001B                     	;# 
  1848  001C                     	;# 
  1849  008C                     	;# 
  1850  008D                     	;# 
  1851  008E                     	;# 
  1852  0090                     	;# 
  1853  0091                     	;# 
  1854  0092                     	;# 
  1855  0095                     	;# 
  1856  0096                     	;# 
  1857  0097                     	;# 
  1858  0099                     	;# 
  1859  009A                     	;# 
  1860  009B                     	;# 
  1861  009B                     	;# 
  1862  009C                     	;# 
  1863  009D                     	;# 
  1864  009E                     	;# 
  1865  010C                     	;# 
  1866  010D                     	;# 
  1867  010E                     	;# 
  1868  0116                     	;# 
  1869  0117                     	;# 
  1870  011D                     	;# 
  1871  018C                     	;# 
  1872  018D                     	;# 
  1873  018E                     	;# 
  1874  0191                     	;# 
  1875  0191                     	;# 
  1876  0192                     	;# 
  1877  0193                     	;# 
  1878  0193                     	;# 
  1879  0194                     	;# 
  1880  0195                     	;# 
  1881  0196                     	;# 
  1882  0197                     	;# 
  1883  0199                     	;# 
  1884  019A                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019C                     	;# 
  1890  019C                     	;# 
  1891  019D                     	;# 
  1892  019E                     	;# 
  1893  019F                     	;# 
  1894  020D                     	;# 
  1895  0210                     	;# 
  1896  0211                     	;# 
  1897  0211                     	;# 
  1898  0212                     	;# 
  1899  0212                     	;# 
  1900  0213                     	;# 
  1901  0213                     	;# 
  1902  0214                     	;# 
  1903  0214                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0216                     	;# 
  1908  0216                     	;# 
  1909  0217                     	;# 
  1910  0217                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0298                     	;# 
  1916  0298                     	;# 
  1917  0299                     	;# 
  1918  029A                     	;# 
  1919  0394                     	;# 
  1920  0395                     	;# 
  1921  0396                     	;# 
  1922  0FE4                     	;# 
  1923  0FE5                     	;# 
  1924  0FE6                     	;# 
  1925  0FE7                     	;# 
  1926  0FE8                     	;# 
  1927  0FE9                     	;# 
  1928  0FEA                     	;# 
  1929  0FEB                     	;# 
  1930  0FED                     	;# 
  1931  0FEE                     	;# 
  1932  0FEF                     	;# 
  1933  0000                     	;# 
  1934  0001                     	;# 
  1935  0002                     	;# 
  1936  0003                     	;# 
  1937  0004                     	;# 
  1938  0005                     	;# 
  1939  0006                     	;# 
  1940  0007                     	;# 
  1941  0008                     	;# 
  1942  0009                     	;# 
  1943  000A                     	;# 
  1944  000B                     	;# 
  1945  000C                     	;# 
  1946  000D                     	;# 
  1947  000E                     	;# 
  1948  0010                     	;# 
  1949  0011                     	;# 
  1950  0012                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  0090                     	;# 
  1964  0091                     	;# 
  1965  0092                     	;# 
  1966  0095                     	;# 
  1967  0096                     	;# 
  1968  0097                     	;# 
  1969  0099                     	;# 
  1970  009A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  010C                     	;# 
  1977  010D                     	;# 
  1978  010E                     	;# 
  1979  0116                     	;# 
  1980  0117                     	;# 
  1981  011D                     	;# 
  1982  018C                     	;# 
  1983  018D                     	;# 
  1984  018E                     	;# 
  1985  0191                     	;# 
  1986  0191                     	;# 
  1987  0192                     	;# 
  1988  0193                     	;# 
  1989  0193                     	;# 
  1990  0194                     	;# 
  1991  0195                     	;# 
  1992  0196                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  019A                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019C                     	;# 
  2001  019C                     	;# 
  2002  019D                     	;# 
  2003  019E                     	;# 
  2004  019F                     	;# 
  2005  020D                     	;# 
  2006  0210                     	;# 
  2007  0211                     	;# 
  2008  0211                     	;# 
  2009  0212                     	;# 
  2010  0212                     	;# 
  2011  0213                     	;# 
  2012  0213                     	;# 
  2013  0214                     	;# 
  2014  0214                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0216                     	;# 
  2019  0216                     	;# 
  2020  0217                     	;# 
  2021  0217                     	;# 
  2022  0291                     	;# 
  2023  0291                     	;# 
  2024  0292                     	;# 
  2025  0293                     	;# 
  2026  0298                     	;# 
  2027  0298                     	;# 
  2028  0299                     	;# 
  2029  029A                     	;# 
  2030  0394                     	;# 
  2031  0395                     	;# 
  2032  0396                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;# 
  2044  0000                     	;# 
  2045  0001                     	;# 
  2046  0002                     	;# 
  2047  0003                     	;# 
  2048  0004                     	;# 
  2049  0005                     	;# 
  2050  0006                     	;# 
  2051  0007                     	;# 
  2052  0008                     	;# 
  2053  0009                     	;# 
  2054  000A                     	;# 
  2055  000B                     	;# 
  2056  000C                     	;# 
  2057  000D                     	;# 
  2058  000E                     	;# 
  2059  0010                     	;# 
  2060  0011                     	;# 
  2061  0012                     	;# 
  2062  0015                     	;# 
  2063  0016                     	;# 
  2064  0016                     	;# 
  2065  0017                     	;# 
  2066  0018                     	;# 
  2067  0019                     	;# 
  2068  001A                     	;# 
  2069  001B                     	;# 
  2070  001C                     	;# 
  2071  008C                     	;# 
  2072  008D                     	;# 
  2073  008E                     	;# 
  2074  0090                     	;# 
  2075  0091                     	;# 
  2076  0092                     	;# 
  2077  0095                     	;# 
  2078  0096                     	;# 
  2079  0097                     	;# 
  2080  0099                     	;# 
  2081  009A                     	;# 
  2082  009B                     	;# 
  2083  009B                     	;# 
  2084  009C                     	;# 
  2085  009D                     	;# 
  2086  009E                     	;# 
  2087  010C                     	;# 
  2088  010D                     	;# 
  2089  010E                     	;# 
  2090  0116                     	;# 
  2091  0117                     	;# 
  2092  011D                     	;# 
  2093  018C                     	;# 
  2094  018D                     	;# 
  2095  018E                     	;# 
  2096  0191                     	;# 
  2097  0191                     	;# 
  2098  0192                     	;# 
  2099  0193                     	;# 
  2100  0193                     	;# 
  2101  0194                     	;# 
  2102  0195                     	;# 
  2103  0196                     	;# 
  2104  0197                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019C                     	;# 
  2113  019D                     	;# 
  2114  019E                     	;# 
  2115  019F                     	;# 
  2116  020D                     	;# 
  2117  0210                     	;# 
  2118  0211                     	;# 
  2119  0211                     	;# 
  2120  0212                     	;# 
  2121  0212                     	;# 
  2122  0213                     	;# 
  2123  0213                     	;# 
  2124  0214                     	;# 
  2125  0214                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0216                     	;# 
  2130  0216                     	;# 
  2131  0217                     	;# 
  2132  0217                     	;# 
  2133  0291                     	;# 
  2134  0291                     	;# 
  2135  0292                     	;# 
  2136  0293                     	;# 
  2137  0298                     	;# 
  2138  0298                     	;# 
  2139  0299                     	;# 
  2140  029A                     	;# 
  2141  0394                     	;# 
  2142  0395                     	;# 
  2143  0396                     	;# 
  2144  0FE4                     	;# 
  2145  0FE5                     	;# 
  2146  0FE6                     	;# 
  2147  0FE7                     	;# 
  2148  0FE8                     	;# 
  2149  0FE9                     	;# 
  2150  0FEA                     	;# 
  2151  0FEB                     	;# 
  2152  0FED                     	;# 
  2153  0FEE                     	;# 
  2154  0FEF                     	;# 
  2155                           
  2156                           	psect	idataBANK4
  2157  1F34                     __pidataBANK4:	
  2158                           
  2159                           ;initializer for __product
  2160  1F34  3463               	retlw	99
  2161  1F35  3402               	retlw	2
  2162  1F36  3400               	retlw	0
  2163  1F37  3400               	retlw	0
  2164  1F38  3400               	retlw	0
  2165  1F39  3400               	retlw	0
  2166  1F3A  3400               	retlw	0
  2167  1F3B  3400               	retlw	0
  2168  1F3C  3400               	retlw	0
  2169  1F3D  3400               	retlw	0
  2170  1F3E  3400               	retlw	0
  2171  1F3F  3400               	retlw	0
  2172  1F40  34FF               	retlw	255
  2173  1F41  34FF               	retlw	255
  2174  1F42  34FF               	retlw	255
  2175  1F43  3400               	retlw	0
  2176  1F44  3400               	retlw	0
  2177  1F45  3400               	retlw	0
  2178  1F46  3400               	retlw	0
  2179  1F47  3400               	retlw	0
  2180  1F48  3400               	retlw	0
  2181  1F49  3400               	retlw	0
  2182  1F4A  3400               	retlw	0
  2183  1F4B  3400               	retlw	0
  2184  1F4C  3400               	retlw	0
  2185  1F4D  3400               	retlw	0
  2186  1F4E  3400               	retlw	0
  2187  1F4F  3400               	retlw	0
  2188  1F50  3400               	retlw	0
  2189  1F51  3400               	retlw	0
  2190  1F52  3400               	retlw	0
  2191  1F53  3400               	retlw	0
  2192                           
  2193                           	psect	stringtext
  2194  1000                     __pstringtext:	
  2195  1000                     _CC2500_registers_address:	
  2196  1000  3403               	retlw	3
  2197  1001  3416               	retlw	22
  2198  1002  3417               	retlw	23
  2199  1003  341E               	retlw	30
  2200  1004  341F               	retlw	31
  2201  1005  3420               	retlw	32
  2202  1006  342A               	retlw	42
  2203  1007  342B               	retlw	43
  2204  1008  340B               	retlw	11
  2205  1009  340C               	retlw	12
  2206  100A  340D               	retlw	13
  2207  100B  340E               	retlw	14
  2208  100C  340F               	retlw	15
  2209  100D  3410               	retlw	16
  2210  100E  3411               	retlw	17
  2211  100F  3412               	retlw	18
  2212  1010  3413               	retlw	19
  2213  1011  3414               	retlw	20
  2214  1012  340A               	retlw	10
  2215  1013  3415               	retlw	21
  2216  1014  3421               	retlw	33
  2217  1015  3422               	retlw	34
  2218  1016  3418               	retlw	24
  2219  1017  3419               	retlw	25
  2220  1018  341A               	retlw	26
  2221  1019  341B               	retlw	27
  2222  101A  341C               	retlw	28
  2223  101B  341D               	retlw	29
  2224  101C  3423               	retlw	35
  2225  101D  3424               	retlw	36
  2226  101E  3425               	retlw	37
  2227  101F  3426               	retlw	38
  2228  1020  3429               	retlw	41
  2229  1021  342C               	retlw	44
  2230  1022  342D               	retlw	45
  2231  1023  342E               	retlw	46
  2232  1024  3400               	retlw	0
  2233  1025  3401               	retlw	1
  2234  1026  3402               	retlw	2
  2235  1027  3407               	retlw	7
  2236  1028  3408               	retlw	8
  2237  1029  3409               	retlw	9
  2238  102A  3406               	retlw	6
  2239  102B  3404               	retlw	4
  2240  102C  3405               	retlw	5
  2241  102D  3427               	retlw	39
  2242  102E  3428               	retlw	40
  2243  102F                     __end_of_CC2500_registers_address:	
  2244  102F                     _CC2500_rfSettings:	
  2245  102F  3407               	retlw	7
  2246  1030  3407               	retlw	7
  2247  1031  3430               	retlw	48
  2248  1032  3487               	retlw	135
  2249  1033  346B               	retlw	107
  2250  1034  34F8               	retlw	248
  2251  1035  347F               	retlw	127
  2252  1036  343F               	retlw	63
  2253  1037  3409               	retlw	9
  2254  1038  3400               	retlw	0
  2255  1039  345C               	retlw	92
  2256  103A  34A7               	retlw	167
  2257  103B  3462               	retlw	98
  2258  103C  3486               	retlw	134
  2259  103D  3483               	retlw	131
  2260  103E  3403               	retlw	3
  2261  103F  3422               	retlw	34
  2262  1040  34F8               	retlw	248
  2263  1041  3400               	retlw	0
  2264  1042  3444               	retlw	68
  2265  1043  34B6               	retlw	182
  2266  1044  3410               	retlw	16
  2267  1045  3418               	retlw	24
  2268  1046  341D               	retlw	29
  2269  1047  341C               	retlw	28
  2270  1048  34C7               	retlw	199
  2271  1049  3400               	retlw	0
  2272  104A  34B2               	retlw	178
  2273  104B  34EA               	retlw	234
  2274  104C  340A               	retlw	10
  2275  104D  3400               	retlw	0
  2276  104E  3411               	retlw	17
  2277  104F  3459               	retlw	89
  2278  1050  3488               	retlw	136
  2279  1051  3431               	retlw	49
  2280  1052  340B               	retlw	11
  2281  1053  342F               	retlw	47
  2282  1054  342E               	retlw	46
  2283  1055  3406               	retlw	6
  2284  1056  3404               	retlw	4
  2285  1057  3405               	retlw	5
  2286  1058  3400               	retlw	0
  2287  1059  3430               	retlw	48
  2288  105A  34D3               	retlw	211
  2289  105B  3491               	retlw	145
  2290  105C  3441               	retlw	65
  2291  105D  3400               	retlw	0
  2292  105E                     __end_of_CC2500_rfSettings:	
  2293  105E                     _CC2500_patable_vaule:	
  2294  105E  34FE               	retlw	254
  2295  105F  34FE               	retlw	254
  2296  1060  34FE               	retlw	254
  2297  1061  34FE               	retlw	254
  2298  1062  34FE               	retlw	254
  2299  1063  34FE               	retlw	254
  2300  1064  34FE               	retlw	254
  2301  1065  34FE               	retlw	254
  2302  1066                     __end_of_CC2500_patable_vaule:	
  2303                           
  2304                           	psect	nvBANK0
  2305  006E                     __pnvBANK0:	
  2306  006E                     _product:	
  2307  006E                     	ds	1
  2308  000C                     _PORTA	set	12
  2309  000D                     _PORTB	set	13
  2310  000E                     _PORTC	set	14
  2311  0018                     _T1CON	set	24
  2312  0017                     _TMR1H	set	23
  2313  0016                     _TMR1L	set	22
  2314  005F                     _GIE	set	95
  2315  005B                     _IOCIE	set	91
  2316  0058                     _IOCIF	set	88
  2317  005E                     _PEIE	set	94
  2318  0060                     _RA0	set	96
  2319  0064                     _RA4	set	100
  2320  0066                     _RA6	set	102
  2321  0067                     _RA7	set	103
  2322  0068                     _RB0	set	104
  2323  0069                     _RB1	set	105
  2324  006A                     _RB2	set	106
  2325  006B                     _RB3	set	107
  2326  006D                     _RB5	set	109
  2327  0070                     _RC0	set	112
  2328  0071                     _RC1	set	113
  2329  0073                     _RC3	set	115
  2330  0074                     _RC4	set	116
  2331  0075                     _RC5	set	117
  2332  0088                     _TMR1IF	set	136
  2333  009D                     _ADCON0	set	157
  2334  009E                     _ADCON1	set	158
  2335  009C                     _ADRESH	set	156
  2336  009B                     _ADRESL	set	155
  2337  0099                     _OSCCON	set	153
  2338  008C                     _TRISA	set	140
  2339  008D                     _TRISB	set	141
  2340  008E                     _TRISC	set	142
  2341  0097                     _WDTCON	set	151
  2342  04E9                     _GO_nDONE	set	1257
  2343  0488                     _TMR1IE	set	1160
  2344  0117                     _FVRCON	set	279
  2345  010C                     _LATA	set	268
  2346  010D                     _LATB	set	269
  2347  010E                     _LATC	set	270
  2348  018C                     _ANSELA	set	396
  2349  018D                     _ANSELB	set	397
  2350  018E                     _ANSELC	set	398
  2351  0192                     _PMADRH	set	402
  2352  0191                     _PMADRL	set	401
  2353  0196                     _PMCON2	set	406
  2354  0194                     _PMDATH	set	404
  2355  0193                     _PMDATL	set	403
  2356  0CAE                     _CFGS	set	3246
  2357  0CAC                     _FREE	set	3244
  2358  0CAD                     _LWLO	set	3245
  2359  0CA8                     _RD	set	3240
  2360  0CA9                     _WR	set	3241
  2361  0CAA                     _WREN	set	3242
  2362  1069                     _WPUB1	set	4201
  2363  106A                     _WPUB2	set	4202
  2364  0396                     _IOCBF	set	918
  2365  0395                     _IOCBN	set	917
  2366  0394                     _IOCBP	set	916
  2367  1CB2                     _IOCBF2	set	7346
  2368                           
  2369                           ; #config settings
  2370  0000                     
  2371                           	psect	cinit
  2372  0015                     start_initialization:	
  2373  0015                     __initialization:	
  2374                           
  2375                           ; Clear objects allocated to BITCOMMON
  2376  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2377                           
  2378                           ; Clear objects allocated to COMMON
  2379  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2380  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2381  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2382  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2383  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001C  30A0               	movlw	low __pbssBANK1
  2390  001D  0084               	movwf	4
  2391  001E  3000               	movlw	high __pbssBANK1
  2392  001F  0085               	movwf	5
  2393  0020  3049               	movlw	73
  2394  0021  319B  23DF  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0024  3020               	movlw	low __pbssBANK2
  2398  0025  0084               	movwf	4
  2399  0026  3001               	movlw	high __pbssBANK2
  2400  0027  0085               	movwf	5
  2401  0028  304F               	movlw	79
  2402  0029  319B  23DF  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002C  30A0               	movlw	low __pbssBANK3
  2406  002D  0084               	movwf	4
  2407  002E  3001               	movlw	high __pbssBANK3
  2408  002F  0085               	movwf	5
  2409  0030  3046               	movlw	70
  2410  0031  319B  23DF  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0034  3034               	movlw	low __pidataBANK4
  2414  0035  0084               	movwf	4
  2415  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2416  0037  0085               	movwf	5
  2417  0038  3020               	movlw	low __pdataBANK4
  2418  0039  0086               	movwf	6
  2419  003A  3002               	movlw	high __pdataBANK4
  2420  003B  0087               	movwf	7
  2421  003C  3020               	movlw	32
  2422  003D  319B  23D9         	fcall	init_ram
  2423  003F                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003F                     __end_of__initialization:	
  2427  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  0040  0020               	movlb	0
  2429  0041  3196  2E9A         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03E8                     __pbitbssCOMMON:	
  2433  03E8                     _Receive_OK:	
  2434  03E8                     	ds	1
  2435  03E9                     _Transceive_OK:	
  2436  03E9                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0078                     __pbssCOMMON:	
  2440  0078                     _DelayOff:	
  2441  0078                     	ds	1
  2442  0079                     _DimmerLightsIntr:	
  2443  0079                     	ds	1
  2444  007A                     _LED:	
  2445  007A                     	ds	1
  2446  007B                     _SPI0Buffer:	
  2447  007B                     	ds	1
  2448  007C                     _Sw:	
  2449  007C                     	ds	1
  2450                           
  2451                           	psect	bssBANK0
  2452  006F                     __pbssBANK0:	
  2453  006F                     _DimmerLights:	
  2454  006F                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _myMain:	
  2459  00A0                     	ds	14
  2460  00AE                     _Buz1:	
  2461  00AE                     	ds	12
  2462  00BA                     _RF1:	
  2463  00BA                     	ds	12
  2464  00C6                     _Timer1:	
  2465  00C6                     	ds	3
  2466  00C9                     _RF_Count:	
  2467  00C9                     	ds	2
  2468  00CB                     _WDT:	
  2469  00CB                     	ds	2
  2470  00CD                     _CRC:	
  2471  00CD                     	ds	1
  2472  00CE                     _DimmerLights11:	
  2473  00CE                     	ds	1
  2474  00CF                     _DimmerLightsIntrIOC:	
  2475  00CF                     	ds	1
  2476  00D0                     _RSSI:	
  2477  00D0                     	ds	1
  2478  00D1                     _Rx_Length:	
  2479  00D1                     	ds	1
  2480  00D2                     _SwDetect:	
  2481  00D2                     	ds	1
  2482  00D3                     _Tx_Length:	
  2483  00D3                     	ds	1
  2484  00D4                     _r_address:	
  2485  00D4                     	ds	1
  2486  00D5                     _r_data:	
  2487  00D5                     	ds	1
  2488  00D6                     _s_data:	
  2489  00D6                     	ds	1
  2490  00D7                     _Temp:	
  2491  00D7                     	ds	18
  2492                           
  2493                           	psect	bssBANK2
  2494  0120                     __pbssBANK2:	
  2495  0120                     _RF_Data:	
  2496  0120                     	ds	30
  2497  013E                     _Dimmer:	
  2498  013E                     	ds	3
  2499  0141                     _Load:	
  2500  0141                     	ds	46
  2501                           
  2502                           	psect	bssBANK3
  2503  01A0                     __pbssBANK3:	
  2504  01A0                     _Memory:	
  2505  01A0                     	ds	37
  2506  01C5                     _DimmerLights1:	
  2507  01C5                     	ds	15
  2508  01D4                     _Sw1:	
  2509  01D4                     	ds	9
  2510  01DD                     _DlySw1:	
  2511  01DD                     	ds	5
  2512  01E2                     _VarErrLED:	
  2513  01E2                     	ds	4
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1BDF                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1BDF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1BE0                     clrloop0:	
  2527  1BE0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1BE1  3101               	addfsr 0,1
  2529  1BE2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1BE3  2BE0               	goto	clrloop0	;have we reached the end yet?
  2531  1BE4  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1BD9                     init_ram:	
  2535  1BD9  00FE               	movwf	126
  2536  1BDA                     initloop:	
  2537  1BDA  0012               	moviw fsr0++
  2538  1BDB  001E               	movwi fsr1++
  2539  1BDC  0BFE               	decfsz	126,f
  2540  1BDD  2BDA               	goto	initloop
  2541  1BDE  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK1
  2544  00E9                     __pcstackBANK1:	
  2545  00E9                     setRF_Main@loop_f:	
  2546                           
  2547                           ; 1 bytes @ 0x0
  2548  00E9                     	ds	1
  2549  00EA                     setRF_Main@Receive_OK:	
  2550                           
  2551                           ; 1 bytes @ 0x1
  2552  00EA                     	ds	1
  2553  00EB                     setRF_Main@error:	
  2554                           
  2555                           ; 1 bytes @ 0x2
  2556  00EB                     	ds	1
  2557  00EC                     ?_main:	
  2558  00EC                     main@argc:	
  2559                           ; 2 bytes @ 0x3
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0x3
  2563  00EC                     	ds	2
  2564  00EE                     main@argv:	
  2565                           
  2566                           ; 2 bytes @ 0x5
  2567  00EE                     	ds	2
  2568                           
  2569                           	psect	cstackCOMMON
  2570  0070                     __pcstackCOMMON:	
  2571  0070                     ?_Timeout_Counter:	
  2572  0070                     ?_set_TimeoutCleared:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_WriteByte:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_CC2500_WriteCommand:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_ReadStatus:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_ReadByte:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_PowerRST:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_InitSetREG:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_InitPATable:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ClearTXFIFO:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_ClearRXFIFO:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_FrequencyCabr:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_SIDLEMode:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DlyOff_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DlyOff_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setDimmerLights_ErrorClose:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_Dimmer_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setDimmerLights_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_Line:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setTxData:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setLED_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setLED_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Fosc_Set:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_IO_Set:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_TMR1_Set:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_ADC_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_IOC_Set:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_WDT_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_IOC_ISR:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR1_ISR:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Write:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Flash_Memory_Modify:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_WDT_Clearing:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_myMain_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Temp_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Load_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Switch_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_RF_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_getLoad_AD:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_getTemp_AD:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_my_MainTimer:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Temp_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Load_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Switch_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_RF_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setLoad_AH_AL_Restore:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setTemp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setTemp_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setRF_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setRF_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_RxDisable:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getRxData:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setLog_Code:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setControl_Lights_Table:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRFSW_Control:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRFSW_AdjControl:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setRF_DimmerValue:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setSw_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setSw_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Buzzer_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_TxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_RxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_CC2500_PowerOnInitial:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOffPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayOff_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??_DimmerIntrIOCPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerIntrPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLightsPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_Main:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOn:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_SwOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_AdjRF:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerReClock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Unlock:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Flash_Memory_Erasing:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_Modify:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMemory_LoopSave:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_setMain_Exception:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_setRF_Learn:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_TouchPower:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_SwPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_DelayTimejudge:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_All_Error_Status:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_getLoad_OK:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getMain_LightsStatus:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_setPercentValue:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_getPercentValue:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Read:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getRF_KeyStatus:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getSw_KeyStatus:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDelayOff_GO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getAll_DimmerLights_AdjGO:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmer_LoadOK:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Line:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_Lights_Count:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_LoadOK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     getSw_KeyStatus@sw:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x0
  2916  0070                     	ds	1
  2917  0071                     DimmerIntrIOCPointSelect@lights:	
  2918  0071                     DimmerIntrPointSelect@lights:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921                           
  2922                           ; 1 bytes @ 0x1
  2923  0071                     	ds	1
  2924  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2925  0072                     ??_setDimmerLights_IntrControl:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2929                           ; 0 bytes @ 0x2
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2
  2933  0072                     	ds	1
  2934  0073                     ??_IOC_ISR:	
  2935  0073                     ??_setDimmerReClock:	
  2936                           ; 0 bytes @ 0x3
  2937                           
  2938                           
  2939                           ; 0 bytes @ 0x3
  2940  0073                     	ds	3
  2941  0076                     setDimmerLights_IntrControl@lights:	
  2942                           
  2943                           ; 1 bytes @ 0x6
  2944  0076                     	ds	1
  2945  0077                     ??_TMR1_ISR:	
  2946  0077                     ??_ISR:	
  2947                           ; 0 bytes @ 0x7
  2948                           
  2949                           
  2950                           ; 0 bytes @ 0x7
  2951  0077                     	ds	1
  2952                           
  2953                           	psect	cstackBANK0
  2954  0020                     __pcstackBANK0:	
  2955  0020                     ??_Timeout_Counter:	
  2956  0020                     ??_set_TimeoutCleared:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_CC2500_WriteByte:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_CC2500_ReadByte:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ?_DelayTime_1us:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_Dimmer_Initialization:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_getMain_All_Error_Status:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_getLoad_OK:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setDimmerLights_Line:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ?_setRF_DimmerLights:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_setTxData:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_Fosc_Set:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_IO_Set:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_TMR1_Set:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_ADC_Set:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_IOC_Set:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_WDT_Set:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Flash_Memory_Read:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ?_setMemory_Data:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_Flash_Memory_Write:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_WDT_Clearing:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_myMain_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_Temp_Initialization:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setLoad_AH_AL_Restore:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_setTemp_Initialization:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_setRF_Initialization:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getRF_KeyStatus:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_getSw_KeyStatus:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Buzzer_Initialization:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_Buzzer_Main:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_DelayOffPointSelect:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_DimmerLightsPointSelect:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getAll_DimmerLights_AdjGO:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_getDimmer_LoadOK:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_getDimmerLights_Line:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_LedPointSelect:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Unlock:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Flash_Memory_Erasing:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_setMemory_Modify:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_setMemory_LoopSave:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Main:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getMain_Lights_Count:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_setRF_Learn:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_TouchPower:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_SwPointSelect:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ?___bmul:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ?_getBuz_GO:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0020                     ?_getAD:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     ?___awdiv:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100  0020                     ?___lwdiv:	
  3101                           ; 2 bytes @ 0x0
  3102                           
  3103  0020                     ?___ftpack:	
  3104                           ; 2 bytes @ 0x0
  3105                           
  3106  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3107                           ; 3 bytes @ 0x0
  3108                           
  3109  0020                     getDimmer_LoadOK@status:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     setDimmerLights_Line@lights:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0020                     getDimmerLights_Line@line:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     getAD@adcon1:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0020                     setMemory_Data@data:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0020                     getMain_Lights_Count@count:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     getLoad_OK@ok:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     setRF_DimmerLights@on:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0020                     ___bmul@multiplicand:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     DelayTime_1us@count:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     ___awdiv@divisor:	
  3140                           ; 2 bytes @ 0x0
  3141                           
  3142  0020                     ___lwdiv@divisor:	
  3143                           ; 2 bytes @ 0x0
  3144                           
  3145  0020                     ___ftpack@arg:	
  3146                           ; 2 bytes @ 0x0
  3147                           
  3148                           
  3149                           ; 3 bytes @ 0x0
  3150  0020                     	ds	1
  3151  0021                     ??_setRF_DimmerLights:	
  3152  0021                     ??_setMemory_Data:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_RF_Initialization:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??_Mcu_Initialization:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_getMain_LoadOK:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??___bmul:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     CC2500_WriteByte@loop_a:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     CC2500_ReadByte@loop_b:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  0021                     DelayOffPointSelect@sw:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0021                     DimmerLightsPointSelect@lights:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     LedPointSelect@led:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     Flash_Memory_Read@i:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     Flash_Memory_Write@i:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     setMemory_Modify@command:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     setMemory_LoopSave@command:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     getMain_Lights_Count@status2:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     setLoad_AH_AL_Restore@i:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     setRF_Learn@command:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     getRF_KeyStatus@key:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     SwPointSelect@sw:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     getSw_KeyStatus@status:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     _getMain_All_Error_Status$3320:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215                           
  3216                           ; 2 bytes @ 0x1
  3217  0021                     	ds	1
  3218  0022                     ??_CC2500_WriteCommand:	
  3219  0022                     ??_CC2500_ReadStatus:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ??_DelayTime_1us:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ?_CC2500_WriteREG:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ??_DlyOff_Initialization:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     ??_setDimmerLights_Initialization:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ?_setDimmerLights_Trigger:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ?_setDimmerLights_TriggerAdj:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ?_setLED:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_setLED_Main:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_Load_Initialization:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ??_getBuz_GO:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ??_getDelayOff_GO:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_getDimmerLights_Status:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     CC2500_WriteREG@value:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     DlyOff_Initialization@sw:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     getDelayOff_GO@sw:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     getDimmerLights_Status@lights:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     setDimmerLights_Trigger@command:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     setDimmerLights_TriggerAdj@command:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     setLED@command:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     Flash_Memory_Read@address:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     setMemory_Data@address:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     getMain_Lights_Count@status3:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     getMain_LoadOK@ok:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     _getRF_KeyStatus$4884:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     _getSw_KeyStatus$5828:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     ___bmul@product:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     DelayTime_1us@i:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     ___awdiv@dividend:	
  3304                           ; 2 bytes @ 0x2
  3305                           
  3306  0022                     ___lwdiv@dividend:	
  3307                           ; 2 bytes @ 0x2
  3308                           
  3309                           
  3310                           ; 2 bytes @ 0x2
  3311  0022                     	ds	1
  3312  0023                     ??_CC2500_WriteREG:	
  3313  0023                     ??_setDimmerLights_Trigger:	
  3314                           ; 0 bytes @ 0x3
  3315                           
  3316  0023                     ??_setDimmerLights_TriggerAdj:	
  3317                           ; 0 bytes @ 0x3
  3318                           
  3319  0023                     ??_setLED:	
  3320                           ; 0 bytes @ 0x3
  3321                           
  3322  0023                     ??_DelayOff_Initialization:	
  3323                           ; 0 bytes @ 0x3
  3324                           
  3325  0023                     ??_getAD:	
  3326                           ; 0 bytes @ 0x3
  3327                           
  3328  0023                     CC2500_WriteCommand@command:	
  3329                           ; 0 bytes @ 0x3
  3330                           
  3331  0023                     CC2500_ReadStatus@status_addr:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     getDelayOff_GO@go:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     setDimmerLights_Initialization@lights:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     getDimmerLights_Status@status:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     setLED@led:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     getAD@adcon0:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     Flash_Memory_Read@ret:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setRF_DimmerLights@status:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     ___bmul@multiplier:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     ___ftpack@exp:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     _getMain_All_Error_Status$3321:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x3
  3369  0023                     	ds	1
  3370  0024                     ??_CC2500_ClearTXFIFO:	
  3371  0024                     ??_CC2500_ClearRXFIFO:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_CC2500_SIDLEMode:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_DelayTimejudge:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_getMain_LightsStatus:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_setLED_Initialization:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_Flash_Memory_Modify:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_getLoad_AD:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??_getTemp_AD:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??_RF_RxDisable:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     ??_setSw_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_CC2500_TxData:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_CC2500_RxData:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_DimmerLights_Initialization:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??___awdiv:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??___lwdiv:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     CC2500_WriteREG@w_addr:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     setDimmerLights_Trigger@lights:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     setDimmerLights_TriggerAdj@lights:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0024                     setLED_Initialization@led:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0024                     setLED_Main@led:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0024                     setRF_DimmerLights@lights:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     setSw_Initialization@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0024                     ___ftpack@sign:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0024                     getBuz_GO@i:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0024                     DelayTime_1us@j:	
  3444                           ; 2 bytes @ 0x4
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x4
  3448  0024                     	ds	1
  3449  0025                     ??_CC2500_InitSetREG:	
  3450  0025                     ??_CC2500_InitPATable:	
  3451                           ; 0 bytes @ 0x5
  3452                           
  3453  0025                     ??_Switch_Initialization:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0025                     ??___ftpack:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0025                     ??_setDimmerLights_AdjControl:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0025                     ??_LED_Initialization:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0025                     ??_LED_Main:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0025                     CC2500_TxData@loop_e:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0025                     CC2500_RxData@loop_f:	
  3472                           ; 1 bytes @ 0x5
  3473                           
  3474  0025                     Flash_Memory_Modify@i:	
  3475                           ; 1 bytes @ 0x5
  3476                           
  3477  0025                     getMain_LightsStatus@count:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0025                     getMain_All_Error_Status@command:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0025                     getTemp_AD@channel:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0025                     ___awdiv@counter:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0025                     ___lwdiv@quotient:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492                           
  3493                           ; 2 bytes @ 0x5
  3494  0025                     	ds	1
  3495  0026                     ??_CC2500_PowerRST:	
  3496  0026                     ??_CC2500_FrequencyCabr:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0026                     CC2500_InitSetREG@temp1:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0026                     CC2500_InitPATable@temp:	
  3503                           ; 1 bytes @ 0x6
  3504                           
  3505  0026                     DelayTimejudge@i:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0026                     setDimmerLights_AdjControl@idle:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0026                     getMain_All_Error_Status@status:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514  0026                     getLoad_AD@channel:	
  3515                           ; 1 bytes @ 0x6
  3516                           
  3517  0026                     ___awdiv@sign:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0026                     getMain_LightsStatus@i:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523                           
  3524                           ; 2 bytes @ 0x6
  3525  0026                     	ds	1
  3526  0027                     CC2500_InitSetREG@temp2:	
  3527  0027                     CC2500_InitPATable@loop_d:	
  3528                           ; 1 bytes @ 0x7
  3529                           
  3530  0027                     DelayTimejudge@j:	
  3531                           ; 1 bytes @ 0x7
  3532                           
  3533  0027                     _setDimmerLights_AdjControl$2113:	
  3534                           ; 1 bytes @ 0x7
  3535                           
  3536  0027                     getLoad_AD@k:	
  3537                           ; 1 bytes @ 0x7
  3538                           
  3539  0027                     ___lwdiv@counter:	
  3540                           ; 1 bytes @ 0x7
  3541                           
  3542  0027                     ___awdiv@quotient:	
  3543                           ; 1 bytes @ 0x7
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x7
  3547  0027                     	ds	1
  3548  0028                     ?___awtoft:	
  3549  0028                     CC2500_InitSetREG@loop_c:	
  3550                           ; 3 bytes @ 0x8
  3551                           
  3552  0028                     DelayTimejudge@k:	
  3553                           ; 1 bytes @ 0x8
  3554                           
  3555  0028                     setDimmerLights_AdjControl@sw:	
  3556                           ; 1 bytes @ 0x8
  3557                           
  3558  0028                     getMain_LightsStatus@status:	
  3559                           ; 1 bytes @ 0x8
  3560                           
  3561  0028                     getLoad_AD@j:	
  3562                           ; 1 bytes @ 0x8
  3563                           
  3564  0028                     ___awtoft@c:	
  3565                           ; 1 bytes @ 0x8
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x8
  3569  0028                     	ds	1
  3570  0029                     ??_Load_Main:	
  3571  0029                     ?_setBuz:	
  3572                           ; 0 bytes @ 0x9
  3573                           
  3574  0029                     ??_CC2500_PowerOnInitial:	
  3575                           ; 0 bytes @ 0x9
  3576                           
  3577  0029                     ??_Flash_Memory_Main:	
  3578                           ; 0 bytes @ 0x9
  3579                           
  3580  0029                     DelayTimejudge@value:	
  3581                           ; 0 bytes @ 0x9
  3582                           
  3583  0029                     getLoad_AD@i:	
  3584                           ; 1 bytes @ 0x9
  3585                           
  3586  0029                     setBuz@time:	
  3587                           ; 1 bytes @ 0x9
  3588                           
  3589                           
  3590                           ; 2 bytes @ 0x9
  3591  0029                     	ds	1
  3592  002A                     ?_setDelayOff_GO:	
  3593  002A                     setDelayOff_GO@command:	
  3594                           ; 0 bytes @ 0xA
  3595                           
  3596                           
  3597                           ; 1 bytes @ 0xA
  3598  002A                     	ds	1
  3599  002B                     ??_setBuz:	
  3600  002B                     ??___awtoft:	
  3601                           ; 0 bytes @ 0xB
  3602                           
  3603  002B                     setDelayOff_GO@value:	
  3604                           ; 0 bytes @ 0xB
  3605                           
  3606  002B                     Load_Main@j:	
  3607                           ; 1 bytes @ 0xB
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0xB
  3611  002B                     	ds	1
  3612  002C                     ??_setDelayOff_GO:	
  3613  002C                     setBuz@count:	
  3614                           ; 0 bytes @ 0xC
  3615                           
  3616  002C                     Load_Main@adjgo:	
  3617                           ; 1 bytes @ 0xC
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xC
  3621  002C                     	ds	1
  3622  002D                     ??_my_MainTimer:	
  3623  002D                     ??_setTemp_Main:	
  3624                           ; 0 bytes @ 0xD
  3625                           
  3626  002D                     ??_setLog_Code:	
  3627                           ; 0 bytes @ 0xD
  3628                           
  3629  002D                     ??_setDimmerLights_SwOn:	
  3630                           ; 0 bytes @ 0xD
  3631                           
  3632  002D                     _Load_Main$3638:	
  3633                           ; 0 bytes @ 0xD
  3634                           
  3635  002D                     ___awtoft@sign:	
  3636                           ; 1 bytes @ 0xD
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0xD
  3640  002D                     	ds	1
  3641  002E                     ?___ftdiv:	
  3642  002E                     ?___ftmul:	
  3643                           ; 3 bytes @ 0xE
  3644                           
  3645  002E                     setDelayOff_GO@sw:	
  3646                           ; 3 bytes @ 0xE
  3647                           
  3648  002E                     setDimmerLights_SwOn@idle:	
  3649                           ; 1 bytes @ 0xE
  3650                           
  3651  002E                     Load_Main@error:	
  3652                           ; 1 bytes @ 0xE
  3653                           
  3654  002E                     ___ftdiv@f2:	
  3655                           ; 1 bytes @ 0xE
  3656                           
  3657  002E                     ___ftmul@f1:	
  3658                           ; 3 bytes @ 0xE
  3659                           
  3660                           
  3661                           ; 3 bytes @ 0xE
  3662  002E                     	ds	1
  3663  002F                     ??_Temp_Main:	
  3664  002F                     ??_setDimmerLights_SwOff:	
  3665                           ; 0 bytes @ 0xF
  3666                           
  3667  002F                     setDimmerLights_SwOn@sw:	
  3668                           ; 0 bytes @ 0xF
  3669                           
  3670  002F                     setDimmerLights_SwOff@command:	
  3671                           ; 1 bytes @ 0xF
  3672                           
  3673  002F                     Load_Main@i:	
  3674                           ; 1 bytes @ 0xF
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0xF
  3678  002F                     	ds	1
  3679  0030                     setDimmerLights_SwOff@sw:	
  3680                           
  3681                           ; 1 bytes @ 0x10
  3682  0030                     	ds	1
  3683  0031                     ??_setDimmerLights_ErrorClose:	
  3684  0031                     ??_setRFSW_Control:	
  3685                           ; 0 bytes @ 0x11
  3686                           
  3687  0031                     ??_setSw_Main:	
  3688                           ; 0 bytes @ 0x11
  3689                           
  3690  0031                     ___ftdiv@f1:	
  3691                           ; 0 bytes @ 0x11
  3692                           
  3693  0031                     ___ftmul@f2:	
  3694                           ; 3 bytes @ 0x11
  3695                           
  3696                           
  3697                           ; 3 bytes @ 0x11
  3698  0031                     	ds	1
  3699  0032                     setDimmerLights_ErrorClose@count:	
  3700  0032                     setRFSW_Control@status:	
  3701                           ; 1 bytes @ 0x12
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x12
  3705  0032                     	ds	1
  3706  0033                     setDimmerLights_ErrorClose@lights:	
  3707  0033                     setRFSW_Control@sw:	
  3708                           ; 1 bytes @ 0x13
  3709                           
  3710  0033                     setSw_Main@sw:	
  3711                           ; 1 bytes @ 0x13
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x13
  3715  0033                     	ds	1
  3716  0034                     ??___ftdiv:	
  3717  0034                     ??___ftmul:	
  3718                           ; 0 bytes @ 0x14
  3719                           
  3720  0034                     setDimmerLights_ErrorClose@i:	
  3721                           ; 0 bytes @ 0x14
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x14
  3725  0034                     	ds	2
  3726  0036                     ??_DlyOff_Main:	
  3727  0036                     ??_setMain_Exception:	
  3728                           ; 0 bytes @ 0x16
  3729                           
  3730                           
  3731                           ; 0 bytes @ 0x16
  3732  0036                     	ds	2
  3733  0038                     DlyOff_Main@sw:	
  3734  0038                     setMain_Exception@buz:	
  3735                           ; 1 bytes @ 0x18
  3736                           
  3737  0038                     ___ftdiv@cntr:	
  3738                           ; 1 bytes @ 0x18
  3739                           
  3740  0038                     ___ftmul@exp:	
  3741                           ; 1 bytes @ 0x18
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x18
  3745  0038                     	ds	1
  3746  0039                     ??_DelayOff_Main:	
  3747  0039                     _setMain_Exception$3310:	
  3748                           ; 0 bytes @ 0x19
  3749                           
  3750  0039                     ___ftdiv@f3:	
  3751                           ; 2 bytes @ 0x19
  3752                           
  3753  0039                     ___ftmul@f3_as_product:	
  3754                           ; 3 bytes @ 0x19
  3755                           
  3756                           
  3757                           ; 3 bytes @ 0x19
  3758  0039                     	ds	2
  3759  003B                     setMain_Exception@status:	
  3760                           
  3761                           ; 1 bytes @ 0x1B
  3762  003B                     	ds	1
  3763  003C                     setMain_Exception@command:	
  3764  003C                     ___ftdiv@exp:	
  3765                           ; 1 bytes @ 0x1C
  3766                           
  3767  003C                     ___ftmul@cntr:	
  3768                           ; 1 bytes @ 0x1C
  3769                           
  3770                           
  3771                           ; 1 bytes @ 0x1C
  3772  003C                     	ds	1
  3773  003D                     ??_Switch_Main:	
  3774  003D                     ___ftdiv@sign:	
  3775                           ; 0 bytes @ 0x1D
  3776                           
  3777  003D                     ___ftmul@sign:	
  3778                           ; 1 bytes @ 0x1D
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x1D
  3782  003D                     	ds	1
  3783  003E                     ?___ftneg:	
  3784  003E                     Switch_Main@error:	
  3785                           ; 3 bytes @ 0x1E
  3786                           
  3787  003E                     ___ftneg@f1:	
  3788                           ; 1 bytes @ 0x1E
  3789                           
  3790                           
  3791                           ; 3 bytes @ 0x1E
  3792  003E                     	ds	3
  3793  0041                     ??___ftneg:	
  3794  0041                     ?___ftadd:	
  3795                           ; 0 bytes @ 0x21
  3796                           
  3797  0041                     ___ftadd@f1:	
  3798                           ; 3 bytes @ 0x21
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x21
  3802  0041                     	ds	3
  3803  0044                     ___ftadd@f2:	
  3804                           
  3805                           ; 3 bytes @ 0x24
  3806  0044                     	ds	3
  3807  0047                     ??___ftadd:	
  3808                           
  3809                           ; 0 bytes @ 0x27
  3810  0047                     	ds	4
  3811  004B                     ___ftadd@sign:	
  3812                           
  3813                           ; 1 bytes @ 0x2B
  3814  004B                     	ds	1
  3815  004C                     ___ftadd@exp2:	
  3816                           
  3817                           ; 1 bytes @ 0x2C
  3818  004C                     	ds	1
  3819  004D                     ___ftadd@exp1:	
  3820                           
  3821                           ; 1 bytes @ 0x2D
  3822  004D                     	ds	1
  3823  004E                     ?___fttol:	
  3824  004E                     ___fttol@f1:	
  3825                           ; 4 bytes @ 0x2E
  3826                           
  3827                           
  3828                           ; 3 bytes @ 0x2E
  3829  004E                     	ds	4
  3830  0052                     ??___fttol:	
  3831                           
  3832                           ; 0 bytes @ 0x32
  3833  0052                     	ds	4
  3834  0056                     ___fttol@sign1:	
  3835                           
  3836                           ; 1 bytes @ 0x36
  3837  0056                     	ds	1
  3838  0057                     ___fttol@lval:	
  3839                           
  3840                           ; 4 bytes @ 0x37
  3841  0057                     	ds	4
  3842  005B                     ___fttol@exp1:	
  3843                           
  3844                           ; 1 bytes @ 0x3B
  3845  005B                     	ds	1
  3846  005C                     ??_setPercentValue:	
  3847  005C                     ??_getPercentValue:	
  3848                           ; 0 bytes @ 0x3C
  3849                           
  3850                           
  3851                           ; 0 bytes @ 0x3C
  3852  005C                     	ds	2
  3853  005E                     getPercentValue@value:	
  3854  005E                     setPercentValue@value:	
  3855                           ; 1 bytes @ 0x3E
  3856                           
  3857                           
  3858                           ; 1 bytes @ 0x3E
  3859  005E                     	ds	1
  3860  005F                     getPercentValue@i:	
  3861  005F                     setPercentValue@i:	
  3862                           ; 3 bytes @ 0x3F
  3863                           
  3864                           
  3865                           ; 3 bytes @ 0x3F
  3866  005F                     	ds	3
  3867  0062                     ?_setDimmerLights:	
  3868  0062                     ?_setDimmerLights_Adj:	
  3869                           ; 0 bytes @ 0x42
  3870                           
  3871  0062                     ??_setDimmerLights_AdjRF:	
  3872                           ; 0 bytes @ 0x42
  3873                           
  3874  0062                     ??_Flash_Memory_Initialization:	
  3875                           ; 0 bytes @ 0x42
  3876                           
  3877  0062                     setDimmerLights@status:	
  3878                           ; 0 bytes @ 0x42
  3879                           
  3880  0062                     setDimmerLights_Adj@status:	
  3881                           ; 1 bytes @ 0x42
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x42
  3885  0062                     	ds	1
  3886  0063                     ??_setDimmerLights:	
  3887  0063                     ??_setDimmerLights_Adj:	
  3888                           ; 0 bytes @ 0x43
  3889                           
  3890  0063                     setDimmerLights_AdjRF@lights:	
  3891                           ; 0 bytes @ 0x43
  3892                           
  3893  0063                     Flash_Memory_Initialization@i:	
  3894                           ; 1 bytes @ 0x43
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x43
  3898  0063                     	ds	1
  3899  0064                     ??_setRF_DimmerValue:	
  3900                           
  3901                           ; 0 bytes @ 0x44
  3902  0064                     	ds	1
  3903  0065                     setDimmerLights@lights:	
  3904  0065                     setDimmerLights_Adj@lights:	
  3905                           ; 1 bytes @ 0x45
  3906                           
  3907                           
  3908                           ; 1 bytes @ 0x45
  3909  0065                     	ds	1
  3910  0066                     ??_setDimmerLights_Main:	
  3911  0066                     setDimmerLights_Main@lights:	
  3912                           ; 0 bytes @ 0x46
  3913                           
  3914  0066                     setRF_DimmerValue@lights:	
  3915                           ; 1 bytes @ 0x46
  3916                           
  3917                           
  3918                           ; 1 bytes @ 0x46
  3919  0066                     	ds	1
  3920  0067                     ??_setRFSW_AdjControl:	
  3921  0067                     ??_DimmerLights_Main:	
  3922                           ; 0 bytes @ 0x47
  3923                           
  3924                           
  3925                           ; 0 bytes @ 0x47
  3926  0067                     	ds	2
  3927  0069                     setRFSW_AdjControl@status:	
  3928  0069                     _DimmerLights_Main$2089:	
  3929                           ; 1 bytes @ 0x49
  3930                           
  3931                           
  3932                           ; 2 bytes @ 0x49
  3933  0069                     	ds	1
  3934  006A                     setRFSW_AdjControl@sw:	
  3935                           
  3936                           ; 1 bytes @ 0x4A
  3937  006A                     	ds	1
  3938  006B                     ??_getRxData:	
  3939  006B                     ??_setControl_Lights_Table:	
  3940                           ; 0 bytes @ 0x4B
  3941                           
  3942                           
  3943                           ; 0 bytes @ 0x4B
  3944  006B                     	ds	1
  3945  006C                     getRxData@error:	
  3946                           
  3947                           ; 1 bytes @ 0x4C
  3948  006C                     	ds	1
  3949  006D                     ??_setRF_Main:	
  3950                           
  3951                           ; 0 bytes @ 0x4D
  3952  006D                     	ds	1
  3953  006E                     ??_RF_Main:	
  3954  006E                     ??_main:	
  3955                           ; 0 bytes @ 0x4E
  3956                           
  3957                           
  3958                           	psect	maintext
  3959  169A                     __pmaintext:	
  3960                           ; 0 bytes @ 0x4E
  3961 ;;
  3962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3963 ;;
  3964 ;; *************** function _main *****************
  3965 ;; Defined at:
  3966 ;;		line 7 in file "../src/Main_B1.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  argc            2    3[BANK1 ] int 
  3969 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  2    3[BANK1 ] int 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 17F/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3981 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;Total ram usage:        4 bytes
  3986 ;; Hardware stack levels required when called:   15
  3987 ;; This function calls:
  3988 ;;		_Buzzer_Initialization
  3989 ;;		_Buzzer_Main
  3990 ;;		_CC2500_PowerOnInitial
  3991 ;;		_DelayOff_Initialization
  3992 ;;		_DelayOff_Main
  3993 ;;		_DimmerLights_Initialization
  3994 ;;		_DimmerLights_Main
  3995 ;;		_Flash_Memory_Initialization
  3996 ;;		_Flash_Memory_Main
  3997 ;;		_LED_Initialization
  3998 ;;		_LED_Main
  3999 ;;		_Load_Initialization
  4000 ;;		_Load_Main
  4001 ;;		_Mcu_Initialization
  4002 ;;		_RF_Initialization
  4003 ;;		_RF_Main
  4004 ;;		_Switch_Initialization
  4005 ;;		_Switch_Main
  4006 ;;		_Temp_Initialization
  4007 ;;		_Temp_Main
  4008 ;;		_WDT_Main
  4009 ;;		_getLoad_AD
  4010 ;;		_getTemp_AD
  4011 ;;		_myMain_Initialization
  4012 ;;		_my_MainTimer
  4013 ;; This function is called by:
  4014 ;;		Startup code after reset
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _main
  4020  169A                     _main:	
  4021                           
  4022                           ;Main_B1.c: 8: myMain_Initialization();
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4026  169A  319C  24F9  3196   	fcall	_myMain_Initialization
  4027                           
  4028                           ;Main_B1.c: 9: Mcu_Initialization();
  4029  169D  319D  259E  3196   	fcall	_Mcu_Initialization
  4030                           
  4031                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4032  16A0  3186  264A  3196   	fcall	_Flash_Memory_Initialization
  4033                           
  4034                           ;Main_B1.c: 11: LED_Initialization();
  4035  16A3  319B  23BD  3196   	fcall	_LED_Initialization
  4036                           
  4037                           ;Main_B1.c: 12: Buzzer_Initialization();
  4038  16A6  319B  2396  3196   	fcall	_Buzzer_Initialization
  4039                           
  4040                           ;Main_B1.c: 14: ;;
  4041                           ;Main_B1.c: 15: Temp_Initialization();
  4042  16A9  319B  239F  3196   	fcall	_Temp_Initialization
  4043                           
  4044                           ;Main_B1.c: 16: Load_Initialization();
  4045  16AC  319B  23CE  3196   	fcall	_Load_Initialization
  4046                           
  4047                           ;Main_B1.c: 17: ;;
  4048                           ;Main_B1.c: 18: DelayOff_Initialization();
  4049  16AF  319B  23B5  3196   	fcall	_DelayOff_Initialization
  4050                           
  4051                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4052  16B2  319C  24C0  3196   	fcall	_DimmerLights_Initialization
  4053                           
  4054                           ;Main_B1.c: 21: ;;
  4055                           ;Main_B1.c: 22: ;;
  4056                           ;Main_B1.c: 23: ;;
  4057                           ;Main_B1.c: 24: Switch_Initialization();
  4058  16B5  319C  240E  3196   	fcall	_Switch_Initialization
  4059                           
  4060                           ;Main_B1.c: 25: RF_Initialization();
  4061  16B8  319B  2399  3196   	fcall	_RF_Initialization
  4062                           
  4063                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4064  16BB  319E  2625  3196   	fcall	_CC2500_PowerOnInitial
  4065  16BE                     l7949:	
  4066                           ;Main_B1.c: 27: ;;
  4067                           ;Main_B1.c: 28: ;;
  4068                           ;Main_B1.c: 30: while (1) {
  4069                           
  4070                           
  4071                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4072  16BE  0021               	movlb	1	; select bank1
  4073  16BF  1C20               	btfss	_myMain^(0+128),0
  4074  16C0  2EC9               	goto	l7953
  4075                           
  4076                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4077  16C1  3005               	movlw	5
  4078  16C2  318B  23DD  3196   	fcall	_getLoad_AD
  4079                           
  4080                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4081  16C5  3009               	movlw	9
  4082  16C6  3193  2353  3196   	fcall	_getTemp_AD
  4083  16C9                     l7953:	
  4084                           
  4085                           ;Main_B1.c: 57: }
  4086                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4087  16C9  0021               	movlb	1	; select bank1
  4088  16CA  1C46               	btfss	_Timer1^(0+128),0
  4089  16CB  2EBE               	goto	l7949
  4090                           
  4091                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4092  16CC  1046               	bcf	_Timer1^(0+128),0
  4093                           
  4094                           ;Main_B1.c: 96: my_MainTimer();
  4095  16CD  3193  23C2  3196   	fcall	_my_MainTimer
  4096                           
  4097                           ;Main_B1.c: 97: WDT_Main();
  4098  16D0  319D  25B0  3196   	fcall	_WDT_Main
  4099                           
  4100                           ;Main_B1.c: 98: ;;
  4101                           ;Main_B1.c: 99: ;;
  4102                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4103  16D3  0021               	movlb	1	; select bank1
  4104  16D4  1C20               	btfss	_myMain^(0+128),0
  4105  16D5  2EBE               	goto	l7949
  4106                           
  4107                           ;Main_B1.c: 102: Flash_Memory_Main();
  4108  16D6  3192  22B0  3196   	fcall	_Flash_Memory_Main
  4109                           
  4110                           ;Main_B1.c: 104: LED_Main();
  4111  16D9  319B  23C1  3196   	fcall	_LED_Main
  4112                           
  4113                           ;Main_B1.c: 105: Buzzer_Main();
  4114  16DC  3195  2507  3196   	fcall	_Buzzer_Main
  4115                           
  4116                           ;Main_B1.c: 107: ;;
  4117                           ;Main_B1.c: 108: Temp_Main();
  4118  16DF  319B  23A2  3196   	fcall	_Temp_Main
  4119                           
  4120                           ;Main_B1.c: 109: Load_Main();
  4121  16E2  3180  2043  3196   	fcall	_Load_Main
  4122                           
  4123                           ;Main_B1.c: 110: ;;
  4124                           ;Main_B1.c: 112: ;;
  4125                           ;Main_B1.c: 113: DimmerLights_Main();
  4126  16E5  3191  217D  3196   	fcall	_DimmerLights_Main
  4127                           
  4128                           ;Main_B1.c: 114: Switch_Main();
  4129  16E8  319E  26F4  3196   	fcall	_Switch_Main
  4130                           
  4131                           ;Main_B1.c: 115: ;;
  4132                           ;Main_B1.c: 116: ;;
  4133                           ;Main_B1.c: 118: RF_Main();
  4134  16EB  319B  239C  3196   	fcall	_RF_Main
  4135                           
  4136                           ;Main_B1.c: 119: DelayOff_Main();
  4137  16EE  319B  23B9  3196   	fcall	_DelayOff_Main
  4138                           
  4139                           ;Main_B1.c: 120: ;;
  4140                           ;Main_B1.c: 121: ;;
  4141  16F1  2EBE               	goto	l7949
  4142  16F2                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  13C2                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 183 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  13C2                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 186: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  13C2  0021               	movlb	1	; select bank1
  4191  13C3  1820               	btfsc	_myMain^(0+128),0
  4192  13C4  2BDC               	goto	l7691
  4193                           
  4194                           ;Main_B1.c: 187: myMain.PowerCount++;
  4195  13C5  3001               	movlw	1
  4196  13C6  0020               	movlb	0	; select bank0
  4197  13C7  00AD               	movwf	??_my_MainTimer
  4198  13C8  082D               	movf	??_my_MainTimer,w
  4199  13C9  0021               	movlb	1	; select bank1
  4200  13CA  07A1               	addwf	(_myMain^(0+128)+1),f
  4201                           
  4202                           ;Main_B1.c: 188: if (myMain.PowerCount == 150) {
  4203  13CB  0821               	movf	(_myMain^(0+128)+1),w
  4204  13CC  3A96               	xorlw	150
  4205  13CD  1D03               	skipz
  4206  13CE  0008               	return
  4207                           
  4208                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  4209  13CF  01A1               	clrf	(_myMain^(0+128)+1)
  4210                           
  4211                           ;Main_B1.c: 190: myMain.PowerON = 1;
  4212  13D0  1420               	bsf	_myMain^(0+128),0
  4213                           
  4214                           ;Main_B1.c: 195: setBuz(3, 50);
  4215  13D1  3032               	movlw	50
  4216  13D2  0020               	movlb	0	; select bank0
  4217  13D3  00A9               	movwf	setBuz@time
  4218  13D4  3000               	movlw	0
  4219  13D5  00AA               	movwf	setBuz@time+1
  4220  13D6  3003               	movlw	3
  4221  13D7  3196  26F2         	fcall	_setBuz
  4222                           
  4223                           ;Main_B1.c: 196: myMain.SelfTest = 1;
  4224  13D9  0021               	movlb	1	; select bank1
  4225  13DA  1620               	bsf	_myMain^(0+128),4
  4226                           
  4227                           ;Main_B1.c: 205: }
  4228                           ;Main_B1.c: 206: } else {
  4229  13DB  0008               	return
  4230  13DC                     l7691:	
  4231                           
  4232                           ;Main_B1.c: 207: myMain.PowerCount++;
  4233  13DC  3001               	movlw	1
  4234  13DD  0020               	movlb	0	; select bank0
  4235  13DE  00AD               	movwf	??_my_MainTimer
  4236  13DF  082D               	movf	??_my_MainTimer,w
  4237  13E0  0021               	movlb	1	; select bank1
  4238  13E1  07A1               	addwf	(_myMain^(0+128)+1),f
  4239                           
  4240                           ;Main_B1.c: 208: if (myMain.PowerCount == 100) {
  4241  13E2  0821               	movf	(_myMain^(0+128)+1),w
  4242  13E3  3A64               	xorlw	100
  4243  13E4  1903               	btfsc	3,2
  4244                           
  4245                           ;Main_B1.c: 209: myMain.PowerCount = 0;
  4246  13E5  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 221: }
  4249                           ;Main_B1.c: 223: myMain.Count1++;
  4250  13E6  3001               	movlw	1
  4251  13E7  07A4               	addwf	(_myMain^(0+128)+4),f
  4252  13E8  3000               	movlw	0
  4253  13E9  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4254                           
  4255                           ;Main_B1.c: 224: if (myMain.Count1 == 100)
  4256  13EA  3004               	movlw	4
  4257  13EB  3EA0               	addlw	_myMain& (0+255)
  4258  13EC  0086               	movwf	6
  4259  13ED  0187               	clrf	7
  4260  13EE  3F40               	moviw [0]fsr1
  4261  13EF  3A64               	xorlw	100
  4262  13F0  1D03               	skipz
  4263  13F1  2BF4               	goto	u7675
  4264  13F2  3F41               	moviw [1]fsr1
  4265  13F3  3A00               	xorlw	0
  4266  13F4                     u7675:	
  4267  13F4  1D03               	skipz
  4268  13F5  0008               	return
  4269                           
  4270                           ;Main_B1.c: 225: {
  4271                           ;Main_B1.c: 226: myMain.Count1 = 0;
  4272  13F6  01A4               	clrf	(_myMain^(0+128)+4)
  4273  13F7  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4274                           
  4275                           ;Main_B1.c: 238: if (myMain.Flag) {
  4276  13F8  1CA0               	btfss	_myMain^(0+128),1
  4277  13F9  2BFC               	goto	l1383
  4278                           
  4279                           ;Main_B1.c: 239: myMain.Flag = 0;
  4280  13FA  10A0               	bcf	_myMain^(0+128),1
  4281                           
  4282                           ;Main_B1.c: 248: } else {
  4283  13FB  0008               	return
  4284  13FC                     l1383:	
  4285                           
  4286                           ;Main_B1.c: 249: myMain.Flag = 1;
  4287  13FC  14A0               	bsf	_myMain^(0+128),1
  4288  13FD  0008               	return
  4289  13FE                     __end_of_my_MainTimer:	
  4290                           
  4291                           	psect	text2
  4292  1CF9                     __ptext2:	
  4293 ;; *************** function _myMain_Initialization *****************
  4294 ;; Defined at:
  4295 ;;		line 170 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _myMain_Initialization
  4325  1CF9                     _myMain_Initialization:	
  4326                           
  4327                           ;Main_B1.c: 172: product = &_product;
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4331  1CF9  3020               	movlw	__product& (0+255)
  4332  1CFA  0020               	movlb	0	; select bank0
  4333  1CFB  00A0               	movwf	??_myMain_Initialization
  4334  1CFC  0820               	movf	??_myMain_Initialization,w
  4335  1CFD  00EE               	movwf	_product
  4336                           
  4337                           ;Main_B1.c: 173: product->Data[20] = 209;
  4338  1CFE  30D1               	movlw	209
  4339  1CFF  00A0               	movwf	??_myMain_Initialization
  4340  1D00  086E               	movf	_product,w
  4341  1D01  3E14               	addlw	20
  4342  1D02  0086               	movwf	6
  4343  1D03  3002               	movlw	2	; select bank4/5
  4344  1D04  0087               	movwf	7
  4345  1D05  0820               	movf	??_myMain_Initialization,w
  4346  1D06  0081               	movwf	1
  4347  1D07  0008               	return
  4348  1D08                     __end_of_myMain_Initialization:	
  4349                           
  4350                           	psect	text3
  4351  1353                     __ptext3:	
  4352 ;; *************** function _getTemp_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    5[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;Total ram usage:        2 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		_getAD
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _getTemp_AD
  4384  1353                     _getTemp_AD:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4388                           ;getTemp_AD@channel stored from wreg
  4389  1353  0020               	movlb	0	; select bank0
  4390  1354  00A5               	movwf	getTemp_AD@channel
  4391                           
  4392                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4393  1355  0021               	movlb	1	; select bank1
  4394  1356  1D57               	btfss	_Temp^(0+128),2
  4395  1357  0008               	return
  4396                           
  4397                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4398  1358  1657               	bsf	_Temp^(0+128),4
  4399                           
  4400                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4401  1359  30F0               	movlw	240
  4402  135A  0020               	movlb	0	; select bank0
  4403  135B  00A4               	movwf	??_getTemp_AD
  4404  135C  0824               	movf	??_getTemp_AD,w
  4405  135D  00A0               	movwf	getAD@adcon1
  4406  135E  0825               	movf	getTemp_AD@channel,w
  4407  135F  319F  2714  3193   	fcall	_getAD
  4408  1362  0020               	movlb	0	; select bank0
  4409  1363  0821               	movf	?_getAD+1,w
  4410  1364  0021               	movlb	1	; select bank1
  4411  1365  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4412  1366  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4413  1367  0020               	movlb	0	; select bank0
  4414  1368  0820               	movf	?_getAD,w
  4415  1369  0021               	movlb	1	; select bank1
  4416  136A  01E3               	clrf	(_Temp^(0+128)+12)
  4417  136B  07E3               	addwf	(_Temp^(0+128)+12),f
  4418                           
  4419                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4420  136C  0864               	movf	((_Temp+1)^(0+128)+12),w
  4421  136D  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4422  136E  1D03               	skipz
  4423  136F  2B72               	goto	u7625
  4424  1370  0863               	movf	(_Temp^(0+128)+12),w
  4425  1371  025F               	subwf	(_Temp^(0+128)+8),w
  4426  1372                     u7625:	
  4427  1372  1803               	skipnc
  4428  1373  2B7B               	goto	l7673
  4429                           
  4430                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4431  1374  0864               	movf	((_Temp+1)^(0+128)+12),w
  4432  1375  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4433  1376  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4434  1377  0863               	movf	(_Temp^(0+128)+12),w
  4435  1378  01DF               	clrf	(_Temp^(0+128)+8)
  4436  1379  07DF               	addwf	(_Temp^(0+128)+8),f
  4437                           
  4438                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4439  137A  0008               	return
  4440  137B                     l7673:	
  4441  137B  0864               	movf	((_Temp+1)^(0+128)+12),w
  4442  137C  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4443  137D  1D03               	skipz
  4444  137E  2B81               	goto	u7635
  4445  137F  0863               	movf	(_Temp^(0+128)+12),w
  4446  1380  0261               	subwf	(_Temp^(0+128)+10),w
  4447  1381                     u7635:	
  4448  1381  1803               	skipnc
  4449  1382  0008               	return
  4450                           
  4451                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4452  1383  0864               	movf	((_Temp+1)^(0+128)+12),w
  4453  1384  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4454  1385  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4455  1386  0863               	movf	(_Temp^(0+128)+12),w
  4456  1387  01E1               	clrf	(_Temp^(0+128)+10)
  4457  1388  07E1               	addwf	(_Temp^(0+128)+10),f
  4458  1389  0008               	return
  4459  138A                     __end_of_getTemp_AD:	
  4460                           
  4461                           	psect	text4
  4462  0BDD                     __ptext4:	
  4463 ;; *************** function _getLoad_AD *****************
  4464 ;; Defined at:
  4465 ;;		line 15 in file "../src/OverLoad_B1.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  channel         1    wreg     unsigned char 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  channel         1    6[BANK0 ] unsigned char 
  4470 ;;  i               1    9[BANK0 ] unsigned char 
  4471 ;;  j               1    8[BANK0 ] unsigned char 
  4472 ;;  k               1    7[BANK0 ] unsigned char 
  4473 ;; Return value:  Size  Location     Type
  4474 ;;		None               void
  4475 ;; Registers used:
  4476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4485 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;Total ram usage:        6 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    7
  4489 ;; This function calls:
  4490 ;;		_getAD
  4491 ;; This function is called by:
  4492 ;;		_main
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _getLoad_AD
  4498  0BDD                     _getLoad_AD:	
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4502                           ;getLoad_AD@channel stored from wreg
  4503  0BDD  0020               	movlb	0	; select bank0
  4504  0BDE  00A6               	movwf	getLoad_AD@channel
  4505                           
  4506                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4507  0BDF  01A9               	clrf	getLoad_AD@i
  4508  0BE0  01A8               	clrf	getLoad_AD@j
  4509  0BE1  01A7               	clrf	getLoad_AD@k
  4510                           
  4511                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4512  0BE2  0022               	movlb	2	; select bank2
  4513  0BE3  1E41               	btfss	_Load^(0+256),4
  4514  0BE4  0008               	return
  4515                           
  4516                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4517  0BE5  30F3               	movlw	243
  4518  0BE6  0020               	movlb	0	; select bank0
  4519  0BE7  00A4               	movwf	??_getLoad_AD
  4520  0BE8  0824               	movf	??_getLoad_AD,w
  4521  0BE9  00A0               	movwf	getAD@adcon1
  4522  0BEA  0826               	movf	getLoad_AD@channel,w
  4523  0BEB  319F  2714  318B   	fcall	_getAD
  4524  0BEE  0020               	movlb	0	; select bank0
  4525  0BEF  0821               	movf	?_getAD+1,w
  4526  0BF0  0022               	movlb	2	; select bank2
  4527  0BF1  01E3               	clrf	((_Load+1)^(0+256)+33)
  4528  0BF2  07E3               	addwf	((_Load+1)^(0+256)+33),f
  4529  0BF3  0020               	movlb	0	; select bank0
  4530  0BF4  0820               	movf	?_getAD,w
  4531  0BF5  0022               	movlb	2	; select bank2
  4532  0BF6  01E2               	clrf	(_Load^(0+256)+33)
  4533  0BF7  07E2               	addwf	(_Load^(0+256)+33),f
  4534                           
  4535                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4536  0BF8  0020               	movlb	0	; select bank0
  4537  0BF9  01A9               	clrf	getLoad_AD@i
  4538  0BFA  3004               	movlw	4
  4539  0BFB  0229               	subwf	getLoad_AD@i,w
  4540  0BFC  1803               	btfsc	3,0
  4541  0BFD  2C2B               	goto	l7643
  4542  0BFE                     l7631:	
  4543                           
  4544                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4545  0BFE  3529               	lslf	getLoad_AD@i,w
  4546  0BFF  3E4C               	addlw	(_Load+11)& (0+255)
  4547  0C00  0086               	movwf	6
  4548  0C01  3001               	movlw	1	; select bank2/3
  4549  0C02  0087               	movwf	7
  4550  0C03  3F40               	moviw [0]fsr1
  4551  0C04  00A4               	movwf	??_getLoad_AD
  4552  0C05  3F41               	moviw [1]fsr1
  4553  0C06  00A5               	movwf	??_getLoad_AD+1
  4554  0C07  0022               	movlb	2	; select bank2
  4555  0C08  0863               	movf	((_Load+1)^(0+256)+33),w
  4556  0C09  0020               	movlb	0	; select bank0
  4557  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4558  0C0B  1D03               	skipz
  4559  0C0C  2C11               	goto	u7535
  4560  0C0D  0022               	movlb	2	; select bank2
  4561  0C0E  0862               	movf	(_Load^(0+256)+33),w
  4562  0C0F  0020               	movlb	0	; select bank0
  4563  0C10  0224               	subwf	??_getLoad_AD,w
  4564  0C11                     u7535:	
  4565  0C11  1803               	skipnc
  4566  0C12  2C23               	goto	l7639
  4567  0C13  08A8               	movf	getLoad_AD@j,f
  4568  0C14  1D03               	skipz
  4569  0C15  2C23               	goto	l7639
  4570                           
  4571                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4572  0C16  3529               	lslf	getLoad_AD@i,w
  4573  0C17  3E4C               	addlw	(_Load+11)& (0+255)
  4574  0C18  0086               	movwf	6
  4575  0C19  3001               	movlw	1	; select bank2/3
  4576  0C1A  0087               	movwf	7
  4577  0C1B  0022               	movlb	2	; select bank2
  4578  0C1C  0862               	movf	(_Load^(0+256)+33),w
  4579  0C1D  3FC0               	movwi [0]fsr1
  4580  0C1E  0863               	movf	((_Load+1)^(0+256)+33),w
  4581  0C1F  3FC1               	movwi [1]fsr1
  4582                           
  4583                           ;OverLoad_B1.c: 24: j = 1;
  4584  0C20  0020               	movlb	0	; select bank0
  4585  0C21  01A8               	clrf	getLoad_AD@j
  4586  0C22  0AA8               	incf	getLoad_AD@j,f
  4587  0C23                     l7639:	
  4588  0C23  3001               	movlw	1
  4589  0C24  00A4               	movwf	??_getLoad_AD
  4590  0C25  0824               	movf	??_getLoad_AD,w
  4591  0C26  07A9               	addwf	getLoad_AD@i,f
  4592  0C27  3004               	movlw	4
  4593  0C28  0229               	subwf	getLoad_AD@i,w
  4594  0C29  1C03               	skipc
  4595  0C2A  2BFE               	goto	l7631
  4596  0C2B                     l7643:	
  4597                           
  4598                           ;OverLoad_B1.c: 25: }
  4599                           ;OverLoad_B1.c: 26: }
  4600                           ;OverLoad_B1.c: 27: if (j == 0) {
  4601  0C2B  08A8               	movf	getLoad_AD@j,f
  4602  0C2C  1D03               	skipz
  4603  0C2D  0008               	return
  4604                           
  4605                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4606  0C2E  01A9               	clrf	getLoad_AD@i
  4607  0C2F                     L1:	
  4608  0C2F  3004               	movlw	4
  4609  0C30  0229               	subwf	getLoad_AD@i,w
  4610  0C31  1803               	btfsc	3,0
  4611  0C32  0008               	return
  4612                           
  4613                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4614  0C33  3529               	lslf	getLoad_AD@i,w
  4615  0C34  3E56               	addlw	(_Load+21)& (0+255)
  4616  0C35  0086               	movwf	6
  4617  0C36  3001               	movlw	1	; select bank2/3
  4618  0C37  0087               	movwf	7
  4619  0C38  3F40               	moviw [0]fsr1
  4620  0C39  00A4               	movwf	??_getLoad_AD
  4621  0C3A  3F41               	moviw [1]fsr1
  4622  0C3B  00A5               	movwf	??_getLoad_AD+1
  4623  0C3C  0825               	movf	??_getLoad_AD+1,w
  4624  0C3D  0022               	movlb	2	; select bank2
  4625  0C3E  0263               	subwf	((_Load+1)^(0+256)+33),w
  4626  0C3F  1D03               	skipz
  4627  0C40  2C45               	goto	u7585
  4628  0C41  0020               	movlb	0	; select bank0
  4629  0C42  0824               	movf	??_getLoad_AD,w
  4630  0C43  0022               	movlb	2	; select bank2
  4631  0C44  0262               	subwf	(_Load^(0+256)+33),w
  4632  0C45                     u7585:	
  4633  0C45  1803               	skipnc
  4634  0C46  2C58               	goto	l7659
  4635  0C47  0020               	movlb	0	; select bank0
  4636  0C48  08A7               	movf	getLoad_AD@k,f
  4637  0C49  1D03               	skipz
  4638  0C4A  2C58               	goto	l7659
  4639                           
  4640                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4641  0C4B  3529               	lslf	getLoad_AD@i,w
  4642  0C4C  3E56               	addlw	(_Load+21)& (0+255)
  4643  0C4D  0086               	movwf	6
  4644  0C4E  3001               	movlw	1	; select bank2/3
  4645  0C4F  0087               	movwf	7
  4646  0C50  0022               	movlb	2	; select bank2
  4647  0C51  0862               	movf	(_Load^(0+256)+33),w
  4648  0C52  3FC0               	movwi [0]fsr1
  4649  0C53  0863               	movf	((_Load+1)^(0+256)+33),w
  4650  0C54  3FC1               	movwi [1]fsr1
  4651                           
  4652                           ;OverLoad_B1.c: 31: k = 1;
  4653  0C55  0020               	movlb	0	; select bank0
  4654  0C56  01A7               	clrf	getLoad_AD@k
  4655  0C57  0AA7               	incf	getLoad_AD@k,f
  4656  0C58                     l7659:	
  4657  0C58  3001               	movlw	1
  4658  0C59  0020               	movlb	0	; select bank0
  4659  0C5A  00A4               	movwf	??_getLoad_AD
  4660  0C5B  0824               	movf	??_getLoad_AD,w
  4661  0C5C  07A9               	addwf	getLoad_AD@i,f
  4662  0C5D  2C2F               	goto	L1
  4663  0C5E                     __end_of_getLoad_AD:	
  4664                           
  4665                           	psect	text5
  4666  1F14                     __ptext5:	
  4667 ;; *************** function _getAD *****************
  4668 ;; Defined at:
  4669 ;;		line 454 in file "../src/MCU_B1.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  adcon0          1    wreg     unsigned char 
  4672 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  2    0[BANK0 ] int 
  4677 ;; Registers used:
  4678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4684 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;Total ram usage:        4 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    6
  4691 ;; This function calls:
  4692 ;;		_Timeout_Counter
  4693 ;;		_set_TimeoutCleared
  4694 ;; This function is called by:
  4695 ;;		_getLoad_AD
  4696 ;;		_getTemp_AD
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _getAD
  4702  1F14                     _getAD:	
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4706                           ;getAD@adcon0 stored from wreg
  4707  1F14  0020               	movlb	0	; select bank0
  4708  1F15  00A3               	movwf	getAD@adcon0
  4709                           
  4710                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4711  1F16  0823               	movf	getAD@adcon0,w
  4712  1F17  0021               	movlb	1	; select bank1
  4713  1F18  009D               	movwf	29	;volatile
  4714                           
  4715                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4716  1F19  0020               	movlb	0	; select bank0
  4717  1F1A  0820               	movf	getAD@adcon1,w
  4718  1F1B  0021               	movlb	1	; select bank1
  4719  1F1C  009E               	movwf	30	;volatile
  4720                           
  4721                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4722  1F1D  149D               	bsf	29,1	;volatile
  4723                           
  4724                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4725  1F1E  2F22               	goto	l7025
  4726  1F1F                     l7023:	
  4727                           
  4728                           ;MCU_B1.c: 459: Timeout_Counter();
  4729  1F1F  319E  2610  319F   	fcall	_Timeout_Counter
  4730  1F22                     l7025:	
  4731  1F22  0021               	movlb	1	; select bank1
  4732  1F23  1C9D               	btfss	29,1	;volatile
  4733  1F24  2F27               	goto	l7029
  4734  1F25  1D2B               	btfss	(_myMain^(0+128)+11),2
  4735  1F26  2F1F               	goto	l7023
  4736  1F27                     l7029:	
  4737                           
  4738                           ;MCU_B1.c: 460: };
  4739                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4740  1F27  319B  23C9         	fcall	_set_TimeoutCleared
  4741                           
  4742                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4743  1F29  0021               	movlb	1	; select bank1
  4744  1F2A  081C               	movf	28,w	;volatile
  4745  1F2B  0020               	movlb	0	; select bank0
  4746  1F2C  01A1               	clrf	?_getAD+1
  4747  1F2D  07A1               	addwf	?_getAD+1,f
  4748  1F2E  0021               	movlb	1	; select bank1
  4749  1F2F  081B               	movf	27,w	;volatile
  4750  1F30  0020               	movlb	0	; select bank0
  4751  1F31  01A0               	clrf	?_getAD
  4752  1F32  07A0               	addwf	?_getAD,f
  4753  1F33  0008               	return
  4754  1F34                     __end_of_getAD:	
  4755                           
  4756                           	psect	text6
  4757  1DB0                     __ptext6:	
  4758 ;; *************** function _WDT_Main *****************
  4759 ;; Defined at:
  4760 ;;		line 1056 in file "../src/MCU_B1.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;		None
  4765 ;; Return value:  Size  Location     Type
  4766 ;;		None               void
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0, pclath, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;Total ram usage:        1 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    6
  4781 ;; This function calls:
  4782 ;;		_WDT_Clearing
  4783 ;; This function is called by:
  4784 ;;		_main
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           
  4789                           ;psect for function _WDT_Main
  4790  1DB0                     _WDT_Main:	
  4791                           
  4792                           ;MCU_B1.c: 1057: if (WDT.Enable == 1) {
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4796  1DB0  0021               	movlb	1	; select bank1
  4797  1DB1  1C4B               	btfss	_WDT^(0+128),0
  4798  1DB2  0008               	return
  4799                           
  4800                           ;MCU_B1.c: 1058: if (WDT.Timer-- > 0) {
  4801  1DB3  3001               	movlw	1
  4802  1DB4  02CC               	subwf	(_WDT^(0+128)+1),f
  4803  1DB5  084C               	movf	(_WDT^(0+128)+1),w
  4804  1DB6  3AFF               	xorlw	255
  4805  1DB7  1903               	skipnz
  4806  1DB8  0008               	return
  4807                           
  4808                           ;MCU_B1.c: 1059: WDT.Timer = 100;
  4809  1DB9  3064               	movlw	100
  4810  1DBA  0020               	movlb	0	; select bank0
  4811  1DBB  00A0               	movwf	??_WDT_Main
  4812  1DBC  0820               	movf	??_WDT_Main,w
  4813  1DBD  0021               	movlb	1	; select bank1
  4814  1DBE  00CC               	movwf	(_WDT^(0+128)+1)
  4815                           
  4816                           ;MCU_B1.c: 1060: WDT_Clearing();
  4817  1DBF  3180  2002         	fcall	_WDT_Clearing
  4818  1DC1  0008               	return
  4819  1DC2                     __end_of_WDT_Main:	
  4820                           
  4821                           	psect	text7
  4822  0002                     __ptext7:	
  4823 ;; *************** function _WDT_Clearing *****************
  4824 ;; Defined at:
  4825 ;;		line 1066 in file "../src/MCU_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		None
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;Total ram usage:        0 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    5
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_WDT_Main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _WDT_Clearing
  4855  0002                     _WDT_Clearing:	
  4856                           
  4857                           ;incstack = 0
  4858                           ; Regs used in _WDT_Clearing: []
  4859  0002  0064               	clrwdt	;# 
  4860  0003  0008               	return
  4861  0004                     __end_of_WDT_Clearing:	
  4862                           
  4863                           	psect	text8
  4864  1BA2                     __ptext8:	
  4865 ;; *************** function _Temp_Main *****************
  4866 ;; Defined at:
  4867 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    8
  4888 ;; This function calls:
  4889 ;;		_setTemp_Main
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _Temp_Main
  4897  1BA2                     _Temp_Main:	
  4898                           
  4899                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4903  1BA2  318D  25FE         	fcall	_setTemp_Main
  4904  1BA4  0008               	return
  4905  1BA5                     __end_of_Temp_Main:	
  4906                           
  4907                           	psect	text9
  4908  0DFE                     __ptext9:	
  4909 ;; *************** function _setTemp_Main *****************
  4910 ;; Defined at:
  4911 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    7
  4932 ;; This function calls:
  4933 ;;		_getMain_All_Error_Status
  4934 ;;		_setBuz
  4935 ;; This function is called by:
  4936 ;;		_Temp_Main
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _setTemp_Main
  4942  0DFE                     _setTemp_Main:	
  4943                           
  4944                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4948  0DFE  0021               	movlb	1	; select bank1
  4949  0DFF  1C57               	btfss	_Temp^(0+128),0
  4950  0E00  2E9F               	goto	l1686
  4951                           
  4952                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4953  0E01  1957               	btfsc	_Temp^(0+128),2
  4954  0E02  2E12               	goto	l7133
  4955                           
  4956                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4957  0E03  3001               	movlw	1
  4958  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  4959  0E05  3000               	movlw	0
  4960  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4961                           
  4962                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4963  0E07  3001               	movlw	1
  4964  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4965  0E09  30F4               	movlw	244
  4966  0E0A  1903               	skipnz
  4967  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  4968  0E0C  1C03               	skipc
  4969  0E0D  0008               	return
  4970                           
  4971                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4972  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  4973  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4974                           
  4975                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4976  0E10  1557               	bsf	_Temp^(0+128),2
  4977                           
  4978                           ;OverTemperature_B1.c: 64: }
  4979                           ;OverTemperature_B1.c: 65: } else {
  4980  0E11  0008               	return
  4981  0E12                     l7133:	
  4982                           
  4983                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  4984  0E12  3002               	movlw	2
  4985  0E13  3191  21DF  318D   	fcall	_getMain_All_Error_Status
  4986  0E16  3800               	iorlw	0
  4987  0E17  1D03               	skipz
  4988  0E18  0008               	return
  4989                           
  4990                           ;OverTemperature_B1.c: 67: Temp.Time++;
  4991  0E19  3001               	movlw	1
  4992  0E1A  0021               	movlb	1	; select bank1
  4993  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  4994  0E1C  3000               	movlw	0
  4995  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4996                           
  4997                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  4998  0E1E  3000               	movlw	0
  4999  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5000  0E20  3005               	movlw	5
  5001  0E21  1903               	skipnz
  5002  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  5003  0E23  1C03               	skipc
  5004  0E24  0008               	return
  5005                           
  5006                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5007  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  5008  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5009                           
  5010                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5011  0E27  1E57               	btfss	_Temp^(0+128),4
  5012  0E28  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5015  0E29  1157               	bcf	_Temp^(0+128),2
  5016                           
  5017                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5018  0E2A  300A               	movlw	10
  5019  0E2B  3ED7               	addlw	_Temp& (0+255)
  5020  0E2C  0086               	movwf	6
  5021  0E2D  0187               	clrf	7
  5022  0E2E  3008               	movlw	8
  5023  0E2F  3ED7               	addlw	_Temp& (0+255)
  5024  0E30  0084               	movwf	4
  5025  0E31  0185               	clrf	5
  5026  0E32  3F40               	moviw [0]fsr1
  5027  0E33  0700               	addwf	0,w
  5028  0E34  0020               	movlb	0	; select bank0
  5029  0E35  00AD               	movwf	??_setTemp_Main
  5030  0E36  3101               	addfsr 0,1
  5031  0E37  3F41               	moviw [1]fsr1
  5032  0E38  3D00               	addwfc	0,w
  5033  0E39  00AE               	movwf	??_setTemp_Main+1
  5034  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5035  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5036  0E3C  082D               	movf	??_setTemp_Main,w
  5037  0E3D  0021               	movlb	1	; select bank1
  5038  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  5039  0E3F  0020               	movlb	0	; select bank0
  5040  0E40  082E               	movf	??_setTemp_Main+1,w
  5041  0E41  0021               	movlb	1	; select bank1
  5042  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5043                           
  5044                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 400;
  5045  0E43  3090               	movlw	144
  5046  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  5047  0E45  3001               	movlw	1
  5048  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  5049                           
  5050                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 345;
  5051  0E47  3059               	movlw	89
  5052  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  5053  0E49  3001               	movlw	1
  5054  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  5055                           
  5056                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  5057  0E4B  1CD7               	btfss	_Temp^(0+128),1
  5058  0E4C  2E6D               	goto	l7165
  5059                           
  5060                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  5061  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  5062  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5063  0E4F  1D03               	skipz
  5064  0E50  2E53               	goto	u6665
  5065  0E51  0865               	movf	(_Temp^(0+128)+14),w
  5066  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  5067  0E53                     u6665:	
  5068  0E53  1C03               	skipc
  5069  0E54  2E6B               	goto	l7163
  5070                           
  5071                           ;OverTemperature_B1.c: 92: Temp.Count++;
  5072  0E55  3001               	movlw	1
  5073  0E56  0020               	movlb	0	; select bank0
  5074  0E57  00AD               	movwf	??_setTemp_Main
  5075  0E58  082D               	movf	??_setTemp_Main,w
  5076  0E59  0021               	movlb	1	; select bank1
  5077  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  5078                           
  5079                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  5080  0E5B  3003               	movlw	3
  5081  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  5082  0E5D  1C03               	skipc
  5083  0E5E  2E83               	goto	l7177
  5084                           
  5085                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  5086  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5087                           
  5088                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  5089  0E60  10D7               	bcf	_Temp^(0+128),1
  5090                           
  5091                           ;OverTemperature_B1.c: 96: setBuz(2, 100);
  5092  0E61  3064               	movlw	100
  5093  0E62  0020               	movlb	0	; select bank0
  5094  0E63  00A9               	movwf	setBuz@time
  5095  0E64  3000               	movlw	0
  5096  0E65  00AA               	movwf	setBuz@time+1
  5097  0E66  3002               	movlw	2
  5098  0E67  3196  26F2  318D   	fcall	_setBuz
  5099                           
  5100                           ;OverTemperature_B1.c: 97: }
  5101                           ;OverTemperature_B1.c: 98: } else {
  5102  0E6A  2E83               	goto	l7177
  5103  0E6B                     l7163:	
  5104                           
  5105                           ;OverTemperature_B1.c: 99: Temp.Count = 0;
  5106  0E6B  0021               	movlb	1	; select bank1
  5107  0E6C  2E82               	goto	l7175
  5108  0E6D                     l7165:	
  5109                           ;OverTemperature_B1.c: 100: }
  5110                           ;OverTemperature_B1.c: 101: } else {
  5111                           
  5112                           
  5113                           ;OverTemperature_B1.c: 102: if (Temp.AD <= Temp.DangerValue) {
  5114  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5115  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5116  0E6F  1D03               	skipz
  5117  0E70  2E73               	goto	u6685
  5118  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5119  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5120  0E73                     u6685:	
  5121  0E73  1C03               	skipc
  5122  0E74  2E82               	goto	l7175
  5123                           
  5124                           ;OverTemperature_B1.c: 103: Temp.Count++;
  5125  0E75  3001               	movlw	1
  5126  0E76  0020               	movlb	0	; select bank0
  5127  0E77  00AD               	movwf	??_setTemp_Main
  5128  0E78  082D               	movf	??_setTemp_Main,w
  5129  0E79  0021               	movlb	1	; select bank1
  5130  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5131                           
  5132                           ;OverTemperature_B1.c: 104: if (Temp.Count >= 3) {
  5133  0E7B  3003               	movlw	3
  5134  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5135  0E7D  1C03               	skipc
  5136  0E7E  2E83               	goto	l7177
  5137                           
  5138                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5139  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5140                           
  5141                           ;OverTemperature_B1.c: 106: Temp.ERROR = 1;
  5142  0E80  14D7               	bsf	_Temp^(0+128),1
  5143                           
  5144                           ;OverTemperature_B1.c: 107: }
  5145                           ;OverTemperature_B1.c: 108: } else {
  5146  0E81  2E83               	goto	l7177
  5147  0E82                     l7175:	
  5148                           
  5149                           ;OverTemperature_B1.c: 109: Temp.Count = 0;
  5150  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5151  0E83                     l7177:	
  5152                           
  5153                           ;OverTemperature_B1.c: 110: }
  5154                           ;OverTemperature_B1.c: 111: }
  5155                           ;OverTemperature_B1.c: 112: product->Data[24]=Temp.AD >> 8;
  5156  0E83  0021               	movlb	1	; select bank1
  5157  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5158  0E85  0020               	movlb	0	; select bank0
  5159  0E86  00AD               	movwf	??_setTemp_Main
  5160  0E87  086E               	movf	_product,w
  5161  0E88  3E18               	addlw	24
  5162  0E89  0086               	movwf	6
  5163  0E8A  3002               	movlw	2	; select bank4/5
  5164  0E8B  0087               	movwf	7
  5165  0E8C  082D               	movf	??_setTemp_Main,w
  5166  0E8D  0081               	movwf	1
  5167                           
  5168                           ;OverTemperature_B1.c: 113: product->Data[25]=Temp.AD;
  5169  0E8E  0021               	movlb	1	; select bank1
  5170  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5171  0E90  0020               	movlb	0	; select bank0
  5172  0E91  00AD               	movwf	??_setTemp_Main
  5173  0E92  086E               	movf	_product,w
  5174  0E93  3E19               	addlw	25
  5175  0E94  0086               	movwf	6
  5176  0E95  3002               	movlw	2	; select bank4/5
  5177  0E96  0087               	movwf	7
  5178  0E97  082D               	movf	??_setTemp_Main,w
  5179  0E98  0081               	movwf	1
  5180                           
  5181                           ;OverTemperature_B1.c: 125: Temp.ADH[0] = 0;
  5182  0E99  0021               	movlb	1	; select bank1
  5183  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5184  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5185                           
  5186                           ;OverTemperature_B1.c: 126: Temp.ADH[1] = 0;
  5187  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5188  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5189                           
  5190                           ;OverTemperature_B1.c: 127: }
  5191                           ;OverTemperature_B1.c: 128: }
  5192                           ;OverTemperature_B1.c: 129: }
  5193                           ;OverTemperature_B1.c: 130: }
  5194                           ;OverTemperature_B1.c: 131: } else {
  5195  0E9E  0008               	return
  5196  0E9F                     l1686:	
  5197                           
  5198                           ;OverTemperature_B1.c: 132: if (myMain.PowerON == 1) {
  5199  0E9F  1C20               	btfss	_myMain^(0+128),0
  5200  0EA0  0008               	return
  5201                           
  5202                           ;OverTemperature_B1.c: 133: Temp.Enable = 1;
  5203  0EA1  1457               	bsf	_Temp^(0+128),0
  5204  0EA2  0008               	return
  5205  0EA3                     __end_of_setTemp_Main:	
  5206                           
  5207                           	psect	text10
  5208  1B9F                     __ptext10:	
  5209 ;; *************** function _Temp_Initialization *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		status,2, status,0, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;Total ram usage:        0 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    6
  5232 ;; This function calls:
  5233 ;;		_setTemp_Initialization
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _Temp_Initialization
  5241  1B9F                     _Temp_Initialization:	
  5242                           
  5243                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5247  1B9F  3187  27FF         	fcall	_setTemp_Initialization
  5248  1BA1  0008               	return
  5249  1BA2                     __end_of_Temp_Initialization:	
  5250                           
  5251                           	psect	text11
  5252  07FF                     __ptext11:	
  5253 ;; *************** function _setTemp_Initialization *****************
  5254 ;; Defined at:
  5255 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		None
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    5
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_Temp_Initialization
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _setTemp_Initialization
  5285  07FF                     _setTemp_Initialization:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in _setTemp_Initialization: []
  5289  07FF  0008               	return
  5290  0800                     __end_of_setTemp_Initialization:	
  5291                           
  5292                           	psect	text12
  5293  1EF4                     __ptext12:	
  5294 ;; *************** function _Switch_Main *****************
  5295 ;; Defined at:
  5296 ;;		line 72 in file "../src/Switch_B1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  error           1   30[BANK0 ] unsigned char 
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;Total ram usage:        2 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:   11
  5317 ;; This function calls:
  5318 ;;		_TouchPower
  5319 ;;		_getMain_All_Error_Status
  5320 ;;		_setMain_Exception
  5321 ;;		_setSw_Main
  5322 ;; This function is called by:
  5323 ;;		_main
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function _Switch_Main
  5329  1EF4                     _Switch_Main:	
  5330                           
  5331                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5335  1EF4  3000               	movlw	0
  5336  1EF5  3191  21DF  319E   	fcall	_getMain_All_Error_Status
  5337  1EF8  0020               	movlb	0	; select bank0
  5338  1EF9  00BD               	movwf	??_Switch_Main
  5339  1EFA  083D               	movf	??_Switch_Main,w
  5340  1EFB  00BE               	movwf	Switch_Main@error
  5341                           
  5342                           ;Switch_B1.c: 74: if (error != 0) {
  5343  1EFC  083E               	movf	Switch_Main@error,w
  5344  1EFD  1903               	btfsc	3,2
  5345  1EFE  2F04               	goto	l2382
  5346                           
  5347                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5348  1EFF  0021               	movlb	1	; select bank1
  5349  1F00  1852               	btfsc	_SwDetect^(0+128),0
  5350  1F01  2F0D               	goto	l7873
  5351                           
  5352                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5353  1F02  1452               	bsf	_SwDetect^(0+128),0
  5354  1F03  2F08               	goto	L2
  5355  1F04                     l2382:	
  5356                           ;Switch_B1.c: 80: }
  5357                           ;Switch_B1.c: 81: } else {
  5358                           
  5359                           ;Switch_B1.c: 78: setMain_Exception(error);
  5360                           
  5361                           
  5362                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5363  1F04  0021               	movlb	1	; select bank1
  5364  1F05  1C52               	btfss	_SwDetect^(0+128),0
  5365  1F06  2F0D               	goto	l7873
  5366                           
  5367                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5368  1F07  1052               	bcf	_SwDetect^(0+128),0
  5369  1F08                     L2:	
  5370                           
  5371                           ;Switch_B1.c: 85: setMain_Exception(error);
  5372  1F08  0020               	movlb	0	; select bank0
  5373  1F09  083E               	movf	Switch_Main@error,w
  5374  1F0A  3188  200B  319E   	fcall	_setMain_Exception
  5375  1F0D                     l7873:	
  5376                           
  5377                           ;Switch_B1.c: 87: }
  5378                           ;Switch_B1.c: 88: }
  5379                           ;Switch_B1.c: 91: setSw_Main(1);
  5380  1F0D  3001               	movlw	1
  5381  1F0E  3181  21C0  319E   	fcall	_setSw_Main
  5382                           
  5383                           ;Switch_B1.c: 103: TouchPower();
  5384  1F11  319E  263A         	fcall	_TouchPower
  5385  1F13  0008               	return
  5386  1F14                     __end_of_Switch_Main:	
  5387                           
  5388                           	psect	text13
  5389  01C0                     __ptext13:	
  5390 ;; *************** function _setSw_Main *****************
  5391 ;; Defined at:
  5392 ;;		line 137 in file "../src/Switch_B1.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  sw              1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  sw              1   19[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;Total ram usage:        3 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    9
  5413 ;; This function calls:
  5414 ;;		_SwPointSelect
  5415 ;;		_getSw_KeyStatus
  5416 ;;		_setBuz
  5417 ;;		_setDimmerLights_AdjControl
  5418 ;;		_setDimmerLights_SwOff
  5419 ;;		_setDimmerLights_SwOn
  5420 ;;		_setRF_Learn
  5421 ;; This function is called by:
  5422 ;;		_Switch_Main
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _setSw_Main
  5428  01C0                     _setSw_Main:	
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5432                           ;setSw_Main@sw stored from wreg
  5433  01C0  0020               	movlb	0	; select bank0
  5434  01C1  00B3               	movwf	setSw_Main@sw
  5435                           
  5436                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5437  01C2  0833               	movf	setSw_Main@sw,w
  5438  01C3  3188  2000  3181   	fcall	_SwPointSelect
  5439                           
  5440                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5441  01C6  087C               	movf	_Sw,w
  5442  01C7  0086               	movwf	6
  5443  01C8  3001               	movlw	1	; select bank2/3
  5444  01C9  0087               	movwf	7
  5445  01CA  1C01               	btfss	1,0
  5446  01CB  2B26               	goto	l2392
  5447                           
  5448                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5449  01CC  0021               	movlb	1	; select bank1
  5450  01CD  1852               	btfsc	_SwDetect^(0+128),0
  5451  01CE  29EA               	goto	l7315
  5452                           
  5453                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5454  01CF  0A7C               	incf	_Sw,w
  5455  01D0  0086               	movwf	6
  5456  01D1  3001               	movlw	1	; select bank2/3
  5457  01D2  0087               	movwf	7
  5458  01D3  1081               	bcf	1,1
  5459                           
  5460                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5461  01D4  0020               	movlb	0	; select bank0
  5462  01D5  0833               	movf	setSw_Main@sw,w
  5463  01D6  319D  257B  3181   	fcall	_getSw_KeyStatus
  5464  01D9  3A01               	xorlw	1
  5465  01DA  3000               	movlw	0
  5466  01DB  1903               	skipnz
  5467  01DC  3001               	movlw	1
  5468  01DD  0020               	movlb	0	; select bank0
  5469  01DE  00B1               	movwf	??_setSw_Main
  5470  01DF  087C               	movf	_Sw,w
  5471  01E0  0086               	movwf	6
  5472  01E1  3001               	movlw	1	; select bank2/3
  5473  01E2  0087               	movwf	7
  5474  01E3  0DB1               	rlf	??_setSw_Main,f
  5475  01E4  0801               	movf	1,w
  5476  01E5  0631               	xorwf	??_setSw_Main,w
  5477  01E6  39FD               	andlw	-3
  5478  01E7  0631               	xorwf	??_setSw_Main,w
  5479  01E8  0081               	movwf	1
  5480                           
  5481                           ;Switch_B1.c: 143: } else {
  5482  01E9  29FF               	goto	l2394
  5483  01EA                     l7315:	
  5484                           
  5485                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5486  01EA  0A7C               	incf	_Sw,w
  5487  01EB  0086               	movwf	6
  5488  01EC  3001               	movlw	1	; select bank2/3
  5489  01ED  0087               	movwf	7
  5490  01EE  1881               	btfsc	1,1
  5491  01EF  29FF               	goto	l2394
  5492                           
  5493                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5494  01F0  0A7C               	incf	_Sw,w
  5495  01F1  0086               	movwf	6
  5496  01F2  3001               	movlw	1	; select bank2/3
  5497  01F3  0087               	movwf	7
  5498  01F4  1481               	bsf	1,1
  5499                           
  5500                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5501  01F5  087C               	movf	_Sw,w
  5502  01F6  0086               	movwf	6
  5503  01F7  3001               	movlw	1	; select bank2/3
  5504  01F8  0087               	movwf	7
  5505  01F9  1081               	bcf	1,1
  5506                           
  5507                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5508  01FA  087C               	movf	_Sw,w
  5509  01FB  0086               	movwf	6
  5510  01FC  3001               	movlw	1	; select bank2/3
  5511  01FD  0087               	movwf	7
  5512  01FE  1501               	bsf	1,2
  5513  01FF                     l2394:	
  5514                           
  5515                           ;Switch_B1.c: 148: }
  5516                           ;Switch_B1.c: 149: }
  5517                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5518  01FF  087C               	movf	_Sw,w
  5519  0200  0086               	movwf	6
  5520  0201  3001               	movlw	1	; select bank2/3
  5521  0202  0087               	movwf	7
  5522  0203  1C81               	btfss	1,1
  5523  0204  2ACF               	goto	l7365
  5524                           
  5525                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5526  0205  087C               	movf	_Sw,w
  5527  0206  0086               	movwf	6
  5528  0207  3001               	movlw	1	; select bank2/3
  5529  0208  0087               	movwf	7
  5530  0209  1901               	btfsc	1,2
  5531  020A  2A2D               	goto	l7331
  5532                           
  5533                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5534  020B  3001               	movlw	1
  5535  020C  0020               	movlb	0	; select bank0
  5536  020D  00B1               	movwf	??_setSw_Main
  5537  020E  087C               	movf	_Sw,w
  5538  020F  3E02               	addlw	2
  5539  0210  0086               	movwf	6
  5540  0211  3001               	movlw	1	; select bank2/3
  5541  0212  0087               	movwf	7
  5542  0213  0831               	movf	??_setSw_Main,w
  5543  0214  0781               	addwf	1,f
  5544                           
  5545                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5546  0215  087C               	movf	_Sw,w
  5547  0216  3E02               	addlw	2
  5548  0217  0086               	movwf	6
  5549  0218  3001               	movlw	1	; select bank2/3
  5550  0219  0087               	movwf	7
  5551  021A  3005               	movlw	5
  5552  021B  0201               	subwf	1,w
  5553  021C  1C03               	skipc
  5554  021D  0008               	return
  5555                           
  5556                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5557  021E  087C               	movf	_Sw,w
  5558  021F  3E02               	addlw	2
  5559  0220  0086               	movwf	6
  5560  0221  3001               	movlw	1	; select bank2/3
  5561  0222  0087               	movwf	7
  5562  0223  0181               	clrf	1
  5563                           
  5564                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5565  0224  087C               	movf	_Sw,w
  5566  0225  0086               	movwf	6
  5567  0226  3001               	movlw	1	; select bank2/3
  5568  0227  0087               	movwf	7
  5569  0228  1501               	bsf	1,2
  5570                           
  5571                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5572  0229  0833               	movf	setSw_Main@sw,w
  5573  022A  3193  23FE         	fcall	_setDimmerLights_SwOn
  5574                           
  5575                           ;Switch_B1.c: 162: }
  5576                           ;Switch_B1.c: 163: } else {
  5577  022C  0008               	return
  5578  022D                     l7331:	
  5579                           
  5580                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5581  022D  087C               	movf	_Sw,w
  5582  022E  0086               	movwf	6
  5583  022F  3001               	movlw	1	; select bank2/3
  5584  0230  0087               	movwf	7
  5585  0231  1981               	btfsc	1,3
  5586  0232  2A5F               	goto	l7341
  5587                           
  5588                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5589  0233  087C               	movf	_Sw,w
  5590  0234  3E03               	addlw	3
  5591  0235  0086               	movwf	6
  5592  0236  3001               	movlw	1	; select bank2/3
  5593  0237  0087               	movwf	7
  5594  0238  3001               	movlw	1
  5595  0239  0781               	addwf	1,f
  5596  023A  3141               	addfsr 1,1
  5597  023B  1803               	skipnc
  5598  023C  0A81               	incf	1,f
  5599                           
  5600                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5601  023D  087C               	movf	_Sw,w
  5602  023E  3E03               	addlw	3
  5603  023F  0086               	movwf	6
  5604  0240  3001               	movlw	1	; select bank2/3
  5605  0241  0087               	movwf	7
  5606  0242  3F40               	moviw [0]fsr1
  5607  0243  0020               	movlb	0	; select bank0
  5608  0244  00B1               	movwf	??_setSw_Main
  5609  0245  3F41               	moviw [1]fsr1
  5610  0246  00B2               	movwf	??_setSw_Main+1
  5611  0247  3000               	movlw	0
  5612  0248  0232               	subwf	??_setSw_Main+1,w
  5613  0249  3096               	movlw	150
  5614  024A  1903               	skipnz
  5615  024B  0231               	subwf	??_setSw_Main,w
  5616  024C  1C03               	skipc
  5617  024D  0008               	return
  5618                           
  5619                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5620  024E  087C               	movf	_Sw,w
  5621  024F  3E03               	addlw	3
  5622  0250  0086               	movwf	6
  5623  0251  3001               	movlw	1	; select bank2/3
  5624  0252  0087               	movwf	7
  5625  0253  3000               	movlw	0
  5626  0254  3FC0               	movwi [0]fsr1
  5627  0255  3FC1               	movwi [1]fsr1
  5628                           
  5629                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5630  0256  087C               	movf	_Sw,w
  5631  0257  0086               	movwf	6
  5632  0258  3001               	movlw	1	; select bank2/3
  5633  0259  0087               	movwf	7
  5634  025A  1581               	bsf	1,3
  5635                           
  5636                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5637  025B  0833               	movf	setSw_Main@sw,w
  5638  025C  3192  2245         	fcall	_setDimmerLights_AdjControl
  5639                           
  5640                           ;Switch_B1.c: 174: }
  5641                           ;Switch_B1.c: 175: } else {
  5642  025E  0008               	return
  5643  025F                     l7341:	
  5644                           
  5645                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5646  025F  087C               	movf	_Sw,w
  5647  0260  0086               	movwf	6
  5648  0261  3001               	movlw	1	; select bank2/3
  5649  0262  0087               	movwf	7
  5650  0263  1A01               	btfsc	1,4
  5651  0264  2A9D               	goto	l7355
  5652                           
  5653                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5654  0265  087C               	movf	_Sw,w
  5655  0266  3E05               	addlw	5
  5656  0267  0086               	movwf	6
  5657  0268  3001               	movlw	1	; select bank2/3
  5658  0269  0087               	movwf	7
  5659  026A  3001               	movlw	1
  5660  026B  0781               	addwf	1,f
  5661  026C  3141               	addfsr 1,1
  5662  026D  1803               	skipnc
  5663  026E  0A81               	incf	1,f
  5664                           
  5665                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5666  026F  087C               	movf	_Sw,w
  5667  0270  3E05               	addlw	5
  5668  0271  0086               	movwf	6
  5669  0272  3001               	movlw	1	; select bank2/3
  5670  0273  0087               	movwf	7
  5671  0274  3F40               	moviw [0]fsr1
  5672  0275  0020               	movlb	0	; select bank0
  5673  0276  00B1               	movwf	??_setSw_Main
  5674  0277  3F41               	moviw [1]fsr1
  5675  0278  00B2               	movwf	??_setSw_Main+1
  5676  0279  3000               	movlw	0
  5677  027A  0232               	subwf	??_setSw_Main+1,w
  5678  027B  3096               	movlw	150
  5679  027C  1903               	skipnz
  5680  027D  0231               	subwf	??_setSw_Main,w
  5681  027E  1C03               	skipc
  5682  027F  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5685  0280  087C               	movf	_Sw,w
  5686  0281  3E05               	addlw	5
  5687  0282  0086               	movwf	6
  5688  0283  3001               	movlw	1	; select bank2/3
  5689  0284  0087               	movwf	7
  5690  0285  3000               	movlw	0
  5691  0286  3FC0               	movwi [0]fsr1
  5692  0287  3FC1               	movwi [1]fsr1
  5693                           
  5694                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5695  0288  087C               	movf	_Sw,w
  5696  0289  0086               	movwf	6
  5697  028A  3001               	movlw	1	; select bank2/3
  5698  028B  0087               	movwf	7
  5699  028C  1601               	bsf	1,4
  5700                           
  5701                           ;Switch_B1.c: 183: setRF_Learn(1);
  5702  028D  3001               	movlw	1
  5703  028E  319D  25FC  3181   	fcall	_setRF_Learn
  5704                           
  5705                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5706  0291  0021               	movlb	1	; select bank1
  5707  0292  1EA0               	btfss	_myMain^(0+128),5
  5708  0293  0008               	return
  5709                           
  5710                           ;Switch_B1.c: 186: setBuz(2, 100);
  5711  0294  3064               	movlw	100
  5712  0295  0020               	movlb	0	; select bank0
  5713  0296  00A9               	movwf	setBuz@time
  5714  0297  3000               	movlw	0
  5715  0298  00AA               	movwf	setBuz@time+1
  5716  0299  3002               	movlw	2
  5717  029A  3196  26F2         	fcall	_setBuz
  5718                           
  5719                           ;Switch_B1.c: 187: }
  5720                           ;Switch_B1.c: 189: }
  5721                           ;Switch_B1.c: 190: } else {
  5722  029C  0008               	return
  5723  029D                     l7355:	
  5724                           
  5725                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5726  029D  087C               	movf	_Sw,w
  5727  029E  0086               	movwf	6
  5728  029F  3001               	movlw	1	; select bank2/3
  5729  02A0  0087               	movwf	7
  5730  02A1  1A81               	btfsc	1,5
  5731  02A2  0008               	return
  5732                           
  5733                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5734  02A3  087C               	movf	_Sw,w
  5735  02A4  3E07               	addlw	7
  5736  02A5  0086               	movwf	6
  5737  02A6  3001               	movlw	1	; select bank2/3
  5738  02A7  0087               	movwf	7
  5739  02A8  3001               	movlw	1
  5740  02A9  0781               	addwf	1,f
  5741  02AA  3141               	addfsr 1,1
  5742  02AB  1803               	skipnc
  5743  02AC  0A81               	incf	1,f
  5744                           
  5745                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5746  02AD  087C               	movf	_Sw,w
  5747  02AE  3E07               	addlw	7
  5748  02AF  0086               	movwf	6
  5749  02B0  3001               	movlw	1	; select bank2/3
  5750  02B1  0087               	movwf	7
  5751  02B2  3F40               	moviw [0]fsr1
  5752  02B3  0020               	movlb	0	; select bank0
  5753  02B4  00B1               	movwf	??_setSw_Main
  5754  02B5  3F41               	moviw [1]fsr1
  5755  02B6  00B2               	movwf	??_setSw_Main+1
  5756  02B7  3001               	movlw	1
  5757  02B8  0232               	subwf	??_setSw_Main+1,w
  5758  02B9  302C               	movlw	44
  5759  02BA  1903               	skipnz
  5760  02BB  0231               	subwf	??_setSw_Main,w
  5761  02BC  1C03               	skipc
  5762  02BD  0008               	return
  5763                           
  5764                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5765  02BE  087C               	movf	_Sw,w
  5766  02BF  3E07               	addlw	7
  5767  02C0  0086               	movwf	6
  5768  02C1  3001               	movlw	1	; select bank2/3
  5769  02C2  0087               	movwf	7
  5770  02C3  3000               	movlw	0
  5771  02C4  3FC0               	movwi [0]fsr1
  5772  02C5  3FC1               	movwi [1]fsr1
  5773                           
  5774                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5775  02C6  087C               	movf	_Sw,w
  5776  02C7  0086               	movwf	6
  5777  02C8  3001               	movlw	1	; select bank2/3
  5778  02C9  0087               	movwf	7
  5779  02CA  1681               	bsf	1,5
  5780                           
  5781                           ;Switch_B1.c: 198: setRF_Learn(0);
  5782  02CB  3000               	movlw	0
  5783  02CC  319D  25FC         	fcall	_setRF_Learn
  5784                           
  5785                           ;Switch_B1.c: 201: }
  5786                           ;Switch_B1.c: 202: }
  5787                           ;Switch_B1.c: 203: }
  5788                           ;Switch_B1.c: 204: }
  5789                           ;Switch_B1.c: 205: }
  5790                           ;Switch_B1.c: 206: } else {
  5791  02CE  0008               	return
  5792  02CF                     l7365:	
  5793                           
  5794                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5795  02CF  087C               	movf	_Sw,w
  5796  02D0  0086               	movwf	6
  5797  02D1  3001               	movlw	1	; select bank2/3
  5798  02D2  0087               	movwf	7
  5799  02D3  1D01               	btfss	1,2
  5800  02D4  0008               	return
  5801                           
  5802                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5803  02D5  3001               	movlw	1
  5804  02D6  0020               	movlb	0	; select bank0
  5805  02D7  00B1               	movwf	??_setSw_Main
  5806  02D8  087C               	movf	_Sw,w
  5807  02D9  3E02               	addlw	2
  5808  02DA  0086               	movwf	6
  5809  02DB  3001               	movlw	1	; select bank2/3
  5810  02DC  0087               	movwf	7
  5811  02DD  0831               	movf	??_setSw_Main,w
  5812  02DE  0781               	addwf	1,f
  5813                           
  5814                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5815  02DF  087C               	movf	_Sw,w
  5816  02E0  3E02               	addlw	2
  5817  02E1  0086               	movwf	6
  5818  02E2  3001               	movlw	1	; select bank2/3
  5819  02E3  0087               	movwf	7
  5820  02E4  3005               	movlw	5
  5821  02E5  0201               	subwf	1,w
  5822  02E6  1C03               	skipc
  5823  02E7  0008               	return
  5824                           
  5825                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5826  02E8  087C               	movf	_Sw,w
  5827  02E9  3E02               	addlw	2
  5828  02EA  0086               	movwf	6
  5829  02EB  3001               	movlw	1	; select bank2/3
  5830  02EC  0087               	movwf	7
  5831  02ED  0181               	clrf	1
  5832                           
  5833                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5834  02EE  087C               	movf	_Sw,w
  5835  02EF  0086               	movwf	6
  5836  02F0  3001               	movlw	1	; select bank2/3
  5837  02F1  0087               	movwf	7
  5838  02F2  1101               	bcf	1,2
  5839                           
  5840                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5841  02F3  087C               	movf	_Sw,w
  5842  02F4  3E03               	addlw	3
  5843  02F5  0086               	movwf	6
  5844  02F6  3001               	movlw	1	; select bank2/3
  5845  02F7  0087               	movwf	7
  5846  02F8  3000               	movlw	0
  5847  02F9  3FC0               	movwi [0]fsr1
  5848  02FA  3FC1               	movwi [1]fsr1
  5849                           
  5850                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5851  02FB  087C               	movf	_Sw,w
  5852  02FC  0086               	movwf	6
  5853  02FD  3001               	movlw	1	; select bank2/3
  5854  02FE  0087               	movwf	7
  5855  02FF  1181               	bcf	1,3
  5856                           
  5857                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5858  0300  087C               	movf	_Sw,w
  5859  0301  3E05               	addlw	5
  5860  0302  0086               	movwf	6
  5861  0303  3001               	movlw	1	; select bank2/3
  5862  0304  0087               	movwf	7
  5863  0305  3000               	movlw	0
  5864  0306  3FC0               	movwi [0]fsr1
  5865  0307  3FC1               	movwi [1]fsr1
  5866                           
  5867                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5868  0308  087C               	movf	_Sw,w
  5869  0309  0086               	movwf	6
  5870  030A  3001               	movlw	1	; select bank2/3
  5871  030B  0087               	movwf	7
  5872  030C  1201               	bcf	1,4
  5873                           
  5874                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5875  030D  087C               	movf	_Sw,w
  5876  030E  3E07               	addlw	7
  5877  030F  0086               	movwf	6
  5878  0310  3001               	movlw	1	; select bank2/3
  5879  0311  0087               	movwf	7
  5880  0312  3000               	movlw	0
  5881  0313  3FC0               	movwi [0]fsr1
  5882  0314  3FC1               	movwi [1]fsr1
  5883                           
  5884                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5885  0315  087C               	movf	_Sw,w
  5886  0316  0086               	movwf	6
  5887  0317  3001               	movlw	1	; select bank2/3
  5888  0318  0087               	movwf	7
  5889  0319  1281               	bcf	1,5
  5890                           
  5891                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5892  031A  0021               	movlb	1	; select bank1
  5893  031B  1852               	btfsc	_SwDetect^(0+128),0
  5894  031C  2B22               	goto	l7391
  5895                           
  5896                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5897  031D  0020               	movlb	0	; select bank0
  5898  031E  0833               	movf	setSw_Main@sw,w
  5899  031F  3194  24BE  3181   	fcall	_setDimmerLights_SwOff
  5900  0322                     l7391:	
  5901                           
  5902                           ;Switch_B1.c: 221: }
  5903                           ;Switch_B1.c: 224: setRF_Learn(0);
  5904  0322  3000               	movlw	0
  5905  0323  319D  25FC         	fcall	_setRF_Learn
  5906                           
  5907                           ;Switch_B1.c: 226: }
  5908                           ;Switch_B1.c: 227: }
  5909                           ;Switch_B1.c: 228: }
  5910                           ;Switch_B1.c: 229: } else {
  5911  0325  0008               	return
  5912  0326                     l2392:	
  5913                           
  5914                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5915  0326  0021               	movlb	1	; select bank1
  5916  0327  1C20               	btfss	_myMain^(0+128),0
  5917  0328  0008               	return
  5918                           
  5919                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5920  0329  087C               	movf	_Sw,w
  5921  032A  0086               	movwf	6
  5922  032B  3001               	movlw	1	; select bank2/3
  5923  032C  0087               	movwf	7
  5924  032D  1401               	bsf	1,0
  5925  032E  0008               	return
  5926  032F                     __end_of_setSw_Main:	
  5927                           
  5928                           	psect	text14
  5929  1DFC                     __ptext14:	
  5930 ;; *************** function _setRF_Learn *****************
  5931 ;; Defined at:
  5932 ;;		line 23 in file "../src/RF_Control_B1.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  command         1    wreg     unsigned char 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  command         1    1[BANK0 ] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;		None               void
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;Total ram usage:        2 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    5
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_setSw_Main
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function _setRF_Learn
  5962  1DFC                     _setRF_Learn:	
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5966                           ;setRF_Learn@command stored from wreg
  5967  1DFC  0020               	movlb	0	; select bank0
  5968  1DFD  00A1               	movwf	setRF_Learn@command
  5969                           
  5970                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5971  1DFE  0821               	movf	setRF_Learn@command,w
  5972  1DFF  3A01               	xorlw	1
  5973  1E00  3000               	movlw	0
  5974  1E01  1903               	skipnz
  5975  1E02  3001               	movlw	1
  5976  1E03  00A0               	movwf	??_setRF_Learn
  5977  1E04  0EA0               	swapf	??_setRF_Learn,f
  5978  1E05  0DA0               	rlf	??_setRF_Learn,f
  5979  1E06  0DA0               	rlf	??_setRF_Learn,f
  5980  1E07  0021               	movlb	1	; select bank1
  5981  1E08  083A               	movf	_RF1^(0+128),w
  5982  1E09  0020               	movlb	0	; select bank0
  5983  1E0A  0620               	xorwf	??_setRF_Learn,w
  5984  1E0B  39BF               	andlw	-65
  5985  1E0C  0620               	xorwf	??_setRF_Learn,w
  5986  1E0D  0021               	movlb	1	; select bank1
  5987  1E0E  00BA               	movwf	_RF1^(0+128)
  5988  1E0F  0008               	return
  5989  1E10                     __end_of_setRF_Learn:	
  5990                           
  5991                           	psect	text15
  5992  1245                     __ptext15:	
  5993 ;; *************** function _setDimmerLights_AdjControl *****************
  5994 ;; Defined at:
  5995 ;;		line 546 in file "../src/Dimmer_B1.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  sw              1    wreg     unsigned char 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  sw              1    8[BANK0 ] unsigned char 
  6000 ;;  idle            1    6[BANK0 ] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;		None               void
  6003 ;; Registers used:
  6004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;Total ram usage:        4 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    7
  6017 ;; This function calls:
  6018 ;;		_DimmerLightsPointSelect
  6019 ;;		_getAll_DimmerLights_AdjGO
  6020 ;;		_setDimmerLights_TriggerAdj
  6021 ;; This function is called by:
  6022 ;;		_setSw_Main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function _setDimmerLights_AdjControl
  6028  1245                     _setDimmerLights_AdjControl:	
  6029                           
  6030                           ;incstack = 0
  6031                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6032                           ;setDimmerLights_AdjControl@sw stored from wreg
  6033  1245  0020               	movlb	0	; select bank0
  6034  1246  00A8               	movwf	setDimmerLights_AdjControl@sw
  6035                           
  6036                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6037  1247  0828               	movf	setDimmerLights_AdjControl@sw,w
  6038  1248  319C  2441  3192   	fcall	_DimmerLightsPointSelect
  6039                           
  6040                           ;Dimmer_B1.c: 548: char idle = 0;
  6041  124B  0020               	movlb	0	; select bank0
  6042  124C  01A6               	clrf	setDimmerLights_AdjControl@idle
  6043                           
  6044                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6045  124D  01A7               	clrf	_setDimmerLights_AdjControl$2113
  6046  124E  319C  2421  3192   	fcall	_getAll_DimmerLights_AdjGO
  6047  1251  3A01               	xorlw	1
  6048  1252  1D03               	skipz
  6049  1253  2A5A               	goto	l6539
  6050  1254  0022               	movlb	2	; select bank2
  6051  1255  1CBE               	btfss	_Dimmer^(0+256),1
  6052  1256  2A5A               	goto	l6539
  6053  1257  0020               	movlb	0	; select bank0
  6054  1258  01A7               	clrf	_setDimmerLights_AdjControl$2113
  6055  1259  0AA7               	incf	_setDimmerLights_AdjControl$2113,f
  6056  125A                     l6539:	
  6057  125A  0020               	movlb	0	; select bank0
  6058  125B  0827               	movf	_setDimmerLights_AdjControl$2113,w
  6059  125C  00A5               	movwf	??_setDimmerLights_AdjControl
  6060  125D  0825               	movf	??_setDimmerLights_AdjControl,w
  6061  125E  00A6               	movwf	setDimmerLights_AdjControl@idle
  6062                           
  6063                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6064  125F  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6065  1260  1D03               	skipz
  6066  1261  0008               	return
  6067                           
  6068                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6069  1262  086F               	movf	_DimmerLights,w
  6070  1263  3E09               	addlw	9
  6071  1264  0086               	movwf	6
  6072  1265  3001               	movlw	1	; select bank2/3
  6073  1266  0087               	movwf	7
  6074  1267  1F01               	btfss	1,6
  6075  1268  0008               	return
  6076                           
  6077                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6078  1269  086F               	movf	_DimmerLights,w
  6079  126A  3E09               	addlw	9
  6080  126B  0086               	movwf	6
  6081  126C  3001               	movlw	1	; select bank2/3
  6082  126D  0087               	movwf	7
  6083  126E  1781               	bsf	1,7
  6084                           
  6085                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6086  126F  086F               	movf	_DimmerLights,w
  6087  1270  0086               	movwf	6
  6088  1271  3001               	movlw	1	; select bank2/3
  6089  1272  0087               	movwf	7
  6090  1273  1681               	bsf	1,5
  6091                           
  6092                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6093  1274  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6094  1275  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6095  1276  0828               	movf	setDimmerLights_AdjControl@sw,w
  6096  1277  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
  6097  1279  0008               	return
  6098  127A                     __end_of_setDimmerLights_AdjControl:	
  6099                           
  6100                           	psect	text16
  6101  1D7B                     __ptext16:	
  6102 ;; *************** function _getSw_KeyStatus *****************
  6103 ;; Defined at:
  6104 ;;		line 237 in file "../src/Switch_B1.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  sw              1    wreg     unsigned char 
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  sw              1    0[COMMON] unsigned char 
  6109 ;;  status          1    1[BANK0 ] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      unsigned char 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;Total ram usage:        3 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    5
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_setSw_Main
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           
  6134                           ;psect for function _getSw_KeyStatus
  6135  1D7B                     _getSw_KeyStatus:	
  6136                           
  6137                           ;Switch_B1.c: 238: char status = 0;
  6138                           
  6139                           ;incstack = 0
  6140                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6141  1D7B  0020               	movlb	0	; select bank0
  6142  1D7C  01A1               	clrf	getSw_KeyStatus@status
  6143                           
  6144                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6145  1D7D  01A2               	clrf	_getSw_KeyStatus$5828
  6146  1D7E  0AA2               	incf	_getSw_KeyStatus$5828,f
  6147  1D7F  1F0C               	btfss	12,6	;volatile
  6148  1D80  1A0C               	btfsc	12,4	;volatile
  6149  1D81  2D86               	goto	l6737
  6150  1D82  1C0C               	btfss	12,0	;volatile
  6151  1D83  1B8C               	btfsc	12,7	;volatile
  6152  1D84  2D86               	goto	l6737
  6153  1D85  01A2               	clrf	_getSw_KeyStatus$5828
  6154  1D86                     l6737:	
  6155  1D86  0822               	movf	_getSw_KeyStatus$5828,w
  6156  1D87  00A0               	movwf	??_getSw_KeyStatus
  6157  1D88  0820               	movf	??_getSw_KeyStatus,w
  6158  1D89  00A1               	movwf	getSw_KeyStatus@status
  6159                           
  6160                           ;Switch_B1.c: 261: return status;
  6161  1D8A  0821               	movf	getSw_KeyStatus@status,w
  6162  1D8B  0008               	return
  6163  1D8C                     __end_of_getSw_KeyStatus:	
  6164                           
  6165                           	psect	text17
  6166  0800                     __ptext17:	
  6167 ;; *************** function _SwPointSelect *****************
  6168 ;; Defined at:
  6169 ;;		line 25 in file "../src/Switch_B1.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  sw              1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  sw              1    1[BANK0 ] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;		None               void
  6176 ;; Registers used:
  6177 ;;		wreg
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;Total ram usage:        2 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    5
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_setSw_Main
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _SwPointSelect
  6199  0800                     _SwPointSelect:	
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in _SwPointSelect: [wreg]
  6203                           ;SwPointSelect@sw stored from wreg
  6204  0800  0020               	movlb	0	; select bank0
  6205  0801  00A1               	movwf	SwPointSelect@sw
  6206                           
  6207                           ;Switch_B1.c: 28: if (sw == 1) {
  6208  0802  0821               	movf	SwPointSelect@sw,w
  6209  0803  3A01               	xorlw	1
  6210  0804  1D03               	skipz
  6211  0805  0008               	return
  6212                           
  6213                           ;Switch_B1.c: 29: Sw = &Sw1;
  6214  0806  30D4               	movlw	_Sw1& (0+255)
  6215  0807  00A0               	movwf	??_SwPointSelect
  6216  0808  0820               	movf	??_SwPointSelect,w
  6217  0809  00FC               	movwf	_Sw
  6218  080A  0008               	return
  6219  080B                     __end_of_SwPointSelect:	
  6220                           
  6221                           	psect	text18
  6222  080B                     __ptext18:	
  6223 ;; *************** function _setMain_Exception *****************
  6224 ;; Defined at:
  6225 ;;		line 284 in file "../src/Main_B1.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  command         1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  command         1   28[BANK0 ] unsigned char 
  6230 ;;  status          1   27[BANK0 ] unsigned char 
  6231 ;;  buz             1   24[BANK0 ] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;		None               void
  6234 ;; Registers used:
  6235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;Total ram usage:        7 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:   10
  6248 ;; This function calls:
  6249 ;;		_getDimmerLights_Line
  6250 ;;		_getMain_LightsStatus
  6251 ;;		_setBuz
  6252 ;;		_setDimmerLights_ErrorClose
  6253 ;;		_setLED
  6254 ;; This function is called by:
  6255 ;;		_Switch_Main
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _setMain_Exception
  6261  080B                     _setMain_Exception:	
  6262                           
  6263                           ;incstack = 0
  6264                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6265                           ;setMain_Exception@command stored from wreg
  6266  080B  0020               	movlb	0	; select bank0
  6267  080C  00BC               	movwf	setMain_Exception@command
  6268                           
  6269                           ;Main_B1.c: 285: char status = 0, buz = 0;
  6270  080D  01BB               	clrf	setMain_Exception@status
  6271  080E  01B8               	clrf	setMain_Exception@buz
  6272                           
  6273                           ;Main_B1.c: 302: status = command == 3 ? getDimmerLights_Line() : 255;
  6274  080F  083C               	movf	setMain_Exception@command,w
  6275  0810  3A03               	xorlw	3
  6276  0811  1903               	skipnz
  6277  0812  2817               	goto	l7067
  6278  0813  30FF               	movlw	255
  6279  0814  00B9               	movwf	_setMain_Exception$3310
  6280  0815  3000               	movlw	0
  6281  0816  2820               	goto	L3
  6282  0817                     l7067:	
  6283  0817  319C  246D  3188   	fcall	_getDimmerLights_Line
  6284  081A  0020               	movlb	0	; select bank0
  6285  081B  00B6               	movwf	??_setMain_Exception
  6286  081C  01B7               	clrf	??_setMain_Exception+1
  6287  081D  0836               	movf	??_setMain_Exception,w
  6288  081E  00B9               	movwf	_setMain_Exception$3310
  6289  081F  0837               	movf	??_setMain_Exception+1,w
  6290  0820                     L3:	
  6291  0820  00BA               	movwf	_setMain_Exception$3310+1
  6292  0821  0839               	movf	_setMain_Exception$3310,w
  6293  0822  00B6               	movwf	??_setMain_Exception
  6294  0823  0836               	movf	??_setMain_Exception,w
  6295  0824  00BB               	movwf	setMain_Exception@status
  6296                           
  6297                           ;Main_B1.c: 304: if (command == 0) {
  6298  0825  08BC               	movf	setMain_Exception@command,f
  6299  0826  1D03               	skipz
  6300  0827  282A               	goto	l7075
  6301                           
  6302                           ;Main_B1.c: 305: setLED(99, 10);
  6303  0828  300A               	movlw	10
  6304  0829  282C               	goto	L4
  6305  082A                     l7075:	
  6306                           ;Main_B1.c: 306: } else {
  6307                           
  6308                           
  6309                           ;Main_B1.c: 307: setLED(99, 11);
  6310  082A  300B               	movlw	11
  6311  082B  0020               	movlb	0	; select bank0
  6312  082C                     L4:	
  6313  082C  00B6               	movwf	??_setMain_Exception
  6314  082D  0836               	movf	??_setMain_Exception,w
  6315  082E  00A2               	movwf	setLED@command
  6316  082F  3063               	movlw	99
  6317  0830  3192  227A  3188   	fcall	_setLED
  6318                           
  6319                           ;Main_B1.c: 308: }
  6320                           ;Main_B1.c: 310: if (command != 0) {
  6321  0833  0020               	movlb	0	; select bank0
  6322  0834  083C               	movf	setMain_Exception@command,w
  6323  0835  1903               	btfsc	3,2
  6324  0836  0008               	return
  6325                           
  6326                           ;Main_B1.c: 311: switch (command) {
  6327  0837  2858               	goto	l7091
  6328  0838                     l7081:	
  6329                           ;Main_B1.c: 312: case 2:
  6330                           
  6331                           
  6332                           ;Main_B1.c: 313: if (getMain_LightsStatus() == 1) {
  6333  0838  3191  2123  3188   	fcall	_getMain_LightsStatus
  6334  083B  3A01               	xorlw	1
  6335  083C  1D03               	skipz
  6336  083D  2861               	goto	l7093
  6337                           
  6338                           ;Main_B1.c: 314: setBuz(10, 300);
  6339  083E  302C               	movlw	44
  6340  083F  0020               	movlb	0	; select bank0
  6341  0840  00A9               	movwf	setBuz@time
  6342  0841  3001               	movlw	1
  6343  0842  00AA               	movwf	setBuz@time+1
  6344  0843  300A               	movlw	10
  6345  0844  3196  26F2  3188   	fcall	_setBuz
  6346                           
  6347                           ;Main_B1.c: 315: }
  6348                           ;Main_B1.c: 316: break;
  6349  0847  2861               	goto	l7093
  6350  0848                     l7085:	
  6351                           ;Main_B1.c: 317: case 3:
  6352                           
  6353                           
  6354                           ;Main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6355  0848  3191  2123  3188   	fcall	_getMain_LightsStatus
  6356  084B  3A01               	xorlw	1
  6357  084C  1D03               	skipz
  6358  084D  2861               	goto	l7093
  6359                           
  6360                           ;Main_B1.c: 319: setBuz(5, 300);
  6361  084E  302C               	movlw	44
  6362  084F  0020               	movlb	0	; select bank0
  6363  0850  00A9               	movwf	setBuz@time
  6364  0851  3001               	movlw	1
  6365  0852  00AA               	movwf	setBuz@time+1
  6366  0853  3005               	movlw	5
  6367  0854  3196  26F2  3188   	fcall	_setBuz
  6368                           
  6369                           ;Main_B1.c: 322: }
  6370                           
  6371                           ;Main_B1.c: 320: }
  6372                           ;Main_B1.c: 321: break;
  6373  0857  2861               	goto	l7093
  6374  0858                     l7091:	
  6375  0858  0020               	movlb	0	; select bank0
  6376  0859  083C               	movf	setMain_Exception@command,w
  6377                           
  6378                           ; Switch size 1, requested type "space"
  6379                           ; Number of cases is 2, Range of values is 2 to 3
  6380                           ; switch strategies available:
  6381                           ; Name         Instructions Cycles
  6382                           ; simple_byte            7     4 (average)
  6383                           ; direct_byte           13     9 (fixed)
  6384                           ; jumptable            263     9 (fixed)
  6385                           ;	Chosen strategy is simple_byte
  6386  085A  3A02               	xorlw	2	; case 2
  6387  085B  1903               	skipnz
  6388  085C  2838               	goto	l7081
  6389  085D  3A01               	xorlw	1	; case 3
  6390  085E  1903               	skipnz
  6391  085F  2848               	goto	l7085
  6392  0860  2861               	goto	l7093
  6393  0861                     l7093:	
  6394                           
  6395                           ;Main_B1.c: 323: setDimmerLights_ErrorClose(status);
  6396  0861  0020               	movlb	0	; select bank0
  6397  0862  083B               	movf	setMain_Exception@status,w
  6398  0863  3196  2642         	fcall	_setDimmerLights_ErrorClose
  6399  0865  0020               	movlb	0	; select bank0
  6400  0866  0008               	return
  6401  0867                     __end_of_setMain_Exception:	
  6402                           
  6403                           	psect	text19
  6404  1C6D                     __ptext19:	
  6405 ;; *************** function _getDimmerLights_Line *****************
  6406 ;; Defined at:
  6407 ;;		line 695 in file "../src/Dimmer_B1.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;		None
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  line            1    0[BANK0 ] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      unsigned char 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;Total ram usage:        1 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    5
  6428 ;; This function calls:
  6429 ;;		Nothing
  6430 ;; This function is called by:
  6431 ;;		_setMain_Exception
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _getDimmerLights_Line
  6437  1C6D                     _getDimmerLights_Line:	
  6438                           
  6439                           ;Dimmer_B1.c: 696: char line = 0;
  6440                           
  6441                           ;incstack = 0
  6442                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6443  1C6D  0020               	movlb	0	; select bank0
  6444  1C6E  01A0               	clrf	getDimmerLights_Line@line
  6445                           
  6446                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6447  1C6F  0023               	movlb	3	; select bank3
  6448  1C70  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6449  1C71  2C75               	goto	l6561
  6450                           
  6451                           ;Dimmer_B1.c: 699: line = 1;
  6452  1C72  0020               	movlb	0	; select bank0
  6453  1C73  01A0               	clrf	getDimmerLights_Line@line
  6454  1C74  0AA0               	incf	getDimmerLights_Line@line,f
  6455  1C75                     l6561:	
  6456                           
  6457                           ;Dimmer_B1.c: 700: }
  6458                           ;Dimmer_B1.c: 712: return line;
  6459  1C75  0020               	movlb	0	; select bank0
  6460  1C76  0820               	movf	getDimmerLights_Line@line,w
  6461  1C77  0008               	return
  6462  1C78                     __end_of_getDimmerLights_Line:	
  6463                           
  6464                           	psect	text20
  6465  1C0E                     __ptext20:	
  6466 ;; *************** function _Switch_Initialization *****************
  6467 ;; Defined at:
  6468 ;;		line 46 in file "../src/Switch_B1.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;Total ram usage:        0 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    8
  6489 ;; This function calls:
  6490 ;;		_TouchPower
  6491 ;;		_setSw_Initialization
  6492 ;; This function is called by:
  6493 ;;		_main
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           
  6498                           ;psect for function _Switch_Initialization
  6499  1C0E                     _Switch_Initialization:	
  6500                           
  6501                           ;Switch_B1.c: 47: TouchPower();
  6502                           
  6503                           ;incstack = 0
  6504                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6505  1C0E  319E  263A  319C   	fcall	_TouchPower
  6506                           
  6507                           ;Switch_B1.c: 49: WPUB1 = 0;
  6508  1C11  0024               	movlb	4	; select bank4
  6509  1C12  108D               	bcf	13,1	;volatile
  6510                           
  6511                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6512  1C13  3001               	movlw	1
  6513  1C14  319D  2538         	fcall	_setSw_Initialization
  6514  1C16  0008               	return
  6515  1C17                     __end_of_Switch_Initialization:	
  6516                           
  6517                           	psect	text21
  6518  1D38                     __ptext21:	
  6519 ;; *************** function _setSw_Initialization *****************
  6520 ;; Defined at:
  6521 ;;		line 109 in file "../src/Switch_B1.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  sw              1    wreg     unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  sw              1    4[BANK0 ] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;Total ram usage:        1 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    7
  6542 ;; This function calls:
  6543 ;;		_setLED
  6544 ;; This function is called by:
  6545 ;;		_Switch_Initialization
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _setSw_Initialization
  6551  1D38                     _setSw_Initialization:	
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6555                           ;setSw_Initialization@sw stored from wreg
  6556  1D38  0020               	movlb	0	; select bank0
  6557  1D39  00A4               	movwf	setSw_Initialization@sw
  6558                           
  6559                           ;Switch_B1.c: 110: setLED(sw, 1);
  6560  1D3A  01A2               	clrf	setLED@command
  6561  1D3B  0AA2               	incf	setLED@command,f
  6562  1D3C  0824               	movf	setSw_Initialization@sw,w
  6563  1D3D  3192  227A  319D   	fcall	_setLED
  6564                           
  6565                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6566  1D40  0020               	movlb	0	; select bank0
  6567  1D41  01A2               	clrf	setLED@command
  6568  1D42  0AA2               	incf	setLED@command,f
  6569  1D43  0824               	movf	setSw_Initialization@sw,w
  6570  1D44  3E01               	addlw	1
  6571  1D45  3192  227A         	fcall	_setLED
  6572  1D47  0008               	return
  6573  1D48                     __end_of_setSw_Initialization:	
  6574                           
  6575                           	psect	text22
  6576  1E3A                     __ptext22:	
  6577 ;; *************** function _TouchPower *****************
  6578 ;; Defined at:
  6579 ;;		line 10 in file "../src/Switch_B1.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;		None
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;		None
  6584 ;; Return value:  Size  Location     Type
  6585 ;;		None               void
  6586 ;; Registers used:
  6587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;Total ram usage:        0 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    6
  6600 ;; This function calls:
  6601 ;;		_Timeout_Counter
  6602 ;;		_set_TimeoutCleared
  6603 ;; This function is called by:
  6604 ;;		_Switch_Initialization
  6605 ;;		_Switch_Main
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _TouchPower
  6611  1E3A                     _TouchPower:	
  6612                           
  6613                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6617  1E3A  0020               	movlb	0	; select bank0
  6618  1E3B  180D               	btfsc	13,0	;volatile
  6619  1E3C  0008               	return
  6620                           
  6621                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6622  1E3D  0021               	movlb	1	; select bank1
  6623  1E3E  1C20               	btfss	_myMain^(0+128),0
  6624  1E3F  0008               	return
  6625  1E40  2E46               	goto	l7297
  6626  1E41                     l2368:	
  6627                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6628                           
  6629                           
  6630                           ;Switch_B1.c: 14: RB0 = 1;
  6631  1E41  0020               	movlb	0	; select bank0
  6632  1E42  140D               	bsf	13,0	;volatile
  6633                           
  6634                           ;Switch_B1.c: 15: Timeout_Counter();
  6635  1E43  319E  2610  319E   	fcall	_Timeout_Counter
  6636  1E46                     l7297:	
  6637  1E46  0020               	movlb	0	; select bank0
  6638  1E47  180D               	btfsc	13,0	;volatile
  6639  1E48  2E4C               	goto	l7301
  6640  1E49  0021               	movlb	1	; select bank1
  6641  1E4A  1D2B               	btfss	(_myMain^(0+128)+11),2
  6642  1E4B  2E41               	goto	l2368
  6643  1E4C                     l7301:	
  6644                           
  6645                           ;Switch_B1.c: 16: }
  6646                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6647  1E4C  319B  23C9         	fcall	_set_TimeoutCleared
  6648  1E4E  0008               	return
  6649  1E4F                     __end_of_TouchPower:	
  6650                           
  6651                           	psect	text23
  6652  1B9C                     __ptext23:	
  6653 ;; *************** function _RF_Main *****************
  6654 ;; Defined at:
  6655 ;;		line 16 in file "../src/RF_Control_B1.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;		None
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;		None
  6660 ;; Return value:  Size  Location     Type
  6661 ;;		None               void
  6662 ;; Registers used:
  6663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;Total ram usage:        0 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:   14
  6676 ;; This function calls:
  6677 ;;		_setRF_Main
  6678 ;; This function is called by:
  6679 ;;		_main
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _RF_Main
  6685  1B9C                     _RF_Main:	
  6686                           
  6687                           ;RF_Control_B1.c: 18: setRF_Main();
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6691  1B9C  3185  256B         	fcall	_setRF_Main
  6692  1B9E  0008               	return
  6693  1B9F                     __end_of_RF_Main:	
  6694                           
  6695                           	psect	text24
  6696  056B                     __ptext24:	
  6697 ;; *************** function _setRF_Main *****************
  6698 ;; Defined at:
  6699 ;;		line 52 in file "../src/RF_Control_B1.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;  error           1    2[BANK1 ] unsigned char 
  6704 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6705 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        4 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:   13
  6722 ;; This function calls:
  6723 ;;		_CC2500_RxData
  6724 ;;		_CC2500_TxData
  6725 ;;		_CC2500_WriteCommand
  6726 ;;		_RF_RxDisable
  6727 ;;		_getBuz_GO
  6728 ;;		_getMain_All_Error_Status
  6729 ;;		_getRF_KeyStatus
  6730 ;;		_getRxData
  6731 ;; This function is called by:
  6732 ;;		_RF_Main
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           
  6737                           ;psect for function _setRF_Main
  6738  056B                     _setRF_Main:	
  6739                           
  6740                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6741                           
  6742                           ;incstack = 0
  6743                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6744  056B  0021               	movlb	1	; select bank1
  6745  056C  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6746  056D  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6747  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6748                           
  6749                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6750  056F  1C3A               	btfss	_RF1^(0+128),0
  6751  0570  2E46               	goto	l2003
  6752                           
  6753                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6754  0571  319D  2559  3185   	fcall	_getBuz_GO
  6755  0574  0020               	movlb	0	; select bank0
  6756  0575  0821               	movf	?_getBuz_GO+1,w
  6757  0576  0420               	iorwf	?_getBuz_GO,w
  6758  0577  1D03               	skipz
  6759  0578  0008               	return
  6760                           
  6761                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6762  0579  3000               	movlw	0
  6763  057A  3191  21DF  3185   	fcall	_getMain_All_Error_Status
  6764  057D  3800               	iorlw	0
  6765  057E  1D03               	skipz
  6766  057F  2D94               	goto	l2005
  6767                           
  6768                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6769  0580  319D  256A  3185   	fcall	_getRF_KeyStatus
  6770  0583  3A01               	xorlw	1
  6771  0584  3000               	movlw	0
  6772  0585  1903               	skipnz
  6773  0586  3001               	movlw	1
  6774  0587  0020               	movlb	0	; select bank0
  6775  0588  00ED               	movwf	??_setRF_Main
  6776  0589  0CED               	rrf	??_setRF_Main,f
  6777  058A  0CED               	rrf	??_setRF_Main,f
  6778  058B  0021               	movlb	1	; select bank1
  6779  058C  083A               	movf	_RF1^(0+128),w
  6780  058D  0020               	movlb	0	; select bank0
  6781  058E  066D               	xorwf	??_setRF_Main,w
  6782  058F  397F               	andlw	-129
  6783  0590  066D               	xorwf	??_setRF_Main,w
  6784  0591  0021               	movlb	1	; select bank1
  6785  0592  00BA               	movwf	_RF1^(0+128)
  6786                           
  6787                           ;RF_Control_B1.c: 65: } else {
  6788  0593  2D96               	goto	l2006
  6789  0594                     l2005:	
  6790                           
  6791                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6792  0594  0021               	movlb	1	; select bank1
  6793  0595  13BA               	bcf	_RF1^(0+128),7
  6794  0596                     l2006:	
  6795                           
  6796                           ;RF_Control_B1.c: 70: }
  6797                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6798  0596  1BBA               	btfsc	_RF1^(0+128),7
  6799  0597  1B3A               	btfsc	_RF1^(0+128),6
  6800  0598  2D9E               	goto	l2007
  6801                           
  6802                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6803  0599  01BC               	clrf	(_RF1^(0+128)+2)
  6804  059A  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6805                           
  6806                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6807  059B  14BB               	bsf	(_RF1^(0+128)+1),1
  6808                           
  6809                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6810  059C  11BA               	bcf	_RF1^(0+128),3
  6811                           
  6812                           ;RF_Control_B1.c: 76: } else {
  6813  059D  0008               	return
  6814  059E                     l2007:	
  6815                           
  6816                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6817  059E  18BB               	btfsc	(_RF1^(0+128)+1),1
  6818  059F  1B3A               	btfsc	_RF1^(0+128),6
  6819  05A0  2DB5               	goto	l7215
  6820                           
  6821                           ;RF_Control_B1.c: 78: RF1.Count++;
  6822  05A1  3001               	movlw	1
  6823  05A2  07BC               	addwf	(_RF1^(0+128)+2),f
  6824  05A3  3000               	movlw	0
  6825  05A4  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6826                           
  6827                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6828  05A5  3002               	movlw	2
  6829  05A6  3EBA               	addlw	_RF1& (0+255)
  6830  05A7  0086               	movwf	6
  6831  05A8  0187               	clrf	7
  6832  05A9  3F40               	moviw [0]fsr1
  6833  05AA  0641               	xorwf	(_RF1^(0+128)+7),w
  6834  05AB  1D03               	skipz
  6835  05AC  2DAF               	goto	u6785
  6836  05AD  3F41               	moviw [1]fsr1
  6837  05AE  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6838  05AF                     u6785:	
  6839  05AF  1D03               	skipz
  6840  05B0  2E13               	goto	l7267
  6841                           
  6842                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6843  05B1  01BC               	clrf	(_RF1^(0+128)+2)
  6844  05B2  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6845                           
  6846                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6847  05B3  10BB               	bcf	(_RF1^(0+128)+1),1
  6848                           
  6849                           ;RF_Control_B1.c: 82: }
  6850                           ;RF_Control_B1.c: 83: } else {
  6851  05B4  2E13               	goto	l7267
  6852  05B5                     l7215:	
  6853                           
  6854                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6855  05B5  01BC               	clrf	(_RF1^(0+128)+2)
  6856  05B6  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6857                           
  6858                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6859  05B7  10BB               	bcf	(_RF1^(0+128)+1),1
  6860                           
  6861                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6862  05B8  193A               	btfsc	_RF1^(0+128),2
  6863  05B9  1B3A               	btfsc	_RF1^(0+128),6
  6864  05BA  2DC9               	goto	l2012
  6865                           
  6866                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6867  05BB  113A               	bcf	_RF1^(0+128),2
  6868                           
  6869                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6870  05BC  11BA               	bcf	_RF1^(0+128),3
  6871                           
  6872                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6873  05BD  10BA               	bcf	_RF1^(0+128),1
  6874                           
  6875                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6876  05BE  300A               	movlw	10
  6877  05BF  00C1               	movwf	(_RF1^(0+128)+7)
  6878  05C0  3000               	movlw	0
  6879  05C1  00C2               	movwf	(_RF1^(0+128)+8)
  6880                           
  6881                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6882  05C2  319C  24EA  3185   	fcall	_RF_RxDisable
  6883                           
  6884                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6885  05C5  3189  21E2  3185   	fcall	_CC2500_TxData
  6886                           
  6887                           ;RF_Control_B1.c: 106: } else {
  6888  05C8  2E13               	goto	l7267
  6889  05C9                     l2012:	
  6890                           
  6891                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6892  05C9  1DBA               	btfss	_RF1^(0+128),3
  6893  05CA  2E02               	goto	l2014
  6894                           
  6895                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6896  05CB  318B  2373  3185   	fcall	_CC2500_RxData
  6897                           
  6898                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6899  05CE  0021               	movlb	1	; select bank1
  6900  05CF  1CBA               	btfss	_RF1^(0+128),1
  6901  05D0  2E13               	goto	l7267
  6902                           
  6903                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6904  05D1  10BA               	bcf	_RF1^(0+128),1
  6905                           
  6906                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6907  05D2  12BB               	bcf	(_RF1^(0+128)+1),5
  6908                           
  6909                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6910  05D3  01C4               	clrf	(_RF1^(0+128)+10)
  6911  05D4  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6912                           
  6913                           ;RF_Control_B1.c: 126: getRxData();
  6914  05D5  318D  256E  3185   	fcall	_getRxData
  6915                           
  6916                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6917  05D8  0021               	movlb	1	; select bank1
  6918  05D9  14BB               	bsf	(_RF1^(0+128)+1),1
  6919                           
  6920                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  6921  05DA  1DBB               	btfss	(_RF1^(0+128)+1),3
  6922  05DB  2DE9               	goto	l7251
  6923                           
  6924                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  6925  05DC  3000               	movlw	0
  6926  05DD  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6927  05DE  300B               	movlw	11
  6928  05DF  1903               	skipnz
  6929  05E0  0241               	subwf	(_RF1^(0+128)+7),w
  6930  05E1  1C03               	skipc
  6931  05E2  2DE7               	goto	l7249
  6932                           
  6933                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  6934  05E3  300A               	movlw	10
  6935  05E4  00C1               	movwf	(_RF1^(0+128)+7)
  6936  05E5  3000               	movlw	0
  6937  05E6  00C2               	movwf	(_RF1^(0+128)+8)
  6938  05E7                     l7249:	
  6939                           
  6940                           ;RF_Control_B1.c: 132: }
  6941                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  6942  05E7  01BE               	clrf	(_RF1^(0+128)+4)
  6943                           
  6944                           ;RF_Control_B1.c: 134: } else {
  6945  05E8  2E13               	goto	l7267
  6946  05E9                     l7251:	
  6947                           
  6948                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  6949  05E9  3001               	movlw	1
  6950  05EA  0020               	movlb	0	; select bank0
  6951  05EB  00ED               	movwf	??_setRF_Main
  6952  05EC  086D               	movf	??_setRF_Main,w
  6953  05ED  0021               	movlb	1	; select bank1
  6954  05EE  07BE               	addwf	(_RF1^(0+128)+4),f
  6955                           
  6956                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  6957  05EF  083E               	movf	(_RF1^(0+128)+4),w
  6958  05F0  3A02               	xorlw	2
  6959  05F1  1D03               	skipz
  6960  05F2  2E13               	goto	l7267
  6961                           
  6962                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  6963  05F3  01BE               	clrf	(_RF1^(0+128)+4)
  6964                           
  6965                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  6966  05F4  01BF               	clrf	(_RF1^(0+128)+5)
  6967  05F5  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6968                           
  6969                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  6970  05F6  3000               	movlw	0
  6971  05F7  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6972  05F8  30C8               	movlw	200
  6973  05F9  1903               	skipnz
  6974  05FA  0241               	subwf	(_RF1^(0+128)+7),w
  6975  05FB  1803               	skipnc
  6976  05FC  2E13               	goto	l7267
  6977                           
  6978                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  6979  05FD  300A               	movlw	10
  6980  05FE  07C1               	addwf	(_RF1^(0+128)+7),f
  6981  05FF  3000               	movlw	0
  6982  0600  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6983                           
  6984                           ;RF_Control_B1.c: 141: }
  6985                           ;RF_Control_B1.c: 142: }
  6986                           ;RF_Control_B1.c: 143: }
  6987                           ;RF_Control_B1.c: 144: }
  6988                           ;RF_Control_B1.c: 145: } else {
  6989  0601  2E13               	goto	l7267
  6990  0602                     l2014:	
  6991                           
  6992                           ;RF_Control_B1.c: 147: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6993  0602  1DBA               	btfss	_RF1^(0+128),3
  6994  0603  18BA               	btfsc	_RF1^(0+128),1
  6995  0604  2E13               	goto	l7267
  6996                           
  6997                           ;RF_Control_B1.c: 148: RF1.RxStatus = 1;
  6998  0605  15BA               	bsf	_RF1^(0+128),3
  6999                           
  7000                           ;RF_Control_B1.c: 149: RF1.Correction = 1;
  7001  0606  16BB               	bsf	(_RF1^(0+128)+1),5
  7002                           
  7003                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x36);
  7004  0607  3036               	movlw	54
  7005  0608  319E  267E  3185   	fcall	_CC2500_WriteCommand
  7006                           
  7007                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x3A);
  7008  060B  303A               	movlw	58
  7009  060C  319E  267E  3185   	fcall	_CC2500_WriteCommand
  7010                           
  7011                           ;RF_Control_B1.c: 154: CC2500_WriteCommand(0x34);
  7012  060F  3034               	movlw	52
  7013  0610  319E  267E  3185   	fcall	_CC2500_WriteCommand
  7014  0613                     l7267:	
  7015                           
  7016                           ;RF_Control_B1.c: 155: }
  7017                           ;RF_Control_B1.c: 157: }
  7018                           ;RF_Control_B1.c: 158: }
  7019                           ;RF_Control_B1.c: 159: }
  7020                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7021  0613  0021               	movlb	1	; select bank1
  7022  0614  1DBA               	btfss	_RF1^(0+128),3
  7023  0615  2E34               	goto	l7279
  7024                           
  7025                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7026  0616  3001               	movlw	1
  7027  0617  07BF               	addwf	(_RF1^(0+128)+5),f
  7028  0618  3000               	movlw	0
  7029  0619  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  7030                           
  7031                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7032  061A  3005               	movlw	5
  7033  061B  3EBA               	addlw	_RF1& (0+255)
  7034  061C  0086               	movwf	6
  7035  061D  0187               	clrf	7
  7036  061E  3F40               	moviw [0]fsr1
  7037  061F  3A64               	xorlw	100
  7038  0620  1D03               	skipz
  7039  0621  2E24               	goto	u6905
  7040  0622  3F41               	moviw [1]fsr1
  7041  0623  3A00               	xorlw	0
  7042  0624                     u6905:	
  7043  0624  1D03               	skipz
  7044  0625  2E34               	goto	l7279
  7045                           
  7046                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7047  0626  01BF               	clrf	(_RF1^(0+128)+5)
  7048  0627  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7049                           
  7050                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7051  0628  01BE               	clrf	(_RF1^(0+128)+4)
  7052                           
  7053                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7054  0629  3000               	movlw	0
  7055  062A  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7056  062B  300B               	movlw	11
  7057  062C  1903               	skipnz
  7058  062D  0241               	subwf	(_RF1^(0+128)+7),w
  7059  062E  1C03               	skipc
  7060  062F  2E34               	goto	l7279
  7061                           
  7062                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7063  0630  300A               	movlw	10
  7064  0631  02C1               	subwf	(_RF1^(0+128)+7),f
  7065  0632  3000               	movlw	0
  7066  0633  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  7067  0634                     l7279:	
  7068                           
  7069                           ;RF_Control_B1.c: 167: }
  7070                           ;RF_Control_B1.c: 168: }
  7071                           ;RF_Control_B1.c: 169: }
  7072                           ;RF_Control_B1.c: 170: if (RF1.Correction == 1) {
  7073  0634  1EBB               	btfss	(_RF1^(0+128)+1),5
  7074  0635  0008               	return
  7075                           
  7076                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter++;
  7077  0636  3001               	movlw	1
  7078  0637  07C4               	addwf	(_RF1^(0+128)+10),f
  7079  0638  3000               	movlw	0
  7080  0639  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  7081                           
  7082                           ;RF_Control_B1.c: 172: if (RF1.CorrectionCounter >= 6000) {
  7083  063A  3017               	movlw	23
  7084  063B  0245               	subwf	((_RF1+1)^(0+128)+10),w
  7085  063C  3070               	movlw	112
  7086  063D  1903               	skipnz
  7087  063E  0244               	subwf	(_RF1^(0+128)+10),w
  7088  063F  1C03               	skipc
  7089  0640  0008               	return
  7090                           
  7091                           ;RF_Control_B1.c: 173: RF1.CorrectionCounter = 0;
  7092  0641  01C4               	clrf	(_RF1^(0+128)+10)
  7093  0642  01C5               	clrf	((_RF1+1)^(0+128)+10)
  7094                           
  7095                           ;RF_Control_B1.c: 174: RF_RxDisable();
  7096  0643  319C  24EA         	fcall	_RF_RxDisable
  7097                           
  7098                           ;RF_Control_B1.c: 175: }
  7099                           ;RF_Control_B1.c: 176: }
  7100                           ;RF_Control_B1.c: 177: }
  7101                           ;RF_Control_B1.c: 178: }
  7102                           ;RF_Control_B1.c: 185: } else {
  7103  0645  0008               	return
  7104  0646                     l2003:	
  7105                           
  7106                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7107  0646  1C20               	btfss	_myMain^(0+128),0
  7108  0647  0008               	return
  7109                           
  7110                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7111  0648  143A               	bsf	_RF1^(0+128),0
  7112  0649  0008               	return
  7113  064A                     __end_of_setRF_Main:	
  7114                           
  7115                           	psect	text25
  7116  0D6E                     __ptext25:	
  7117 ;; *************** function _getRxData *****************
  7118 ;; Defined at:
  7119 ;;		line 281 in file "../src/RF_Control_B1.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  error           1   76[BANK0 ] unsigned char 
  7124 ;; Return value:  Size  Location     Type
  7125 ;;		None               void
  7126 ;; Registers used:
  7127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;Total ram usage:        2 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:   12
  7140 ;; This function calls:
  7141 ;;		_getMain_All_Error_Status
  7142 ;;		_setControl_Lights_Table
  7143 ;;		_setLog_Code
  7144 ;;		_setTxData
  7145 ;; This function is called by:
  7146 ;;		_setRF_Main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function _getRxData
  7152  0D6E                     _getRxData:	
  7153                           
  7154                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7155                           
  7156                           ;incstack = 0
  7157                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7158  0D6E  3000               	movlw	0
  7159  0D6F  3191  21DF  318D   	fcall	_getMain_All_Error_Status
  7160  0D72  0020               	movlb	0	; select bank0
  7161  0D73  00EB               	movwf	??_getRxData
  7162  0D74  086B               	movf	??_getRxData,w
  7163  0D75  00EC               	movwf	getRxData@error
  7164                           
  7165                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7166  0D76  0022               	movlb	2	; select bank2
  7167  0D77  0820               	movf	_RF_Data^(0+256),w
  7168  0D78  3AAA               	xorlw	170
  7169  0D79  1D03               	skipz
  7170  0D7A  2D91               	goto	l6673
  7171  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7172  0D7C  3A01               	xorlw	1
  7173  0D7D  1D03               	skipz
  7174  0D7E  2D91               	goto	l6673
  7175                           
  7176                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7177  0D7F  3055               	movlw	85
  7178  0D80  0020               	movlb	0	; select bank0
  7179  0D81  00EB               	movwf	??_getRxData
  7180  0D82  086E               	movf	_product,w
  7181  0D83  3E02               	addlw	2
  7182  0D84  0086               	movwf	6
  7183  0D85  3002               	movlw	2	; select bank4/5
  7184  0D86  0087               	movwf	7
  7185  0D87  086B               	movf	??_getRxData,w
  7186  0D88  0081               	movwf	1
  7187                           
  7188                           ;RF_Control_B1.c: 286: setTxData();
  7189  0D89  3187  2726         	fcall	_setTxData
  7190                           
  7191                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7192  0D8B  300A               	movlw	10
  7193  0D8C  0021               	movlb	1	; select bank1
  7194  0D8D  00C1               	movwf	(_RF1^(0+128)+7)
  7195  0D8E  3000               	movlw	0
  7196  0D8F  00C2               	movwf	(_RF1^(0+128)+8)
  7197                           
  7198                           ;RF_Control_B1.c: 293: } else {
  7199  0D90  0008               	return
  7200  0D91                     l6673:	
  7201                           
  7202                           ;RF_Control_B1.c: 295: if (error == 0) {
  7203  0D91  0020               	movlb	0	; select bank0
  7204  0D92  08EC               	movf	getRxData@error,f
  7205  0D93  1D03               	skipz
  7206  0D94  0008               	return
  7207                           
  7208                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7209  0D95  0021               	movlb	1	; select bank1
  7210  0D96  1F3A               	btfss	_RF1^(0+128),6
  7211  0D97  2DA8               	goto	l6685
  7212                           
  7213                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7214  0D98  0022               	movlb	2	; select bank2
  7215  0D99  08A0               	movf	_RF_Data^(0+256),f
  7216  0D9A  1D03               	skipz
  7217  0D9B  2DA5               	goto	l2056
  7218  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7219  0D9D  3A64               	xorlw	100
  7220  0D9E  1D03               	skipz
  7221  0D9F  2DA5               	goto	l2056
  7222                           
  7223                           ;RF_Control_B1.c: 298: setLog_Code();
  7224  0DA0  3192  22E6         	fcall	_setLog_Code
  7225                           
  7226                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7227  0DA2  0021               	movlb	1	; select bank1
  7228  0DA3  15BB               	bsf	(_RF1^(0+128)+1),3
  7229                           
  7230                           ;RF_Control_B1.c: 300: } else {
  7231  0DA4  0008               	return
  7232  0DA5                     l2056:	
  7233                           
  7234                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7235  0DA5  0021               	movlb	1	; select bank1
  7236  0DA6  11BB               	bcf	(_RF1^(0+128)+1),3
  7237                           
  7238                           ;RF_Control_B1.c: 302: }
  7239                           ;RF_Control_B1.c: 303: } else {
  7240  0DA7  0008               	return
  7241  0DA8                     l6685:	
  7242                           
  7243                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7244  0DA8  0022               	movlb	2	; select bank2
  7245  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7246  0DAA  1D03               	skipz
  7247  0DAB  2DE6               	goto	l6707
  7248  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7249  0DAD  3A02               	xorlw	2
  7250  0DAE  1D03               	skipz
  7251  0DAF  2DE6               	goto	l6707
  7252                           
  7253                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7254  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7255  0DB1  3AFF               	xorlw	255
  7256  0DB2  1D03               	skipz
  7257  0DB3  2DC0               	goto	l6697
  7258  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7259  0DB5  3AFF               	xorlw	255
  7260  0DB6  1D03               	skipz
  7261  0DB7  2DC0               	goto	l6697
  7262  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7263  0DB9  3AFF               	xorlw	255
  7264  0DBA  1D03               	skipz
  7265  0DBB  2DC0               	goto	l6697
  7266                           
  7267                           ;RF_Control_B1.c: 307: __nop();
  7268  0DBC  0000               	nop
  7269                           
  7270                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7271  0DBD  0021               	movlb	1	; select bank1
  7272  0DBE  11BB               	bcf	(_RF1^(0+128)+1),3
  7273                           
  7274                           ;RF_Control_B1.c: 309: } else {
  7275  0DBF  0008               	return
  7276  0DC0                     l6697:	
  7277                           
  7278                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7279  0DC0  0020               	movlb	0	; select bank0
  7280  0DC1  086E               	movf	_product,w
  7281  0DC2  3E0C               	addlw	12
  7282  0DC3  0086               	movwf	6
  7283  0DC4  3002               	movlw	2	; select bank4/5
  7284  0DC5  0087               	movwf	7
  7285  0DC6  0022               	movlb	2	; select bank2
  7286  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7287  0DC8  0601               	xorwf	1,w
  7288  0DC9  1D03               	skipz
  7289  0DCA  0008               	return
  7290  0DCB  0020               	movlb	0	; select bank0
  7291  0DCC  086E               	movf	_product,w
  7292  0DCD  3E0D               	addlw	13
  7293  0DCE  0086               	movwf	6
  7294  0DCF  3002               	movlw	2	; select bank4/5
  7295  0DD0  0087               	movwf	7
  7296  0DD1  0022               	movlb	2	; select bank2
  7297  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7298  0DD3  0601               	xorwf	1,w
  7299  0DD4  1D03               	skipz
  7300  0DD5  0008               	return
  7301  0DD6  0020               	movlb	0	; select bank0
  7302  0DD7  086E               	movf	_product,w
  7303  0DD8  3E0E               	addlw	14
  7304  0DD9  0086               	movwf	6
  7305  0DDA  3002               	movlw	2	; select bank4/5
  7306  0DDB  0087               	movwf	7
  7307  0DDC  0022               	movlb	2	; select bank2
  7308  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7309  0DDE  0601               	xorwf	1,w
  7310  0DDF  1D03               	skipz
  7311  0DE0  0008               	return
  7312                           
  7313                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7314  0DE1  3189  2121         	fcall	_setControl_Lights_Table
  7315                           
  7316                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7317  0DE3  0021               	movlb	1	; select bank1
  7318  0DE4  15BB               	bsf	(_RF1^(0+128)+1),3
  7319                           
  7320                           ;RF_Control_B1.c: 313: }
  7321                           ;RF_Control_B1.c: 314: }
  7322                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7323  0DE5  0008               	return
  7324  0DE6                     l6707:	
  7325  0DE6  0022               	movlb	2	; select bank2
  7326  0DE7  0820               	movf	_RF_Data^(0+256),w
  7327  0DE8  3AFF               	xorlw	255
  7328  0DE9  1D03               	skipz
  7329  0DEA  2DF1               	goto	l6713
  7330  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7331  0DEC  3A02               	xorlw	2
  7332  0DED  1D03               	skipz
  7333  0DEE  2DF1               	goto	l6713
  7334                           
  7335                           ;RF_Control_B1.c: 316: __nop();
  7336  0DEF  0000               	nop
  7337                           
  7338                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7339  0DF0  0008               	return
  7340  0DF1                     l6713:	
  7341  0DF1  0022               	movlb	2	; select bank2
  7342  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7343  0DF3  1D03               	skipz
  7344  0DF4  2DFB               	goto	l2066
  7345  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7346  0DF6  3A65               	xorlw	101
  7347  0DF7  1D03               	skipz
  7348  0DF8  2DFB               	goto	l2066
  7349                           
  7350                           ;RF_Control_B1.c: 318: __nop();
  7351  0DF9  0000               	nop
  7352                           
  7353                           ;RF_Control_B1.c: 319: } else {
  7354  0DFA  0008               	return
  7355  0DFB                     l2066:	
  7356                           
  7357                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7358  0DFB  0021               	movlb	1	; select bank1
  7359  0DFC  11BB               	bcf	(_RF1^(0+128)+1),3
  7360                           
  7361                           ;RF_Control_B1.c: 328: ;
  7362                           
  7363                           ;RF_Control_B1.c: 321: }
  7364                           ;RF_Control_B1.c: 326: }
  7365                           ;RF_Control_B1.c: 327: } else {
  7366  0DFD  0008               	return
  7367  0DFE                     __end_of_getRxData:	
  7368                           
  7369                           	psect	text26
  7370  12E6                     __ptext26:	
  7371 ;; *************** function _setLog_Code *****************
  7372 ;; Defined at:
  7373 ;;		line 334 in file "../src/RF_Control_B1.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;		None
  7378 ;; Return value:  Size  Location     Type
  7379 ;;		None               void
  7380 ;; Registers used:
  7381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;Total ram usage:        1 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    7
  7394 ;; This function calls:
  7395 ;;		_setBuz
  7396 ;;		_setMemory_LoopSave
  7397 ;;		_setMemory_Modify
  7398 ;; This function is called by:
  7399 ;;		_getRxData
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           
  7404                           ;psect for function _setLog_Code
  7405  12E6                     _setLog_Code:	
  7406                           
  7407                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7408                           
  7409                           ;incstack = 0
  7410                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7411  12E6  0021               	movlb	1	; select bank1
  7412  12E7  133A               	bcf	_RF1^(0+128),6
  7413                           
  7414                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7415  12E8  0022               	movlb	2	; select bank2
  7416  12E9  082C               	movf	(_RF_Data^(0+256)+12),w
  7417  12EA  0020               	movlb	0	; select bank0
  7418  12EB  00AD               	movwf	??_setLog_Code
  7419  12EC  086E               	movf	_product,w
  7420  12ED  3E0C               	addlw	12
  7421  12EE  0086               	movwf	6
  7422  12EF  3002               	movlw	2	; select bank4/5
  7423  12F0  0087               	movwf	7
  7424  12F1  082D               	movf	??_setLog_Code,w
  7425  12F2  0081               	movwf	1
  7426                           
  7427                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7428  12F3  0022               	movlb	2	; select bank2
  7429  12F4  082D               	movf	(_RF_Data^(0+256)+13),w
  7430  12F5  0020               	movlb	0	; select bank0
  7431  12F6  00AD               	movwf	??_setLog_Code
  7432  12F7  086E               	movf	_product,w
  7433  12F8  3E0D               	addlw	13
  7434  12F9  0086               	movwf	6
  7435  12FA  3002               	movlw	2	; select bank4/5
  7436  12FB  0087               	movwf	7
  7437  12FC  082D               	movf	??_setLog_Code,w
  7438  12FD  0081               	movwf	1
  7439                           
  7440                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7441  12FE  0022               	movlb	2	; select bank2
  7442  12FF  082E               	movf	(_RF_Data^(0+256)+14),w
  7443  1300  0020               	movlb	0	; select bank0
  7444  1301  00AD               	movwf	??_setLog_Code
  7445  1302  086E               	movf	_product,w
  7446  1303  3E0E               	addlw	14
  7447  1304  0086               	movwf	6
  7448  1305  3002               	movlw	2	; select bank4/5
  7449  1306  0087               	movwf	7
  7450  1307  082D               	movf	??_setLog_Code,w
  7451  1308  0081               	movwf	1
  7452                           
  7453                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7454  1309  3064               	movlw	100
  7455  130A  00A9               	movwf	setBuz@time
  7456  130B  3000               	movlw	0
  7457  130C  00AA               	movwf	setBuz@time+1
  7458  130D  3001               	movlw	1
  7459  130E  3196  26F2  3192   	fcall	_setBuz
  7460                           
  7461                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7462  1311  0021               	movlb	1	; select bank1
  7463  1312  1EA0               	btfss	_myMain^(0+128),5
  7464  1313  2B18               	goto	l2072
  7465                           
  7466                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7467  1314  3001               	movlw	1
  7468  1315  319D  25D5  3192   	fcall	_setMemory_LoopSave
  7469  1318                     l2072:	
  7470                           
  7471                           ;RF_Control_B1.c: 342: }
  7472                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7473  1318  3001               	movlw	1
  7474  1319  319D  25C2         	fcall	_setMemory_Modify
  7475  131B  0008               	return
  7476  131C                     __end_of_setLog_Code:	
  7477                           
  7478                           	psect	text27
  7479  1DD5                     __ptext27:	
  7480 ;; *************** function _setMemory_LoopSave *****************
  7481 ;; Defined at:
  7482 ;;		line 1029 in file "../src/MCU_B1.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;  command         1    wreg     unsigned char 
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  command         1    1[BANK0 ] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;		None               void
  7489 ;; Registers used:
  7490 ;;		wreg, status,2, status,0
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;Total ram usage:        2 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    5
  7503 ;; This function calls:
  7504 ;;		Nothing
  7505 ;; This function is called by:
  7506 ;;		_setLog_Code
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _setMemory_LoopSave
  7512  1DD5                     _setMemory_LoopSave:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7516                           ;setMemory_LoopSave@command stored from wreg
  7517  1DD5  0020               	movlb	0	; select bank0
  7518  1DD6  00A1               	movwf	setMemory_LoopSave@command
  7519                           
  7520                           ;MCU_B1.c: 1030: Memory.LoopSave = command == 1 ? 1 : 0;
  7521  1DD7  0821               	movf	setMemory_LoopSave@command,w
  7522  1DD8  3A01               	xorlw	1
  7523  1DD9  3000               	movlw	0
  7524  1DDA  1903               	skipnz
  7525  1DDB  3001               	movlw	1
  7526  1DDC  00A0               	movwf	??_setMemory_LoopSave
  7527  1DDD  0DA0               	rlf	??_setMemory_LoopSave,f
  7528  1DDE  0DA0               	rlf	??_setMemory_LoopSave,f
  7529  1DDF  0023               	movlb	3	; select bank3
  7530  1DE0  0844               	movf	(_Memory^(0+384)+36),w
  7531  1DE1  0020               	movlb	0	; select bank0
  7532  1DE2  0620               	xorwf	??_setMemory_LoopSave,w
  7533  1DE3  39FB               	andlw	-5
  7534  1DE4  0620               	xorwf	??_setMemory_LoopSave,w
  7535  1DE5  0023               	movlb	3	; select bank3
  7536  1DE6  00C4               	movwf	(_Memory^(0+384)+36)
  7537  1DE7  0008               	return
  7538  1DE8                     __end_of_setMemory_LoopSave:	
  7539                           
  7540                           	psect	text28
  7541  0921                     __ptext28:	
  7542 ;; *************** function _setControl_Lights_Table *****************
  7543 ;; Defined at:
  7544 ;;		line 347 in file "../src/RF_Control_B1.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;		None               void
  7551 ;; Registers used:
  7552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;Total ram usage:        0 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:   11
  7565 ;; This function calls:
  7566 ;;		_setBuz
  7567 ;;		_setDimmerLights_ErrorClose
  7568 ;;		_setRFSW_AdjControl
  7569 ;;		_setRFSW_Control
  7570 ;;		_setTxData
  7571 ;; This function is called by:
  7572 ;;		_getRxData
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function _setControl_Lights_Table
  7578  0921                     _setControl_Lights_Table:	
  7579                           
  7580                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7584  0921  2965               	goto	l6295
  7585  0922                     l6273:	
  7586                           ;RF_Control_B1.c: 349: case 0x00:
  7587                           
  7588                           
  7589                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7590  0922  30FF               	movlw	255
  7591  0923  3196  2642  3189   	fcall	_setDimmerLights_ErrorClose
  7592                           
  7593                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7594  0926  0020               	movlb	0	; select bank0
  7595  0927  086E               	movf	_product,w
  7596  0928  3E09               	addlw	9
  7597  0929  0086               	movwf	6
  7598  092A  3002               	movlw	2	; select bank4/5
  7599  092B  0087               	movwf	7
  7600  092C  0181               	clrf	1
  7601                           
  7602                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7603  092D  086E               	movf	_product,w
  7604  092E  3E0B               	addlw	11
  7605  092F  0086               	movwf	6
  7606  0930  3002               	movlw	2	; select bank4/5
  7607  0931  0087               	movwf	7
  7608  0932  0181               	clrf	1
  7609                           
  7610                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7611  0933  086E               	movf	_product,w
  7612  0934  3E0F               	addlw	15
  7613  0935  0086               	movwf	6
  7614  0936  3002               	movlw	2	; select bank4/5
  7615  0937  0087               	movwf	7
  7616  0938  0181               	clrf	1
  7617                           
  7618                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7619  0939  086E               	movf	_product,w
  7620  093A  3E11               	addlw	17
  7621  093B  0086               	movwf	6
  7622  093C  3002               	movlw	2	; select bank4/5
  7623  093D  0087               	movwf	7
  7624  093E  0181               	clrf	1
  7625                           
  7626                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7627  093F  3064               	movlw	100
  7628  0940  00A9               	movwf	setBuz@time
  7629  0941  3000               	movlw	0
  7630  0942  00AA               	movwf	setBuz@time+1
  7631  0943  3001               	movlw	1
  7632  0944  3196  26F2         	fcall	_setBuz
  7633                           
  7634                           ;RF_Control_B1.c: 359: break;
  7635  0946  0008               	return
  7636  0947                     l6285:	
  7637                           ;RF_Control_B1.c: 360: case 0x20:
  7638                           
  7639                           
  7640                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7641  0947  0020               	movlb	0	; select bank0
  7642  0948  086E               	movf	_product,w
  7643  0949  3E09               	addlw	9
  7644  094A  0086               	movwf	6
  7645  094B  3002               	movlw	2	; select bank4/5
  7646  094C  0087               	movwf	7
  7647  094D  0181               	clrf	1
  7648                           
  7649                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7650  094E  086E               	movf	_product,w
  7651  094F  3E0B               	addlw	11
  7652  0950  0086               	movwf	6
  7653  0951  3002               	movlw	2	; select bank4/5
  7654  0952  0087               	movwf	7
  7655  0953  0181               	clrf	1
  7656                           
  7657                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7658  0954  086E               	movf	_product,w
  7659  0955  3E11               	addlw	17
  7660  0956  0086               	movwf	6
  7661  0957  3002               	movlw	2	; select bank4/5
  7662  0958  0087               	movwf	7
  7663  0959  0181               	clrf	1
  7664                           
  7665                           ;RF_Control_B1.c: 364: setTxData();
  7666  095A  3187  2726         	fcall	_setTxData
  7667                           
  7668                           ;RF_Control_B1.c: 365: break;
  7669  095C  0008               	return
  7670  095D                     l6289:	
  7671                           ;RF_Control_B1.c: 366: case 0x01:
  7672                           
  7673                           
  7674                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7675  095D  3001               	movlw	1
  7676  095E  3195  259F         	fcall	_setRFSW_Control
  7677                           
  7678                           ;RF_Control_B1.c: 380: break;
  7679                           
  7680                           ;RF_Control_B1.c: 376: case 0x03:
  7681                           
  7682                           ;RF_Control_B1.c: 375: break;
  7683                           
  7684                           ;RF_Control_B1.c: 371: case 0x02:
  7685                           
  7686                           ;RF_Control_B1.c: 370: break;
  7687  0960  0008               	return
  7688  0961                     l6291:	
  7689                           ;RF_Control_B1.c: 381: case 0x11:
  7690                           
  7691                           
  7692                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7693  0961  3001               	movlw	1
  7694  0962  3194  243B         	fcall	_setRFSW_AdjControl
  7695                           
  7696                           ;RF_Control_B1.c: 402: }
  7697                           
  7698                           ;RF_Control_B1.c: 401: break;
  7699                           
  7700                           ;RF_Control_B1.c: 395: case 0x31:
  7701                           
  7702                           ;RF_Control_B1.c: 394: break;
  7703                           
  7704                           ;RF_Control_B1.c: 388: case 0x21:
  7705                           
  7706                           ;RF_Control_B1.c: 387: break;
  7707  0964  0008               	return
  7708  0965                     l6295:	
  7709  0965  0022               	movlb	2	; select bank2
  7710  0966  082F               	movf	(_RF_Data^(0+256)+15),w
  7711                           
  7712                           ; Switch size 1, requested type "space"
  7713                           ; Number of cases is 8, Range of values is 0 to 49
  7714                           ; switch strategies available:
  7715                           ; Name         Instructions Cycles
  7716                           ; simple_byte           25    13 (average)
  7717                           ; direct_byte          106     6 (fixed)
  7718                           ; jumptable            260     6 (fixed)
  7719                           ;	Chosen strategy is simple_byte
  7720  0967  3A00               	xorlw	0	; case 0
  7721  0968  1903               	skipnz
  7722  0969  2922               	goto	l6273
  7723  096A  3A01               	xorlw	1	; case 1
  7724  096B  1903               	skipnz
  7725  096C  295D               	goto	l6289
  7726  096D  3A03               	xorlw	3	; case 2
  7727  096E  1903               	skipnz
  7728  096F  2980               	goto	l2086
  7729  0970  3A01               	xorlw	1	; case 3
  7730  0971  1903               	skipnz
  7731  0972  2980               	goto	l2086
  7732  0973  3A12               	xorlw	18	; case 17
  7733  0974  1903               	skipnz
  7734  0975  2961               	goto	l6291
  7735  0976  3A31               	xorlw	49	; case 32
  7736  0977  1903               	skipnz
  7737  0978  2947               	goto	l6285
  7738  0979  3A01               	xorlw	1	; case 33
  7739  097A  1903               	skipnz
  7740  097B  2980               	goto	l2086
  7741  097C  3A10               	xorlw	16	; case 49
  7742  097D  1903               	skipnz
  7743  097E  2980               	goto	l2086
  7744  097F  2980               	goto	l2086
  7745  0980                     l2086:	
  7746  0980  0008               	return
  7747  0981                     __end_of_setControl_Lights_Table:	
  7748                           
  7749                           	psect	text29
  7750  159F                     __ptext29:	
  7751 ;; *************** function _setRFSW_Control *****************
  7752 ;; Defined at:
  7753 ;;		line 429 in file "../src/RF_Control_B1.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  sw              1    wreg     unsigned char 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  sw              1   19[BANK0 ] unsigned char 
  7758 ;;  status          1   18[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        3 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    9
  7775 ;; This function calls:
  7776 ;;		_getDelayOff_GO
  7777 ;;		_getDimmerLights_Status
  7778 ;;		_setBuz
  7779 ;;		_setDelayOff_GO
  7780 ;;		_setDimmerLights_SwOff
  7781 ;;		_setDimmerLights_SwOn
  7782 ;;		_setRF_DimmerLights
  7783 ;;		_setTxData
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRFSW_Control
  7791  159F                     _setRFSW_Control:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRFSW_Control@sw stored from wreg
  7796  159F  0020               	movlb	0	; select bank0
  7797  15A0  00B3               	movwf	setRFSW_Control@sw
  7798                           
  7799                           ;RF_Control_B1.c: 430: char status = 0;
  7800  15A1  01B2               	clrf	setRFSW_Control@status
  7801                           
  7802                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7803  15A2  0022               	movlb	2	; select bank2
  7804  15A3  0830               	movf	(_RF_Data^(0+256)+16),w
  7805  15A4  3A80               	xorlw	128
  7806  15A5  1D03               	skipz
  7807  15A6  2DD2               	goto	l6127
  7808                           
  7809                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7810  15A7  0020               	movlb	0	; select bank0
  7811  15A8  01AA               	clrf	setDelayOff_GO@command
  7812  15A9  0AAA               	incf	setDelayOff_GO@command,f
  7813  15AA  0022               	movlb	2	; select bank2
  7814  15AB  0831               	movf	(_RF_Data^(0+256)+17),w
  7815  15AC  0020               	movlb	0	; select bank0
  7816  15AD  00B1               	movwf	??_setRFSW_Control
  7817  15AE  0831               	movf	??_setRFSW_Control,w
  7818  15AF  00AB               	movwf	setDelayOff_GO@value
  7819  15B0  0833               	movf	setRFSW_Control@sw,w
  7820  15B1  3188  2067  3195   	fcall	_setDelayOff_GO
  7821                           
  7822                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7823  15B4  0020               	movlb	0	; select bank0
  7824  15B5  0833               	movf	setRFSW_Control@sw,w
  7825  15B6  319D  2508  3195   	fcall	_getDimmerLights_Status
  7826  15B9  3A01               	xorlw	1
  7827  15BA  1D03               	skipz
  7828  15BB  2DE1               	goto	l6131
  7829                           
  7830                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7831  15BC  3064               	movlw	100
  7832  15BD  0020               	movlb	0	; select bank0
  7833  15BE  00A9               	movwf	setBuz@time
  7834  15BF  3000               	movlw	0
  7835  15C0  00AA               	movwf	setBuz@time+1
  7836  15C1  3001               	movlw	1
  7837  15C2  3196  26F2  3195   	fcall	_setBuz
  7838                           
  7839                           ;RF_Control_B1.c: 437: status = 1;
  7840  15C5  0020               	movlb	0	; select bank0
  7841  15C6  01B2               	clrf	setRFSW_Control@status
  7842  15C7  0AB2               	incf	setRFSW_Control@status,f
  7843                           
  7844                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7845  15C8  01A0               	clrf	setRF_DimmerLights@on
  7846  15C9  0AA0               	incf	setRF_DimmerLights@on,f
  7847  15CA  0833               	movf	setRFSW_Control@sw,w
  7848  15CB  3197  27A4  3195   	fcall	_setRF_DimmerLights
  7849                           
  7850                           ;RF_Control_B1.c: 439: setTxData();
  7851  15CE  3187  2726  3195   	fcall	_setTxData
  7852                           
  7853                           ;RF_Control_B1.c: 441: }
  7854                           ;RF_Control_B1.c: 442: } else {
  7855  15D1  2DE1               	goto	l6131
  7856  15D2                     l6127:	
  7857                           
  7858                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7859  15D2  0020               	movlb	0	; select bank0
  7860  15D3  0833               	movf	setRFSW_Control@sw,w
  7861  15D4  319D  2518  3195   	fcall	_getDelayOff_GO
  7862  15D7  3A01               	xorlw	1
  7863  15D8  1D03               	skipz
  7864  15D9  2DE1               	goto	l6131
  7865                           
  7866                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7867  15DA  0020               	movlb	0	; select bank0
  7868  15DB  01AA               	clrf	setDelayOff_GO@command
  7869  15DC  01AB               	clrf	setDelayOff_GO@value
  7870  15DD  0833               	movf	setRFSW_Control@sw,w
  7871  15DE  3188  2067  3195   	fcall	_setDelayOff_GO
  7872  15E1                     l6131:	
  7873                           
  7874                           ;RF_Control_B1.c: 446: }
  7875                           ;RF_Control_B1.c: 448: }
  7876                           ;RF_Control_B1.c: 449: if (status == 0) {
  7877  15E1  0020               	movlb	0	; select bank0
  7878  15E2  08B2               	movf	setRFSW_Control@status,f
  7879  15E3  1D03               	skipz
  7880  15E4  0008               	return
  7881                           
  7882                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7883  15E5  0833               	movf	setRFSW_Control@sw,w
  7884  15E6  3193  23FE  3195   	fcall	_setDimmerLights_SwOn
  7885                           
  7886                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7887  15E9  0020               	movlb	0	; select bank0
  7888  15EA  0833               	movf	setRFSW_Control@sw,w
  7889  15EB  3194  24BE         	fcall	_setDimmerLights_SwOff
  7890  15ED  0008               	return
  7891  15EE                     __end_of_setRFSW_Control:	
  7892                           
  7893                           	psect	text30
  7894  13FE                     __ptext30:	
  7895 ;; *************** function _setDimmerLights_SwOn *****************
  7896 ;; Defined at:
  7897 ;;		line 505 in file "../src/Dimmer_B1.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  sw              1    wreg     unsigned char 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  sw              1   15[BANK0 ] unsigned char 
  7902 ;;  idle            1   14[BANK0 ] unsigned char 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;		None               void
  7905 ;; Registers used:
  7906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;Total ram usage:        3 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    7
  7919 ;; This function calls:
  7920 ;;		_DimmerLightsPointSelect
  7921 ;;		_getAll_DimmerLights_AdjGO
  7922 ;;		_setBuz
  7923 ;;		_setDimmerLights_Trigger
  7924 ;; This function is called by:
  7925 ;;		_setRFSW_Control
  7926 ;;		_setSw_Main
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function _setDimmerLights_SwOn
  7932  13FE                     _setDimmerLights_SwOn:	
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7936                           ;setDimmerLights_SwOn@sw stored from wreg
  7937  13FE  0020               	movlb	0	; select bank0
  7938  13FF  00AF               	movwf	setDimmerLights_SwOn@sw
  7939                           
  7940                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7941  1400  082F               	movf	setDimmerLights_SwOn@sw,w
  7942  1401  319C  2441  3193   	fcall	_DimmerLightsPointSelect
  7943                           
  7944                           ;Dimmer_B1.c: 507: char idle = 0;
  7945  1404  0020               	movlb	0	; select bank0
  7946  1405  01AE               	clrf	setDimmerLights_SwOn@idle
  7947                           
  7948                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7949  1406  319C  2421  3193   	fcall	_getAll_DimmerLights_AdjGO
  7950  1409  3A01               	xorlw	1
  7951  140A  3000               	movlw	0
  7952  140B  1903               	skipnz
  7953  140C  3001               	movlw	1
  7954  140D  0020               	movlb	0	; select bank0
  7955  140E  00AD               	movwf	??_setDimmerLights_SwOn
  7956  140F  082D               	movf	??_setDimmerLights_SwOn,w
  7957  1410  00AE               	movwf	setDimmerLights_SwOn@idle
  7958                           
  7959                           ;Dimmer_B1.c: 511: if (idle == 0) {
  7960  1411  08AE               	movf	setDimmerLights_SwOn@idle,f
  7961  1412  1D03               	skipz
  7962  1413  0008               	return
  7963                           
  7964                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  7965  1414  086F               	movf	_DimmerLights,w
  7966  1415  3E09               	addlw	9
  7967  1416  0086               	movwf	6
  7968  1417  3001               	movlw	1	; select bank2/3
  7969  1418  0087               	movwf	7
  7970  1419  1701               	bsf	1,6
  7971                           
  7972                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  7973  141A  3064               	movlw	100
  7974  141B  00A9               	movwf	setBuz@time
  7975  141C  3000               	movlw	0
  7976  141D  00AA               	movwf	setBuz@time+1
  7977  141E  3001               	movlw	1
  7978  141F  3196  26F2  3193   	fcall	_setBuz
  7979                           
  7980                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  7981  1422  0020               	movlb	0	; select bank0
  7982  1423  086F               	movf	_DimmerLights,w
  7983  1424  0086               	movwf	6
  7984  1425  3001               	movlw	1	; select bank2/3
  7985  1426  0087               	movwf	7
  7986  1427  1A81               	btfsc	1,5
  7987  1428  2C34               	goto	l5939
  7988                           
  7989                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  7990  1429  086F               	movf	_DimmerLights,w
  7991  142A  0086               	movwf	6
  7992  142B  3001               	movlw	1	; select bank2/3
  7993  142C  0087               	movwf	7
  7994  142D  1681               	bsf	1,5
  7995                           
  7996                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  7997  142E  01A2               	clrf	setDimmerLights_Trigger@command
  7998  142F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7999  1430  082F               	movf	setDimmerLights_SwOn@sw,w
  8000  1431  319E  2697         	fcall	_setDimmerLights_Trigger
  8001                           
  8002                           ;Dimmer_B1.c: 517: } else {
  8003  1433  0008               	return
  8004  1434                     l5939:	
  8005                           
  8006                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8007  1434  0020               	movlb	0	; select bank0
  8008  1435  086F               	movf	_DimmerLights,w
  8009  1436  0086               	movwf	6
  8010  1437  3001               	movlw	1	; select bank2/3
  8011  1438  0087               	movwf	7
  8012  1439  1281               	bcf	1,5
  8013  143A  0008               	return
  8014  143B                     __end_of_setDimmerLights_SwOn:	
  8015                           
  8016                           	psect	text31
  8017  143B                     __ptext31:	
  8018 ;; *************** function _setRFSW_AdjControl *****************
  8019 ;; Defined at:
  8020 ;;		line 458 in file "../src/RF_Control_B1.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  sw              1    wreg     unsigned char 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  sw              1   74[BANK0 ] unsigned char 
  8025 ;;  status          1   73[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;		None               void
  8028 ;; Registers used:
  8029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;Total ram usage:        4 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:   10
  8042 ;; This function calls:
  8043 ;;		_getDimmerLights_Status
  8044 ;;		_setMemory_Modify
  8045 ;;		_setRF_DimmerValue
  8046 ;;		_setTxData
  8047 ;; This function is called by:
  8048 ;;		_setControl_Lights_Table
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           
  8053                           ;psect for function _setRFSW_AdjControl
  8054  143B                     _setRFSW_AdjControl:	
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8058                           ;setRFSW_AdjControl@sw stored from wreg
  8059  143B  0020               	movlb	0	; select bank0
  8060  143C  00EA               	movwf	setRFSW_AdjControl@sw
  8061                           
  8062                           ;RF_Control_B1.c: 459: char status = 0;
  8063  143D  01E9               	clrf	setRFSW_AdjControl@status
  8064                           
  8065                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8066  143E  086A               	movf	setRFSW_AdjControl@sw,w
  8067  143F  319D  2508  3194   	fcall	_getDimmerLights_Status
  8068  1442  0020               	movlb	0	; select bank0
  8069  1443  00E7               	movwf	??_setRFSW_AdjControl
  8070  1444  0867               	movf	??_setRFSW_AdjControl,w
  8071  1445  00E9               	movwf	setRFSW_AdjControl@status
  8072                           
  8073                           ;RF_Control_B1.c: 464: if (status == 1) {
  8074  1446  0869               	movf	setRFSW_AdjControl@status,w
  8075  1447  3A01               	xorlw	1
  8076  1448  1D03               	skipz
  8077  1449  2C54               	goto	l6145
  8078                           
  8079                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8080  144A  3001               	movlw	1
  8081  144B  319D  25C2  3194   	fcall	_setMemory_Modify
  8082                           
  8083                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8084  144E  0020               	movlb	0	; select bank0
  8085  144F  086A               	movf	setRFSW_AdjControl@sw,w
  8086  1450  3191  21AD  3194   	fcall	_setRF_DimmerValue
  8087                           
  8088                           ;RF_Control_B1.c: 467: } else {
  8089  1453  2C66               	goto	l2098
  8090  1454                     l6145:	
  8091                           
  8092                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8093  1454  0020               	movlb	0	; select bank0
  8094  1455  086A               	movf	setRFSW_AdjControl@sw,w
  8095  1456  3E14               	addlw	20
  8096  1457  076E               	addwf	_product,w
  8097  1458  00E7               	movwf	??_setRFSW_AdjControl
  8098  1459  0867               	movf	??_setRFSW_AdjControl,w
  8099  145A  0086               	movwf	6
  8100  145B  3002               	movlw	2	; select bank4/5
  8101  145C  0087               	movwf	7
  8102  145D  0801               	movf	1,w
  8103  145E  00E8               	movwf	??_setRFSW_AdjControl+1
  8104  145F  086E               	movf	_product,w
  8105  1460  3E09               	addlw	9
  8106  1461  0086               	movwf	6
  8107  1462  3002               	movlw	2	; select bank4/5
  8108  1463  0087               	movwf	7
  8109  1464  0868               	movf	??_setRFSW_AdjControl+1,w
  8110  1465  0081               	movwf	1
  8111  1466                     l2098:	
  8112                           
  8113                           ;RF_Control_B1.c: 469: }
  8114                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8115  1466  0020               	movlb	0	; select bank0
  8116  1467  086A               	movf	setRFSW_AdjControl@sw,w
  8117  1468  3E1A               	addlw	26
  8118  1469  076E               	addwf	_product,w
  8119  146A  00E7               	movwf	??_setRFSW_AdjControl
  8120  146B  0867               	movf	??_setRFSW_AdjControl,w
  8121  146C  0086               	movwf	6
  8122  146D  3002               	movlw	2	; select bank4/5
  8123  146E  0087               	movwf	7
  8124  146F  0801               	movf	1,w
  8125  1470  00E8               	movwf	??_setRFSW_AdjControl+1
  8126  1471  086E               	movf	_product,w
  8127  1472  3E11               	addlw	17
  8128  1473  0086               	movwf	6
  8129  1474  3002               	movlw	2	; select bank4/5
  8130  1475  0087               	movwf	7
  8131  1476  0868               	movf	??_setRFSW_AdjControl+1,w
  8132  1477  0081               	movwf	1
  8133                           
  8134                           ;RF_Control_B1.c: 471: setTxData();
  8135  1478  3187  2726         	fcall	_setTxData
  8136  147A  0008               	return
  8137  147B                     __end_of_setRFSW_AdjControl:	
  8138                           
  8139                           	psect	text32
  8140  11AD                     __ptext32:	
  8141 ;; *************** function _setRF_DimmerValue *****************
  8142 ;; Defined at:
  8143 ;;		line 476 in file "../src/RF_Control_B1.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  lights          1    wreg     unsigned char 
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;  lights          1   70[BANK0 ] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;		None               void
  8150 ;; Registers used:
  8151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;Total ram usage:        3 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    9
  8164 ;; This function calls:
  8165 ;;		_setDimmerLights_AdjRF
  8166 ;; This function is called by:
  8167 ;;		_setRFSW_AdjControl
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           
  8172                           ;psect for function _setRF_DimmerValue
  8173  11AD                     _setRF_DimmerValue:	
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8177                           ;setRF_DimmerValue@lights stored from wreg
  8178  11AD  0020               	movlb	0	; select bank0
  8179  11AE  00E6               	movwf	setRF_DimmerValue@lights
  8180                           
  8181                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8182  11AF  3065               	movlw	101
  8183  11B0  0022               	movlb	2	; select bank2
  8184  11B1  0229               	subwf	(_RF_Data^(0+256)+9),w
  8185  11B2  1C03               	skipc
  8186  11B3  29BA               	goto	l6027
  8187                           
  8188                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8189  11B4  3064               	movlw	100
  8190  11B5  0020               	movlb	0	; select bank0
  8191  11B6  00E4               	movwf	??_setRF_DimmerValue
  8192  11B7  0864               	movf	??_setRF_DimmerValue,w
  8193  11B8  0022               	movlb	2	; select bank2
  8194  11B9  00A9               	movwf	(_RF_Data^(0+256)+9)
  8195  11BA                     l6027:	
  8196                           
  8197                           ;RF_Control_B1.c: 479: }
  8198                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8199  11BA  0829               	movf	(_RF_Data^(0+256)+9),w
  8200  11BB  0020               	movlb	0	; select bank0
  8201  11BC  00E4               	movwf	??_setRF_DimmerValue
  8202  11BD  086E               	movf	_product,w
  8203  11BE  3E09               	addlw	9
  8204  11BF  0086               	movwf	6
  8205  11C0  3002               	movlw	2	; select bank4/5
  8206  11C1  0087               	movwf	7
  8207  11C2  0864               	movf	??_setRF_DimmerValue,w
  8208  11C3  0081               	movwf	1
  8209                           
  8210                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8211  11C4  0866               	movf	setRF_DimmerValue@lights,w
  8212  11C5  00E4               	movwf	??_setRF_DimmerValue
  8213  11C6  086E               	movf	_product,w
  8214  11C7  3E0B               	addlw	11
  8215  11C8  0086               	movwf	6
  8216  11C9  3002               	movlw	2	; select bank4/5
  8217  11CA  0087               	movwf	7
  8218  11CB  0864               	movf	??_setRF_DimmerValue,w
  8219  11CC  0081               	movwf	1
  8220                           
  8221                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8222  11CD  0022               	movlb	2	; select bank2
  8223  11CE  0829               	movf	(_RF_Data^(0+256)+9),w
  8224  11CF  0020               	movlb	0	; select bank0
  8225  11D0  00E4               	movwf	??_setRF_DimmerValue
  8226  11D1  0866               	movf	setRF_DimmerValue@lights,w
  8227  11D2  3E14               	addlw	20
  8228  11D3  076E               	addwf	_product,w
  8229  11D4  00E5               	movwf	??_setRF_DimmerValue+1
  8230  11D5  0865               	movf	??_setRF_DimmerValue+1,w
  8231  11D6  0086               	movwf	6
  8232  11D7  3002               	movlw	2	; select bank4/5
  8233  11D8  0087               	movwf	7
  8234  11D9  0864               	movf	??_setRF_DimmerValue,w
  8235  11DA  0081               	movwf	1
  8236                           
  8237                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8238  11DB  0866               	movf	setRF_DimmerValue@lights,w
  8239  11DC  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8240  11DE  0008               	return
  8241  11DF                     __end_of_setRF_DimmerValue:	
  8242                           
  8243                           	psect	text33
  8244  1FB9                     __ptext33:	
  8245 ;; *************** function _setDimmerLights_AdjRF *****************
  8246 ;; Defined at:
  8247 ;;		line 746 in file "../src/Dimmer_B1.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  lights          1    wreg     unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  lights          1   67[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;		None               void
  8254 ;; Registers used:
  8255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;Total ram usage:        2 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    8
  8268 ;; This function calls:
  8269 ;;		_DimmerLightsPointSelect
  8270 ;;		_getPercentValue
  8271 ;; This function is called by:
  8272 ;;		_setRF_DimmerValue
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           
  8277                           ;psect for function _setDimmerLights_AdjRF
  8278  1FB9                     _setDimmerLights_AdjRF:	
  8279                           
  8280                           ;incstack = 0
  8281                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8282                           ;setDimmerLights_AdjRF@lights stored from wreg
  8283  1FB9  0020               	movlb	0	; select bank0
  8284  1FBA  00E3               	movwf	setDimmerLights_AdjRF@lights
  8285                           
  8286                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8287  1FBB  0863               	movf	setDimmerLights_AdjRF@lights,w
  8288  1FBC  319C  2441  319F   	fcall	_DimmerLightsPointSelect
  8289                           
  8290                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8291  1FBF  0020               	movlb	0	; select bank0
  8292  1FC0  086F               	movf	_DimmerLights,w
  8293  1FC1  0086               	movwf	6
  8294  1FC2  3001               	movlw	1	; select bank2/3
  8295  1FC3  0087               	movwf	7
  8296  1FC4  1501               	bsf	1,2
  8297                           
  8298                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8299  1FC5  086F               	movf	_DimmerLights,w
  8300  1FC6  0086               	movwf	6
  8301  1FC7  3001               	movlw	1	; select bank2/3
  8302  1FC8  0087               	movwf	7
  8303  1FC9  1481               	bsf	1,1
  8304                           
  8305                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8306  1FCA  086E               	movf	_product,w
  8307  1FCB  3E09               	addlw	9
  8308  1FCC  0086               	movwf	6
  8309  1FCD  3002               	movlw	2	; select bank4/5
  8310  1FCE  0087               	movwf	7
  8311  1FCF  0801               	movf	1,w
  8312  1FD0  318A  22A8         	fcall	_getPercentValue
  8313  1FD2  0020               	movlb	0	; select bank0
  8314  1FD3  00E2               	movwf	??_setDimmerLights_AdjRF
  8315  1FD4  086F               	movf	_DimmerLights,w
  8316  1FD5  3E05               	addlw	5
  8317  1FD6  0086               	movwf	6
  8318  1FD7  3001               	movlw	1	; select bank2/3
  8319  1FD8  0087               	movwf	7
  8320  1FD9  0862               	movf	??_setDimmerLights_AdjRF,w
  8321  1FDA  0081               	movwf	1
  8322  1FDB  0008               	return
  8323  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8324                           
  8325                           	psect	text34
  8326  0AA8                     __ptext34:	
  8327 ;; *************** function _getPercentValue *****************
  8328 ;; Defined at:
  8329 ;;		line 858 in file "../src/Dimmer_B1.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  value           1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  value           1   62[BANK0 ] unsigned char 
  8334 ;;  i               3   63[BANK0 ] float 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      unsigned char 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0, pclath, cstack
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;Total ram usage:        6 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    7
  8351 ;; This function calls:
  8352 ;;		___awtoft
  8353 ;;		___ftadd
  8354 ;;		___ftdiv
  8355 ;;		___ftmul
  8356 ;;		___ftneg
  8357 ;;		___fttol
  8358 ;; This function is called by:
  8359 ;;		_setDimmerLights_AdjRF
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _getPercentValue
  8365  0AA8                     _getPercentValue:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8369                           ;getPercentValue@value stored from wreg
  8370  0AA8  0020               	movlb	0	; select bank0
  8371  0AA9  00DE               	movwf	getPercentValue@value
  8372                           
  8373                           ;Dimmer_B1.c: 866: float i = ((char)(85*0.8)) - ((char)(15*0.8));
  8374  0AAA  3000               	movlw	0
  8375  0AAB  00DF               	movwf	getPercentValue@i
  8376  0AAC  3060               	movlw	96
  8377  0AAD  00E0               	movwf	getPercentValue@i+1
  8378  0AAE  3042               	movlw	66
  8379  0AAF  00E1               	movwf	getPercentValue@i+2
  8380                           
  8381                           ;Dimmer_B1.c: 867: i /= 100;
  8382  0AB0  3000               	movlw	0
  8383  0AB1  00AE               	movwf	___ftdiv@f2
  8384  0AB2  30C8               	movlw	200
  8385  0AB3  00AF               	movwf	___ftdiv@f2+1
  8386  0AB4  3042               	movlw	66
  8387  0AB5  00B0               	movwf	___ftdiv@f2+2
  8388  0AB6  085F               	movf	getPercentValue@i,w
  8389  0AB7  00B1               	movwf	___ftdiv@f1
  8390  0AB8  0860               	movf	getPercentValue@i+1,w
  8391  0AB9  00B2               	movwf	___ftdiv@f1+1
  8392  0ABA  0861               	movf	getPercentValue@i+2,w
  8393  0ABB  00B3               	movwf	___ftdiv@f1+2
  8394  0ABC  318E  26A3  318A   	fcall	___ftdiv
  8395  0ABF  0020               	movlb	0	; select bank0
  8396  0AC0  082E               	movf	?___ftdiv,w
  8397  0AC1  00DF               	movwf	getPercentValue@i
  8398  0AC2  082F               	movf	?___ftdiv+1,w
  8399  0AC3  00E0               	movwf	getPercentValue@i+1
  8400  0AC4  0830               	movf	?___ftdiv+2,w
  8401  0AC5  00E1               	movwf	getPercentValue@i+2
  8402                           
  8403                           ;Dimmer_B1.c: 869: return (char) (((char)(85*0.8)) - ((100 - value) * i));
  8404  0AC6  085E               	movf	getPercentValue@value,w
  8405  0AC7  00DC               	movwf	??_getPercentValue
  8406  0AC8  01DD               	clrf	??_getPercentValue+1
  8407  0AC9  09DC               	comf	??_getPercentValue,f
  8408  0ACA  09DD               	comf	??_getPercentValue+1,f
  8409  0ACB  0ADC               	incf	??_getPercentValue,f
  8410  0ACC  1903               	skipnz
  8411  0ACD  0ADD               	incf	??_getPercentValue+1,f
  8412  0ACE  085C               	movf	??_getPercentValue,w
  8413  0ACF  3E64               	addlw	100
  8414  0AD0  00A8               	movwf	___awtoft@c
  8415  0AD1  3000               	movlw	0
  8416  0AD2  3D5D               	addwfc	??_getPercentValue+1,w
  8417  0AD3  00A9               	movwf	___awtoft@c+1
  8418  0AD4  319F  2775  318A   	fcall	___awtoft
  8419  0AD7  0020               	movlb	0	; select bank0
  8420  0AD8  0828               	movf	?___awtoft,w
  8421  0AD9  00B1               	movwf	___ftmul@f2
  8422  0ADA  0829               	movf	?___awtoft+1,w
  8423  0ADB  00B2               	movwf	___ftmul@f2+1
  8424  0ADC  082A               	movf	?___awtoft+2,w
  8425  0ADD  00B3               	movwf	___ftmul@f2+2
  8426  0ADE  085F               	movf	getPercentValue@i,w
  8427  0ADF  00AE               	movwf	___ftmul@f1
  8428  0AE0  0860               	movf	getPercentValue@i+1,w
  8429  0AE1  00AF               	movwf	___ftmul@f1+1
  8430  0AE2  0861               	movf	getPercentValue@i+2,w
  8431  0AE3  00B0               	movwf	___ftmul@f1+2
  8432  0AE4  318F  274C  318A   	fcall	___ftmul
  8433  0AE7  0020               	movlb	0	; select bank0
  8434  0AE8  082E               	movf	?___ftmul,w
  8435  0AE9  00BE               	movwf	___ftneg@f1
  8436  0AEA  082F               	movf	?___ftmul+1,w
  8437  0AEB  00BF               	movwf	___ftneg@f1+1
  8438  0AEC  0830               	movf	?___ftmul+2,w
  8439  0AED  00C0               	movwf	___ftneg@f1+2
  8440  0AEE  319B  23FC  318A   	fcall	___ftneg
  8441  0AF1  0020               	movlb	0	; select bank0
  8442  0AF2  083E               	movf	?___ftneg,w
  8443  0AF3  00C4               	movwf	___ftadd@f2
  8444  0AF4  083F               	movf	?___ftneg+1,w
  8445  0AF5  00C5               	movwf	___ftadd@f2+1
  8446  0AF6  0840               	movf	?___ftneg+2,w
  8447  0AF7  00C6               	movwf	___ftadd@f2+2
  8448  0AF8  3000               	movlw	0
  8449  0AF9  00C1               	movwf	___ftadd@f1
  8450  0AFA  3088               	movlw	136
  8451  0AFB  00C2               	movwf	___ftadd@f1+1
  8452  0AFC  3042               	movlw	66
  8453  0AFD  00C3               	movwf	___ftadd@f1+2
  8454  0AFE  3184  2475  318A   	fcall	___ftadd
  8455  0B01  0020               	movlb	0	; select bank0
  8456  0B02  0841               	movf	?___ftadd,w
  8457  0B03  00CE               	movwf	___fttol@f1
  8458  0B04  0842               	movf	?___ftadd+1,w
  8459  0B05  00CF               	movwf	___fttol@f1+1
  8460  0B06  0843               	movf	?___ftadd+2,w
  8461  0B07  00D0               	movwf	___fttol@f1+2
  8462  0B08  318C  245E         	fcall	___fttol
  8463  0B0A  0020               	movlb	0	; select bank0
  8464  0B0B  084E               	movf	?___fttol,w
  8465  0B0C  0008               	return
  8466  0B0D                     __end_of_getPercentValue:	
  8467                           
  8468                           	psect	text35
  8469  0F4C                     __ptext35:	
  8470 ;; *************** function ___ftmul *****************
  8471 ;; Defined at:
  8472 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  f1              3   14[BANK0 ] float 
  8475 ;;  f2              3   17[BANK0 ] float 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8478 ;;  sign            1   29[BANK0 ] unsigned char 
  8479 ;;  cntr            1   28[BANK0 ] unsigned char 
  8480 ;;  exp             1   24[BANK0 ] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  3   14[BANK0 ] float 
  8483 ;; Registers used:
  8484 ;;		wreg, status,2, status,0, pclath, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8490 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;Total ram usage:       16 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    6
  8497 ;; This function calls:
  8498 ;;		___ftpack
  8499 ;; This function is called by:
  8500 ;;		_getPercentValue
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function ___ftmul
  8506  0F4C                     ___ftmul:	
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8510  0F4C  0020               	movlb	0	; select bank0
  8511  0F4D  082E               	movf	___ftmul@f1,w
  8512  0F4E  00B4               	movwf	??___ftmul
  8513  0F4F  082F               	movf	___ftmul@f1+1,w
  8514  0F50  00B5               	movwf	??___ftmul+1
  8515  0F51  0830               	movf	___ftmul@f1+2,w
  8516  0F52  00B6               	movwf	??___ftmul+2
  8517  0F53  1003               	clrc
  8518  0F54  0D35               	rlf	??___ftmul+1,w
  8519  0F55  0D36               	rlf	??___ftmul+2,w
  8520  0F56  00B7               	movwf	??___ftmul+3
  8521  0F57  0837               	movf	??___ftmul+3,w
  8522  0F58  00B8               	movwf	___ftmul@exp
  8523  0F59  08B8               	movf	___ftmul@exp,f
  8524  0F5A  1D03               	skipz
  8525  0F5B  2F63               	goto	l5657
  8526  0F5C  3000               	movlw	0
  8527  0F5D  00AE               	movwf	?___ftmul
  8528  0F5E  3000               	movlw	0
  8529  0F5F  00AF               	movwf	?___ftmul+1
  8530  0F60  3000               	movlw	0
  8531  0F61  00B0               	movwf	?___ftmul+2
  8532  0F62  0008               	return
  8533  0F63                     l5657:	
  8534  0F63  0831               	movf	___ftmul@f2,w
  8535  0F64  00B4               	movwf	??___ftmul
  8536  0F65  0832               	movf	___ftmul@f2+1,w
  8537  0F66  00B5               	movwf	??___ftmul+1
  8538  0F67  0833               	movf	___ftmul@f2+2,w
  8539  0F68  00B6               	movwf	??___ftmul+2
  8540  0F69  1003               	clrc
  8541  0F6A  0D35               	rlf	??___ftmul+1,w
  8542  0F6B  0D36               	rlf	??___ftmul+2,w
  8543  0F6C  00B7               	movwf	??___ftmul+3
  8544  0F6D  0837               	movf	??___ftmul+3,w
  8545  0F6E  00BD               	movwf	___ftmul@sign
  8546  0F6F  08BD               	movf	___ftmul@sign,f
  8547  0F70  1D03               	skipz
  8548  0F71  2F79               	goto	l5663
  8549  0F72  3000               	movlw	0
  8550  0F73  00AE               	movwf	?___ftmul
  8551  0F74  3000               	movlw	0
  8552  0F75  00AF               	movwf	?___ftmul+1
  8553  0F76  3000               	movlw	0
  8554  0F77  00B0               	movwf	?___ftmul+2
  8555  0F78  0008               	return
  8556  0F79                     l5663:	
  8557  0F79  083D               	movf	___ftmul@sign,w
  8558  0F7A  3E7B               	addlw	123
  8559  0F7B  00B4               	movwf	??___ftmul
  8560  0F7C  0834               	movf	??___ftmul,w
  8561  0F7D  07B8               	addwf	___ftmul@exp,f
  8562  0F7E  082E               	movf	___ftmul@f1,w
  8563  0F7F  00B4               	movwf	??___ftmul
  8564  0F80  082F               	movf	___ftmul@f1+1,w
  8565  0F81  00B5               	movwf	??___ftmul+1
  8566  0F82  0830               	movf	___ftmul@f1+2,w
  8567  0F83  00B6               	movwf	??___ftmul+2
  8568  0F84  3010               	movlw	16
  8569  0F85                     u4505:	
  8570  0F85  36B6               	lsrf	??___ftmul+2,f
  8571  0F86  0CB5               	rrf	??___ftmul+1,f
  8572  0F87  0CB4               	rrf	??___ftmul,f
  8573  0F88  0B89               	decfsz	9,f
  8574  0F89  2F85               	goto	u4505
  8575  0F8A  0834               	movf	??___ftmul,w
  8576  0F8B  00B7               	movwf	??___ftmul+3
  8577  0F8C  0837               	movf	??___ftmul+3,w
  8578  0F8D  00BD               	movwf	___ftmul@sign
  8579  0F8E  0831               	movf	___ftmul@f2,w
  8580  0F8F  00B4               	movwf	??___ftmul
  8581  0F90  0832               	movf	___ftmul@f2+1,w
  8582  0F91  00B5               	movwf	??___ftmul+1
  8583  0F92  0833               	movf	___ftmul@f2+2,w
  8584  0F93  00B6               	movwf	??___ftmul+2
  8585  0F94  3010               	movlw	16
  8586  0F95                     u4515:	
  8587  0F95  36B6               	lsrf	??___ftmul+2,f
  8588  0F96  0CB5               	rrf	??___ftmul+1,f
  8589  0F97  0CB4               	rrf	??___ftmul,f
  8590  0F98  0B89               	decfsz	9,f
  8591  0F99  2F95               	goto	u4515
  8592  0F9A  0834               	movf	??___ftmul,w
  8593  0F9B  00B7               	movwf	??___ftmul+3
  8594  0F9C  0837               	movf	??___ftmul+3,w
  8595  0F9D  06BD               	xorwf	___ftmul@sign,f
  8596  0F9E  3080               	movlw	128
  8597  0F9F  00B4               	movwf	??___ftmul
  8598  0FA0  0834               	movf	??___ftmul,w
  8599  0FA1  05BD               	andwf	___ftmul@sign,f
  8600  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8601  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8602  0FA4  30FF               	movlw	255
  8603  0FA5  05B1               	andwf	___ftmul@f2,f
  8604  0FA6  30FF               	movlw	255
  8605  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8606  0FA8  3000               	movlw	0
  8607  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8608  0FAA  3000               	movlw	0
  8609  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8610  0FAC  3000               	movlw	0
  8611  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8612  0FAE  3000               	movlw	0
  8613  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8614  0FB0  3007               	movlw	7
  8615  0FB1  00B4               	movwf	??___ftmul
  8616  0FB2  0834               	movf	??___ftmul,w
  8617  0FB3  00BC               	movwf	___ftmul@cntr
  8618  0FB4                     l5675:	
  8619  0FB4  1C2E               	btfss	___ftmul@f1,0
  8620  0FB5  2FBC               	goto	l5679
  8621  0FB6  0831               	movf	___ftmul@f2,w
  8622  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8623  0FB8  0832               	movf	___ftmul@f2+1,w
  8624  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8625  0FBA  0833               	movf	___ftmul@f2+2,w
  8626  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8627  0FBC                     l5679:	
  8628  0FBC  3001               	movlw	1
  8629  0FBD                     u4535:	
  8630  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8631  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8632  0FBF  0CAE               	rrf	___ftmul@f1,f
  8633  0FC0  0B89               	decfsz	9,f
  8634  0FC1  2FBD               	goto	u4535
  8635  0FC2  3001               	movlw	1
  8636  0FC3                     u4545:	
  8637  0FC3  35B1               	lslf	___ftmul@f2,f
  8638  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8639  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8640  0FC6  0B89               	decfsz	9,f
  8641  0FC7  2FC3               	goto	u4545
  8642  0FC8  3001               	movlw	1
  8643  0FC9  02BC               	subwf	___ftmul@cntr,f
  8644  0FCA  1D03               	btfss	3,2
  8645  0FCB  2FB4               	goto	l5675
  8646  0FCC  3009               	movlw	9
  8647  0FCD  00B4               	movwf	??___ftmul
  8648  0FCE  0834               	movf	??___ftmul,w
  8649  0FCF  00BC               	movwf	___ftmul@cntr
  8650  0FD0                     l5687:	
  8651  0FD0  1C2E               	btfss	___ftmul@f1,0
  8652  0FD1  2FD8               	goto	l5691
  8653  0FD2  0831               	movf	___ftmul@f2,w
  8654  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8655  0FD4  0832               	movf	___ftmul@f2+1,w
  8656  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8657  0FD6  0833               	movf	___ftmul@f2+2,w
  8658  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8659  0FD8                     l5691:	
  8660  0FD8  3001               	movlw	1
  8661  0FD9                     u4575:	
  8662  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8663  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8664  0FDB  0CAE               	rrf	___ftmul@f1,f
  8665  0FDC  0B89               	decfsz	9,f
  8666  0FDD  2FD9               	goto	u4575
  8667  0FDE  3001               	movlw	1
  8668  0FDF                     u4585:	
  8669  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8670  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8671  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8672  0FE2  0B89               	decfsz	9,f
  8673  0FE3  2FDF               	goto	u4585
  8674  0FE4  3001               	movlw	1
  8675  0FE5  02BC               	subwf	___ftmul@cntr,f
  8676  0FE6  1D03               	btfss	3,2
  8677  0FE7  2FD0               	goto	l5687
  8678  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8679  0FE9  00A0               	movwf	___ftpack@arg
  8680  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8681  0FEB  00A1               	movwf	___ftpack@arg+1
  8682  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8683  0FED  00A2               	movwf	___ftpack@arg+2
  8684  0FEE  0838               	movf	___ftmul@exp,w
  8685  0FEF  00B4               	movwf	??___ftmul
  8686  0FF0  0834               	movf	??___ftmul,w
  8687  0FF1  00A3               	movwf	___ftpack@exp
  8688  0FF2  083D               	movf	___ftmul@sign,w
  8689  0FF3  00B5               	movwf	??___ftmul+1
  8690  0FF4  0835               	movf	??___ftmul+1,w
  8691  0FF5  00A4               	movwf	___ftpack@sign
  8692  0FF6  3189  2181         	fcall	___ftpack
  8693  0FF8  0020               	movlb	0	; select bank0
  8694  0FF9  0820               	movf	?___ftpack,w
  8695  0FFA  00AE               	movwf	?___ftmul
  8696  0FFB  0821               	movf	?___ftpack+1,w
  8697  0FFC  00AF               	movwf	?___ftmul+1
  8698  0FFD  0822               	movf	?___ftpack+2,w
  8699  0FFE  00B0               	movwf	?___ftmul+2
  8700  0FFF  0008               	return
  8701  1000                     __end_of___ftmul:	
  8702                           
  8703                           	psect	text36
  8704  1DC2                     __ptext36:	
  8705 ;; *************** function _setMemory_Modify *****************
  8706 ;; Defined at:
  8707 ;;		line 1023 in file "../src/MCU_B1.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  command         1    wreg     unsigned char 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  command         1    1[BANK0 ] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;		None               void
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        2 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    5
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_setLog_Code
  8732 ;;		_setRFSW_AdjControl
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function _setMemory_Modify
  8738  1DC2                     _setMemory_Modify:	
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8742                           ;setMemory_Modify@command stored from wreg
  8743  1DC2  0020               	movlb	0	; select bank0
  8744  1DC3  00A1               	movwf	setMemory_Modify@command
  8745                           
  8746                           ;MCU_B1.c: 1024: Memory.Modify = command == 1 ? 1 : 0;
  8747  1DC4  0821               	movf	setMemory_Modify@command,w
  8748  1DC5  3A01               	xorlw	1
  8749  1DC6  3000               	movlw	0
  8750  1DC7  1903               	skipnz
  8751  1DC8  3001               	movlw	1
  8752  1DC9  00A0               	movwf	??_setMemory_Modify
  8753  1DCA  0023               	movlb	3	; select bank3
  8754  1DCB  0844               	movf	(_Memory^(0+384)+36),w
  8755  1DCC  0020               	movlb	0	; select bank0
  8756  1DCD  0620               	xorwf	??_setMemory_Modify,w
  8757  1DCE  39FE               	andlw	-2
  8758  1DCF  0620               	xorwf	??_setMemory_Modify,w
  8759  1DD0  0023               	movlb	3	; select bank3
  8760  1DD1  00C4               	movwf	(_Memory^(0+384)+36)
  8761                           
  8762                           ;MCU_B1.c: 1025: Memory.Time = 0;
  8763  1DD2  01C2               	clrf	(_Memory^(0+384)+34)
  8764  1DD3  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8765  1DD4  0008               	return
  8766  1DD5                     __end_of_setMemory_Modify:	
  8767                           
  8768                           	psect	text37
  8769  1D6A                     __ptext37:	
  8770 ;; *************** function _getRF_KeyStatus *****************
  8771 ;; Defined at:
  8772 ;;		line 193 in file "../src/RF_Control_B1.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  key             1    1[BANK0 ] unsigned char 
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      unsigned char 
  8779 ;; Registers used:
  8780 ;;		wreg, status,2
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;Total ram usage:        3 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:    5
  8793 ;; This function calls:
  8794 ;;		Nothing
  8795 ;; This function is called by:
  8796 ;;		_setRF_Main
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           
  8801                           ;psect for function _getRF_KeyStatus
  8802  1D6A                     _getRF_KeyStatus:	
  8803                           
  8804                           ;RF_Control_B1.c: 194: char key = 0;
  8805                           
  8806                           ;incstack = 0
  8807                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8808  1D6A  0020               	movlb	0	; select bank0
  8809  1D6B  01A1               	clrf	getRF_KeyStatus@key
  8810                           
  8811                           ;RF_Control_B1.c: 204: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8812  1D6C  01A2               	clrf	_getRF_KeyStatus$4884
  8813  1D6D  0AA2               	incf	_getRF_KeyStatus$4884,f
  8814  1D6E  1F0C               	btfss	12,6	;volatile
  8815  1D6F  1A0C               	btfsc	12,4	;volatile
  8816  1D70  2D75               	goto	l6649
  8817  1D71  1C0C               	btfss	12,0	;volatile
  8818  1D72  1B8C               	btfsc	12,7	;volatile
  8819  1D73  2D75               	goto	l6649
  8820  1D74  01A2               	clrf	_getRF_KeyStatus$4884
  8821  1D75                     l6649:	
  8822  1D75  0822               	movf	_getRF_KeyStatus$4884,w
  8823  1D76  00A0               	movwf	??_getRF_KeyStatus
  8824  1D77  0820               	movf	??_getRF_KeyStatus,w
  8825  1D78  00A1               	movwf	getRF_KeyStatus@key
  8826                           
  8827                           ;RF_Control_B1.c: 206: return key;
  8828  1D79  0821               	movf	getRF_KeyStatus@key,w
  8829  1D7A  0008               	return
  8830  1D7B                     __end_of_getRF_KeyStatus:	
  8831                           
  8832                           	psect	text38
  8833  1D59                     __ptext38:	
  8834 ;; *************** function _getBuz_GO *****************
  8835 ;; Defined at:
  8836 ;;		line 82 in file "../src/Buzzer_B1.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  i               2    4[BANK0 ] int 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  2    0[BANK0 ] int 
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;Total ram usage:        6 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    5
  8857 ;; This function calls:
  8858 ;;		Nothing
  8859 ;; This function is called by:
  8860 ;;		_setRF_Main
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _getBuz_GO
  8866  1D59                     _getBuz_GO:	
  8867                           
  8868                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8869                           
  8870                           ;incstack = 0
  8871                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8872  1D59  0021               	movlb	1	; select bank1
  8873  1D5A  0C2E               	rrf	_Buz1^(0+128),w
  8874  1D5B  3901               	andlw	1
  8875  1D5C  0020               	movlb	0	; select bank0
  8876  1D5D  00A2               	movwf	??_getBuz_GO
  8877  1D5E  01A3               	clrf	??_getBuz_GO+1
  8878  1D5F  0822               	movf	??_getBuz_GO,w
  8879  1D60  00A4               	movwf	getBuz_GO@i
  8880  1D61  0823               	movf	??_getBuz_GO+1,w
  8881  1D62  00A5               	movwf	getBuz_GO@i+1
  8882                           
  8883                           ;Buzzer_B1.c: 84: return i;
  8884  1D63  0825               	movf	getBuz_GO@i+1,w
  8885  1D64  01A1               	clrf	?_getBuz_GO+1
  8886  1D65  07A1               	addwf	?_getBuz_GO+1,f
  8887  1D66  0824               	movf	getBuz_GO@i,w
  8888  1D67  01A0               	clrf	?_getBuz_GO
  8889  1D68  07A0               	addwf	?_getBuz_GO,f
  8890  1D69  0008               	return
  8891  1D6A                     __end_of_getBuz_GO:	
  8892                           
  8893                           	psect	text39
  8894  1CEA                     __ptext39:	
  8895 ;; *************** function _RF_RxDisable *****************
  8896 ;; Defined at:
  8897 ;;		line 268 in file "../src/RF_Control_B1.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;		None               void
  8904 ;; Registers used:
  8905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;Total ram usage:        0 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    7
  8918 ;; This function calls:
  8919 ;;		_CC2500_WriteCommand
  8920 ;; This function is called by:
  8921 ;;		_setRF_Main
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _RF_RxDisable
  8927  1CEA                     _RF_RxDisable:	
  8928                           
  8929                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8933  1CEA  0021               	movlb	1	; select bank1
  8934  1CEB  18BA               	btfsc	_RF1^(0+128),1
  8935  1CEC  2CEF               	goto	l2048
  8936  1CED  1DBA               	btfss	_RF1^(0+128),3
  8937  1CEE  0008               	return
  8938  1CEF                     l2048:	
  8939                           
  8940                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  8941  1CEF  11BA               	bcf	_RF1^(0+128),3
  8942                           
  8943                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  8944  1CF0  10BA               	bcf	_RF1^(0+128),1
  8945                           
  8946                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  8947  1CF1  3036               	movlw	54
  8948  1CF2  319E  267E  319C   	fcall	_CC2500_WriteCommand
  8949                           
  8950                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  8951  1CF5  303A               	movlw	58
  8952  1CF6  319E  267E         	fcall	_CC2500_WriteCommand
  8953  1CF8  0008               	return
  8954  1CF9                     __end_of_RF_RxDisable:	
  8955                           
  8956                           	psect	text40
  8957  09E2                     __ptext40:	
  8958 ;; *************** function _CC2500_TxData *****************
  8959 ;; Defined at:
  8960 ;;		line 32 in file "../src/CC2500_B1.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8965 ;; Return value:  Size  Location     Type
  8966 ;;		None               void
  8967 ;; Registers used:
  8968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;Total ram usage:        2 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:    7
  8981 ;; This function calls:
  8982 ;;		_CC2500_WriteByte
  8983 ;;		_CC2500_WriteCommand
  8984 ;;		_Timeout_Counter
  8985 ;;		_set_TimeoutCleared
  8986 ;; This function is called by:
  8987 ;;		_setRF_Main
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           
  8992                           ;psect for function _CC2500_TxData
  8993  09E2                     _CC2500_TxData:	
  8994                           
  8995                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8996                           ;CC2500_B1.c: 35: RC0 = 0;
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9000  09E2  0020               	movlb	0	; select bank0
  9001  09E3  100E               	bcf	14,0	;volatile
  9002                           
  9003                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9004  09E4  307F               	movlw	127
  9005  09E5  00A4               	movwf	??_CC2500_TxData
  9006  09E6  0824               	movf	??_CC2500_TxData,w
  9007  09E7  00FB               	movwf	_SPI0Buffer
  9008                           
  9009                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9010  09E8  29EC               	goto	l6307
  9011  09E9                     l6305:	
  9012                           
  9013                           ;CC2500_B1.c: 38: Timeout_Counter();
  9014  09E9  319E  2610  3189   	fcall	_Timeout_Counter
  9015  09EC                     l6307:	
  9016  09EC  0020               	movlb	0	; select bank0
  9017  09ED  1E8E               	btfss	14,5	;volatile
  9018  09EE  29F2               	goto	l6311
  9019  09EF  0021               	movlb	1	; select bank1
  9020  09F0  1D2B               	btfss	(_myMain^(0+128)+11),2
  9021  09F1  29E9               	goto	l6305
  9022  09F2                     l6311:	
  9023                           
  9024                           ;CC2500_B1.c: 39: };
  9025                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9026  09F2  319B  23C9  3189   	fcall	_set_TimeoutCleared
  9027                           
  9028                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9029  09F5  319D  25E8  3189   	fcall	_CC2500_WriteByte
  9030                           
  9031                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9032  09F8  0021               	movlb	1	; select bank1
  9033  09F9  0853               	movf	_Tx_Length^(0+128),w
  9034  09FA  0020               	movlb	0	; select bank0
  9035  09FB  00A4               	movwf	??_CC2500_TxData
  9036  09FC  0824               	movf	??_CC2500_TxData,w
  9037  09FD  00FB               	movwf	_SPI0Buffer
  9038                           
  9039                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9040  09FE  319D  25E8  3189   	fcall	_CC2500_WriteByte
  9041                           
  9042                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9043  0A01  0020               	movlb	0	; select bank0
  9044  0A02  01A5               	clrf	CC2500_TxData@loop_e
  9045  0A03                     l6325:	
  9046  0A03  0021               	movlb	1	; select bank1
  9047  0A04  0853               	movf	_Tx_Length^(0+128),w
  9048  0A05  0020               	movlb	0	; select bank0
  9049  0A06  0225               	subwf	CC2500_TxData@loop_e,w
  9050  0A07  1803               	btfsc	3,0
  9051  0A08  2A1B               	goto	l231
  9052                           
  9053                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9054  0A09  0825               	movf	CC2500_TxData@loop_e,w
  9055  0A0A  3E20               	addlw	_RF_Data& (0+255)
  9056  0A0B  0086               	movwf	6
  9057  0A0C  3001               	movlw	1	; select bank2/3
  9058  0A0D  0087               	movwf	7
  9059  0A0E  0801               	movf	1,w
  9060  0A0F  00A4               	movwf	??_CC2500_TxData
  9061  0A10  0824               	movf	??_CC2500_TxData,w
  9062  0A11  00FB               	movwf	_SPI0Buffer
  9063                           
  9064                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9065  0A12  319D  25E8  3189   	fcall	_CC2500_WriteByte
  9066  0A15  3001               	movlw	1
  9067  0A16  0020               	movlb	0	; select bank0
  9068  0A17  00A4               	movwf	??_CC2500_TxData
  9069  0A18  0824               	movf	??_CC2500_TxData,w
  9070  0A19  07A5               	addwf	CC2500_TxData@loop_e,f
  9071  0A1A  2A03               	goto	l6325
  9072  0A1B                     l231:	
  9073                           
  9074                           ;CC2500_B1.c: 48: }
  9075                           ;CC2500_B1.c: 49: RC0 = 1;
  9076  0A1B  140E               	bsf	14,0	;volatile
  9077                           
  9078                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9079  0A1C  3035               	movlw	53
  9080  0A1D  319E  267E  3189   	fcall	_CC2500_WriteCommand
  9081                           
  9082                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9083  0A20  2A24               	goto	l6331
  9084  0A21                     l6329:	
  9085                           
  9086                           ;CC2500_B1.c: 52: Timeout_Counter();
  9087  0A21  319E  2610  3189   	fcall	_Timeout_Counter
  9088  0A24                     l6331:	
  9089  0A24  0020               	movlb	0	; select bank0
  9090  0A25  188E               	btfsc	14,1	;volatile
  9091  0A26  2A2A               	goto	l6335
  9092  0A27  0021               	movlb	1	; select bank1
  9093  0A28  1D2B               	btfss	(_myMain^(0+128)+11),2
  9094  0A29  2A21               	goto	l6329
  9095  0A2A                     l6335:	
  9096                           
  9097                           ;CC2500_B1.c: 53: };
  9098                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9099  0A2A  319B  23C9  3189   	fcall	_set_TimeoutCleared
  9100                           
  9101                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9102  0A2D  2A31               	goto	l6339
  9103  0A2E                     l6337:	
  9104                           
  9105                           ;CC2500_B1.c: 57: Timeout_Counter();
  9106  0A2E  319E  2610  3189   	fcall	_Timeout_Counter
  9107  0A31                     l6339:	
  9108  0A31  0020               	movlb	0	; select bank0
  9109  0A32  1C8E               	btfss	14,1	;volatile
  9110  0A33  2A37               	goto	l6343
  9111  0A34  0021               	movlb	1	; select bank1
  9112  0A35  1D2B               	btfss	(_myMain^(0+128)+11),2
  9113  0A36  2A2E               	goto	l6337
  9114  0A37                     l6343:	
  9115                           
  9116                           ;CC2500_B1.c: 58: };
  9117                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9118  0A37  319B  23C9  3189   	fcall	_set_TimeoutCleared
  9119                           
  9120                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9121  0A3A  3036               	movlw	54
  9122  0A3B  319E  267E  3189   	fcall	_CC2500_WriteCommand
  9123                           
  9124                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9125  0A3E  303B               	movlw	59
  9126  0A3F  319E  267E         	fcall	_CC2500_WriteCommand
  9127                           
  9128                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9129  0A41  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9130  0A42  0008               	return
  9131  0A43                     __end_of_CC2500_TxData:	
  9132                           
  9133                           	psect	text41
  9134  0B73                     __ptext41:	
  9135 ;; *************** function _CC2500_RxData *****************
  9136 ;; Defined at:
  9137 ;;		line 70 in file "../src/CC2500_B1.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;Total ram usage:        2 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    7
  9158 ;; This function calls:
  9159 ;;		_CC2500_ReadByte
  9160 ;;		_CC2500_ReadStatus
  9161 ;;		_CC2500_WriteByte
  9162 ;;		_Timeout_Counter
  9163 ;;		_set_TimeoutCleared
  9164 ;; This function is called by:
  9165 ;;		_setRF_Main
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _CC2500_RxData
  9171  0B73                     _CC2500_RxData:	
  9172                           
  9173                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9174                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9178  0B73  0020               	movlb	0	; select bank0
  9179  0B74  188E               	btfsc	14,1	;volatile
  9180  0B75  2B7A               	goto	l6357
  9181  0B76  2B83               	goto	l6363
  9182  0B77                     l6355:	
  9183                           ;CC2500_B1.c: 76: {
  9184                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9185                           
  9186                           
  9187                           ;CC2500_B1.c: 78: Timeout_Counter();
  9188  0B77  319E  2610  318B   	fcall	_Timeout_Counter
  9189  0B7A                     l6357:	
  9190  0B7A  0020               	movlb	0	; select bank0
  9191  0B7B  1C8E               	btfss	14,1	;volatile
  9192  0B7C  2B80               	goto	l6361
  9193  0B7D  0021               	movlb	1	; select bank1
  9194  0B7E  1D2B               	btfss	(_myMain^(0+128)+11),2
  9195  0B7F  2B77               	goto	l6355
  9196  0B80                     l6361:	
  9197                           
  9198                           ;CC2500_B1.c: 79: };
  9199                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9200  0B80  319B  23C9  318B   	fcall	_set_TimeoutCleared
  9201  0B83                     l6363:	
  9202                           
  9203                           ;CC2500_B1.c: 81: }
  9204                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9205  0B83  303B               	movlw	59
  9206  0B84  319F  2797  318B   	fcall	_CC2500_ReadStatus
  9207                           
  9208                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9209  0B87  0021               	movlb	1	; select bank1
  9210  0B88  0856               	movf	_s_data^(0+128),w
  9211  0B89  1903               	btfsc	3,2
  9212  0B8A  0008               	return
  9213                           
  9214                           ;CC2500_B1.c: 86: RC0 = 0;
  9215  0B8B  0020               	movlb	0	; select bank0
  9216  0B8C  100E               	bcf	14,0	;volatile
  9217                           
  9218                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9219  0B8D  30FF               	movlw	255
  9220  0B8E  00A4               	movwf	??_CC2500_RxData
  9221  0B8F  0824               	movf	??_CC2500_RxData,w
  9222  0B90  00FB               	movwf	_SPI0Buffer
  9223                           
  9224                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9225  0B91  2B95               	goto	l6373
  9226  0B92                     l6371:	
  9227                           
  9228                           ;CC2500_B1.c: 89: Timeout_Counter();
  9229  0B92  319E  2610  318B   	fcall	_Timeout_Counter
  9230  0B95                     l6373:	
  9231  0B95  0020               	movlb	0	; select bank0
  9232  0B96  1E8E               	btfss	14,5	;volatile
  9233  0B97  2B9B               	goto	l6377
  9234  0B98  0021               	movlb	1	; select bank1
  9235  0B99  1D2B               	btfss	(_myMain^(0+128)+11),2
  9236  0B9A  2B92               	goto	l6371
  9237  0B9B                     l6377:	
  9238                           
  9239                           ;CC2500_B1.c: 90: };
  9240                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9241  0B9B  319B  23C9  318B   	fcall	_set_TimeoutCleared
  9242                           
  9243                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9244  0B9E  319D  25E8  318B   	fcall	_CC2500_WriteByte
  9245                           
  9246                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9247  0BA1  319E  264F  318B   	fcall	_CC2500_ReadByte
  9248                           
  9249                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9250  0BA4  087B               	movf	_SPI0Buffer,w
  9251  0BA5  0020               	movlb	0	; select bank0
  9252  0BA6  00A4               	movwf	??_CC2500_RxData
  9253  0BA7  0824               	movf	??_CC2500_RxData,w
  9254  0BA8  0021               	movlb	1	; select bank1
  9255  0BA9  00D1               	movwf	_Rx_Length^(0+128)
  9256                           
  9257                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9258  0BAA  0020               	movlb	0	; select bank0
  9259  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9260  0BAC                     l6393:	
  9261  0BAC  0021               	movlb	1	; select bank1
  9262  0BAD  0851               	movf	_Rx_Length^(0+128),w
  9263  0BAE  0020               	movlb	0	; select bank0
  9264  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9265  0BB0  1803               	btfsc	3,0
  9266  0BB1  2BC4               	goto	l6395
  9267                           
  9268                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9269  0BB2  319E  264F  318B   	fcall	_CC2500_ReadByte
  9270                           
  9271                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9272  0BB5  087B               	movf	_SPI0Buffer,w
  9273  0BB6  0020               	movlb	0	; select bank0
  9274  0BB7  00A4               	movwf	??_CC2500_RxData
  9275  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9276  0BB9  3E20               	addlw	_RF_Data& (0+255)
  9277  0BBA  0086               	movwf	6
  9278  0BBB  3001               	movlw	1	; select bank2/3
  9279  0BBC  0087               	movwf	7
  9280  0BBD  0824               	movf	??_CC2500_RxData,w
  9281  0BBE  0081               	movwf	1
  9282  0BBF  3001               	movlw	1
  9283  0BC0  00A4               	movwf	??_CC2500_RxData
  9284  0BC1  0824               	movf	??_CC2500_RxData,w
  9285  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9286  0BC3  2BAC               	goto	l6393
  9287  0BC4                     l6395:	
  9288                           
  9289                           ;CC2500_B1.c: 99: }
  9290                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9291  0BC4  319E  264F  318B   	fcall	_CC2500_ReadByte
  9292                           
  9293                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9294  0BC7  087B               	movf	_SPI0Buffer,w
  9295  0BC8  0020               	movlb	0	; select bank0
  9296  0BC9  00A4               	movwf	??_CC2500_RxData
  9297  0BCA  0824               	movf	??_CC2500_RxData,w
  9298  0BCB  0021               	movlb	1	; select bank1
  9299  0BCC  00D0               	movwf	_RSSI^(0+128)
  9300                           
  9301                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9302  0BCD  319E  264F         	fcall	_CC2500_ReadByte
  9303                           
  9304                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9305  0BCF  087B               	movf	_SPI0Buffer,w
  9306  0BD0  0020               	movlb	0	; select bank0
  9307  0BD1  00A4               	movwf	??_CC2500_RxData
  9308  0BD2  0824               	movf	??_CC2500_RxData,w
  9309  0BD3  0021               	movlb	1	; select bank1
  9310  0BD4  00CD               	movwf	_CRC^(0+128)
  9311                           
  9312                           ;CC2500_B1.c: 104: RC0 = 1;
  9313  0BD5  0020               	movlb	0	; select bank0
  9314  0BD6  140E               	bsf	14,0	;volatile
  9315                           
  9316                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9317  0BD7  0021               	movlb	1	; select bank1
  9318  0BD8  1BCD               	btfsc	_CRC^(0+128),7
  9319                           
  9320                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9321  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9322                           
  9323                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9324  0BDA  11BA               	bcf	_RF1^(0+128),3
  9325                           
  9326                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9327  0BDB  14BA               	bsf	_RF1^(0+128),1
  9328  0BDC  0008               	return
  9329  0BDD                     __end_of_CC2500_RxData:	
  9330                           
  9331                           	psect	text42
  9332  1F97                     __ptext42:	
  9333 ;; *************** function _CC2500_ReadStatus *****************
  9334 ;; Defined at:
  9335 ;;		line 301 in file "../src/CC2500_B1.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;  status_addr     1    wreg     unsigned char 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        2 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    6
  9356 ;; This function calls:
  9357 ;;		_CC2500_ReadByte
  9358 ;;		_CC2500_WriteByte
  9359 ;;		_Timeout_Counter
  9360 ;;		_set_TimeoutCleared
  9361 ;; This function is called by:
  9362 ;;		_CC2500_RxData
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _CC2500_ReadStatus
  9368  1F97                     _CC2500_ReadStatus:	
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9372                           ;CC2500_ReadStatus@status_addr stored from wreg
  9373  1F97  0020               	movlb	0	; select bank0
  9374  1F98  00A3               	movwf	CC2500_ReadStatus@status_addr
  9375                           
  9376                           ;CC2500_B1.c: 302: RC0 = 0;
  9377  1F99  100E               	bcf	14,0	;volatile
  9378                           
  9379                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9380  1F9A  0823               	movf	CC2500_ReadStatus@status_addr,w
  9381  1F9B  3EC0               	addlw	192
  9382  1F9C  00A2               	movwf	??_CC2500_ReadStatus
  9383  1F9D  0822               	movf	??_CC2500_ReadStatus,w
  9384  1F9E  00FB               	movwf	_SPI0Buffer
  9385                           
  9386                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9387  1F9F  2FA3               	goto	l6171
  9388  1FA0                     l6169:	
  9389                           
  9390                           ;CC2500_B1.c: 306: Timeout_Counter();
  9391  1FA0  319E  2610  319F   	fcall	_Timeout_Counter
  9392  1FA3                     l6171:	
  9393  1FA3  0020               	movlb	0	; select bank0
  9394  1FA4  1E8E               	btfss	14,5	;volatile
  9395  1FA5  2FA9               	goto	l6175
  9396  1FA6  0021               	movlb	1	; select bank1
  9397  1FA7  1D2B               	btfss	(_myMain^(0+128)+11),2
  9398  1FA8  2FA0               	goto	l6169
  9399  1FA9                     l6175:	
  9400                           
  9401                           ;CC2500_B1.c: 307: };
  9402                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9403  1FA9  319B  23C9  319F   	fcall	_set_TimeoutCleared
  9404                           
  9405                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9406  1FAC  319D  25E8  319F   	fcall	_CC2500_WriteByte
  9407                           
  9408                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9409  1FAF  319E  264F         	fcall	_CC2500_ReadByte
  9410                           
  9411                           ;CC2500_B1.c: 312: RC0 = 1;
  9412  1FB1  0020               	movlb	0	; select bank0
  9413  1FB2  140E               	bsf	14,0	;volatile
  9414                           
  9415                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9416  1FB3  087B               	movf	_SPI0Buffer,w
  9417  1FB4  00A2               	movwf	??_CC2500_ReadStatus
  9418  1FB5  0822               	movf	??_CC2500_ReadStatus,w
  9419  1FB6  0021               	movlb	1	; select bank1
  9420  1FB7  00D6               	movwf	_s_data^(0+128)
  9421  1FB8  0008               	return
  9422  1FB9                     __end_of_CC2500_ReadStatus:	
  9423                           
  9424                           	psect	text43
  9425  1E4F                     __ptext43:	
  9426 ;; *************** function _CC2500_ReadByte *****************
  9427 ;; Defined at:
  9428 ;;		line 235 in file "../src/CC2500_B1.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;		None
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;		None               void
  9435 ;; Registers used:
  9436 ;;		wreg, status,2, status,0
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;Total ram usage:        2 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    5
  9449 ;; This function calls:
  9450 ;;		Nothing
  9451 ;; This function is called by:
  9452 ;;		_CC2500_RxData
  9453 ;;		_CC2500_ReadStatus
  9454 ;;		_CC2500_ReadREG
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _CC2500_ReadByte
  9460  1E4F                     _CC2500_ReadByte:	
  9461                           
  9462                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9463                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9464                           
  9465                           ;incstack = 0
  9466                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9467  1E4F  0020               	movlb	0	; select bank0
  9468  1E50  01A1               	clrf	CC2500_ReadByte@loop_b
  9469  1E51                     L5:	
  9470  1E51  3008               	movlw	8
  9471  1E52  0221               	subwf	CC2500_ReadByte@loop_b,w
  9472  1E53  1803               	btfsc	3,0
  9473  1E54  0008               	return
  9474                           
  9475                           ;CC2500_B1.c: 238: RC3 = 1;
  9476  1E55  158E               	bsf	14,3	;volatile
  9477                           
  9478                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9479  1E56  1003               	clrc
  9480  1E57  0DFB               	rlf	_SPI0Buffer,f
  9481                           
  9482                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9483  1E58  1E8E               	btfss	14,5	;volatile
  9484  1E59  2E5C               	goto	l6075
  9485                           
  9486                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9487  1E5A  147B               	bsf	_SPI0Buffer,0
  9488  1E5B  2E60               	goto	l6077
  9489  1E5C                     l6075:	
  9490                           
  9491                           ;CC2500_B1.c: 242: else
  9492                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9493  1E5C  30FE               	movlw	254
  9494  1E5D  00A0               	movwf	??_CC2500_ReadByte
  9495  1E5E  0820               	movf	??_CC2500_ReadByte,w
  9496  1E5F  05FB               	andwf	_SPI0Buffer,f
  9497  1E60                     l6077:	
  9498                           
  9499                           ;CC2500_B1.c: 244: RC3 = 0;
  9500  1E60  118E               	bcf	14,3	;volatile
  9501  1E61  3001               	movlw	1
  9502  1E62  00A0               	movwf	??_CC2500_ReadByte
  9503  1E63  0820               	movf	??_CC2500_ReadByte,w
  9504  1E64  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9505  1E65  2E51               	goto	L5
  9506  1E66                     __end_of_CC2500_ReadByte:	
  9507                           
  9508                           	psect	text44
  9509  1B99                     __ptext44:	
  9510 ;; *************** function _RF_Initialization *****************
  9511 ;; Defined at:
  9512 ;;		line 9 in file "../src/RF_Control_B1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg, status,2, status,0, pclath, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    6
  9533 ;; This function calls:
  9534 ;;		_setRF_Initialization
  9535 ;; This function is called by:
  9536 ;;		_main
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function _RF_Initialization
  9542  1B99                     _RF_Initialization:	
  9543                           
  9544                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9545                           
  9546                           ;incstack = 0
  9547                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9548  1B99  319C  2462         	fcall	_setRF_Initialization
  9549  1B9B  0008               	return
  9550  1B9C                     __end_of_RF_Initialization:	
  9551                           
  9552                           	psect	text45
  9553  1C62                     __ptext45:	
  9554 ;; *************** function _setRF_Initialization *****************
  9555 ;; Defined at:
  9556 ;;		line 43 in file "../src/RF_Control_B1.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;		None
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;		None
  9561 ;; Return value:  Size  Location     Type
  9562 ;;		None               void
  9563 ;; Registers used:
  9564 ;;		wreg
  9565 ;; Tracked objects:
  9566 ;;		On entry : 0/0
  9567 ;;		On exit  : 0/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;Total ram usage:        1 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:    5
  9577 ;; This function calls:
  9578 ;;		Nothing
  9579 ;; This function is called by:
  9580 ;;		_RF_Initialization
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           
  9585                           ;psect for function _setRF_Initialization
  9586  1C62                     _setRF_Initialization:	
  9587                           
  9588                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9589                           
  9590                           ;incstack = 0
  9591                           ; Regs used in _setRF_Initialization: [wreg]
  9592  1C62  3015               	movlw	21
  9593  1C63  0020               	movlb	0	; select bank0
  9594  1C64  00A0               	movwf	??_setRF_Initialization
  9595  1C65  0820               	movf	??_setRF_Initialization,w
  9596  1C66  0021               	movlb	1	; select bank1
  9597  1C67  00D3               	movwf	_Tx_Length^(0+128)
  9598                           
  9599                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9600  1C68  300A               	movlw	10
  9601  1C69  00C1               	movwf	(_RF1^(0+128)+7)
  9602  1C6A  3000               	movlw	0
  9603  1C6B  00C2               	movwf	(_RF1^(0+128)+8)
  9604  1C6C  0008               	return
  9605  1C6D                     __end_of_setRF_Initialization:	
  9606                           
  9607                           	psect	text46
  9608  1D9E                     __ptext46:	
  9609 ;; *************** function _Mcu_Initialization *****************
  9610 ;; Defined at:
  9611 ;;		line 30 in file "../src/MCU_B1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;		None               void
  9618 ;; Registers used:
  9619 ;;		wreg, status,2, status,0, pclath, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    6
  9632 ;; This function calls:
  9633 ;;		_ADC_Set
  9634 ;;		_Fosc_Set
  9635 ;;		_IOC_Set
  9636 ;;		_IO_Set
  9637 ;;		_TMR1_Set
  9638 ;;		_WDT_Set
  9639 ;; This function is called by:
  9640 ;;		_main
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function _Mcu_Initialization
  9646  1D9E                     _Mcu_Initialization:	
  9647                           
  9648                           ;MCU_B1.c: 32: Fosc_Set();
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9652  1D9E  319B  23C5  319D   	fcall	_Fosc_Set
  9653                           
  9654                           ;MCU_B1.c: 34: IO_Set();
  9655  1DA1  319E  2666  319D   	fcall	_IO_Set
  9656                           
  9657                           ;MCU_B1.c: 36: ;;
  9658                           ;MCU_B1.c: 38: TMR1_Set();
  9659  1DA4  319C  24B4  319D   	fcall	_TMR1_Set
  9660                           
  9661                           ;MCU_B1.c: 40: ADC_Set();
  9662  1DA7  319B  23E5  319D   	fcall	_ADC_Set
  9663                           
  9664                           ;MCU_B1.c: 42: ;;
  9665                           ;MCU_B1.c: 44: ;;
  9666                           ;MCU_B1.c: 46: IOC_Set();
  9667  1DAA  319C  24A8  319D   	fcall	_IOC_Set
  9668                           
  9669                           ;MCU_B1.c: 48: ;;
  9670                           ;MCU_B1.c: 50: ;;
  9671                           ;MCU_B1.c: 52: WDT_Set();
  9672  1DAD  319C  2457         	fcall	_WDT_Set
  9673  1DAF  0008               	return
  9674  1DB0                     __end_of_Mcu_Initialization:	
  9675                           
  9676                           	psect	text47
  9677  1C57                     __ptext47:	
  9678 ;; *************** function _WDT_Set *****************
  9679 ;; Defined at:
  9680 ;;		line 1042 in file "../src/MCU_B1.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;		None
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;		None               void
  9687 ;; Registers used:
  9688 ;;		wreg
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;Total ram usage:        1 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    5
  9701 ;; This function calls:
  9702 ;;		Nothing
  9703 ;; This function is called by:
  9704 ;;		_Mcu_Initialization
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           
  9709                           ;psect for function _WDT_Set
  9710  1C57                     _WDT_Set:	
  9711                           
  9712                           ;MCU_B1.c: 1049: WDTCON = 0b00010111;;
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in _WDT_Set: [wreg]
  9716  1C57  3017               	movlw	23
  9717  1C58  0021               	movlb	1	; select bank1
  9718  1C59  0097               	movwf	23	;volatile
  9719                           
  9720                           ;MCU_B1.c: 1051: WDT.Enable = 1;
  9721  1C5A  144B               	bsf	_WDT^(0+128),0
  9722                           
  9723                           ;MCU_B1.c: 1052: WDT.Timer = 10;
  9724  1C5B  300A               	movlw	10
  9725  1C5C  0020               	movlb	0	; select bank0
  9726  1C5D  00A0               	movwf	??_WDT_Set
  9727  1C5E  0820               	movf	??_WDT_Set,w
  9728  1C5F  0021               	movlb	1	; select bank1
  9729  1C60  00CC               	movwf	(_WDT^(0+128)+1)
  9730  1C61  0008               	return
  9731  1C62                     __end_of_WDT_Set:	
  9732                           
  9733                           	psect	text48
  9734  1CB4                     __ptext48:	
  9735 ;; *************** function _TMR1_Set *****************
  9736 ;; Defined at:
  9737 ;;		line 199 in file "../src/MCU_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;		None
  9742 ;; Return value:  Size  Location     Type
  9743 ;;		None               void
  9744 ;; Registers used:
  9745 ;;		wreg
  9746 ;; Tracked objects:
  9747 ;;		On entry : 0/0
  9748 ;;		On exit  : 0/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;Total ram usage:        0 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    5
  9758 ;; This function calls:
  9759 ;;		Nothing
  9760 ;; This function is called by:
  9761 ;;		_Mcu_Initialization
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           
  9766                           ;psect for function _TMR1_Set
  9767  1CB4                     _TMR1_Set:	
  9768                           
  9769                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _TMR1_Set: [wreg]
  9773  1CB4  3041               	movlw	65
  9774  1CB5  0020               	movlb	0	; select bank0
  9775  1CB6  0098               	movwf	24	;volatile
  9776                           
  9777                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9778  1CB7  30FA               	movlw	250
  9779  1CB8  0097               	movwf	23	;volatile
  9780                           
  9781                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9782  1CB9  3038               	movlw	56
  9783  1CBA  0096               	movwf	22	;volatile
  9784                           
  9785                           ;MCU_B1.c: 203: TMR1IE = 1;
  9786  1CBB  0021               	movlb	1	; select bank1
  9787  1CBC  1411               	bsf	17,0	;volatile
  9788                           
  9789                           ;MCU_B1.c: 204: PEIE = 1;
  9790  1CBD  170B               	bsf	11,6	;volatile
  9791                           
  9792                           ;MCU_B1.c: 205: GIE = 1;
  9793  1CBE  178B               	bsf	11,7	;volatile
  9794  1CBF  0008               	return
  9795  1CC0                     __end_of_TMR1_Set:	
  9796                           
  9797                           	psect	text49
  9798  1E66                     __ptext49:	
  9799 ;; *************** function _IO_Set *****************
  9800 ;; Defined at:
  9801 ;;		line 60 in file "../src/MCU_B1.c"
  9802 ;; Parameters:    Size  Location     Type
  9803 ;;		None
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;		None
  9806 ;; Return value:  Size  Location     Type
  9807 ;;		None               void
  9808 ;; Registers used:
  9809 ;;		wreg, status,2
  9810 ;; Tracked objects:
  9811 ;;		On entry : 0/0
  9812 ;;		On exit  : 0/0
  9813 ;;		Unchanged: 0/0
  9814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;Total ram usage:        0 bytes
  9820 ;; Hardware stack levels used:    1
  9821 ;; Hardware stack levels required when called:    5
  9822 ;; This function calls:
  9823 ;;		Nothing
  9824 ;; This function is called by:
  9825 ;;		_Mcu_Initialization
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           
  9830                           ;psect for function _IO_Set
  9831  1E66                     _IO_Set:	
  9832                           
  9833                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9834                           
  9835                           ;incstack = 0
  9836                           ; Regs used in _IO_Set: [wreg+status,2]
  9837  1E66  30F7               	movlw	247
  9838  1E67  0021               	movlb	1	; select bank1
  9839  1E68  008C               	movwf	12	;volatile
  9840                           
  9841                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9842  1E69  3004               	movlw	4
  9843  1E6A  008D               	movwf	13	;volatile
  9844                           
  9845                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9846  1E6B  3026               	movlw	38
  9847  1E6C  008E               	movwf	14	;volatile
  9848                           
  9849                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9850  1E6D  0022               	movlb	2	; select bank2
  9851  1E6E  018C               	clrf	12	;volatile
  9852                           
  9853                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9854  1E6F  018D               	clrf	13	;volatile
  9855                           
  9856                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9857  1E70  018E               	clrf	14	;volatile
  9858                           
  9859                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9860  1E71  300E               	movlw	14
  9861  1E72  0023               	movlb	3	; select bank3
  9862  1E73  008C               	movwf	12	;volatile
  9863                           
  9864                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9865  1E74  018D               	clrf	13	;volatile
  9866                           
  9867                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9868  1E75  018E               	clrf	14	;volatile
  9869                           
  9870                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9871  1E76  30F7               	movlw	247
  9872  1E77  0020               	movlb	0	; select bank0
  9873  1E78  008C               	movwf	12	;volatile
  9874                           
  9875                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9876  1E79  3004               	movlw	4
  9877  1E7A  008D               	movwf	13	;volatile
  9878                           
  9879                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9880  1E7B  3026               	movlw	38
  9881  1E7C  008E               	movwf	14	;volatile
  9882  1E7D  0008               	return
  9883  1E7E                     __end_of_IO_Set:	
  9884                           
  9885                           	psect	text50
  9886  1CA8                     __ptext50:	
  9887 ;; *************** function _IOC_Set *****************
  9888 ;; Defined at:
  9889 ;;		line 365 in file "../src/MCU_B1.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;		None
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;		None
  9894 ;; Return value:  Size  Location     Type
  9895 ;;		None               void
  9896 ;; Registers used:
  9897 ;;		wreg, status,2
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;Total ram usage:        0 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    5
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_Mcu_Initialization
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function _IOC_Set
  9919  1CA8                     _IOC_Set:	
  9920                           
  9921                           ;MCU_B1.c: 366: WPUB2 = 0;
  9922                           
  9923                           ;incstack = 0
  9924                           ; Regs used in _IOC_Set: [wreg+status,2]
  9925  1CA8  0024               	movlb	4	; select bank4
  9926  1CA9  110D               	bcf	13,2	;volatile
  9927                           
  9928                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9929  1CAA  0027               	movlb	7	; select bank7
  9930  1CAB  0194               	clrf	20	;volatile
  9931                           
  9932                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9933  1CAC  3004               	movlw	4
  9934  1CAD  0095               	movwf	21	;volatile
  9935                           
  9936                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9937  1CAE  0196               	clrf	22	;volatile
  9938                           
  9939                           ;MCU_B1.c: 393: IOCIE = 1;
  9940  1CAF  158B               	bsf	11,3	;volatile
  9941                           
  9942                           ;MCU_B1.c: 394: IOCIF = 0;
  9943  1CB0  100B               	bcf	11,0	;volatile
  9944                           
  9945                           ;MCU_B1.c: 395: PEIE = 1;
  9946  1CB1  170B               	bsf	11,6	;volatile
  9947                           
  9948                           ;MCU_B1.c: 396: GIE = 1;
  9949  1CB2  178B               	bsf	11,7	;volatile
  9950  1CB3  0008               	return
  9951  1CB4                     __end_of_IOC_Set:	
  9952                           
  9953                           	psect	text51
  9954  1BC5                     __ptext51:	
  9955 ;; *************** function _Fosc_Set *****************
  9956 ;; Defined at:
  9957 ;;		line 56 in file "../src/MCU_B1.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;		None               void
  9964 ;; Registers used:
  9965 ;;		wreg
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        0 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    5
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_Mcu_Initialization
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985                           
  9986                           ;psect for function _Fosc_Set
  9987  1BC5                     _Fosc_Set:	
  9988                           
  9989                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9990                           
  9991                           ;incstack = 0
  9992                           ; Regs used in _Fosc_Set: [wreg]
  9993  1BC5  3078               	movlw	120
  9994  1BC6  0021               	movlb	1	; select bank1
  9995  1BC7  0099               	movwf	25	;volatile
  9996  1BC8  0008               	return
  9997  1BC9                     __end_of_Fosc_Set:	
  9998                           
  9999                           	psect	text52
 10000  1BE5                     __ptext52:	
 10001 ;; *************** function _ADC_Set *****************
 10002 ;; Defined at:
 10003 ;;		line 420 in file "../src/MCU_B1.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;		None               void
 10010 ;; Registers used:
 10011 ;;		wreg
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    5
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_Mcu_Initialization
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _ADC_Set
 10033  1BE5                     _ADC_Set:	
 10034                           
 10035                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _ADC_Set: [wreg]
 10039  1BE5  30F3               	movlw	243
 10040  1BE6  0021               	movlb	1	; select bank1
 10041  1BE7  009E               	movwf	30	;volatile
 10042                           
 10043                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10044  1BE8  30C1               	movlw	193
 10045  1BE9  0022               	movlb	2	; select bank2
 10046  1BEA  0097               	movwf	23	;volatile
 10047  1BEB  0008               	return
 10048  1BEC                     __end_of_ADC_Set:	
 10049                           
 10050                           	psect	text53
 10051  0043                     __ptext53:	
 10052 ;; *************** function _Load_Main *****************
 10053 ;; Defined at:
 10054 ;;		line 39 in file "../src/OverLoad_B1.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;		None
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;  i               1   15[BANK0 ] unsigned char 
 10059 ;;  error           1   14[BANK0 ] unsigned char 
 10060 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10061 ;;  j               1   11[BANK0 ] unsigned char 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;		None               void
 10064 ;; Registers used:
 10065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;Total ram usage:        7 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:    8
 10078 ;; This function calls:
 10079 ;;		___lwdiv
 10080 ;;		_getAll_DimmerLights_AdjGO
 10081 ;;		_getMain_All_Error_Status
 10082 ;;		_getMain_LightsStatus
 10083 ;;		_getMain_Lights_Count
 10084 ;;		_getMain_LoadOK
 10085 ;;		_setLoad_AH_AL_Restore
 10086 ;; This function is called by:
 10087 ;;		_main
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           
 10092                           ;psect for function _Load_Main
 10093  0043                     _Load_Main:	
 10094                           
 10095                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10096                           
 10097                           ;incstack = 0
 10098                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10099  0043  0020               	movlb	0	; select bank0
 10100  0044  01AF               	clrf	Load_Main@i
 10101  0045  01AB               	clrf	Load_Main@j
 10102  0046  3000               	movlw	0
 10103  0047  3191  21DF  3180   	fcall	_getMain_All_Error_Status
 10104  004A  0020               	movlb	0	; select bank0
 10105  004B  00A9               	movwf	??_Load_Main
 10106  004C  0829               	movf	??_Load_Main,w
 10107  004D  00AE               	movwf	Load_Main@error
 10108  004E  01AC               	clrf	Load_Main@adjgo
 10109                           
 10110                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10111  004F  0022               	movlb	2	; select bank2
 10112  0050  1C41               	btfss	_Load^(0+256),0
 10113  0051  29BA               	goto	l1541
 10114                           
 10115                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10116  0052  319C  2421  3180   	fcall	_getAll_DimmerLights_AdjGO
 10117  0055  0020               	movlb	0	; select bank0
 10118  0056  00A9               	movwf	??_Load_Main
 10119  0057  0829               	movf	??_Load_Main,w
 10120  0058  00AC               	movwf	Load_Main@adjgo
 10121                           
 10122                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10123  0059  01AD               	clrf	_Load_Main$3638
 10124  005A  3191  2123  3180   	fcall	_getMain_LightsStatus
 10125  005D  3A01               	xorlw	1
 10126  005E  1D03               	skipz
 10127  005F  2869               	goto	l7729
 10128  0060  0020               	movlb	0	; select bank0
 10129  0061  08AE               	movf	Load_Main@error,f
 10130  0062  1D03               	skipz
 10131  0063  2869               	goto	l7729
 10132  0064  08AC               	movf	Load_Main@adjgo,f
 10133  0065  1D03               	skipz
 10134  0066  2869               	goto	l7729
 10135  0067  01AD               	clrf	_Load_Main$3638
 10136  0068  0AAD               	incf	_Load_Main$3638,f
 10137  0069                     l7729:	
 10138  0069  0020               	movlb	0	; select bank0
 10139  006A  082D               	movf	_Load_Main$3638,w
 10140  006B  0022               	movlb	2	; select bank2
 10141  006C  10C1               	bcf	_Load^(0+256),1
 10142  006D  1D03               	skipz
 10143  006E  14C1               	bsf	_Load^(0+256),1
 10144                           
 10145                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10146  006F  319C  24CD  3180   	fcall	_getMain_LoadOK
 10147  0072  3A01               	xorlw	1
 10148  0073  1D03               	skipz
 10149  0074  287A               	goto	l1544
 10150  0075  0022               	movlb	2	; select bank2
 10151  0076  19C1               	btfsc	_Load^(0+256),3
 10152  0077  287A               	goto	l1544
 10153                           
 10154                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10155  0078  15C1               	bsf	_Load^(0+256),3
 10156                           
 10157                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10158  0079  13C1               	bcf	_Load^(0+256),7
 10159  007A                     l1544:	
 10160                           
 10161                           ;OverLoad_B1.c: 51: }
 10162                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10163  007A  0022               	movlb	2	; select bank2
 10164  007B  1CC1               	btfss	_Load^(0+256),1
 10165  007C  298A               	goto	l1545
 10166                           
 10167                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10168  007D  1541               	bsf	_Load^(0+256),2
 10169                           
 10170                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10171  007E  1E41               	btfss	_Load^(0+256),4
 10172  007F  2988               	goto	l1546
 10173                           
 10174                           ;OverLoad_B1.c: 58: Load.Time++;
 10175  0080  3001               	movlw	1
 10176  0081  07C2               	addwf	(_Load^(0+256)+1),f
 10177  0082  3000               	movlw	0
 10178  0083  3DC3               	addwfc	((_Load+1)^(0+256)+1),f
 10179                           
 10180                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10181  0084  3000               	movlw	0
 10182  0085  0243               	subwf	((_Load+1)^(0+256)+1),w
 10183  0086  3005               	movlw	5
 10184  0087  1903               	skipnz
 10185  0088  0242               	subwf	(_Load^(0+256)+1),w
 10186  0089  1C03               	skipc
 10187  008A  0008               	return
 10188                           
 10189                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10190  008B  01C2               	clrf	(_Load^(0+256)+1)
 10191  008C  01C3               	clrf	((_Load+1)^(0+256)+1)
 10192                           
 10193                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10194  008D  1241               	bcf	_Load^(0+256),4
 10195                           
 10196                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10197  008E  0020               	movlb	0	; select bank0
 10198  008F  01AF               	clrf	Load_Main@i
 10199  0090  0AAF               	incf	Load_Main@i,f
 10200  0091  3004               	movlw	4
 10201  0092  022F               	subwf	Load_Main@i,w
 10202  0093  1803               	btfsc	3,0
 10203  0094  28BF               	goto	l7757
 10204  0095                     l7751:	
 10205                           
 10206                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10207  0095  352F               	lslf	Load_Main@i,w
 10208  0096  3E4C               	addlw	(_Load+11)& (0+255)
 10209  0097  0086               	movwf	6
 10210  0098  3001               	movlw	1	; select bank2/3
 10211  0099  0087               	movwf	7
 10212  009A  3F40               	moviw [0]fsr1
 10213  009B  00A9               	movwf	??_Load_Main
 10214  009C  3F41               	moviw [1]fsr1
 10215  009D  00AA               	movwf	??_Load_Main+1
 10216  009E  0829               	movf	??_Load_Main,w
 10217  009F  0022               	movlb	2	; select bank2
 10218  00A0  07C6               	addwf	(_Load^(0+256)+5),f
 10219  00A1  0020               	movlb	0	; select bank0
 10220  00A2  082A               	movf	??_Load_Main+1,w
 10221  00A3  0022               	movlb	2	; select bank2
 10222  00A4  3DC7               	addwfc	((_Load+1)^(0+256)+5),f
 10223                           
 10224                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10225  00A5  0020               	movlb	0	; select bank0
 10226  00A6  352F               	lslf	Load_Main@i,w
 10227  00A7  3E56               	addlw	(_Load+21)& (0+255)
 10228  00A8  0086               	movwf	6
 10229  00A9  3001               	movlw	1	; select bank2/3
 10230  00AA  0087               	movwf	7
 10231  00AB  3F40               	moviw [0]fsr1
 10232  00AC  00A9               	movwf	??_Load_Main
 10233  00AD  3F41               	moviw [1]fsr1
 10234  00AE  00AA               	movwf	??_Load_Main+1
 10235  00AF  0829               	movf	??_Load_Main,w
 10236  00B0  0022               	movlb	2	; select bank2
 10237  00B1  07C8               	addwf	(_Load^(0+256)+7),f
 10238  00B2  0020               	movlb	0	; select bank0
 10239  00B3  082A               	movf	??_Load_Main+1,w
 10240  00B4  0022               	movlb	2	; select bank2
 10241  00B5  3DC9               	addwfc	((_Load+1)^(0+256)+7),f
 10242  00B6  3001               	movlw	1
 10243  00B7  0020               	movlb	0	; select bank0
 10244  00B8  00A9               	movwf	??_Load_Main
 10245  00B9  0829               	movf	??_Load_Main,w
 10246  00BA  07AF               	addwf	Load_Main@i,f
 10247  00BB  3004               	movlw	4
 10248  00BC  022F               	subwf	Load_Main@i,w
 10249  00BD  1C03               	skipc
 10250  00BE  2895               	goto	l7751
 10251  00BF                     l7757:	
 10252                           
 10253                           ;OverLoad_B1.c: 66: }
 10254                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10255  00BF  3003               	movlw	3
 10256  00C0  00A0               	movwf	___lwdiv@divisor
 10257  00C1  3000               	movlw	0
 10258  00C2  00A1               	movwf	___lwdiv@divisor+1
 10259  00C3  0022               	movlb	2	; select bank2
 10260  00C4  0847               	movf	((_Load+1)^(0+256)+5),w
 10261  00C5  0020               	movlb	0	; select bank0
 10262  00C6  01A3               	clrf	___lwdiv@dividend+1
 10263  00C7  07A3               	addwf	___lwdiv@dividend+1,f
 10264  00C8  0022               	movlb	2	; select bank2
 10265  00C9  0846               	movf	(_Load^(0+256)+5),w
 10266  00CA  0020               	movlb	0	; select bank0
 10267  00CB  01A2               	clrf	___lwdiv@dividend
 10268  00CC  07A2               	addwf	___lwdiv@dividend,f
 10269  00CD  3193  231C  3180   	fcall	___lwdiv
 10270  00D0  0020               	movlb	0	; select bank0
 10271  00D1  0821               	movf	?___lwdiv+1,w
 10272  00D2  0022               	movlb	2	; select bank2
 10273  00D3  01C7               	clrf	((_Load+1)^(0+256)+5)
 10274  00D4  07C7               	addwf	((_Load+1)^(0+256)+5),f
 10275  00D5  0020               	movlb	0	; select bank0
 10276  00D6  0820               	movf	?___lwdiv,w
 10277  00D7  0022               	movlb	2	; select bank2
 10278  00D8  01C6               	clrf	(_Load^(0+256)+5)
 10279  00D9  07C6               	addwf	(_Load^(0+256)+5),f
 10280                           
 10281                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10282  00DA  3003               	movlw	3
 10283  00DB  0020               	movlb	0	; select bank0
 10284  00DC  00A0               	movwf	___lwdiv@divisor
 10285  00DD  3000               	movlw	0
 10286  00DE  00A1               	movwf	___lwdiv@divisor+1
 10287  00DF  0022               	movlb	2	; select bank2
 10288  00E0  0849               	movf	((_Load+1)^(0+256)+7),w
 10289  00E1  0020               	movlb	0	; select bank0
 10290  00E2  01A3               	clrf	___lwdiv@dividend+1
 10291  00E3  07A3               	addwf	___lwdiv@dividend+1,f
 10292  00E4  0022               	movlb	2	; select bank2
 10293  00E5  0848               	movf	(_Load^(0+256)+7),w
 10294  00E6  0020               	movlb	0	; select bank0
 10295  00E7  01A2               	clrf	___lwdiv@dividend
 10296  00E8  07A2               	addwf	___lwdiv@dividend,f
 10297  00E9  3193  231C  3180   	fcall	___lwdiv
 10298  00EC  0020               	movlb	0	; select bank0
 10299  00ED  0821               	movf	?___lwdiv+1,w
 10300  00EE  0022               	movlb	2	; select bank2
 10301  00EF  01C9               	clrf	((_Load+1)^(0+256)+7)
 10302  00F0  07C9               	addwf	((_Load+1)^(0+256)+7),f
 10303  00F1  0020               	movlb	0	; select bank0
 10304  00F2  0820               	movf	?___lwdiv,w
 10305  00F3  0022               	movlb	2	; select bank2
 10306  00F4  01C8               	clrf	(_Load^(0+256)+7)
 10307  00F5  07C8               	addwf	(_Load^(0+256)+7),f
 10308                           
 10309                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10310  00F6  3190  2066  3180   	fcall	_setLoad_AH_AL_Restore
 10311                           
 10312                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10313  00F9  0022               	movlb	2	; select bank2
 10314  00FA  0847               	movf	((_Load+1)^(0+256)+5),w
 10315  00FB  0249               	subwf	((_Load+1)^(0+256)+7),w
 10316  00FC  1D03               	skipz
 10317  00FD  2900               	goto	u7805
 10318  00FE  0846               	movf	(_Load^(0+256)+5),w
 10319  00FF  0248               	subwf	(_Load^(0+256)+7),w
 10320  0100                     u7805:	
 10321  0100  1803               	skipnc
 10322  0101  0008               	return
 10323                           
 10324                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10325  0102  3005               	movlw	5
 10326  0103  3E41               	addlw	_Load& (0+255)
 10327  0104  0086               	movwf	6
 10328  0105  3001               	movlw	1	; select bank2/3
 10329  0106  0087               	movwf	7
 10330  0107  0948               	comf	(_Load^(0+256)+7),w
 10331  0108  0020               	movlb	0	; select bank0
 10332  0109  00A9               	movwf	??_Load_Main
 10333  010A  0022               	movlb	2	; select bank2
 10334  010B  0949               	comf	((_Load+1)^(0+256)+7),w
 10335  010C  0020               	movlb	0	; select bank0
 10336  010D  00AA               	movwf	??_Load_Main+1
 10337  010E  0AA9               	incf	??_Load_Main,f
 10338  010F  1903               	skipnz
 10339  0110  0AAA               	incf	??_Load_Main+1,f
 10340  0111  3F40               	moviw [0]fsr1
 10341  0112  0729               	addwf	??_Load_Main,w
 10342  0113  0022               	movlb	2	; select bank2
 10343  0114  00E0               	movwf	(_Load^(0+256)+31)
 10344  0115  3F41               	moviw [1]fsr1
 10345  0116  0020               	movlb	0	; select bank0
 10346  0117  3D2A               	addwfc	??_Load_Main+1,w
 10347  0118  0022               	movlb	2	; select bank2
 10348  0119  00E1               	movwf	(_Load^(0+256)+32)
 10349                           
 10350                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10351  011A  01C6               	clrf	(_Load^(0+256)+5)
 10352  011B  01C7               	clrf	((_Load+1)^(0+256)+5)
 10353                           
 10354                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10355  011C  01C8               	clrf	(_Load^(0+256)+7)
 10356  011D  01C9               	clrf	((_Load+1)^(0+256)+7)
 10357                           
 10358                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10359  011E  319D  2528  3180   	fcall	_getMain_Lights_Count
 10360  0121  0020               	movlb	0	; select bank0
 10361  0122  00A9               	movwf	??_Load_Main
 10362  0123  0829               	movf	??_Load_Main,w
 10363  0124  0022               	movlb	2	; select bank2
 10364  0125  00ED               	movwf	(_Load^(0+256)+44)
 10365                           
 10366                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10367  0126  1DC1               	btfss	_Load^(0+256),3
 10368  0127  2953               	goto	l7789
 10369                           
 10370                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10371  0128  3002               	movlw	2
 10372  0129  026A               	subwf	(_Load^(0+256)+41),w
 10373  012A  1803               	skipnc
 10374  012B  2953               	goto	l7789
 10375                           
 10376                           ;OverLoad_B1.c: 79: Load.Count++;
 10377  012C  3001               	movlw	1
 10378  012D  0020               	movlb	0	; select bank0
 10379  012E  00A9               	movwf	??_Load_Main
 10380  012F  0829               	movf	??_Load_Main,w
 10381  0130  0022               	movlb	2	; select bank2
 10382  0131  07EA               	addwf	(_Load^(0+256)+41),f
 10383                           
 10384                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10385  0132  086A               	movf	(_Load^(0+256)+41),w
 10386  0133  3A01               	xorlw	1
 10387  0134  1D03               	skipz
 10388  0135  2940               	goto	l7781
 10389                           
 10390                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10391  0136  3002               	movlw	2
 10392  0137  0020               	movlb	0	; select bank0
 10393  0138  00A9               	movwf	??_Load_Main
 10394  0139  0829               	movf	??_Load_Main,w
 10395  013A  0022               	movlb	2	; select bank2
 10396  013B  00EC               	movwf	(_Load^(0+256)+43)
 10397                           
 10398                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*57);
 10399  013C  3074               	movlw	116
 10400  013D  00E6               	movwf	(_Load^(0+256)+37)
 10401  013E  3004               	movlw	4
 10402  013F  294B               	goto	L6
 10403  0140                     l7781:	
 10404                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10405                           
 10406  0140  086A               	movf	(_Load^(0+256)+41),w
 10407  0141  3A02               	xorlw	2
 10408  0142  1D03               	skipz
 10409  0143  2953               	goto	l7789
 10410                           
 10411                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10412  0144  086D               	movf	(_Load^(0+256)+44),w
 10413  0145  3A01               	xorlw	1
 10414  0146  1D03               	skipz
 10415  0147  294D               	goto	l7787
 10416                           
 10417                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(2.5*57);
 10418  0148  308E               	movlw	142
 10419  0149  00E6               	movwf	(_Load^(0+256)+37)
 10420  014A  3000               	movlw	0
 10421  014B                     L6:	
 10422  014B  00E7               	movwf	(_Load^(0+256)+38)
 10423                           
 10424                           ;OverLoad_B1.c: 86: } else {
 10425  014C  2953               	goto	l7789
 10426  014D                     l7787:	
 10427                           
 10428                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
 10429  014D  084A               	movf	(_Load^(0+256)+9),w
 10430  014E  3E8E               	addlw	142
 10431  014F  00E6               	movwf	(_Load^(0+256)+37)
 10432  0150  3000               	movlw	0
 10433  0151  3D4B               	addwfc	((_Load+1)^(0+256)+9),w
 10434  0152  00E7               	movwf	((_Load+1)^(0+256)+37)
 10435  0153                     l7789:	
 10436                           
 10437                           ;OverLoad_B1.c: 88: }
 10438                           ;OverLoad_B1.c: 89: }
 10439                           ;OverLoad_B1.c: 90: }
 10440                           ;OverLoad_B1.c: 91: }
 10441                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10442  0153  0867               	movf	((_Load+1)^(0+256)+37),w
 10443  0154  0261               	subwf	((_Load+1)^(0+256)+31),w
 10444  0155  1D03               	skipz
 10445  0156  2959               	goto	u7865
 10446  0157  0866               	movf	(_Load^(0+256)+37),w
 10447  0158  0260               	subwf	(_Load^(0+256)+31),w
 10448  0159                     u7865:	
 10449  0159  1C03               	skipc
 10450  015A  2968               	goto	l7799
 10451                           
 10452                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10453  015B  3001               	movlw	1
 10454  015C  0020               	movlb	0	; select bank0
 10455  015D  00A9               	movwf	??_Load_Main
 10456  015E  0829               	movf	??_Load_Main,w
 10457  015F  0022               	movlb	2	; select bank2
 10458  0160  07EB               	addwf	(_Load^(0+256)+42),f
 10459                           
 10460                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10461  0161  086B               	movf	(_Load^(0+256)+42),w
 10462  0162  026C               	subwf	(_Load^(0+256)+43),w
 10463  0163  1803               	skipnc
 10464  0164  0008               	return
 10465                           
 10466                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10467  0165  01EB               	clrf	(_Load^(0+256)+42)
 10468                           
 10469                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10470  0166  16C1               	bsf	_Load^(0+256),5
 10471                           
 10472                           ;OverLoad_B1.c: 118: }
 10473                           ;OverLoad_B1.c: 119: } else {
 10474  0167  0008               	return
 10475  0168                     l7799:	
 10476                           
 10477                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10478  0168  01EB               	clrf	(_Load^(0+256)+42)
 10479                           
 10480                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10481  0169  1DC1               	btfss	_Load^(0+256),3
 10482  016A  0008               	return
 10483                           
 10484                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10485  016B  1BC1               	btfsc	_Load^(0+256),7
 10486  016C  0008               	return
 10487                           
 10488                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10489  016D  3001               	movlw	1
 10490  016E  0020               	movlb	0	; select bank0
 10491  016F  00A9               	movwf	??_Load_Main
 10492  0170  0829               	movf	??_Load_Main,w
 10493  0171  0022               	movlb	2	; select bank2
 10494  0172  07EE               	addwf	(_Load^(0+256)+45),f
 10495                           
 10496                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10497  0173  3003               	movlw	3
 10498  0174  026E               	subwf	(_Load^(0+256)+45),w
 10499  0175  1C03               	skipc
 10500  0176  0008               	return
 10501                           
 10502                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10503  0177  01EE               	clrf	(_Load^(0+256)+45)
 10504                           
 10505                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10506  0178  17C1               	bsf	_Load^(0+256),7
 10507                           
 10508                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10509  0179  11C1               	bcf	_Load^(0+256),3
 10510                           
 10511                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10512  017A  01EA               	clrf	(_Load^(0+256)+41)
 10513                           
 10514                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10515  017B  0861               	movf	((_Load+1)^(0+256)+31),w
 10516  017C  01CB               	clrf	((_Load+1)^(0+256)+9)
 10517  017D  07CB               	addwf	((_Load+1)^(0+256)+9),f
 10518  017E  0860               	movf	(_Load^(0+256)+31),w
 10519  017F  01CA               	clrf	(_Load^(0+256)+9)
 10520  0180  07CA               	addwf	(_Load^(0+256)+9),f
 10521                           
 10522                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10523  0181  3003               	movlw	3
 10524  0182  0020               	movlb	0	; select bank0
 10525  0183  00A9               	movwf	??_Load_Main
 10526  0184  0829               	movf	??_Load_Main,w
 10527  0185  0022               	movlb	2	; select bank2
 10528  0186  00EC               	movwf	(_Load^(0+256)+43)
 10529                           
 10530                           ;OverLoad_B1.c: 154: }
 10531                           ;OverLoad_B1.c: 155: }
 10532                           ;OverLoad_B1.c: 156: }
 10533                           ;OverLoad_B1.c: 157: }
 10534                           ;OverLoad_B1.c: 158: }
 10535                           ;OverLoad_B1.c: 159: }
 10536                           ;OverLoad_B1.c: 160: } else {
 10537  0187  0008               	return
 10538  0188                     l1546:	
 10539                           
 10540                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10541  0188  1641               	bsf	_Load^(0+256),4
 10542                           
 10543                           ;OverLoad_B1.c: 162: }
 10544                           ;OverLoad_B1.c: 163: } else {
 10545  0189  0008               	return
 10546  018A                     l1545:	
 10547                           
 10548                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10549  018A  1D41               	btfss	_Load^(0+256),2
 10550  018B  29A8               	goto	l7849
 10551  018C  0020               	movlb	0	; select bank0
 10552  018D  082E               	movf	Load_Main@error,w
 10553  018E  3A03               	xorlw	3
 10554  018F  1903               	skipnz
 10555  0190  29A8               	goto	l7849
 10556                           
 10557                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10558  0191  0022               	movlb	2	; select bank2
 10559  0192  1141               	bcf	_Load^(0+256),2
 10560                           
 10561                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10562  0193  01C2               	clrf	(_Load^(0+256)+1)
 10563  0194  01C3               	clrf	((_Load+1)^(0+256)+1)
 10564                           
 10565                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10566  0195  1241               	bcf	_Load^(0+256),4
 10567                           
 10568                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10569  0196  3190  2066  3180   	fcall	_setLoad_AH_AL_Restore
 10570                           
 10571                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10572  0199  0022               	movlb	2	; select bank2
 10573  019A  01EA               	clrf	(_Load^(0+256)+41)
 10574                           
 10575                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10576  019B  01EB               	clrf	(_Load^(0+256)+42)
 10577                           
 10578                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10579  019C  01EE               	clrf	(_Load^(0+256)+45)
 10580                           
 10581                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10582  019D  01C6               	clrf	(_Load^(0+256)+5)
 10583  019E  01C7               	clrf	((_Load+1)^(0+256)+5)
 10584                           
 10585                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10586  019F  01C8               	clrf	(_Load^(0+256)+7)
 10587  01A0  01C9               	clrf	((_Load+1)^(0+256)+7)
 10588                           
 10589                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10590  01A1  01E0               	clrf	(_Load^(0+256)+31)
 10591  01A2  01E1               	clrf	((_Load+1)^(0+256)+31)
 10592                           
 10593                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10594  01A3  01E6               	clrf	(_Load^(0+256)+37)
 10595  01A4  01E7               	clrf	((_Load+1)^(0+256)+37)
 10596                           
 10597                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10598  01A5  01ED               	clrf	(_Load^(0+256)+44)
 10599                           
 10600                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10601  01A6  11C1               	bcf	_Load^(0+256),3
 10602                           
 10603                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10604  01A7  17C1               	bsf	_Load^(0+256),7
 10605  01A8                     l7849:	
 10606                           
 10607                           ;OverLoad_B1.c: 201: }
 10608                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10609  01A8  0022               	movlb	2	; select bank2
 10610  01A9  1EC1               	btfss	_Load^(0+256),5
 10611  01AA  0008               	return
 10612                           
 10613                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10614  01AB  3001               	movlw	1
 10615  01AC  07C4               	addwf	(_Load^(0+256)+3),f
 10616  01AD  3000               	movlw	0
 10617  01AE  3DC5               	addwfc	((_Load+1)^(0+256)+3),f
 10618                           
 10619                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10620  01AF  3003               	movlw	3
 10621  01B0  0245               	subwf	((_Load+1)^(0+256)+3),w
 10622  01B1  30E8               	movlw	232
 10623  01B2  1903               	skipnz
 10624  01B3  0244               	subwf	(_Load^(0+256)+3),w
 10625  01B4  1C03               	skipc
 10626  01B5  0008               	return
 10627                           
 10628                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10629  01B6  01C4               	clrf	(_Load^(0+256)+3)
 10630  01B7  01C5               	clrf	((_Load+1)^(0+256)+3)
 10631                           
 10632                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10633  01B8  12C1               	bcf	_Load^(0+256),5
 10634                           
 10635                           ;OverLoad_B1.c: 207: }
 10636                           ;OverLoad_B1.c: 208: }
 10637                           ;OverLoad_B1.c: 209: }
 10638                           ;OverLoad_B1.c: 210: } else {
 10639  01B9  0008               	return
 10640  01BA                     l1541:	
 10641                           
 10642                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10643  01BA  0021               	movlb	1	; select bank1
 10644  01BB  1C20               	btfss	_myMain^(0+128),0
 10645  01BC  0008               	return
 10646                           
 10647                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10648  01BD  0022               	movlb	2	; select bank2
 10649  01BE  1441               	bsf	_Load^(0+256),0
 10650  01BF  0008               	return
 10651  01C0                     __end_of_Load_Main:	
 10652                           
 10653                           	psect	text54
 10654  1CCD                     __ptext54:	
 10655 ;; *************** function _getMain_LoadOK *****************
 10656 ;; Defined at:
 10657 ;;		line 442 in file "../src/Main_B1.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;		None
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;  ok              1    2[BANK0 ] unsigned char 
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      unsigned char 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, pclath, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;Total ram usage:        2 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    6
 10678 ;; This function calls:
 10679 ;;		_getDimmer_LoadOK
 10680 ;; This function is called by:
 10681 ;;		_Load_Main
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           
 10686                           ;psect for function _getMain_LoadOK
 10687  1CCD                     _getMain_LoadOK:	
 10688                           
 10689                           ;Main_B1.c: 443: char ok = 0;
 10690                           
 10691                           ;incstack = 0
 10692                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10693  1CCD  0020               	movlb	0	; select bank0
 10694  1CCE  01A2               	clrf	getMain_LoadOK@ok
 10695                           
 10696                           ;Main_B1.c: 449: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10697  1CCF  319B  23F4         	fcall	_getDimmer_LoadOK
 10698  1CD1  3A01               	xorlw	1
 10699  1CD2  3000               	movlw	0
 10700  1CD3  1903               	skipnz
 10701  1CD4  3001               	movlw	1
 10702  1CD5  0020               	movlb	0	; select bank0
 10703  1CD6  00A1               	movwf	??_getMain_LoadOK
 10704  1CD7  0821               	movf	??_getMain_LoadOK,w
 10705  1CD8  00A2               	movwf	getMain_LoadOK@ok
 10706                           
 10707                           ;Main_B1.c: 451: return ok;
 10708  1CD9  0822               	movf	getMain_LoadOK@ok,w
 10709  1CDA  0008               	return
 10710  1CDB                     __end_of_getMain_LoadOK:	
 10711                           
 10712                           	psect	text55
 10713  1BF4                     __ptext55:	
 10714 ;; *************** function _getDimmer_LoadOK *****************
 10715 ;; Defined at:
 10716 ;;		line 599 in file "../src/Dimmer_B1.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;  status          1    0[BANK0 ] unsigned char 
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      unsigned char 
 10723 ;; Registers used:
 10724 ;;		wreg, status,2
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;Total ram usage:        1 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; Hardware stack levels required when called:    5
 10737 ;; This function calls:
 10738 ;;		Nothing
 10739 ;; This function is called by:
 10740 ;;		_getMain_LoadOK
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           
 10745                           ;psect for function _getDimmer_LoadOK
 10746  1BF4                     _getDimmer_LoadOK:	
 10747                           
 10748                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10749                           
 10750                           ;incstack = 0
 10751                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10752  1BF4  3000               	movlw	0
 10753  1BF5  0022               	movlb	2	; select bank2
 10754  1BF6  18BE               	btfsc	_Dimmer^(0+256),1
 10755  1BF7  3001               	movlw	1
 10756  1BF8  0020               	movlb	0	; select bank0
 10757  1BF9  00A0               	movwf	getDimmer_LoadOK@status
 10758                           
 10759                           ;Dimmer_B1.c: 601: return status;
 10760  1BFA  0820               	movf	getDimmer_LoadOK@status,w
 10761  1BFB  0008               	return
 10762  1BFC                     __end_of_getDimmer_LoadOK:	
 10763                           
 10764                           	psect	text56
 10765  1D28                     __ptext56:	
 10766 ;; *************** function _getMain_Lights_Count *****************
 10767 ;; Defined at:
 10768 ;;		line 412 in file "../src/Main_B1.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;		None
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;  status1         1    3[BANK0 ] unsigned char 
 10773 ;;  status3         1    2[BANK0 ] unsigned char 
 10774 ;;  status2         1    1[BANK0 ] unsigned char 
 10775 ;;  count           1    0[BANK0 ] unsigned char 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      unsigned char 
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;Total ram usage:        4 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:    5
 10792 ;; This function calls:
 10793 ;;		Nothing
 10794 ;; This function is called by:
 10795 ;;		_Load_Main
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function _getMain_Lights_Count
 10801  1D28                     _getMain_Lights_Count:	
 10802                           
 10803                           ;Main_B1.c: 413: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10804                           
 10805                           ;incstack = 0
 10806                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10807  1D28  0020               	movlb	0	; select bank0
 10808  1D29  01A3               	clrf	getMain_Lights_Count@status1
 10809  1D2A  01A1               	clrf	getMain_Lights_Count@status2
 10810  1D2B  01A2               	clrf	getMain_Lights_Count@status3
 10811  1D2C  01A0               	clrf	getMain_Lights_Count@count
 10812                           
 10813                           ;Main_B1.c: 417: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10814  1D2D  3000               	movlw	0
 10815  1D2E  0023               	movlb	3	; select bank3
 10816  1D2F  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10817  1D30  3001               	movlw	1
 10818  1D31  0020               	movlb	0	; select bank0
 10819  1D32  00A3               	movwf	getMain_Lights_Count@status1
 10820                           
 10821                           ;Main_B1.c: 438: return count = (status1 + status2 + status3);
 10822  1D33  0823               	movf	getMain_Lights_Count@status1,w
 10823  1D34  0721               	addwf	getMain_Lights_Count@status2,w
 10824  1D35  0722               	addwf	getMain_Lights_Count@status3,w
 10825  1D36  00A0               	movwf	getMain_Lights_Count@count
 10826  1D37  0008               	return
 10827  1D38                     __end_of_getMain_Lights_Count:	
 10828                           
 10829                           	psect	text57
 10830  1C21                     __ptext57:	
 10831 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10832 ;; Defined at:
 10833 ;;		line 490 in file "../src/Dimmer_B1.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;		None
 10836 ;; Auto vars:     Size  Location     Type
 10837 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  1    wreg      unsigned char 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;Total ram usage:        1 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    5
 10854 ;; This function calls:
 10855 ;;		Nothing
 10856 ;; This function is called by:
 10857 ;;		_setDimmerLights_SwOn
 10858 ;;		_setDimmerLights_AdjControl
 10859 ;;		_Load_Main
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           
 10864                           ;psect for function _getAll_DimmerLights_AdjGO
 10865  1C21                     _getAll_DimmerLights_AdjGO:	
 10866                           
 10867                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10871  1C21  0020               	movlb	0	; select bank0
 10872  1C22  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10873                           
 10874                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10875  1C23  3000               	movlw	0
 10876  1C24  0023               	movlb	3	; select bank3
 10877  1C25  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10878  1C26  3001               	movlw	1
 10879  1C27  0020               	movlb	0	; select bank0
 10880  1C28  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10881                           
 10882                           ;Dimmer_B1.c: 501: return adjgo;
 10883  1C29  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10884  1C2A  0008               	return
 10885  1C2B                     __end_of_getAll_DimmerLights_AdjGO:	
 10886                           
 10887                           	psect	text58
 10888  131C                     __ptext58:	
 10889 ;; *************** function ___lwdiv *****************
 10890 ;; Defined at:
 10891 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  divisor         2    0[BANK0 ] unsigned int 
 10894 ;;  dividend        2    2[BANK0 ] unsigned int 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  quotient        2    5[BANK0 ] unsigned int 
 10897 ;;  counter         1    7[BANK0 ] unsigned char 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  2    0[BANK0 ] unsigned int 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2, status,0
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10907 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;Total ram usage:        8 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    5
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_Load_Main
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function ___lwdiv
 10923  131C                     ___lwdiv:	
 10924                           
 10925                           ;incstack = 0
 10926                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10927  131C  0020               	movlb	0	; select bank0
 10928  131D  01A5               	clrf	___lwdiv@quotient
 10929  131E  01A6               	clrf	___lwdiv@quotient+1
 10930  131F  0821               	movf	___lwdiv@divisor+1,w
 10931  1320  0420               	iorwf	___lwdiv@divisor,w
 10932  1321  1903               	skipnz
 10933  1322  2B4C               	goto	l7417
 10934  1323  01A7               	clrf	___lwdiv@counter
 10935  1324  0AA7               	incf	___lwdiv@counter,f
 10936  1325                     l7405:	
 10937  1325  1BA1               	btfsc	___lwdiv@divisor+1,7
 10938  1326  2B31               	goto	l7407
 10939  1327  3001               	movlw	1
 10940  1328                     u7175:	
 10941  1328  35A0               	lslf	___lwdiv@divisor,f
 10942  1329  0DA1               	rlf	___lwdiv@divisor+1,f
 10943  132A  0B89               	decfsz	9,f
 10944  132B  2B28               	goto	u7175
 10945  132C  3001               	movlw	1
 10946  132D  00A4               	movwf	??___lwdiv
 10947  132E  0824               	movf	??___lwdiv,w
 10948  132F  07A7               	addwf	___lwdiv@counter,f
 10949  1330  2B25               	goto	l7405
 10950  1331                     l7407:	
 10951  1331  3001               	movlw	1
 10952  1332                     u7195:	
 10953  1332  35A5               	lslf	___lwdiv@quotient,f
 10954  1333  0DA6               	rlf	___lwdiv@quotient+1,f
 10955  1334  0B89               	decfsz	9,f
 10956  1335  2B32               	goto	u7195
 10957  1336  0821               	movf	___lwdiv@divisor+1,w
 10958  1337  0223               	subwf	___lwdiv@dividend+1,w
 10959  1338  1D03               	skipz
 10960  1339  2B3C               	goto	u7205
 10961  133A  0820               	movf	___lwdiv@divisor,w
 10962  133B  0222               	subwf	___lwdiv@dividend,w
 10963  133C                     u7205:	
 10964  133C  1C03               	skipc
 10965  133D  2B43               	goto	l7413
 10966  133E  0820               	movf	___lwdiv@divisor,w
 10967  133F  02A2               	subwf	___lwdiv@dividend,f
 10968  1340  0821               	movf	___lwdiv@divisor+1,w
 10969  1341  3BA3               	subwfb	___lwdiv@dividend+1,f
 10970  1342  1425               	bsf	___lwdiv@quotient,0
 10971  1343                     l7413:	
 10972  1343  3001               	movlw	1
 10973  1344                     u7215:	
 10974  1344  36A1               	lsrf	___lwdiv@divisor+1,f
 10975  1345  0CA0               	rrf	___lwdiv@divisor,f
 10976  1346  0B89               	decfsz	9,f
 10977  1347  2B44               	goto	u7215
 10978  1348  3001               	movlw	1
 10979  1349  02A7               	subwf	___lwdiv@counter,f
 10980  134A  1D03               	btfss	3,2
 10981  134B  2B31               	goto	l7407
 10982  134C                     l7417:	
 10983  134C  0826               	movf	___lwdiv@quotient+1,w
 10984  134D  01A1               	clrf	?___lwdiv+1
 10985  134E  07A1               	addwf	?___lwdiv+1,f
 10986  134F  0825               	movf	___lwdiv@quotient,w
 10987  1350  01A0               	clrf	?___lwdiv
 10988  1351  07A0               	addwf	?___lwdiv,f
 10989  1352  0008               	return
 10990  1353                     __end_of___lwdiv:	
 10991                           
 10992                           	psect	text59
 10993  1BCE                     __ptext59:	
 10994 ;; *************** function _Load_Initialization *****************
 10995 ;; Defined at:
 10996 ;;		line 9 in file "../src/OverLoad_B1.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;		None
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;		None
 11001 ;; Return value:  Size  Location     Type
 11002 ;;		None               void
 11003 ;; Registers used:
 11004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;Total ram usage:        0 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    6
 11017 ;; This function calls:
 11018 ;;		_setLoad_AH_AL_Restore
 11019 ;; This function is called by:
 11020 ;;		_main
 11021 ;; This function uses a non-reentrant model
 11022 ;;
 11023                           
 11024                           
 11025                           ;psect for function _Load_Initialization
 11026  1BCE                     _Load_Initialization:	
 11027                           
 11028                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11029                           
 11030                           ;incstack = 0
 11031                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11032  1BCE  0022               	movlb	2	; select bank2
 11033  1BCF  17C1               	bsf	_Load^(0+256),7
 11034                           
 11035                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11036  1BD0  3190  2066         	fcall	_setLoad_AH_AL_Restore
 11037  1BD2  0008               	return
 11038  1BD3                     __end_of_Load_Initialization:	
 11039                           
 11040                           	psect	text60
 11041  1066                     __ptext60:	
 11042 ;; *************** function _setLoad_AH_AL_Restore *****************
 11043 ;; Defined at:
 11044 ;;		line 239 in file "../src/OverLoad_B1.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;		None
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;  i               1    1[BANK0 ] unsigned char 
 11049 ;; Return value:  Size  Location     Type
 11050 ;;		None               void
 11051 ;; Registers used:
 11052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11053 ;; Tracked objects:
 11054 ;;		On entry : 0/0
 11055 ;;		On exit  : 0/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;Total ram usage:        2 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; Hardware stack levels required when called:    5
 11065 ;; This function calls:
 11066 ;;		Nothing
 11067 ;; This function is called by:
 11068 ;;		_Load_Initialization
 11069 ;;		_Load_Main
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           
 11074                           ;psect for function _setLoad_AH_AL_Restore
 11075  1066                     _setLoad_AH_AL_Restore:	
 11076                           
 11077                           ;OverLoad_B1.c: 240: char i;
 11078                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11079                           
 11080                           ;incstack = 0
 11081                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11082  1066  0020               	movlb	0	; select bank0
 11083  1067  01A1               	clrf	setLoad_AH_AL_Restore@i
 11084  1068                     L7:	
 11085  1068  3005               	movlw	5
 11086  1069  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11087  106A  1803               	btfsc	3,0
 11088  106B  0008               	return
 11089                           
 11090                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11091  106C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11092  106D  3E4C               	addlw	(_Load+11)& (0+255)
 11093  106E  0086               	movwf	6
 11094  106F  3001               	movlw	1	; select bank2/3
 11095  1070  0087               	movwf	7
 11096  1071  3000               	movlw	0
 11097  1072  3FC0               	movwi [0]fsr1
 11098  1073  3FC1               	movwi [1]fsr1
 11099                           
 11100                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11101  1074  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11102  1075  3E56               	addlw	(_Load+21)& (0+255)
 11103  1076  0086               	movwf	6
 11104  1077  3001               	movlw	1	; select bank2/3
 11105  1078  0087               	movwf	7
 11106  1079  30FF               	movlw	255
 11107  107A  3FC0               	movwi [0]fsr1
 11108  107B  30FF               	movlw	255
 11109  107C  3FC1               	movwi [1]fsr1
 11110  107D  3001               	movlw	1
 11111  107E  00A0               	movwf	??_setLoad_AH_AL_Restore
 11112  107F  0820               	movf	??_setLoad_AH_AL_Restore,w
 11113  1080  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11114  1081  2868               	goto	L7
 11115  1082                     __end_of_setLoad_AH_AL_Restore:	
 11116                           
 11117                           	psect	text61
 11118  1BC1                     __ptext61:	
 11119 ;; *************** function _LED_Main *****************
 11120 ;; Defined at:
 11121 ;;		line 47 in file "../src/LED_B1.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;		None               void
 11128 ;; Registers used:
 11129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;Total ram usage:        0 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    7
 11142 ;; This function calls:
 11143 ;;		_setLED_Main
 11144 ;; This function is called by:
 11145 ;;		_main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           
 11150                           ;psect for function _LED_Main
 11151  1BC1                     _LED_Main:	
 11152                           
 11153                           ;LED_B1.c: 62: setLED_Main(99);
 11154                           
 11155                           ;incstack = 0
 11156                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11157  1BC1  3063               	movlw	99
 11158  1BC2  3192  2212         	fcall	_setLED_Main
 11159  1BC4  0008               	return
 11160  1BC5                     __end_of_LED_Main:	
 11161                           
 11162                           	psect	text62
 11163  1212                     __ptext62:	
 11164 ;; *************** function _setLED_Main *****************
 11165 ;; Defined at:
 11166 ;;		line 221 in file "../src/LED_B1.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;  led             1    wreg     unsigned char 
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;  led             1    4[BANK0 ] unsigned char 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;		None               void
 11173 ;; Registers used:
 11174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;Total ram usage:        3 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    6
 11187 ;; This function calls:
 11188 ;;		_LedPointSelect
 11189 ;; This function is called by:
 11190 ;;		_LED_Main
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           
 11195                           ;psect for function _setLED_Main
 11196  1212                     _setLED_Main:	
 11197                           
 11198                           ;incstack = 0
 11199                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11200                           ;setLED_Main@led stored from wreg
 11201  1212  0020               	movlb	0	; select bank0
 11202  1213  00A4               	movwf	setLED_Main@led
 11203                           
 11204                           ;LED_B1.c: 222: LedPointSelect(led);
 11205  1214  0824               	movf	setLED_Main@led,w
 11206  1215  319C  244C  3192   	fcall	_LedPointSelect
 11207                           
 11208                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11209  1218  087A               	movf	_LED,w
 11210  1219  0086               	movwf	6
 11211  121A  3001               	movlw	1	; select bank2/3
 11212  121B  0087               	movwf	7
 11213  121C  1C81               	btfss	1,1
 11214  121D  0008               	return
 11215                           
 11216                           ;LED_B1.c: 224: LED->Time++;
 11217  121E  0A7A               	incf	_LED,w
 11218  121F  0086               	movwf	6
 11219  1220  3001               	movlw	1	; select bank2/3
 11220  1221  0087               	movwf	7
 11221  1222  3001               	movlw	1
 11222  1223  0781               	addwf	1,f
 11223  1224  3141               	addfsr 1,1
 11224  1225  1803               	skipnc
 11225  1226  0A81               	incf	1,f
 11226                           
 11227                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11228  1227  0A7A               	incf	_LED,w
 11229  1228  0086               	movwf	6
 11230  1229  3001               	movlw	1	; select bank2/3
 11231  122A  0087               	movwf	7
 11232  122B  3F40               	moviw [0]fsr1
 11233  122C  0020               	movlb	0	; select bank0
 11234  122D  00A2               	movwf	??_setLED_Main
 11235  122E  3F41               	moviw [1]fsr1
 11236  122F  00A3               	movwf	??_setLED_Main+1
 11237  1230  3000               	movlw	0
 11238  1231  0223               	subwf	??_setLED_Main+1,w
 11239  1232  3032               	movlw	50
 11240  1233  1903               	skipnz
 11241  1234  0222               	subwf	??_setLED_Main,w
 11242  1235  1C03               	skipc
 11243  1236  0008               	return
 11244                           
 11245                           ;LED_B1.c: 226: LED->Time = 0;
 11246  1237  0A7A               	incf	_LED,w
 11247  1238  0086               	movwf	6
 11248  1239  3001               	movlw	1	; select bank2/3
 11249  123A  0087               	movwf	7
 11250  123B  3000               	movlw	0
 11251  123C  3FC0               	movwi [0]fsr1
 11252  123D  3FC1               	movwi [1]fsr1
 11253                           
 11254                           ;LED_B1.c: 243: if (led == 99) {
 11255  123E  0824               	movf	setLED_Main@led,w
 11256  123F  3A63               	xorlw	99
 11257  1240  1D03               	skipz
 11258  1241  0008               	return
 11259                           
 11260                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11261  1242  3020               	movlw	32
 11262  1243  068D               	xorwf	13,f
 11263  1244  0008               	return
 11264  1245                     __end_of_setLED_Main:	
 11265                           
 11266                           	psect	text63
 11267  1BBD                     __ptext63:	
 11268 ;; *************** function _LED_Initialization *****************
 11269 ;; Defined at:
 11270 ;;		line 31 in file "../src/LED_B1.c"
 11271 ;; Parameters:    Size  Location     Type
 11272 ;;		None
 11273 ;; Auto vars:     Size  Location     Type
 11274 ;;		None
 11275 ;; Return value:  Size  Location     Type
 11276 ;;		None               void
 11277 ;; Registers used:
 11278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;Total ram usage:        0 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    8
 11291 ;; This function calls:
 11292 ;;		_setLED_Initialization
 11293 ;; This function is called by:
 11294 ;;		_main
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function _LED_Initialization
 11300  1BBD                     _LED_Initialization:	
 11301                           
 11302                           ;LED_B1.c: 42: setLED_Initialization(99);
 11303                           
 11304                           ;incstack = 0
 11305                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11306  1BBD  3063               	movlw	99
 11307  1BBE  319D  2548         	fcall	_setLED_Initialization
 11308  1BC0  0008               	return
 11309  1BC1                     __end_of_LED_Initialization:	
 11310                           
 11311                           	psect	text64
 11312  1D48                     __ptext64:	
 11313 ;; *************** function _setLED_Initialization *****************
 11314 ;; Defined at:
 11315 ;;		line 69 in file "../src/LED_B1.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;  led             1    wreg     unsigned char 
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  led             1    4[BANK0 ] unsigned char 
 11320 ;; Return value:  Size  Location     Type
 11321 ;;		None               void
 11322 ;; Registers used:
 11323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;Total ram usage:        1 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    7
 11336 ;; This function calls:
 11337 ;;		_LedPointSelect
 11338 ;;		_setLED
 11339 ;; This function is called by:
 11340 ;;		_LED_Initialization
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _setLED_Initialization
 11346  1D48                     _setLED_Initialization:	
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11350                           ;setLED_Initialization@led stored from wreg
 11351  1D48  0020               	movlb	0	; select bank0
 11352  1D49  00A4               	movwf	setLED_Initialization@led
 11353                           
 11354                           ;LED_B1.c: 70: LedPointSelect(led);
 11355  1D4A  0824               	movf	setLED_Initialization@led,w
 11356  1D4B  319C  244C  319D   	fcall	_LedPointSelect
 11357                           
 11358                           ;LED_B1.c: 71: LED->Enable = 1;
 11359  1D4E  087A               	movf	_LED,w
 11360  1D4F  0086               	movwf	6
 11361  1D50  3001               	movlw	1	; select bank2/3
 11362  1D51  0087               	movwf	7
 11363  1D52  1401               	bsf	1,0
 11364                           
 11365                           ;LED_B1.c: 72: setLED(led, 0);
 11366  1D53  0020               	movlb	0	; select bank0
 11367  1D54  01A2               	clrf	setLED@command
 11368  1D55  0824               	movf	setLED_Initialization@led,w
 11369  1D56  3192  227A         	fcall	_setLED
 11370  1D58  0008               	return
 11371  1D59                     __end_of_setLED_Initialization:	
 11372                           
 11373                           	psect	text65
 11374  12B0                     __ptext65:	
 11375 ;; *************** function _Flash_Memory_Main *****************
 11376 ;; Defined at:
 11377 ;;		line 924 in file "../src/MCU_B1.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;		None
 11380 ;; Auto vars:     Size  Location     Type
 11381 ;;		None
 11382 ;; Return value:  Size  Location     Type
 11383 ;;		None               void
 11384 ;; Registers used:
 11385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;Total ram usage:        1 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; Hardware stack levels required when called:    8
 11398 ;; This function calls:
 11399 ;;		_Flash_Memory_Modify
 11400 ;;		_getMain_LightsStatus
 11401 ;; This function is called by:
 11402 ;;		_main
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           
 11407                           ;psect for function _Flash_Memory_Main
 11408  12B0                     _Flash_Memory_Main:	
 11409                           
 11410                           ;MCU_B1.c: 925: if (Memory.Modify == 1) {
 11411                           
 11412                           ;incstack = 0
 11413                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11414  12B0  0023               	movlb	3	; select bank3
 11415  12B1  1C44               	btfss	(_Memory^(0+384)+36),0
 11416  12B2  0008               	return
 11417                           
 11418                           ;MCU_B1.c: 926: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11419  12B3  3191  2123  3192   	fcall	_getMain_LightsStatus
 11420  12B6  3A00               	xorlw	0
 11421  12B7  3000               	movlw	0
 11422  12B8  1903               	skipnz
 11423  12B9  3001               	movlw	1
 11424  12BA  0020               	movlb	0	; select bank0
 11425  12BB  00A9               	movwf	??_Flash_Memory_Main
 11426  12BC  0DA9               	rlf	??_Flash_Memory_Main,f
 11427  12BD  0023               	movlb	3	; select bank3
 11428  12BE  0844               	movf	(_Memory^(0+384)+36),w
 11429  12BF  0020               	movlb	0	; select bank0
 11430  12C0  0629               	xorwf	??_Flash_Memory_Main,w
 11431  12C1  39FD               	andlw	-3
 11432  12C2  0629               	xorwf	??_Flash_Memory_Main,w
 11433  12C3  0023               	movlb	3	; select bank3
 11434  12C4  00C4               	movwf	(_Memory^(0+384)+36)
 11435                           
 11436                           ;MCU_B1.c: 927: if (Memory.GO == 1) {
 11437  12C5  1CC4               	btfss	(_Memory^(0+384)+36),1
 11438  12C6  2AE0               	goto	l1183
 11439                           
 11440                           ;MCU_B1.c: 928: Memory.Runtime = 1;
 11441  12C7  15C4               	bsf	(_Memory^(0+384)+36),3
 11442                           
 11443                           ;MCU_B1.c: 929: Memory.Time++;
 11444  12C8  3001               	movlw	1
 11445  12C9  07C2               	addwf	(_Memory^(0+384)+34),f
 11446  12CA  3000               	movlw	0
 11447  12CB  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11448                           
 11449                           ;MCU_B1.c: 930: if (Memory.Time == 25) {
 11450  12CC  3022               	movlw	34
 11451  12CD  3EA0               	addlw	_Memory& (0+255)
 11452  12CE  0086               	movwf	6
 11453  12CF  3001               	movlw	1	; select bank3/4
 11454  12D0  0087               	movwf	7
 11455  12D1  3F40               	moviw [0]fsr1
 11456  12D2  3A19               	xorlw	25
 11457  12D3  1D03               	skipz
 11458  12D4  2AD7               	goto	u7475
 11459  12D5  3F41               	moviw [1]fsr1
 11460  12D6  3A00               	xorlw	0
 11461  12D7                     u7475:	
 11462  12D7  1D03               	skipz
 11463  12D8  0008               	return
 11464                           
 11465                           ;MCU_B1.c: 931: Memory.Time = 0;
 11466  12D9  01C2               	clrf	(_Memory^(0+384)+34)
 11467  12DA  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11468                           
 11469                           ;MCU_B1.c: 932: Memory.Modify = 0;
 11470  12DB  1044               	bcf	(_Memory^(0+384)+36),0
 11471                           
 11472                           ;MCU_B1.c: 933: Memory.GO = 0;
 11473  12DC  10C4               	bcf	(_Memory^(0+384)+36),1
 11474                           
 11475                           ;MCU_B1.c: 934: Flash_Memory_Modify();
 11476  12DD  3195  2551         	fcall	_Flash_Memory_Modify
 11477                           
 11478                           ;MCU_B1.c: 935: }
 11479                           ;MCU_B1.c: 936: } else {
 11480  12DF  0008               	return
 11481  12E0                     l1183:	
 11482                           
 11483                           ;MCU_B1.c: 937: if (Memory.Runtime == 1) {
 11484  12E0  1DC4               	btfss	(_Memory^(0+384)+36),3
 11485  12E1  0008               	return
 11486                           
 11487                           ;MCU_B1.c: 938: Memory.Runtime = 0;
 11488  12E2  11C4               	bcf	(_Memory^(0+384)+36),3
 11489                           
 11490                           ;MCU_B1.c: 939: Memory.Time = 0;
 11491  12E3  01C2               	clrf	(_Memory^(0+384)+34)
 11492  12E4  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11493  12E5  0008               	return
 11494  12E6                     __end_of_Flash_Memory_Main:	
 11495                           
 11496                           	psect	text66
 11497  1551                     __ptext66:	
 11498 ;; *************** function _Flash_Memory_Modify *****************
 11499 ;; Defined at:
 11500 ;;		line 997 in file "../src/MCU_B1.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;		None
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;  i               1    5[BANK0 ] unsigned char 
 11505 ;; Return value:  Size  Location     Type
 11506 ;;		None               void
 11507 ;; Registers used:
 11508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;Total ram usage:        2 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    7
 11521 ;; This function calls:
 11522 ;;		_Flash_Memory_Erasing
 11523 ;;		_Flash_Memory_Read
 11524 ;;		_Flash_Memory_Write
 11525 ;;		_setMemory_Data
 11526 ;; This function is called by:
 11527 ;;		_Flash_Memory_Main
 11528 ;; This function uses a non-reentrant model
 11529 ;;
 11530                           
 11531                           
 11532                           ;psect for function _Flash_Memory_Modify
 11533  1551                     _Flash_Memory_Modify:	
 11534                           
 11535                           ;MCU_B1.c: 998: char i = 0;
 11536                           
 11537                           ;incstack = 0
 11538                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11539  1551  0020               	movlb	0	; select bank0
 11540  1552  01A5               	clrf	Flash_Memory_Modify@i
 11541                           
 11542                           ;MCU_B1.c: 999: for (i = 0; i < 32; i++) {
 11543  1553  01A5               	clrf	Flash_Memory_Modify@i
 11544  1554  3020               	movlw	32
 11545  1555  0225               	subwf	Flash_Memory_Modify@i,w
 11546  1556  1803               	btfsc	3,0
 11547  1557  2D6D               	goto	l7047
 11548  1558                     l7041:	
 11549                           
 11550                           ;MCU_B1.c: 1000: Memory.Data[i] = Flash_Memory_Read(i);
 11551  1558  0825               	movf	Flash_Memory_Modify@i,w
 11552  1559  3187  27E5  3195   	fcall	_Flash_Memory_Read
 11553  155C  0020               	movlb	0	; select bank0
 11554  155D  00A4               	movwf	??_Flash_Memory_Modify
 11555  155E  0825               	movf	Flash_Memory_Modify@i,w
 11556  155F  3EA0               	addlw	_Memory& (0+255)
 11557  1560  0086               	movwf	6
 11558  1561  3001               	movlw	1	; select bank3/4
 11559  1562  0087               	movwf	7
 11560  1563  0824               	movf	??_Flash_Memory_Modify,w
 11561  1564  0081               	movwf	1
 11562  1565  3001               	movlw	1
 11563  1566  00A4               	movwf	??_Flash_Memory_Modify
 11564  1567  0824               	movf	??_Flash_Memory_Modify,w
 11565  1568  07A5               	addwf	Flash_Memory_Modify@i,f
 11566  1569  3020               	movlw	32
 11567  156A  0225               	subwf	Flash_Memory_Modify@i,w
 11568  156B  1C03               	skipc
 11569  156C  2D58               	goto	l7041
 11570  156D                     l7047:	
 11571                           
 11572                           ;MCU_B1.c: 1001: }
 11573                           ;MCU_B1.c: 1002: setMemory_Data(0, product->Data[12]);
 11574  156D  086E               	movf	_product,w
 11575  156E  0086               	movwf	6
 11576  156F  3002               	movlw	2	; select bank4/5
 11577  1570  0087               	movwf	7
 11578  1571  3002               	movlw	2	; select bank4/5
 11579  1572  3F4C               	moviw [12]fsr1
 11580  1573  00A0               	movwf	setMemory_Data@data
 11581  1574  3000               	movlw	0
 11582  1575  319C  2490  3195   	fcall	_setMemory_Data
 11583                           
 11584                           ;MCU_B1.c: 1003: setMemory_Data(1, product->Data[13]);
 11585  1578  0020               	movlb	0	; select bank0
 11586  1579  086E               	movf	_product,w
 11587  157A  0086               	movwf	6
 11588  157B  3002               	movlw	2	; select bank4/5
 11589  157C  0087               	movwf	7
 11590  157D  3002               	movlw	2	; select bank4/5
 11591  157E  3F4D               	moviw [13]fsr1
 11592  157F  00A0               	movwf	setMemory_Data@data
 11593  1580  3001               	movlw	1
 11594  1581  319C  2490  3195   	fcall	_setMemory_Data
 11595                           
 11596                           ;MCU_B1.c: 1004: setMemory_Data(2, product->Data[14]);
 11597  1584  0020               	movlb	0	; select bank0
 11598  1585  086E               	movf	_product,w
 11599  1586  0086               	movwf	6
 11600  1587  3002               	movlw	2	; select bank4/5
 11601  1588  0087               	movwf	7
 11602  1589  3002               	movlw	2	; select bank4/5
 11603  158A  3F4E               	moviw [14]fsr1
 11604  158B  00A0               	movwf	setMemory_Data@data
 11605  158C  3002               	movlw	2
 11606  158D  319C  2490  3195   	fcall	_setMemory_Data
 11607                           
 11608                           ;MCU_B1.c: 1010: if (Memory.LoopSave == 1) {
 11609  1590  0023               	movlb	3	; select bank3
 11610  1591  1D44               	btfss	(_Memory^(0+384)+36),2
 11611  1592  2D97               	goto	l1206
 11612                           
 11613                           ;MCU_B1.c: 1011: Memory.LoopSave = 0;
 11614  1593  1144               	bcf	(_Memory^(0+384)+36),2
 11615                           
 11616                           ;MCU_B1.c: 1012: myMain.FirstOpen = 0;
 11617  1594  0021               	movlb	1	; select bank1
 11618  1595  11A0               	bcf	_myMain^(0+128),3
 11619                           
 11620                           ;MCU_B1.c: 1013: myMain.First = 0;
 11621  1596  12A0               	bcf	_myMain^(0+128),5
 11622  1597                     l1206:	
 11623                           
 11624                           ;MCU_B1.c: 1015: }
 11625                           ;MCU_B1.c: 1016: GIE = 0;
 11626  1597  138B               	bcf	11,7	;volatile
 11627                           
 11628                           ;MCU_B1.c: 1017: Flash_Memory_Erasing();
 11629  1598  319C  249C  3195   	fcall	_Flash_Memory_Erasing
 11630                           
 11631                           ;MCU_B1.c: 1018: Flash_Memory_Write();
 11632  159B  3191  214E         	fcall	_Flash_Memory_Write
 11633                           
 11634                           ;MCU_B1.c: 1019: GIE = 1;
 11635  159D  178B               	bsf	11,7	;volatile
 11636  159E  0008               	return
 11637  159F                     __end_of_Flash_Memory_Modify:	
 11638                           
 11639                           	psect	text67
 11640  1C9C                     __ptext67:	
 11641 ;; *************** function _Flash_Memory_Erasing *****************
 11642 ;; Defined at:
 11643 ;;		line 986 in file "../src/MCU_B1.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;		None
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;		None
 11648 ;; Return value:  Size  Location     Type
 11649 ;;		None               void
 11650 ;; Registers used:
 11651 ;;		wreg, status,2, status,0, pclath, cstack
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;Total ram usage:        0 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    6
 11664 ;; This function calls:
 11665 ;;		_Flash_Memory_Unlock
 11666 ;; This function is called by:
 11667 ;;		_Flash_Memory_Modify
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _Flash_Memory_Erasing
 11673  1C9C                     _Flash_Memory_Erasing:	
 11674                           
 11675                           ;MCU_B1.c: 987: CFGS = 0;
 11676                           
 11677                           ;incstack = 0
 11678                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11679  1C9C  0023               	movlb	3	; select bank3
 11680  1C9D  1315               	bcf	21,6	;volatile
 11681                           
 11682                           ;MCU_B1.c: 988: PMADRH = 0x30;
 11683  1C9E  3030               	movlw	48
 11684  1C9F  0092               	movwf	18	;volatile
 11685                           
 11686                           ;MCU_B1.c: 989: PMADRL = 0x00;
 11687  1CA0  0191               	clrf	17	;volatile
 11688                           
 11689                           ;MCU_B1.c: 990: FREE = 1;
 11690  1CA1  1615               	bsf	21,4	;volatile
 11691                           
 11692                           ;MCU_B1.c: 991: WREN = 1;
 11693  1CA2  1515               	bsf	21,2	;volatile
 11694                           
 11695                           ;MCU_B1.c: 992: Flash_Memory_Unlock();
 11696  1CA3  319C  2405         	fcall	_Flash_Memory_Unlock
 11697                           
 11698                           ;MCU_B1.c: 993: WREN = 0;
 11699  1CA5  0023               	movlb	3	; select bank3
 11700  1CA6  1115               	bcf	21,2	;volatile
 11701  1CA7  0008               	return
 11702  1CA8                     __end_of_Flash_Memory_Erasing:	
 11703                           
 11704                           	psect	text68
 11705  064A                     __ptext68:	
 11706 ;; *************** function _Flash_Memory_Initialization *****************
 11707 ;; Defined at:
 11708 ;;		line 883 in file "../src/MCU_B1.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;		None
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  i               1   67[BANK0 ] unsigned char 
 11713 ;; Return value:  Size  Location     Type
 11714 ;;		None               void
 11715 ;; Registers used:
 11716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;Total ram usage:        2 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    8
 11729 ;; This function calls:
 11730 ;;		_Flash_Memory_Read
 11731 ;;		_Flash_Memory_Write
 11732 ;;		_setMemory_Data
 11733 ;;		_setPercentValue
 11734 ;; This function is called by:
 11735 ;;		_main
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function _Flash_Memory_Initialization
 11741  064A                     _Flash_Memory_Initialization:	
 11742                           
 11743                           ;MCU_B1.c: 884: char i = 0;
 11744                           
 11745                           ;incstack = 0
 11746                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11747  064A  0020               	movlb	0	; select bank0
 11748  064B  01E3               	clrf	Flash_Memory_Initialization@i
 11749                           
 11750                           ;MCU_B1.c: 885: if (Flash_Memory_Read(31) == 0xaa) {
 11751  064C  301F               	movlw	31
 11752  064D  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11753  0650  3AAA               	xorlw	170
 11754  0651  1D03               	skipz
 11755  0652  2EBC               	goto	l7539
 11756                           
 11757                           ;MCU_B1.c: 886: product->Data[12] = Flash_Memory_Read(0);
 11758  0653  3000               	movlw	0
 11759  0654  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11760  0657  0020               	movlb	0	; select bank0
 11761  0658  00E2               	movwf	??_Flash_Memory_Initialization
 11762  0659  086E               	movf	_product,w
 11763  065A  3E0C               	addlw	12
 11764  065B  0086               	movwf	6
 11765  065C  3002               	movlw	2	; select bank4/5
 11766  065D  0087               	movwf	7
 11767  065E  0862               	movf	??_Flash_Memory_Initialization,w
 11768  065F  0081               	movwf	1
 11769                           
 11770                           ;MCU_B1.c: 887: product->Data[13] = Flash_Memory_Read(1);
 11771  0660  3001               	movlw	1
 11772  0661  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11773  0664  0020               	movlb	0	; select bank0
 11774  0665  00E2               	movwf	??_Flash_Memory_Initialization
 11775  0666  086E               	movf	_product,w
 11776  0667  3E0D               	addlw	13
 11777  0668  0086               	movwf	6
 11778  0669  3002               	movlw	2	; select bank4/5
 11779  066A  0087               	movwf	7
 11780  066B  0862               	movf	??_Flash_Memory_Initialization,w
 11781  066C  0081               	movwf	1
 11782                           
 11783                           ;MCU_B1.c: 888: product->Data[14] = Flash_Memory_Read(2);
 11784  066D  3002               	movlw	2
 11785  066E  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11786  0671  0020               	movlb	0	; select bank0
 11787  0672  00E2               	movwf	??_Flash_Memory_Initialization
 11788  0673  086E               	movf	_product,w
 11789  0674  3E0E               	addlw	14
 11790  0675  0086               	movwf	6
 11791  0676  3002               	movlw	2	; select bank4/5
 11792  0677  0087               	movwf	7
 11793  0678  0862               	movf	??_Flash_Memory_Initialization,w
 11794  0679  0081               	movwf	1
 11795                           
 11796                           ;MCU_B1.c: 894: i = setPercentValue(((char)(85*0.8)));
 11797  067A  3044               	movlw	68
 11798  067B  318A  2243  3186   	fcall	_setPercentValue
 11799  067E  0020               	movlb	0	; select bank0
 11800  067F  00E2               	movwf	??_Flash_Memory_Initialization
 11801  0680  0862               	movf	??_Flash_Memory_Initialization,w
 11802  0681  00E3               	movwf	Flash_Memory_Initialization@i
 11803                           
 11804                           ;MCU_B1.c: 895: product->Data[21] = i;
 11805  0682  0863               	movf	Flash_Memory_Initialization@i,w
 11806  0683  00E2               	movwf	??_Flash_Memory_Initialization
 11807  0684  086E               	movf	_product,w
 11808  0685  3E15               	addlw	21
 11809  0686  0086               	movwf	6
 11810  0687  3002               	movlw	2	; select bank4/5
 11811  0688  0087               	movwf	7
 11812  0689  0862               	movf	??_Flash_Memory_Initialization,w
 11813  068A  0081               	movwf	1
 11814                           
 11815                           ;MCU_B1.c: 896: product->Data[22] = i;
 11816  068B  0863               	movf	Flash_Memory_Initialization@i,w
 11817  068C  00E2               	movwf	??_Flash_Memory_Initialization
 11818  068D  086E               	movf	_product,w
 11819  068E  3E16               	addlw	22
 11820  068F  0086               	movwf	6
 11821  0690  3002               	movlw	2	; select bank4/5
 11822  0691  0087               	movwf	7
 11823  0692  0862               	movf	??_Flash_Memory_Initialization,w
 11824  0693  0081               	movwf	1
 11825                           
 11826                           ;MCU_B1.c: 897: product->Data[23] = i;
 11827  0694  0863               	movf	Flash_Memory_Initialization@i,w
 11828  0695  00E2               	movwf	??_Flash_Memory_Initialization
 11829  0696  086E               	movf	_product,w
 11830  0697  3E17               	addlw	23
 11831  0698  0086               	movwf	6
 11832  0699  3002               	movlw	2	; select bank4/5
 11833  069A  0087               	movwf	7
 11834  069B  0862               	movf	??_Flash_Memory_Initialization,w
 11835  069C  0081               	movwf	1
 11836                           
 11837                           ;MCU_B1.c: 899: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11838  069D  086E               	movf	_product,w
 11839  069E  3E0C               	addlw	12
 11840  069F  0086               	movwf	6
 11841  06A0  3002               	movlw	2	; select bank4/5
 11842  06A1  0087               	movwf	7
 11843  06A2  0801               	movf	1,w
 11844  06A3  3AFF               	xorlw	255
 11845  06A4  1D03               	skipz
 11846  06A5  0008               	return
 11847  06A6  086E               	movf	_product,w
 11848  06A7  3E0D               	addlw	13
 11849  06A8  0086               	movwf	6
 11850  06A9  3002               	movlw	2	; select bank4/5
 11851  06AA  0087               	movwf	7
 11852  06AB  0801               	movf	1,w
 11853  06AC  3AFF               	xorlw	255
 11854  06AD  1D03               	skipz
 11855  06AE  0008               	return
 11856  06AF  086E               	movf	_product,w
 11857  06B0  3E0E               	addlw	14
 11858  06B1  0086               	movwf	6
 11859  06B2  3002               	movlw	2	; select bank4/5
 11860  06B3  0087               	movwf	7
 11861  06B4  0801               	movf	1,w
 11862  06B5  3AFF               	xorlw	255
 11863  06B6  1D03               	skipz
 11864  06B7  0008               	return
 11865                           
 11866                           ;MCU_B1.c: 900: myMain.FirstOpen = 1;
 11867  06B8  0021               	movlb	1	; select bank1
 11868  06B9  15A0               	bsf	_myMain^(0+128),3
 11869                           
 11870                           ;MCU_B1.c: 901: myMain.First = 1;
 11871  06BA  16A0               	bsf	_myMain^(0+128),5
 11872                           
 11873                           ;MCU_B1.c: 902: }
 11874                           ;MCU_B1.c: 903: } else {
 11875  06BB  0008               	return
 11876  06BC                     l7539:	
 11877                           
 11878                           ;MCU_B1.c: 904: i = setPercentValue(((char)(85*0.8)));
 11879  06BC  3044               	movlw	68
 11880  06BD  318A  2243  3186   	fcall	_setPercentValue
 11881  06C0  0020               	movlb	0	; select bank0
 11882  06C1  00E2               	movwf	??_Flash_Memory_Initialization
 11883  06C2  0862               	movf	??_Flash_Memory_Initialization,w
 11884  06C3  00E3               	movwf	Flash_Memory_Initialization@i
 11885                           
 11886                           ;MCU_B1.c: 905: setMemory_Data(0, 0xff);
 11887  06C4  30FF               	movlw	255
 11888  06C5  00E2               	movwf	??_Flash_Memory_Initialization
 11889  06C6  0862               	movf	??_Flash_Memory_Initialization,w
 11890  06C7  00A0               	movwf	setMemory_Data@data
 11891  06C8  3000               	movlw	0
 11892  06C9  319C  2490  3186   	fcall	_setMemory_Data
 11893                           
 11894                           ;MCU_B1.c: 906: setMemory_Data(1, 0xff);
 11895  06CC  30FF               	movlw	255
 11896  06CD  0020               	movlb	0	; select bank0
 11897  06CE  00E2               	movwf	??_Flash_Memory_Initialization
 11898  06CF  0862               	movf	??_Flash_Memory_Initialization,w
 11899  06D0  00A0               	movwf	setMemory_Data@data
 11900  06D1  3001               	movlw	1
 11901  06D2  319C  2490  3186   	fcall	_setMemory_Data
 11902                           
 11903                           ;MCU_B1.c: 907: setMemory_Data(2, 0xff);
 11904  06D5  30FF               	movlw	255
 11905  06D6  0020               	movlb	0	; select bank0
 11906  06D7  00E2               	movwf	??_Flash_Memory_Initialization
 11907  06D8  0862               	movf	??_Flash_Memory_Initialization,w
 11908  06D9  00A0               	movwf	setMemory_Data@data
 11909  06DA  3002               	movlw	2
 11910  06DB  319C  2490  3186   	fcall	_setMemory_Data
 11911                           
 11912                           ;MCU_B1.c: 908: setMemory_Data(3, 0xff);
 11913  06DE  30FF               	movlw	255
 11914  06DF  0020               	movlb	0	; select bank0
 11915  06E0  00E2               	movwf	??_Flash_Memory_Initialization
 11916  06E1  0862               	movf	??_Flash_Memory_Initialization,w
 11917  06E2  00A0               	movwf	setMemory_Data@data
 11918  06E3  3003               	movlw	3
 11919  06E4  319C  2490  3186   	fcall	_setMemory_Data
 11920                           
 11921                           ;MCU_B1.c: 909: setMemory_Data(4, 0xff);
 11922  06E7  30FF               	movlw	255
 11923  06E8  0020               	movlb	0	; select bank0
 11924  06E9  00E2               	movwf	??_Flash_Memory_Initialization
 11925  06EA  0862               	movf	??_Flash_Memory_Initialization,w
 11926  06EB  00A0               	movwf	setMemory_Data@data
 11927  06EC  3004               	movlw	4
 11928  06ED  319C  2490  3186   	fcall	_setMemory_Data
 11929                           
 11930                           ;MCU_B1.c: 910: setMemory_Data(5, 0xff);
 11931  06F0  30FF               	movlw	255
 11932  06F1  0020               	movlb	0	; select bank0
 11933  06F2  00E2               	movwf	??_Flash_Memory_Initialization
 11934  06F3  0862               	movf	??_Flash_Memory_Initialization,w
 11935  06F4  00A0               	movwf	setMemory_Data@data
 11936  06F5  3005               	movlw	5
 11937  06F6  319C  2490  3186   	fcall	_setMemory_Data
 11938                           
 11939                           ;MCU_B1.c: 911: setMemory_Data(31, 0xaa);
 11940  06F9  30AA               	movlw	170
 11941  06FA  0020               	movlb	0	; select bank0
 11942  06FB  00E2               	movwf	??_Flash_Memory_Initialization
 11943  06FC  0862               	movf	??_Flash_Memory_Initialization,w
 11944  06FD  00A0               	movwf	setMemory_Data@data
 11945  06FE  301F               	movlw	31
 11946  06FF  319C  2490  3186   	fcall	_setMemory_Data
 11947                           
 11948                           ;MCU_B1.c: 912: product->Data[21] = i;
 11949  0702  0020               	movlb	0	; select bank0
 11950  0703  0863               	movf	Flash_Memory_Initialization@i,w
 11951  0704  00E2               	movwf	??_Flash_Memory_Initialization
 11952  0705  086E               	movf	_product,w
 11953  0706  3E15               	addlw	21
 11954  0707  0086               	movwf	6
 11955  0708  3002               	movlw	2	; select bank4/5
 11956  0709  0087               	movwf	7
 11957  070A  0862               	movf	??_Flash_Memory_Initialization,w
 11958  070B  0081               	movwf	1
 11959                           
 11960                           ;MCU_B1.c: 913: product->Data[22] = i;
 11961  070C  0863               	movf	Flash_Memory_Initialization@i,w
 11962  070D  00E2               	movwf	??_Flash_Memory_Initialization
 11963  070E  086E               	movf	_product,w
 11964  070F  3E16               	addlw	22
 11965  0710  0086               	movwf	6
 11966  0711  3002               	movlw	2	; select bank4/5
 11967  0712  0087               	movwf	7
 11968  0713  0862               	movf	??_Flash_Memory_Initialization,w
 11969  0714  0081               	movwf	1
 11970                           
 11971                           ;MCU_B1.c: 914: product->Data[23] = i;
 11972  0715  0863               	movf	Flash_Memory_Initialization@i,w
 11973  0716  00E2               	movwf	??_Flash_Memory_Initialization
 11974  0717  086E               	movf	_product,w
 11975  0718  3E17               	addlw	23
 11976  0719  0086               	movwf	6
 11977  071A  3002               	movlw	2	; select bank4/5
 11978  071B  0087               	movwf	7
 11979  071C  0862               	movf	??_Flash_Memory_Initialization,w
 11980  071D  0081               	movwf	1
 11981                           
 11982                           ;MCU_B1.c: 915: GIE = 0;
 11983  071E  138B               	bcf	11,7	;volatile
 11984                           
 11985                           ;MCU_B1.c: 916: Flash_Memory_Write();
 11986  071F  3191  214E         	fcall	_Flash_Memory_Write
 11987                           
 11988                           ;MCU_B1.c: 917: GIE = 1;
 11989  0721  178B               	bsf	11,7	;volatile
 11990                           
 11991                           ;MCU_B1.c: 918: myMain.FirstOpen = 1;
 11992  0722  0021               	movlb	1	; select bank1
 11993  0723  15A0               	bsf	_myMain^(0+128),3
 11994                           
 11995                           ;MCU_B1.c: 919: myMain.First = 1;
 11996  0724  16A0               	bsf	_myMain^(0+128),5
 11997  0725  0008               	return
 11998  0726                     __end_of_Flash_Memory_Initialization:	
 11999                           
 12000                           	psect	text69
 12001  1C90                     __ptext69:	
 12002 ;; *************** function _setMemory_Data *****************
 12003 ;; Defined at:
 12004 ;;		line 1034 in file "../src/MCU_B1.c"
 12005 ;; Parameters:    Size  Location     Type
 12006 ;;  address         1    wreg     unsigned char 
 12007 ;;  data            1    0[BANK0 ] unsigned char 
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;  address         1    2[BANK0 ] unsigned char 
 12010 ;; Return value:  Size  Location     Type
 12011 ;;		None               void
 12012 ;; Registers used:
 12013 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12019 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;Total ram usage:        3 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    5
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_Flash_Memory_Initialization
 12030 ;;		_Flash_Memory_Modify
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           
 12035                           ;psect for function _setMemory_Data
 12036  1C90                     _setMemory_Data:	
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12040                           ;setMemory_Data@address stored from wreg
 12041  1C90  0020               	movlb	0	; select bank0
 12042  1C91  00A2               	movwf	setMemory_Data@address
 12043                           
 12044                           ;MCU_B1.c: 1035: Memory.Data[address] = data;
 12045  1C92  0820               	movf	setMemory_Data@data,w
 12046  1C93  00A1               	movwf	??_setMemory_Data
 12047  1C94  0822               	movf	setMemory_Data@address,w
 12048  1C95  3EA0               	addlw	_Memory& (0+255)
 12049  1C96  0086               	movwf	6
 12050  1C97  3001               	movlw	1	; select bank3/4
 12051  1C98  0087               	movwf	7
 12052  1C99  0821               	movf	??_setMemory_Data,w
 12053  1C9A  0081               	movwf	1
 12054  1C9B  0008               	return
 12055  1C9C                     __end_of_setMemory_Data:	
 12056                           
 12057                           	psect	text70
 12058  114E                     __ptext70:	
 12059 ;; *************** function _Flash_Memory_Write *****************
 12060 ;; Defined at:
 12061 ;;		line 967 in file "../src/MCU_B1.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;		None
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  i               1    1[BANK0 ] unsigned char 
 12066 ;; Return value:  Size  Location     Type
 12067 ;;		None               void
 12068 ;; Registers used:
 12069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        2 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    6
 12082 ;; This function calls:
 12083 ;;		_Flash_Memory_Unlock
 12084 ;; This function is called by:
 12085 ;;		_Flash_Memory_Initialization
 12086 ;;		_Flash_Memory_Modify
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function _Flash_Memory_Write
 12092  114E                     _Flash_Memory_Write:	
 12093                           
 12094                           ;MCU_B1.c: 968: char i = 0;
 12095                           
 12096                           ;incstack = 0
 12097                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12098  114E  0020               	movlb	0	; select bank0
 12099  114F  01A1               	clrf	Flash_Memory_Write@i
 12100                           
 12101                           ;MCU_B1.c: 969: CFGS = 0;
 12102  1150  0023               	movlb	3	; select bank3
 12103  1151  1315               	bcf	21,6	;volatile
 12104                           
 12105                           ;MCU_B1.c: 970: PMADRH = 0x30;
 12106  1152  3030               	movlw	48
 12107  1153  0092               	movwf	18	;volatile
 12108                           
 12109                           ;MCU_B1.c: 971: PMDATH = 0;
 12110  1154  0194               	clrf	20	;volatile
 12111                           
 12112                           ;MCU_B1.c: 972: FREE = 0;
 12113  1155  1215               	bcf	21,4	;volatile
 12114                           
 12115                           ;MCU_B1.c: 973: LWLO = 1;
 12116  1156  1695               	bsf	21,5	;volatile
 12117                           
 12118                           ;MCU_B1.c: 974: WREN = 1;
 12119  1157  1515               	bsf	21,2	;volatile
 12120                           
 12121                           ;MCU_B1.c: 975: for (i = 0; i < 32; i++) {
 12122  1158  0020               	movlb	0	; select bank0
 12123  1159  01A1               	clrf	Flash_Memory_Write@i
 12124  115A  3020               	movlw	32
 12125  115B  0221               	subwf	Flash_Memory_Write@i,w
 12126  115C  1803               	btfsc	3,0
 12127  115D  2976               	goto	l1197
 12128  115E                     l6605:	
 12129                           
 12130                           ;MCU_B1.c: 976: PMADRL = i;
 12131  115E  0821               	movf	Flash_Memory_Write@i,w
 12132  115F  0023               	movlb	3	; select bank3
 12133  1160  0091               	movwf	17	;volatile
 12134                           
 12135                           ;MCU_B1.c: 977: PMDATL = Memory.Data[i];
 12136  1161  0020               	movlb	0	; select bank0
 12137  1162  0821               	movf	Flash_Memory_Write@i,w
 12138  1163  3EA0               	addlw	_Memory& (0+255)
 12139  1164  0086               	movwf	6
 12140  1165  3001               	movlw	1	; select bank3/4
 12141  1166  0087               	movwf	7
 12142  1167  0801               	movf	1,w
 12143  1168  0023               	movlb	3	; select bank3
 12144  1169  0093               	movwf	19	;volatile
 12145                           
 12146                           ;MCU_B1.c: 978: Flash_Memory_Unlock();
 12147  116A  319C  2405  3191   	fcall	_Flash_Memory_Unlock
 12148  116D  3001               	movlw	1
 12149  116E  0020               	movlb	0	; select bank0
 12150  116F  00A0               	movwf	??_Flash_Memory_Write
 12151  1170  0820               	movf	??_Flash_Memory_Write,w
 12152  1171  07A1               	addwf	Flash_Memory_Write@i,f
 12153  1172  3020               	movlw	32
 12154  1173  0221               	subwf	Flash_Memory_Write@i,w
 12155  1174  1C03               	skipc
 12156  1175  295E               	goto	l6605
 12157  1176                     l1197:	
 12158                           
 12159                           ;MCU_B1.c: 979: }
 12160                           ;MCU_B1.c: 980: LWLO = 0;
 12161  1176  0023               	movlb	3	; select bank3
 12162  1177  1295               	bcf	21,5	;volatile
 12163                           
 12164                           ;MCU_B1.c: 981: Flash_Memory_Unlock();
 12165  1178  319C  2405         	fcall	_Flash_Memory_Unlock
 12166                           
 12167                           ;MCU_B1.c: 982: WREN = 0;
 12168  117A  0023               	movlb	3	; select bank3
 12169  117B  1115               	bcf	21,2	;volatile
 12170  117C  0008               	return
 12171  117D                     __end_of_Flash_Memory_Write:	
 12172                           
 12173                           	psect	text71
 12174  1C05                     __ptext71:	
 12175 ;; *************** function _Flash_Memory_Unlock *****************
 12176 ;; Defined at:
 12177 ;;		line 946 in file "../src/MCU_B1.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;		None
 12182 ;; Return value:  Size  Location     Type
 12183 ;;		None               void
 12184 ;; Registers used:
 12185 ;;		wreg
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        0 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    5
 12198 ;; This function calls:
 12199 ;;		Nothing
 12200 ;; This function is called by:
 12201 ;;		_Flash_Memory_Write
 12202 ;;		_Flash_Memory_Erasing
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           
 12207                           ;psect for function _Flash_Memory_Unlock
 12208  1C05                     _Flash_Memory_Unlock:	
 12209                           
 12210                           ;MCU_B1.c: 947: PMCON2 = 0x55;
 12211                           
 12212                           ;incstack = 0
 12213                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12214  1C05  3055               	movlw	85
 12215  1C06  0023               	movlb	3	; select bank3
 12216  1C07  0096               	movwf	22	;volatile
 12217                           
 12218                           ;MCU_B1.c: 948: PMCON2 = 0xaa;
 12219  1C08  30AA               	movlw	170
 12220  1C09  0096               	movwf	22	;volatile
 12221                           
 12222                           ;MCU_B1.c: 949: WR = 1;
 12223  1C0A  1495               	bsf	21,1	;volatile
 12224                           
 12225                           ;MCU_B1.c: 950: __nop();
 12226  1C0B  0000               	nop
 12227                           
 12228                           ;MCU_B1.c: 951: __nop();
 12229  1C0C  0000               	nop
 12230  1C0D  0008               	return
 12231  1C0E                     __end_of_Flash_Memory_Unlock:	
 12232                           
 12233                           	psect	text72
 12234  07E5                     __ptext72:	
 12235 ;; *************** function _Flash_Memory_Read *****************
 12236 ;; Defined at:
 12237 ;;		line 955 in file "../src/MCU_B1.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;  address         1    wreg     unsigned char 
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  address         1    2[BANK0 ] unsigned char 
 12242 ;;  ret             1    3[BANK0 ] unsigned char 
 12243 ;;  i               1    1[BANK0 ] unsigned char 
 12244 ;; Return value:  Size  Location     Type
 12245 ;;                  1    wreg      unsigned char 
 12246 ;; Registers used:
 12247 ;;		wreg, status,2
 12248 ;; Tracked objects:
 12249 ;;		On entry : 0/0
 12250 ;;		On exit  : 0/0
 12251 ;;		Unchanged: 0/0
 12252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;Total ram usage:        4 bytes
 12258 ;; Hardware stack levels used:    1
 12259 ;; Hardware stack levels required when called:    5
 12260 ;; This function calls:
 12261 ;;		Nothing
 12262 ;; This function is called by:
 12263 ;;		_Flash_Memory_Initialization
 12264 ;;		_Flash_Memory_Modify
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           
 12269                           ;psect for function _Flash_Memory_Read
 12270  07E5                     _Flash_Memory_Read:	
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12274                           ;Flash_Memory_Read@address stored from wreg
 12275  07E5  0020               	movlb	0	; select bank0
 12276  07E6  00A2               	movwf	Flash_Memory_Read@address
 12277                           
 12278                           ;MCU_B1.c: 956: char i = 0, ret = 0;
 12279  07E7  01A1               	clrf	Flash_Memory_Read@i
 12280  07E8  01A3               	clrf	Flash_Memory_Read@ret
 12281                           
 12282                           ;MCU_B1.c: 957: PMADRH = 0x30;
 12283  07E9  3030               	movlw	48
 12284  07EA  0023               	movlb	3	; select bank3
 12285  07EB  0092               	movwf	18	;volatile
 12286                           
 12287                           ;MCU_B1.c: 958: PMADRL = address;
 12288  07EC  0020               	movlb	0	; select bank0
 12289  07ED  0822               	movf	Flash_Memory_Read@address,w
 12290  07EE  0023               	movlb	3	; select bank3
 12291  07EF  0091               	movwf	17	;volatile
 12292                           
 12293                           ;MCU_B1.c: 959: CFGS = 0;
 12294  07F0  1315               	bcf	21,6	;volatile
 12295                           
 12296                           ;MCU_B1.c: 960: RD = 1;
 12297  07F1  1415               	bsf	21,0	;volatile
 12298                           
 12299                           ;MCU_B1.c: 961: i = PMDATH;
 12300  07F2  0814               	movf	20,w	;volatile
 12301  07F3  0020               	movlb	0	; select bank0
 12302  07F4  00A0               	movwf	??_Flash_Memory_Read
 12303  07F5  0820               	movf	??_Flash_Memory_Read,w
 12304  07F6  00A1               	movwf	Flash_Memory_Read@i
 12305                           
 12306                           ;MCU_B1.c: 962: ret = PMDATL;
 12307  07F7  0023               	movlb	3	; select bank3
 12308  07F8  0813               	movf	19,w	;volatile
 12309  07F9  0020               	movlb	0	; select bank0
 12310  07FA  00A0               	movwf	??_Flash_Memory_Read
 12311  07FB  0820               	movf	??_Flash_Memory_Read,w
 12312  07FC  00A3               	movwf	Flash_Memory_Read@ret
 12313                           
 12314                           ;MCU_B1.c: 963: return ret;
 12315  07FD  0823               	movf	Flash_Memory_Read@ret,w
 12316  07FE  0008               	return
 12317  07FF                     __end_of_Flash_Memory_Read:	
 12318                           
 12319                           	psect	text73
 12320  117D                     __ptext73:	
 12321 ;; *************** function _DimmerLights_Main *****************
 12322 ;; Defined at:
 12323 ;;		line 390 in file "../src/Dimmer_B1.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;		None
 12326 ;; Auto vars:     Size  Location     Type
 12327 ;;		None
 12328 ;; Return value:  Size  Location     Type
 12329 ;;		None               void
 12330 ;; Registers used:
 12331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;Total ram usage:        4 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:   10
 12344 ;; This function calls:
 12345 ;;		_getLoad_OK
 12346 ;;		_getMain_All_Error_Status
 12347 ;;		_getMain_LightsStatus
 12348 ;;		_setDimmerLights_Main
 12349 ;; This function is called by:
 12350 ;;		_main
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _DimmerLights_Main
 12356  117D                     _DimmerLights_Main:	
 12357                           
 12358                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12362  117D  3000               	movlw	0
 12363  117E  3191  21DF  3191   	fcall	_getMain_All_Error_Status
 12364  1181  3800               	iorlw	0
 12365  1182  1D03               	skipz
 12366  1183  29A7               	goto	l709
 12367                           
 12368                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12369  1184  0022               	movlb	2	; select bank2
 12370  1185  1CBE               	btfss	_Dimmer^(0+256),1
 12371  1186  29A9               	goto	l7481
 12372                           
 12373                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12374  1187  319B  23EC  3191   	fcall	_getLoad_OK
 12375  118A  3A01               	xorlw	1
 12376  118B  1903               	skipnz
 12377  118C  299E               	goto	l7477
 12378  118D  3191  2123  3191   	fcall	_getMain_LightsStatus
 12379  1190  3A00               	xorlw	0
 12380  1191  1903               	skipnz
 12381  1192  299E               	goto	l7477
 12382  1193  0022               	movlb	2	; select bank2
 12383  1194  0C3E               	rrf	_Dimmer^(0+256),w
 12384  1195  3901               	andlw	1
 12385  1196  0020               	movlb	0	; select bank0
 12386  1197  00E7               	movwf	??_DimmerLights_Main
 12387  1198  01E8               	clrf	??_DimmerLights_Main+1
 12388  1199  0867               	movf	??_DimmerLights_Main,w
 12389  119A  00E9               	movwf	_DimmerLights_Main$2089
 12390  119B  0868               	movf	??_DimmerLights_Main+1,w
 12391  119C  00EA               	movwf	_DimmerLights_Main$2089+1
 12392  119D  29A1               	goto	l7479
 12393  119E                     l7477:	
 12394  119E  0020               	movlb	0	; select bank0
 12395  119F  01E9               	clrf	_DimmerLights_Main$2089
 12396  11A0  01EA               	clrf	_DimmerLights_Main$2089+1
 12397  11A1                     l7479:	
 12398  11A1  0869               	movf	_DimmerLights_Main$2089,w
 12399  11A2  0022               	movlb	2	; select bank2
 12400  11A3  10BE               	bcf	_Dimmer^(0+256),1
 12401  11A4  1D03               	skipz
 12402  11A5  14BE               	bsf	_Dimmer^(0+256),1
 12403                           
 12404                           ;Dimmer_B1.c: 395: }
 12405                           ;Dimmer_B1.c: 396: } else {
 12406  11A6  29A9               	goto	l7481
 12407  11A7                     l709:	
 12408                           
 12409                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12410  11A7  0022               	movlb	2	; select bank2
 12411  11A8  10BE               	bcf	_Dimmer^(0+256),1
 12412  11A9                     l7481:	
 12413                           
 12414                           ;Dimmer_B1.c: 398: }
 12415                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12416  11A9  3001               	movlw	1
 12417  11AA  3197  274B         	fcall	_setDimmerLights_Main
 12418  11AC  0008               	return
 12419  11AD                     __end_of_DimmerLights_Main:	
 12420                           
 12421                           	psect	text74
 12422  174B                     __ptext74:	
 12423 ;; *************** function _setDimmerLights_Main *****************
 12424 ;; Defined at:
 12425 ;;		line 416 in file "../src/Dimmer_B1.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;  lights          1    wreg     unsigned char 
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;  lights          1   70[BANK0 ] unsigned char 
 12430 ;; Return value:  Size  Location     Type
 12431 ;;		None               void
 12432 ;; Registers used:
 12433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;Total ram usage:        1 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:    9
 12446 ;; This function calls:
 12447 ;;		_DimmerLightsPointSelect
 12448 ;;		_setBuz
 12449 ;;		_setDimmerLights
 12450 ;;		_setDimmerLights_Adj
 12451 ;; This function is called by:
 12452 ;;		_DimmerLights_Main
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456                           
 12457                           ;psect for function _setDimmerLights_Main
 12458  174B                     _setDimmerLights_Main:	
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12462                           ;setDimmerLights_Main@lights stored from wreg
 12463  174B  0020               	movlb	0	; select bank0
 12464  174C  00E6               	movwf	setDimmerLights_Main@lights
 12465                           
 12466                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12467  174D  0866               	movf	setDimmerLights_Main@lights,w
 12468  174E  319C  2441  3197   	fcall	_DimmerLightsPointSelect
 12469                           
 12470                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12471  1751  0020               	movlb	0	; select bank0
 12472  1752  086F               	movf	_DimmerLights,w
 12473  1753  3E08               	addlw	8
 12474  1754  0086               	movwf	6
 12475  1755  3001               	movlw	1	; select bank2/3
 12476  1756  0087               	movwf	7
 12477  1757  1D01               	btfss	1,2
 12478  1758  2F76               	goto	l6937
 12479                           
 12480                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12481  1759  0022               	movlb	2	; select bank2
 12482  175A  18BE               	btfsc	_Dimmer^(0+256),1
 12483  175B  0008               	return
 12484                           
 12485                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12486  175C  0020               	movlb	0	; select bank0
 12487  175D  086F               	movf	_DimmerLights,w
 12488  175E  3E08               	addlw	8
 12489  175F  0086               	movwf	6
 12490  1760  3001               	movlw	1	; select bank2/3
 12491  1761  0087               	movwf	7
 12492  1762  1101               	bcf	1,2
 12493                           
 12494                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12495  1763  086F               	movf	_DimmerLights,w
 12496  1764  3E08               	addlw	8
 12497  1765  0086               	movwf	6
 12498  1766  3001               	movlw	1	; select bank2/3
 12499  1767  0087               	movwf	7
 12500  1768  1C81               	btfss	1,1
 12501  1769  2F70               	goto	l6935
 12502                           
 12503                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12504  176A  01E2               	clrf	setDimmerLights@status
 12505  176B  0AE2               	incf	setDimmerLights@status,f
 12506  176C  0866               	movf	setDimmerLights_Main@lights,w
 12507  176D  318C  24E5         	fcall	_setDimmerLights
 12508                           
 12509                           ;Dimmer_B1.c: 425: } else {
 12510  176F  0008               	return
 12511  1770                     l6935:	
 12512                           
 12513                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12514  1770  0020               	movlb	0	; select bank0
 12515  1771  01E2               	clrf	setDimmerLights@status
 12516  1772  0866               	movf	setDimmerLights_Main@lights,w
 12517  1773  318C  24E5         	fcall	_setDimmerLights
 12518                           
 12519                           ;Dimmer_B1.c: 427: }
 12520                           ;Dimmer_B1.c: 428: }
 12521                           ;Dimmer_B1.c: 429: } else {
 12522  1775  0008               	return
 12523  1776                     l6937:	
 12524                           
 12525                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12526  1776  0020               	movlb	0	; select bank0
 12527  1777  086F               	movf	_DimmerLights,w
 12528  1778  3E08               	addlw	8
 12529  1779  0086               	movwf	6
 12530  177A  3001               	movlw	1	; select bank2/3
 12531  177B  0087               	movwf	7
 12532  177C  1E01               	btfss	1,4
 12533  177D  0008               	return
 12534                           
 12535                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12536  177E  0022               	movlb	2	; select bank2
 12537  177F  18BE               	btfsc	_Dimmer^(0+256),1
 12538  1780  0008               	return
 12539                           
 12540                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12541  1781  0020               	movlb	0	; select bank0
 12542  1782  086F               	movf	_DimmerLights,w
 12543  1783  3E08               	addlw	8
 12544  1784  0086               	movwf	6
 12545  1785  3001               	movlw	1	; select bank2/3
 12546  1786  0087               	movwf	7
 12547  1787  1201               	bcf	1,4
 12548                           
 12549                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12550  1788  086F               	movf	_DimmerLights,w
 12551  1789  3E08               	addlw	8
 12552  178A  0086               	movwf	6
 12553  178B  3001               	movlw	1	; select bank2/3
 12554  178C  0087               	movwf	7
 12555  178D  1D81               	btfss	1,3
 12556  178E  2F9E               	goto	l6947
 12557                           
 12558                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12559  178F  01E2               	clrf	setDimmerLights_Adj@status
 12560  1790  0AE2               	incf	setDimmerLights_Adj@status,f
 12561  1791  0866               	movf	setDimmerLights_Main@lights,w
 12562  1792  318B  230D  3197   	fcall	_setDimmerLights_Adj
 12563                           
 12564                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12565  1795  3064               	movlw	100
 12566  1796  0020               	movlb	0	; select bank0
 12567  1797  00A9               	movwf	setBuz@time
 12568  1798  3000               	movlw	0
 12569  1799  00AA               	movwf	setBuz@time+1
 12570  179A  3001               	movlw	1
 12571  179B  3196  26F2         	fcall	_setBuz
 12572                           
 12573                           ;Dimmer_B1.c: 436: } else {
 12574  179D  0008               	return
 12575  179E                     l6947:	
 12576                           
 12577                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12578  179E  0020               	movlb	0	; select bank0
 12579  179F  01E2               	clrf	setDimmerLights_Adj@status
 12580  17A0  0866               	movf	setDimmerLights_Main@lights,w
 12581  17A1  318B  230D         	fcall	_setDimmerLights_Adj
 12582  17A3  0008               	return
 12583  17A4                     __end_of_setDimmerLights_Main:	
 12584                           
 12585                           	psect	text75
 12586  0B0D                     __ptext75:	
 12587 ;; *************** function _setDimmerLights_Adj *****************
 12588 ;; Defined at:
 12589 ;;		line 716 in file "../src/Dimmer_B1.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;  lights          1    wreg     unsigned char 
 12592 ;;  status          1   66[BANK0 ] unsigned char 
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  lights          1   69[BANK0 ] unsigned char 
 12595 ;; Return value:  Size  Location     Type
 12596 ;;		None               void
 12597 ;; Registers used:
 12598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12604 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;Total ram usage:        4 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:    8
 12611 ;; This function calls:
 12612 ;;		_DimmerLightsPointSelect
 12613 ;;		_getMain_All_Error_Status
 12614 ;;		_setPercentValue
 12615 ;;		_setRF_DimmerLights
 12616 ;;		_setTxData
 12617 ;; This function is called by:
 12618 ;;		_setDimmerLights_Main
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _setDimmerLights_Adj
 12624  0B0D                     _setDimmerLights_Adj:	
 12625                           
 12626                           ;incstack = 0
 12627                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12628                           ;setDimmerLights_Adj@lights stored from wreg
 12629  0B0D  0020               	movlb	0	; select bank0
 12630  0B0E  00E5               	movwf	setDimmerLights_Adj@lights
 12631                           
 12632                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12633  0B0F  0865               	movf	setDimmerLights_Adj@lights,w
 12634  0B10  319C  2441  318B   	fcall	_DimmerLightsPointSelect
 12635                           
 12636                           ;Dimmer_B1.c: 718: if (status == 1) {
 12637  0B13  0020               	movlb	0	; select bank0
 12638  0B14  0862               	movf	setDimmerLights_Adj@status,w
 12639  0B15  3A01               	xorlw	1
 12640  0B16  1D03               	skipz
 12641  0B17  2B23               	goto	l6515
 12642                           
 12643                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12644  0B18  086F               	movf	_DimmerLights,w
 12645  0B19  0086               	movwf	6
 12646  0B1A  3001               	movlw	1	; select bank2/3
 12647  0B1B  0087               	movwf	7
 12648  0B1C  1581               	bsf	1,3
 12649                           
 12650                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12651  0B1D  086F               	movf	_DimmerLights,w
 12652  0B1E  0086               	movwf	6
 12653  0B1F  3001               	movlw	1	; select bank2/3
 12654  0B20  0087               	movwf	7
 12655  0B21  1481               	bsf	1,1
 12656                           
 12657                           ;Dimmer_B1.c: 721: } else {
 12658  0B22  0008               	return
 12659  0B23                     l6515:	
 12660                           
 12661                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12662  0B23  086F               	movf	_DimmerLights,w
 12663  0B24  0086               	movwf	6
 12664  0B25  3001               	movlw	1	; select bank2/3
 12665  0B26  0087               	movwf	7
 12666  0B27  1D81               	btfss	1,3
 12667  0B28  0008               	return
 12668                           
 12669                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12670  0B29  086F               	movf	_DimmerLights,w
 12671  0B2A  0086               	movwf	6
 12672  0B2B  3001               	movlw	1	; select bank2/3
 12673  0B2C  0087               	movwf	7
 12674  0B2D  1081               	bcf	1,1
 12675                           
 12676                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12677  0B2E  086F               	movf	_DimmerLights,w
 12678  0B2F  0086               	movwf	6
 12679  0B30  3001               	movlw	1	; select bank2/3
 12680  0B31  0087               	movwf	7
 12681  0B32  1181               	bcf	1,3
 12682                           
 12683                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12684  0B33  086F               	movf	_DimmerLights,w
 12685  0B34  3E04               	addlw	4
 12686  0B35  0086               	movwf	6
 12687  0B36  3001               	movlw	1	; select bank2/3
 12688  0B37  0087               	movwf	7
 12689  0B38  0801               	movf	1,w
 12690  0B39  00E3               	movwf	??_setDimmerLights_Adj
 12691  0B3A  086F               	movf	_DimmerLights,w
 12692  0B3B  3E05               	addlw	5
 12693  0B3C  0086               	movwf	6
 12694  0B3D  3001               	movlw	1	; select bank2/3
 12695  0B3E  0087               	movwf	7
 12696  0B3F  0863               	movf	??_setDimmerLights_Adj,w
 12697  0B40  0081               	movwf	1
 12698                           
 12699                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12700  0B41  086F               	movf	_DimmerLights,w
 12701  0B42  3E04               	addlw	4
 12702  0B43  0086               	movwf	6
 12703  0B44  3001               	movlw	1	; select bank2/3
 12704  0B45  0087               	movwf	7
 12705  0B46  0801               	movf	1,w
 12706  0B47  318A  2243  318B   	fcall	_setPercentValue
 12707  0B4A  0020               	movlb	0	; select bank0
 12708  0B4B  00E3               	movwf	??_setDimmerLights_Adj
 12709  0B4C  0865               	movf	setDimmerLights_Adj@lights,w
 12710  0B4D  3E14               	addlw	20
 12711  0B4E  076E               	addwf	_product,w
 12712  0B4F  00E4               	movwf	??_setDimmerLights_Adj+1
 12713  0B50  0864               	movf	??_setDimmerLights_Adj+1,w
 12714  0B51  0086               	movwf	6
 12715  0B52  3002               	movlw	2	; select bank4/5
 12716  0B53  0087               	movwf	7
 12717  0B54  0863               	movf	??_setDimmerLights_Adj,w
 12718  0B55  0081               	movwf	1
 12719                           
 12720                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12721  0B56  3000               	movlw	0
 12722  0B57  3191  21DF  318B   	fcall	_getMain_All_Error_Status
 12723  0B5A  3A00               	xorlw	0
 12724  0B5B  3000               	movlw	0
 12725  0B5C  1903               	skipnz
 12726  0B5D  3001               	movlw	1
 12727  0B5E  0020               	movlb	0	; select bank0
 12728  0B5F  00E3               	movwf	??_setDimmerLights_Adj
 12729  0B60  0DE3               	rlf	??_setDimmerLights_Adj,f
 12730  0B61  0022               	movlb	2	; select bank2
 12731  0B62  083E               	movf	_Dimmer^(0+256),w
 12732  0B63  0020               	movlb	0	; select bank0
 12733  0B64  0663               	xorwf	??_setDimmerLights_Adj,w
 12734  0B65  39FD               	andlw	-3
 12735  0B66  0663               	xorwf	??_setDimmerLights_Adj,w
 12736  0B67  0022               	movlb	2	; select bank2
 12737  0B68  00BE               	movwf	_Dimmer^(0+256)
 12738                           
 12739                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12740  0B69  0020               	movlb	0	; select bank0
 12741  0B6A  01A0               	clrf	setRF_DimmerLights@on
 12742  0B6B  0AA0               	incf	setRF_DimmerLights@on,f
 12743  0B6C  0865               	movf	setDimmerLights_Adj@lights,w
 12744  0B6D  3197  27A4  318B   	fcall	_setRF_DimmerLights
 12745                           
 12746                           ;Dimmer_B1.c: 740: setTxData();
 12747  0B70  3187  2726         	fcall	_setTxData
 12748  0B72  0008               	return
 12749  0B73                     __end_of_setDimmerLights_Adj:	
 12750                           
 12751                           	psect	text76
 12752  0CE5                     __ptext76:	
 12753 ;; *************** function _setDimmerLights *****************
 12754 ;; Defined at:
 12755 ;;		line 611 in file "../src/Dimmer_B1.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;  lights          1    wreg     unsigned char 
 12758 ;;  status          1   66[BANK0 ] unsigned char 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  lights          1   69[BANK0 ] unsigned char 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;		None               void
 12763 ;; Registers used:
 12764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12770 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;Total ram usage:        4 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    8
 12777 ;; This function calls:
 12778 ;;		_DimmerLightsPointSelect
 12779 ;;		_getMain_All_Error_Status
 12780 ;;		_setDimmerLights_Line
 12781 ;;		_setLED
 12782 ;;		_setPercentValue
 12783 ;;		_setRF_DimmerLights
 12784 ;;		_setTxData
 12785 ;; This function is called by:
 12786 ;;		_setDimmerLights_Main
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _setDimmerLights
 12792  0CE5                     _setDimmerLights:	
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12796                           ;setDimmerLights@lights stored from wreg
 12797  0CE5  0020               	movlb	0	; select bank0
 12798  0CE6  00E5               	movwf	setDimmerLights@lights
 12799                           
 12800                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12801  0CE7  0865               	movf	setDimmerLights@lights,w
 12802  0CE8  319C  2441  318C   	fcall	_DimmerLightsPointSelect
 12803                           
 12804                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12805  0CEB  3000               	movlw	0
 12806  0CEC  3191  21DF  318C   	fcall	_getMain_All_Error_Status
 12807  0CEF  3A00               	xorlw	0
 12808  0CF0  3000               	movlw	0
 12809  0CF1  1903               	skipnz
 12810  0CF2  3001               	movlw	1
 12811  0CF3  0020               	movlb	0	; select bank0
 12812  0CF4  00E3               	movwf	??_setDimmerLights
 12813  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12814  0CF6  0022               	movlb	2	; select bank2
 12815  0CF7  083E               	movf	_Dimmer^(0+256),w
 12816  0CF8  0020               	movlb	0	; select bank0
 12817  0CF9  0663               	xorwf	??_setDimmerLights,w
 12818  0CFA  39FD               	andlw	-3
 12819  0CFB  0663               	xorwf	??_setDimmerLights,w
 12820  0CFC  0022               	movlb	2	; select bank2
 12821  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12822                           
 12823                           ;Dimmer_B1.c: 619: if (status == 1) {
 12824  0CFE  0020               	movlb	0	; select bank0
 12825  0CFF  0862               	movf	setDimmerLights@status,w
 12826  0D00  3A01               	xorlw	1
 12827  0D01  1D03               	skipz
 12828  0D02  2D33               	goto	l6495
 12829                           
 12830                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12831  0D03  086F               	movf	_DimmerLights,w
 12832  0D04  3E09               	addlw	9
 12833  0D05  0086               	movwf	6
 12834  0D06  3001               	movlw	1	; select bank2/3
 12835  0D07  0087               	movwf	7
 12836  0D08  1481               	bsf	1,1
 12837                           
 12838                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12839  0D09  01A2               	clrf	setLED@command
 12840  0D0A  0865               	movf	setDimmerLights@lights,w
 12841  0D0B  3192  227A  318C   	fcall	_setLED
 12842                           
 12843                           ;Dimmer_B1.c: 622: ;;
 12844                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12845  0D0E  0020               	movlb	0	; select bank0
 12846  0D0F  0865               	movf	setDimmerLights@lights,w
 12847  0D10  319C  2484  318C   	fcall	_setDimmerLights_Line
 12848                           
 12849                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12850  0D13  0020               	movlb	0	; select bank0
 12851  0D14  086F               	movf	_DimmerLights,w
 12852  0D15  0086               	movwf	6
 12853  0D16  3001               	movlw	1	; select bank2/3
 12854  0D17  0087               	movwf	7
 12855  0D18  1701               	bsf	1,6
 12856                           
 12857                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(85*0.8));
 12858  0D19  3044               	movlw	68
 12859  0D1A  00E3               	movwf	??_setDimmerLights
 12860  0D1B  086F               	movf	_DimmerLights,w
 12861  0D1C  3E04               	addlw	4
 12862  0D1D  0086               	movwf	6
 12863  0D1E  3001               	movlw	1	; select bank2/3
 12864  0D1F  0087               	movwf	7
 12865  0D20  0863               	movf	??_setDimmerLights,w
 12866  0D21  0081               	movwf	1
 12867                           
 12868                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(85*0.8)));
 12869  0D22  3044               	movlw	68
 12870  0D23  318A  2243  318C   	fcall	_setPercentValue
 12871  0D26  0020               	movlb	0	; select bank0
 12872  0D27  00E3               	movwf	??_setDimmerLights
 12873  0D28  0865               	movf	setDimmerLights@lights,w
 12874  0D29  3E14               	addlw	20
 12875  0D2A  076E               	addwf	_product,w
 12876  0D2B  00E4               	movwf	??_setDimmerLights+1
 12877  0D2C  0864               	movf	??_setDimmerLights+1,w
 12878  0D2D  0086               	movwf	6
 12879  0D2E  3002               	movlw	2	; select bank4/5
 12880  0D2F  0087               	movwf	7
 12881  0D30  0863               	movf	??_setDimmerLights,w
 12882  0D31  0081               	movwf	1
 12883  0D32  2D5A               	goto	l6507
 12884  0D33                     l6495:	
 12885                           ;Dimmer_B1.c: 642: } else {
 12886                           
 12887                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12888                           
 12889                           
 12890                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12891  0D33  086F               	movf	_DimmerLights,w
 12892  0D34  0086               	movwf	6
 12893  0D35  3001               	movlw	1	; select bank2/3
 12894  0D36  0087               	movwf	7
 12895  0D37  1301               	bcf	1,6
 12896                           
 12897                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12898  0D38  086F               	movf	_DimmerLights,w
 12899  0D39  3E09               	addlw	9
 12900  0D3A  0086               	movwf	6
 12901  0D3B  3001               	movlw	1	; select bank2/3
 12902  0D3C  0087               	movwf	7
 12903  0D3D  1081               	bcf	1,1
 12904                           
 12905                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12906  0D3E  01A2               	clrf	setLED@command
 12907  0D3F  0AA2               	incf	setLED@command,f
 12908  0D40  0865               	movf	setDimmerLights@lights,w
 12909  0D41  3192  227A  318C   	fcall	_setLED
 12910                           
 12911                           ;Dimmer_B1.c: 646: ;;
 12912                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12913  0D44  0020               	movlb	0	; select bank0
 12914  0D45  086F               	movf	_DimmerLights,w
 12915  0D46  3E08               	addlw	8
 12916  0D47  0086               	movwf	6
 12917  0D48  3001               	movlw	1	; select bank2/3
 12918  0D49  0087               	movwf	7
 12919  0D4A  1781               	bsf	1,7
 12920                           
 12921                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12922  0D4B  086F               	movf	_DimmerLights,w
 12923  0D4C  0086               	movwf	6
 12924  0D4D  3001               	movlw	1	; select bank2/3
 12925  0D4E  0087               	movwf	7
 12926  0D4F  1181               	bcf	1,3
 12927                           
 12928                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12929  0D50  086F               	movf	_DimmerLights,w
 12930  0D51  0086               	movwf	6
 12931  0D52  3001               	movlw	1	; select bank2/3
 12932  0D53  0087               	movwf	7
 12933  0D54  1201               	bcf	1,4
 12934                           
 12935                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12936  0D55  086F               	movf	_DimmerLights,w
 12937  0D56  0086               	movwf	6
 12938  0D57  3001               	movlw	1	; select bank2/3
 12939  0D58  0087               	movwf	7
 12940  0D59  1101               	bcf	1,2
 12941  0D5A                     l6507:	
 12942                           
 12943                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12944  0D5A  3007               	movlw	7
 12945  0D5B  00E3               	movwf	??_setDimmerLights
 12946  0D5C  086F               	movf	_DimmerLights,w
 12947  0D5D  3E02               	addlw	2
 12948  0D5E  0086               	movwf	6
 12949  0D5F  3001               	movlw	1	; select bank2/3
 12950  0D60  0087               	movwf	7
 12951  0D61  0863               	movf	??_setDimmerLights,w
 12952  0D62  0081               	movwf	1
 12953                           
 12954                           ;Dimmer_B1.c: 661: }
 12955                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12956  0D63  0862               	movf	setDimmerLights@status,w
 12957  0D64  00E3               	movwf	??_setDimmerLights
 12958  0D65  0863               	movf	??_setDimmerLights,w
 12959  0D66  00A0               	movwf	setRF_DimmerLights@on
 12960  0D67  0865               	movf	setDimmerLights@lights,w
 12961  0D68  3197  27A4  318C   	fcall	_setRF_DimmerLights
 12962                           
 12963                           ;Dimmer_B1.c: 663: setTxData();
 12964  0D6B  3187  2726         	fcall	_setTxData
 12965  0D6D  0008               	return
 12966  0D6E                     __end_of_setDimmerLights:	
 12967                           
 12968                           	psect	text77
 12969  0726                     __ptext77:	
 12970 ;; *************** function _setTxData *****************
 12971 ;; Defined at:
 12972 ;;		line 210 in file "../src/RF_Control_B1.c"
 12973 ;; Parameters:    Size  Location     Type
 12974 ;;		None
 12975 ;; Auto vars:     Size  Location     Type
 12976 ;;  i               1    0        unsigned char 
 12977 ;; Return value:  Size  Location     Type
 12978 ;;		None               void
 12979 ;; Registers used:
 12980 ;;		wreg, fsr1l, fsr1h
 12981 ;; Tracked objects:
 12982 ;;		On entry : 0/0
 12983 ;;		On exit  : 0/0
 12984 ;;		Unchanged: 0/0
 12985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;Total ram usage:        1 bytes
 12991 ;; Hardware stack levels used:    1
 12992 ;; Hardware stack levels required when called:    5
 12993 ;; This function calls:
 12994 ;;		Nothing
 12995 ;; This function is called by:
 12996 ;;		_setDimmerLights
 12997 ;;		_setDimmerLights_Adj
 12998 ;;		_getRxData
 12999 ;;		_setControl_Lights_Table
 13000 ;;		_setRFSW_Control
 13001 ;;		_setRFSW_AdjControl
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           
 13006                           ;psect for function _setTxData
 13007  0726                     _setTxData:	
 13008                           
 13009                           ;RF_Control_B1.c: 211: char i;
 13010                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13011                           
 13012                           ;incstack = 0
 13013                           ; Regs used in _setTxData: [wregfsr1]
 13014  0726  0021               	movlb	1	; select bank1
 13015  0727  1C3A               	btfss	_RF1^(0+128),0
 13016  0728  0008               	return
 13017                           
 13018                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13019  0729  193A               	btfsc	_RF1^(0+128),2
 13020  072A  0008               	return
 13021                           
 13022                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13023  072B  153A               	bsf	_RF1^(0+128),2
 13024                           
 13025                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13026  072C  3014               	movlw	20
 13027  072D  00C1               	movwf	(_RF1^(0+128)+7)
 13028  072E  3000               	movlw	0
 13029  072F  00C2               	movwf	(_RF1^(0+128)+8)
 13030                           
 13031                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 13032  0730  3063               	movlw	99
 13033  0731  0020               	movlb	0	; select bank0
 13034  0732  00A0               	movwf	??_setTxData
 13035  0733  0820               	movf	??_setTxData,w
 13036  0734  0022               	movlb	2	; select bank2
 13037  0735  00A0               	movwf	_RF_Data^(0+256)
 13038                           
 13039                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 13040  0736  3002               	movlw	2
 13041  0737  0020               	movlb	0	; select bank0
 13042  0738  00A0               	movwf	??_setTxData
 13043  0739  0820               	movf	??_setTxData,w
 13044  073A  0022               	movlb	2	; select bank2
 13045  073B  00A1               	movwf	(_RF_Data^(0+256)+1)
 13046                           
 13047                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 13048  073C  0020               	movlb	0	; select bank0
 13049  073D  086E               	movf	_product,w
 13050  073E  0086               	movwf	6
 13051  073F  3002               	movlw	2	; select bank4/5
 13052  0740  0087               	movwf	7
 13053  0741  3002               	movlw	2	; select bank4/5
 13054  0742  3F42               	moviw [2]fsr1
 13055  0743  0022               	movlb	2	; select bank2
 13056  0744  00A2               	movwf	(_RF_Data^(0+256)+2)
 13057                           
 13058                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 13059  0745  0020               	movlb	0	; select bank0
 13060  0746  086E               	movf	_product,w
 13061  0747  0086               	movwf	6
 13062  0748  3002               	movlw	2	; select bank4/5
 13063  0749  0087               	movwf	7
 13064  074A  3002               	movlw	2	; select bank4/5
 13065  074B  3F43               	moviw [3]fsr1
 13066  074C  0022               	movlb	2	; select bank2
 13067  074D  00A3               	movwf	(_RF_Data^(0+256)+3)
 13068                           
 13069                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 13070  074E  0020               	movlb	0	; select bank0
 13071  074F  086E               	movf	_product,w
 13072  0750  0086               	movwf	6
 13073  0751  3002               	movlw	2	; select bank4/5
 13074  0752  0087               	movwf	7
 13075  0753  3002               	movlw	2	; select bank4/5
 13076  0754  3F44               	moviw [4]fsr1
 13077  0755  0022               	movlb	2	; select bank2
 13078  0756  00A4               	movwf	(_RF_Data^(0+256)+4)
 13079                           
 13080                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 13081  0757  0020               	movlb	0	; select bank0
 13082  0758  086E               	movf	_product,w
 13083  0759  0086               	movwf	6
 13084  075A  3002               	movlw	2	; select bank4/5
 13085  075B  0087               	movwf	7
 13086  075C  3002               	movlw	2	; select bank4/5
 13087  075D  3F45               	moviw [5]fsr1
 13088  075E  0022               	movlb	2	; select bank2
 13089  075F  00A5               	movwf	(_RF_Data^(0+256)+5)
 13090                           
 13091                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 13092  0760  0020               	movlb	0	; select bank0
 13093  0761  086E               	movf	_product,w
 13094  0762  0086               	movwf	6
 13095  0763  3002               	movlw	2	; select bank4/5
 13096  0764  0087               	movwf	7
 13097  0765  3002               	movlw	2	; select bank4/5
 13098  0766  3F46               	moviw [6]fsr1
 13099  0767  0022               	movlb	2	; select bank2
 13100  0768  00A6               	movwf	(_RF_Data^(0+256)+6)
 13101                           
 13102                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13103  0769  0020               	movlb	0	; select bank0
 13104  076A  086E               	movf	_product,w
 13105  076B  0086               	movwf	6
 13106  076C  3002               	movlw	2	; select bank4/5
 13107  076D  0087               	movwf	7
 13108  076E  3002               	movlw	2	; select bank4/5
 13109  076F  3F47               	moviw [7]fsr1
 13110  0770  0022               	movlb	2	; select bank2
 13111  0771  00A7               	movwf	(_RF_Data^(0+256)+7)
 13112                           
 13113                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13114  0772  0020               	movlb	0	; select bank0
 13115  0773  086E               	movf	_product,w
 13116  0774  0086               	movwf	6
 13117  0775  3002               	movlw	2	; select bank4/5
 13118  0776  0087               	movwf	7
 13119  0777  3002               	movlw	2	; select bank4/5
 13120  0778  3F48               	moviw [8]fsr1
 13121  0779  0022               	movlb	2	; select bank2
 13122  077A  00A8               	movwf	(_RF_Data^(0+256)+8)
 13123                           
 13124                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13125  077B  0020               	movlb	0	; select bank0
 13126  077C  086E               	movf	_product,w
 13127  077D  0086               	movwf	6
 13128  077E  3002               	movlw	2	; select bank4/5
 13129  077F  0087               	movwf	7
 13130  0780  3002               	movlw	2	; select bank4/5
 13131  0781  3F49               	moviw [9]fsr1
 13132  0782  0022               	movlb	2	; select bank2
 13133  0783  00A9               	movwf	(_RF_Data^(0+256)+9)
 13134                           
 13135                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13136  0784  0020               	movlb	0	; select bank0
 13137  0785  086E               	movf	_product,w
 13138  0786  0086               	movwf	6
 13139  0787  3002               	movlw	2	; select bank4/5
 13140  0788  0087               	movwf	7
 13141  0789  3002               	movlw	2	; select bank4/5
 13142  078A  3F4A               	moviw [10]fsr1
 13143  078B  0022               	movlb	2	; select bank2
 13144  078C  00AA               	movwf	(_RF_Data^(0+256)+10)
 13145                           
 13146                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13147  078D  0020               	movlb	0	; select bank0
 13148  078E  086E               	movf	_product,w
 13149  078F  0086               	movwf	6
 13150  0790  3002               	movlw	2	; select bank4/5
 13151  0791  0087               	movwf	7
 13152  0792  3002               	movlw	2	; select bank4/5
 13153  0793  3F4B               	moviw [11]fsr1
 13154  0794  0022               	movlb	2	; select bank2
 13155  0795  00AB               	movwf	(_RF_Data^(0+256)+11)
 13156                           
 13157                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13158  0796  0020               	movlb	0	; select bank0
 13159  0797  086E               	movf	_product,w
 13160  0798  0086               	movwf	6
 13161  0799  3002               	movlw	2	; select bank4/5
 13162  079A  0087               	movwf	7
 13163  079B  3002               	movlw	2	; select bank4/5
 13164  079C  3F4C               	moviw [12]fsr1
 13165  079D  0022               	movlb	2	; select bank2
 13166  079E  00AC               	movwf	(_RF_Data^(0+256)+12)
 13167                           
 13168                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13169  079F  0020               	movlb	0	; select bank0
 13170  07A0  086E               	movf	_product,w
 13171  07A1  0086               	movwf	6
 13172  07A2  3002               	movlw	2	; select bank4/5
 13173  07A3  0087               	movwf	7
 13174  07A4  3002               	movlw	2	; select bank4/5
 13175  07A5  3F4D               	moviw [13]fsr1
 13176  07A6  0022               	movlb	2	; select bank2
 13177  07A7  00AD               	movwf	(_RF_Data^(0+256)+13)
 13178                           
 13179                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13180  07A8  0020               	movlb	0	; select bank0
 13181  07A9  086E               	movf	_product,w
 13182  07AA  0086               	movwf	6
 13183  07AB  3002               	movlw	2	; select bank4/5
 13184  07AC  0087               	movwf	7
 13185  07AD  3002               	movlw	2	; select bank4/5
 13186  07AE  3F4E               	moviw [14]fsr1
 13187  07AF  0022               	movlb	2	; select bank2
 13188  07B0  00AE               	movwf	(_RF_Data^(0+256)+14)
 13189                           
 13190                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13191  07B1  0020               	movlb	0	; select bank0
 13192  07B2  086E               	movf	_product,w
 13193  07B3  0086               	movwf	6
 13194  07B4  3002               	movlw	2	; select bank4/5
 13195  07B5  0087               	movwf	7
 13196  07B6  3002               	movlw	2	; select bank4/5
 13197  07B7  3F4F               	moviw [15]fsr1
 13198  07B8  0022               	movlb	2	; select bank2
 13199  07B9  00AF               	movwf	(_RF_Data^(0+256)+15)
 13200                           
 13201                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13202  07BA  0020               	movlb	0	; select bank0
 13203  07BB  086E               	movf	_product,w
 13204  07BC  0086               	movwf	6
 13205  07BD  3002               	movlw	2	; select bank4/5
 13206  07BE  0087               	movwf	7
 13207  07BF  3002               	movlw	2	; select bank4/5
 13208  07C0  3F50               	moviw [16]fsr1
 13209  07C1  0022               	movlb	2	; select bank2
 13210  07C2  00B0               	movwf	(_RF_Data^(0+256)+16)
 13211                           
 13212                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13213  07C3  0020               	movlb	0	; select bank0
 13214  07C4  086E               	movf	_product,w
 13215  07C5  0086               	movwf	6
 13216  07C6  3002               	movlw	2	; select bank4/5
 13217  07C7  0087               	movwf	7
 13218  07C8  3002               	movlw	2	; select bank4/5
 13219  07C9  3F51               	moviw [17]fsr1
 13220  07CA  0022               	movlb	2	; select bank2
 13221  07CB  00B1               	movwf	(_RF_Data^(0+256)+17)
 13222                           
 13223                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13224  07CC  0020               	movlb	0	; select bank0
 13225  07CD  086E               	movf	_product,w
 13226  07CE  0086               	movwf	6
 13227  07CF  3002               	movlw	2	; select bank4/5
 13228  07D0  0087               	movwf	7
 13229  07D1  3002               	movlw	2	; select bank4/5
 13230  07D2  3F52               	moviw [18]fsr1
 13231  07D3  0022               	movlb	2	; select bank2
 13232  07D4  00B2               	movwf	(_RF_Data^(0+256)+18)
 13233                           
 13234                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13235  07D5  0020               	movlb	0	; select bank0
 13236  07D6  086E               	movf	_product,w
 13237  07D7  0086               	movwf	6
 13238  07D8  3002               	movlw	2	; select bank4/5
 13239  07D9  0087               	movwf	7
 13240  07DA  3002               	movlw	2	; select bank4/5
 13241  07DB  3F53               	moviw [19]fsr1
 13242  07DC  0022               	movlb	2	; select bank2
 13243  07DD  00B3               	movwf	(_RF_Data^(0+256)+19)
 13244                           
 13245                           ;RF_Control_B1.c: 249: RF_Data[20] = 209;
 13246  07DE  30D1               	movlw	209
 13247  07DF  0020               	movlb	0	; select bank0
 13248  07E0  00A0               	movwf	??_setTxData
 13249  07E1  0820               	movf	??_setTxData,w
 13250  07E2  0022               	movlb	2	; select bank2
 13251  07E3  00B4               	movwf	(_RF_Data^(0+256)+20)
 13252  07E4  0008               	return
 13253  07E5                     __end_of_setTxData:	
 13254                           
 13255                           	psect	text78
 13256  17A4                     __ptext78:	
 13257 ;; *************** function _setRF_DimmerLights *****************
 13258 ;; Defined at:
 13259 ;;		line 487 in file "../src/RF_Control_B1.c"
 13260 ;; Parameters:    Size  Location     Type
 13261 ;;  lights          1    wreg     unsigned char 
 13262 ;;  on              1    0[BANK0 ] unsigned char 
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;  lights          1    4[BANK0 ] unsigned char 
 13265 ;;  status          1    3[BANK0 ] unsigned char 
 13266 ;; Return value:  Size  Location     Type
 13267 ;;		None               void
 13268 ;; Registers used:
 13269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13270 ;; Tracked objects:
 13271 ;;		On entry : 0/0
 13272 ;;		On exit  : 0/0
 13273 ;;		Unchanged: 0/0
 13274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13275 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13278 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;Total ram usage:        5 bytes
 13280 ;; Hardware stack levels used:    1
 13281 ;; Hardware stack levels required when called:    5
 13282 ;; This function calls:
 13283 ;;		Nothing
 13284 ;; This function is called by:
 13285 ;;		_setDimmerLights
 13286 ;;		_setDimmerLights_Adj
 13287 ;;		_setRFSW_Control
 13288 ;; This function uses a non-reentrant model
 13289 ;;
 13290                           
 13291                           
 13292                           ;psect for function _setRF_DimmerLights
 13293  17A4                     _setRF_DimmerLights:	
 13294                           
 13295                           ;incstack = 0
 13296                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13297                           ;setRF_DimmerLights@lights stored from wreg
 13298  17A4  0020               	movlb	0	; select bank0
 13299  17A5  00A4               	movwf	setRF_DimmerLights@lights
 13300                           
 13301                           ;RF_Control_B1.c: 488: char status = 1;
 13302  17A6  01A3               	clrf	setRF_DimmerLights@status
 13303  17A7  0AA3               	incf	setRF_DimmerLights@status,f
 13304                           
 13305                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13306  17A8  0824               	movf	setRF_DimmerLights@lights,w
 13307  17A9  3EFF               	addlw	-1
 13308  17AA  0A89               	incf	9,f
 13309  17AB  2FAE               	goto	u4990
 13310  17AC                     u4995:	
 13311  17AC  1003               	clrc
 13312  17AD  0DA3               	rlf	setRF_DimmerLights@status,f
 13313  17AE                     u4990:	
 13314  17AE  3EFF               	addlw	-1
 13315  17AF  1D03               	skipz
 13316  17B0  2FAC               	goto	u4995
 13317                           
 13318                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13319  17B1  0824               	movf	setRF_DimmerLights@lights,w
 13320  17B2  00A1               	movwf	??_setRF_DimmerLights
 13321  17B3  086E               	movf	_product,w
 13322  17B4  3E0B               	addlw	11
 13323  17B5  0086               	movwf	6
 13324  17B6  3002               	movlw	2	; select bank4/5
 13325  17B7  0087               	movwf	7
 13326  17B8  0821               	movf	??_setRF_DimmerLights,w
 13327  17B9  0081               	movwf	1
 13328                           
 13329                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13330  17BA  0824               	movf	setRF_DimmerLights@lights,w
 13331  17BB  3E14               	addlw	20
 13332  17BC  076E               	addwf	_product,w
 13333  17BD  00A1               	movwf	??_setRF_DimmerLights
 13334  17BE  0821               	movf	??_setRF_DimmerLights,w
 13335  17BF  0086               	movwf	6
 13336  17C0  3002               	movlw	2	; select bank4/5
 13337  17C1  0087               	movwf	7
 13338  17C2  0801               	movf	1,w
 13339  17C3  00A2               	movwf	??_setRF_DimmerLights+1
 13340  17C4  086E               	movf	_product,w
 13341  17C5  3E09               	addlw	9
 13342  17C6  0086               	movwf	6
 13343  17C7  3002               	movlw	2	; select bank4/5
 13344  17C8  0087               	movwf	7
 13345  17C9  0822               	movf	??_setRF_DimmerLights+1,w
 13346  17CA  0081               	movwf	1
 13347                           
 13348                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13349  17CB  0824               	movf	setRF_DimmerLights@lights,w
 13350  17CC  3E1A               	addlw	26
 13351  17CD  076E               	addwf	_product,w
 13352  17CE  00A1               	movwf	??_setRF_DimmerLights
 13353  17CF  0821               	movf	??_setRF_DimmerLights,w
 13354  17D0  0086               	movwf	6
 13355  17D1  3002               	movlw	2	; select bank4/5
 13356  17D2  0087               	movwf	7
 13357  17D3  0801               	movf	1,w
 13358  17D4  00A2               	movwf	??_setRF_DimmerLights+1
 13359  17D5  086E               	movf	_product,w
 13360  17D6  3E11               	addlw	17
 13361  17D7  0086               	movwf	6
 13362  17D8  3002               	movlw	2	; select bank4/5
 13363  17D9  0087               	movwf	7
 13364  17DA  0822               	movf	??_setRF_DimmerLights+1,w
 13365  17DB  0081               	movwf	1
 13366                           
 13367                           ;RF_Control_B1.c: 500: if (on == 1) {
 13368  17DC  0820               	movf	setRF_DimmerLights@on,w
 13369  17DD  3A01               	xorlw	1
 13370  17DE  1D03               	skipz
 13371  17DF  2FF0               	goto	l5973
 13372                           
 13373                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13374  17E0  086E               	movf	_product,w
 13375  17E1  3E0F               	addlw	15
 13376  17E2  0086               	movwf	6
 13377  17E3  3002               	movlw	2	; select bank4/5
 13378  17E4  0087               	movwf	7
 13379  17E5  0801               	movf	1,w
 13380  17E6  0423               	iorwf	setRF_DimmerLights@status,w
 13381  17E7  00A1               	movwf	??_setRF_DimmerLights
 13382  17E8  086E               	movf	_product,w
 13383  17E9  3E0F               	addlw	15
 13384  17EA  0086               	movwf	6
 13385  17EB  3002               	movlw	2	; select bank4/5
 13386  17EC  0087               	movwf	7
 13387  17ED  0821               	movf	??_setRF_DimmerLights,w
 13388  17EE  0081               	movwf	1
 13389                           
 13390                           ;RF_Control_B1.c: 502: } else {
 13391  17EF  0008               	return
 13392  17F0                     l5973:	
 13393                           
 13394                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13395  17F0  086E               	movf	_product,w
 13396  17F1  3E0F               	addlw	15
 13397  17F2  0086               	movwf	6
 13398  17F3  3002               	movlw	2	; select bank4/5
 13399  17F4  0087               	movwf	7
 13400  17F5  0923               	comf	setRF_DimmerLights@status,w
 13401  17F6  0501               	andwf	1,w
 13402  17F7  00A1               	movwf	??_setRF_DimmerLights
 13403  17F8  086E               	movf	_product,w
 13404  17F9  3E0F               	addlw	15
 13405  17FA  0086               	movwf	6
 13406  17FB  3002               	movlw	2	; select bank4/5
 13407  17FC  0087               	movwf	7
 13408  17FD  0821               	movf	??_setRF_DimmerLights,w
 13409  17FE  0081               	movwf	1
 13410  17FF  0008               	return
 13411  1800                     __end_of_setRF_DimmerLights:	
 13412                           
 13413                           	psect	text79
 13414  0A43                     __ptext79:	
 13415 ;; *************** function _setPercentValue *****************
 13416 ;; Defined at:
 13417 ;;		line 874 in file "../src/Dimmer_B1.c"
 13418 ;; Parameters:    Size  Location     Type
 13419 ;;  value           1    wreg     unsigned char 
 13420 ;; Auto vars:     Size  Location     Type
 13421 ;;  value           1   62[BANK0 ] unsigned char 
 13422 ;;  i               3   63[BANK0 ] float 
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      unsigned char 
 13425 ;; Registers used:
 13426 ;;		wreg, status,2, status,0, pclath, cstack
 13427 ;; Tracked objects:
 13428 ;;		On entry : 0/0
 13429 ;;		On exit  : 0/0
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;Total ram usage:        6 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    7
 13439 ;; This function calls:
 13440 ;;		___awtoft
 13441 ;;		___ftadd
 13442 ;;		___ftdiv
 13443 ;;		___ftneg
 13444 ;;		___fttol
 13445 ;; This function is called by:
 13446 ;;		_setDimmerLights
 13447 ;;		_setDimmerLights_Adj
 13448 ;;		_Flash_Memory_Initialization
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           
 13453                           ;psect for function _setPercentValue
 13454  0A43                     _setPercentValue:	
 13455                           
 13456                           ;incstack = 0
 13457                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13458                           ;setPercentValue@value stored from wreg
 13459  0A43  0020               	movlb	0	; select bank0
 13460  0A44  00DE               	movwf	setPercentValue@value
 13461                           
 13462                           ;Dimmer_B1.c: 882: float i = ((char)(85*0.8)) - ((char)(15*0.8));
 13463  0A45  3000               	movlw	0
 13464  0A46  00DF               	movwf	setPercentValue@i
 13465  0A47  3060               	movlw	96
 13466  0A48  00E0               	movwf	setPercentValue@i+1
 13467  0A49  3042               	movlw	66
 13468  0A4A  00E1               	movwf	setPercentValue@i+2
 13469                           
 13470                           ;Dimmer_B1.c: 883: i /= 100;
 13471  0A4B  3000               	movlw	0
 13472  0A4C  00AE               	movwf	___ftdiv@f2
 13473  0A4D  30C8               	movlw	200
 13474  0A4E  00AF               	movwf	___ftdiv@f2+1
 13475  0A4F  3042               	movlw	66
 13476  0A50  00B0               	movwf	___ftdiv@f2+2
 13477  0A51  085F               	movf	setPercentValue@i,w
 13478  0A52  00B1               	movwf	___ftdiv@f1
 13479  0A53  0860               	movf	setPercentValue@i+1,w
 13480  0A54  00B2               	movwf	___ftdiv@f1+1
 13481  0A55  0861               	movf	setPercentValue@i+2,w
 13482  0A56  00B3               	movwf	___ftdiv@f1+2
 13483  0A57  318E  26A3  318A   	fcall	___ftdiv
 13484  0A5A  0020               	movlb	0	; select bank0
 13485  0A5B  082E               	movf	?___ftdiv,w
 13486  0A5C  00DF               	movwf	setPercentValue@i
 13487  0A5D  082F               	movf	?___ftdiv+1,w
 13488  0A5E  00E0               	movwf	setPercentValue@i+1
 13489  0A5F  0830               	movf	?___ftdiv+2,w
 13490  0A60  00E1               	movwf	setPercentValue@i+2
 13491                           
 13492                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(85*0.8)) - value) / i));
 13493  0A61  085E               	movf	setPercentValue@value,w
 13494  0A62  00DC               	movwf	??_setPercentValue
 13495  0A63  01DD               	clrf	??_setPercentValue+1
 13496  0A64  09DC               	comf	??_setPercentValue,f
 13497  0A65  09DD               	comf	??_setPercentValue+1,f
 13498  0A66  0ADC               	incf	??_setPercentValue,f
 13499  0A67  1903               	skipnz
 13500  0A68  0ADD               	incf	??_setPercentValue+1,f
 13501  0A69  085C               	movf	??_setPercentValue,w
 13502  0A6A  3E44               	addlw	68
 13503  0A6B  00A8               	movwf	___awtoft@c
 13504  0A6C  3000               	movlw	0
 13505  0A6D  3D5D               	addwfc	??_setPercentValue+1,w
 13506  0A6E  00A9               	movwf	___awtoft@c+1
 13507  0A6F  319F  2775  318A   	fcall	___awtoft
 13508  0A72  0020               	movlb	0	; select bank0
 13509  0A73  0828               	movf	?___awtoft,w
 13510  0A74  00B1               	movwf	___ftdiv@f1
 13511  0A75  0829               	movf	?___awtoft+1,w
 13512  0A76  00B2               	movwf	___ftdiv@f1+1
 13513  0A77  082A               	movf	?___awtoft+2,w
 13514  0A78  00B3               	movwf	___ftdiv@f1+2
 13515  0A79  085F               	movf	setPercentValue@i,w
 13516  0A7A  00AE               	movwf	___ftdiv@f2
 13517  0A7B  0860               	movf	setPercentValue@i+1,w
 13518  0A7C  00AF               	movwf	___ftdiv@f2+1
 13519  0A7D  0861               	movf	setPercentValue@i+2,w
 13520  0A7E  00B0               	movwf	___ftdiv@f2+2
 13521  0A7F  318E  26A3  318A   	fcall	___ftdiv
 13522  0A82  0020               	movlb	0	; select bank0
 13523  0A83  082E               	movf	?___ftdiv,w
 13524  0A84  00BE               	movwf	___ftneg@f1
 13525  0A85  082F               	movf	?___ftdiv+1,w
 13526  0A86  00BF               	movwf	___ftneg@f1+1
 13527  0A87  0830               	movf	?___ftdiv+2,w
 13528  0A88  00C0               	movwf	___ftneg@f1+2
 13529  0A89  319B  23FC  318A   	fcall	___ftneg
 13530  0A8C  0020               	movlb	0	; select bank0
 13531  0A8D  083E               	movf	?___ftneg,w
 13532  0A8E  00C4               	movwf	___ftadd@f2
 13533  0A8F  083F               	movf	?___ftneg+1,w
 13534  0A90  00C5               	movwf	___ftadd@f2+1
 13535  0A91  0840               	movf	?___ftneg+2,w
 13536  0A92  00C6               	movwf	___ftadd@f2+2
 13537  0A93  3000               	movlw	0
 13538  0A94  00C1               	movwf	___ftadd@f1
 13539  0A95  30C8               	movlw	200
 13540  0A96  00C2               	movwf	___ftadd@f1+1
 13541  0A97  3042               	movlw	66
 13542  0A98  00C3               	movwf	___ftadd@f1+2
 13543  0A99  3184  2475  318A   	fcall	___ftadd
 13544  0A9C  0020               	movlb	0	; select bank0
 13545  0A9D  0841               	movf	?___ftadd,w
 13546  0A9E  00CE               	movwf	___fttol@f1
 13547  0A9F  0842               	movf	?___ftadd+1,w
 13548  0AA0  00CF               	movwf	___fttol@f1+1
 13549  0AA1  0843               	movf	?___ftadd+2,w
 13550  0AA2  00D0               	movwf	___fttol@f1+2
 13551  0AA3  318C  245E         	fcall	___fttol
 13552  0AA5  0020               	movlb	0	; select bank0
 13553  0AA6  084E               	movf	?___fttol,w
 13554  0AA7  0008               	return
 13555  0AA8                     __end_of_setPercentValue:	
 13556                           
 13557                           	psect	text80
 13558  0C5E                     __ptext80:	
 13559 ;; *************** function ___fttol *****************
 13560 ;; Defined at:
 13561 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;  f1              3   46[BANK0 ] float 
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;  lval            4   55[BANK0 ] unsigned long 
 13566 ;;  exp1            1   59[BANK0 ] unsigned char 
 13567 ;;  sign1           1   54[BANK0 ] unsigned char 
 13568 ;; Return value:  Size  Location     Type
 13569 ;;                  4   46[BANK0 ] long 
 13570 ;; Registers used:
 13571 ;;		wreg, status,2, status,0
 13572 ;; Tracked objects:
 13573 ;;		On entry : 0/0
 13574 ;;		On exit  : 0/0
 13575 ;;		Unchanged: 0/0
 13576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;Total ram usage:       14 bytes
 13582 ;; Hardware stack levels used:    1
 13583 ;; Hardware stack levels required when called:    5
 13584 ;; This function calls:
 13585 ;;		Nothing
 13586 ;; This function is called by:
 13587 ;;		_getPercentValue
 13588 ;;		_setPercentValue
 13589 ;; This function uses a non-reentrant model
 13590 ;;
 13591                           
 13592                           
 13593                           ;psect for function ___fttol
 13594  0C5E                     ___fttol:	
 13595                           
 13596                           ;incstack = 0
 13597                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13598  0C5E  0020               	movlb	0	; select bank0
 13599  0C5F  084E               	movf	___fttol@f1,w
 13600  0C60  00D2               	movwf	??___fttol
 13601  0C61  084F               	movf	___fttol@f1+1,w
 13602  0C62  00D3               	movwf	??___fttol+1
 13603  0C63  0850               	movf	___fttol@f1+2,w
 13604  0C64  00D4               	movwf	??___fttol+2
 13605  0C65  1003               	clrc
 13606  0C66  0D53               	rlf	??___fttol+1,w
 13607  0C67  0D54               	rlf	??___fttol+2,w
 13608  0C68  00D5               	movwf	??___fttol+3
 13609  0C69  0855               	movf	??___fttol+3,w
 13610  0C6A  00DB               	movwf	___fttol@exp1
 13611  0C6B  08DB               	movf	___fttol@exp1,f
 13612  0C6C  1D03               	skipz
 13613  0C6D  2C77               	goto	l5715
 13614  0C6E  3000               	movlw	0
 13615  0C6F  00D1               	movwf	?___fttol+3
 13616  0C70  3000               	movlw	0
 13617  0C71  00D0               	movwf	?___fttol+2
 13618  0C72  3000               	movlw	0
 13619  0C73  00CF               	movwf	?___fttol+1
 13620  0C74  3000               	movlw	0
 13621  0C75  00CE               	movwf	?___fttol
 13622  0C76  0008               	return
 13623  0C77                     l5715:	
 13624  0C77  084E               	movf	___fttol@f1,w
 13625  0C78  00D2               	movwf	??___fttol
 13626  0C79  084F               	movf	___fttol@f1+1,w
 13627  0C7A  00D3               	movwf	??___fttol+1
 13628  0C7B  0850               	movf	___fttol@f1+2,w
 13629  0C7C  00D4               	movwf	??___fttol+2
 13630  0C7D  3017               	movlw	23
 13631  0C7E                     u4625:	
 13632  0C7E  36D4               	lsrf	??___fttol+2,f
 13633  0C7F  0CD3               	rrf	??___fttol+1,f
 13634  0C80  0CD2               	rrf	??___fttol,f
 13635  0C81  0B89               	decfsz	9,f
 13636  0C82  2C7E               	goto	u4625
 13637  0C83  0852               	movf	??___fttol,w
 13638  0C84  00D5               	movwf	??___fttol+3
 13639  0C85  0855               	movf	??___fttol+3,w
 13640  0C86  00D6               	movwf	___fttol@sign1
 13641  0C87  17CF               	bsf	___fttol@f1+1,7
 13642  0C88  30FF               	movlw	255
 13643  0C89  05CE               	andwf	___fttol@f1,f
 13644  0C8A  30FF               	movlw	255
 13645  0C8B  05CF               	andwf	___fttol@f1+1,f
 13646  0C8C  3000               	movlw	0
 13647  0C8D  05D0               	andwf	___fttol@f1+2,f
 13648  0C8E  084E               	movf	___fttol@f1,w
 13649  0C8F  00D7               	movwf	___fttol@lval
 13650  0C90  084F               	movf	___fttol@f1+1,w
 13651  0C91  00D8               	movwf	___fttol@lval+1
 13652  0C92  0850               	movf	___fttol@f1+2,w
 13653  0C93  00D9               	movwf	___fttol@lval+2
 13654  0C94  01DA               	clrf	___fttol@lval+3
 13655  0C95  308E               	movlw	142
 13656  0C96  02DB               	subwf	___fttol@exp1,f
 13657  0C97  1FDB               	btfss	___fttol@exp1,7
 13658  0C98  2CB5               	goto	l5735
 13659  0C99  085B               	movf	___fttol@exp1,w
 13660  0C9A  3A80               	xorlw	128
 13661  0C9B  3E8F               	addlw	143
 13662  0C9C  1803               	skipnc
 13663  0C9D  2CA7               	goto	l5733
 13664  0C9E  3000               	movlw	0
 13665  0C9F  00D1               	movwf	?___fttol+3
 13666  0CA0  3000               	movlw	0
 13667  0CA1  00D0               	movwf	?___fttol+2
 13668  0CA2  3000               	movlw	0
 13669  0CA3  00CF               	movwf	?___fttol+1
 13670  0CA4  3000               	movlw	0
 13671  0CA5  00CE               	movwf	?___fttol
 13672  0CA6  0008               	return
 13673  0CA7                     l5733:	
 13674  0CA7  3001               	movlw	1
 13675  0CA8                     u4655:	
 13676  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13677  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13678  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13679  0CAB  0CD7               	rrf	___fttol@lval,f
 13680  0CAC  0B89               	decfsz	9,f
 13681  0CAD  2CA8               	goto	u4655
 13682  0CAE  3001               	movlw	1
 13683  0CAF  00D2               	movwf	??___fttol
 13684  0CB0  0852               	movf	??___fttol,w
 13685  0CB1  07DB               	addwf	___fttol@exp1,f
 13686  0CB2  1903               	btfsc	3,2
 13687  0CB3  2CCE               	goto	l5745
 13688  0CB4  2CA7               	goto	l5733
 13689  0CB5                     l5735:	
 13690  0CB5  3018               	movlw	24
 13691  0CB6  025B               	subwf	___fttol@exp1,w
 13692  0CB7  1C03               	skipc
 13693  0CB8  2CCB               	goto	l5743
 13694  0CB9  3000               	movlw	0
 13695  0CBA  00D1               	movwf	?___fttol+3
 13696  0CBB  3000               	movlw	0
 13697  0CBC  00D0               	movwf	?___fttol+2
 13698  0CBD  3000               	movlw	0
 13699  0CBE  00CF               	movwf	?___fttol+1
 13700  0CBF  3000               	movlw	0
 13701  0CC0  00CE               	movwf	?___fttol
 13702  0CC1  0008               	return
 13703  0CC2                     l5741:	
 13704  0CC2  3001               	movlw	1
 13705  0CC3                     u4685:	
 13706  0CC3  35D7               	lslf	___fttol@lval,f
 13707  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13708  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13709  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13710  0CC7  0B89               	decfsz	9,f
 13711  0CC8  2CC3               	goto	u4685
 13712  0CC9  3001               	movlw	1
 13713  0CCA  02DB               	subwf	___fttol@exp1,f
 13714  0CCB                     l5743:	
 13715  0CCB  08DB               	movf	___fttol@exp1,f
 13716  0CCC  1D03               	skipz
 13717  0CCD  2CC2               	goto	l5741
 13718  0CCE                     l5745:	
 13719  0CCE  0856               	movf	___fttol@sign1,w
 13720  0CCF  1903               	btfsc	3,2
 13721  0CD0  2CDC               	goto	l5749
 13722  0CD1  09D7               	comf	___fttol@lval,f
 13723  0CD2  09D8               	comf	___fttol@lval+1,f
 13724  0CD3  09D9               	comf	___fttol@lval+2,f
 13725  0CD4  09DA               	comf	___fttol@lval+3,f
 13726  0CD5  0AD7               	incf	___fttol@lval,f
 13727  0CD6  1903               	skipnz
 13728  0CD7  0AD8               	incf	___fttol@lval+1,f
 13729  0CD8  1903               	skipnz
 13730  0CD9  0AD9               	incf	___fttol@lval+2,f
 13731  0CDA  1903               	skipnz
 13732  0CDB  0ADA               	incf	___fttol@lval+3,f
 13733  0CDC                     l5749:	
 13734  0CDC  085A               	movf	___fttol@lval+3,w
 13735  0CDD  00D1               	movwf	?___fttol+3
 13736  0CDE  0859               	movf	___fttol@lval+2,w
 13737  0CDF  00D0               	movwf	?___fttol+2
 13738  0CE0  0858               	movf	___fttol@lval+1,w
 13739  0CE1  00CF               	movwf	?___fttol+1
 13740  0CE2  0857               	movf	___fttol@lval,w
 13741  0CE3  00CE               	movwf	?___fttol
 13742  0CE4  0008               	return
 13743  0CE5                     __end_of___fttol:	
 13744                           
 13745                           	psect	text81
 13746  1BFC                     __ptext81:	
 13747 ;; *************** function ___ftneg *****************
 13748 ;; Defined at:
 13749 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;  f1              3   30[BANK0 ] float 
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;		None
 13754 ;; Return value:  Size  Location     Type
 13755 ;;                  3   30[BANK0 ] float 
 13756 ;; Registers used:
 13757 ;;		wreg
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13763 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13767 ;;Total ram usage:        3 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; Hardware stack levels required when called:    5
 13770 ;; This function calls:
 13771 ;;		Nothing
 13772 ;; This function is called by:
 13773 ;;		_getPercentValue
 13774 ;;		_setPercentValue
 13775 ;; This function uses a non-reentrant model
 13776 ;;
 13777                           
 13778                           
 13779                           ;psect for function ___ftneg
 13780  1BFC                     ___ftneg:	
 13781                           
 13782                           ;incstack = 0
 13783                           ; Regs used in ___ftneg: [wreg]
 13784  1BFC  0020               	movlb	0	; select bank0
 13785  1BFD  0840               	movf	___ftneg@f1+2,w
 13786  1BFE  043F               	iorwf	___ftneg@f1+1,w
 13787  1BFF  043E               	iorwf	___ftneg@f1,w
 13788  1C00  1903               	skipnz
 13789  1C01  0008               	return
 13790  1C02  3080               	movlw	128
 13791  1C03  06C0               	xorwf	___ftneg@f1+2,f
 13792  1C04  0008               	return
 13793  1C05                     __end_of___ftneg:	
 13794                           
 13795                           	psect	text82
 13796  0EA3                     __ptext82:	
 13797 ;; *************** function ___ftdiv *****************
 13798 ;; Defined at:
 13799 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;  f2              3   14[BANK0 ] float 
 13802 ;;  f1              3   17[BANK0 ] float 
 13803 ;; Auto vars:     Size  Location     Type
 13804 ;;  f3              3   25[BANK0 ] float 
 13805 ;;  sign            1   29[BANK0 ] unsigned char 
 13806 ;;  exp             1   28[BANK0 ] unsigned char 
 13807 ;;  cntr            1   24[BANK0 ] unsigned char 
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  3   14[BANK0 ] float 
 13810 ;; Registers used:
 13811 ;;		wreg, status,2, status,0, pclath, cstack
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13817 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13818 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13819 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13820 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;Total ram usage:       16 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    6
 13824 ;; This function calls:
 13825 ;;		___ftpack
 13826 ;; This function is called by:
 13827 ;;		_getPercentValue
 13828 ;;		_setPercentValue
 13829 ;; This function uses a non-reentrant model
 13830 ;;
 13831                           
 13832                           
 13833                           ;psect for function ___ftdiv
 13834  0EA3                     ___ftdiv:	
 13835                           
 13836                           ;incstack = 0
 13837                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13838  0EA3  0020               	movlb	0	; select bank0
 13839  0EA4  0831               	movf	___ftdiv@f1,w
 13840  0EA5  00B4               	movwf	??___ftdiv
 13841  0EA6  0832               	movf	___ftdiv@f1+1,w
 13842  0EA7  00B5               	movwf	??___ftdiv+1
 13843  0EA8  0833               	movf	___ftdiv@f1+2,w
 13844  0EA9  00B6               	movwf	??___ftdiv+2
 13845  0EAA  1003               	clrc
 13846  0EAB  0D35               	rlf	??___ftdiv+1,w
 13847  0EAC  0D36               	rlf	??___ftdiv+2,w
 13848  0EAD  00B7               	movwf	??___ftdiv+3
 13849  0EAE  0837               	movf	??___ftdiv+3,w
 13850  0EAF  00BC               	movwf	___ftdiv@exp
 13851  0EB0  08BC               	movf	___ftdiv@exp,f
 13852  0EB1  1D03               	skipz
 13853  0EB2  2EBA               	goto	l5615
 13854  0EB3  3000               	movlw	0
 13855  0EB4  00AE               	movwf	?___ftdiv
 13856  0EB5  3000               	movlw	0
 13857  0EB6  00AF               	movwf	?___ftdiv+1
 13858  0EB7  3000               	movlw	0
 13859  0EB8  00B0               	movwf	?___ftdiv+2
 13860  0EB9  0008               	return
 13861  0EBA                     l5615:	
 13862  0EBA  082E               	movf	___ftdiv@f2,w
 13863  0EBB  00B4               	movwf	??___ftdiv
 13864  0EBC  082F               	movf	___ftdiv@f2+1,w
 13865  0EBD  00B5               	movwf	??___ftdiv+1
 13866  0EBE  0830               	movf	___ftdiv@f2+2,w
 13867  0EBF  00B6               	movwf	??___ftdiv+2
 13868  0EC0  1003               	clrc
 13869  0EC1  0D35               	rlf	??___ftdiv+1,w
 13870  0EC2  0D36               	rlf	??___ftdiv+2,w
 13871  0EC3  00B7               	movwf	??___ftdiv+3
 13872  0EC4  0837               	movf	??___ftdiv+3,w
 13873  0EC5  00BD               	movwf	___ftdiv@sign
 13874  0EC6  08BD               	movf	___ftdiv@sign,f
 13875  0EC7  1D03               	skipz
 13876  0EC8  2ED0               	goto	l5621
 13877  0EC9  3000               	movlw	0
 13878  0ECA  00AE               	movwf	?___ftdiv
 13879  0ECB  3000               	movlw	0
 13880  0ECC  00AF               	movwf	?___ftdiv+1
 13881  0ECD  3000               	movlw	0
 13882  0ECE  00B0               	movwf	?___ftdiv+2
 13883  0ECF  0008               	return
 13884  0ED0                     l5621:	
 13885  0ED0  3000               	movlw	0
 13886  0ED1  00B9               	movwf	___ftdiv@f3
 13887  0ED2  3000               	movlw	0
 13888  0ED3  00BA               	movwf	___ftdiv@f3+1
 13889  0ED4  3000               	movlw	0
 13890  0ED5  00BB               	movwf	___ftdiv@f3+2
 13891  0ED6  3089               	movlw	137
 13892  0ED7  073D               	addwf	___ftdiv@sign,w
 13893  0ED8  00B4               	movwf	??___ftdiv
 13894  0ED9  0834               	movf	??___ftdiv,w
 13895  0EDA  02BC               	subwf	___ftdiv@exp,f
 13896  0EDB  0831               	movf	___ftdiv@f1,w
 13897  0EDC  00B4               	movwf	??___ftdiv
 13898  0EDD  0832               	movf	___ftdiv@f1+1,w
 13899  0EDE  00B5               	movwf	??___ftdiv+1
 13900  0EDF  0833               	movf	___ftdiv@f1+2,w
 13901  0EE0  00B6               	movwf	??___ftdiv+2
 13902  0EE1  3010               	movlw	16
 13903  0EE2                     u4425:	
 13904  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13905  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13906  0EE4  0CB4               	rrf	??___ftdiv,f
 13907  0EE5  0B89               	decfsz	9,f
 13908  0EE6  2EE2               	goto	u4425
 13909  0EE7  0834               	movf	??___ftdiv,w
 13910  0EE8  00B7               	movwf	??___ftdiv+3
 13911  0EE9  0837               	movf	??___ftdiv+3,w
 13912  0EEA  00BD               	movwf	___ftdiv@sign
 13913  0EEB  082E               	movf	___ftdiv@f2,w
 13914  0EEC  00B4               	movwf	??___ftdiv
 13915  0EED  082F               	movf	___ftdiv@f2+1,w
 13916  0EEE  00B5               	movwf	??___ftdiv+1
 13917  0EEF  0830               	movf	___ftdiv@f2+2,w
 13918  0EF0  00B6               	movwf	??___ftdiv+2
 13919  0EF1  3010               	movlw	16
 13920  0EF2                     u4435:	
 13921  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13922  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13923  0EF4  0CB4               	rrf	??___ftdiv,f
 13924  0EF5  0B89               	decfsz	9,f
 13925  0EF6  2EF2               	goto	u4435
 13926  0EF7  0834               	movf	??___ftdiv,w
 13927  0EF8  00B7               	movwf	??___ftdiv+3
 13928  0EF9  0837               	movf	??___ftdiv+3,w
 13929  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13930  0EFB  3080               	movlw	128
 13931  0EFC  00B4               	movwf	??___ftdiv
 13932  0EFD  0834               	movf	??___ftdiv,w
 13933  0EFE  05BD               	andwf	___ftdiv@sign,f
 13934  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13935  0F00  30FF               	movlw	255
 13936  0F01  05B1               	andwf	___ftdiv@f1,f
 13937  0F02  30FF               	movlw	255
 13938  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13939  0F04  3000               	movlw	0
 13940  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13941  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13942  0F07  30FF               	movlw	255
 13943  0F08  05AE               	andwf	___ftdiv@f2,f
 13944  0F09  30FF               	movlw	255
 13945  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13946  0F0B  3000               	movlw	0
 13947  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13948  0F0D  3018               	movlw	24
 13949  0F0E  00B4               	movwf	??___ftdiv
 13950  0F0F  0834               	movf	??___ftdiv,w
 13951  0F10  00B8               	movwf	___ftdiv@cntr
 13952  0F11                     l5635:	
 13953  0F11  3001               	movlw	1
 13954  0F12                     u4445:	
 13955  0F12  35B9               	lslf	___ftdiv@f3,f
 13956  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13957  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13958  0F15  0B89               	decfsz	9,f
 13959  0F16  2F12               	goto	u4445
 13960  0F17  0830               	movf	___ftdiv@f2+2,w
 13961  0F18  0233               	subwf	___ftdiv@f1+2,w
 13962  0F19  1D03               	skipz
 13963  0F1A  2F21               	goto	u4455
 13964  0F1B  082F               	movf	___ftdiv@f2+1,w
 13965  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13966  0F1D  1D03               	skipz
 13967  0F1E  2F21               	goto	u4455
 13968  0F1F  082E               	movf	___ftdiv@f2,w
 13969  0F20  0231               	subwf	___ftdiv@f1,w
 13970  0F21                     u4455:	
 13971  0F21  1C03               	skipc
 13972  0F22  2F2A               	goto	l5643
 13973  0F23  082E               	movf	___ftdiv@f2,w
 13974  0F24  02B1               	subwf	___ftdiv@f1,f
 13975  0F25  082F               	movf	___ftdiv@f2+1,w
 13976  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13977  0F27  0830               	movf	___ftdiv@f2+2,w
 13978  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13979  0F29  1439               	bsf	___ftdiv@f3,0
 13980  0F2A                     l5643:	
 13981  0F2A  3001               	movlw	1
 13982  0F2B                     u4465:	
 13983  0F2B  35B1               	lslf	___ftdiv@f1,f
 13984  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13985  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13986  0F2E  0B89               	decfsz	9,f
 13987  0F2F  2F2B               	goto	u4465
 13988  0F30  3001               	movlw	1
 13989  0F31  02B8               	subwf	___ftdiv@cntr,f
 13990  0F32  1D03               	btfss	3,2
 13991  0F33  2F11               	goto	l5635
 13992  0F34  0839               	movf	___ftdiv@f3,w
 13993  0F35  00A0               	movwf	___ftpack@arg
 13994  0F36  083A               	movf	___ftdiv@f3+1,w
 13995  0F37  00A1               	movwf	___ftpack@arg+1
 13996  0F38  083B               	movf	___ftdiv@f3+2,w
 13997  0F39  00A2               	movwf	___ftpack@arg+2
 13998  0F3A  083C               	movf	___ftdiv@exp,w
 13999  0F3B  00B4               	movwf	??___ftdiv
 14000  0F3C  0834               	movf	??___ftdiv,w
 14001  0F3D  00A3               	movwf	___ftpack@exp
 14002  0F3E  083D               	movf	___ftdiv@sign,w
 14003  0F3F  00B5               	movwf	??___ftdiv+1
 14004  0F40  0835               	movf	??___ftdiv+1,w
 14005  0F41  00A4               	movwf	___ftpack@sign
 14006  0F42  3189  2181         	fcall	___ftpack
 14007  0F44  0020               	movlb	0	; select bank0
 14008  0F45  0820               	movf	?___ftpack,w
 14009  0F46  00AE               	movwf	?___ftdiv
 14010  0F47  0821               	movf	?___ftpack+1,w
 14011  0F48  00AF               	movwf	?___ftdiv+1
 14012  0F49  0822               	movf	?___ftpack+2,w
 14013  0F4A  00B0               	movwf	?___ftdiv+2
 14014  0F4B  0008               	return
 14015  0F4C                     __end_of___ftdiv:	
 14016                           
 14017                           	psect	text83
 14018  0475                     __ptext83:	
 14019 ;; *************** function ___ftadd *****************
 14020 ;; Defined at:
 14021 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  f1              3   33[BANK0 ] float 
 14024 ;;  f2              3   36[BANK0 ] float 
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;  exp1            1   45[BANK0 ] unsigned char 
 14027 ;;  exp2            1   44[BANK0 ] unsigned char 
 14028 ;;  sign            1   43[BANK0 ] unsigned char 
 14029 ;; Return value:  Size  Location     Type
 14030 ;;                  3   33[BANK0 ] float 
 14031 ;; Registers used:
 14032 ;;		wreg, status,2, status,0, pclath, cstack
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14038 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;Total ram usage:       13 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    6
 14045 ;; This function calls:
 14046 ;;		___ftpack
 14047 ;; This function is called by:
 14048 ;;		_getPercentValue
 14049 ;;		_setPercentValue
 14050 ;; This function uses a non-reentrant model
 14051 ;;
 14052                           
 14053                           
 14054                           ;psect for function ___ftadd
 14055  0475                     ___ftadd:	
 14056                           
 14057                           ;incstack = 0
 14058                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14059  0475  0020               	movlb	0	; select bank0
 14060  0476  0841               	movf	___ftadd@f1,w
 14061  0477  00C7               	movwf	??___ftadd
 14062  0478  0842               	movf	___ftadd@f1+1,w
 14063  0479  00C8               	movwf	??___ftadd+1
 14064  047A  0843               	movf	___ftadd@f1+2,w
 14065  047B  00C9               	movwf	??___ftadd+2
 14066  047C  1003               	clrc
 14067  047D  0D48               	rlf	??___ftadd+1,w
 14068  047E  0D49               	rlf	??___ftadd+2,w
 14069  047F  00CA               	movwf	??___ftadd+3
 14070  0480  084A               	movf	??___ftadd+3,w
 14071  0481  00CD               	movwf	___ftadd@exp1
 14072  0482  0844               	movf	___ftadd@f2,w
 14073  0483  00C7               	movwf	??___ftadd
 14074  0484  0845               	movf	___ftadd@f2+1,w
 14075  0485  00C8               	movwf	??___ftadd+1
 14076  0486  0846               	movf	___ftadd@f2+2,w
 14077  0487  00C9               	movwf	??___ftadd+2
 14078  0488  1003               	clrc
 14079  0489  0D48               	rlf	??___ftadd+1,w
 14080  048A  0D49               	rlf	??___ftadd+2,w
 14081  048B  00CA               	movwf	??___ftadd+3
 14082  048C  084A               	movf	??___ftadd+3,w
 14083  048D  00CC               	movwf	___ftadd@exp2
 14084  048E  084D               	movf	___ftadd@exp1,w
 14085  048F  1903               	btfsc	3,2
 14086  0490  2C9D               	goto	l5545
 14087  0491  084C               	movf	___ftadd@exp2,w
 14088  0492  024D               	subwf	___ftadd@exp1,w
 14089  0493  1803               	skipnc
 14090  0494  2CA4               	goto	l5549
 14091  0495  034D               	decf	___ftadd@exp1,w
 14092  0496  3AFF               	xorlw	255
 14093  0497  074C               	addwf	___ftadd@exp2,w
 14094  0498  00C7               	movwf	??___ftadd
 14095  0499  3019               	movlw	25
 14096  049A  0247               	subwf	??___ftadd,w
 14097  049B  1C03               	skipc
 14098  049C  2CA4               	goto	l5549
 14099  049D                     l5545:	
 14100  049D  0844               	movf	___ftadd@f2,w
 14101  049E  00C1               	movwf	?___ftadd
 14102  049F  0845               	movf	___ftadd@f2+1,w
 14103  04A0  00C2               	movwf	?___ftadd+1
 14104  04A1  0846               	movf	___ftadd@f2+2,w
 14105  04A2  00C3               	movwf	?___ftadd+2
 14106  04A3  0008               	return
 14107  04A4                     l5549:	
 14108  04A4  084C               	movf	___ftadd@exp2,w
 14109  04A5  1903               	btfsc	3,2
 14110  04A6  0008               	return
 14111  04A7  084D               	movf	___ftadd@exp1,w
 14112  04A8  024C               	subwf	___ftadd@exp2,w
 14113  04A9  1803               	skipnc
 14114  04AA  2CB3               	goto	l5555
 14115  04AB  034C               	decf	___ftadd@exp2,w
 14116  04AC  3AFF               	xorlw	255
 14117  04AD  074D               	addwf	___ftadd@exp1,w
 14118  04AE  00C7               	movwf	??___ftadd
 14119  04AF  3019               	movlw	25
 14120  04B0  0247               	subwf	??___ftadd,w
 14121  04B1  1803               	btfsc	3,0
 14122  04B2  0008               	return
 14123  04B3                     l5555:	
 14124  04B3  3006               	movlw	6
 14125  04B4  00C7               	movwf	??___ftadd
 14126  04B5  0847               	movf	??___ftadd,w
 14127  04B6  00CB               	movwf	___ftadd@sign
 14128  04B7  1BC3               	btfsc	___ftadd@f1+2,7
 14129  04B8  17CB               	bsf	___ftadd@sign,7
 14130  04B9  1BC6               	btfsc	___ftadd@f2+2,7
 14131  04BA  174B               	bsf	___ftadd@sign,6
 14132  04BB  17C2               	bsf	___ftadd@f1+1,7
 14133  04BC  30FF               	movlw	255
 14134  04BD  05C1               	andwf	___ftadd@f1,f
 14135  04BE  30FF               	movlw	255
 14136  04BF  05C2               	andwf	___ftadd@f1+1,f
 14137  04C0  3000               	movlw	0
 14138  04C1  05C3               	andwf	___ftadd@f1+2,f
 14139  04C2  17C5               	bsf	___ftadd@f2+1,7
 14140  04C3  30FF               	movlw	255
 14141  04C4  05C4               	andwf	___ftadd@f2,f
 14142  04C5  30FF               	movlw	255
 14143  04C6  05C5               	andwf	___ftadd@f2+1,f
 14144  04C7  3000               	movlw	0
 14145  04C8  05C6               	andwf	___ftadd@f2+2,f
 14146  04C9  084C               	movf	___ftadd@exp2,w
 14147  04CA  024D               	subwf	___ftadd@exp1,w
 14148  04CB  1803               	skipnc
 14149  04CC  2CEF               	goto	l5577
 14150  04CD                     l5567:	
 14151  04CD  3001               	movlw	1
 14152  04CE                     u4265:	
 14153  04CE  35C4               	lslf	___ftadd@f2,f
 14154  04CF  0DC5               	rlf	___ftadd@f2+1,f
 14155  04D0  0DC6               	rlf	___ftadd@f2+2,f
 14156  04D1  0B89               	decfsz	9,f
 14157  04D2  2CCE               	goto	u4265
 14158  04D3  3001               	movlw	1
 14159  04D4  02CC               	subwf	___ftadd@exp2,f
 14160  04D5  084C               	movf	___ftadd@exp2,w
 14161  04D6  064D               	xorwf	___ftadd@exp1,w
 14162  04D7  1903               	skipnz
 14163  04D8  2CEA               	goto	l5575
 14164  04D9  3001               	movlw	1
 14165  04DA  02CB               	subwf	___ftadd@sign,f
 14166  04DB  084B               	movf	___ftadd@sign,w
 14167  04DC  3907               	andlw	7
 14168  04DD  1903               	btfsc	3,2
 14169  04DE  2CEA               	goto	l5575
 14170  04DF  2CCD               	goto	l5567
 14171  04E0                     l5573:	
 14172  04E0  3001               	movlw	1
 14173  04E1                     u4295:	
 14174  04E1  36C3               	lsrf	___ftadd@f1+2,f
 14175  04E2  0CC2               	rrf	___ftadd@f1+1,f
 14176  04E3  0CC1               	rrf	___ftadd@f1,f
 14177  04E4  0B89               	decfsz	9,f
 14178  04E5  2CE1               	goto	u4295
 14179  04E6  3001               	movlw	1
 14180  04E7  00C7               	movwf	??___ftadd
 14181  04E8  0847               	movf	??___ftadd,w
 14182  04E9  07CD               	addwf	___ftadd@exp1,f
 14183  04EA                     l5575:	
 14184  04EA  084D               	movf	___ftadd@exp1,w
 14185  04EB  064C               	xorwf	___ftadd@exp2,w
 14186  04EC  1903               	btfsc	3,2
 14187  04ED  2D14               	goto	l2758
 14188  04EE  2CE0               	goto	l5573
 14189  04EF                     l5577:	
 14190  04EF  084D               	movf	___ftadd@exp1,w
 14191  04F0  024C               	subwf	___ftadd@exp2,w
 14192  04F1  1803               	skipnc
 14193  04F2  2D14               	goto	l2758
 14194  04F3                     l5579:	
 14195  04F3  3001               	movlw	1
 14196  04F4                     u4325:	
 14197  04F4  35C1               	lslf	___ftadd@f1,f
 14198  04F5  0DC2               	rlf	___ftadd@f1+1,f
 14199  04F6  0DC3               	rlf	___ftadd@f1+2,f
 14200  04F7  0B89               	decfsz	9,f
 14201  04F8  2CF4               	goto	u4325
 14202  04F9  3001               	movlw	1
 14203  04FA  02CD               	subwf	___ftadd@exp1,f
 14204  04FB  084C               	movf	___ftadd@exp2,w
 14205  04FC  064D               	xorwf	___ftadd@exp1,w
 14206  04FD  1903               	skipnz
 14207  04FE  2D10               	goto	l5587
 14208  04FF  3001               	movlw	1
 14209  0500  02CB               	subwf	___ftadd@sign,f
 14210  0501  084B               	movf	___ftadd@sign,w
 14211  0502  3907               	andlw	7
 14212  0503  1903               	btfsc	3,2
 14213  0504  2D10               	goto	l5587
 14214  0505  2CF3               	goto	l5579
 14215  0506                     l5585:	
 14216  0506  3001               	movlw	1
 14217  0507                     u4355:	
 14218  0507  36C6               	lsrf	___ftadd@f2+2,f
 14219  0508  0CC5               	rrf	___ftadd@f2+1,f
 14220  0509  0CC4               	rrf	___ftadd@f2,f
 14221  050A  0B89               	decfsz	9,f
 14222  050B  2D07               	goto	u4355
 14223  050C  3001               	movlw	1
 14224  050D  00C7               	movwf	??___ftadd
 14225  050E  0847               	movf	??___ftadd,w
 14226  050F  07CC               	addwf	___ftadd@exp2,f
 14227  0510                     l5587:	
 14228  0510  084D               	movf	___ftadd@exp1,w
 14229  0511  064C               	xorwf	___ftadd@exp2,w
 14230  0512  1D03               	skipz
 14231  0513  2D06               	goto	l5585
 14232  0514                     l2758:	
 14233  0514  1FCB               	btfss	___ftadd@sign,7
 14234  0515  2D26               	goto	l5591
 14235  0516  30FF               	movlw	255
 14236  0517  06C1               	xorwf	___ftadd@f1,f
 14237  0518  30FF               	movlw	255
 14238  0519  06C2               	xorwf	___ftadd@f1+1,f
 14239  051A  30FF               	movlw	255
 14240  051B  06C3               	xorwf	___ftadd@f1+2,f
 14241  051C  3001               	movlw	1
 14242  051D  07C1               	addwf	___ftadd@f1,f
 14243  051E  3000               	movlw	0
 14244  051F  1803               	skipnc
 14245  0520  3001               	movlw	1
 14246  0521  07C2               	addwf	___ftadd@f1+1,f
 14247  0522  3000               	movlw	0
 14248  0523  1803               	skipnc
 14249  0524  3001               	movlw	1
 14250  0525  07C3               	addwf	___ftadd@f1+2,f
 14251  0526                     l5591:	
 14252  0526  1F4B               	btfss	___ftadd@sign,6
 14253  0527  2D38               	goto	l5595
 14254  0528  30FF               	movlw	255
 14255  0529  06C4               	xorwf	___ftadd@f2,f
 14256  052A  30FF               	movlw	255
 14257  052B  06C5               	xorwf	___ftadd@f2+1,f
 14258  052C  30FF               	movlw	255
 14259  052D  06C6               	xorwf	___ftadd@f2+2,f
 14260  052E  3001               	movlw	1
 14261  052F  07C4               	addwf	___ftadd@f2,f
 14262  0530  3000               	movlw	0
 14263  0531  1803               	skipnc
 14264  0532  3001               	movlw	1
 14265  0533  07C5               	addwf	___ftadd@f2+1,f
 14266  0534  3000               	movlw	0
 14267  0535  1803               	skipnc
 14268  0536  3001               	movlw	1
 14269  0537  07C6               	addwf	___ftadd@f2+2,f
 14270  0538                     l5595:	
 14271  0538  01CB               	clrf	___ftadd@sign
 14272  0539  0841               	movf	___ftadd@f1,w
 14273  053A  07C4               	addwf	___ftadd@f2,f
 14274  053B  0842               	movf	___ftadd@f1+1,w
 14275  053C  3DC5               	addwfc	___ftadd@f2+1,f
 14276  053D  0843               	movf	___ftadd@f1+2,w
 14277  053E  3DC6               	addwfc	___ftadd@f2+2,f
 14278  053F  1FC6               	btfss	___ftadd@f2+2,7
 14279  0540  2D53               	goto	l5605
 14280  0541  30FF               	movlw	255
 14281  0542  06C4               	xorwf	___ftadd@f2,f
 14282  0543  30FF               	movlw	255
 14283  0544  06C5               	xorwf	___ftadd@f2+1,f
 14284  0545  30FF               	movlw	255
 14285  0546  06C6               	xorwf	___ftadd@f2+2,f
 14286  0547  3001               	movlw	1
 14287  0548  07C4               	addwf	___ftadd@f2,f
 14288  0549  3000               	movlw	0
 14289  054A  1803               	skipnc
 14290  054B  3001               	movlw	1
 14291  054C  07C5               	addwf	___ftadd@f2+1,f
 14292  054D  3000               	movlw	0
 14293  054E  1803               	skipnc
 14294  054F  3001               	movlw	1
 14295  0550  07C6               	addwf	___ftadd@f2+2,f
 14296  0551  01CB               	clrf	___ftadd@sign
 14297  0552  0ACB               	incf	___ftadd@sign,f
 14298  0553                     l5605:	
 14299  0553  0844               	movf	___ftadd@f2,w
 14300  0554  00A0               	movwf	___ftpack@arg
 14301  0555  0845               	movf	___ftadd@f2+1,w
 14302  0556  00A1               	movwf	___ftpack@arg+1
 14303  0557  0846               	movf	___ftadd@f2+2,w
 14304  0558  00A2               	movwf	___ftpack@arg+2
 14305  0559  084D               	movf	___ftadd@exp1,w
 14306  055A  00C7               	movwf	??___ftadd
 14307  055B  0847               	movf	??___ftadd,w
 14308  055C  00A3               	movwf	___ftpack@exp
 14309  055D  084B               	movf	___ftadd@sign,w
 14310  055E  00C8               	movwf	??___ftadd+1
 14311  055F  0848               	movf	??___ftadd+1,w
 14312  0560  00A4               	movwf	___ftpack@sign
 14313  0561  3189  2181         	fcall	___ftpack
 14314  0563  0020               	movlb	0	; select bank0
 14315  0564  0820               	movf	?___ftpack,w
 14316  0565  00C1               	movwf	?___ftadd
 14317  0566  0821               	movf	?___ftpack+1,w
 14318  0567  00C2               	movwf	?___ftadd+1
 14319  0568  0822               	movf	?___ftpack+2,w
 14320  0569  00C3               	movwf	?___ftadd+2
 14321  056A  0008               	return
 14322  056B                     __end_of___ftadd:	
 14323                           
 14324                           	psect	text84
 14325  1F75                     __ptext84:	
 14326 ;; *************** function ___awtoft *****************
 14327 ;; Defined at:
 14328 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14329 ;; Parameters:    Size  Location     Type
 14330 ;;  c               2    8[BANK0 ] int 
 14331 ;; Auto vars:     Size  Location     Type
 14332 ;;  sign            1   13[BANK0 ] unsigned char 
 14333 ;; Return value:  Size  Location     Type
 14334 ;;                  3    8[BANK0 ] float 
 14335 ;; Registers used:
 14336 ;;		wreg, status,2, status,0, pclath, cstack
 14337 ;; Tracked objects:
 14338 ;;		On entry : 0/0
 14339 ;;		On exit  : 0/0
 14340 ;;		Unchanged: 0/0
 14341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14342 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;Total ram usage:        6 bytes
 14347 ;; Hardware stack levels used:    1
 14348 ;; Hardware stack levels required when called:    6
 14349 ;; This function calls:
 14350 ;;		___ftpack
 14351 ;; This function is called by:
 14352 ;;		_getPercentValue
 14353 ;;		_setPercentValue
 14354 ;; This function uses a non-reentrant model
 14355 ;;
 14356                           
 14357                           
 14358                           ;psect for function ___awtoft
 14359  1F75                     ___awtoft:	
 14360                           
 14361                           ;incstack = 0
 14362                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14363  1F75  0020               	movlb	0	; select bank0
 14364  1F76  01AD               	clrf	___awtoft@sign
 14365  1F77  1FA9               	btfss	___awtoft@c+1,7
 14366  1F78  2F80               	goto	l5533
 14367  1F79  09A8               	comf	___awtoft@c,f
 14368  1F7A  09A9               	comf	___awtoft@c+1,f
 14369  1F7B  0AA8               	incf	___awtoft@c,f
 14370  1F7C  1903               	skipnz
 14371  1F7D  0AA9               	incf	___awtoft@c+1,f
 14372  1F7E  01AD               	clrf	___awtoft@sign
 14373  1F7F  0AAD               	incf	___awtoft@sign,f
 14374  1F80                     l5533:	
 14375  1F80  0828               	movf	___awtoft@c,w
 14376  1F81  00A0               	movwf	___ftpack@arg
 14377  1F82  0829               	movf	___awtoft@c+1,w
 14378  1F83  00A1               	movwf	___ftpack@arg+1
 14379  1F84  01A2               	clrf	___ftpack@arg+2
 14380  1F85  308E               	movlw	142
 14381  1F86  00AB               	movwf	??___awtoft
 14382  1F87  082B               	movf	??___awtoft,w
 14383  1F88  00A3               	movwf	___ftpack@exp
 14384  1F89  082D               	movf	___awtoft@sign,w
 14385  1F8A  00AC               	movwf	??___awtoft+1
 14386  1F8B  082C               	movf	??___awtoft+1,w
 14387  1F8C  00A4               	movwf	___ftpack@sign
 14388  1F8D  3189  2181         	fcall	___ftpack
 14389  1F8F  0020               	movlb	0	; select bank0
 14390  1F90  0820               	movf	?___ftpack,w
 14391  1F91  00A8               	movwf	?___awtoft
 14392  1F92  0821               	movf	?___ftpack+1,w
 14393  1F93  00A9               	movwf	?___awtoft+1
 14394  1F94  0822               	movf	?___ftpack+2,w
 14395  1F95  00AA               	movwf	?___awtoft+2
 14396  1F96  0008               	return
 14397  1F97                     __end_of___awtoft:	
 14398                           
 14399                           	psect	text85
 14400  0981                     __ptext85:	
 14401 ;; *************** function ___ftpack *****************
 14402 ;; Defined at:
 14403 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  arg             3    0[BANK0 ] unsigned um
 14406 ;;  exp             1    3[BANK0 ] unsigned char 
 14407 ;;  sign            1    4[BANK0 ] unsigned char 
 14408 ;; Auto vars:     Size  Location     Type
 14409 ;;		None
 14410 ;; Return value:  Size  Location     Type
 14411 ;;                  3    0[BANK0 ] float 
 14412 ;; Registers used:
 14413 ;;		wreg, status,2, status,0
 14414 ;; Tracked objects:
 14415 ;;		On entry : 0/0
 14416 ;;		On exit  : 0/0
 14417 ;;		Unchanged: 0/0
 14418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14419 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;Total ram usage:        8 bytes
 14424 ;; Hardware stack levels used:    1
 14425 ;; Hardware stack levels required when called:    5
 14426 ;; This function calls:
 14427 ;;		Nothing
 14428 ;; This function is called by:
 14429 ;;		___awtoft
 14430 ;;		___ftadd
 14431 ;;		___ftdiv
 14432 ;;		___ftmul
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           
 14437                           ;psect for function ___ftpack
 14438  0981                     ___ftpack:	
 14439                           
 14440                           ;incstack = 0
 14441                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14442  0981  0020               	movlb	0	; select bank0
 14443  0982  0823               	movf	___ftpack@exp,w
 14444  0983  1903               	btfsc	3,2
 14445  0984  298A               	goto	l5483
 14446  0985  0822               	movf	___ftpack@arg+2,w
 14447  0986  0421               	iorwf	___ftpack@arg+1,w
 14448  0987  0420               	iorwf	___ftpack@arg,w
 14449  0988  1D03               	skipz
 14450  0989  299B               	goto	l5489
 14451  098A                     l5483:	
 14452  098A  3000               	movlw	0
 14453  098B  00A0               	movwf	?___ftpack
 14454  098C  3000               	movlw	0
 14455  098D  00A1               	movwf	?___ftpack+1
 14456  098E  3000               	movlw	0
 14457  098F  00A2               	movwf	?___ftpack+2
 14458  0990  0008               	return
 14459  0991                     l5487:	
 14460  0991  3001               	movlw	1
 14461  0992  00A5               	movwf	??___ftpack
 14462  0993  0825               	movf	??___ftpack,w
 14463  0994  07A3               	addwf	___ftpack@exp,f
 14464  0995  3001               	movlw	1
 14465  0996                     u4055:	
 14466  0996  36A2               	lsrf	___ftpack@arg+2,f
 14467  0997  0CA1               	rrf	___ftpack@arg+1,f
 14468  0998  0CA0               	rrf	___ftpack@arg,f
 14469  0999  0B89               	decfsz	9,f
 14470  099A  2996               	goto	u4055
 14471  099B                     l5489:	
 14472  099B  30FE               	movlw	254
 14473  099C  0522               	andwf	___ftpack@arg+2,w
 14474  099D  1903               	btfsc	3,2
 14475  099E  29B4               	goto	l2729
 14476  099F  2991               	goto	l5487
 14477  09A0                     l5491:	
 14478  09A0  3001               	movlw	1
 14479  09A1  00A5               	movwf	??___ftpack
 14480  09A2  0825               	movf	??___ftpack,w
 14481  09A3  07A3               	addwf	___ftpack@exp,f
 14482  09A4  3001               	movlw	1
 14483  09A5  07A0               	addwf	___ftpack@arg,f
 14484  09A6  3000               	movlw	0
 14485  09A7  1803               	skipnc
 14486  09A8  3001               	movlw	1
 14487  09A9  07A1               	addwf	___ftpack@arg+1,f
 14488  09AA  3000               	movlw	0
 14489  09AB  1803               	skipnc
 14490  09AC  3001               	movlw	1
 14491  09AD  07A2               	addwf	___ftpack@arg+2,f
 14492  09AE  3001               	movlw	1
 14493  09AF                     u4075:	
 14494  09AF  36A2               	lsrf	___ftpack@arg+2,f
 14495  09B0  0CA1               	rrf	___ftpack@arg+1,f
 14496  09B1  0CA0               	rrf	___ftpack@arg,f
 14497  09B2  0B89               	decfsz	9,f
 14498  09B3  29AF               	goto	u4075
 14499  09B4                     l2729:	
 14500  09B4  30FF               	movlw	255
 14501  09B5  0522               	andwf	___ftpack@arg+2,w
 14502  09B6  1903               	btfsc	3,2
 14503  09B7  29C1               	goto	l5499
 14504  09B8  29A0               	goto	l5491
 14505  09B9                     l5497:	
 14506  09B9  3001               	movlw	1
 14507  09BA  02A3               	subwf	___ftpack@exp,f
 14508  09BB  3001               	movlw	1
 14509  09BC                     u4095:	
 14510  09BC  35A0               	lslf	___ftpack@arg,f
 14511  09BD  0DA1               	rlf	___ftpack@arg+1,f
 14512  09BE  0DA2               	rlf	___ftpack@arg+2,f
 14513  09BF  0B89               	decfsz	9,f
 14514  09C0  29BC               	goto	u4095
 14515  09C1                     l5499:	
 14516  09C1  1FA1               	btfss	___ftpack@arg+1,7
 14517  09C2  29B9               	goto	l5497
 14518  09C3  1823               	btfsc	___ftpack@exp,0
 14519  09C4  29CB               	goto	l2735
 14520  09C5  30FF               	movlw	255
 14521  09C6  05A0               	andwf	___ftpack@arg,f
 14522  09C7  307F               	movlw	127
 14523  09C8  05A1               	andwf	___ftpack@arg+1,f
 14524  09C9  30FF               	movlw	255
 14525  09CA  05A2               	andwf	___ftpack@arg+2,f
 14526  09CB                     l2735:	
 14527  09CB  1003               	clrc
 14528  09CC  0CA3               	rrf	___ftpack@exp,f
 14529  09CD  0823               	movf	___ftpack@exp,w
 14530  09CE  00A5               	movwf	??___ftpack
 14531  09CF  01A6               	clrf	??___ftpack+1
 14532  09D0  01A7               	clrf	??___ftpack+2
 14533  09D1  3010               	movlw	16
 14534  09D2                     u4125:	
 14535  09D2  35A5               	lslf	??___ftpack,f
 14536  09D3  0DA6               	rlf	??___ftpack+1,f
 14537  09D4  0DA7               	rlf	??___ftpack+2,f
 14538  09D5  0B89               	decfsz	9,f
 14539  09D6  29D2               	goto	u4125
 14540  09D7  0825               	movf	??___ftpack,w
 14541  09D8  04A0               	iorwf	___ftpack@arg,f
 14542  09D9  0826               	movf	??___ftpack+1,w
 14543  09DA  04A1               	iorwf	___ftpack@arg+1,f
 14544  09DB  0827               	movf	??___ftpack+2,w
 14545  09DC  04A2               	iorwf	___ftpack@arg+2,f
 14546  09DD  0824               	movf	___ftpack@sign,w
 14547  09DE  1903               	btfsc	3,2
 14548  09DF  0008               	return
 14549  09E0  17A2               	bsf	___ftpack@arg+2,7
 14550  09E1  0008               	return
 14551  09E2                     __end_of___ftpack:	
 14552                           
 14553                           	psect	text86
 14554  127A                     __ptext86:	
 14555 ;; *************** function _setLED *****************
 14556 ;; Defined at:
 14557 ;;		line 76 in file "../src/LED_B1.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;  led             1    wreg     unsigned char 
 14560 ;;  command         1    2[BANK0 ] unsigned char 
 14561 ;; Auto vars:     Size  Location     Type
 14562 ;;  led             1    3[BANK0 ] unsigned char 
 14563 ;; Return value:  Size  Location     Type
 14564 ;;		None               void
 14565 ;; Registers used:
 14566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14567 ;; Tracked objects:
 14568 ;;		On entry : 0/0
 14569 ;;		On exit  : 0/0
 14570 ;;		Unchanged: 0/0
 14571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14572 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;Total ram usage:        2 bytes
 14577 ;; Hardware stack levels used:    1
 14578 ;; Hardware stack levels required when called:    6
 14579 ;; This function calls:
 14580 ;;		_LedPointSelect
 14581 ;; This function is called by:
 14582 ;;		_setDimmerLights
 14583 ;;		_setLED_Initialization
 14584 ;;		_setMain_Exception
 14585 ;;		_setSw_Initialization
 14586 ;; This function uses a non-reentrant model
 14587 ;;
 14588                           
 14589                           
 14590                           ;psect for function _setLED
 14591  127A                     _setLED:	
 14592                           
 14593                           ;incstack = 0
 14594                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14595                           ;setLED@led stored from wreg
 14596  127A  0020               	movlb	0	; select bank0
 14597  127B  00A3               	movwf	setLED@led
 14598                           
 14599                           ;LED_B1.c: 77: LedPointSelect(led);
 14600  127C  0823               	movf	setLED@led,w
 14601  127D  319C  244C  3192   	fcall	_LedPointSelect
 14602                           
 14603                           ;LED_B1.c: 78: if (command == 0) {
 14604  1280  0020               	movlb	0	; select bank0
 14605  1281  08A2               	movf	setLED@command,f
 14606  1282  1D03               	skipz
 14607  1283  2A89               	goto	l6221
 14608                           
 14609                           ;LED_B1.c: 107: if (led == 99) {
 14610  1284  0823               	movf	setLED@led,w
 14611  1285  3A63               	xorlw	99
 14612  1286  1D03               	skipz
 14613  1287  2A89               	goto	l6221
 14614                           
 14615                           ;LED_B1.c: 111: RB5 = 1;
 14616  1288  168D               	bsf	13,5	;volatile
 14617  1289                     l6221:	
 14618                           
 14619                           ;LED_B1.c: 113: }
 14620                           ;LED_B1.c: 115: }
 14621                           ;LED_B1.c: 116: if (command == 1) {
 14622  1289  0822               	movf	setLED@command,w
 14623  128A  3A01               	xorlw	1
 14624  128B  1D03               	skipz
 14625  128C  2A92               	goto	l6227
 14626                           
 14627                           ;LED_B1.c: 145: if (led == 99) {
 14628  128D  0823               	movf	setLED@led,w
 14629  128E  3A63               	xorlw	99
 14630  128F  1D03               	skipz
 14631  1290  2A92               	goto	l6227
 14632                           
 14633                           ;LED_B1.c: 149: RB5 = 0;
 14634  1291  128D               	bcf	13,5	;volatile
 14635  1292                     l6227:	
 14636                           
 14637                           ;LED_B1.c: 151: }
 14638                           ;LED_B1.c: 153: }
 14639                           ;LED_B1.c: 154: if (command == 10) {
 14640  1292  0822               	movf	setLED@command,w
 14641  1293  3A0A               	xorlw	10
 14642  1294  1D03               	skipz
 14643  1295  2AA6               	goto	l6235
 14644                           
 14645                           ;LED_B1.c: 155: LED->GO = 0;
 14646  1296  087A               	movf	_LED,w
 14647  1297  0086               	movwf	6
 14648  1298  3001               	movlw	1	; select bank2/3
 14649  1299  0087               	movwf	7
 14650  129A  1081               	bcf	1,1
 14651                           
 14652                           ;LED_B1.c: 156: LED->Time = 0;
 14653  129B  0A7A               	incf	_LED,w
 14654  129C  0086               	movwf	6
 14655  129D  3001               	movlw	1	; select bank2/3
 14656  129E  0087               	movwf	7
 14657  129F  3000               	movlw	0
 14658  12A0  3FC0               	movwi [0]fsr1
 14659  12A1  3FC1               	movwi [1]fsr1
 14660                           
 14661                           ;LED_B1.c: 185: if (led == 99) {
 14662  12A2  0823               	movf	setLED@led,w
 14663  12A3  3A63               	xorlw	99
 14664  12A4  1903               	btfsc	3,2
 14665                           
 14666                           ;LED_B1.c: 189: RB5 = 1;
 14667  12A5  168D               	bsf	13,5	;volatile
 14668  12A6                     l6235:	
 14669                           
 14670                           ;LED_B1.c: 191: }
 14671                           ;LED_B1.c: 193: }
 14672                           ;LED_B1.c: 194: if (command == 11) {
 14673  12A6  0822               	movf	setLED@command,w
 14674  12A7  3A0B               	xorlw	11
 14675  12A8  1D03               	skipz
 14676  12A9  0008               	return
 14677                           
 14678                           ;LED_B1.c: 195: LED->GO = 1;
 14679  12AA  087A               	movf	_LED,w
 14680  12AB  0086               	movwf	6
 14681  12AC  3001               	movlw	1	; select bank2/3
 14682  12AD  0087               	movwf	7
 14683  12AE  1481               	bsf	1,1
 14684  12AF  0008               	return
 14685  12B0                     __end_of_setLED:	
 14686                           
 14687                           	psect	text87
 14688  1C4C                     __ptext87:	
 14689 ;; *************** function _LedPointSelect *****************
 14690 ;; Defined at:
 14691 ;;		line 7 in file "../src/LED_B1.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;  led             1    wreg     unsigned char 
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;  led             1    1[BANK0 ] unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;		None               void
 14698 ;; Registers used:
 14699 ;;		wreg
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;Total ram usage:        2 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    5
 14712 ;; This function calls:
 14713 ;;		Nothing
 14714 ;; This function is called by:
 14715 ;;		_setLED_Initialization
 14716 ;;		_setLED
 14717 ;;		_setLED_Main
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           
 14722                           ;psect for function _LedPointSelect
 14723  1C4C                     _LedPointSelect:	
 14724                           
 14725                           ;incstack = 0
 14726                           ; Regs used in _LedPointSelect: [wreg]
 14727                           ;LedPointSelect@led stored from wreg
 14728  1C4C  0020               	movlb	0	; select bank0
 14729  1C4D  00A1               	movwf	LedPointSelect@led
 14730                           
 14731                           ;LED_B1.c: 24: if (led == 99) {
 14732  1C4E  0821               	movf	LedPointSelect@led,w
 14733  1C4F  3A63               	xorlw	99
 14734  1C50  1D03               	skipz
 14735  1C51  0008               	return
 14736                           
 14737                           ;LED_B1.c: 25: LED = &VarErrLED;
 14738  1C52  30E2               	movlw	_VarErrLED& (0+255)
 14739  1C53  00A0               	movwf	??_LedPointSelect
 14740  1C54  0820               	movf	??_LedPointSelect,w
 14741  1C55  00FA               	movwf	_LED
 14742  1C56  0008               	return
 14743  1C57                     __end_of_LedPointSelect:	
 14744                           
 14745                           	psect	text88
 14746  1C84                     __ptext88:	
 14747 ;; *************** function _setDimmerLights_Line *****************
 14748 ;; Defined at:
 14749 ;;		line 667 in file "../src/Dimmer_B1.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;  lights          1    wreg     unsigned char 
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;  lights          1    0[BANK0 ] unsigned char 
 14754 ;; Return value:  Size  Location     Type
 14755 ;;		None               void
 14756 ;; Registers used:
 14757 ;;		wreg
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;Total ram usage:        1 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    5
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		_setDimmerLights
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _setDimmerLights_Line
 14779  1C84                     _setDimmerLights_Line:	
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _setDimmerLights_Line: [wreg]
 14783                           ;setDimmerLights_Line@lights stored from wreg
 14784  1C84  0020               	movlb	0	; select bank0
 14785  1C85  00A0               	movwf	setDimmerLights_Line@lights
 14786                           
 14787                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14788  1C86  0023               	movlb	3	; select bank3
 14789  1C87  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14790                           
 14791                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14792  1C88  0020               	movlb	0	; select bank0
 14793  1C89  0820               	movf	setDimmerLights_Line@lights,w
 14794  1C8A  3A01               	xorlw	1
 14795  1C8B  1D03               	skipz
 14796  1C8C  0008               	return
 14797                           
 14798                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14799  1C8D  0023               	movlb	3	; select bank3
 14800  1C8E  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14801  1C8F  0008               	return
 14802  1C90                     __end_of_setDimmerLights_Line:	
 14803                           
 14804                           	psect	text89
 14805  11DF                     __ptext89:	
 14806 ;; *************** function _getMain_All_Error_Status *****************
 14807 ;; Defined at:
 14808 ;;		line 371 in file "../src/Main_B1.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  command         1    wreg     unsigned char 
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;  command         1    5[BANK0 ] unsigned char 
 14813 ;;  status          1    6[BANK0 ] unsigned char 
 14814 ;; Return value:  Size  Location     Type
 14815 ;;                  1    wreg      unsigned char 
 14816 ;; Registers used:
 14817 ;;		wreg, status,2, status,0
 14818 ;; Tracked objects:
 14819 ;;		On entry : 0/0
 14820 ;;		On exit  : 0/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;Total ram usage:        7 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:    5
 14830 ;; This function calls:
 14831 ;;		Nothing
 14832 ;; This function is called by:
 14833 ;;		_DimmerLights_Main
 14834 ;;		_setDimmerLights
 14835 ;;		_setDimmerLights_Adj
 14836 ;;		_Load_Main
 14837 ;;		_setTemp_Main
 14838 ;;		_setRF_Main
 14839 ;;		_getRxData
 14840 ;;		_Switch_Main
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           
 14845                           ;psect for function _getMain_All_Error_Status
 14846  11DF                     _getMain_All_Error_Status:	
 14847                           
 14848                           ;incstack = 0
 14849                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14850                           ;getMain_All_Error_Status@command stored from wreg
 14851  11DF  0020               	movlb	0	; select bank0
 14852  11E0  00A5               	movwf	getMain_All_Error_Status@command
 14853                           
 14854                           ;Main_B1.c: 372: char status = 0;
 14855  11E1  01A6               	clrf	getMain_All_Error_Status@status
 14856                           
 14857                           ;Main_B1.c: 383: if (status == 0 && command != 2) {
 14858  11E2  08A6               	movf	getMain_All_Error_Status@status,f
 14859  11E3  1D03               	skipz
 14860  11E4  29F9               	goto	l6201
 14861  11E5  0825               	movf	getMain_All_Error_Status@command,w
 14862  11E6  3A02               	xorlw	2
 14863  11E7  1903               	skipnz
 14864  11E8  29F9               	goto	l6201
 14865                           
 14866                           ;Main_B1.c: 384: status = Temp.ERROR == 1 ? 2 : 0;
 14867  11E9  0021               	movlb	1	; select bank1
 14868  11EA  18D7               	btfsc	_Temp^(0+128),1
 14869  11EB  29F0               	goto	l6199
 14870  11EC  0020               	movlb	0	; select bank0
 14871  11ED  01A1               	clrf	_getMain_All_Error_Status$3320
 14872  11EE  01A2               	clrf	_getMain_All_Error_Status$3320+1
 14873  11EF  29F5               	goto	l1426
 14874  11F0                     l6199:	
 14875  11F0  3002               	movlw	2
 14876  11F1  0020               	movlb	0	; select bank0
 14877  11F2  00A1               	movwf	_getMain_All_Error_Status$3320
 14878  11F3  3000               	movlw	0
 14879  11F4  00A2               	movwf	_getMain_All_Error_Status$3320+1
 14880  11F5                     l1426:	
 14881  11F5  0821               	movf	_getMain_All_Error_Status$3320,w
 14882  11F6  00A0               	movwf	??_getMain_All_Error_Status
 14883  11F7  0820               	movf	??_getMain_All_Error_Status,w
 14884  11F8  00A6               	movwf	getMain_All_Error_Status@status
 14885  11F9                     l6201:	
 14886                           
 14887                           ;Main_B1.c: 385: }
 14888                           ;Main_B1.c: 390: if (status == 0 && command != 3) {
 14889  11F9  08A6               	movf	getMain_All_Error_Status@status,f
 14890  11FA  1D03               	skipz
 14891  11FB  2A10               	goto	l1427
 14892  11FC  0825               	movf	getMain_All_Error_Status@command,w
 14893  11FD  3A03               	xorlw	3
 14894  11FE  1903               	skipnz
 14895  11FF  2A10               	goto	l1427
 14896                           
 14897                           ;Main_B1.c: 391: status = Load.ERROR == 1 ? 3 : 0;
 14898  1200  0022               	movlb	2	; select bank2
 14899  1201  1AC1               	btfsc	_Load^(0+256),5
 14900  1202  2A07               	goto	l6209
 14901  1203  0020               	movlb	0	; select bank0
 14902  1204  01A3               	clrf	_getMain_All_Error_Status$3321
 14903  1205  01A4               	clrf	_getMain_All_Error_Status$3321+1
 14904  1206  2A0C               	goto	l1431
 14905  1207                     l6209:	
 14906  1207  3003               	movlw	3
 14907  1208  0020               	movlb	0	; select bank0
 14908  1209  00A3               	movwf	_getMain_All_Error_Status$3321
 14909  120A  3000               	movlw	0
 14910  120B  00A4               	movwf	_getMain_All_Error_Status$3321+1
 14911  120C                     l1431:	
 14912  120C  0823               	movf	_getMain_All_Error_Status$3321,w
 14913  120D  00A0               	movwf	??_getMain_All_Error_Status
 14914  120E  0820               	movf	??_getMain_All_Error_Status,w
 14915  120F  00A6               	movwf	getMain_All_Error_Status@status
 14916  1210                     l1427:	
 14917                           
 14918                           ;Main_B1.c: 392: }
 14919                           ;Main_B1.c: 408: return status;
 14920  1210  0826               	movf	getMain_All_Error_Status@status,w
 14921  1211  0008               	return
 14922  1212                     __end_of_getMain_All_Error_Status:	
 14923                           
 14924                           	psect	text90
 14925  1123                     __ptext90:	
 14926 ;; *************** function _getMain_LightsStatus *****************
 14927 ;; Defined at:
 14928 ;;		line 344 in file "../src/Main_B1.c"
 14929 ;; Parameters:    Size  Location     Type
 14930 ;;		None
 14931 ;; Auto vars:     Size  Location     Type
 14932 ;;  i               2    6[BANK0 ] int 
 14933 ;;  status          1    8[BANK0 ] unsigned char 
 14934 ;;  count           1    5[BANK0 ] unsigned char 
 14935 ;; Return value:  Size  Location     Type
 14936 ;;                  1    wreg      unsigned char 
 14937 ;; Registers used:
 14938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14939 ;; Tracked objects:
 14940 ;;		On entry : 0/0
 14941 ;;		On exit  : 0/0
 14942 ;;		Unchanged: 0/0
 14943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14947 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14948 ;;Total ram usage:        5 bytes
 14949 ;; Hardware stack levels used:    1
 14950 ;; Hardware stack levels required when called:    7
 14951 ;; This function calls:
 14952 ;;		_getDimmerLights_Status
 14953 ;; This function is called by:
 14954 ;;		_DimmerLights_Main
 14955 ;;		_Flash_Memory_Main
 14956 ;;		_setMain_Exception
 14957 ;;		_Load_Main
 14958 ;; This function uses a non-reentrant model
 14959 ;;
 14960                           
 14961                           
 14962                           ;psect for function _getMain_LightsStatus
 14963  1123                     _getMain_LightsStatus:	
 14964                           
 14965                           ;Main_B1.c: 345: char status = 0, count = 0;
 14966                           
 14967                           ;incstack = 0
 14968                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14969  1123  0020               	movlb	0	; select bank0
 14970  1124  01A8               	clrf	getMain_LightsStatus@status
 14971  1125  01A5               	clrf	getMain_LightsStatus@count
 14972                           
 14973                           ;Main_B1.c: 348: count = 1;
 14974  1126  01A5               	clrf	getMain_LightsStatus@count
 14975  1127  0AA5               	incf	getMain_LightsStatus@count,f
 14976                           
 14977                           ;Main_B1.c: 357: for (int i = 0; i < count; i++) {
 14978  1128  01A6               	clrf	getMain_LightsStatus@i
 14979  1129  01A7               	clrf	getMain_LightsStatus@i+1
 14980  112A                     l6471:	
 14981  112A  0827               	movf	getMain_LightsStatus@i+1,w
 14982  112B  3A80               	xorlw	128
 14983  112C  00A4               	movwf	??_getMain_LightsStatus
 14984  112D  3080               	movlw	128
 14985  112E  0224               	subwf	??_getMain_LightsStatus,w
 14986  112F  1D03               	skipz
 14987  1130  2933               	goto	u5685
 14988  1131  0825               	movf	getMain_LightsStatus@count,w
 14989  1132  0226               	subwf	getMain_LightsStatus@i,w
 14990  1133                     u5685:	
 14991  1133  1803               	btfsc	3,0
 14992  1134  294B               	goto	l6473
 14993                           
 14994                           ;Main_B1.c: 358: if (status == 0) {
 14995  1135  0020               	movlb	0	; select bank0
 14996  1136  08A8               	movf	getMain_LightsStatus@status,f
 14997  1137  1D03               	skipz
 14998  1138  2946               	goto	l6469
 14999                           
 15000                           ;Main_B1.c: 363: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15001  1139  0826               	movf	getMain_LightsStatus@i,w
 15002  113A  3E01               	addlw	1
 15003  113B  319D  2508  3191   	fcall	_getDimmerLights_Status
 15004  113E  3A01               	xorlw	1
 15005  113F  3000               	movlw	0
 15006  1140  1903               	skipnz
 15007  1141  3001               	movlw	1
 15008  1142  0020               	movlb	0	; select bank0
 15009  1143  00A4               	movwf	??_getMain_LightsStatus
 15010  1144  0824               	movf	??_getMain_LightsStatus,w
 15011  1145  00A8               	movwf	getMain_LightsStatus@status
 15012  1146                     l6469:	
 15013  1146  3001               	movlw	1
 15014  1147  07A6               	addwf	getMain_LightsStatus@i,f
 15015  1148  3000               	movlw	0
 15016  1149  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15017  114A  292A               	goto	l6471
 15018  114B                     l6473:	
 15019                           
 15020                           ;Main_B1.c: 365: }
 15021                           ;Main_B1.c: 366: }
 15022                           ;Main_B1.c: 367: return status;
 15023  114B  0020               	movlb	0	; select bank0
 15024  114C  0828               	movf	getMain_LightsStatus@status,w
 15025  114D  0008               	return
 15026  114E                     __end_of_getMain_LightsStatus:	
 15027                           
 15028                           	psect	text91
 15029  1BEC                     __ptext91:	
 15030 ;; *************** function _getLoad_OK *****************
 15031 ;; Defined at:
 15032 ;;		line 219 in file "../src/OverLoad_B1.c"
 15033 ;; Parameters:    Size  Location     Type
 15034 ;;		None
 15035 ;; Auto vars:     Size  Location     Type
 15036 ;;  ok              1    0[BANK0 ] unsigned char 
 15037 ;; Return value:  Size  Location     Type
 15038 ;;                  1    wreg      unsigned char 
 15039 ;; Registers used:
 15040 ;;		wreg, status,2
 15041 ;; Tracked objects:
 15042 ;;		On entry : 0/0
 15043 ;;		On exit  : 0/0
 15044 ;;		Unchanged: 0/0
 15045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;Total ram usage:        1 bytes
 15051 ;; Hardware stack levels used:    1
 15052 ;; Hardware stack levels required when called:    5
 15053 ;; This function calls:
 15054 ;;		Nothing
 15055 ;; This function is called by:
 15056 ;;		_DimmerLights_Main
 15057 ;; This function uses a non-reentrant model
 15058 ;;
 15059                           
 15060                           
 15061                           ;psect for function _getLoad_OK
 15062  1BEC                     _getLoad_OK:	
 15063                           
 15064                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15065                           
 15066                           ;incstack = 0
 15067                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15068  1BEC  3000               	movlw	0
 15069  1BED  0022               	movlb	2	; select bank2
 15070  1BEE  1BC1               	btfsc	_Load^(0+256),7
 15071  1BEF  3001               	movlw	1
 15072  1BF0  0020               	movlb	0	; select bank0
 15073  1BF1  00A0               	movwf	getLoad_OK@ok
 15074                           
 15075                           ;OverLoad_B1.c: 221: return ok;
 15076  1BF2  0820               	movf	getLoad_OK@ok,w
 15077  1BF3  0008               	return
 15078  1BF4                     __end_of_getLoad_OK:	
 15079                           
 15080                           	psect	text92
 15081  1CC0                     __ptext92:	
 15082 ;; *************** function _DimmerLights_Initialization *****************
 15083 ;; Defined at:
 15084 ;;		line 329 in file "../src/Dimmer_B1.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;		None
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;Total ram usage:        1 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    7
 15105 ;; This function calls:
 15106 ;;		_Dimmer_Initialization
 15107 ;;		_setDimmerLights_Initialization
 15108 ;; This function is called by:
 15109 ;;		_main
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           
 15114                           ;psect for function _DimmerLights_Initialization
 15115  1CC0                     _DimmerLights_Initialization:	
 15116                           
 15117                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15118                           
 15119                           ;incstack = 0
 15120                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15121  1CC0  30C5               	movlw	_DimmerLights1& (0+255)
 15122  1CC1  0020               	movlb	0	; select bank0
 15123  1CC2  00A4               	movwf	??_DimmerLights_Initialization
 15124  1CC3  0824               	movf	??_DimmerLights_Initialization,w
 15125  1CC4  0021               	movlb	1	; select bank1
 15126  1CC5  00CE               	movwf	_DimmerLights11^(0+128)
 15127                           
 15128                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15129  1CC6  3001               	movlw	1
 15130  1CC7  3190  20A8  319C   	fcall	_setDimmerLights_Initialization
 15131                           
 15132                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15133  1CCA  319B  2395         	fcall	_Dimmer_Initialization
 15134  1CCC  0008               	return
 15135  1CCD                     __end_of_DimmerLights_Initialization:	
 15136                           
 15137                           	psect	text93
 15138  10A8                     __ptext93:	
 15139 ;; *************** function _setDimmerLights_Initialization *****************
 15140 ;; Defined at:
 15141 ;;		line 352 in file "../src/Dimmer_B1.c"
 15142 ;; Parameters:    Size  Location     Type
 15143 ;;  lights          1    wreg     unsigned char 
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  lights          1    3[BANK0 ] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;		None               void
 15148 ;; Registers used:
 15149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;Total ram usage:        2 bytes
 15160 ;; Hardware stack levels used:    1
 15161 ;; Hardware stack levels required when called:    6
 15162 ;; This function calls:
 15163 ;;		_DimmerLightsPointSelect
 15164 ;; This function is called by:
 15165 ;;		_DimmerLights_Initialization
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           
 15170                           ;psect for function _setDimmerLights_Initialization
 15171  10A8                     _setDimmerLights_Initialization:	
 15172                           
 15173                           ;incstack = 0
 15174                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15175                           ;setDimmerLights_Initialization@lights stored from wreg
 15176  10A8  0020               	movlb	0	; select bank0
 15177  10A9  00A3               	movwf	setDimmerLights_Initialization@lights
 15178                           
 15179                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15180  10AA  0823               	movf	setDimmerLights_Initialization@lights,w
 15181  10AB  319C  2441         	fcall	_DimmerLightsPointSelect
 15182                           
 15183                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(85*0.8));
 15184  10AD  3044               	movlw	68
 15185  10AE  0020               	movlb	0	; select bank0
 15186  10AF  00A2               	movwf	??_setDimmerLights_Initialization
 15187  10B0  086F               	movf	_DimmerLights,w
 15188  10B1  3E05               	addlw	5
 15189  10B2  0086               	movwf	6
 15190  10B3  3001               	movlw	1	; select bank2/3
 15191  10B4  0087               	movwf	7
 15192  10B5  0822               	movf	??_setDimmerLights_Initialization,w
 15193  10B6  0081               	movwf	1
 15194                           
 15195                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15196  10B7  300C               	movlw	12
 15197  10B8  00A2               	movwf	??_setDimmerLights_Initialization
 15198  10B9  086F               	movf	_DimmerLights,w
 15199  10BA  3E06               	addlw	6
 15200  10BB  0086               	movwf	6
 15201  10BC  3001               	movlw	1	; select bank2/3
 15202  10BD  0087               	movwf	7
 15203  10BE  0822               	movf	??_setDimmerLights_Initialization,w
 15204  10BF  0081               	movwf	1
 15205                           
 15206                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15207  10C0  086F               	movf	_DimmerLights,w
 15208  10C1  3E05               	addlw	5
 15209  10C2  0086               	movwf	6
 15210  10C3  3001               	movlw	1	; select bank2/3
 15211  10C4  0087               	movwf	7
 15212  10C5  0801               	movf	1,w
 15213  10C6  00A2               	movwf	??_setDimmerLights_Initialization
 15214  10C7  086F               	movf	_DimmerLights,w
 15215  10C8  3E04               	addlw	4
 15216  10C9  0086               	movwf	6
 15217  10CA  3001               	movlw	1	; select bank2/3
 15218  10CB  0087               	movwf	7
 15219  10CC  0822               	movf	??_setDimmerLights_Initialization,w
 15220  10CD  0081               	movwf	1
 15221  10CE  0008               	return
 15222  10CF                     __end_of_setDimmerLights_Initialization:	
 15223                           
 15224                           	psect	text94
 15225  1B95                     __ptext94:	
 15226 ;; *************** function _Dimmer_Initialization *****************
 15227 ;; Defined at:
 15228 ;;		line 892 in file "../src/Dimmer_B1.c"
 15229 ;; Parameters:    Size  Location     Type
 15230 ;;		None
 15231 ;; Auto vars:     Size  Location     Type
 15232 ;;		None
 15233 ;; Return value:  Size  Location     Type
 15234 ;;		None               void
 15235 ;; Registers used:
 15236 ;;		None
 15237 ;; Tracked objects:
 15238 ;;		On entry : 0/0
 15239 ;;		On exit  : 0/0
 15240 ;;		Unchanged: 0/0
 15241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;Total ram usage:        0 bytes
 15247 ;; Hardware stack levels used:    1
 15248 ;; Hardware stack levels required when called:    5
 15249 ;; This function calls:
 15250 ;;		Nothing
 15251 ;; This function is called by:
 15252 ;;		_DimmerLights_Initialization
 15253 ;; This function uses a non-reentrant model
 15254 ;;
 15255                           
 15256                           
 15257                           ;psect for function _Dimmer_Initialization
 15258  1B95                     _Dimmer_Initialization:	
 15259                           
 15260                           ;incstack = 0
 15261                           ; Regs used in _Dimmer_Initialization: []
 15262  1B95  0008               	return
 15263  1B96                     __end_of_Dimmer_Initialization:	
 15264                           
 15265                           	psect	text95
 15266  1BB9                     __ptext95:	
 15267 ;; *************** function _DelayOff_Main *****************
 15268 ;; Defined at:
 15269 ;;		line 41 in file "../src/DelayOff_B1.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;		None
 15272 ;; Auto vars:     Size  Location     Type
 15273 ;;		None
 15274 ;; Return value:  Size  Location     Type
 15275 ;;		None               void
 15276 ;; Registers used:
 15277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15278 ;; Tracked objects:
 15279 ;;		On entry : 0/0
 15280 ;;		On exit  : 0/0
 15281 ;;		Unchanged: 0/0
 15282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;Total ram usage:        0 bytes
 15288 ;; Hardware stack levels used:    1
 15289 ;; Hardware stack levels required when called:   11
 15290 ;; This function calls:
 15291 ;;		_DlyOff_Main
 15292 ;; This function is called by:
 15293 ;;		_main
 15294 ;; This function uses a non-reentrant model
 15295 ;;
 15296                           
 15297                           
 15298                           ;psect for function _DelayOff_Main
 15299  1BB9                     _DelayOff_Main:	
 15300                           
 15301                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15302                           
 15303                           ;incstack = 0
 15304                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15305  1BB9  3001               	movlw	1
 15306  1BBA  3188  20C4         	fcall	_DlyOff_Main
 15307  1BBC  0008               	return
 15308  1BBD                     __end_of_DelayOff_Main:	
 15309                           
 15310                           	psect	text96
 15311  08C4                     __ptext96:	
 15312 ;; *************** function _DlyOff_Main *****************
 15313 ;; Defined at:
 15314 ;;		line 61 in file "../src/DelayOff_B1.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;  sw              1    wreg     unsigned char 
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;  sw              1   24[BANK0 ] unsigned char 
 15319 ;; Return value:  Size  Location     Type
 15320 ;;		None               void
 15321 ;; Registers used:
 15322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;Total ram usage:        3 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:   10
 15335 ;; This function calls:
 15336 ;;		_DelayOffPointSelect
 15337 ;;		_setBuz
 15338 ;;		_setDimmerLights_ErrorClose
 15339 ;; This function is called by:
 15340 ;;		_DelayOff_Main
 15341 ;; This function uses a non-reentrant model
 15342 ;;
 15343                           
 15344                           
 15345                           ;psect for function _DlyOff_Main
 15346  08C4                     _DlyOff_Main:	
 15347                           
 15348                           ;incstack = 0
 15349                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15350                           ;DlyOff_Main@sw stored from wreg
 15351  08C4  0020               	movlb	0	; select bank0
 15352  08C5  00B8               	movwf	DlyOff_Main@sw
 15353                           
 15354                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15355  08C6  0838               	movf	DlyOff_Main@sw,w
 15356  08C7  319C  2436  3188   	fcall	_DelayOffPointSelect
 15357                           
 15358                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15359  08CA  0878               	movf	_DelayOff,w
 15360  08CB  0086               	movwf	6
 15361  08CC  3001               	movlw	1	; select bank2/3
 15362  08CD  0087               	movwf	7
 15363  08CE  1C81               	btfss	1,1
 15364  08CF  0008               	return
 15365                           
 15366                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15367  08D0  0878               	movf	_DelayOff,w
 15368  08D1  3E02               	addlw	2
 15369  08D2  0086               	movwf	6
 15370  08D3  3001               	movlw	1	; select bank2/3
 15371  08D4  0087               	movwf	7
 15372  08D5  3001               	movlw	1
 15373  08D6  0781               	addwf	1,f
 15374  08D7  3141               	addfsr 1,1
 15375  08D8  1803               	skipnc
 15376  08D9  0A81               	incf	1,f
 15377                           
 15378                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15379  08DA  0878               	movf	_DelayOff,w
 15380  08DB  3E02               	addlw	2
 15381  08DC  0086               	movwf	6
 15382  08DD  3001               	movlw	1	; select bank2/3
 15383  08DE  0087               	movwf	7
 15384  08DF  3F40               	moviw [0]fsr1
 15385  08E0  0020               	movlb	0	; select bank0
 15386  08E1  00B6               	movwf	??_DlyOff_Main
 15387  08E2  3F41               	moviw [1]fsr1
 15388  08E3  00B7               	movwf	??_DlyOff_Main+1
 15389  08E4  3017               	movlw	23
 15390  08E5  0237               	subwf	??_DlyOff_Main+1,w
 15391  08E6  3070               	movlw	112
 15392  08E7  1903               	skipnz
 15393  08E8  0236               	subwf	??_DlyOff_Main,w
 15394  08E9  1C03               	skipc
 15395  08EA  0008               	return
 15396                           
 15397                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15398  08EB  0878               	movf	_DelayOff,w
 15399  08EC  3E02               	addlw	2
 15400  08ED  0086               	movwf	6
 15401  08EE  3001               	movlw	1	; select bank2/3
 15402  08EF  0087               	movwf	7
 15403  08F0  3000               	movlw	0
 15404  08F1  3FC0               	movwi [0]fsr1
 15405  08F2  3FC1               	movwi [1]fsr1
 15406                           
 15407                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15408  08F3  3001               	movlw	1
 15409  08F4  00B6               	movwf	??_DlyOff_Main
 15410  08F5  0878               	movf	_DelayOff,w
 15411  08F6  3E04               	addlw	4
 15412  08F7  0086               	movwf	6
 15413  08F8  3001               	movlw	1	; select bank2/3
 15414  08F9  0087               	movwf	7
 15415  08FA  0836               	movf	??_DlyOff_Main,w
 15416  08FB  0781               	addwf	1,f
 15417                           
 15418                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15419  08FC  0878               	movf	_DelayOff,w
 15420  08FD  3E04               	addlw	4
 15421  08FE  0086               	movwf	6
 15422  08FF  3001               	movlw	1	; select bank2/3
 15423  0900  0087               	movwf	7
 15424  0901  0A78               	incf	_DelayOff,w
 15425  0902  0084               	movwf	4
 15426  0903  3001               	movlw	1	; select bank2/3
 15427  0904  0085               	movwf	5
 15428  0905  0800               	movf	0,w
 15429  0906  0201               	subwf	1,w
 15430  0907  1C03               	skipc
 15431  0908  0008               	return
 15432                           
 15433                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15434  0909  0878               	movf	_DelayOff,w
 15435  090A  3E04               	addlw	4
 15436  090B  0086               	movwf	6
 15437  090C  3001               	movlw	1	; select bank2/3
 15438  090D  0087               	movwf	7
 15439  090E  0181               	clrf	1
 15440                           
 15441                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15442  090F  0878               	movf	_DelayOff,w
 15443  0910  0086               	movwf	6
 15444  0911  3001               	movlw	1	; select bank2/3
 15445  0912  0087               	movwf	7
 15446  0913  1081               	bcf	1,1
 15447                           
 15448                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15449  0914  3064               	movlw	100
 15450  0915  00A9               	movwf	setBuz@time
 15451  0916  3000               	movlw	0
 15452  0917  00AA               	movwf	setBuz@time+1
 15453  0918  3001               	movlw	1
 15454  0919  3196  26F2  3188   	fcall	_setBuz
 15455                           
 15456                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15457  091C  0020               	movlb	0	; select bank0
 15458  091D  0838               	movf	DlyOff_Main@sw,w
 15459  091E  3196  2642         	fcall	_setDimmerLights_ErrorClose
 15460  0920  0008               	return
 15461  0921                     __end_of_DlyOff_Main:	
 15462                           
 15463                           	psect	text97
 15464  1642                     __ptext97:	
 15465 ;; *************** function _setDimmerLights_ErrorClose *****************
 15466 ;; Defined at:
 15467 ;;		line 562 in file "../src/Dimmer_B1.c"
 15468 ;; Parameters:    Size  Location     Type
 15469 ;;  lights          1    wreg     unsigned char 
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;  lights          1   19[BANK0 ] unsigned char 
 15472 ;;  i               2   20[BANK0 ] int 
 15473 ;;  count           1   18[BANK0 ] unsigned char 
 15474 ;; Return value:  Size  Location     Type
 15475 ;;		None               void
 15476 ;; Registers used:
 15477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15478 ;; Tracked objects:
 15479 ;;		On entry : 0/0
 15480 ;;		On exit  : 0/0
 15481 ;;		Unchanged: 0/0
 15482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;Total ram usage:        5 bytes
 15488 ;; Hardware stack levels used:    1
 15489 ;; Hardware stack levels required when called:    9
 15490 ;; This function calls:
 15491 ;;		_DimmerLightsPointSelect
 15492 ;;		_getDimmerLights_Status
 15493 ;;		_setDimmerLights_SwOff
 15494 ;; This function is called by:
 15495 ;;		_DlyOff_Main
 15496 ;;		_setMain_Exception
 15497 ;;		_setControl_Lights_Table
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           
 15502                           ;psect for function _setDimmerLights_ErrorClose
 15503  1642                     _setDimmerLights_ErrorClose:	
 15504                           
 15505                           ;incstack = 0
 15506                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15507                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15508  1642  0020               	movlb	0	; select bank0
 15509  1643  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15510                           
 15511                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15512  1644  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15513  1645  3AFF               	xorlw	255
 15514  1646  1D03               	skipz
 15515  1647  2E7D               	goto	l6099
 15516                           
 15517                           ;Dimmer_B1.c: 565: char count = 1;
 15518  1648  01B2               	clrf	setDimmerLights_ErrorClose@count
 15519  1649  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15520                           
 15521                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15522  164A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15523  164B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15524  164C                     l6097:	
 15525  164C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15526  164D  3A80               	xorlw	128
 15527  164E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15528  164F  3080               	movlw	128
 15529  1650  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15530  1651  1D03               	skipz
 15531  1652  2E55               	goto	u5135
 15532  1653  0832               	movf	setDimmerLights_ErrorClose@count,w
 15533  1654  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15534  1655                     u5135:	
 15535  1655  1803               	btfsc	3,0
 15536  1656  0008               	return
 15537                           
 15538                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15539  1657  0020               	movlb	0	; select bank0
 15540  1658  0834               	movf	setDimmerLights_ErrorClose@i,w
 15541  1659  3E01               	addlw	1
 15542  165A  319C  2441  3196   	fcall	_DimmerLightsPointSelect
 15543                           
 15544                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15545  165D  0020               	movlb	0	; select bank0
 15546  165E  0834               	movf	setDimmerLights_ErrorClose@i,w
 15547  165F  3E01               	addlw	1
 15548  1660  319D  2508  3196   	fcall	_getDimmerLights_Status
 15549  1663  3A01               	xorlw	1
 15550  1664  1D03               	skipz
 15551  1665  2E77               	goto	l6095
 15552                           
 15553                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15554  1666  0020               	movlb	0	; select bank0
 15555  1667  086F               	movf	_DimmerLights,w
 15556  1668  3E09               	addlw	9
 15557  1669  0086               	movwf	6
 15558  166A  3001               	movlw	1	; select bank2/3
 15559  166B  0087               	movwf	7
 15560  166C  1701               	bsf	1,6
 15561                           
 15562                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15563  166D  086F               	movf	_DimmerLights,w
 15564  166E  0086               	movwf	6
 15565  166F  3001               	movlw	1	; select bank2/3
 15566  1670  0087               	movwf	7
 15567  1671  1281               	bcf	1,5
 15568                           
 15569                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15570  1672  0834               	movf	setDimmerLights_ErrorClose@i,w
 15571  1673  3E01               	addlw	1
 15572  1674  3194  24BE  3196   	fcall	_setDimmerLights_SwOff
 15573  1677                     l6095:	
 15574  1677  3001               	movlw	1
 15575  1678  0020               	movlb	0	; select bank0
 15576  1679  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15577  167A  3000               	movlw	0
 15578  167B  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15579  167C  2E4C               	goto	l6097
 15580  167D                     l6099:	
 15581                           ;Dimmer_B1.c: 579: }
 15582                           ;Dimmer_B1.c: 580: }
 15583                           ;Dimmer_B1.c: 581: } else {
 15584                           
 15585                           
 15586                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15587  167D  0020               	movlb	0	; select bank0
 15588  167E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15589  167F  319C  2441  3196   	fcall	_DimmerLightsPointSelect
 15590                           
 15591                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15592  1682  0020               	movlb	0	; select bank0
 15593  1683  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15594  1684  319D  2508  3196   	fcall	_getDimmerLights_Status
 15595  1687  3A01               	xorlw	1
 15596  1688  1D03               	skipz
 15597  1689  0008               	return
 15598                           
 15599                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15600  168A  0020               	movlb	0	; select bank0
 15601  168B  086F               	movf	_DimmerLights,w
 15602  168C  3E09               	addlw	9
 15603  168D  0086               	movwf	6
 15604  168E  3001               	movlw	1	; select bank2/3
 15605  168F  0087               	movwf	7
 15606  1690  1701               	bsf	1,6
 15607                           
 15608                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15609  1691  086F               	movf	_DimmerLights,w
 15610  1692  0086               	movwf	6
 15611  1693  3001               	movlw	1	; select bank2/3
 15612  1694  0087               	movwf	7
 15613  1695  1281               	bcf	1,5
 15614                           
 15615                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15616  1696  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15617  1697  3194  24BE         	fcall	_setDimmerLights_SwOff
 15618  1699  0008               	return
 15619  169A                     __end_of_setDimmerLights_ErrorClose:	
 15620                           
 15621                           	psect	text98
 15622  14BE                     __ptext98:	
 15623 ;; *************** function _setDimmerLights_SwOff *****************
 15624 ;; Defined at:
 15625 ;;		line 524 in file "../src/Dimmer_B1.c"
 15626 ;; Parameters:    Size  Location     Type
 15627 ;;  sw              1    wreg     unsigned char 
 15628 ;; Auto vars:     Size  Location     Type
 15629 ;;  sw              1   16[BANK0 ] unsigned char 
 15630 ;;  command         1   15[BANK0 ] unsigned char 
 15631 ;; Return value:  Size  Location     Type
 15632 ;;		None               void
 15633 ;; Registers used:
 15634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;Total ram usage:        2 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    8
 15647 ;; This function calls:
 15648 ;;		_DimmerLightsPointSelect
 15649 ;;		_getDelayOff_GO
 15650 ;;		_setDelayOff_GO
 15651 ;;		_setDimmerLights_Trigger
 15652 ;;		_setDimmerLights_TriggerAdj
 15653 ;; This function is called by:
 15654 ;;		_setDimmerLights_ErrorClose
 15655 ;;		_setRFSW_Control
 15656 ;;		_setSw_Main
 15657 ;; This function uses a non-reentrant model
 15658 ;;
 15659                           
 15660                           
 15661                           ;psect for function _setDimmerLights_SwOff
 15662  14BE                     _setDimmerLights_SwOff:	
 15663                           
 15664                           ;incstack = 0
 15665                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15666                           ;setDimmerLights_SwOff@sw stored from wreg
 15667  14BE  0020               	movlb	0	; select bank0
 15668  14BF  00B0               	movwf	setDimmerLights_SwOff@sw
 15669                           
 15670                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15671  14C0  0830               	movf	setDimmerLights_SwOff@sw,w
 15672  14C1  319C  2441  3194   	fcall	_DimmerLightsPointSelect
 15673                           
 15674                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15675  14C4  0020               	movlb	0	; select bank0
 15676  14C5  086F               	movf	_DimmerLights,w
 15677  14C6  0086               	movwf	6
 15678  14C7  3001               	movlw	1	; select bank2/3
 15679  14C8  0087               	movwf	7
 15680  14C9  3000               	movlw	0
 15681  14CA  1A81               	btfsc	1,5
 15682  14CB  3001               	movlw	1
 15683  14CC  00AF               	movwf	setDimmerLights_SwOff@command
 15684                           
 15685                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15686  14CD  086F               	movf	_DimmerLights,w
 15687  14CE  3E09               	addlw	9
 15688  14CF  0086               	movwf	6
 15689  14D0  3001               	movlw	1	; select bank2/3
 15690  14D1  0087               	movwf	7
 15691  14D2  1F01               	btfss	1,6
 15692  14D3  0008               	return
 15693                           
 15694                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15695  14D4  086F               	movf	_DimmerLights,w
 15696  14D5  3E09               	addlw	9
 15697  14D6  0086               	movwf	6
 15698  14D7  3001               	movlw	1	; select bank2/3
 15699  14D8  0087               	movwf	7
 15700  14D9  1301               	bcf	1,6
 15701                           
 15702                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15703  14DA  086F               	movf	_DimmerLights,w
 15704  14DB  0086               	movwf	6
 15705  14DC  3001               	movlw	1	; select bank2/3
 15706  14DD  0087               	movwf	7
 15707  14DE  1E81               	btfss	1,5
 15708  14DF  2CF2               	goto	l5955
 15709                           
 15710                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15711  14E0  086F               	movf	_DimmerLights,w
 15712  14E1  3E09               	addlw	9
 15713  14E2  0086               	movwf	6
 15714  14E3  3001               	movlw	1	; select bank2/3
 15715  14E4  0087               	movwf	7
 15716  14E5  1F81               	btfss	1,7
 15717  14E6  0008               	return
 15718                           
 15719                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15720  14E7  086F               	movf	_DimmerLights,w
 15721  14E8  3E09               	addlw	9
 15722  14E9  0086               	movwf	6
 15723  14EA  3001               	movlw	1	; select bank2/3
 15724  14EB  0087               	movwf	7
 15725  14EC  1381               	bcf	1,7
 15726                           
 15727                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15728  14ED  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15729  14EE  0830               	movf	setDimmerLights_SwOff@sw,w
 15730  14EF  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
 15731                           
 15732                           ;Dimmer_B1.c: 533: }
 15733                           ;Dimmer_B1.c: 534: } else {
 15734  14F1  0008               	return
 15735  14F2                     l5955:	
 15736                           
 15737                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15738  14F2  0020               	movlb	0	; select bank0
 15739  14F3  01A2               	clrf	setDimmerLights_Trigger@command
 15740  14F4  0830               	movf	setDimmerLights_SwOff@sw,w
 15741  14F5  319E  2697  3194   	fcall	_setDimmerLights_Trigger
 15742                           
 15743                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15744  14F8  0020               	movlb	0	; select bank0
 15745  14F9  0830               	movf	setDimmerLights_SwOff@sw,w
 15746  14FA  319D  2518  3194   	fcall	_getDelayOff_GO
 15747  14FD  3A01               	xorlw	1
 15748  14FE  1D03               	skipz
 15749  14FF  0008               	return
 15750                           
 15751                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15752  1500  0020               	movlb	0	; select bank0
 15753  1501  01AA               	clrf	setDelayOff_GO@command
 15754  1502  01AB               	clrf	setDelayOff_GO@value
 15755  1503  0830               	movf	setDimmerLights_SwOff@sw,w
 15756  1504  3188  2067         	fcall	_setDelayOff_GO
 15757  1506  0008               	return
 15758  1507                     __end_of_setDimmerLights_SwOff:	
 15759                           
 15760                           	psect	text99
 15761  1ED4                     __ptext99:	
 15762 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15763 ;; Defined at:
 15764 ;;		line 773 in file "../src/Dimmer_B1.c"
 15765 ;; Parameters:    Size  Location     Type
 15766 ;;  lights          1    wreg     unsigned char 
 15767 ;;  command         1    2[BANK0 ] unsigned char 
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;  lights          1    4[BANK0 ] unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;		None               void
 15772 ;; Registers used:
 15773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15779 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;Total ram usage:        3 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    6
 15786 ;; This function calls:
 15787 ;;		_DimmerLightsPointSelect
 15788 ;; This function is called by:
 15789 ;;		_setDimmerLights_SwOff
 15790 ;;		_setDimmerLights_AdjControl
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           
 15795                           ;psect for function _setDimmerLights_TriggerAdj
 15796  1ED4                     _setDimmerLights_TriggerAdj:	
 15797                           
 15798                           ;incstack = 0
 15799                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15800                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15801  1ED4  0020               	movlb	0	; select bank0
 15802  1ED5  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15803                           
 15804                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15805  1ED6  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15806  1ED7  319C  2441         	fcall	_DimmerLightsPointSelect
 15807                           
 15808                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15809  1ED9  0020               	movlb	0	; select bank0
 15810  1EDA  086F               	movf	_DimmerLights,w
 15811  1EDB  3E08               	addlw	8
 15812  1EDC  0086               	movwf	6
 15813  1EDD  3001               	movlw	1	; select bank2/3
 15814  1EDE  0087               	movwf	7
 15815  1EDF  1601               	bsf	1,4
 15816                           
 15817                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15818  1EE0  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15819  1EE1  3A01               	xorlw	1
 15820  1EE2  3000               	movlw	0
 15821  1EE3  1903               	skipnz
 15822  1EE4  3001               	movlw	1
 15823  1EE5  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15824  1EE6  086F               	movf	_DimmerLights,w
 15825  1EE7  3E08               	addlw	8
 15826  1EE8  0086               	movwf	6
 15827  1EE9  3001               	movlw	1	; select bank2/3
 15828  1EEA  0087               	movwf	7
 15829  1EEB  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15830  1EEC  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15831  1EED  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15832  1EEE  0801               	movf	1,w
 15833  1EEF  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15834  1EF0  39F7               	andlw	-9
 15835  1EF1  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15836  1EF2  0081               	movwf	1
 15837  1EF3  0008               	return
 15838  1EF4                     __end_of_setDimmerLights_TriggerAdj:	
 15839                           
 15840                           	psect	text100
 15841  1E97                     __ptext100:	
 15842 ;; *************** function _setDimmerLights_Trigger *****************
 15843 ;; Defined at:
 15844 ;;		line 767 in file "../src/Dimmer_B1.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;  lights          1    wreg     unsigned char 
 15847 ;;  command         1    2[BANK0 ] unsigned char 
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  lights          1    4[BANK0 ] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;		None               void
 15852 ;; Registers used:
 15853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;Total ram usage:        3 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    6
 15866 ;; This function calls:
 15867 ;;		_DimmerLightsPointSelect
 15868 ;; This function is called by:
 15869 ;;		_setDimmerLights_SwOn
 15870 ;;		_setDimmerLights_SwOff
 15871 ;; This function uses a non-reentrant model
 15872 ;;
 15873                           
 15874                           
 15875                           ;psect for function _setDimmerLights_Trigger
 15876  1E97                     _setDimmerLights_Trigger:	
 15877                           
 15878                           ;incstack = 0
 15879                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15880                           ;setDimmerLights_Trigger@lights stored from wreg
 15881  1E97  0020               	movlb	0	; select bank0
 15882  1E98  00A4               	movwf	setDimmerLights_Trigger@lights
 15883                           
 15884                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15885  1E99  0824               	movf	setDimmerLights_Trigger@lights,w
 15886  1E9A  319C  2441         	fcall	_DimmerLightsPointSelect
 15887                           
 15888                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15889  1E9C  0020               	movlb	0	; select bank0
 15890  1E9D  086F               	movf	_DimmerLights,w
 15891  1E9E  3E08               	addlw	8
 15892  1E9F  0086               	movwf	6
 15893  1EA0  3001               	movlw	1	; select bank2/3
 15894  1EA1  0087               	movwf	7
 15895  1EA2  1501               	bsf	1,2
 15896                           
 15897                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15898  1EA3  0822               	movf	setDimmerLights_Trigger@command,w
 15899  1EA4  3A01               	xorlw	1
 15900  1EA5  3000               	movlw	0
 15901  1EA6  1903               	skipnz
 15902  1EA7  3001               	movlw	1
 15903  1EA8  00A3               	movwf	??_setDimmerLights_Trigger
 15904  1EA9  086F               	movf	_DimmerLights,w
 15905  1EAA  3E08               	addlw	8
 15906  1EAB  0086               	movwf	6
 15907  1EAC  3001               	movlw	1	; select bank2/3
 15908  1EAD  0087               	movwf	7
 15909  1EAE  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15910  1EAF  0801               	movf	1,w
 15911  1EB0  0623               	xorwf	??_setDimmerLights_Trigger,w
 15912  1EB1  39FD               	andlw	-3
 15913  1EB2  0623               	xorwf	??_setDimmerLights_Trigger,w
 15914  1EB3  0081               	movwf	1
 15915  1EB4  0008               	return
 15916  1EB5                     __end_of_setDimmerLights_Trigger:	
 15917                           
 15918                           	psect	text101
 15919  0867                     __ptext101:	
 15920 ;; *************** function _setDelayOff_GO *****************
 15921 ;; Defined at:
 15922 ;;		line 83 in file "../src/DelayOff_B1.c"
 15923 ;; Parameters:    Size  Location     Type
 15924 ;;  sw              1    wreg     unsigned char 
 15925 ;;  command         1   10[BANK0 ] unsigned char 
 15926 ;;  value           1   11[BANK0 ] unsigned char 
 15927 ;; Auto vars:     Size  Location     Type
 15928 ;;  sw              1   14[BANK0 ] unsigned char 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;		None               void
 15931 ;; Registers used:
 15932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15938 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;Total ram usage:        5 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    7
 15945 ;; This function calls:
 15946 ;;		_DelayOffPointSelect
 15947 ;;		_DelayTimejudge
 15948 ;; This function is called by:
 15949 ;;		_setDimmerLights_SwOff
 15950 ;;		_setRFSW_Control
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           
 15955                           ;psect for function _setDelayOff_GO
 15956  0867                     _setDelayOff_GO:	
 15957                           
 15958                           ;incstack = 0
 15959                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15960                           ;setDelayOff_GO@sw stored from wreg
 15961  0867  0020               	movlb	0	; select bank0
 15962  0868  00AE               	movwf	setDelayOff_GO@sw
 15963                           
 15964                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15965  0869  082E               	movf	setDelayOff_GO@sw,w
 15966  086A  319C  2436  3188   	fcall	_DelayOffPointSelect
 15967                           
 15968                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15969  086D  0020               	movlb	0	; select bank0
 15970  086E  082A               	movf	setDelayOff_GO@command,w
 15971  086F  3A01               	xorlw	1
 15972  0870  3000               	movlw	0
 15973  0871  1903               	skipnz
 15974  0872  3001               	movlw	1
 15975  0873  00AC               	movwf	??_setDelayOff_GO
 15976  0874  0878               	movf	_DelayOff,w
 15977  0875  0086               	movwf	6
 15978  0876  3001               	movlw	1	; select bank2/3
 15979  0877  0087               	movwf	7
 15980  0878  0DAC               	rlf	??_setDelayOff_GO,f
 15981  0879  0801               	movf	1,w
 15982  087A  062C               	xorwf	??_setDelayOff_GO,w
 15983  087B  39FD               	andlw	-3
 15984  087C  062C               	xorwf	??_setDelayOff_GO,w
 15985  087D  0081               	movwf	1
 15986                           
 15987                           ;DelayOff_B1.c: 89: if (command == 1) {
 15988  087E  082A               	movf	setDelayOff_GO@command,w
 15989  087F  3A01               	xorlw	1
 15990  0880  1D03               	skipz
 15991  0881  28AC               	goto	l5875
 15992                           
 15993                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15994  0882  082B               	movf	setDelayOff_GO@value,w
 15995  0883  3190  20F9  3188   	fcall	_DelayTimejudge
 15996  0886  0020               	movlb	0	; select bank0
 15997  0887  00AC               	movwf	??_setDelayOff_GO
 15998  0888  0A78               	incf	_DelayOff,w
 15999  0889  0086               	movwf	6
 16000  088A  3001               	movlw	1	; select bank2/3
 16001  088B  0087               	movwf	7
 16002  088C  082C               	movf	??_setDelayOff_GO,w
 16003  088D  0081               	movwf	1
 16004                           
 16005                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16006  088E  300F               	movlw	15
 16007  088F  052B               	andwf	setDelayOff_GO@value,w
 16008  0890  00AC               	movwf	??_setDelayOff_GO
 16009  0891  082C               	movf	??_setDelayOff_GO,w
 16010  0892  3A05               	xorlw	5
 16011  0893  1903               	skipnz
 16012  0894  2899               	goto	l5869
 16013  0895  082B               	movf	setDelayOff_GO@value,w
 16014  0896  390F               	andlw	15
 16015  0897  1D03               	btfss	3,2
 16016  0898  289F               	goto	l5873
 16017  0899                     l5869:	
 16018  0899  3026               	movlw	38
 16019  089A  022B               	subwf	setDelayOff_GO@value,w
 16020  089B  1803               	skipnc
 16021  089C  289F               	goto	l5873
 16022                           
 16023                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16024  089D  082B               	movf	setDelayOff_GO@value,w
 16025  089E  28A0               	goto	L8
 16026  089F                     l5873:	
 16027                           ;DelayOff_B1.c: 93: } else {
 16028                           
 16029                           
 16030                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16031  089F  3005               	movlw	5
 16032  08A0                     L8:	
 16033  08A0  00AC               	movwf	??_setDelayOff_GO
 16034  08A1  082E               	movf	setDelayOff_GO@sw,w
 16035  08A2  3E1A               	addlw	26
 16036  08A3  076E               	addwf	_product,w
 16037  08A4  00AD               	movwf	??_setDelayOff_GO+1
 16038  08A5  082D               	movf	??_setDelayOff_GO+1,w
 16039  08A6  0086               	movwf	6
 16040  08A7  3002               	movlw	2	; select bank4/5
 16041  08A8  0087               	movwf	7
 16042  08A9  082C               	movf	??_setDelayOff_GO,w
 16043  08AA  0081               	movwf	1
 16044                           
 16045                           ;DelayOff_B1.c: 95: }
 16046                           ;DelayOff_B1.c: 96: } else {
 16047  08AB  28B5               	goto	l5877
 16048  08AC                     l5875:	
 16049                           
 16050                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16051  08AC  082E               	movf	setDelayOff_GO@sw,w
 16052  08AD  3E1A               	addlw	26
 16053  08AE  076E               	addwf	_product,w
 16054  08AF  00AC               	movwf	??_setDelayOff_GO
 16055  08B0  082C               	movf	??_setDelayOff_GO,w
 16056  08B1  0086               	movwf	6
 16057  08B2  3002               	movlw	2	; select bank4/5
 16058  08B3  0087               	movwf	7
 16059  08B4  0181               	clrf	1
 16060  08B5                     l5877:	
 16061                           
 16062                           ;DelayOff_B1.c: 98: }
 16063                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16064  08B5  0878               	movf	_DelayOff,w
 16065  08B6  3E02               	addlw	2
 16066  08B7  0086               	movwf	6
 16067  08B8  3001               	movlw	1	; select bank2/3
 16068  08B9  0087               	movwf	7
 16069  08BA  3000               	movlw	0
 16070  08BB  3FC0               	movwi [0]fsr1
 16071  08BC  3FC1               	movwi [1]fsr1
 16072                           
 16073                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16074  08BD  0878               	movf	_DelayOff,w
 16075  08BE  3E04               	addlw	4
 16076  08BF  0086               	movwf	6
 16077  08C0  3001               	movlw	1	; select bank2/3
 16078  08C1  0087               	movwf	7
 16079  08C2  0181               	clrf	1
 16080  08C3  0008               	return
 16081  08C4                     __end_of_setDelayOff_GO:	
 16082                           
 16083                           	psect	text102
 16084  10F9                     __ptext102:	
 16085 ;; *************** function _DelayTimejudge *****************
 16086 ;; Defined at:
 16087 ;;		line 112 in file "../src/DelayOff_B1.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;  value           1    wreg     unsigned char 
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;  value           1    9[BANK0 ] unsigned char 
 16092 ;;  k               1    8[BANK0 ] unsigned char 
 16093 ;;  j               1    7[BANK0 ] unsigned char 
 16094 ;;  i               1    6[BANK0 ] unsigned char 
 16095 ;; Return value:  Size  Location     Type
 16096 ;;                  1    wreg      unsigned char 
 16097 ;; Registers used:
 16098 ;;		wreg, status,2, status,0, pclath, cstack
 16099 ;; Tracked objects:
 16100 ;;		On entry : 0/0
 16101 ;;		On exit  : 0/0
 16102 ;;		Unchanged: 0/0
 16103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;Total ram usage:        6 bytes
 16109 ;; Hardware stack levels used:    1
 16110 ;; Hardware stack levels required when called:    6
 16111 ;; This function calls:
 16112 ;;		___bmul
 16113 ;; This function is called by:
 16114 ;;		_setDelayOff_GO
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           
 16119                           ;psect for function _DelayTimejudge
 16120  10F9                     _DelayTimejudge:	
 16121                           
 16122                           ;incstack = 0
 16123                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16124                           ;DelayTimejudge@value stored from wreg
 16125  10F9  0020               	movlb	0	; select bank0
 16126  10FA  00A9               	movwf	DelayTimejudge@value
 16127                           
 16128                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16129  10FB  3005               	movlw	5
 16130  10FC  00A4               	movwf	??_DelayTimejudge
 16131  10FD  0824               	movf	??_DelayTimejudge,w
 16132  10FE  00A6               	movwf	DelayTimejudge@i
 16133  10FF  01A7               	clrf	DelayTimejudge@j
 16134  1100  01A8               	clrf	DelayTimejudge@k
 16135                           
 16136                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16137  1101  3031               	movlw	49
 16138  1102  0229               	subwf	DelayTimejudge@value,w
 16139  1103  1803               	skipnc
 16140  1104  2921               	goto	l5769
 16141                           
 16142                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16143  1105  0829               	movf	DelayTimejudge@value,w
 16144  1106  390F               	andlw	15
 16145  1107  00A4               	movwf	??_DelayTimejudge
 16146  1108  0824               	movf	??_DelayTimejudge,w
 16147  1109  00A7               	movwf	DelayTimejudge@j
 16148                           
 16149                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16150  110A  0829               	movf	DelayTimejudge@value,w
 16151  110B  00A4               	movwf	??_DelayTimejudge
 16152  110C  3004               	movlw	4
 16153  110D                     u4735:	
 16154  110D  36A4               	lsrf	??_DelayTimejudge,f
 16155  110E  0B89               	decfsz	9,f
 16156  110F  290D               	goto	u4735
 16157  1110  0824               	movf	??_DelayTimejudge,w
 16158  1111  390F               	andlw	15
 16159  1112  00A5               	movwf	??_DelayTimejudge+1
 16160  1113  0825               	movf	??_DelayTimejudge+1,w
 16161  1114  00A8               	movwf	DelayTimejudge@k
 16162                           
 16163                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16164  1115  300A               	movlw	10
 16165  1116  00A4               	movwf	??_DelayTimejudge
 16166  1117  0824               	movf	??_DelayTimejudge,w
 16167  1118  00A0               	movwf	___bmul@multiplicand
 16168  1119  0828               	movf	DelayTimejudge@k,w
 16169  111A  319D  258C         	fcall	___bmul
 16170  111C  0020               	movlb	0	; select bank0
 16171  111D  0727               	addwf	DelayTimejudge@j,w
 16172  111E  00A5               	movwf	??_DelayTimejudge+1
 16173  111F  0825               	movf	??_DelayTimejudge+1,w
 16174  1120  00A6               	movwf	DelayTimejudge@i
 16175  1121                     l5769:	
 16176                           
 16177                           ;DelayOff_B1.c: 118: }
 16178                           ;DelayOff_B1.c: 139: return i;
 16179  1121  0826               	movf	DelayTimejudge@i,w
 16180  1122  0008               	return
 16181  1123                     __end_of_DelayTimejudge:	
 16182                           
 16183                           	psect	text103
 16184  1D8C                     __ptext103:	
 16185 ;; *************** function ___bmul *****************
 16186 ;; Defined at:
 16187 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16188 ;; Parameters:    Size  Location     Type
 16189 ;;  multiplier      1    wreg     unsigned char 
 16190 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16193 ;;  product         1    2[BANK0 ] unsigned char 
 16194 ;; Return value:  Size  Location     Type
 16195 ;;                  1    wreg      unsigned char 
 16196 ;; Registers used:
 16197 ;;		wreg, status,2, status,0
 16198 ;; Tracked objects:
 16199 ;;		On entry : 0/0
 16200 ;;		On exit  : 0/0
 16201 ;;		Unchanged: 0/0
 16202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16203 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;Total ram usage:        4 bytes
 16208 ;; Hardware stack levels used:    1
 16209 ;; Hardware stack levels required when called:    5
 16210 ;; This function calls:
 16211 ;;		Nothing
 16212 ;; This function is called by:
 16213 ;;		_DelayTimejudge
 16214 ;; This function uses a non-reentrant model
 16215 ;;
 16216                           
 16217                           
 16218                           ;psect for function ___bmul
 16219  1D8C                     ___bmul:	
 16220                           
 16221                           ;incstack = 0
 16222                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16223                           ;___bmul@multiplier stored from wreg
 16224  1D8C  0020               	movlb	0	; select bank0
 16225  1D8D  00A3               	movwf	___bmul@multiplier
 16226  1D8E  01A2               	clrf	___bmul@product
 16227  1D8F                     l5511:	
 16228  1D8F  1C23               	btfss	___bmul@multiplier,0
 16229  1D90  2D95               	goto	l5515
 16230  1D91  0820               	movf	___bmul@multiplicand,w
 16231  1D92  00A1               	movwf	??___bmul
 16232  1D93  0821               	movf	??___bmul,w
 16233  1D94  07A2               	addwf	___bmul@product,f
 16234  1D95                     l5515:	
 16235  1D95  1003               	clrc
 16236  1D96  0DA0               	rlf	___bmul@multiplicand,f
 16237  1D97  1003               	clrc
 16238  1D98  0CA3               	rrf	___bmul@multiplier,f
 16239  1D99  08A3               	movf	___bmul@multiplier,f
 16240  1D9A  1D03               	skipz
 16241  1D9B  2D8F               	goto	l5511
 16242  1D9C  0822               	movf	___bmul@product,w
 16243  1D9D  0008               	return
 16244  1D9E                     __end_of___bmul:	
 16245                           
 16246                           	psect	text104
 16247  1D18                     __ptext104:	
 16248 ;; *************** function _getDelayOff_GO *****************
 16249 ;; Defined at:
 16250 ;;		line 105 in file "../src/DelayOff_B1.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;  sw              1    wreg     unsigned char 
 16253 ;; Auto vars:     Size  Location     Type
 16254 ;;  sw              1    2[BANK0 ] unsigned char 
 16255 ;;  go              1    3[BANK0 ] unsigned char 
 16256 ;; Return value:  Size  Location     Type
 16257 ;;                  1    wreg      unsigned char 
 16258 ;; Registers used:
 16259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16260 ;; Tracked objects:
 16261 ;;		On entry : 0/0
 16262 ;;		On exit  : 0/0
 16263 ;;		Unchanged: 0/0
 16264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;Total ram usage:        2 bytes
 16270 ;; Hardware stack levels used:    1
 16271 ;; Hardware stack levels required when called:    6
 16272 ;; This function calls:
 16273 ;;		_DelayOffPointSelect
 16274 ;; This function is called by:
 16275 ;;		_setDimmerLights_SwOff
 16276 ;;		_setRFSW_Control
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           
 16281                           ;psect for function _getDelayOff_GO
 16282  1D18                     _getDelayOff_GO:	
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16286                           ;getDelayOff_GO@sw stored from wreg
 16287  1D18  0020               	movlb	0	; select bank0
 16288  1D19  00A2               	movwf	getDelayOff_GO@sw
 16289                           
 16290                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16291  1D1A  0822               	movf	getDelayOff_GO@sw,w
 16292  1D1B  319C  2436         	fcall	_DelayOffPointSelect
 16293                           
 16294                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16295  1D1D  0878               	movf	_DelayOff,w
 16296  1D1E  0086               	movwf	6
 16297  1D1F  3001               	movlw	1	; select bank2/3
 16298  1D20  0087               	movwf	7
 16299  1D21  3000               	movlw	0
 16300  1D22  1881               	btfsc	1,1
 16301  1D23  3001               	movlw	1
 16302  1D24  0020               	movlb	0	; select bank0
 16303  1D25  00A3               	movwf	getDelayOff_GO@go
 16304                           
 16305                           ;DelayOff_B1.c: 108: return go;
 16306  1D26  0823               	movf	getDelayOff_GO@go,w
 16307  1D27  0008               	return
 16308  1D28                     __end_of_getDelayOff_GO:	
 16309                           
 16310                           	psect	text105
 16311  1D08                     __ptext105:	
 16312 ;; *************** function _getDimmerLights_Status *****************
 16313 ;; Defined at:
 16314 ;;		line 445 in file "../src/Dimmer_B1.c"
 16315 ;; Parameters:    Size  Location     Type
 16316 ;;  lights          1    wreg     unsigned char 
 16317 ;; Auto vars:     Size  Location     Type
 16318 ;;  lights          1    2[BANK0 ] unsigned char 
 16319 ;;  status          1    3[BANK0 ] unsigned char 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  1    wreg      unsigned char 
 16322 ;; Registers used:
 16323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;Total ram usage:        2 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    6
 16336 ;; This function calls:
 16337 ;;		_DimmerLightsPointSelect
 16338 ;; This function is called by:
 16339 ;;		_setDimmerLights_ErrorClose
 16340 ;;		_getMain_LightsStatus
 16341 ;;		_setRFSW_Control
 16342 ;;		_setRFSW_AdjControl
 16343 ;; This function uses a non-reentrant model
 16344 ;;
 16345                           
 16346                           
 16347                           ;psect for function _getDimmerLights_Status
 16348  1D08                     _getDimmerLights_Status:	
 16349                           
 16350                           ;incstack = 0
 16351                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16352                           ;getDimmerLights_Status@lights stored from wreg
 16353  1D08  0020               	movlb	0	; select bank0
 16354  1D09  00A2               	movwf	getDimmerLights_Status@lights
 16355                           
 16356                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16357  1D0A  0822               	movf	getDimmerLights_Status@lights,w
 16358  1D0B  319C  2441         	fcall	_DimmerLightsPointSelect
 16359                           
 16360                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16361  1D0D  0020               	movlb	0	; select bank0
 16362  1D0E  086F               	movf	_DimmerLights,w
 16363  1D0F  0086               	movwf	6
 16364  1D10  3001               	movlw	1	; select bank2/3
 16365  1D11  0087               	movwf	7
 16366  1D12  3000               	movlw	0
 16367  1D13  1A81               	btfsc	1,5
 16368  1D14  3001               	movlw	1
 16369  1D15  00A3               	movwf	getDimmerLights_Status@status
 16370                           
 16371                           ;Dimmer_B1.c: 448: return status;
 16372  1D16  0823               	movf	getDimmerLights_Status@status,w
 16373  1D17  0008               	return
 16374  1D18                     __end_of_getDimmerLights_Status:	
 16375                           
 16376                           	psect	text106
 16377  1C41                     __ptext106:	
 16378 ;; *************** function _DimmerLightsPointSelect *****************
 16379 ;; Defined at:
 16380 ;;		line 310 in file "../src/Dimmer_B1.c"
 16381 ;; Parameters:    Size  Location     Type
 16382 ;;  lights          1    wreg     unsigned char 
 16383 ;; Auto vars:     Size  Location     Type
 16384 ;;  lights          1    1[BANK0 ] unsigned char 
 16385 ;; Return value:  Size  Location     Type
 16386 ;;		None               void
 16387 ;; Registers used:
 16388 ;;		wreg
 16389 ;; Tracked objects:
 16390 ;;		On entry : 0/0
 16391 ;;		On exit  : 0/0
 16392 ;;		Unchanged: 0/0
 16393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;Total ram usage:        2 bytes
 16399 ;; Hardware stack levels used:    1
 16400 ;; Hardware stack levels required when called:    5
 16401 ;; This function calls:
 16402 ;;		Nothing
 16403 ;; This function is called by:
 16404 ;;		_setDimmerLights_Initialization
 16405 ;;		_setDimmerLights_Main
 16406 ;;		_getDimmerLights_Status
 16407 ;;		_setDimmerLights_SwOn
 16408 ;;		_setDimmerLights_SwOff
 16409 ;;		_setDimmerLights_AdjControl
 16410 ;;		_setDimmerLights_ErrorClose
 16411 ;;		_setDimmerLights
 16412 ;;		_setDimmerLights_Adj
 16413 ;;		_setDimmerLights_AdjRF
 16414 ;;		_setDimmerLights_Trigger
 16415 ;;		_setDimmerLights_TriggerAdj
 16416 ;;		_setDimmerLights_Status
 16417 ;;		_setDimmerLights_GO
 16418 ;;		_setDimmerLights_MaxmumValue
 16419 ;; This function uses a non-reentrant model
 16420 ;;
 16421                           
 16422                           
 16423                           ;psect for function _DimmerLightsPointSelect
 16424  1C41                     _DimmerLightsPointSelect:	
 16425                           
 16426                           ;incstack = 0
 16427                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16428                           ;DimmerLightsPointSelect@lights stored from wreg
 16429  1C41  0020               	movlb	0	; select bank0
 16430  1C42  00A1               	movwf	DimmerLightsPointSelect@lights
 16431                           
 16432                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16433  1C43  0821               	movf	DimmerLightsPointSelect@lights,w
 16434  1C44  3A01               	xorlw	1
 16435  1C45  1D03               	skipz
 16436  1C46  0008               	return
 16437                           
 16438                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16439  1C47  30C5               	movlw	_DimmerLights1& (0+255)
 16440  1C48  00A0               	movwf	??_DimmerLightsPointSelect
 16441  1C49  0820               	movf	??_DimmerLightsPointSelect,w
 16442  1C4A  00EF               	movwf	_DimmerLights
 16443  1C4B  0008               	return
 16444  1C4C                     __end_of_DimmerLightsPointSelect:	
 16445                           
 16446                           	psect	text107
 16447  16F2                     __ptext107:	
 16448 ;; *************** function _setBuz *****************
 16449 ;; Defined at:
 16450 ;;		line 22 in file "../src/Buzzer_B1.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;  count           1    wreg     unsigned char 
 16453 ;;  time            2    9[BANK0 ] int 
 16454 ;; Auto vars:     Size  Location     Type
 16455 ;;  count           1   12[BANK0 ] unsigned char 
 16456 ;; Return value:  Size  Location     Type
 16457 ;;		None               void
 16458 ;; Registers used:
 16459 ;;		wreg, status,2, status,0, pclath, cstack
 16460 ;; Tracked objects:
 16461 ;;		On entry : 0/0
 16462 ;;		On exit  : 0/0
 16463 ;;		Unchanged: 0/0
 16464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16465 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16468 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;Total ram usage:        4 bytes
 16470 ;; Hardware stack levels used:    1
 16471 ;; Hardware stack levels required when called:    6
 16472 ;; This function calls:
 16473 ;;		___awdiv
 16474 ;; This function is called by:
 16475 ;;		_DlyOff_Main
 16476 ;;		_setDimmerLights_Main
 16477 ;;		_setDimmerLights_SwOn
 16478 ;;		_my_MainTimer
 16479 ;;		_setMain_Exception
 16480 ;;		_setTemp_Main
 16481 ;;		_setLog_Code
 16482 ;;		_setControl_Lights_Table
 16483 ;;		_setRFSW_Control
 16484 ;;		_setSw_Main
 16485 ;; This function uses a non-reentrant model
 16486 ;;
 16487                           
 16488                           
 16489                           ;psect for function _setBuz
 16490  16F2                     _setBuz:	
 16491                           
 16492                           ;incstack = 0
 16493                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16494                           ;setBuz@count stored from wreg
 16495  16F2  0020               	movlb	0	; select bank0
 16496  16F3  00AC               	movwf	setBuz@count
 16497                           
 16498                           ;Buzzer_B1.c: 23: time /= 10;
 16499  16F4  300A               	movlw	10
 16500  16F5  00A0               	movwf	___awdiv@divisor
 16501  16F6  3000               	movlw	0
 16502  16F7  00A1               	movwf	___awdiv@divisor+1
 16503  16F8  082A               	movf	setBuz@time+1,w
 16504  16F9  01A3               	clrf	___awdiv@dividend+1
 16505  16FA  07A3               	addwf	___awdiv@dividend+1,f
 16506  16FB  0829               	movf	setBuz@time,w
 16507  16FC  01A2               	clrf	___awdiv@dividend
 16508  16FD  07A2               	addwf	___awdiv@dividend,f
 16509  16FE  3195  25EE  3196   	fcall	___awdiv
 16510  1701  0020               	movlb	0	; select bank0
 16511  1702  0821               	movf	?___awdiv+1,w
 16512  1703  01AA               	clrf	setBuz@time+1
 16513  1704  07AA               	addwf	setBuz@time+1,f
 16514  1705  0820               	movf	?___awdiv,w
 16515  1706  01A9               	clrf	setBuz@time
 16516  1707  07A9               	addwf	setBuz@time,f
 16517                           
 16518                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16519  1708  0021               	movlb	1	; select bank1
 16520  1709  1C2E               	btfss	_Buz1^(0+128),0
 16521  170A  0008               	return
 16522                           
 16523                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16524  170B  18AE               	btfsc	_Buz1^(0+128),1
 16525  170C  2F23               	goto	l84
 16526                           
 16527                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16528  170D  14AE               	bsf	_Buz1^(0+128),1
 16529                           
 16530                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16531  170E  01AF               	clrf	(_Buz1^(0+128)+1)
 16532  170F  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16533                           
 16534                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16535  1710  0020               	movlb	0	; select bank0
 16536  1711  082C               	movf	setBuz@count,w
 16537  1712  00AB               	movwf	??_setBuz
 16538  1713  082B               	movf	??_setBuz,w
 16539  1714  0021               	movlb	1	; select bank1
 16540  1715  00B1               	movwf	(_Buz1^(0+128)+3)
 16541                           
 16542                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16543  1716  0020               	movlb	0	; select bank0
 16544  1717  082A               	movf	setBuz@time+1,w
 16545  1718  0021               	movlb	1	; select bank1
 16546  1719  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16547  171A  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16548  171B  0020               	movlb	0	; select bank0
 16549  171C  0829               	movf	setBuz@time,w
 16550  171D  0021               	movlb	1	; select bank1
 16551  171E  01B4               	clrf	(_Buz1^(0+128)+6)
 16552  171F  07B4               	addwf	(_Buz1^(0+128)+6),f
 16553                           
 16554                           ;Buzzer_B1.c: 30: RB3 = 1;
 16555  1720  0020               	movlb	0	; select bank0
 16556  1721  158D               	bsf	13,3	;volatile
 16557                           
 16558                           ;Buzzer_B1.c: 31: } else {
 16559  1722  0008               	return
 16560  1723                     l84:	
 16561                           
 16562                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16563  1723  19AE               	btfsc	_Buz1^(0+128),3
 16564  1724  2F37               	goto	l86
 16565                           
 16566                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16567  1725  15AE               	bsf	_Buz1^(0+128),3
 16568                           
 16569                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16570  1726  0020               	movlb	0	; select bank0
 16571  1727  082C               	movf	setBuz@count,w
 16572  1728  00AB               	movwf	??_setBuz
 16573  1729  082B               	movf	??_setBuz,w
 16574  172A  0021               	movlb	1	; select bank1
 16575  172B  00B2               	movwf	(_Buz1^(0+128)+4)
 16576                           
 16577                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16578  172C  0020               	movlb	0	; select bank0
 16579  172D  082A               	movf	setBuz@time+1,w
 16580  172E  0021               	movlb	1	; select bank1
 16581  172F  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16582  1730  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16583  1731  0020               	movlb	0	; select bank0
 16584  1732  0829               	movf	setBuz@time,w
 16585  1733  0021               	movlb	1	; select bank1
 16586  1734  01B6               	clrf	(_Buz1^(0+128)+8)
 16587  1735  07B6               	addwf	(_Buz1^(0+128)+8),f
 16588                           
 16589                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16590  1736  0008               	return
 16591  1737                     l86:	
 16592  1737  1A2E               	btfsc	_Buz1^(0+128),4
 16593  1738  0008               	return
 16594                           
 16595                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16596  1739  162E               	bsf	_Buz1^(0+128),4
 16597                           
 16598                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16599  173A  0020               	movlb	0	; select bank0
 16600  173B  082C               	movf	setBuz@count,w
 16601  173C  00AB               	movwf	??_setBuz
 16602  173D  082B               	movf	??_setBuz,w
 16603  173E  0021               	movlb	1	; select bank1
 16604  173F  00B3               	movwf	(_Buz1^(0+128)+5)
 16605                           
 16606                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16607  1740  0020               	movlb	0	; select bank0
 16608  1741  082A               	movf	setBuz@time+1,w
 16609  1742  0021               	movlb	1	; select bank1
 16610  1743  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16611  1744  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16612  1745  0020               	movlb	0	; select bank0
 16613  1746  0829               	movf	setBuz@time,w
 16614  1747  0021               	movlb	1	; select bank1
 16615  1748  01B8               	clrf	(_Buz1^(0+128)+10)
 16616  1749  07B8               	addwf	(_Buz1^(0+128)+10),f
 16617  174A  0008               	return
 16618  174B                     __end_of_setBuz:	
 16619                           
 16620                           	psect	text108
 16621  15EE                     __ptext108:	
 16622 ;; *************** function ___awdiv *****************
 16623 ;; Defined at:
 16624 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16625 ;; Parameters:    Size  Location     Type
 16626 ;;  divisor         2    0[BANK0 ] int 
 16627 ;;  dividend        2    2[BANK0 ] int 
 16628 ;; Auto vars:     Size  Location     Type
 16629 ;;  quotient        2    7[BANK0 ] int 
 16630 ;;  sign            1    6[BANK0 ] unsigned char 
 16631 ;;  counter         1    5[BANK0 ] unsigned char 
 16632 ;; Return value:  Size  Location     Type
 16633 ;;                  2    0[BANK0 ] int 
 16634 ;; Registers used:
 16635 ;;		wreg, status,2, status,0
 16636 ;; Tracked objects:
 16637 ;;		On entry : 0/0
 16638 ;;		On exit  : 0/0
 16639 ;;		Unchanged: 0/0
 16640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16641 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;Total ram usage:        9 bytes
 16646 ;; Hardware stack levels used:    1
 16647 ;; Hardware stack levels required when called:    5
 16648 ;; This function calls:
 16649 ;;		Nothing
 16650 ;; This function is called by:
 16651 ;;		_setBuz
 16652 ;; This function uses a non-reentrant model
 16653 ;;
 16654                           
 16655                           
 16656                           ;psect for function ___awdiv
 16657  15EE                     ___awdiv:	
 16658                           
 16659                           ;incstack = 0
 16660                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16661  15EE  0020               	movlb	0	; select bank0
 16662  15EF  01A6               	clrf	___awdiv@sign
 16663  15F0  1FA1               	btfss	___awdiv@divisor+1,7
 16664  15F1  2DF9               	goto	l5793
 16665  15F2  09A0               	comf	___awdiv@divisor,f
 16666  15F3  09A1               	comf	___awdiv@divisor+1,f
 16667  15F4  0AA0               	incf	___awdiv@divisor,f
 16668  15F5  1903               	skipnz
 16669  15F6  0AA1               	incf	___awdiv@divisor+1,f
 16670  15F7  01A6               	clrf	___awdiv@sign
 16671  15F8  0AA6               	incf	___awdiv@sign,f
 16672  15F9                     l5793:	
 16673  15F9  1FA3               	btfss	___awdiv@dividend+1,7
 16674  15FA  2E04               	goto	l5799
 16675  15FB  09A2               	comf	___awdiv@dividend,f
 16676  15FC  09A3               	comf	___awdiv@dividend+1,f
 16677  15FD  0AA2               	incf	___awdiv@dividend,f
 16678  15FE  1903               	skipnz
 16679  15FF  0AA3               	incf	___awdiv@dividend+1,f
 16680  1600  3001               	movlw	1
 16681  1601  00A4               	movwf	??___awdiv
 16682  1602  0824               	movf	??___awdiv,w
 16683  1603  06A6               	xorwf	___awdiv@sign,f
 16684  1604                     l5799:	
 16685  1604  01A7               	clrf	___awdiv@quotient
 16686  1605  01A8               	clrf	___awdiv@quotient+1
 16687  1606  0821               	movf	___awdiv@divisor+1,w
 16688  1607  0420               	iorwf	___awdiv@divisor,w
 16689  1608  1903               	skipnz
 16690  1609  2E33               	goto	l5821
 16691  160A  01A5               	clrf	___awdiv@counter
 16692  160B  0AA5               	incf	___awdiv@counter,f
 16693  160C                     l5809:	
 16694  160C  1BA1               	btfsc	___awdiv@divisor+1,7
 16695  160D  2E18               	goto	l5811
 16696  160E  3001               	movlw	1
 16697  160F                     u4785:	
 16698  160F  35A0               	lslf	___awdiv@divisor,f
 16699  1610  0DA1               	rlf	___awdiv@divisor+1,f
 16700  1611  0B89               	decfsz	9,f
 16701  1612  2E0F               	goto	u4785
 16702  1613  3001               	movlw	1
 16703  1614  00A4               	movwf	??___awdiv
 16704  1615  0824               	movf	??___awdiv,w
 16705  1616  07A5               	addwf	___awdiv@counter,f
 16706  1617  2E0C               	goto	l5809
 16707  1618                     l5811:	
 16708  1618  3001               	movlw	1
 16709  1619                     u4805:	
 16710  1619  35A7               	lslf	___awdiv@quotient,f
 16711  161A  0DA8               	rlf	___awdiv@quotient+1,f
 16712  161B  0B89               	decfsz	9,f
 16713  161C  2E19               	goto	u4805
 16714  161D  0821               	movf	___awdiv@divisor+1,w
 16715  161E  0223               	subwf	___awdiv@dividend+1,w
 16716  161F  1D03               	skipz
 16717  1620  2E23               	goto	u4815
 16718  1621  0820               	movf	___awdiv@divisor,w
 16719  1622  0222               	subwf	___awdiv@dividend,w
 16720  1623                     u4815:	
 16721  1623  1C03               	skipc
 16722  1624  2E2A               	goto	l5817
 16723  1625  0820               	movf	___awdiv@divisor,w
 16724  1626  02A2               	subwf	___awdiv@dividend,f
 16725  1627  0821               	movf	___awdiv@divisor+1,w
 16726  1628  3BA3               	subwfb	___awdiv@dividend+1,f
 16727  1629  1427               	bsf	___awdiv@quotient,0
 16728  162A                     l5817:	
 16729  162A  3001               	movlw	1
 16730  162B                     u4825:	
 16731  162B  36A1               	lsrf	___awdiv@divisor+1,f
 16732  162C  0CA0               	rrf	___awdiv@divisor,f
 16733  162D  0B89               	decfsz	9,f
 16734  162E  2E2B               	goto	u4825
 16735  162F  3001               	movlw	1
 16736  1630  02A5               	subwf	___awdiv@counter,f
 16737  1631  1D03               	btfss	3,2
 16738  1632  2E18               	goto	l5811
 16739  1633                     l5821:	
 16740  1633  0826               	movf	___awdiv@sign,w
 16741  1634  1903               	btfsc	3,2
 16742  1635  2E3B               	goto	l5825
 16743  1636  09A7               	comf	___awdiv@quotient,f
 16744  1637  09A8               	comf	___awdiv@quotient+1,f
 16745  1638  0AA7               	incf	___awdiv@quotient,f
 16746  1639  1903               	skipnz
 16747  163A  0AA8               	incf	___awdiv@quotient+1,f
 16748  163B                     l5825:	
 16749  163B  0828               	movf	___awdiv@quotient+1,w
 16750  163C  01A1               	clrf	?___awdiv+1
 16751  163D  07A1               	addwf	?___awdiv+1,f
 16752  163E  0827               	movf	___awdiv@quotient,w
 16753  163F  01A0               	clrf	?___awdiv
 16754  1640  07A0               	addwf	?___awdiv,f
 16755  1641  0008               	return
 16756  1642                     __end_of___awdiv:	
 16757                           
 16758                           	psect	text109
 16759  1BB5                     __ptext109:	
 16760 ;; *************** function _DelayOff_Initialization *****************
 16761 ;; Defined at:
 16762 ;;		line 26 in file "../src/DelayOff_B1.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;		None
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;		None
 16767 ;; Return value:  Size  Location     Type
 16768 ;;		None               void
 16769 ;; Registers used:
 16770 ;;		wreg, status,2, status,0, pclath, cstack
 16771 ;; Tracked objects:
 16772 ;;		On entry : 0/0
 16773 ;;		On exit  : 0/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;Total ram usage:        0 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; Hardware stack levels required when called:    7
 16783 ;; This function calls:
 16784 ;;		_DlyOff_Initialization
 16785 ;; This function is called by:
 16786 ;;		_main
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           
 16791                           ;psect for function _DelayOff_Initialization
 16792  1BB5                     _DelayOff_Initialization:	
 16793                           
 16794                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16795                           
 16796                           ;incstack = 0
 16797                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16798  1BB5  3001               	movlw	1
 16799  1BB6  319B  23D3         	fcall	_DlyOff_Initialization
 16800  1BB8  0008               	return
 16801  1BB9                     __end_of_DelayOff_Initialization:	
 16802                           
 16803                           	psect	text110
 16804  1BD3                     __ptext110:	
 16805 ;; *************** function _DlyOff_Initialization *****************
 16806 ;; Defined at:
 16807 ;;		line 56 in file "../src/DelayOff_B1.c"
 16808 ;; Parameters:    Size  Location     Type
 16809 ;;  sw              1    wreg     unsigned char 
 16810 ;; Auto vars:     Size  Location     Type
 16811 ;;  sw              1    2[BANK0 ] unsigned char 
 16812 ;; Return value:  Size  Location     Type
 16813 ;;		None               void
 16814 ;; Registers used:
 16815 ;;		wreg, status,2, status,0, pclath, cstack
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;Total ram usage:        1 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:    6
 16828 ;; This function calls:
 16829 ;;		_DelayOffPointSelect
 16830 ;; This function is called by:
 16831 ;;		_DelayOff_Initialization
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _DlyOff_Initialization
 16837  1BD3                     _DlyOff_Initialization:	
 16838                           
 16839                           ;incstack = 0
 16840                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16841                           ;DlyOff_Initialization@sw stored from wreg
 16842  1BD3  0020               	movlb	0	; select bank0
 16843  1BD4  00A2               	movwf	DlyOff_Initialization@sw
 16844                           
 16845                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16846  1BD5  0822               	movf	DlyOff_Initialization@sw,w
 16847  1BD6  319C  2436         	fcall	_DelayOffPointSelect
 16848  1BD8  0008               	return
 16849  1BD9                     __end_of_DlyOff_Initialization:	
 16850                           
 16851                           	psect	text111
 16852  1C36                     __ptext111:	
 16853 ;; *************** function _DelayOffPointSelect *****************
 16854 ;; Defined at:
 16855 ;;		line 7 in file "../src/DelayOff_B1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;  sw              1    wreg     unsigned char 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  sw              1    1[BANK0 ] unsigned char 
 16860 ;; Return value:  Size  Location     Type
 16861 ;;		None               void
 16862 ;; Registers used:
 16863 ;;		wreg
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;Total ram usage:        2 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    5
 16876 ;; This function calls:
 16877 ;;		Nothing
 16878 ;; This function is called by:
 16879 ;;		_DlyOff_Initialization
 16880 ;;		_DlyOff_Main
 16881 ;;		_setDelayOff_GO
 16882 ;;		_getDelayOff_GO
 16883 ;; This function uses a non-reentrant model
 16884 ;;
 16885                           
 16886                           
 16887                           ;psect for function _DelayOffPointSelect
 16888  1C36                     _DelayOffPointSelect:	
 16889                           
 16890                           ;incstack = 0
 16891                           ; Regs used in _DelayOffPointSelect: [wreg]
 16892                           ;DelayOffPointSelect@sw stored from wreg
 16893  1C36  0020               	movlb	0	; select bank0
 16894  1C37  00A1               	movwf	DelayOffPointSelect@sw
 16895                           
 16896                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16897  1C38  0821               	movf	DelayOffPointSelect@sw,w
 16898  1C39  3A01               	xorlw	1
 16899  1C3A  1D03               	skipz
 16900  1C3B  0008               	return
 16901                           
 16902                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16903  1C3C  30DD               	movlw	_DlySw1& (0+255)
 16904  1C3D  00A0               	movwf	??_DelayOffPointSelect
 16905  1C3E  0820               	movf	??_DelayOffPointSelect,w
 16906  1C3F  00F8               	movwf	_DelayOff
 16907  1C40  0008               	return
 16908  1C41                     __end_of_DelayOffPointSelect:	
 16909                           
 16910                           	psect	text112
 16911  1E25                     __ptext112:	
 16912 ;; *************** function _CC2500_PowerOnInitial *****************
 16913 ;; Defined at:
 16914 ;;		line 119 in file "../src/CC2500_B1.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;		None
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;		None
 16919 ;; Return value:  Size  Location     Type
 16920 ;;		None               void
 16921 ;; Registers used:
 16922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        0 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    8
 16935 ;; This function calls:
 16936 ;;		_CC2500_ClearRXFIFO
 16937 ;;		_CC2500_ClearTXFIFO
 16938 ;;		_CC2500_FrequencyCabr
 16939 ;;		_CC2500_InitPATable
 16940 ;;		_CC2500_InitSetREG
 16941 ;;		_CC2500_PowerRST
 16942 ;;		_CC2500_SIDLEMode
 16943 ;; This function is called by:
 16944 ;;		_main
 16945 ;; This function uses a non-reentrant model
 16946 ;;
 16947                           
 16948                           
 16949                           ;psect for function _CC2500_PowerOnInitial
 16950  1E25                     _CC2500_PowerOnInitial:	
 16951                           
 16952                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16953                           
 16954                           ;incstack = 0
 16955                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16956  1E25  3194  247B  319E   	fcall	_CC2500_PowerRST
 16957                           
 16958                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16959  1E28  3190  20CF  319E   	fcall	_CC2500_InitSetREG
 16960                           
 16961                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16962  1E2B  319E  26B5  319E   	fcall	_CC2500_InitPATable
 16963                           
 16964                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16965  1E2E  319B  23AD  319E   	fcall	_CC2500_ClearTXFIFO
 16966                           
 16967                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16968  1E31  319B  23A9  319E   	fcall	_CC2500_ClearRXFIFO
 16969                           
 16970                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16971  1E34  319C  2478  319E   	fcall	_CC2500_FrequencyCabr
 16972                           
 16973                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16974  1E37  319B  23B1         	fcall	_CC2500_SIDLEMode
 16975  1E39  0008               	return
 16976  1E3A                     __end_of_CC2500_PowerOnInitial:	
 16977                           
 16978                           	psect	text113
 16979  1BB1                     __ptext113:	
 16980 ;; *************** function _CC2500_SIDLEMode *****************
 16981 ;; Defined at:
 16982 ;;		line 209 in file "../src/CC2500_B1.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;		None
 16985 ;; Auto vars:     Size  Location     Type
 16986 ;;		None
 16987 ;; Return value:  Size  Location     Type
 16988 ;;		None               void
 16989 ;; Registers used:
 16990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16991 ;; Tracked objects:
 16992 ;;		On entry : 0/0
 16993 ;;		On exit  : 0/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;Total ram usage:        0 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    7
 17003 ;; This function calls:
 17004 ;;		_CC2500_WriteCommand
 17005 ;; This function is called by:
 17006 ;;		_CC2500_PowerOnInitial
 17007 ;; This function uses a non-reentrant model
 17008 ;;
 17009                           
 17010                           
 17011                           ;psect for function _CC2500_SIDLEMode
 17012  1BB1                     _CC2500_SIDLEMode:	
 17013                           
 17014                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17015                           
 17016                           ;incstack = 0
 17017                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17018  1BB1  3036               	movlw	54
 17019  1BB2  319E  267E         	fcall	_CC2500_WriteCommand
 17020  1BB4  0008               	return
 17021  1BB5                     __end_of_CC2500_SIDLEMode:	
 17022                           
 17023                           	psect	text114
 17024  147B                     __ptext114:	
 17025 ;; *************** function _CC2500_PowerRST *****************
 17026 ;; Defined at:
 17027 ;;		line 132 in file "../src/CC2500_B1.c"
 17028 ;; Parameters:    Size  Location     Type
 17029 ;;		None
 17030 ;; Auto vars:     Size  Location     Type
 17031 ;;		None
 17032 ;; Return value:  Size  Location     Type
 17033 ;;		None               void
 17034 ;; Registers used:
 17035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17045 ;;Total ram usage:        1 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    6
 17048 ;; This function calls:
 17049 ;;		_CC2500_WriteByte
 17050 ;;		_DelayTime_1us
 17051 ;;		_Timeout_Counter
 17052 ;;		_set_TimeoutCleared
 17053 ;; This function is called by:
 17054 ;;		_CC2500_PowerOnInitial
 17055 ;; This function uses a non-reentrant model
 17056 ;;
 17057                           
 17058                           
 17059                           ;psect for function _CC2500_PowerRST
 17060  147B                     _CC2500_PowerRST:	
 17061                           
 17062                           ;CC2500_B1.c: 133: RC3 = 0;
 17063                           
 17064                           ;incstack = 0
 17065                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17066  147B  0020               	movlb	0	; select bank0
 17067  147C  118E               	bcf	14,3	;volatile
 17068                           
 17069                           ;CC2500_B1.c: 134: RC4 = 0;
 17070  147D  120E               	bcf	14,4	;volatile
 17071                           
 17072                           ;CC2500_B1.c: 135: RC0 = 1;
 17073  147E  140E               	bsf	14,0	;volatile
 17074                           
 17075                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17076  147F  300A               	movlw	10
 17077  1480  00A0               	movwf	DelayTime_1us@count
 17078  1481  3000               	movlw	0
 17079  1482  00A1               	movwf	DelayTime_1us@count+1
 17080  1483  3190  2082  3194   	fcall	_DelayTime_1us
 17081                           
 17082                           ;CC2500_B1.c: 137: RC0 = 0;
 17083  1486  0020               	movlb	0	; select bank0
 17084  1487  100E               	bcf	14,0	;volatile
 17085                           
 17086                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17087  1488  300A               	movlw	10
 17088  1489  00A0               	movwf	DelayTime_1us@count
 17089  148A  3000               	movlw	0
 17090  148B  00A1               	movwf	DelayTime_1us@count+1
 17091  148C  3190  2082  3194   	fcall	_DelayTime_1us
 17092                           
 17093                           ;CC2500_B1.c: 139: RC0 = 1;
 17094  148F  0020               	movlb	0	; select bank0
 17095  1490  140E               	bsf	14,0	;volatile
 17096                           
 17097                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17098  1491  3028               	movlw	40
 17099  1492  00A0               	movwf	DelayTime_1us@count
 17100  1493  3000               	movlw	0
 17101  1494  00A1               	movwf	DelayTime_1us@count+1
 17102  1495  3190  2082  3194   	fcall	_DelayTime_1us
 17103                           
 17104                           ;CC2500_B1.c: 141: RC0 = 0;
 17105  1498  0020               	movlb	0	; select bank0
 17106  1499  100E               	bcf	14,0	;volatile
 17107                           
 17108                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17109  149A  3030               	movlw	48
 17110  149B  00A6               	movwf	??_CC2500_PowerRST
 17111  149C  0826               	movf	??_CC2500_PowerRST,w
 17112  149D  00FB               	movwf	_SPI0Buffer
 17113                           
 17114                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17115  149E  2CA2               	goto	l6757
 17116  149F                     l6755:	
 17117                           
 17118                           ;CC2500_B1.c: 144: Timeout_Counter();
 17119  149F  319E  2610  3194   	fcall	_Timeout_Counter
 17120  14A2                     l6757:	
 17121  14A2  0020               	movlb	0	; select bank0
 17122  14A3  1E8E               	btfss	14,5	;volatile
 17123  14A4  2CA8               	goto	l6761
 17124  14A5  0021               	movlb	1	; select bank1
 17125  14A6  1D2B               	btfss	(_myMain^(0+128)+11),2
 17126  14A7  2C9F               	goto	l6755
 17127  14A8                     l6761:	
 17128                           
 17129                           ;CC2500_B1.c: 145: };
 17130                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17131  14A8  319B  23C9  3194   	fcall	_set_TimeoutCleared
 17132                           
 17133                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17134  14AB  319D  25E8  3194   	fcall	_CC2500_WriteByte
 17135                           
 17136                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17137  14AE  2CB2               	goto	l6767
 17138  14AF                     l6765:	
 17139                           
 17140                           ;CC2500_B1.c: 149: Timeout_Counter();
 17141  14AF  319E  2610  3194   	fcall	_Timeout_Counter
 17142  14B2                     l6767:	
 17143  14B2  0020               	movlb	0	; select bank0
 17144  14B3  1E8E               	btfss	14,5	;volatile
 17145  14B4  2CB8               	goto	l6771
 17146  14B5  0021               	movlb	1	; select bank1
 17147  14B6  1D2B               	btfss	(_myMain^(0+128)+11),2
 17148  14B7  2CAF               	goto	l6765
 17149  14B8                     l6771:	
 17150                           
 17151                           ;CC2500_B1.c: 150: };
 17152                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17153  14B8  319B  23C9         	fcall	_set_TimeoutCleared
 17154                           
 17155                           ;CC2500_B1.c: 152: RC4 = 0;
 17156  14BA  0020               	movlb	0	; select bank0
 17157  14BB  120E               	bcf	14,4	;volatile
 17158                           
 17159                           ;CC2500_B1.c: 153: RC0 = 1;
 17160  14BC  140E               	bsf	14,0	;volatile
 17161  14BD  0008               	return
 17162  14BE                     __end_of_CC2500_PowerRST:	
 17163                           
 17164                           	psect	text115
 17165  10CF                     __ptext115:	
 17166 ;; *************** function _CC2500_InitSetREG *****************
 17167 ;; Defined at:
 17168 ;;		line 159 in file "../src/CC2500_B1.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;		None
 17171 ;; Auto vars:     Size  Location     Type
 17172 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17173 ;;  temp2           1    7[BANK0 ] unsigned char 
 17174 ;;  temp1           1    6[BANK0 ] unsigned char 
 17175 ;; Return value:  Size  Location     Type
 17176 ;;		None               void
 17177 ;; Registers used:
 17178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17179 ;; Tracked objects:
 17180 ;;		On entry : 0/0
 17181 ;;		On exit  : 0/0
 17182 ;;		Unchanged: 0/0
 17183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17188 ;;Total ram usage:        4 bytes
 17189 ;; Hardware stack levels used:    1
 17190 ;; Hardware stack levels required when called:    7
 17191 ;; This function calls:
 17192 ;;		_CC2500_WriteREG
 17193 ;; This function is called by:
 17194 ;;		_CC2500_PowerOnInitial
 17195 ;; This function uses a non-reentrant model
 17196 ;;
 17197                           
 17198                           
 17199                           ;psect for function _CC2500_InitSetREG
 17200  10CF                     _CC2500_InitSetREG:	
 17201                           
 17202                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17203                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17204                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17205                           
 17206                           ;incstack = 0
 17207                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17208  10CF  0020               	movlb	0	; select bank0
 17209  10D0  01A8               	clrf	CC2500_InitSetREG@loop_c
 17210  10D1                     L9:	
 17211  10D1  302F               	movlw	47
 17212  10D2  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17213  10D3  1803               	btfsc	3,0
 17214  10D4  0008               	return
 17215                           
 17216                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17217  10D5  0828               	movf	CC2500_InitSetREG@loop_c,w
 17218  10D6  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17219  10D7  0084               	movwf	4
 17220  10D8  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17221  10D9  1803               	skipnc
 17222  10DA  3E01               	addlw	1
 17223  10DB  0085               	movwf	5
 17224  10DC  0800               	movf	0,w	;code access
 17225  10DD  00A5               	movwf	??_CC2500_InitSetREG
 17226  10DE  0825               	movf	??_CC2500_InitSetREG,w
 17227  10DF  00A6               	movwf	CC2500_InitSetREG@temp1
 17228                           
 17229                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17230  10E0  0828               	movf	CC2500_InitSetREG@loop_c,w
 17231  10E1  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17232  10E2  0084               	movwf	4
 17233  10E3  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17234  10E4  1803               	skipnc
 17235  10E5  3E01               	addlw	1
 17236  10E6  0085               	movwf	5
 17237  10E7  0800               	movf	0,w	;code access
 17238  10E8  00A5               	movwf	??_CC2500_InitSetREG
 17239  10E9  0825               	movf	??_CC2500_InitSetREG,w
 17240  10EA  00A7               	movwf	CC2500_InitSetREG@temp2
 17241                           
 17242                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17243  10EB  0827               	movf	CC2500_InitSetREG@temp2,w
 17244  10EC  00A5               	movwf	??_CC2500_InitSetREG
 17245  10ED  0825               	movf	??_CC2500_InitSetREG,w
 17246  10EE  00A2               	movwf	CC2500_WriteREG@value
 17247  10EF  0826               	movf	CC2500_InitSetREG@temp1,w
 17248  10F0  319F  2754  3190   	fcall	_CC2500_WriteREG
 17249  10F3  3001               	movlw	1
 17250  10F4  0020               	movlb	0	; select bank0
 17251  10F5  00A5               	movwf	??_CC2500_InitSetREG
 17252  10F6  0825               	movf	??_CC2500_InitSetREG,w
 17253  10F7  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17254  10F8  28D1               	goto	L9
 17255  10F9                     __end_of_CC2500_InitSetREG:	
 17256                           
 17257                           	psect	text116
 17258  1EB5                     __ptext116:	
 17259 ;; *************** function _CC2500_InitPATable *****************
 17260 ;; Defined at:
 17261 ;;		line 174 in file "../src/CC2500_B1.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;		None
 17264 ;; Auto vars:     Size  Location     Type
 17265 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17266 ;;  temp            1    6[BANK0 ] unsigned char 
 17267 ;; Return value:  Size  Location     Type
 17268 ;;		None               void
 17269 ;; Registers used:
 17270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;Total ram usage:        3 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    7
 17283 ;; This function calls:
 17284 ;;		_CC2500_WriteREG
 17285 ;; This function is called by:
 17286 ;;		_CC2500_PowerOnInitial
 17287 ;; This function uses a non-reentrant model
 17288 ;;
 17289                           
 17290                           
 17291                           ;psect for function _CC2500_InitPATable
 17292  1EB5                     _CC2500_InitPATable:	
 17293                           
 17294                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17295                           ;CC2500_B1.c: 176: unsigned char temp;
 17296                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17297                           
 17298                           ;incstack = 0
 17299                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17300  1EB5  0020               	movlb	0	; select bank0
 17301  1EB6  01A7               	clrf	CC2500_InitPATable@loop_d
 17302  1EB7                     L10:	
 17303  1EB7  3008               	movlw	8
 17304  1EB8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17305  1EB9  1803               	btfsc	3,0
 17306  1EBA  0008               	return
 17307                           
 17308                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17309  1EBB  0827               	movf	CC2500_InitPATable@loop_d,w
 17310  1EBC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17311  1EBD  0084               	movwf	4
 17312  1EBE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17313  1EBF  1803               	skipnc
 17314  1EC0  3E01               	addlw	1
 17315  1EC1  0085               	movwf	5
 17316  1EC2  0800               	movf	0,w	;code access
 17317  1EC3  00A5               	movwf	??_CC2500_InitPATable
 17318  1EC4  0825               	movf	??_CC2500_InitPATable,w
 17319  1EC5  00A6               	movwf	CC2500_InitPATable@temp
 17320                           
 17321                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17322  1EC6  0826               	movf	CC2500_InitPATable@temp,w
 17323  1EC7  00A5               	movwf	??_CC2500_InitPATable
 17324  1EC8  0825               	movf	??_CC2500_InitPATable,w
 17325  1EC9  00A2               	movwf	CC2500_WriteREG@value
 17326  1ECA  303E               	movlw	62
 17327  1ECB  319F  2754  319E   	fcall	_CC2500_WriteREG
 17328  1ECE  3001               	movlw	1
 17329  1ECF  0020               	movlb	0	; select bank0
 17330  1ED0  00A5               	movwf	??_CC2500_InitPATable
 17331  1ED1  0825               	movf	??_CC2500_InitPATable,w
 17332  1ED2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17333  1ED3  2EB7               	goto	L10
 17334  1ED4                     __end_of_CC2500_InitPATable:	
 17335                           
 17336                           	psect	text117
 17337  1F54                     __ptext117:	
 17338 ;; *************** function _CC2500_WriteREG *****************
 17339 ;; Defined at:
 17340 ;;		line 251 in file "../src/CC2500_B1.c"
 17341 ;; Parameters:    Size  Location     Type
 17342 ;;  w_addr          1    wreg     unsigned char 
 17343 ;;  value           1    2[BANK0 ] unsigned char 
 17344 ;; Auto vars:     Size  Location     Type
 17345 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17346 ;; Return value:  Size  Location     Type
 17347 ;;		None               void
 17348 ;; Registers used:
 17349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17350 ;; Tracked objects:
 17351 ;;		On entry : 0/0
 17352 ;;		On exit  : 0/0
 17353 ;;		Unchanged: 0/0
 17354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17355 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;Total ram usage:        3 bytes
 17360 ;; Hardware stack levels used:    1
 17361 ;; Hardware stack levels required when called:    6
 17362 ;; This function calls:
 17363 ;;		_CC2500_WriteByte
 17364 ;;		_Timeout_Counter
 17365 ;;		_set_TimeoutCleared
 17366 ;; This function is called by:
 17367 ;;		_CC2500_InitSetREG
 17368 ;;		_CC2500_InitPATable
 17369 ;; This function uses a non-reentrant model
 17370 ;;
 17371                           
 17372                           
 17373                           ;psect for function _CC2500_WriteREG
 17374  1F54                     _CC2500_WriteREG:	
 17375                           
 17376                           ;incstack = 0
 17377                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17378                           ;CC2500_WriteREG@w_addr stored from wreg
 17379  1F54  0020               	movlb	0	; select bank0
 17380  1F55  00A4               	movwf	CC2500_WriteREG@w_addr
 17381                           
 17382                           ;CC2500_B1.c: 252: RC0 = 0;
 17383  1F56  100E               	bcf	14,0	;volatile
 17384                           
 17385                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17386  1F57  0824               	movf	CC2500_WriteREG@w_addr,w
 17387  1F58  00A3               	movwf	??_CC2500_WriteREG
 17388  1F59  0823               	movf	??_CC2500_WriteREG,w
 17389  1F5A  00FB               	movwf	_SPI0Buffer
 17390                           
 17391                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17392  1F5B  2F5F               	goto	l6425
 17393  1F5C                     l6423:	
 17394                           
 17395                           ;CC2500_B1.c: 255: Timeout_Counter();
 17396  1F5C  319E  2610  319F   	fcall	_Timeout_Counter
 17397  1F5F                     l6425:	
 17398  1F5F  0020               	movlb	0	; select bank0
 17399  1F60  1E8E               	btfss	14,5	;volatile
 17400  1F61  2F65               	goto	l6429
 17401  1F62  0021               	movlb	1	; select bank1
 17402  1F63  1D2B               	btfss	(_myMain^(0+128)+11),2
 17403  1F64  2F5C               	goto	l6423
 17404  1F65                     l6429:	
 17405                           
 17406                           ;CC2500_B1.c: 256: };
 17407                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17408  1F65  319B  23C9  319F   	fcall	_set_TimeoutCleared
 17409                           
 17410                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17411  1F68  319D  25E8  319F   	fcall	_CC2500_WriteByte
 17412                           
 17413                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17414  1F6B  0020               	movlb	0	; select bank0
 17415  1F6C  0822               	movf	CC2500_WriteREG@value,w
 17416  1F6D  00A3               	movwf	??_CC2500_WriteREG
 17417  1F6E  0823               	movf	??_CC2500_WriteREG,w
 17418  1F6F  00FB               	movwf	_SPI0Buffer
 17419                           
 17420                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17421  1F70  319D  25E8         	fcall	_CC2500_WriteByte
 17422                           
 17423                           ;CC2500_B1.c: 262: RC0 = 1;
 17424  1F72  0020               	movlb	0	; select bank0
 17425  1F73  140E               	bsf	14,0	;volatile
 17426  1F74  0008               	return
 17427  1F75                     __end_of_CC2500_WriteREG:	
 17428                           
 17429                           	psect	text118
 17430  1C78                     __ptext118:	
 17431 ;; *************** function _CC2500_FrequencyCabr *****************
 17432 ;; Defined at:
 17433 ;;		line 201 in file "../src/CC2500_B1.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;		None
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;		None
 17438 ;; Return value:  Size  Location     Type
 17439 ;;		None               void
 17440 ;; Registers used:
 17441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17442 ;; Tracked objects:
 17443 ;;		On entry : 0/0
 17444 ;;		On exit  : 0/0
 17445 ;;		Unchanged: 0/0
 17446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;Total ram usage:        0 bytes
 17452 ;; Hardware stack levels used:    1
 17453 ;; Hardware stack levels required when called:    7
 17454 ;; This function calls:
 17455 ;;		_CC2500_WriteCommand
 17456 ;;		_DelayTime_1us
 17457 ;; This function is called by:
 17458 ;;		_CC2500_PowerOnInitial
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           
 17463                           ;psect for function _CC2500_FrequencyCabr
 17464  1C78                     _CC2500_FrequencyCabr:	
 17465                           
 17466                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17467                           
 17468                           ;incstack = 0
 17469                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17470  1C78  3033               	movlw	51
 17471  1C79  319E  267E  319C   	fcall	_CC2500_WriteCommand
 17472                           
 17473                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17474  1C7C  30E8               	movlw	232
 17475  1C7D  0020               	movlb	0	; select bank0
 17476  1C7E  00A0               	movwf	DelayTime_1us@count
 17477  1C7F  3003               	movlw	3
 17478  1C80  00A1               	movwf	DelayTime_1us@count+1
 17479  1C81  3190  2082         	fcall	_DelayTime_1us
 17480  1C83  0008               	return
 17481  1C84                     __end_of_CC2500_FrequencyCabr:	
 17482                           
 17483                           	psect	text119
 17484  1082                     __ptext119:	
 17485 ;; *************** function _DelayTime_1us *****************
 17486 ;; Defined at:
 17487 ;;		line 320 in file "../src/CC2500_B1.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;  count           2    0[BANK0 ] int 
 17490 ;; Auto vars:     Size  Location     Type
 17491 ;;  j               2    4[BANK0 ] unsigned int 
 17492 ;;  i               2    2[BANK0 ] unsigned int 
 17493 ;; Return value:  Size  Location     Type
 17494 ;;		None               void
 17495 ;; Registers used:
 17496 ;;		wreg, status,2
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;Total ram usage:        6 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    5
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_CC2500_PowerRST
 17513 ;;		_CC2500_FrequencyCabr
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           
 17518                           ;psect for function _DelayTime_1us
 17519  1082                     _DelayTime_1us:	
 17520                           
 17521                           ;CC2500_B1.c: 321: unsigned int i, j;
 17522                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17523                           
 17524                           ;incstack = 0
 17525                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17526  1082  3001               	movlw	1
 17527  1083  0020               	movlb	0	; select bank0
 17528  1084  00A2               	movwf	DelayTime_1us@i
 17529  1085  3000               	movlw	0
 17530  1086  00A3               	movwf	DelayTime_1us@i+1
 17531  1087                     l348:	
 17532  1087  0821               	movf	DelayTime_1us@count+1,w
 17533  1088  0223               	subwf	DelayTime_1us@i+1,w
 17534  1089  1D03               	skipz
 17535  108A  288D               	goto	u5585
 17536  108B  0820               	movf	DelayTime_1us@count,w
 17537  108C  0222               	subwf	DelayTime_1us@i,w
 17538  108D                     u5585:	
 17539  108D  1803               	btfsc	3,0
 17540  108E  0008               	return
 17541                           
 17542                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17543  108F  01A4               	clrf	DelayTime_1us@j
 17544  1090  01A5               	clrf	DelayTime_1us@j+1
 17545  1091  3000               	movlw	0
 17546  1092  0225               	subwf	DelayTime_1us@j+1,w
 17547  1093  3002               	movlw	2
 17548  1094  1903               	skipnz
 17549  1095  0224               	subwf	DelayTime_1us@j,w
 17550  1096  1803               	btfsc	3,0
 17551  1097  28A3               	goto	l6417
 17552  1098                     l6415:	
 17553  1098  3001               	movlw	1
 17554  1099  07A4               	addwf	DelayTime_1us@j,f
 17555  109A  3000               	movlw	0
 17556  109B  3DA5               	addwfc	DelayTime_1us@j+1,f
 17557  109C  3000               	movlw	0
 17558  109D  0225               	subwf	DelayTime_1us@j+1,w
 17559  109E  3002               	movlw	2
 17560  109F  1903               	skipnz
 17561  10A0  0224               	subwf	DelayTime_1us@j,w
 17562  10A1  1C03               	skipc
 17563  10A2  2898               	goto	l6415
 17564  10A3                     l6417:	
 17565  10A3  3001               	movlw	1
 17566  10A4  07A2               	addwf	DelayTime_1us@i,f
 17567  10A5  3000               	movlw	0
 17568  10A6  3DA3               	addwfc	DelayTime_1us@i+1,f
 17569  10A7  2887               	goto	l348
 17570  10A8                     __end_of_DelayTime_1us:	
 17571                           
 17572                           	psect	text120
 17573  1BAD                     __ptext120:	
 17574 ;; *************** function _CC2500_ClearTXFIFO *****************
 17575 ;; Defined at:
 17576 ;;		line 187 in file "../src/CC2500_B1.c"
 17577 ;; Parameters:    Size  Location     Type
 17578 ;;		None
 17579 ;; Auto vars:     Size  Location     Type
 17580 ;;		None
 17581 ;; Return value:  Size  Location     Type
 17582 ;;		None               void
 17583 ;; Registers used:
 17584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17585 ;; Tracked objects:
 17586 ;;		On entry : 0/0
 17587 ;;		On exit  : 0/0
 17588 ;;		Unchanged: 0/0
 17589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17594 ;;Total ram usage:        0 bytes
 17595 ;; Hardware stack levels used:    1
 17596 ;; Hardware stack levels required when called:    7
 17597 ;; This function calls:
 17598 ;;		_CC2500_WriteCommand
 17599 ;; This function is called by:
 17600 ;;		_CC2500_PowerOnInitial
 17601 ;; This function uses a non-reentrant model
 17602 ;;
 17603                           
 17604                           
 17605                           ;psect for function _CC2500_ClearTXFIFO
 17606  1BAD                     _CC2500_ClearTXFIFO:	
 17607                           
 17608                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17609                           
 17610                           ;incstack = 0
 17611                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17612  1BAD  303B               	movlw	59
 17613  1BAE  319E  267E         	fcall	_CC2500_WriteCommand
 17614  1BB0  0008               	return
 17615  1BB1                     __end_of_CC2500_ClearTXFIFO:	
 17616                           
 17617                           	psect	text121
 17618  1BA9                     __ptext121:	
 17619 ;; *************** function _CC2500_ClearRXFIFO *****************
 17620 ;; Defined at:
 17621 ;;		line 194 in file "../src/CC2500_B1.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;		None
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;		None
 17626 ;; Return value:  Size  Location     Type
 17627 ;;		None               void
 17628 ;; Registers used:
 17629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17630 ;; Tracked objects:
 17631 ;;		On entry : 0/0
 17632 ;;		On exit  : 0/0
 17633 ;;		Unchanged: 0/0
 17634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;Total ram usage:        0 bytes
 17640 ;; Hardware stack levels used:    1
 17641 ;; Hardware stack levels required when called:    7
 17642 ;; This function calls:
 17643 ;;		_CC2500_WriteCommand
 17644 ;; This function is called by:
 17645 ;;		_CC2500_PowerOnInitial
 17646 ;; This function uses a non-reentrant model
 17647 ;;
 17648                           
 17649                           
 17650                           ;psect for function _CC2500_ClearRXFIFO
 17651  1BA9                     _CC2500_ClearRXFIFO:	
 17652                           
 17653                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17654                           
 17655                           ;incstack = 0
 17656                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17657  1BA9  303A               	movlw	58
 17658  1BAA  319E  267E         	fcall	_CC2500_WriteCommand
 17659  1BAC  0008               	return
 17660  1BAD                     __end_of_CC2500_ClearRXFIFO:	
 17661                           
 17662                           	psect	text122
 17663  1E7E                     __ptext122:	
 17664 ;; *************** function _CC2500_WriteCommand *****************
 17665 ;; Defined at:
 17666 ;;		line 285 in file "../src/CC2500_B1.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;  command         1    wreg     unsigned char 
 17669 ;; Auto vars:     Size  Location     Type
 17670 ;;  command         1    3[BANK0 ] unsigned char 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;		None               void
 17673 ;; Registers used:
 17674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;Total ram usage:        2 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:    6
 17687 ;; This function calls:
 17688 ;;		_CC2500_WriteByte
 17689 ;;		_Timeout_Counter
 17690 ;;		_set_TimeoutCleared
 17691 ;; This function is called by:
 17692 ;;		_CC2500_TxData
 17693 ;;		_CC2500_ClearTXFIFO
 17694 ;;		_CC2500_ClearRXFIFO
 17695 ;;		_CC2500_FrequencyCabr
 17696 ;;		_CC2500_SIDLEMode
 17697 ;;		_setRF_Main
 17698 ;;		_RF_RxDisable
 17699 ;; This function uses a non-reentrant model
 17700 ;;
 17701                           
 17702                           
 17703                           ;psect for function _CC2500_WriteCommand
 17704  1E7E                     _CC2500_WriteCommand:	
 17705                           
 17706                           ;incstack = 0
 17707                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17708                           ;CC2500_WriteCommand@command stored from wreg
 17709  1E7E  0020               	movlb	0	; select bank0
 17710  1E7F  00A3               	movwf	CC2500_WriteCommand@command
 17711                           
 17712                           ;CC2500_B1.c: 286: RC0 = 0;
 17713  1E80  100E               	bcf	14,0	;volatile
 17714                           
 17715                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17716  1E81  0823               	movf	CC2500_WriteCommand@command,w
 17717  1E82  00A2               	movwf	??_CC2500_WriteCommand
 17718  1E83  0822               	movf	??_CC2500_WriteCommand,w
 17719  1E84  00FB               	movwf	_SPI0Buffer
 17720                           
 17721                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17722  1E85  2E89               	goto	l6155
 17723  1E86                     l6153:	
 17724                           
 17725                           ;CC2500_B1.c: 290: Timeout_Counter();
 17726  1E86  319E  2610  319E   	fcall	_Timeout_Counter
 17727  1E89                     l6155:	
 17728  1E89  0020               	movlb	0	; select bank0
 17729  1E8A  1E8E               	btfss	14,5	;volatile
 17730  1E8B  2E8F               	goto	l6159
 17731  1E8C  0021               	movlb	1	; select bank1
 17732  1E8D  1D2B               	btfss	(_myMain^(0+128)+11),2
 17733  1E8E  2E86               	goto	l6153
 17734  1E8F                     l6159:	
 17735                           
 17736                           ;CC2500_B1.c: 291: };
 17737                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17738  1E8F  319B  23C9  319E   	fcall	_set_TimeoutCleared
 17739                           
 17740                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17741  1E92  319D  25E8         	fcall	_CC2500_WriteByte
 17742                           
 17743                           ;CC2500_B1.c: 295: RC0 = 1;
 17744  1E94  0020               	movlb	0	; select bank0
 17745  1E95  140E               	bsf	14,0	;volatile
 17746  1E96  0008               	return
 17747  1E97                     __end_of_CC2500_WriteCommand:	
 17748                           
 17749                           	psect	text123
 17750  1BC9                     __ptext123:	
 17751 ;; *************** function _set_TimeoutCleared *****************
 17752 ;; Defined at:
 17753 ;;		line 278 in file "../src/Main_B1.c"
 17754 ;; Parameters:    Size  Location     Type
 17755 ;;		None
 17756 ;; Auto vars:     Size  Location     Type
 17757 ;;		None
 17758 ;; Return value:  Size  Location     Type
 17759 ;;		None               void
 17760 ;; Registers used:
 17761 ;;		status,2
 17762 ;; Tracked objects:
 17763 ;;		On entry : 0/0
 17764 ;;		On exit  : 0/0
 17765 ;;		Unchanged: 0/0
 17766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17771 ;;Total ram usage:        0 bytes
 17772 ;; Hardware stack levels used:    1
 17773 ;; Hardware stack levels required when called:    5
 17774 ;; This function calls:
 17775 ;;		Nothing
 17776 ;; This function is called by:
 17777 ;;		_CC2500_TxData
 17778 ;;		_CC2500_RxData
 17779 ;;		_CC2500_PowerRST
 17780 ;;		_CC2500_WriteREG
 17781 ;;		_CC2500_WriteCommand
 17782 ;;		_CC2500_ReadStatus
 17783 ;;		_getAD
 17784 ;;		_TouchPower
 17785 ;;		_CC2500_ReadREG
 17786 ;; This function uses a non-reentrant model
 17787 ;;
 17788                           
 17789                           
 17790                           ;psect for function _set_TimeoutCleared
 17791  1BC9                     _set_TimeoutCleared:	
 17792                           
 17793                           ;Main_B1.c: 279: myMain.Timeout = 0;
 17794                           
 17795                           ;incstack = 0
 17796                           ; Regs used in _set_TimeoutCleared: [status,2]
 17797  1BC9  0021               	movlb	1	; select bank1
 17798  1BCA  112B               	bcf	(_myMain^(0+128)+11),2
 17799                           
 17800                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
 17801  1BCB  01AC               	clrf	(_myMain^(0+128)+12)
 17802  1BCC  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17803  1BCD  0008               	return
 17804  1BCE                     __end_of_set_TimeoutCleared:	
 17805                           
 17806                           	psect	text124
 17807  1E10                     __ptext124:	
 17808 ;; *************** function _Timeout_Counter *****************
 17809 ;; Defined at:
 17810 ;;		line 269 in file "../src/Main_B1.c"
 17811 ;; Parameters:    Size  Location     Type
 17812 ;;		None
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;		None
 17815 ;; Return value:  Size  Location     Type
 17816 ;;		None               void
 17817 ;; Registers used:
 17818 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17819 ;; Tracked objects:
 17820 ;;		On entry : 0/0
 17821 ;;		On exit  : 0/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;Total ram usage:        0 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    5
 17831 ;; This function calls:
 17832 ;;		Nothing
 17833 ;; This function is called by:
 17834 ;;		_CC2500_TxData
 17835 ;;		_CC2500_RxData
 17836 ;;		_CC2500_PowerRST
 17837 ;;		_CC2500_WriteREG
 17838 ;;		_CC2500_WriteCommand
 17839 ;;		_CC2500_ReadStatus
 17840 ;;		_getAD
 17841 ;;		_TouchPower
 17842 ;;		_CC2500_ReadREG
 17843 ;; This function uses a non-reentrant model
 17844 ;;
 17845                           
 17846                           
 17847                           ;psect for function _Timeout_Counter
 17848  1E10                     _Timeout_Counter:	
 17849                           
 17850                           ;Main_B1.c: 270: myMain.Timeout_Counter++;
 17851                           
 17852                           ;incstack = 0
 17853                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17854  1E10  3001               	movlw	1
 17855  1E11  0021               	movlb	1	; select bank1
 17856  1E12  07AC               	addwf	(_myMain^(0+128)+12),f
 17857  1E13  3000               	movlw	0
 17858  1E14  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17859                           
 17860                           ;Main_B1.c: 271: if (myMain.Timeout_Counter == 10000) {
 17861  1E15  300C               	movlw	12
 17862  1E16  3EA0               	addlw	_myMain& (0+255)
 17863  1E17  0086               	movwf	6
 17864  1E18  0187               	clrf	7
 17865  1E19  3F40               	moviw [0]fsr1
 17866  1E1A  3A10               	xorlw	16
 17867  1E1B  1D03               	skipz
 17868  1E1C  2E1F               	goto	u5045
 17869  1E1D  3F41               	moviw [1]fsr1
 17870  1E1E  3A27               	xorlw	39
 17871  1E1F                     u5045:	
 17872  1E1F  1D03               	skipz
 17873  1E20  0008               	return
 17874                           
 17875                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 17876  1E21  01AC               	clrf	(_myMain^(0+128)+12)
 17877  1E22  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17878                           
 17879                           ;Main_B1.c: 273: myMain.Timeout = 1;
 17880  1E23  152B               	bsf	(_myMain^(0+128)+11),2
 17881  1E24  0008               	return
 17882  1E25                     __end_of_Timeout_Counter:	
 17883                           
 17884                           	psect	text125
 17885  1DE8                     __ptext125:	
 17886 ;; *************** function _CC2500_WriteByte *****************
 17887 ;; Defined at:
 17888 ;;		line 219 in file "../src/CC2500_B1.c"
 17889 ;; Parameters:    Size  Location     Type
 17890 ;;		None
 17891 ;; Auto vars:     Size  Location     Type
 17892 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17893 ;; Return value:  Size  Location     Type
 17894 ;;		None               void
 17895 ;; Registers used:
 17896 ;;		wreg, status,2, status,0
 17897 ;; Tracked objects:
 17898 ;;		On entry : 0/0
 17899 ;;		On exit  : 0/0
 17900 ;;		Unchanged: 0/0
 17901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17906 ;;Total ram usage:        2 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; Hardware stack levels required when called:    5
 17909 ;; This function calls:
 17910 ;;		Nothing
 17911 ;; This function is called by:
 17912 ;;		_CC2500_TxData
 17913 ;;		_CC2500_RxData
 17914 ;;		_CC2500_PowerRST
 17915 ;;		_CC2500_WriteREG
 17916 ;;		_CC2500_WriteCommand
 17917 ;;		_CC2500_ReadStatus
 17918 ;;		_CC2500_ReadREG
 17919 ;; This function uses a non-reentrant model
 17920 ;;
 17921                           
 17922                           
 17923                           ;psect for function _CC2500_WriteByte
 17924  1DE8                     _CC2500_WriteByte:	
 17925                           
 17926                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17927                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17928                           
 17929                           ;incstack = 0
 17930                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17931  1DE8  0020               	movlb	0	; select bank0
 17932  1DE9  01A1               	clrf	CC2500_WriteByte@loop_a
 17933  1DEA                     L11:	
 17934  1DEA  3008               	movlw	8
 17935  1DEB  0221               	subwf	CC2500_WriteByte@loop_a,w
 17936  1DEC  1803               	btfsc	3,0
 17937  1DED  0008               	return
 17938                           
 17939                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17940  1DEE  1FFB               	btfss	_SPI0Buffer,7
 17941  1DEF  2DF2               	goto	l304
 17942                           
 17943                           ;CC2500_B1.c: 223: RC4 = 1;
 17944  1DF0  160E               	bsf	14,4	;volatile
 17945  1DF1  2DF3               	goto	l305
 17946  1DF2                     l304:	
 17947                           
 17948                           ;CC2500_B1.c: 224: else
 17949                           ;CC2500_B1.c: 225: RC4 = 0;
 17950  1DF2  120E               	bcf	14,4	;volatile
 17951  1DF3                     l305:	
 17952                           
 17953                           ;CC2500_B1.c: 226: RC3 = 1;
 17954  1DF3  158E               	bsf	14,3	;volatile
 17955                           
 17956                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17957  1DF4  1003               	clrc
 17958  1DF5  0DFB               	rlf	_SPI0Buffer,f
 17959                           
 17960                           ;CC2500_B1.c: 228: RC3 = 0;
 17961  1DF6  118E               	bcf	14,3	;volatile
 17962  1DF7  3001               	movlw	1
 17963  1DF8  00A0               	movwf	??_CC2500_WriteByte
 17964  1DF9  0820               	movf	??_CC2500_WriteByte,w
 17965  1DFA  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17966  1DFB  2DEA               	goto	L11
 17967  1DFC                     __end_of_CC2500_WriteByte:	
 17968                           
 17969                           	psect	text126
 17970  1507                     __ptext126:	
 17971 ;; *************** function _Buzzer_Main *****************
 17972 ;; Defined at:
 17973 ;;		line 46 in file "../src/Buzzer_B1.c"
 17974 ;; Parameters:    Size  Location     Type
 17975 ;;		None
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;		None
 17978 ;; Return value:  Size  Location     Type
 17979 ;;		None               void
 17980 ;; Registers used:
 17981 ;;		wreg, status,2, status,0
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;Total ram usage:        1 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; Hardware stack levels required when called:    5
 17994 ;; This function calls:
 17995 ;;		Nothing
 17996 ;; This function is called by:
 17997 ;;		_main
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           
 18002                           ;psect for function _Buzzer_Main
 18003  1507                     _Buzzer_Main:	
 18004                           
 18005                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18006                           
 18007                           ;incstack = 0
 18008                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18009  1507  0021               	movlb	1	; select bank1
 18010  1508  1CAE               	btfss	_Buz1^(0+128),1
 18011  1509  0008               	return
 18012                           
 18013                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18014  150A  3001               	movlw	1
 18015  150B  07AF               	addwf	(_Buz1^(0+128)+1),f
 18016  150C  3000               	movlw	0
 18017  150D  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18018                           
 18019                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18020  150E  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18021  150F  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18022  1510  1D03               	skipz
 18023  1511  2D14               	goto	u7245
 18024  1512  0834               	movf	(_Buz1^(0+128)+6),w
 18025  1513  022F               	subwf	(_Buz1^(0+128)+1),w
 18026  1514                     u7245:	
 18027  1514  1C03               	skipc
 18028  1515  0008               	return
 18029                           
 18030                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18031  1516  01AF               	clrf	(_Buz1^(0+128)+1)
 18032  1517  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18033                           
 18034                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18035  1518  12AE               	bcf	_Buz1^(0+128),5
 18036  1519  0020               	movlb	0	; select bank0
 18037  151A  1D8D               	btfss	13,3	;volatile
 18038  151B  2D1E               	goto	l7431
 18039  151C  0021               	movlb	1	; select bank1
 18040  151D  16AE               	bsf	_Buz1^(0+128),5
 18041  151E                     l7431:	
 18042                           
 18043                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18044  151E  0021               	movlb	1	; select bank1
 18045  151F  1AAE               	btfsc	_Buz1^(0+128),5
 18046  1520  2D4A               	goto	l94
 18047                           
 18048                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18049  1521  08B1               	movf	(_Buz1^(0+128)+3),f
 18050  1522  1D03               	skipz
 18051  1523  2D46               	goto	l95
 18052                           
 18053                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18054  1524  1DAE               	btfss	_Buz1^(0+128),3
 18055  1525  2D34               	goto	l96
 18056                           
 18057                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18058  1526  11AE               	bcf	_Buz1^(0+128),3
 18059                           
 18060                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18061  1527  0832               	movf	(_Buz1^(0+128)+4),w
 18062  1528  0020               	movlb	0	; select bank0
 18063  1529  00A0               	movwf	??_Buzzer_Main
 18064  152A  0820               	movf	??_Buzzer_Main,w
 18065  152B  0021               	movlb	1	; select bank1
 18066  152C  00B1               	movwf	(_Buz1^(0+128)+3)
 18067                           
 18068                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18069  152D  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18070  152E  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18071  152F  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18072  1530  0836               	movf	(_Buz1^(0+128)+8),w
 18073  1531  01B4               	clrf	(_Buz1^(0+128)+6)
 18074  1532  07B4               	addwf	(_Buz1^(0+128)+6),f
 18075                           
 18076                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18077  1533  0008               	return
 18078  1534                     l96:	
 18079  1534  1E2E               	btfss	_Buz1^(0+128),4
 18080  1535  2D44               	goto	l98
 18081                           
 18082                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18083  1536  122E               	bcf	_Buz1^(0+128),4
 18084                           
 18085                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18086  1537  0833               	movf	(_Buz1^(0+128)+5),w
 18087  1538  0020               	movlb	0	; select bank0
 18088  1539  00A0               	movwf	??_Buzzer_Main
 18089  153A  0820               	movf	??_Buzzer_Main,w
 18090  153B  0021               	movlb	1	; select bank1
 18091  153C  00B1               	movwf	(_Buz1^(0+128)+3)
 18092                           
 18093                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18094  153D  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18095  153E  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18096  153F  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18097  1540  0838               	movf	(_Buz1^(0+128)+10),w
 18098  1541  01B4               	clrf	(_Buz1^(0+128)+6)
 18099  1542  07B4               	addwf	(_Buz1^(0+128)+6),f
 18100                           
 18101                           ;Buzzer_B1.c: 62: } else {
 18102  1543  0008               	return
 18103  1544                     l98:	
 18104                           
 18105                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18106  1544  10AE               	bcf	_Buz1^(0+128),1
 18107                           
 18108                           ;Buzzer_B1.c: 64: }
 18109                           ;Buzzer_B1.c: 65: } else {
 18110  1545  0008               	return
 18111  1546                     l95:	
 18112                           
 18113                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18114  1546  16AE               	bsf	_Buz1^(0+128),5
 18115                           
 18116                           ;Buzzer_B1.c: 68: RB3 = 1;
 18117  1547  0020               	movlb	0	; select bank0
 18118  1548  158D               	bsf	13,3	;volatile
 18119                           
 18120                           ;Buzzer_B1.c: 69: }
 18121                           ;Buzzer_B1.c: 70: } else {
 18122  1549  0008               	return
 18123  154A                     l94:	
 18124                           
 18125                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18126  154A  12AE               	bcf	_Buz1^(0+128),5
 18127                           
 18128                           ;Buzzer_B1.c: 73: RB3 = 0;
 18129  154B  0020               	movlb	0	; select bank0
 18130  154C  118D               	bcf	13,3	;volatile
 18131                           
 18132                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18133  154D  3001               	movlw	1
 18134  154E  0021               	movlb	1	; select bank1
 18135  154F  02B1               	subwf	(_Buz1^(0+128)+3),f
 18136  1550  0008               	return
 18137  1551                     __end_of_Buzzer_Main:	
 18138                           
 18139                           	psect	text127
 18140  1B96                     __ptext127:	
 18141 ;; *************** function _Buzzer_Initialization *****************
 18142 ;; Defined at:
 18143 ;;		line 11 in file "../src/Buzzer_B1.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;		None               void
 18150 ;; Registers used:
 18151 ;;		None
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;Total ram usage:        0 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    5
 18164 ;; This function calls:
 18165 ;;		Nothing
 18166 ;; This function is called by:
 18167 ;;		_main
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171                           
 18172                           ;psect for function _Buzzer_Initialization
 18173  1B96                     _Buzzer_Initialization:	
 18174                           
 18175                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18176                           
 18177                           ;incstack = 0
 18178                           ; Regs used in _Buzzer_Initialization: []
 18179  1B96  0021               	movlb	1	; select bank1
 18180  1B97  142E               	bsf	_Buz1^(0+128),0
 18181  1B98  0008               	return
 18182  1B99                     __end_of_Buzzer_Initialization:	
 18183                           
 18184                           	psect	intentry
 18185  0004                     __pintentry:	
 18186 ;; *************** function _ISR *****************
 18187 ;; Defined at:
 18188 ;;		line 107 in file "../src/MCU_B1.c"
 18189 ;; Parameters:    Size  Location     Type
 18190 ;;		None
 18191 ;; Auto vars:     Size  Location     Type
 18192 ;;		None
 18193 ;; Return value:  Size  Location     Type
 18194 ;;		None               void
 18195 ;; Registers used:
 18196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18197 ;; Tracked objects:
 18198 ;;		On entry : 0/0
 18199 ;;		On exit  : 0/0
 18200 ;;		Unchanged: 0/0
 18201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;Total ram usage:        1 bytes
 18207 ;; Hardware stack levels used:    1
 18208 ;; Hardware stack levels required when called:    4
 18209 ;; This function calls:
 18210 ;;		_IOC_ISR
 18211 ;;		_TMR1_ISR
 18212 ;; This function is called by:
 18213 ;;		Interrupt level 1
 18214 ;; This function uses a non-reentrant model
 18215 ;;
 18216                           
 18217  0004                     _ISR:	
 18218                           
 18219                           ;incstack = 0
 18220                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18221  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18222  0005  3180               	pagesel	$
 18223  0006  0020               	movlb	0	; select bank0
 18224  0007  087F               	movf	127,w
 18225  0008  00F7               	movwf	??_ISR
 18226                           
 18227                           ;MCU_B1.c: 109: IOC_ISR();
 18228  0009  319C  24DB  3180   	fcall	_IOC_ISR
 18229                           
 18230                           ;MCU_B1.c: 111: ;;
 18231                           ;MCU_B1.c: 113: TMR1_ISR();
 18232  000C  319F  27DC         	fcall	_TMR1_ISR
 18233  000E  0877               	movf	??_ISR,w
 18234  000F  0020               	movlb	0	; select bank0
 18235  0010  00FF               	movwf	127
 18236  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18237  0012  0009               	retfie
 18238  0013                     __end_of_ISR:	
 18239                           
 18240                           	psect	text129
 18241  1FDC                     __ptext129:	
 18242 ;; *************** function _TMR1_ISR *****************
 18243 ;; Defined at:
 18244 ;;		line 209 in file "../src/MCU_B1.c"
 18245 ;; Parameters:    Size  Location     Type
 18246 ;;		None
 18247 ;; Auto vars:     Size  Location     Type
 18248 ;;		None
 18249 ;; Return value:  Size  Location     Type
 18250 ;;		None               void
 18251 ;; Registers used:
 18252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18253 ;; Tracked objects:
 18254 ;;		On entry : 0/0
 18255 ;;		On exit  : 0/0
 18256 ;;		Unchanged: 0/0
 18257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;Total ram usage:        0 bytes
 18263 ;; Hardware stack levels used:    1
 18264 ;; Hardware stack levels required when called:    2
 18265 ;; This function calls:
 18266 ;;		_setDimmerLights_IntrControl
 18267 ;; This function is called by:
 18268 ;;		_ISR
 18269 ;; This function uses a non-reentrant model
 18270 ;;
 18271                           
 18272                           
 18273                           ;psect for function _TMR1_ISR
 18274  1FDC                     _TMR1_ISR:	
 18275                           
 18276                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18277                           
 18278                           ;incstack = 0
 18279                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18280  1FDC  0021               	movlb	1	; select bank1
 18281  1FDD  1C11               	btfss	17,0	;volatile
 18282  1FDE  0008               	return
 18283  1FDF  0020               	movlb	0	; select bank0
 18284  1FE0  1C11               	btfss	17,0	;volatile
 18285  1FE1  0008               	return
 18286                           
 18287                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18288  1FE2  30FA               	movlw	250
 18289  1FE3  0097               	movwf	23	;volatile
 18290                           
 18291                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18292  1FE4  3038               	movlw	56
 18293  1FE5  0096               	movwf	22	;volatile
 18294                           
 18295                           ;MCU_B1.c: 214: TMR1IF = 0;
 18296  1FE6  1011               	bcf	17,0	;volatile
 18297                           
 18298                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18299  1FE7  3001               	movlw	1
 18300  1FE8  3183  232F  319F   	fcall	_setDimmerLights_IntrControl
 18301                           
 18302                           ;MCU_B1.c: 234: Timer1.Count++;
 18303  1FEB  3001               	movlw	1
 18304  1FEC  0021               	movlb	1	; select bank1
 18305  1FED  07C7               	addwf	(_Timer1^(0+128)+1),f
 18306  1FEE  3000               	movlw	0
 18307  1FEF  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 18308                           
 18309                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18310  1FF0  3001               	movlw	1
 18311  1FF1  3EC6               	addlw	_Timer1& (0+255)
 18312  1FF2  0086               	movwf	6
 18313  1FF3  0187               	clrf	7
 18314  1FF4  3F40               	moviw [0]fsr1
 18315  1FF5  3A64               	xorlw	100
 18316  1FF6  1D03               	skipz
 18317  1FF7  2FFA               	goto	u740_25
 18318  1FF8  3F41               	moviw [1]fsr1
 18319  1FF9  3A00               	xorlw	0
 18320  1FFA                     u740_25:	
 18321  1FFA  1D03               	skipz
 18322  1FFB  0008               	return
 18323                           
 18324                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18325  1FFC  01C7               	clrf	(_Timer1^(0+128)+1)
 18326  1FFD  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 18327                           
 18328                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18329  1FFE  1446               	bsf	_Timer1^(0+128),0
 18330  1FFF  0008               	return
 18331  2000                     __end_of_TMR1_ISR:	
 18332                           
 18333                           	psect	text130
 18334  032F                     __ptext130:	
 18335 ;; *************** function _setDimmerLights_IntrControl *****************
 18336 ;; Defined at:
 18337 ;;		line 94 in file "../src/Dimmer_B1.c"
 18338 ;; Parameters:    Size  Location     Type
 18339 ;;  lights          1    wreg     unsigned char 
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;  lights          1    6[COMMON] unsigned char 
 18342 ;; Return value:  Size  Location     Type
 18343 ;;		None               void
 18344 ;; Registers used:
 18345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18353 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;Total ram usage:        5 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    1
 18358 ;; This function calls:
 18359 ;;		_DimmerIntrPointSelect
 18360 ;; This function is called by:
 18361 ;;		_TMR1_ISR
 18362 ;; This function uses a non-reentrant model
 18363 ;;
 18364                           
 18365                           
 18366                           ;psect for function _setDimmerLights_IntrControl
 18367  032F                     _setDimmerLights_IntrControl:	
 18368                           
 18369                           ;incstack = 0
 18370                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18371                           ;setDimmerLights_IntrControl@lights stored from wreg
 18372  032F  00F6               	movwf	setDimmerLights_IntrControl@lights
 18373                           
 18374                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18375  0330  0876               	movf	setDimmerLights_IntrControl@lights,w
 18376  0331  319C  2417  3183   	fcall	_DimmerIntrPointSelect
 18377                           
 18378                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18379  0334  0879               	movf	_DimmerLightsIntr,w
 18380  0335  0086               	movwf	6
 18381  0336  3001               	movlw	1	; select bank2/3
 18382  0337  0087               	movwf	7
 18383  0338  1C01               	btfss	1,0
 18384  0339  2B8B               	goto	i1l6859
 18385                           
 18386                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18387  033A  3001               	movlw	1
 18388  033B  00F2               	movwf	??_setDimmerLights_IntrControl
 18389  033C  0879               	movf	_DimmerLightsIntr,w
 18390  033D  3E03               	addlw	3
 18391  033E  0086               	movwf	6
 18392  033F  3001               	movlw	1	; select bank2/3
 18393  0340  0087               	movwf	7
 18394  0341  0872               	movf	??_setDimmerLights_IntrControl,w
 18395  0342  0781               	addwf	1,f
 18396                           
 18397                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18398                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18399  0343  0022               	movlb	2	; select bank2
 18400  0344  0840               	movf	(_Dimmer^(0+256)+2),w
 18401  0345  00F2               	movwf	??_setDimmerLights_IntrControl
 18402  0346  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18403  0347  09F2               	comf	??_setDimmerLights_IntrControl,f
 18404  0348  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18405  0349  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18406  034A  1903               	skipnz
 18407  034B  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18408  034C  0879               	movf	_DimmerLightsIntr,w
 18409  034D  3E04               	addlw	4
 18410  034E  0086               	movwf	6
 18411  034F  3001               	movlw	1	; select bank2/3
 18412  0350  0087               	movwf	7
 18413  0351  0801               	movf	1,w
 18414  0352  0772               	addwf	??_setDimmerLights_IntrControl,w
 18415  0353  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18416  0354  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18417  0355  1803               	skipnc
 18418  0356  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18419  0357  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18420  0358  0879               	movf	_DimmerLightsIntr,w
 18421  0359  3E03               	addlw	3
 18422  035A  0086               	movwf	6
 18423  035B  3001               	movlw	1	; select bank2/3
 18424  035C  0087               	movwf	7
 18425  035D  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18426  035E  3A80               	xorlw	128
 18427  035F  3C80               	sublw	128
 18428  0360  1D03               	skipz
 18429  0361  2B64               	goto	u620_25
 18430  0362  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18431  0363  0201               	subwf	1,w
 18432  0364                     u620_25:	
 18433  0364  1C03               	skipc
 18434  0365  0008               	return
 18435                           
 18436                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18437  0366  0879               	movf	_DimmerLightsIntr,w
 18438  0367  3E03               	addlw	3
 18439  0368  0086               	movwf	6
 18440  0369  3001               	movlw	1	; select bank2/3
 18441  036A  0087               	movwf	7
 18442  036B  0181               	clrf	1
 18443                           
 18444                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18445  036C  0879               	movf	_DimmerLightsIntr,w
 18446  036D  0086               	movwf	6
 18447  036E  3001               	movlw	1	; select bank2/3
 18448  036F  0087               	movwf	7
 18449  0370  1001               	bcf	1,0
 18450                           
 18451                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18452  0371  0879               	movf	_DimmerLightsIntr,w
 18453  0372  3E08               	addlw	8
 18454  0373  0086               	movwf	6
 18455  0374  3001               	movlw	1	; select bank2/3
 18456  0375  0087               	movwf	7
 18457  0376  1401               	bsf	1,0
 18458                           
 18459                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18460  0377  0879               	movf	_DimmerLightsIntr,w
 18461  0378  3E09               	addlw	9
 18462  0379  0086               	movwf	6
 18463  037A  3001               	movlw	1	; select bank2/3
 18464  037B  0087               	movwf	7
 18465  037C  1E01               	btfss	1,4
 18466  037D  0008               	return
 18467                           
 18468                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18469  037E  0879               	movf	_DimmerLightsIntr,w
 18470  037F  3E09               	addlw	9
 18471  0380  0086               	movwf	6
 18472  0381  3001               	movlw	1	; select bank2/3
 18473  0382  0087               	movwf	7
 18474  0383  1201               	bcf	1,4
 18475                           
 18476                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18477  0384  0876               	movf	setDimmerLights_IntrControl@lights,w
 18478  0385  3A01               	xorlw	1
 18479  0386  1D03               	skipz
 18480  0387  0008               	return
 18481                           
 18482                           ;Dimmer_B1.c: 244: RB1 = 0;
 18483  0388  0020               	movlb	0	; select bank0
 18484  0389  108D               	bcf	13,1	;volatile
 18485                           
 18486                           ;Dimmer_B1.c: 246: }
 18487                           ;Dimmer_B1.c: 253: }
 18488                           ;Dimmer_B1.c: 254: }
 18489                           ;Dimmer_B1.c: 255: } else {
 18490  038A  0008               	return
 18491  038B                     i1l6859:	
 18492                           
 18493                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18494  038B  0879               	movf	_DimmerLightsIntr,w
 18495  038C  3E08               	addlw	8
 18496  038D  0086               	movwf	6
 18497  038E  3001               	movlw	1	; select bank2/3
 18498  038F  0087               	movwf	7
 18499  0390  1C01               	btfss	1,0
 18500  0391  2C4F               	goto	i1l678
 18501                           
 18502                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18503  0392  0879               	movf	_DimmerLightsIntr,w
 18504  0393  3E08               	addlw	8
 18505  0394  0086               	movwf	6
 18506  0395  3001               	movlw	1	; select bank2/3
 18507  0396  0087               	movwf	7
 18508  0397  1001               	bcf	1,0
 18509                           
 18510                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18511  0398  0879               	movf	_DimmerLightsIntr,w
 18512  0399  0086               	movwf	6
 18513  039A  3001               	movlw	1	; select bank2/3
 18514  039B  0087               	movwf	7
 18515  039C  1C81               	btfss	1,1
 18516  039D  2C4F               	goto	i1l678
 18517                           
 18518                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18519  039E  3001               	movlw	1
 18520  039F  00F2               	movwf	??_setDimmerLights_IntrControl
 18521  03A0  0A79               	incf	_DimmerLightsIntr,w
 18522  03A1  0086               	movwf	6
 18523  03A2  3001               	movlw	1	; select bank2/3
 18524  03A3  0087               	movwf	7
 18525  03A4  0872               	movf	??_setDimmerLights_IntrControl,w
 18526  03A5  0781               	addwf	1,f
 18527                           
 18528                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18529  03A6  0A79               	incf	_DimmerLightsIntr,w
 18530  03A7  0086               	movwf	6
 18531  03A8  3001               	movlw	1	; select bank2/3
 18532  03A9  0087               	movwf	7
 18533  03AA  0879               	movf	_DimmerLightsIntr,w
 18534  03AB  3E02               	addlw	2
 18535  03AC  0084               	movwf	4
 18536  03AD  3001               	movlw	1	; select bank2/3
 18537  03AE  0085               	movwf	5
 18538  03AF  0800               	movf	0,w
 18539  03B0  0201               	subwf	1,w
 18540  03B1  1C03               	skipc
 18541  03B2  2C4F               	goto	i1l678
 18542                           
 18543                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18544  03B3  0A79               	incf	_DimmerLightsIntr,w
 18545  03B4  0086               	movwf	6
 18546  03B5  3001               	movlw	1	; select bank2/3
 18547  03B6  0087               	movwf	7
 18548  03B7  0181               	clrf	1
 18549                           
 18550                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18551  03B8  0879               	movf	_DimmerLightsIntr,w
 18552  03B9  0086               	movwf	6
 18553  03BA  3001               	movlw	1	; select bank2/3
 18554  03BB  0087               	movwf	7
 18555  03BC  1D81               	btfss	1,3
 18556  03BD  2C04               	goto	i1l6889
 18557                           
 18558                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18559  03BE  0879               	movf	_DimmerLightsIntr,w
 18560  03BF  0086               	movwf	6
 18561  03C0  3001               	movlw	1	; select bank2/3
 18562  03C1  0087               	movwf	7
 18563  03C2  1A01               	btfsc	1,4
 18564  03C3  2BE5               	goto	i1l6881
 18565                           
 18566                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(85*0.8))) {
 18567  03C4  0879               	movf	_DimmerLightsIntr,w
 18568  03C5  3E04               	addlw	4
 18569  03C6  0086               	movwf	6
 18570  03C7  3001               	movlw	1	; select bank2/3
 18571  03C8  0087               	movwf	7
 18572  03C9  3044               	movlw	68
 18573  03CA  0201               	subwf	1,w
 18574  03CB  1803               	skipnc
 18575  03CC  2BD6               	goto	i1l6877
 18576                           
 18577                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18578  03CD  3001               	movlw	1
 18579  03CE  00F2               	movwf	??_setDimmerLights_IntrControl
 18580  03CF  0879               	movf	_DimmerLightsIntr,w
 18581  03D0  3E04               	addlw	4
 18582  03D1  0086               	movwf	6
 18583  03D2  3001               	movlw	1	; select bank2/3
 18584  03D3  0087               	movwf	7
 18585  03D4  0872               	movf	??_setDimmerLights_IntrControl,w
 18586  03D5  0781               	addwf	1,f
 18587  03D6                     i1l6877:	
 18588                           
 18589                           ;Dimmer_B1.c: 266: }
 18590                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(85*0.8))) {
 18591  03D6  0879               	movf	_DimmerLightsIntr,w
 18592  03D7  3E04               	addlw	4
 18593  03D8  0086               	movwf	6
 18594  03D9  3001               	movlw	1	; select bank2/3
 18595  03DA  0087               	movwf	7
 18596  03DB  0801               	movf	1,w
 18597  03DC  3A44               	xorlw	68
 18598  03DD  1D03               	skipz
 18599  03DE  2C4F               	goto	i1l678
 18600                           
 18601                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18602  03DF  0879               	movf	_DimmerLightsIntr,w
 18603  03E0  0086               	movwf	6
 18604  03E1  3001               	movlw	1	; select bank2/3
 18605  03E2  0087               	movwf	7
 18606  03E3  1601               	bsf	1,4
 18607                           
 18608                           ;Dimmer_B1.c: 269: }
 18609                           ;Dimmer_B1.c: 270: } else {
 18610  03E4  2C4F               	goto	i1l678
 18611  03E5                     i1l6881:	
 18612                           
 18613                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18614  03E5  0879               	movf	_DimmerLightsIntr,w
 18615  03E6  3E04               	addlw	4
 18616  03E7  0086               	movwf	6
 18617  03E8  3001               	movlw	1	; select bank2/3
 18618  03E9  0087               	movwf	7
 18619  03EA  300D               	movlw	13
 18620  03EB  0201               	subwf	1,w
 18621  03EC  1C03               	skipc
 18622  03ED  2BF5               	goto	i1l6885
 18623                           
 18624                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18625  03EE  0879               	movf	_DimmerLightsIntr,w
 18626  03EF  3E04               	addlw	4
 18627  03F0  0086               	movwf	6
 18628  03F1  3001               	movlw	1	; select bank2/3
 18629  03F2  0087               	movwf	7
 18630  03F3  3001               	movlw	1
 18631  03F4  0281               	subwf	1,f
 18632  03F5                     i1l6885:	
 18633                           
 18634                           ;Dimmer_B1.c: 273: }
 18635                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18636  03F5  0879               	movf	_DimmerLightsIntr,w
 18637  03F6  3E04               	addlw	4
 18638  03F7  0086               	movwf	6
 18639  03F8  3001               	movlw	1	; select bank2/3
 18640  03F9  0087               	movwf	7
 18641  03FA  0801               	movf	1,w
 18642  03FB  3A0C               	xorlw	12
 18643  03FC  1D03               	skipz
 18644  03FD  2C4F               	goto	i1l678
 18645                           
 18646                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18647  03FE  0879               	movf	_DimmerLightsIntr,w
 18648  03FF  0086               	movwf	6
 18649  0400  3001               	movlw	1	; select bank2/3
 18650  0401  0087               	movwf	7
 18651  0402  1201               	bcf	1,4
 18652                           
 18653                           ;Dimmer_B1.c: 276: }
 18654                           ;Dimmer_B1.c: 277: }
 18655                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18656  0403  2C4F               	goto	i1l678
 18657  0404                     i1l6889:	
 18658  0404  0879               	movf	_DimmerLightsIntr,w
 18659  0405  0086               	movwf	6
 18660  0406  3001               	movlw	1	; select bank2/3
 18661  0407  0087               	movwf	7
 18662  0408  1D01               	btfss	1,2
 18663  0409  2C4F               	goto	i1l678
 18664                           
 18665                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18666  040A  0879               	movf	_DimmerLightsIntr,w
 18667  040B  3E04               	addlw	4
 18668  040C  0086               	movwf	6
 18669  040D  3001               	movlw	1	; select bank2/3
 18670  040E  0087               	movwf	7
 18671  040F  0879               	movf	_DimmerLightsIntr,w
 18672  0410  3E05               	addlw	5
 18673  0411  0084               	movwf	4
 18674  0412  3001               	movlw	1	; select bank2/3
 18675  0413  0085               	movwf	5
 18676  0414  0800               	movf	0,w
 18677  0415  0201               	subwf	1,w
 18678  0416  1803               	skipnc
 18679  0417  2C22               	goto	i1l6895
 18680                           
 18681                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18682  0418  3001               	movlw	1
 18683  0419  00F2               	movwf	??_setDimmerLights_IntrControl
 18684  041A  0879               	movf	_DimmerLightsIntr,w
 18685  041B  3E04               	addlw	4
 18686  041C  0086               	movwf	6
 18687  041D  3001               	movlw	1	; select bank2/3
 18688  041E  0087               	movwf	7
 18689  041F  0872               	movf	??_setDimmerLights_IntrControl,w
 18690  0420  0781               	addwf	1,f
 18691                           
 18692                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18693  0421  2C37               	goto	i1l6899
 18694  0422                     i1l6895:	
 18695  0422  0879               	movf	_DimmerLightsIntr,w
 18696  0423  3E05               	addlw	5
 18697  0424  0086               	movwf	6
 18698  0425  3001               	movlw	1	; select bank2/3
 18699  0426  0087               	movwf	7
 18700  0427  0879               	movf	_DimmerLightsIntr,w
 18701  0428  3E04               	addlw	4
 18702  0429  0084               	movwf	4
 18703  042A  3001               	movlw	1	; select bank2/3
 18704  042B  0085               	movwf	5
 18705  042C  0800               	movf	0,w
 18706  042D  0201               	subwf	1,w
 18707  042E  1803               	skipnc
 18708  042F  2C37               	goto	i1l6899
 18709                           
 18710                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18711  0430  0879               	movf	_DimmerLightsIntr,w
 18712  0431  3E04               	addlw	4
 18713  0432  0086               	movwf	6
 18714  0433  3001               	movlw	1	; select bank2/3
 18715  0434  0087               	movwf	7
 18716  0435  3001               	movlw	1
 18717  0436  0281               	subwf	1,f
 18718  0437                     i1l6899:	
 18719                           
 18720                           ;Dimmer_B1.c: 283: }
 18721                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18722  0437  0879               	movf	_DimmerLightsIntr,w
 18723  0438  3E05               	addlw	5
 18724  0439  0086               	movwf	6
 18725  043A  3001               	movlw	1	; select bank2/3
 18726  043B  0087               	movwf	7
 18727  043C  0879               	movf	_DimmerLightsIntr,w
 18728  043D  3E04               	addlw	4
 18729  043E  0084               	movwf	4
 18730  043F  3001               	movlw	1	; select bank2/3
 18731  0440  0085               	movwf	5
 18732  0441  0800               	movf	0,w
 18733  0442  0601               	xorwf	1,w
 18734  0443  1D03               	skipz
 18735  0444  2C4F               	goto	i1l678
 18736                           
 18737                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18738  0445  0879               	movf	_DimmerLightsIntr,w
 18739  0446  0086               	movwf	6
 18740  0447  3001               	movlw	1	; select bank2/3
 18741  0448  0087               	movwf	7
 18742  0449  1101               	bcf	1,2
 18743                           
 18744                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18745  044A  0879               	movf	_DimmerLightsIntr,w
 18746  044B  0086               	movwf	6
 18747  044C  3001               	movlw	1	; select bank2/3
 18748  044D  0087               	movwf	7
 18749  044E  1081               	bcf	1,1
 18750  044F                     i1l678:	
 18751                           
 18752                           ;Dimmer_B1.c: 287: }
 18753                           ;Dimmer_B1.c: 288: }
 18754                           ;Dimmer_B1.c: 289: }
 18755                           ;Dimmer_B1.c: 290: }
 18756                           ;Dimmer_B1.c: 291: }
 18757                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18758  044F  0879               	movf	_DimmerLightsIntr,w
 18759  0450  3E09               	addlw	9
 18760  0451  0086               	movwf	6
 18761  0452  3001               	movlw	1	; select bank2/3
 18762  0453  0087               	movwf	7
 18763  0454  1D81               	btfss	1,3
 18764  0455  0008               	return
 18765                           
 18766                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18767  0456  3001               	movlw	1
 18768  0457  00F2               	movwf	??_setDimmerLights_IntrControl
 18769  0458  0879               	movf	_DimmerLightsIntr,w
 18770  0459  3E0C               	addlw	12
 18771  045A  0086               	movwf	6
 18772  045B  3001               	movlw	1	; select bank2/3
 18773  045C  0087               	movwf	7
 18774  045D  0872               	movf	??_setDimmerLights_IntrControl,w
 18775  045E  0781               	addwf	1,f
 18776                           
 18777                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18778  045F  0879               	movf	_DimmerLightsIntr,w
 18779  0460  3E0C               	addlw	12
 18780  0461  0086               	movwf	6
 18781  0462  3001               	movlw	1	; select bank2/3
 18782  0463  0087               	movwf	7
 18783  0464  0801               	movf	1,w
 18784  0465  3A05               	xorlw	5
 18785  0466  1D03               	skipz
 18786  0467  0008               	return
 18787                           
 18788                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18789  0468  0879               	movf	_DimmerLightsIntr,w
 18790  0469  3E0C               	addlw	12
 18791  046A  0086               	movwf	6
 18792  046B  3001               	movlw	1	; select bank2/3
 18793  046C  0087               	movwf	7
 18794  046D  0181               	clrf	1
 18795                           
 18796                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18797  046E  0879               	movf	_DimmerLightsIntr,w
 18798  046F  3E09               	addlw	9
 18799  0470  0086               	movwf	6
 18800  0471  3001               	movlw	1	; select bank2/3
 18801  0472  0087               	movwf	7
 18802  0473  1181               	bcf	1,3
 18803  0474  0008               	return
 18804  0475                     __end_of_setDimmerLights_IntrControl:	
 18805                           
 18806                           	psect	text131
 18807  1C17                     __ptext131:	
 18808 ;; *************** function _DimmerIntrPointSelect *****************
 18809 ;; Defined at:
 18810 ;;		line 72 in file "../src/Dimmer_B1.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;  lights          1    wreg     unsigned char 
 18813 ;; Auto vars:     Size  Location     Type
 18814 ;;  lights          1    1[COMMON] unsigned char 
 18815 ;; Return value:  Size  Location     Type
 18816 ;;		None               void
 18817 ;; Registers used:
 18818 ;;		wreg
 18819 ;; Tracked objects:
 18820 ;;		On entry : 0/0
 18821 ;;		On exit  : 0/0
 18822 ;;		Unchanged: 0/0
 18823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;Total ram usage:        2 bytes
 18829 ;; Hardware stack levels used:    1
 18830 ;; This function calls:
 18831 ;;		Nothing
 18832 ;; This function is called by:
 18833 ;;		_setDimmerLights_IntrControl
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           
 18838                           ;psect for function _DimmerIntrPointSelect
 18839  1C17                     _DimmerIntrPointSelect:	
 18840                           
 18841                           ;incstack = 0
 18842                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18843                           ;DimmerIntrPointSelect@lights stored from wreg
 18844  1C17  00F1               	movwf	DimmerIntrPointSelect@lights
 18845                           
 18846                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18847  1C18  0871               	movf	DimmerIntrPointSelect@lights,w
 18848  1C19  3A01               	xorlw	1
 18849  1C1A  1D03               	skipz
 18850  1C1B  0008               	return
 18851                           
 18852                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18853  1C1C  30C5               	movlw	_DimmerLights1& (0+255)
 18854  1C1D  00F0               	movwf	??_DimmerIntrPointSelect
 18855  1C1E  0870               	movf	??_DimmerIntrPointSelect,w
 18856  1C1F  00F9               	movwf	_DimmerLightsIntr
 18857  1C20  0008               	return
 18858  1C21                     __end_of_DimmerIntrPointSelect:	
 18859                           
 18860                           	psect	text132
 18861  1CDB                     __ptext132:	
 18862 ;; *************** function _IOC_ISR *****************
 18863 ;; Defined at:
 18864 ;;		line 400 in file "../src/MCU_B1.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;		None
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;		None
 18869 ;; Return value:  Size  Location     Type
 18870 ;;		None               void
 18871 ;; Registers used:
 18872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18873 ;; Tracked objects:
 18874 ;;		On entry : 0/0
 18875 ;;		On exit  : 0/0
 18876 ;;		Unchanged: 0/0
 18877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18882 ;;Total ram usage:        0 bytes
 18883 ;; Hardware stack levels used:    1
 18884 ;; Hardware stack levels required when called:    3
 18885 ;; This function calls:
 18886 ;;		_setDimmerReClock
 18887 ;; This function is called by:
 18888 ;;		_ISR
 18889 ;; This function uses a non-reentrant model
 18890 ;;
 18891                           
 18892                           
 18893                           ;psect for function _IOC_ISR
 18894  1CDB                     _IOC_ISR:	
 18895                           
 18896                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18897                           
 18898                           ;incstack = 0
 18899                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18900  1CDB  1D8B               	btfss	11,3	;volatile
 18901  1CDC  0008               	return
 18902  1CDD  1C0B               	btfss	11,0	;volatile
 18903  1CDE  0008               	return
 18904  1CDF  0027               	movlb	7	; select bank7
 18905  1CE0  1D16               	btfss	22,2	;volatile
 18906  1CE1  0008               	return
 18907                           
 18908                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18909  1CE2  1116               	bcf	22,2	;volatile
 18910                           
 18911                           ;MCU_B1.c: 403: IOCIF = 0;
 18912  1CE3  100B               	bcf	11,0	;volatile
 18913                           
 18914                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18915  1CE4  0021               	movlb	1	; select bank1
 18916  1CE5  1C20               	btfss	_myMain^(0+128),0
 18917  1CE6  0008               	return
 18918                           
 18919                           ;MCU_B1.c: 407: setDimmerReClock();
 18920  1CE7  319B  23A5         	fcall	_setDimmerReClock
 18921  1CE9  0008               	return
 18922  1CEA                     __end_of_IOC_ISR:	
 18923                           
 18924                           	psect	text133
 18925  1BA5                     __ptext133:	
 18926 ;; *************** function _setDimmerReClock *****************
 18927 ;; Defined at:
 18928 ;;		line 243 in file "../src/MCU_B1.c"
 18929 ;; Parameters:    Size  Location     Type
 18930 ;;		None
 18931 ;; Auto vars:     Size  Location     Type
 18932 ;;		None
 18933 ;; Return value:  Size  Location     Type
 18934 ;;		None               void
 18935 ;; Registers used:
 18936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18937 ;; Tracked objects:
 18938 ;;		On entry : 0/0
 18939 ;;		On exit  : 0/0
 18940 ;;		Unchanged: 0/0
 18941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18946 ;;Total ram usage:        0 bytes
 18947 ;; Hardware stack levels used:    1
 18948 ;; Hardware stack levels required when called:    2
 18949 ;; This function calls:
 18950 ;;		_setDimmerLights_IntrIOC_GO
 18951 ;; This function is called by:
 18952 ;;		_IOC_ISR
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           
 18957                           ;psect for function _setDimmerReClock
 18958  1BA5                     _setDimmerReClock:	
 18959                           
 18960                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18961                           
 18962                           ;incstack = 0
 18963                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18964  1BA5  3001               	movlw	1
 18965  1BA6  3193  238A         	fcall	_setDimmerLights_IntrIOC_GO
 18966  1BA8  0008               	return
 18967  1BA9                     __end_of_setDimmerReClock:	
 18968                           
 18969                           	psect	text134
 18970  138A                     __ptext134:	
 18971 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18972 ;; Defined at:
 18973 ;;		line 28 in file "../src/Dimmer_B1.c"
 18974 ;; Parameters:    Size  Location     Type
 18975 ;;  lights          1    wreg     unsigned char 
 18976 ;; Auto vars:     Size  Location     Type
 18977 ;;  lights          1    2[COMMON] unsigned char 
 18978 ;; Return value:  Size  Location     Type
 18979 ;;		None               void
 18980 ;; Registers used:
 18981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18982 ;; Tracked objects:
 18983 ;;		On entry : 0/0
 18984 ;;		On exit  : 0/0
 18985 ;;		Unchanged: 0/0
 18986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18991 ;;Total ram usage:        1 bytes
 18992 ;; Hardware stack levels used:    1
 18993 ;; Hardware stack levels required when called:    1
 18994 ;; This function calls:
 18995 ;;		_DimmerIntrIOCPointSelect
 18996 ;; This function is called by:
 18997 ;;		_setDimmerReClock
 18998 ;; This function uses a non-reentrant model
 18999 ;;
 19000                           
 19001                           
 19002                           ;psect for function _setDimmerLights_IntrIOC_GO
 19003  138A                     _setDimmerLights_IntrIOC_GO:	
 19004                           
 19005                           ;incstack = 0
 19006                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19007                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19008  138A  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19009                           
 19010                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19011  138B  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19012  138C  319C  242B  3193   	fcall	_DimmerIntrIOCPointSelect
 19013                           
 19014                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19015  138F  0021               	movlb	1	; select bank1
 19016  1390  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19017  1391  0086               	movwf	6
 19018  1392  3001               	movlw	1	; select bank2/3
 19019  1393  0087               	movwf	7
 19020  1394  1801               	btfsc	1,0
 19021  1395  0008               	return
 19022  1396  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19023  1397  3E09               	addlw	9
 19024  1398  0086               	movwf	6
 19025  1399  3001               	movlw	1	; select bank2/3
 19026  139A  0087               	movwf	7
 19027  139B  1981               	btfsc	1,3
 19028  139C  0008               	return
 19029  139D  0020               	movlb	0	; select bank0
 19030  139E  190D               	btfsc	13,2	;volatile
 19031  139F  0008               	return
 19032                           
 19033                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19034  13A0  0021               	movlb	1	; select bank1
 19035  13A1  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19036  13A2  0086               	movwf	6
 19037  13A3  3001               	movlw	1	; select bank2/3
 19038  13A4  0087               	movwf	7
 19039  13A5  1401               	bsf	1,0
 19040                           
 19041                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19042  13A6  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19043  13A7  3E09               	addlw	9
 19044  13A8  0086               	movwf	6
 19045  13A9  3001               	movlw	1	; select bank2/3
 19046  13AA  0087               	movwf	7
 19047  13AB  1581               	bsf	1,3
 19048                           
 19049                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19050  13AC  0022               	movlb	2	; select bank2
 19051  13AD  01C0               	clrf	(_Dimmer^(0+256)+2)
 19052                           
 19053                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19054  13AE  0021               	movlb	1	; select bank1
 19055  13AF  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19056  13B0  0086               	movwf	6
 19057  13B1  3001               	movlw	1	; select bank2/3
 19058  13B2  0087               	movwf	7
 19059  13B3  1F01               	btfss	1,6
 19060  13B4  0008               	return
 19061                           
 19062                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19063  13B5  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19064  13B6  3E09               	addlw	9
 19065  13B7  0086               	movwf	6
 19066  13B8  3001               	movlw	1	; select bank2/3
 19067  13B9  0087               	movwf	7
 19068  13BA  1601               	bsf	1,4
 19069                           
 19070                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19071  13BB  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19072  13BC  3A01               	xorlw	1
 19073  13BD  1D03               	skipz
 19074  13BE  0008               	return
 19075                           
 19076                           ;Dimmer_B1.c: 54: RB1 = 1;
 19077  13BF  0020               	movlb	0	; select bank0
 19078  13C0  148D               	bsf	13,1	;volatile
 19079  13C1  0008               	return
 19080  13C2                     __end_of_setDimmerLights_IntrIOC_GO:	
 19081                           
 19082                           	psect	text135
 19083  1C2B                     __ptext135:	
 19084 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19085 ;; Defined at:
 19086 ;;		line 8 in file "../src/Dimmer_B1.c"
 19087 ;; Parameters:    Size  Location     Type
 19088 ;;  lights          1    wreg     unsigned char 
 19089 ;; Auto vars:     Size  Location     Type
 19090 ;;  lights          1    1[COMMON] unsigned char 
 19091 ;; Return value:  Size  Location     Type
 19092 ;;		None               void
 19093 ;; Registers used:
 19094 ;;		wreg
 19095 ;; Tracked objects:
 19096 ;;		On entry : 0/0
 19097 ;;		On exit  : 0/0
 19098 ;;		Unchanged: 0/0
 19099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19104 ;;Total ram usage:        2 bytes
 19105 ;; Hardware stack levels used:    1
 19106 ;; This function calls:
 19107 ;;		Nothing
 19108 ;; This function is called by:
 19109 ;;		_setDimmerLights_IntrIOC_GO
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           
 19114                           ;psect for function _DimmerIntrIOCPointSelect
 19115  1C2B                     _DimmerIntrIOCPointSelect:	
 19116                           
 19117                           ;incstack = 0
 19118                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19119                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19120  1C2B  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19121                           
 19122                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19123  1C2C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19124  1C2D  3A01               	xorlw	1
 19125  1C2E  1D03               	skipz
 19126  1C2F  0008               	return
 19127                           
 19128                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19129  1C30  30C5               	movlw	_DimmerLights1& (0+255)
 19130  1C31  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19131  1C32  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19132  1C33  0021               	movlb	1	; select bank1
 19133  1C34  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19134  1C35  0008               	return
 19135  1C36                     __end_of_DimmerIntrIOCPointSelect:	
 19136  007E                     btemp	set	126	;btemp
 19137  007E                     pic14e$flags	set	126
 19138  007E                     wtemp	set	126
 19139  007E                     wtemp0	set	126
 19140  0080                     wtemp1	set	128
 19141  0082                     wtemp2	set	130
 19142  0084                     wtemp3	set	132
 19143  0086                     wtemp4	set	134
 19144  0088                     wtemp5	set	136
 19145  007F                     wtemp6	set	127
 19146  007E                     ttemp	set	126
 19147  007E                     ttemp0	set	126
 19148  0081                     ttemp1	set	129
 19149  0084                     ttemp2	set	132
 19150  0087                     ttemp3	set	135
 19151  007F                     ttemp4	set	127
 19152  007E                     ltemp	set	126
 19153  007E                     ltemp0	set	126
 19154  0082                     ltemp1	set	130
 19155  0086                     ltemp2	set	134
 19156  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      79
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76052
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1448
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1448
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0    9271
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4946
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     332
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4097
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     690
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     690
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23078
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   23078
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22295
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1331
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   20780
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    6014
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1595
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11659
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11458
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11392
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1180
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     712
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     712
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1097
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21752
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21361
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9593
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10349
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     646
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3173
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3173
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    1820
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1530
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     942
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 08 09:45:30 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 1723                                       l94 154A  
                                     l86 1737                                       l95 1546  
                                     l96 1534                                       l98 1544  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F75  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1C6D  
                 __end_of_setDelayOff_GO 08C4                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 174B  
                   _setDimmerLights_Line 1C84                             ___ftadd@sign 004B  
                                    l231 0A1B                                      l304 1DF2  
                                    l305 1DF3                     _setDimmerLights_SwOn 13FE  
                                    l348 1087                                      l709 11A7  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00CB             getDimmerLights_Status@lights 0022  
                                    _Sw1 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1DFC                    _Buzzer_Initialization 1B96  
                        __end_of_ADC_Set 1BEC                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                   _setMain_Exception$3310 0039  
                        _setDimmerLights 0CE5                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FB9                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1CEA                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2003 0646                                     l2012 05C9  
                                   l2005 0594                                     l1206 1597  
                                   l2014 0602                                     l2006 0596  
                                   l2007 059E                                     l1431 120C  
                                   l1183 12E0                                     l2048 1CEF  
                                   l2072 1318                                     l2056 0DA5  
                                   l1426 11F5                                     l2066 0DFB  
               ?_DimmerLightsPointSelect 0070                                     l1427 1210  
                                   l1197 1176                                     l1541 01BA  
                                   l2086 0980                                     l1383 13FC  
                                   l1544 007A                                     l1545 018A  
                                   l1546 0188                                     l2098 1466  
                        __end_of_IOC_Set 1CB4                                     l2382 1F04  
                                   l2368 1E41                                     l2392 0326  
                                   l2394 01FF                           _Load_Main$3638 002D  
                                   l1686 0E9F                                     l2735 09CB  
                                   l6201 11F9                                     l2729 09B4  
                                   l6027 11BA                                     l6131 15E1  
                                   l6221 1289                                     l2758 0514  
                                   l5511 1D8F                                     l6311 09F2  
                                   l6127 15D2                                     l7023 1F1F  
                                   l6153 1E86                                     l6209 1207  
                                   l7041 1558                                     l6305 09E9  
                                   l6145 1454                                     l7025 1F22  
                                   l6155 1E89                                     l5515 1D95  
                                   l6235 12A6                                     l6227 1292  
                                   l6075 1E5C                                     l6171 1FA3  
                                   l6331 0A24                                     l6307 09EC  
                                   l5533 1F80                                     l5605 0553  
                                   l5621 0ED0                                     l6077 1E60  
                                   l6325 0A03                                     l7301 1E4C  
                                   l7133 0E12                                     l7029 1F27  
                                   l6159 1E8F                                     l6415 1098  
                                   l6423 1F5C                                     l6095 1677  
                                   l5615 0EBA                                     l7047 156D  
                                   l6175 1FA9                                     l6343 0A37  
                                   l6335 0A2A                                     l7215 05B5  
                                   l6417 10A3                                     l6425 1F5F  
                                   l6097 164C                                     l5545 049D  
                                   l6169 1FA0                                     l6361 0B80  
                                   l6337 0A2E                                     l6329 0A21  
                                   l6273 0922                                     l7081 0838  
                                   l5811 1618                                     l6099 167D  
                                   l5491 09A0                                     l5483 098A  
                                   l5555 04B3                                     l5643 0F2A  
                                   l5635 0F11                                     l5715 0C77  
                                   l6507 0D5A                                     l6515 0B23  
                                   l6371 0B92                                     l6355 0B77  
                                   l6363 0B83                                     l6339 0A31  
                                   l6291 0961                                     l7251 05E9  
                                   l7091 0858                                     l7075 082A  
                                   l7067 0817                                     l7331 022D  
                                   l7315 01EA                                     l7163 0E6B  
                  _setDimmerLights_SwOff 14BE                                     l6429 1F65  
                                   l5821 1633                                     l5573 04E0  
                                   l5549 04A4                                     l5741 0CC2  
                                   l5733 0CA7                                     l6605 115E  
                                   l7413 1343                                     l7405 1325  
                                   l6373 0B95                                     l6357 0B7A  
                                   l6285 0947                                     l7085 0848  
                                   l7093 0861                                     l7341 025F  
                                   l7165 0E6D                                     l7431 151E  
                                   l6471 112A                                     l6199 11F0  
                                   l5487 0991                                     l5591 0526  
                                   l5575 04EA                                     l5567 04CD  
                                   l5743 0CCB                                     l5735 0CB5  
                                   l7407 1331                                     l5663 0F79  
                                   l6295 0965                                     l7175 0E82  
                                   l5825 163B                                     l5817 162A  
                                   l5809 160C                                     l6473 114B  
                                   l5497 09B9                                     l5489 099B  
                                   l5585 0506                                     l5577 04EF  
                                   l5745 0CCE                                     l7417 134C  
                                   l6393 0BAC                                     l6377 0B9B  
                                   l5657 0F63                                     l6289 095D  
                                   l6713 0DF1                                     l7249 05E7  
                                   l6561 1C75                                     l7177 0E83  
                                   l5499 09C1                                     l5595 0538  
                                   l5587 0510                                     l5579 04F3  
                                   l6395 0BC4                                     l5691 0FD8  
                                   l5675 0FB4                                     l6707 0DE6  
                                   l7267 0613                                     l6539 125A  
                                   l7355 029D                                     l6469 1146  
                                   l5749 0CDC                                     l7365 02CF  
                                   l6495 0D33                                     l5687 0FD0  
                                   l5679 0FBC                                     l7279 0634  
                                   l7391 0322                                     l7631 0BFE  
                                   l6761 14A8                                     l5793 15F9  
                                   l5769 1121                                     l5873 089F  
                                   l7481 11A9                                     l6649 1D75  
                                   l6673 0D91                                     l7297 1E46  
                                   l6737 1D86                                     l6771 14B8  
                                   l6755 149F                                     l5875 08AC  
                                   l5955 14F2                                     l7539 06BC  
                                   l5939 1434                                     l7643 0C2B  
                                   l6765 14AF                                     l6757 14A2  
                                   l5877 08B5                                     l5869 0899  
                                   l5973 17F0                                     l7477 119E  
                                   l6685 0DA8                                     l6767 14B2  
                                   l5799 1604                                     l6935 1770  
                                   l7479 11A1                                     l7751 0095  
                                   l7639 0C23                                     l6937 1776  
                                   l7729 0069                                     l6697 0DC0  
                                   l7673 137B                                     l6947 179E  
                                   l7659 0C58                                     l7691 13DC  
                                   l7781 0140                                     l7757 00BF  
                  _myMain_Initialization 1CF9                                     l7849 01A8  
                                   l7873 1F0D                                     l7953 16C9  
                                   l7787 014D                                     l7789 0153  
                                   l7949 16BE                                     l7799 0168  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4125 09D2                                     u4055 0996  
                                   u4075 09AF                                     u5045 1E1F  
                                   u4325 04F4                                     u5135 1655  
                                   u4095 09BC                                     u4265 04CE  
                                   u4425 0EE2                                     u4505 0F85  
                                   u4355 0507                                     u4435 0EF2  
                                   u4515 0F95                                     _PEIE 005E  
                                   u4445 0F12                                     u4295 04E1  
                                   u4455 0F21                                     u4535 0FBD  
                                   u4465 0F2B                                     u4625 0C7E  
                                   u4545 0FC3                                     u4805 1619  
                                   u7205 133C                                     u4815 1623  
                                   u4735 110D                                     u4655 0CA8  
                                   u7215 1344                                     u4575 0FD9  
                                   u4825 162B                                     u4585 0FDF  
                                   u7245 1514                                     u4685 0CC3  
                                   u7175 1328                                     u5585 108D  
                                   u4785 160F                                     u7195 1332  
                                   u5685 1133                                     u4990 17AE  
                                   u7535 0C11                                     u6905 0624  
                                   u6665 0E53                                     u7625 1372  
                                   u4995 17AC                                     u7475 12D7  
                                   u7635 1381                                     u7805 0100  
                                   u6685 0E73                                     u6785 05AF  
                                   u7585 0C45                                     u7675 13F4  
                                   u7865 0159                                     _LWLO 0CAD  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00AE                                     _Load 0141  
                                   _Temp 00D7                                     _main 169A  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0921  
                        __end_of_RF_Main 1B9F                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1C62                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1BA5  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 147B                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1D08  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1BC5         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C21                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 1642  
                        __end_of___ftadd 056B                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1C05                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1353                                    i1l678 044F  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1E25  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 13C2  
             _setDimmerLights_IntrIOC_GO 138A                         __end_of_TMR1_ISR 2000  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 169A  
             _setDimmerLights_ErrorClose 1642                         __end_of_TMR1_Set 1CC0  
                                  _getAD 1F14                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1DC2              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D38  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 114E  
          __end_of_setLED_Initialization 1D59                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 17A4  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0AA8                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 16F2  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1BC9  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D6E  
                   _setSw_Initialization 1D38                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0921                           _setMemory_Data 1C90  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C4C  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08C4                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F97  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09E2  
               _getMain_All_Error_Status 11DF                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1E97                                   i1l6881 03E5  
                                 i1l6859 038B                                   i1l6885 03F5  
                                 i1l6877 03D6                                   i1l6895 0422  
                                 i1l6889 0404                                   i1l6899 0437  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u620_25 0364                                   _OSCCON 0099  
                                 u740_25 1FFA                       __size_of_Load_Main 017D  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E66                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B95  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E3A  
                                 _Dimmer 013E                                   _DlySw1 01DD  
             __end_of_Mcu_Initialization 1DB0                      __end_of_Buzzer_Main 1551  
                                 _Memory 01A0                                   _Timer1 00C6  
     __end_of_setDimmerLights_TriggerAdj 1EF4               _setDimmerLights_TriggerAdj 1ED4  
                                 ___bmul 1D8C                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 000B  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 127A                                   _myMain 00A0  
                 __end_of_setMemory_Data 1C9C                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 16F2  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1BD3  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 0475              _setDimmerLights_IntrControl 032F  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1DE8              getMain_Lights_Count@status1 0023  
            getMain_Lights_Count@status2 0021              getMain_Lights_Count@status3 0022  
                  __end_of_SwPointSelect 080B             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 000B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1E3A               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0B0D         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 003F                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$4884 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F34                            __end_of_getAD 1F34  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1BBD  
                        _getSw_KeyStatus 1D7B                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1D28  
                              ?_WDT_Main 0070                        __end_of_Load_Main 01C0  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1123  
             __end_of_set_TimeoutCleared 1BCE                 __end_of_setDimmerReClock 1BA9  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CE                     __size_of_setLED_Main 0033  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1B9F                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1507  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1BA5  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1BB5  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 169A  
                         _getDelayOff_GO 1D18                      _CC2500_WriteCommand 1E7E  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1BEC  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1BE5                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1353                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1C6D  
                     _setRFSW_AdjControl 143B                                  _IOC_ISR 1CDB  
                                _IOC_Set 1CA8                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 12B0  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 07E5  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1B9C                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C57  
        __end_of_setControl_Lights_Table 0981                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0A43                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1C84  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1D6A  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1D28           __end_of_getDimmerLights_Status 1D18  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1D8C  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C36  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1EB5  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 15EE  
                                ___ftadd 0475                                  ___ftdiv 0EA3  
                                ___ftneg 1BFC                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1F14  
                                ___lwdiv 131C                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1D6A                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 13C2                                  __ptext2 1CF9  
                                __ptext3 1353                                  __ptext4 0BDD  
                                __ptext5 1F14                                  __ptext6 1DB0  
                                __ptext7 0002                                  __ptext8 1BA2  
                                __ptext9 0DFE                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1C17  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 12E6                __end_of_Flash_Memory_Read 07FF  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 056B  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1BB9  
                      _DimmerLights_Main 117D           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1BD9               __end_of_CC2500_ClearRXFIFO 1BAD  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1BB1  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1C4C                      _DelayOffPointSelect 1C36  
                         _getMain_LoadOK 1CCD                                  clrloop0 1BE0  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1C17  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 10CF                            _DelayTime_1us 1082  
                      __end_of_setTxData 07E5               __end_of_Flash_Memory_Write 117D  
                                init_ram 1BD9                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1BDA                               _setSw_Main 01C0  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1F97                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1D48                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B73  
                          _CC2500_TxData 09E2                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1551  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C05                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 11AD                       _Mcu_Initialization 1D9E  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 13FE  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C57                  __end_of_setPercentValue 0AA8  
                 __end_of_getMain_LoadOK 1CDB                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 10F9                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0B0D  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1FB9  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E7E                     _setRF_Initialization 1C62  
                     _setMemory_LoopSave 1DD5                              _Switch_Main 1EF4  
                      __size_of_LED_Main 0004                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1C41                  __end_of_getRF_KeyStatus 1D7B  
                      _setMain_Exception 080B                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E25  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1D9E                 setMain_Exception@command 003C  
        _setDimmerLights_AdjControl$2113 0027                     setRF_DimmerLights@on 0020  
               _DimmerIntrIOCPointSelect 1C2B                        getSw_KeyStatus@sw 0070  
                      __size_of_TMR1_ISR 0024            __size_of_getDimmerLights_Line 000B  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 12B0  
          __size_of_setDimmerLights_Line 000C            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 174B                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1C78               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 159F                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 11AD                          ?_LedPointSelect 0070  
                              _Load_Main 0043                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1BF4  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1ED4          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1BC9                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E2  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0867                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1BA2                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D1  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D3                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1C21                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1212                         _CC2500_SIDLEMode 1BB1  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 11DF  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1DC2  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1082  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DF  
                         Load_Main@adjgo 002C                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 07FF                                _getBuz_GO 1D59  
    __end_of_Flash_Memory_Initialization 0726              _Flash_Memory_Initialization 064A  
                               ?___awdiv 0020                                __ptext100 1E97  
                              __ptext101 0867                                __ptext110 1BD3  
                              __ptext102 10F9                                __ptext111 1C36  
                              __ptext103 1D8C                                __ptext120 1BAD  
                              __ptext112 1E25                                __ptext104 1D18  
                              __ptext121 1BA9                                __ptext113 1BB1  
                              __ptext105 1D08                                __ptext130 032F  
                              __ptext122 1E7E                                __ptext114 147B  
                              __ptext106 1C41                                __ptext131 1C17  
                              __ptext123 1BC9                                __ptext115 10CF  
                              __ptext107 16F2                                __ptext132 1CDB  
                              __ptext124 1E10                                __ptext116 1EB5  
                              __ptext108 15EE                                __ptext133 1BA5  
                              __ptext125 1DE8                                __ptext117 1F54  
                              __ptext109 1BB5                                 ?___ftadd 0041  
                              __ptext134 138A                                __ptext126 1507  
                              __ptext118 1C78                                __ptext135 1C2B  
                              __ptext127 1B96                                __ptext119 1082  
                              __ptext129 1FDC                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 003C                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 15EE            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1B99                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0020                       __end_of_TouchPower 1E4F  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 1FDC  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2089 0069  
                              _r_address 00D4           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 1507  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1D08  
                         __size_of_getAD 0020                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 0800  
                    __end_of_setLED_Main 1245                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1BA2             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BC1  
                        SwPointSelect@sw 0021                                clear_ram0 1BDF  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 13C2                                _setTxData 0726  
    __end_of_DimmerLights_Initialization 1CCD              _DimmerLights_Initialization 1CC0  
                     _CC2500_ClearRXFIFO 1BA9                       _CC2500_ClearTXFIFO 1BAD  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E10  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 114E  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1FDC                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1CB4                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C9                     __end_of_RF_RxDisable 1CF9  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E97  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1DB0  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1CA8  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 131C  
                  _DlyOff_Initialization 1BD3                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1BC5  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1BF4                    _Switch_Initialization 1C0E  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 138A  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1DE8  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D2                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$3320 0021  
          _getMain_All_Error_Status$3321 0023                 __end_of_getDimmer_LoadOK 1BFC  
                    _Load_Initialization 1BCE                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1F75                         ??_LedPointSelect 0020  
                               ___ftpack 0981            __size_of_getMain_Lights_Count 0010  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002B  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1212  
             __end_of_setRF_DimmerLights 1800                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
     __size_of_getAll_DimmerLights_AdjGO 000A                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1B9F  
                               __ptext11 07FF                                 __ptext20 1C0E  
                               __ptext12 1EF4                                 __ptext21 1D38  
                               __ptext13 01C0                                 __ptext30 13FE  
                               __ptext22 1E3A                                 __ptext14 1DFC  
                               __ptext31 143B                                 __ptext23 1B9C  
                               __ptext15 1245                                 __ptext40 09E2  
                               __ptext32 11AD                                 __ptext24 056B  
                               __ptext16 1D7B                                 __ptext41 0B73  
                               __ptext33 1FB9                                 __ptext25 0D6E  
                               __ptext17 0800                                 __ptext50 1CA8  
                               __ptext42 1F97                                 __ptext34 0AA8  
                               __ptext26 12E6                                 __ptext18 080B  
                               __ptext51 1BC5                                 __ptext43 1E4F  
                               __ptext35 0F4C                                 __ptext27 1DD5  
                               __ptext19 1C6D                                 __ptext60 1066  
                               __ptext52 1BE5                                 __ptext44 1B99  
                               __ptext36 1DC2                                 __ptext28 0921  
                               __ptext61 1BC1                                 __ptext53 0043  
                               __ptext45 1C62                                 __ptext37 1D6A  
                               __ptext29 159F                                 __ptext70 114E  
                               __ptext62 1212                                 __ptext54 1CCD  
                               __ptext46 1D9E                                 __ptext38 1D59  
                               __ptext71 1C05                                 __ptext63 1BBD  
                               __ptext55 1BF4                                 __ptext47 1C57  
                               __ptext39 1CEA                                 __ptext80 0C5E  
                               __ptext72 07E5                                 __ptext64 1D48  
                               __ptext56 1D28                                 __ptext48 1CB4  
                               __ptext81 1BFC                                 __ptext73 117D  
                               __ptext65 12B0                                 __ptext57 1C21  
                               __ptext49 1E66                                 __ptext90 1123  
                               __ptext82 0EA3                                 __ptext74 174B  
                               __ptext66 1551                                 __ptext58 131C  
                               __ptext91 1BEC                                 __ptext83 0475  
                               __ptext75 0B0D                                 __ptext67 1C9C  
                               __ptext59 1BCE                                 __ptext92 1CC0  
                               __ptext84 1F75                                 __ptext76 0CE5  
                               __ptext68 064A                                 __ptext93 10A8  
                               __ptext85 0981                                 __ptext77 0726  
                               __ptext69 1C90                                 __ptext94 1B95  
                               __ptext86 127A                                 __ptext78 17A4  
                               __ptext95 1BB9                                 __ptext87 1C4C  
                               __ptext79 0A43                                 __ptext96 08C4  
                               __ptext88 1C84                                 __ptext97 1642  
                               __ptext89 11DF                                 __ptext98 14BE  
                               __ptext99 1ED4                                 __product 0220  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1C78            __end_of_Dimmer_Initialization 1B96  
           __end_of_setDimmerLights_Main 17A4             __end_of_setDimmerLights_Line 1C90  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 143B  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1DFC                 __end_of_CC2500_SIDLEMode 1BB5  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1C41  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0004           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E4F                       _CC2500_InitPATable 1EB5  
               __end_of_setMemory_Modify 1DD5            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 064A                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$5828 0022  
                        _CC2500_PowerRST 147B                 __size_of_getSw_KeyStatus 0011  
            __end_of_Flash_Memory_Modify 159F                        ??_getPercentValue 005C  
                            _setLog_Code 12E6              __end_of_Flash_Memory_Unlock 1C0E  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F54  
                     __end_of_setSw_Main 032F                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 10F9                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C2B              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10CF  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 10A8              __end_of_setDimmerLights_Adj 0B73  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1B99     __size_of_setDimmerLights_IntrControl 0146  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1C9C  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1BB9      __size_of_setDimmerLights_IntrIOC_GO 0038  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1BBD       __end_of_setDimmerLights_AdjControl 127A  
             _setDimmerLights_AdjControl 1245                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0867  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 1123  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10A8                  __end_of_CC2500_ReadByte 1E66  
           __end_of_setSw_Initialization 1D48                          _Timeout_Counter 1E10  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1CEA               __end_of_LED_Initialization 1BC1  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0800  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B9C  
                  __end_of_CC2500_RxData 0BDD                    __end_of_CC2500_TxData 0A43  
                  _setLoad_AH_AL_Restore 1066                  __end_of_CC2500_PowerRST 14BE  
         getAll_DimmerLights_AdjGO@adjgo 0020  
