

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 19 13:53:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1FE0                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1FE0  3463               	retlw	99
  2163  1FE1  3402               	retlw	2
  2164  1FE2  3400               	retlw	0
  2165  1FE3  3400               	retlw	0
  2166  1FE4  3400               	retlw	0
  2167  1FE5  3400               	retlw	0
  2168  1FE6  3400               	retlw	0
  2169  1FE7  3400               	retlw	0
  2170  1FE8  3400               	retlw	0
  2171  1FE9  3400               	retlw	0
  2172  1FEA  3400               	retlw	0
  2173  1FEB  3400               	retlw	0
  2174  1FEC  34FF               	retlw	255
  2175  1FED  34FF               	retlw	255
  2176  1FEE  34FF               	retlw	255
  2177  1FEF  3400               	retlw	0
  2178  1FF0  3400               	retlw	0
  2179  1FF1  3400               	retlw	0
  2180  1FF2  3400               	retlw	0
  2181  1FF3  3400               	retlw	0
  2182  1FF4  3400               	retlw	0
  2183  1FF5  3400               	retlw	0
  2184  1FF6  3400               	retlw	0
  2185  1FF7  3400               	retlw	0
  2186  1FF8  3400               	retlw	0
  2187  1FF9  3400               	retlw	0
  2188  1FFA  3400               	retlw	0
  2189  1FFB  3400               	retlw	0
  2190  1FFC  3400               	retlw	0
  2191  1FFD  3400               	retlw	0
  2192  1FFE  3400               	retlw	0
  2193  1FFF  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  1069                     _WPUB1	set	4201
  2365  106A                     _WPUB2	set	4202
  2366  0396                     _IOCBF	set	918
  2367  0395                     _IOCBN	set	917
  2368  0394                     _IOCBP	set	916
  2369  1CB2                     _IOCBF2	set	7346
  2370                           
  2371                           ; #config settings
  2372  0000                     
  2373                           	psect	cinit
  2374  0015                     start_initialization:	
  2375  0015                     __initialization:	
  2376                           
  2377                           ; Clear objects allocated to BITCOMMON
  2378  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2379                           
  2380                           ; Clear objects allocated to COMMON
  2381  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2382  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2383  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001A  30A0               	movlw	low __pbssBANK1
  2390  001B  0084               	movwf	4
  2391  001C  3000               	movlw	high __pbssBANK1
  2392  001D  0085               	movwf	5
  2393  001E  3049               	movlw	73
  2394  001F  319C  2459  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0022  3020               	movlw	low __pbssBANK2
  2398  0023  0084               	movwf	4
  2399  0024  3001               	movlw	high __pbssBANK2
  2400  0025  0085               	movwf	5
  2401  0026  304D               	movlw	77
  2402  0027  319C  2459  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002A  30A0               	movlw	low __pbssBANK3
  2406  002B  0084               	movwf	4
  2407  002C  3001               	movlw	high __pbssBANK3
  2408  002D  0085               	movwf	5
  2409  002E  304C               	movlw	76
  2410  002F  319C  2459  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Initialize objects allocated to BANK4
  2413  0032  30E0               	movlw	low __pidataBANK4
  2414  0033  0084               	movwf	4
  2415  0034  309F               	movlw	(high __pidataBANK4)| (0+128)
  2416  0035  0085               	movwf	5
  2417  0036  3020               	movlw	low __pdataBANK4
  2418  0037  0086               	movwf	6
  2419  0038  3002               	movlw	high __pdataBANK4
  2420  0039  0087               	movwf	7
  2421  003A  3020               	movlw	32
  2422  003B  319C  2453         	fcall	init_ram
  2423  003D                     end_of_initialization:	
  2424                           ;End of C runtime variable initialization code
  2425                           
  2426  003D                     __end_of__initialization:	
  2427  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2428  003E  0020               	movlb	0
  2429  003F  3188  2892         	ljmp	_main	;jump to C main() function
  2430                           
  2431                           	psect	bitbssCOMMON
  2432  03C0                     __pbitbssCOMMON:	
  2433  03C0                     _Receive_OK:	
  2434  03C0                     	ds	1
  2435  03C1                     _Transceive_OK:	
  2436  03C1                     	ds	1
  2437                           
  2438                           	psect	bssCOMMON
  2439  0075                     __pbssCOMMON:	
  2440  0075                     _DelayOff:	
  2441  0075                     	ds	1
  2442  0076                     _DimmerLightsIntr:	
  2443  0076                     	ds	1
  2444  0077                     _Sw:	
  2445  0077                     	ds	1
  2446                           
  2447                           	psect	bssBANK0
  2448  006F                     __pbssBANK0:	
  2449  006F                     _DimmerLights:	
  2450  006F                     	ds	1
  2451                           
  2452                           	psect	bssBANK1
  2453  00A0                     __pbssBANK1:	
  2454  00A0                     _myMain:	
  2455  00A0                     	ds	14
  2456  00AE                     _Buz1:	
  2457  00AE                     	ds	12
  2458  00BA                     _RF1:	
  2459  00BA                     	ds	12
  2460  00C6                     _Dimmer:	
  2461  00C6                     	ds	3
  2462  00C9                     _WDT:	
  2463  00C9                     	ds	2
  2464  00CB                     _CRC:	
  2465  00CB                     	ds	1
  2466  00CC                     _DimmerLights11:	
  2467  00CC                     	ds	1
  2468  00CD                     _DimmerLightsIntrIOC:	
  2469  00CD                     	ds	1
  2470  00CE                     _LED:	
  2471  00CE                     	ds	1
  2472  00CF                     _RSSI:	
  2473  00CF                     	ds	1
  2474  00D0                     _Rx_Length:	
  2475  00D0                     	ds	1
  2476  00D1                     _SPI0Buffer:	
  2477  00D1                     	ds	1
  2478  00D2                     _SwDetect:	
  2479  00D2                     	ds	1
  2480  00D3                     _Tx_Length:	
  2481  00D3                     	ds	1
  2482  00D4                     _r_address:	
  2483  00D4                     	ds	1
  2484  00D5                     _r_data:	
  2485  00D5                     	ds	1
  2486  00D6                     _s_data:	
  2487  00D6                     	ds	1
  2488  00D7                     _Temp:	
  2489  00D7                     	ds	18
  2490                           
  2491                           	psect	bssBANK2
  2492  0120                     __pbssBANK2:	
  2493  0120                     _Timer1:	
  2494  0120                     	ds	3
  2495  0123                     _RF_Count:	
  2496  0123                     	ds	2
  2497  0125                     _Load:	
  2498  0125                     	ds	46
  2499  0153                     _DimmerLights1:	
  2500  0153                     	ds	17
  2501  0164                     _DlySw1:	
  2502  0164                     	ds	5
  2503  0169                     _VarErrLED:	
  2504  0169                     	ds	4
  2505                           
  2506                           	psect	bssBANK3
  2507  01A0                     __pbssBANK3:	
  2508  01A0                     _RF_Data:	
  2509  01A0                     	ds	30
  2510  01BE                     _Memory:	
  2511  01BE                     	ds	37
  2512  01E3                     _Sw1:	
  2513  01E3                     	ds	9
  2514                           
  2515                           	psect	dataBANK4
  2516  0220                     __pdataBANK4:	
  2517  0220                     __product:	
  2518  0220                     	ds	32
  2519                           
  2520                           	psect	clrtext
  2521  1C59                     clear_ram0:	
  2522                           ;	Called with FSR0 containing the base address, and
  2523                           ;	WREG with the size to clear
  2524                           
  2525  1C59  0064               	clrwdt	;clear the watchdog before getting into this loop
  2526  1C5A                     clrloop0:	
  2527  1C5A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2528  1C5B  3101               	addfsr 0,1
  2529  1C5C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2530  1C5D  2C5A               	goto	clrloop0	;have we reached the end yet?
  2531  1C5E  3400               	retlw	0	;all done for this memory range, return
  2532                           
  2533                           	psect	inittext
  2534  1C53                     init_ram:	
  2535  1C53  00FE               	movwf	126
  2536  1C54                     initloop:	
  2537  1C54  0012               	moviw fsr0++
  2538  1C55  001E               	movwi fsr1++
  2539  1C56  0BFE               	decfsz	126,f
  2540  1C57  2C54               	goto	initloop
  2541  1C58  3400               	retlw	0
  2542                           
  2543                           	psect	cstackBANK3
  2544  01EC                     __pcstackBANK3:	
  2545  01EC                     ?_main:	
  2546  01EC                     main@argc:	
  2547                           ; 2 bytes @ 0x0
  2548                           
  2549                           
  2550                           ; 2 bytes @ 0x0
  2551  01EC                     	ds	2
  2552  01EE                     main@argv:	
  2553                           
  2554                           ; 2 bytes @ 0x2
  2555  01EE                     	ds	2
  2556                           
  2557                           	psect	cstackBANK2
  2558  016D                     __pcstackBANK2:	
  2559  016D                     setRF_Main@loop_f:	
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  016D                     	ds	1
  2563  016E                     setRF_Main@Receive_OK:	
  2564                           
  2565                           ; 1 bytes @ 0x1
  2566  016E                     	ds	1
  2567  016F                     setRF_Main@error:	
  2568                           
  2569                           ; 1 bytes @ 0x2
  2570  016F                     	ds	1
  2571                           
  2572                           	psect	cstackBANK1
  2573  00E9                     __pcstackBANK1:	
  2574  00E9                     setDimmerLights_ErrorClose@count:	
  2575  00E9                     Exception_Main@count:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  00E9                     	ds	1
  2581  00EA                     setDimmerLights_ErrorClose@lights:	
  2582  00EA                     Exception_Main@error:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  00EA                     	ds	1
  2588  00EB                     setDimmerLights_ErrorClose@i:	
  2589  00EB                     Exception_Main@i:	
  2590                           ; 2 bytes @ 0x2
  2591                           
  2592                           
  2593                           ; 2 bytes @ 0x2
  2594  00EB                     	ds	2
  2595  00ED                     getRxData@error:	
  2596  00ED                     Exception_Main@i_3438:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599                           
  2600                           ; 2 bytes @ 0x4
  2601  00ED                     	ds	2
  2602  00EF                     Exception_Main@lights:	
  2603                           
  2604                           ; 1 bytes @ 0x6
  2605  00EF                     	ds	1
  2606                           
  2607                           	psect	cstackCOMMON
  2608  0070                     __pcstackCOMMON:	
  2609  0070                     ?_Timeout_Counter:	
  2610  0070                     ?_set_TimeoutCleared:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_WriteByte:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_WriteCommand:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_ReadStatus:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ReadByte:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_PowerRST:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_InitSetREG:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_InitPATable:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_ClearTXFIFO:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_ClearRXFIFO:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_FrequencyCabr:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_SIDLEMode:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_DlyOff_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DlyOff_Main:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_ErrorClose:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setDimmerLights_Line:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setTxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLED_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setLED_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Fosc_Set:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_IO_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_TMR1_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_ADC_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_IOC_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_WDT_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_IOC_ISR:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_TMR1_ISR:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Flash_Memory_Write:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Flash_Memory_Modify:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_WDT_Clearing:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_myMain_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Temp_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Load_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Switch_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_RF_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_getLoad_AD:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_getTemp_AD:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_my_MainTimer:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Temp_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Load_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Switch_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_RF_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Exception_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setLoad_AH_AL_Restore:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setTemp_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setTemp_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRF_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setRF_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_RF_RxDisable:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_getRxData:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setLog_Code:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setControl_Lights_Table:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRFSW_Control:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setRFSW_AdjControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setRF_DimmerValue:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setSw_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setSw_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_Buzzer_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_Buzzer_Main:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_CC2500_TxData:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_CC2500_RxData:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_CC2500_PowerOnInitial:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DelayOffPointSelect:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayOff_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DelayOff_Main:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerIntrIOCPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ??_DimmerIntrIOCPointSelect:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerIntrPointSelect:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ??_DimmerIntrPointSelect:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setDimmerLights_IntrControl:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLightsPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerLights_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_setDimmerLights_SwOn:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_setDimmerLights_SwOff:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setDimmerLights_AdjOn:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DimmerLights_Main:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_setDimmerLights_AdjRF:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_LedPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_LED_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_LED_Main:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Mcu_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_ISR:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerReClock:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Initialization:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Flash_Memory_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_Flash_Memory_Unlock:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_Flash_Memory_Erasing:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_setMemory_Modify:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_setMemory_LoopSave:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_WDT_Main:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_setRF_Learn:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_TouchPower:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_SwPointSelect:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_DelayTimejudge:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Allow_Condition:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getLoad_OK:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getMain_All_Error_Status:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getMain_LightsStatus:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_setPercentValue:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getPercentValue:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_Flash_Memory_Read:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getRF_KeyStatus:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getSw_KeyStatus:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDelayOff_GO:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getDimmer_LoadGO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Line:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmerLights_Status:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getAll_DimmerLights_AdjSw:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getDimmer_Load_Status:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getMain_Lights_Count:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     getDimmerLights_Allow_Condition@lights:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     getSw_KeyStatus@sw:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x0
  2957  0070                     	ds	1
  2958  0071                     DimmerIntrIOCPointSelect@lights:	
  2959  0071                     DimmerIntrPointSelect@lights:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962                           
  2963                           ; 1 bytes @ 0x1
  2964  0071                     	ds	1
  2965  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2966  0072                     ??_setDimmerLights_IntrControl:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972                           
  2973                           ; 1 bytes @ 0x2
  2974  0072                     	ds	1
  2975  0073                     ??_IOC_ISR:	
  2976  0073                     ??_setDimmerReClock:	
  2977                           ; 0 bytes @ 0x3
  2978                           
  2979  0073                     setDimmerLights_IntrControl@lights:	
  2980                           ; 0 bytes @ 0x3
  2981                           
  2982                           
  2983                           ; 1 bytes @ 0x3
  2984  0073                     	ds	1
  2985  0074                     ??_TMR1_ISR:	
  2986  0074                     ??_ISR:	
  2987                           ; 0 bytes @ 0x4
  2988                           
  2989                           
  2990                           ; 0 bytes @ 0x4
  2991  0074                     	ds	1
  2992                           
  2993                           	psect	cstackBANK0
  2994  0020                     __pcstackBANK0:	
  2995  0020                     ??_Timeout_Counter:	
  2996  0020                     ??_set_TimeoutCleared:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_CC2500_WriteByte:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_CC2500_ReadByte:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ?_DelayTime_1us:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_getLoad_OK:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ??_getMain_All_Error_Status:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_getMain_LightsStatus:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_setDimmerLights_Line:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_setTxData:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_Fosc_Set:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_IO_Set:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_TMR1_Set:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_ADC_Set:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_IOC_Set:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_WDT_Set:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_Flash_Memory_Read:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ?_setMemory_Data:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_Flash_Memory_Write:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_WDT_Clearing:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_myMain_Initialization:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_Temp_Initialization:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_setLoad_AH_AL_Restore:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_setTemp_Initialization:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_setRF_Initialization:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_getRF_KeyStatus:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_getSw_KeyStatus:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_Buzzer_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Buzzer_Main:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_DelayOffPointSelect:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_DimmerLightsPointSelect:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_getDimmer_LoadGO:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getDimmerLights_Line:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getDimmer_Load_Status:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_LedPointSelect:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Flash_Memory_Unlock:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_Flash_Memory_Erasing:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_setMemory_Modify:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_setMemory_LoopSave:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_WDT_Main:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getMain_Lights_Count:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_setRF_Learn:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_TouchPower:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_SwPointSelect:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ?___bmul:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ?_getBuz_GO:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     ?_getAD:	
  3132                           ; 2 bytes @ 0x0
  3133                           
  3134  0020                     ?___wmul:	
  3135                           ; 2 bytes @ 0x0
  3136                           
  3137  0020                     ?___awdiv:	
  3138                           ; 2 bytes @ 0x0
  3139                           
  3140  0020                     ?___lwdiv:	
  3141                           ; 2 bytes @ 0x0
  3142                           
  3143  0020                     ?___ftpack:	
  3144                           ; 2 bytes @ 0x0
  3145                           
  3146  0020                     getDimmer_LoadGO@loadgo:	
  3147                           ; 3 bytes @ 0x0
  3148                           
  3149  0020                     setDimmerLights_Line@lights:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     getDimmerLights_Line@line:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0020                     getDimmer_Load_Status@status:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0020                     getAD@adcon1:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0020                     setMemory_Data@data:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0020                     getMain_LightsStatus@status:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0020                     getMain_Lights_Count@count:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0020                     getLoad_OK@ok:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     ___bmul@multiplicand:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     DelayTime_1us@count:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     ___wmul@multiplier:	
  3180                           ; 2 bytes @ 0x0
  3181                           
  3182  0020                     ___awdiv@divisor:	
  3183                           ; 2 bytes @ 0x0
  3184                           
  3185  0020                     ___lwdiv@divisor:	
  3186                           ; 2 bytes @ 0x0
  3187                           
  3188  0020                     ___ftpack@arg:	
  3189                           ; 2 bytes @ 0x0
  3190                           
  3191                           
  3192                           ; 3 bytes @ 0x0
  3193  0020                     	ds	1
  3194  0021                     ??_getDimmerLights_Allow_Condition:	
  3195  0021                     ??_setMemory_Data:	
  3196                           ; 0 bytes @ 0x1
  3197                           
  3198  0021                     ??_RF_Initialization:	
  3199                           ; 0 bytes @ 0x1
  3200                           
  3201  0021                     ??_Mcu_Initialization:	
  3202                           ; 0 bytes @ 0x1
  3203                           
  3204  0021                     ??___bmul:	
  3205                           ; 0 bytes @ 0x1
  3206                           
  3207  0021                     CC2500_WriteByte@loop_a:	
  3208                           ; 0 bytes @ 0x1
  3209                           
  3210  0021                     CC2500_ReadByte@loop_b:	
  3211                           ; 1 bytes @ 0x1
  3212                           
  3213  0021                     DelayOffPointSelect@sw:	
  3214                           ; 1 bytes @ 0x1
  3215                           
  3216  0021                     DimmerLightsPointSelect@lights:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219  0021                     LedPointSelect@led:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0021                     Flash_Memory_Read@i:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0021                     Flash_Memory_Write@i:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     setMemory_Modify@command:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     setMemory_LoopSave@command:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     getMain_Lights_Count@status1:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     setLoad_AH_AL_Restore@i:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     setRF_Learn@command:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     getRF_KeyStatus@key:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     SwPointSelect@sw:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     getSw_KeyStatus@status:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     _getMain_All_Error_Status$3424:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255                           
  3256                           ; 2 bytes @ 0x1
  3257  0021                     	ds	1
  3258  0022                     ??_CC2500_WriteCommand:	
  3259  0022                     ??_CC2500_ReadStatus:	
  3260                           ; 0 bytes @ 0x2
  3261                           
  3262  0022                     ??_DelayTime_1us:	
  3263                           ; 0 bytes @ 0x2
  3264                           
  3265  0022                     ?_CC2500_WriteREG:	
  3266                           ; 0 bytes @ 0x2
  3267                           
  3268  0022                     ??_DlyOff_Initialization:	
  3269                           ; 0 bytes @ 0x2
  3270                           
  3271  0022                     ??_setDimmerLights_Initialization:	
  3272                           ; 0 bytes @ 0x2
  3273                           
  3274  0022                     ?_setLED:	
  3275                           ; 0 bytes @ 0x2
  3276                           
  3277  0022                     ??_setLED_Main:	
  3278                           ; 0 bytes @ 0x2
  3279                           
  3280  0022                     ??_Load_Initialization:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_getBuz_GO:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ??_getDelayOff_GO:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_getDimmerLights_Status:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_getAll_DimmerLights_AdjSw:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     CC2500_WriteREG@value:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     DlyOff_Initialization@sw:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301  0022                     getDelayOff_GO@sw:	
  3302                           ; 1 bytes @ 0x2
  3303                           
  3304  0022                     getDimmerLights_Allow_Condition@allow:	
  3305                           ; 1 bytes @ 0x2
  3306                           
  3307  0022                     getDimmerLights_Status@lights:	
  3308                           ; 1 bytes @ 0x2
  3309                           
  3310  0022                     setLED@command:	
  3311                           ; 1 bytes @ 0x2
  3312                           
  3313  0022                     Flash_Memory_Read@address:	
  3314                           ; 1 bytes @ 0x2
  3315                           
  3316  0022                     setMemory_Data@address:	
  3317                           ; 1 bytes @ 0x2
  3318                           
  3319  0022                     _getRF_KeyStatus$5049:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     _getSw_KeyStatus$6017:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     ___bmul@product:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     DelayTime_1us@i:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     ___wmul@multiplicand:	
  3332                           ; 2 bytes @ 0x2
  3333                           
  3334  0022                     ___awdiv@dividend:	
  3335                           ; 2 bytes @ 0x2
  3336                           
  3337  0022                     ___lwdiv@dividend:	
  3338                           ; 2 bytes @ 0x2
  3339                           
  3340                           
  3341                           ; 2 bytes @ 0x2
  3342  0022                     	ds	1
  3343  0023                     ??_CC2500_WriteREG:	
  3344  0023                     ??_setLED:	
  3345                           ; 0 bytes @ 0x3
  3346                           
  3347  0023                     ??_DelayOff_Initialization:	
  3348                           ; 0 bytes @ 0x3
  3349                           
  3350  0023                     ??_getAD:	
  3351                           ; 0 bytes @ 0x3
  3352                           
  3353  0023                     CC2500_WriteCommand@command:	
  3354                           ; 0 bytes @ 0x3
  3355                           
  3356  0023                     CC2500_ReadStatus@status_addr:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0023                     getDelayOff_GO@go:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0023                     setDimmerLights_Initialization@lights:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0023                     _getDimmerLights_Allow_Condition$2172:	
  3366                           ; 1 bytes @ 0x3
  3367                           
  3368  0023                     getDimmerLights_Status@status:	
  3369                           ; 1 bytes @ 0x3
  3370                           
  3371  0023                     getAll_DimmerLights_AdjSw@count:	
  3372                           ; 1 bytes @ 0x3
  3373                           
  3374  0023                     setLED@led:	
  3375                           ; 1 bytes @ 0x3
  3376                           
  3377  0023                     getAD@adcon0:	
  3378                           ; 1 bytes @ 0x3
  3379                           
  3380  0023                     Flash_Memory_Read@ret:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     ___bmul@multiplier:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     ___ftpack@exp:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     _getMain_All_Error_Status$3425:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392                           
  3393                           ; 2 bytes @ 0x3
  3394  0023                     	ds	1
  3395  0024                     ??_CC2500_ClearTXFIFO:	
  3396  0024                     ??_CC2500_ClearRXFIFO:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??_CC2500_SIDLEMode:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     ??_DelayTimejudge:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     ??_setLED_Initialization:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??_Flash_Memory_Modify:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??_getLoad_AD:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??_getTemp_AD:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     ??_RF_RxDisable:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     ??_setSw_Initialization:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     ??_CC2500_TxData:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_CC2500_RxData:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_DimmerLights_Initialization:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_setDimmerLights_AdjOn:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??___wmul:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??___awdiv:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??___lwdiv:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     CC2500_WriteREG@w_addr:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     setDimmerLights_AdjOn@sw:	
  3448                           ; 1 bytes @ 0x4
  3449                           
  3450  0024                     setLED_Initialization@led:	
  3451                           ; 1 bytes @ 0x4
  3452                           
  3453  0024                     setLED_Main@led:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0024                     setSw_Initialization@sw:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0024                     ___ftpack@sign:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0024                     getBuz_GO@i:	
  3463                           ; 1 bytes @ 0x4
  3464                           
  3465  0024                     DelayTime_1us@j:	
  3466                           ; 2 bytes @ 0x4
  3467                           
  3468  0024                     getAll_DimmerLights_AdjSw@i:	
  3469                           ; 2 bytes @ 0x4
  3470                           
  3471  0024                     ___wmul@product:	
  3472                           ; 2 bytes @ 0x4
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x4
  3476  0024                     	ds	1
  3477  0025                     ??_CC2500_InitSetREG:	
  3478  0025                     ??_CC2500_InitPATable:	
  3479                           ; 0 bytes @ 0x5
  3480                           
  3481  0025                     ??_Switch_Initialization:	
  3482                           ; 0 bytes @ 0x5
  3483                           
  3484  0025                     ??___ftpack:	
  3485                           ; 0 bytes @ 0x5
  3486                           
  3487  0025                     ??_LED_Initialization:	
  3488                           ; 0 bytes @ 0x5
  3489                           
  3490  0025                     ??_LED_Main:	
  3491                           ; 0 bytes @ 0x5
  3492                           
  3493  0025                     CC2500_TxData@loop_e:	
  3494                           ; 0 bytes @ 0x5
  3495                           
  3496  0025                     CC2500_RxData@loop_f:	
  3497                           ; 1 bytes @ 0x5
  3498                           
  3499  0025                     Flash_Memory_Modify@i:	
  3500                           ; 1 bytes @ 0x5
  3501                           
  3502  0025                     getMain_All_Error_Status@command:	
  3503                           ; 1 bytes @ 0x5
  3504                           
  3505  0025                     getTemp_AD@channel:	
  3506                           ; 1 bytes @ 0x5
  3507                           
  3508  0025                     ___awdiv@counter:	
  3509                           ; 1 bytes @ 0x5
  3510                           
  3511  0025                     ___lwdiv@counter:	
  3512                           ; 1 bytes @ 0x5
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0x5
  3516  0025                     	ds	1
  3517  0026                     ??_CC2500_PowerRST:	
  3518  0026                     ??_CC2500_FrequencyCabr:	
  3519                           ; 0 bytes @ 0x6
  3520                           
  3521  0026                     ??_Flash_Memory_Main:	
  3522                           ; 0 bytes @ 0x6
  3523                           
  3524  0026                     CC2500_InitSetREG@temp1:	
  3525                           ; 0 bytes @ 0x6
  3526                           
  3527  0026                     CC2500_InitPATable@temp:	
  3528                           ; 1 bytes @ 0x6
  3529                           
  3530  0026                     DelayTimejudge@i:	
  3531                           ; 1 bytes @ 0x6
  3532                           
  3533  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3534                           ; 1 bytes @ 0x6
  3535                           
  3536  0026                     getMain_All_Error_Status@status:	
  3537                           ; 1 bytes @ 0x6
  3538                           
  3539  0026                     getLoad_AD@channel:	
  3540                           ; 1 bytes @ 0x6
  3541                           
  3542  0026                     ___awdiv@sign:	
  3543                           ; 1 bytes @ 0x6
  3544                           
  3545  0026                     ___lwdiv@quotient:	
  3546                           ; 1 bytes @ 0x6
  3547                           
  3548                           
  3549                           ; 2 bytes @ 0x6
  3550  0026                     	ds	1
  3551  0027                     CC2500_InitSetREG@temp2:	
  3552  0027                     CC2500_InitPATable@loop_d:	
  3553                           ; 1 bytes @ 0x7
  3554                           
  3555  0027                     DelayTimejudge@j:	
  3556                           ; 1 bytes @ 0x7
  3557                           
  3558  0027                     getLoad_AD@k:	
  3559                           ; 1 bytes @ 0x7
  3560                           
  3561  0027                     ___awdiv@quotient:	
  3562                           ; 1 bytes @ 0x7
  3563                           
  3564                           
  3565                           ; 2 bytes @ 0x7
  3566  0027                     	ds	1
  3567  0028                     ??_Load_Main:	
  3568  0028                     ?___awtoft:	
  3569                           ; 0 bytes @ 0x8
  3570                           
  3571  0028                     CC2500_InitSetREG@loop_c:	
  3572                           ; 3 bytes @ 0x8
  3573                           
  3574  0028                     DelayTimejudge@k:	
  3575                           ; 1 bytes @ 0x8
  3576                           
  3577  0028                     getLoad_AD@j:	
  3578                           ; 1 bytes @ 0x8
  3579                           
  3580  0028                     ___awtoft@c:	
  3581                           ; 1 bytes @ 0x8
  3582                           
  3583                           
  3584                           ; 2 bytes @ 0x8
  3585  0028                     	ds	1
  3586  0029                     ?_setBuz:	
  3587  0029                     ??_CC2500_PowerOnInitial:	
  3588                           ; 0 bytes @ 0x9
  3589                           
  3590  0029                     DelayTimejudge@value:	
  3591                           ; 0 bytes @ 0x9
  3592                           
  3593  0029                     getLoad_AD@i:	
  3594                           ; 1 bytes @ 0x9
  3595                           
  3596  0029                     setBuz@time:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x9
  3601  0029                     	ds	1
  3602  002A                     Load_Main@error:	
  3603                           
  3604                           ; 1 bytes @ 0xA
  3605  002A                     	ds	1
  3606  002B                     ??_setBuz:	
  3607  002B                     ??___awtoft:	
  3608                           ; 0 bytes @ 0xB
  3609                           
  3610  002B                     Load_Main@Load_Status:	
  3611                           ; 0 bytes @ 0xB
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0xB
  3615  002B                     	ds	1
  3616  002C                     setBuz@count:	
  3617  002C                     Load_Main@i:	
  3618                           ; 1 bytes @ 0xC
  3619                           
  3620                           
  3621                           ; 2 bytes @ 0xC
  3622  002C                     	ds	1
  3623  002D                     ??_my_MainTimer:	
  3624  002D                     ??_setDimmerLights_SwOn:	
  3625                           ; 0 bytes @ 0xD
  3626                           
  3627  002D                     setDimmerLights_SwOn@sw:	
  3628                           ; 0 bytes @ 0xD
  3629                           
  3630  002D                     ___awtoft@sign:	
  3631                           ; 1 bytes @ 0xD
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0xD
  3635  002D                     	ds	1
  3636  002E                     ?___ftdiv:	
  3637  002E                     ?___ftmul:	
  3638                           ; 3 bytes @ 0xE
  3639                           
  3640  002E                     setDimmerLights_SwOn@idle:	
  3641                           ; 3 bytes @ 0xE
  3642                           
  3643  002E                     ___ftdiv@f2:	
  3644                           ; 1 bytes @ 0xE
  3645                           
  3646  002E                     ___ftmul@f1:	
  3647                           ; 3 bytes @ 0xE
  3648                           
  3649                           
  3650                           ; 3 bytes @ 0xE
  3651  002E                     	ds	3
  3652  0031                     ___ftdiv@f1:	
  3653  0031                     ___ftmul@f2:	
  3654                           ; 3 bytes @ 0x11
  3655                           
  3656                           
  3657                           ; 3 bytes @ 0x11
  3658  0031                     	ds	3
  3659  0034                     ??___ftdiv:	
  3660  0034                     ??___ftmul:	
  3661                           ; 0 bytes @ 0x14
  3662                           
  3663                           
  3664                           ; 0 bytes @ 0x14
  3665  0034                     	ds	4
  3666  0038                     ___ftdiv@cntr:	
  3667  0038                     ___ftmul@exp:	
  3668                           ; 1 bytes @ 0x18
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x18
  3672  0038                     	ds	1
  3673  0039                     ___ftdiv@f3:	
  3674  0039                     ___ftmul@f3_as_product:	
  3675                           ; 3 bytes @ 0x19
  3676                           
  3677                           
  3678                           ; 3 bytes @ 0x19
  3679  0039                     	ds	3
  3680  003C                     ___ftdiv@exp:	
  3681  003C                     ___ftmul@cntr:	
  3682                           ; 1 bytes @ 0x1C
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x1C
  3686  003C                     	ds	1
  3687  003D                     ___ftdiv@sign:	
  3688  003D                     ___ftmul@sign:	
  3689                           ; 1 bytes @ 0x1D
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x1D
  3693  003D                     	ds	1
  3694  003E                     ?___ftneg:	
  3695  003E                     ___ftneg@f1:	
  3696                           ; 3 bytes @ 0x1E
  3697                           
  3698                           
  3699                           ; 3 bytes @ 0x1E
  3700  003E                     	ds	3
  3701  0041                     ??___ftneg:	
  3702  0041                     ?___ftadd:	
  3703                           ; 0 bytes @ 0x21
  3704                           
  3705  0041                     ___ftadd@f1:	
  3706                           ; 3 bytes @ 0x21
  3707                           
  3708                           
  3709                           ; 3 bytes @ 0x21
  3710  0041                     	ds	3
  3711  0044                     ___ftadd@f2:	
  3712                           
  3713                           ; 3 bytes @ 0x24
  3714  0044                     	ds	3
  3715  0047                     ??___ftadd:	
  3716                           
  3717                           ; 0 bytes @ 0x27
  3718  0047                     	ds	4
  3719  004B                     ___ftadd@sign:	
  3720                           
  3721                           ; 1 bytes @ 0x2B
  3722  004B                     	ds	1
  3723  004C                     ___ftadd@exp2:	
  3724                           
  3725                           ; 1 bytes @ 0x2C
  3726  004C                     	ds	1
  3727  004D                     ___ftadd@exp1:	
  3728                           
  3729                           ; 1 bytes @ 0x2D
  3730  004D                     	ds	1
  3731  004E                     ?___fttol:	
  3732  004E                     ___fttol@f1:	
  3733                           ; 4 bytes @ 0x2E
  3734                           
  3735                           
  3736                           ; 3 bytes @ 0x2E
  3737  004E                     	ds	4
  3738  0052                     ??___fttol:	
  3739                           
  3740                           ; 0 bytes @ 0x32
  3741  0052                     	ds	4
  3742  0056                     ___fttol@sign1:	
  3743                           
  3744                           ; 1 bytes @ 0x36
  3745  0056                     	ds	1
  3746  0057                     ___fttol@lval:	
  3747                           
  3748                           ; 4 bytes @ 0x37
  3749  0057                     	ds	4
  3750  005B                     ___fttol@exp1:	
  3751                           
  3752                           ; 1 bytes @ 0x3B
  3753  005B                     	ds	1
  3754  005C                     ??_setPercentValue:	
  3755  005C                     ??_getPercentValue:	
  3756                           ; 0 bytes @ 0x3C
  3757                           
  3758                           
  3759                           ; 0 bytes @ 0x3C
  3760  005C                     	ds	2
  3761  005E                     getPercentValue@value:	
  3762  005E                     setPercentValue@value:	
  3763                           ; 1 bytes @ 0x3E
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x3E
  3767  005E                     	ds	1
  3768  005F                     getPercentValue@i:	
  3769  005F                     setPercentValue@i:	
  3770                           ; 3 bytes @ 0x3F
  3771                           
  3772                           
  3773                           ; 3 bytes @ 0x3F
  3774  005F                     	ds	3
  3775  0062                     ?_setProductData:	
  3776  0062                     ??_setDimmerLights_AdjRF:	
  3777                           ; 0 bytes @ 0x42
  3778                           
  3779  0062                     ??_Flash_Memory_Initialization:	
  3780                           ; 0 bytes @ 0x42
  3781                           
  3782  0062                     setProductData@value:	
  3783                           ; 0 bytes @ 0x42
  3784                           
  3785                           
  3786                           ; 1 bytes @ 0x42
  3787  0062                     	ds	1
  3788  0063                     ??_setProductData:	
  3789  0063                     setDimmerLights_AdjRF@lights:	
  3790                           ; 0 bytes @ 0x43
  3791                           
  3792  0063                     Flash_Memory_Initialization@i:	
  3793                           ; 1 bytes @ 0x43
  3794                           
  3795                           
  3796                           ; 1 bytes @ 0x43
  3797  0063                     	ds	2
  3798  0065                     setProductData@address:	
  3799                           
  3800                           ; 1 bytes @ 0x45
  3801  0065                     	ds	1
  3802  0066                     ?_setRF_DimmerLights:	
  3803  0066                     ??_setTemp_Main:	
  3804                           ; 0 bytes @ 0x46
  3805                           
  3806  0066                     ??_setLog_Code:	
  3807                           ; 0 bytes @ 0x46
  3808                           
  3809  0066                     ??_setRF_DimmerValue:	
  3810                           ; 0 bytes @ 0x46
  3811                           
  3812  0066                     ?_setDelayOff_GO:	
  3813                           ; 0 bytes @ 0x46
  3814                           
  3815  0066                     setDelayOff_GO@command:	
  3816                           ; 0 bytes @ 0x46
  3817                           
  3818  0066                     setRF_DimmerLights@on:	
  3819                           ; 1 bytes @ 0x46
  3820                           
  3821                           
  3822                           ; 1 bytes @ 0x46
  3823  0066                     	ds	1
  3824  0067                     ??_setRF_DimmerLights:	
  3825  0067                     setDelayOff_GO@value:	
  3826                           ; 0 bytes @ 0x47
  3827                           
  3828  0067                     setRF_DimmerValue@lights:	
  3829                           ; 1 bytes @ 0x47
  3830                           
  3831                           
  3832                           ; 1 bytes @ 0x47
  3833  0067                     	ds	1
  3834  0068                     ??_setRFSW_AdjControl:	
  3835  0068                     ??_setDelayOff_GO:	
  3836                           ; 0 bytes @ 0x48
  3837                           
  3838  0068                     setTemp_Main@error:	
  3839                           ; 0 bytes @ 0x48
  3840                           
  3841                           
  3842                           ; 1 bytes @ 0x48
  3843  0068                     	ds	1
  3844  0069                     ??_Temp_Main:	
  3845  0069                     setDelayOff_GO@sw:	
  3846                           ; 0 bytes @ 0x49
  3847                           
  3848  0069                     setRF_DimmerLights@status:	
  3849                           ; 1 bytes @ 0x49
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x49
  3853  0069                     	ds	1
  3854  006A                     ??_setDimmerLights_SwOff:	
  3855  006A                     setDimmerLights_SwOff@sw:	
  3856                           ; 0 bytes @ 0x4A
  3857                           
  3858  006A                     setRFSW_AdjControl@status:	
  3859                           ; 1 bytes @ 0x4A
  3860                           
  3861  006A                     setRF_DimmerLights@lights:	
  3862                           ; 1 bytes @ 0x4A
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0x4A
  3866  006A                     	ds	1
  3867  006B                     ??_setDimmerLights_ErrorClose:	
  3868  006B                     ?_setDimmerLights:	
  3869                           ; 0 bytes @ 0x4B
  3870                           
  3871  006B                     ?_setDimmerLights_Adj:	
  3872                           ; 0 bytes @ 0x4B
  3873                           
  3874  006B                     ??_Exception_Main:	
  3875                           ; 0 bytes @ 0x4B
  3876                           
  3877  006B                     ??_setRFSW_Control:	
  3878                           ; 0 bytes @ 0x4B
  3879                           
  3880  006B                     ??_setSw_Main:	
  3881                           ; 0 bytes @ 0x4B
  3882                           
  3883  006B                     setDimmerLights@status:	
  3884                           ; 0 bytes @ 0x4B
  3885                           
  3886  006B                     setDimmerLights_Adj@status:	
  3887                           ; 1 bytes @ 0x4B
  3888                           
  3889  006B                     setRFSW_AdjControl@sw:	
  3890                           ; 1 bytes @ 0x4B
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x4B
  3894  006B                     	ds	1
  3895  006C                     ??_DlyOff_Main:	
  3896  006C                     ??_setDimmerLights:	
  3897                           ; 0 bytes @ 0x4C
  3898                           
  3899  006C                     ??_setDimmerLights_Adj:	
  3900                           ; 0 bytes @ 0x4C
  3901                           
  3902  006C                     setRFSW_Control@status:	
  3903                           ; 0 bytes @ 0x4C
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x4C
  3907  006C                     	ds	1
  3908  006D                     setDimmerLights@lights:	
  3909  006D                     setDimmerLights_Adj@lights:	
  3910                           ; 1 bytes @ 0x4D
  3911                           
  3912  006D                     setRFSW_Control@sw:	
  3913                           ; 1 bytes @ 0x4D
  3914                           
  3915  006D                     setSw_Main@sw:	
  3916                           ; 1 bytes @ 0x4D
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x4D
  3920  006D                     	ds	1
  3921  006E                     ??_setDimmerLights_Main:	
  3922  006E                     ??_Switch_Main:	
  3923                           ; 0 bytes @ 0x4E
  3924                           
  3925  006E                     ??_getRxData:	
  3926                           ; 0 bytes @ 0x4E
  3927                           
  3928  006E                     ??_setControl_Lights_Table:	
  3929                           ; 0 bytes @ 0x4E
  3930                           
  3931  006E                     DlyOff_Main@sw:	
  3932                           ; 0 bytes @ 0x4E
  3933                           
  3934  006E                     setDimmerLights_Main@lights:	
  3935                           ; 1 bytes @ 0x4E
  3936                           
  3937                           
  3938                           ; 1 bytes @ 0x4E
  3939  006E                     	ds	1
  3940  006F                     ??_RF_Main:	
  3941  006F                     ??_setRF_Main:	
  3942                           ; 0 bytes @ 0x4F
  3943                           
  3944  006F                     ??_DelayOff_Main:	
  3945                           ; 0 bytes @ 0x4F
  3946                           
  3947  006F                     ??_DimmerLights_Main:	
  3948                           ; 0 bytes @ 0x4F
  3949                           
  3950  006F                     ??_main:	
  3951                           ; 0 bytes @ 0x4F
  3952                           
  3953                           
  3954                           	psect	maintext
  3955  0892                     __pmaintext:	
  3956                           ; 0 bytes @ 0x4F
  3957 ;;
  3958 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3959 ;;
  3960 ;; *************** function _main *****************
  3961 ;; Defined at:
  3962 ;;		line 7 in file "../src/Main_B1.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  argc            2    0[BANK3 ] int 
  3965 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  2    0[BANK3 ] int 
  3970 ;; Registers used:
  3971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 17F/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3977 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3981 ;;Total ram usage:        4 bytes
  3982 ;; Hardware stack levels required when called:   15
  3983 ;; This function calls:
  3984 ;;		_Buzzer_Initialization
  3985 ;;		_Buzzer_Main
  3986 ;;		_CC2500_PowerOnInitial
  3987 ;;		_DelayOff_Initialization
  3988 ;;		_DelayOff_Main
  3989 ;;		_DimmerLights_Initialization
  3990 ;;		_DimmerLights_Main
  3991 ;;		_Exception_Main
  3992 ;;		_Flash_Memory_Initialization
  3993 ;;		_Flash_Memory_Main
  3994 ;;		_LED_Initialization
  3995 ;;		_LED_Main
  3996 ;;		_Load_Initialization
  3997 ;;		_Load_Main
  3998 ;;		_Mcu_Initialization
  3999 ;;		_RF_Initialization
  4000 ;;		_RF_Main
  4001 ;;		_Switch_Initialization
  4002 ;;		_Switch_Main
  4003 ;;		_Temp_Initialization
  4004 ;;		_Temp_Main
  4005 ;;		_WDT_Main
  4006 ;;		_getLoad_AD
  4007 ;;		_getTemp_AD
  4008 ;;		_myMain_Initialization
  4009 ;;		_my_MainTimer
  4010 ;; This function is called by:
  4011 ;;		Startup code after reset
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _main
  4017  0892                     _main:	
  4018                           
  4019                           ;Main_B1.c: 8: myMain_Initialization();
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4023  0892  319D  258A  3188   	fcall	_myMain_Initialization
  4024                           
  4025                           ;Main_B1.c: 9: Mcu_Initialization();
  4026  0895  319E  2621  3188   	fcall	_Mcu_Initialization
  4027                           
  4028                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4029  0898  3185  2550  3188   	fcall	_Flash_Memory_Initialization
  4030                           
  4031                           ;Main_B1.c: 11: LED_Initialization();
  4032  089B  319C  243C  3188   	fcall	_LED_Initialization
  4033                           
  4034                           ;Main_B1.c: 12: Buzzer_Initialization();
  4035  089E  319C  2412  3188   	fcall	_Buzzer_Initialization
  4036                           
  4037                           ;Main_B1.c: 14: ;;
  4038                           ;Main_B1.c: 15: Temp_Initialization();
  4039  08A1  319C  241E  3188   	fcall	_Temp_Initialization
  4040                           
  4041                           ;Main_B1.c: 16: Load_Initialization();
  4042  08A4  319C  2415  3188   	fcall	_Load_Initialization
  4043                           
  4044                           ;Main_B1.c: 17: ;;
  4045                           ;Main_B1.c: 18: DelayOff_Initialization();
  4046  08A7  319C  2434  3188   	fcall	_DelayOff_Initialization
  4047                           
  4048                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4049  08AA  319C  24AA  3188   	fcall	_DimmerLights_Initialization
  4050                           
  4051                           ;Main_B1.c: 21: ;;
  4052                           ;Main_B1.c: 22: ;;
  4053                           ;Main_B1.c: 23: ;;
  4054                           ;Main_B1.c: 24: Switch_Initialization();
  4055  08AD  319C  2497  3188   	fcall	_Switch_Initialization
  4056                           
  4057                           ;Main_B1.c: 25: RF_Initialization();
  4058  08B0  319C  2418  3188   	fcall	_RF_Initialization
  4059                           
  4060                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4061  08B3  319E  26A7  3188   	fcall	_CC2500_PowerOnInitial
  4062  08B6                     l10244:	
  4063                           ;Main_B1.c: 27: ;;
  4064                           ;Main_B1.c: 28: ;;
  4065                           ;Main_B1.c: 30: while (1) {
  4066                           
  4067                           
  4068                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4069  08B6  0021               	movlb	1	; select bank1
  4070  08B7  1C20               	btfss	_myMain^(0+128),0
  4071  08B8  28C1               	goto	l10248
  4072                           
  4073                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4074  08B9  3005               	movlw	5
  4075  08BA  318D  2504  3188   	fcall	_getLoad_AD
  4076                           
  4077                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4078  08BD  3009               	movlw	9
  4079  08BE  3194  2492  3188   	fcall	_getTemp_AD
  4080  08C1                     l10248:	
  4081                           
  4082                           ;Main_B1.c: 57: }
  4083                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4084  08C1  0022               	movlb	2	; select bank2
  4085  08C2  1C20               	btfss	_Timer1^(0+256),0
  4086  08C3  28B6               	goto	l10244
  4087                           
  4088                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4089  08C4  1020               	bcf	_Timer1^(0+256),0
  4090                           
  4091                           ;Main_B1.c: 96: my_MainTimer();
  4092  08C5  3194  2418  3188   	fcall	_my_MainTimer
  4093                           
  4094                           ;Main_B1.c: 97: WDT_Main();
  4095  08C8  319E  2633  3188   	fcall	_WDT_Main
  4096                           
  4097                           ;Main_B1.c: 98: ;;
  4098                           ;Main_B1.c: 99: ;;
  4099                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4100  08CB  0021               	movlb	1	; select bank1
  4101  08CC  1C20               	btfss	_myMain^(0+128),0
  4102  08CD  28B6               	goto	l10244
  4103                           
  4104                           ;Main_B1.c: 101: Flash_Memory_Main();
  4105  08CE  3193  2306  3188   	fcall	_Flash_Memory_Main
  4106                           
  4107                           ;Main_B1.c: 103: LED_Main();
  4108  08D1  319C  2440  3188   	fcall	_LED_Main
  4109                           
  4110                           ;Main_B1.c: 104: Buzzer_Main();
  4111  08D4  3194  24D0  3188   	fcall	_Buzzer_Main
  4112                           
  4113                           ;Main_B1.c: 106: ;;
  4114                           ;Main_B1.c: 107: Temp_Main();
  4115  08D7  319C  2421  3188   	fcall	_Temp_Main
  4116                           
  4117                           ;Main_B1.c: 108: Load_Main();
  4118  08DA  3180  2041  3188   	fcall	_Load_Main
  4119                           
  4120                           ;Main_B1.c: 109: ;;
  4121                           ;Main_B1.c: 111: ;;
  4122                           ;Main_B1.c: 112: DimmerLights_Main();
  4123  08DD  319F  274C  3188   	fcall	_DimmerLights_Main
  4124                           
  4125                           ;Main_B1.c: 113: Switch_Main();
  4126  08E0  319C  2466  3188   	fcall	_Switch_Main
  4127                           
  4128                           ;Main_B1.c: 114: ;;
  4129                           ;Main_B1.c: 115: ;;
  4130                           ;Main_B1.c: 117: RF_Main();
  4131  08E3  319C  241B  3188   	fcall	_RF_Main
  4132                           
  4133                           ;Main_B1.c: 118: DelayOff_Main();
  4134  08E6  319C  2438  3188   	fcall	_DelayOff_Main
  4135                           
  4136                           ;Main_B1.c: 119: ;;
  4137                           ;Main_B1.c: 120: ;;
  4138                           ;Main_B1.c: 121: Exception_Main();
  4139  08E9  3186  262C  3188   	fcall	_Exception_Main
  4140  08EC  28B6               	goto	l10244
  4141  08ED                     __end_of_main:	
  4142                           ;Main_B1.c: 128: }
  4143                           ;Main_B1.c: 129: }
  4144                           ;Main_B1.c: 163: }
  4145                           ;Main_B1.c: 164: return (0);
  4146                           ;	Return value of _main is never used
  4147                           
  4148                           
  4149                           	psect	text1
  4150  1418                     __ptext1:	
  4151 ;; *************** function _my_MainTimer *****************
  4152 ;; Defined at:
  4153 ;;		line 185 in file "../src/Main_B1.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;Total ram usage:        1 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    7
  4174 ;; This function calls:
  4175 ;;		_setBuz
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _my_MainTimer
  4183  1418                     _my_MainTimer:	
  4184                           
  4185                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4189  1418  0021               	movlb	1	; select bank1
  4190  1419  1820               	btfsc	_myMain^(0+128),0
  4191  141A  2C32               	goto	l9946
  4192                           
  4193                           ;Main_B1.c: 189: myMain.PowerCount++;
  4194  141B  3001               	movlw	1
  4195  141C  0020               	movlb	0	; select bank0
  4196  141D  00AD               	movwf	??_my_MainTimer
  4197  141E  082D               	movf	??_my_MainTimer,w
  4198  141F  0021               	movlb	1	; select bank1
  4199  1420  07A1               	addwf	(_myMain^(0+128)+1),f
  4200                           
  4201                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4202  1421  0821               	movf	(_myMain^(0+128)+1),w
  4203  1422  3A96               	xorlw	150
  4204  1423  1D03               	skipz
  4205  1424  0008               	return
  4206                           
  4207                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4208  1425  01A1               	clrf	(_myMain^(0+128)+1)
  4209                           
  4210                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4211  1426  1420               	bsf	_myMain^(0+128),0
  4212                           
  4213                           ;Main_B1.c: 197: setBuz(3, 50);
  4214  1427  3032               	movlw	50
  4215  1428  0020               	movlb	0	; select bank0
  4216  1429  00A9               	movwf	setBuz@time
  4217  142A  3000               	movlw	0
  4218  142B  00AA               	movwf	setBuz@time+1
  4219  142C  3003               	movlw	3
  4220  142D  3197  27A7         	fcall	_setBuz
  4221                           
  4222                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4223  142F  0021               	movlb	1	; select bank1
  4224  1430  1620               	bsf	_myMain^(0+128),4
  4225                           
  4226                           ;Main_B1.c: 207: }
  4227                           ;Main_B1.c: 208: } else {
  4228  1431  0008               	return
  4229  1432                     l9946:	
  4230                           
  4231                           ;Main_B1.c: 209: myMain.PowerCount++;
  4232  1432  3001               	movlw	1
  4233  1433  0020               	movlb	0	; select bank0
  4234  1434  00AD               	movwf	??_my_MainTimer
  4235  1435  082D               	movf	??_my_MainTimer,w
  4236  1436  0021               	movlb	1	; select bank1
  4237  1437  07A1               	addwf	(_myMain^(0+128)+1),f
  4238                           
  4239                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4240  1438  0821               	movf	(_myMain^(0+128)+1),w
  4241  1439  3A64               	xorlw	100
  4242  143A  1903               	btfsc	3,2
  4243                           
  4244                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4245  143B  01A1               	clrf	(_myMain^(0+128)+1)
  4246                           
  4247                           ;Main_B1.c: 226: }
  4248                           ;Main_B1.c: 228: myMain.Count1++;
  4249  143C  3001               	movlw	1
  4250  143D  07A4               	addwf	(_myMain^(0+128)+4),f
  4251  143E  3000               	movlw	0
  4252  143F  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4253                           
  4254                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4255  1440  3004               	movlw	4
  4256  1441  3EA0               	addlw	_myMain& (0+255)
  4257  1442  0086               	movwf	6
  4258  1443  0187               	clrf	7
  4259  1444  3F40               	moviw [0]fsr1
  4260  1445  3A64               	xorlw	100
  4261  1446  1D03               	skipz
  4262  1447  2C4A               	goto	u11285
  4263  1448  3F41               	moviw [1]fsr1
  4264  1449  3A00               	xorlw	0
  4265  144A                     u11285:	
  4266  144A  1D03               	skipz
  4267  144B  0008               	return
  4268                           
  4269                           ;Main_B1.c: 230: {
  4270                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4271  144C  01A4               	clrf	(_myMain^(0+128)+4)
  4272  144D  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4273                           
  4274                           ;Main_B1.c: 243: if (myMain.Flag) {
  4275  144E  1CA0               	btfss	_myMain^(0+128),1
  4276  144F  2C52               	goto	l1395
  4277                           
  4278                           ;Main_B1.c: 244: myMain.Flag = 0;
  4279  1450  10A0               	bcf	_myMain^(0+128),1
  4280                           
  4281                           ;Main_B1.c: 253: } else {
  4282  1451  0008               	return
  4283  1452                     l1395:	
  4284                           
  4285                           ;Main_B1.c: 254: myMain.Flag = 1;
  4286  1452  14A0               	bsf	_myMain^(0+128),1
  4287  1453  0008               	return
  4288  1454                     __end_of_my_MainTimer:	
  4289                           
  4290                           	psect	text2
  4291  1D8A                     __ptext2:	
  4292 ;; *************** function _myMain_Initialization *****************
  4293 ;; Defined at:
  4294 ;;		line 170 in file "../src/Main_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;		None               void
  4301 ;; Registers used:
  4302 ;;		wreg, fsr1l, fsr1h
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        1 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    5
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _myMain_Initialization
  4324  1D8A                     _myMain_Initialization:	
  4325                           
  4326                           ;Main_B1.c: 173: product = &_product;
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4330  1D8A  3020               	movlw	__product& (0+255)
  4331  1D8B  0020               	movlb	0	; select bank0
  4332  1D8C  00A0               	movwf	??_myMain_Initialization
  4333  1D8D  0820               	movf	??_myMain_Initialization,w
  4334  1D8E  00F9               	movwf	_product
  4335                           
  4336                           ;Main_B1.c: 174: product->Data[20] = 209;
  4337  1D8F  30D1               	movlw	209
  4338  1D90  00A0               	movwf	??_myMain_Initialization
  4339  1D91  0879               	movf	_product,w
  4340  1D92  3E14               	addlw	20
  4341  1D93  0086               	movwf	6
  4342  1D94  3002               	movlw	2	; select bank4/5
  4343  1D95  0087               	movwf	7
  4344  1D96  0820               	movf	??_myMain_Initialization,w
  4345  1D97  0081               	movwf	1
  4346  1D98  0008               	return
  4347  1D99                     __end_of_myMain_Initialization:	
  4348                           
  4349                           	psect	text3
  4350  1492                     __ptext3:	
  4351 ;; *************** function _getTemp_AD *****************
  4352 ;; Defined at:
  4353 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  channel         1    wreg     unsigned char 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  channel         1    5[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        2 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    7
  4374 ;; This function calls:
  4375 ;;		_getAD
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _getTemp_AD
  4383  1492                     _getTemp_AD:	
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4387                           ;getTemp_AD@channel stored from wreg
  4388  1492  0020               	movlb	0	; select bank0
  4389  1493  00A5               	movwf	getTemp_AD@channel
  4390                           
  4391                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4392  1494  0021               	movlb	1	; select bank1
  4393  1495  1D57               	btfss	_Temp^(0+128),2
  4394  1496  0008               	return
  4395                           
  4396                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4397  1497  30F0               	movlw	240
  4398  1498  0020               	movlb	0	; select bank0
  4399  1499  00A4               	movwf	??_getTemp_AD
  4400  149A  0824               	movf	??_getTemp_AD,w
  4401  149B  00A0               	movwf	getAD@adcon1
  4402  149C  0825               	movf	getTemp_AD@channel,w
  4403  149D  319F  27C0  3194   	fcall	_getAD
  4404  14A0  0020               	movlb	0	; select bank0
  4405  14A1  0821               	movf	?_getAD+1,w
  4406  14A2  0021               	movlb	1	; select bank1
  4407  14A3  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4408  14A4  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4409  14A5  0020               	movlb	0	; select bank0
  4410  14A6  0820               	movf	?_getAD,w
  4411  14A7  0021               	movlb	1	; select bank1
  4412  14A8  01E3               	clrf	(_Temp^(0+128)+12)
  4413  14A9  07E3               	addwf	(_Temp^(0+128)+12),f
  4414                           
  4415                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4416  14AA  300C               	movlw	12
  4417  14AB  3ED7               	addlw	_Temp& (0+255)
  4418  14AC  0086               	movwf	6
  4419  14AD  0187               	clrf	7
  4420  14AE  0016               	moviw fsr1++
  4421  14AF  0401               	iorwf	1,w
  4422  14B0  1903               	skipnz
  4423  14B1  0008               	return
  4424                           
  4425                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4426  14B2  0864               	movf	((_Temp+1)^(0+128)+12),w
  4427  14B3  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4428  14B4  1D03               	skipz
  4429  14B5  2CB8               	goto	u11235
  4430  14B6  0863               	movf	(_Temp^(0+128)+12),w
  4431  14B7  025F               	subwf	(_Temp^(0+128)+8),w
  4432  14B8                     u11235:	
  4433  14B8  1803               	skipnc
  4434  14B9  2CC1               	goto	l9928
  4435                           
  4436                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4437  14BA  0864               	movf	((_Temp+1)^(0+128)+12),w
  4438  14BB  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4439  14BC  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4440  14BD  0863               	movf	(_Temp^(0+128)+12),w
  4441  14BE  01DF               	clrf	(_Temp^(0+128)+8)
  4442  14BF  07DF               	addwf	(_Temp^(0+128)+8),f
  4443                           
  4444                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4445  14C0  0008               	return
  4446  14C1                     l9928:	
  4447  14C1  0864               	movf	((_Temp+1)^(0+128)+12),w
  4448  14C2  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4449  14C3  1D03               	skipz
  4450  14C4  2CC7               	goto	u11245
  4451  14C5  0863               	movf	(_Temp^(0+128)+12),w
  4452  14C6  0261               	subwf	(_Temp^(0+128)+10),w
  4453  14C7                     u11245:	
  4454  14C7  1803               	skipnc
  4455  14C8  0008               	return
  4456                           
  4457                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4458  14C9  0864               	movf	((_Temp+1)^(0+128)+12),w
  4459  14CA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4460  14CB  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4461  14CC  0863               	movf	(_Temp^(0+128)+12),w
  4462  14CD  01E1               	clrf	(_Temp^(0+128)+10)
  4463  14CE  07E1               	addwf	(_Temp^(0+128)+10),f
  4464  14CF  0008               	return
  4465  14D0                     __end_of_getTemp_AD:	
  4466                           
  4467                           	psect	text4
  4468  0D04                     __ptext4:	
  4469 ;; *************** function _getLoad_AD *****************
  4470 ;; Defined at:
  4471 ;;		line 15 in file "../src/OverLoad_B1.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  channel         1    wreg     unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  channel         1    6[BANK0 ] unsigned char 
  4476 ;;  i               1    9[BANK0 ] unsigned char 
  4477 ;;  j               1    8[BANK0 ] unsigned char 
  4478 ;;  k               1    7[BANK0 ] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    7
  4495 ;; This function calls:
  4496 ;;		_getAD
  4497 ;; This function is called by:
  4498 ;;		_main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _getLoad_AD
  4504  0D04                     _getLoad_AD:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4508                           ;getLoad_AD@channel stored from wreg
  4509  0D04  0020               	movlb	0	; select bank0
  4510  0D05  00A6               	movwf	getLoad_AD@channel
  4511                           
  4512                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4513  0D06  01A9               	clrf	getLoad_AD@i
  4514  0D07  01A8               	clrf	getLoad_AD@j
  4515  0D08  01A7               	clrf	getLoad_AD@k
  4516                           
  4517                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4518  0D09  0022               	movlb	2	; select bank2
  4519  0D0A  1E25               	btfss	_Load^(0+256),4
  4520  0D0B  0008               	return
  4521                           
  4522                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4523  0D0C  30F3               	movlw	243
  4524  0D0D  0020               	movlb	0	; select bank0
  4525  0D0E  00A4               	movwf	??_getLoad_AD
  4526  0D0F  0824               	movf	??_getLoad_AD,w
  4527  0D10  00A0               	movwf	getAD@adcon1
  4528  0D11  0826               	movf	getLoad_AD@channel,w
  4529  0D12  319F  27C0  318D   	fcall	_getAD
  4530  0D15  0020               	movlb	0	; select bank0
  4531  0D16  0821               	movf	?_getAD+1,w
  4532  0D17  0022               	movlb	2	; select bank2
  4533  0D18  01C7               	clrf	((_Load+1)^(0+256)+33)
  4534  0D19  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4535  0D1A  0020               	movlb	0	; select bank0
  4536  0D1B  0820               	movf	?_getAD,w
  4537  0D1C  0022               	movlb	2	; select bank2
  4538  0D1D  01C6               	clrf	(_Load^(0+256)+33)
  4539  0D1E  07C6               	addwf	(_Load^(0+256)+33),f
  4540                           
  4541                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4542  0D1F  0020               	movlb	0	; select bank0
  4543  0D20  01A9               	clrf	getLoad_AD@i
  4544  0D21  3004               	movlw	4
  4545  0D22  0229               	subwf	getLoad_AD@i,w
  4546  0D23  1803               	btfsc	3,0
  4547  0D24  2D52               	goto	l9898
  4548  0D25                     l9886:	
  4549                           
  4550                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4551  0D25  3529               	lslf	getLoad_AD@i,w
  4552  0D26  3E30               	addlw	(_Load+11)& (0+255)
  4553  0D27  0086               	movwf	6
  4554  0D28  3001               	movlw	1	; select bank2/3
  4555  0D29  0087               	movwf	7
  4556  0D2A  3F40               	moviw [0]fsr1
  4557  0D2B  00A4               	movwf	??_getLoad_AD
  4558  0D2C  3F41               	moviw [1]fsr1
  4559  0D2D  00A5               	movwf	??_getLoad_AD+1
  4560  0D2E  0022               	movlb	2	; select bank2
  4561  0D2F  0847               	movf	((_Load+1)^(0+256)+33),w
  4562  0D30  0020               	movlb	0	; select bank0
  4563  0D31  0225               	subwf	??_getLoad_AD+1,w
  4564  0D32  1D03               	skipz
  4565  0D33  2D38               	goto	u11135
  4566  0D34  0022               	movlb	2	; select bank2
  4567  0D35  0846               	movf	(_Load^(0+256)+33),w
  4568  0D36  0020               	movlb	0	; select bank0
  4569  0D37  0224               	subwf	??_getLoad_AD,w
  4570  0D38                     u11135:	
  4571  0D38  1803               	skipnc
  4572  0D39  2D4A               	goto	l9894
  4573  0D3A  08A8               	movf	getLoad_AD@j,f
  4574  0D3B  1D03               	skipz
  4575  0D3C  2D4A               	goto	l9894
  4576                           
  4577                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4578  0D3D  3529               	lslf	getLoad_AD@i,w
  4579  0D3E  3E30               	addlw	(_Load+11)& (0+255)
  4580  0D3F  0086               	movwf	6
  4581  0D40  3001               	movlw	1	; select bank2/3
  4582  0D41  0087               	movwf	7
  4583  0D42  0022               	movlb	2	; select bank2
  4584  0D43  0846               	movf	(_Load^(0+256)+33),w
  4585  0D44  3FC0               	movwi [0]fsr1
  4586  0D45  0847               	movf	((_Load+1)^(0+256)+33),w
  4587  0D46  3FC1               	movwi [1]fsr1
  4588                           
  4589                           ;OverLoad_B1.c: 24: j = 1;
  4590  0D47  0020               	movlb	0	; select bank0
  4591  0D48  01A8               	clrf	getLoad_AD@j
  4592  0D49  0AA8               	incf	getLoad_AD@j,f
  4593  0D4A                     l9894:	
  4594  0D4A  3001               	movlw	1
  4595  0D4B  00A4               	movwf	??_getLoad_AD
  4596  0D4C  0824               	movf	??_getLoad_AD,w
  4597  0D4D  07A9               	addwf	getLoad_AD@i,f
  4598  0D4E  3004               	movlw	4
  4599  0D4F  0229               	subwf	getLoad_AD@i,w
  4600  0D50  1C03               	skipc
  4601  0D51  2D25               	goto	l9886
  4602  0D52                     l9898:	
  4603                           
  4604                           ;OverLoad_B1.c: 25: }
  4605                           ;OverLoad_B1.c: 26: }
  4606                           ;OverLoad_B1.c: 27: if (j == 0) {
  4607  0D52  08A8               	movf	getLoad_AD@j,f
  4608  0D53  1D03               	skipz
  4609  0D54  0008               	return
  4610                           
  4611                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4612  0D55  01A9               	clrf	getLoad_AD@i
  4613  0D56                     L1:	
  4614  0D56  3004               	movlw	4
  4615  0D57  0229               	subwf	getLoad_AD@i,w
  4616  0D58  1803               	btfsc	3,0
  4617  0D59  0008               	return
  4618                           
  4619                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4620  0D5A  3529               	lslf	getLoad_AD@i,w
  4621  0D5B  3E3A               	addlw	(_Load+21)& (0+255)
  4622  0D5C  0086               	movwf	6
  4623  0D5D  3001               	movlw	1	; select bank2/3
  4624  0D5E  0087               	movwf	7
  4625  0D5F  3F40               	moviw [0]fsr1
  4626  0D60  00A4               	movwf	??_getLoad_AD
  4627  0D61  3F41               	moviw [1]fsr1
  4628  0D62  00A5               	movwf	??_getLoad_AD+1
  4629  0D63  0825               	movf	??_getLoad_AD+1,w
  4630  0D64  0022               	movlb	2	; select bank2
  4631  0D65  0247               	subwf	((_Load+1)^(0+256)+33),w
  4632  0D66  1D03               	skipz
  4633  0D67  2D6C               	goto	u11185
  4634  0D68  0020               	movlb	0	; select bank0
  4635  0D69  0824               	movf	??_getLoad_AD,w
  4636  0D6A  0022               	movlb	2	; select bank2
  4637  0D6B  0246               	subwf	(_Load^(0+256)+33),w
  4638  0D6C                     u11185:	
  4639  0D6C  1803               	skipnc
  4640  0D6D  2D7F               	goto	l9914
  4641  0D6E  0020               	movlb	0	; select bank0
  4642  0D6F  08A7               	movf	getLoad_AD@k,f
  4643  0D70  1D03               	skipz
  4644  0D71  2D7F               	goto	l9914
  4645                           
  4646                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4647  0D72  3529               	lslf	getLoad_AD@i,w
  4648  0D73  3E3A               	addlw	(_Load+21)& (0+255)
  4649  0D74  0086               	movwf	6
  4650  0D75  3001               	movlw	1	; select bank2/3
  4651  0D76  0087               	movwf	7
  4652  0D77  0022               	movlb	2	; select bank2
  4653  0D78  0846               	movf	(_Load^(0+256)+33),w
  4654  0D79  3FC0               	movwi [0]fsr1
  4655  0D7A  0847               	movf	((_Load+1)^(0+256)+33),w
  4656  0D7B  3FC1               	movwi [1]fsr1
  4657                           
  4658                           ;OverLoad_B1.c: 31: k = 1;
  4659  0D7C  0020               	movlb	0	; select bank0
  4660  0D7D  01A7               	clrf	getLoad_AD@k
  4661  0D7E  0AA7               	incf	getLoad_AD@k,f
  4662  0D7F                     l9914:	
  4663  0D7F  3001               	movlw	1
  4664  0D80  0020               	movlb	0	; select bank0
  4665  0D81  00A4               	movwf	??_getLoad_AD
  4666  0D82  0824               	movf	??_getLoad_AD,w
  4667  0D83  07A9               	addwf	getLoad_AD@i,f
  4668  0D84  2D56               	goto	L1
  4669  0D85                     __end_of_getLoad_AD:	
  4670                           
  4671                           	psect	text5
  4672  1FC0                     __ptext5:	
  4673 ;; *************** function _getAD *****************
  4674 ;; Defined at:
  4675 ;;		line 453 in file "../src/MCU_B1.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  adcon0          1    wreg     unsigned char 
  4678 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  2    0[BANK0 ] int 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4690 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;Total ram usage:        4 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    6
  4697 ;; This function calls:
  4698 ;;		_Timeout_Counter
  4699 ;;		_set_TimeoutCleared
  4700 ;; This function is called by:
  4701 ;;		_getLoad_AD
  4702 ;;		_getTemp_AD
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _getAD
  4708  1FC0                     _getAD:	
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4712                           ;getAD@adcon0 stored from wreg
  4713  1FC0  0020               	movlb	0	; select bank0
  4714  1FC1  00A3               	movwf	getAD@adcon0
  4715                           
  4716                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4717  1FC2  0823               	movf	getAD@adcon0,w
  4718  1FC3  0021               	movlb	1	; select bank1
  4719  1FC4  009D               	movwf	29	;volatile
  4720                           
  4721                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4722  1FC5  0020               	movlb	0	; select bank0
  4723  1FC6  0820               	movf	getAD@adcon1,w
  4724  1FC7  0021               	movlb	1	; select bank1
  4725  1FC8  009E               	movwf	30	;volatile
  4726                           
  4727                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4728  1FC9  149D               	bsf	29,1	;volatile
  4729                           
  4730                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4731  1FCA  2FCE               	goto	l9386
  4732  1FCB                     l9384:	
  4733                           
  4734                           ;MCU_B1.c: 458: Timeout_Counter();
  4735  1FCB  319E  2692  319F   	fcall	_Timeout_Counter
  4736  1FCE                     l9386:	
  4737  1FCE  0021               	movlb	1	; select bank1
  4738  1FCF  1C9D               	btfss	29,1	;volatile
  4739  1FD0  2FD3               	goto	l9390
  4740  1FD1  1D2B               	btfss	(_myMain^(0+128)+11),2
  4741  1FD2  2FCB               	goto	l9384
  4742  1FD3                     l9390:	
  4743                           
  4744                           ;MCU_B1.c: 459: };
  4745                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4746  1FD3  319C  2448         	fcall	_set_TimeoutCleared
  4747                           
  4748                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4749  1FD5  0021               	movlb	1	; select bank1
  4750  1FD6  081C               	movf	28,w	;volatile
  4751  1FD7  0020               	movlb	0	; select bank0
  4752  1FD8  01A1               	clrf	?_getAD+1
  4753  1FD9  07A1               	addwf	?_getAD+1,f
  4754  1FDA  0021               	movlb	1	; select bank1
  4755  1FDB  081B               	movf	27,w	;volatile
  4756  1FDC  0020               	movlb	0	; select bank0
  4757  1FDD  01A0               	clrf	?_getAD
  4758  1FDE  07A0               	addwf	?_getAD,f
  4759  1FDF  0008               	return
  4760  1FE0                     __end_of_getAD:	
  4761                           
  4762                           	psect	text6
  4763  1E33                     __ptext6:	
  4764 ;; *************** function _WDT_Main *****************
  4765 ;; Defined at:
  4766 ;;		line 1097 in file "../src/MCU_B1.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;		None               void
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    6
  4787 ;; This function calls:
  4788 ;;		_WDT_Clearing
  4789 ;; This function is called by:
  4790 ;;		_main
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function _WDT_Main
  4796  1E33                     _WDT_Main:	
  4797                           
  4798                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4802  1E33  0021               	movlb	1	; select bank1
  4803  1E34  1C49               	btfss	_WDT^(0+128),0
  4804  1E35  0008               	return
  4805                           
  4806                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4807  1E36  3001               	movlw	1
  4808  1E37  02CA               	subwf	(_WDT^(0+128)+1),f
  4809  1E38  084A               	movf	(_WDT^(0+128)+1),w
  4810  1E39  3AFF               	xorlw	255
  4811  1E3A  1903               	skipnz
  4812  1E3B  0008               	return
  4813                           
  4814                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4815  1E3C  3064               	movlw	100
  4816  1E3D  0020               	movlb	0	; select bank0
  4817  1E3E  00A0               	movwf	??_WDT_Main
  4818  1E3F  0820               	movf	??_WDT_Main,w
  4819  1E40  0021               	movlb	1	; select bank1
  4820  1E41  00CA               	movwf	(_WDT^(0+128)+1)
  4821                           
  4822                           ;MCU_B1.c: 1101: WDT_Clearing();
  4823  1E42  3180  2002         	fcall	_WDT_Clearing
  4824  1E44  0008               	return
  4825  1E45                     __end_of_WDT_Main:	
  4826                           
  4827                           	psect	text7
  4828  0002                     __ptext7:	
  4829 ;; *************** function _WDT_Clearing *****************
  4830 ;; Defined at:
  4831 ;;		line 1107 in file "../src/MCU_B1.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;		None               void
  4838 ;; Registers used:
  4839 ;;		None
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    5
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_WDT_Main
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _WDT_Clearing
  4861  0002                     _WDT_Clearing:	
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _WDT_Clearing: []
  4865  0002  0064               	clrwdt	;# 
  4866  0003  0008               	return
  4867  0004                     __end_of_WDT_Clearing:	
  4868                           
  4869                           	psect	text8
  4870  1C21                     __ptext8:	
  4871 ;; *************** function _Temp_Main *****************
  4872 ;; Defined at:
  4873 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;		None               void
  4880 ;; Registers used:
  4881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    8
  4894 ;; This function calls:
  4895 ;;		_setTemp_Main
  4896 ;; This function is called by:
  4897 ;;		_main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _Temp_Main
  4903  1C21                     _Temp_Main:	
  4904                           
  4905                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4909  1C21  318F  2750         	fcall	_setTemp_Main
  4910  1C23  0008               	return
  4911  1C24                     __end_of_Temp_Main:	
  4912                           
  4913                           	psect	text9
  4914  0F50                     __ptext9:	
  4915 ;; *************** function _setTemp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  error           1   72[BANK0 ] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        3 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    7
  4938 ;; This function calls:
  4939 ;;		_getMain_All_Error_Status
  4940 ;;		_setBuz
  4941 ;;		_setProductData
  4942 ;; This function is called by:
  4943 ;;		_Temp_Main
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _setTemp_Main
  4949  0F50                     _setTemp_Main:	
  4950                           
  4951                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4955  0F50  3000               	movlw	0
  4956  0F51  3192  226B  318F   	fcall	_getMain_All_Error_Status
  4957  0F54  0020               	movlb	0	; select bank0
  4958  0F55  00E6               	movwf	??_setTemp_Main
  4959  0F56  0866               	movf	??_setTemp_Main,w
  4960  0F57  00E8               	movwf	setTemp_Main@error
  4961                           
  4962                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4963  0F58  0021               	movlb	1	; select bank1
  4964  0F59  1C57               	btfss	_Temp^(0+128),0
  4965  0F5A  2FFC               	goto	l1720
  4966                           
  4967                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4968  0F5B  1957               	btfsc	_Temp^(0+128),2
  4969  0F5C  2F6C               	goto	l9452
  4970                           
  4971                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4972  0F5D  3001               	movlw	1
  4973  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4974  0F5F  3000               	movlw	0
  4975  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4976                           
  4977                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4978  0F61  3001               	movlw	1
  4979  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4980  0F63  30F4               	movlw	244
  4981  0F64  1903               	skipnz
  4982  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4983  0F66  1C03               	skipc
  4984  0F67  0008               	return
  4985                           
  4986                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4987  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4988  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4989                           
  4990                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4991  0F6A  1557               	bsf	_Temp^(0+128),2
  4992                           
  4993                           ;OverTemperature_B1.c: 70: }
  4994                           ;OverTemperature_B1.c: 71: } else {
  4995  0F6B  0008               	return
  4996  0F6C                     l9452:	
  4997                           
  4998                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4999  0F6C  3001               	movlw	1
  5000  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5001  0F6E  3000               	movlw	0
  5002  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5003                           
  5004                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5005  0F70  3000               	movlw	0
  5006  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5007  0F72  3005               	movlw	5
  5008  0F73  1903               	skipnz
  5009  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5010  0F75  1C03               	skipc
  5011  0F76  0008               	return
  5012                           
  5013                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5014  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5015  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5016                           
  5017                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5018  0F79  3008               	movlw	8
  5019  0F7A  3ED7               	addlw	_Temp& (0+255)
  5020  0F7B  0086               	movwf	6
  5021  0F7C  0187               	clrf	7
  5022  0F7D  0016               	moviw fsr1++
  5023  0F7E  0401               	iorwf	1,w
  5024  0F7F  1903               	skipnz
  5025  0F80  2FF6               	goto	l1725
  5026  0F81  300A               	movlw	10
  5027  0F82  3ED7               	addlw	_Temp& (0+255)
  5028  0F83  0086               	movwf	6
  5029  0F84  0187               	clrf	7
  5030  0F85  0016               	moviw fsr1++
  5031  0F86  0401               	iorwf	1,w
  5032  0F87  1903               	skipnz
  5033  0F88  2FF6               	goto	l1725
  5034                           
  5035                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5036  0F89  1157               	bcf	_Temp^(0+128),2
  5037                           
  5038                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5039  0F8A  300A               	movlw	10
  5040  0F8B  3ED7               	addlw	_Temp& (0+255)
  5041  0F8C  0086               	movwf	6
  5042  0F8D  0187               	clrf	7
  5043  0F8E  3008               	movlw	8
  5044  0F8F  3ED7               	addlw	_Temp& (0+255)
  5045  0F90  0084               	movwf	4
  5046  0F91  0185               	clrf	5
  5047  0F92  3F40               	moviw [0]fsr1
  5048  0F93  0700               	addwf	0,w
  5049  0F94  0020               	movlb	0	; select bank0
  5050  0F95  00E6               	movwf	??_setTemp_Main
  5051  0F96  3101               	addfsr 0,1
  5052  0F97  3F41               	moviw [1]fsr1
  5053  0F98  3D00               	addwfc	0,w
  5054  0F99  00E7               	movwf	??_setTemp_Main+1
  5055  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5056  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5057  0F9C  0866               	movf	??_setTemp_Main,w
  5058  0F9D  0021               	movlb	1	; select bank1
  5059  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5060  0F9F  0020               	movlb	0	; select bank0
  5061  0FA0  0867               	movf	??_setTemp_Main+1,w
  5062  0FA1  0021               	movlb	1	; select bank1
  5063  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5064                           
  5065                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5066  0FA3  3090               	movlw	144
  5067  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5068  0FA5  3001               	movlw	1
  5069  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5070                           
  5071                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5072  0FA7  3059               	movlw	89
  5073  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5074  0FA9  3001               	movlw	1
  5075  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5076                           
  5077                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5078  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5079  0FAC  2FCD               	goto	l9484
  5080                           
  5081                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5082  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5083  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5084  0FAF  1D03               	skipz
  5085  0FB0  2FB3               	goto	u10365
  5086  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5087  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5088  0FB3                     u10365:	
  5089  0FB3  1C03               	skipc
  5090  0FB4  2FCB               	goto	l9482
  5091                           
  5092                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5093  0FB5  3001               	movlw	1
  5094  0FB6  0020               	movlb	0	; select bank0
  5095  0FB7  00E6               	movwf	??_setTemp_Main
  5096  0FB8  0866               	movf	??_setTemp_Main,w
  5097  0FB9  0021               	movlb	1	; select bank1
  5098  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5099                           
  5100                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5101  0FBB  3003               	movlw	3
  5102  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5103  0FBD  1C03               	skipc
  5104  0FBE  2FE3               	goto	l9496
  5105                           
  5106                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5107  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5108                           
  5109                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5110  0FC0  10D7               	bcf	_Temp^(0+128),1
  5111                           
  5112                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5113  0FC1  3064               	movlw	100
  5114  0FC2  0020               	movlb	0	; select bank0
  5115  0FC3  00A9               	movwf	setBuz@time
  5116  0FC4  3000               	movlw	0
  5117  0FC5  00AA               	movwf	setBuz@time+1
  5118  0FC6  3002               	movlw	2
  5119  0FC7  3197  27A7  318F   	fcall	_setBuz
  5120                           
  5121                           ;OverTemperature_B1.c: 103: }
  5122                           ;OverTemperature_B1.c: 104: } else {
  5123  0FCA  2FE3               	goto	l9496
  5124  0FCB                     l9482:	
  5125                           
  5126                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5127  0FCB  0021               	movlb	1	; select bank1
  5128  0FCC  2FE2               	goto	l9494
  5129  0FCD                     l9484:	
  5130                           ;OverTemperature_B1.c: 106: }
  5131                           ;OverTemperature_B1.c: 107: } else {
  5132                           
  5133                           
  5134                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5135  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5136  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5137  0FCF  1D03               	skipz
  5138  0FD0  2FD3               	goto	u10385
  5139  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5140  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5141  0FD3                     u10385:	
  5142  0FD3  1C03               	skipc
  5143  0FD4  2FE2               	goto	l9494
  5144                           
  5145                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5146  0FD5  3001               	movlw	1
  5147  0FD6  0020               	movlb	0	; select bank0
  5148  0FD7  00E6               	movwf	??_setTemp_Main
  5149  0FD8  0866               	movf	??_setTemp_Main,w
  5150  0FD9  0021               	movlb	1	; select bank1
  5151  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5152                           
  5153                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5154  0FDB  3003               	movlw	3
  5155  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5156  0FDD  1C03               	skipc
  5157  0FDE  2FE3               	goto	l9496
  5158                           
  5159                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5160  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5161                           
  5162                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5163  0FE0  14D7               	bsf	_Temp^(0+128),1
  5164                           
  5165                           ;OverTemperature_B1.c: 113: }
  5166                           ;OverTemperature_B1.c: 114: } else {
  5167  0FE1  2FE3               	goto	l9496
  5168  0FE2                     l9494:	
  5169                           
  5170                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5171  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5172  0FE3                     l9496:	
  5173                           
  5174                           ;OverTemperature_B1.c: 116: }
  5175                           ;OverTemperature_B1.c: 117: }
  5176                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5177  0FE3  0021               	movlb	1	; select bank1
  5178  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5179  0FE5  0020               	movlb	0	; select bank0
  5180  0FE6  00E6               	movwf	??_setTemp_Main
  5181  0FE7  0866               	movf	??_setTemp_Main,w
  5182  0FE8  00E2               	movwf	setProductData@value
  5183  0FE9  3018               	movlw	24
  5184  0FEA  319D  255F  318F   	fcall	_setProductData
  5185                           
  5186                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5187  0FED  0021               	movlb	1	; select bank1
  5188  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5189  0FEF  0020               	movlb	0	; select bank0
  5190  0FF0  00E6               	movwf	??_setTemp_Main
  5191  0FF1  0866               	movf	??_setTemp_Main,w
  5192  0FF2  00E2               	movwf	setProductData@value
  5193  0FF3  3019               	movlw	25
  5194  0FF4  319D  255F         	fcall	_setProductData
  5195  0FF6                     l1725:	
  5196                           
  5197                           ;OverTemperature_B1.c: 135: }
  5198                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5199  0FF6  0021               	movlb	1	; select bank1
  5200  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5201  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5202                           
  5203                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5204  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5205  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5206                           
  5207                           ;OverTemperature_B1.c: 138: }
  5208                           ;OverTemperature_B1.c: 139: }
  5209                           ;OverTemperature_B1.c: 141: } else {
  5210  0FFB  0008               	return
  5211  0FFC                     l1720:	
  5212                           
  5213                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5214  0FFC  1C20               	btfss	_myMain^(0+128),0
  5215  0FFD  0008               	return
  5216                           
  5217                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5218  0FFE  1457               	bsf	_Temp^(0+128),0
  5219  0FFF  0008               	return
  5220  1000                     __end_of_setTemp_Main:	
  5221                           
  5222                           	psect	text10
  5223  1C1E                     __ptext10:	
  5224 ;; *************** function _Temp_Initialization *****************
  5225 ;; Defined at:
  5226 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;		None               void
  5233 ;; Registers used:
  5234 ;;		status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;Total ram usage:        0 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    6
  5247 ;; This function calls:
  5248 ;;		_setTemp_Initialization
  5249 ;; This function is called by:
  5250 ;;		_main
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           
  5255                           ;psect for function _Temp_Initialization
  5256  1C1E                     _Temp_Initialization:	
  5257                           
  5258                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5259                           
  5260                           ;incstack = 0
  5261                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5262  1C1E  319C  2411         	fcall	_setTemp_Initialization
  5263  1C20  0008               	return
  5264  1C21                     __end_of_Temp_Initialization:	
  5265                           
  5266                           	psect	text11
  5267  1C11                     __ptext11:	
  5268 ;; *************** function _setTemp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		None
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    5
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_Temp_Initialization
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _setTemp_Initialization
  5300  1C11                     _setTemp_Initialization:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _setTemp_Initialization: []
  5304  1C11  0008               	return
  5305  1C12                     __end_of_setTemp_Initialization:	
  5306                           
  5307                           	psect	text12
  5308  1C66                     __ptext12:	
  5309 ;; *************** function _Switch_Main *****************
  5310 ;; Defined at:
  5311 ;;		line 72 in file "../src/Switch_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:   10
  5332 ;; This function calls:
  5333 ;;		_TouchPower
  5334 ;;		_setSw_Main
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _Switch_Main
  5342  1C66                     _Switch_Main:	
  5343                           
  5344                           ;Switch_B1.c: 75: setSw_Main(1);
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5348  1C66  3001               	movlw	1
  5349  1C67  3181  21ED  319C   	fcall	_setSw_Main
  5350                           
  5351                           ;Switch_B1.c: 87: TouchPower();
  5352  1C6A  319E  26BC         	fcall	_TouchPower
  5353  1C6C  0008               	return
  5354  1C6D                     __end_of_Switch_Main:	
  5355                           
  5356                           	psect	text13
  5357  01ED                     __ptext13:	
  5358 ;; *************** function _setSw_Main *****************
  5359 ;; Defined at:
  5360 ;;		line 121 in file "../src/Switch_B1.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  sw              1    wreg     unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  sw              1   77[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;		None               void
  5367 ;; Registers used:
  5368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;Total ram usage:        3 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    9
  5381 ;; This function calls:
  5382 ;;		_SwPointSelect
  5383 ;;		_getMain_All_Error_Status
  5384 ;;		_getSw_KeyStatus
  5385 ;;		_setBuz
  5386 ;;		_setDimmerLights_AdjOn
  5387 ;;		_setDimmerLights_SwOff
  5388 ;;		_setDimmerLights_SwOn
  5389 ;;		_setRF_Learn
  5390 ;; This function is called by:
  5391 ;;		_Switch_Main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _setSw_Main
  5397  01ED                     _setSw_Main:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           ;setSw_Main@sw stored from wreg
  5402  01ED  0020               	movlb	0	; select bank0
  5403  01EE  00ED               	movwf	setSw_Main@sw
  5404                           
  5405                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5406  01EF  086D               	movf	setSw_Main@sw,w
  5407  01F0  319D  2500  3181   	fcall	_SwPointSelect
  5408                           
  5409                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5410  01F3  0877               	movf	_Sw,w
  5411  01F4  0086               	movwf	6
  5412  01F5  3001               	movlw	1	; select bank2/3
  5413  01F6  0087               	movwf	7
  5414  01F7  1C01               	btfss	1,0
  5415  01F8  2B57               	goto	l2415
  5416                           
  5417                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5418  01F9  3000               	movlw	0
  5419  01FA  3192  226B  3181   	fcall	_getMain_All_Error_Status
  5420  01FD  3800               	iorlw	0
  5421  01FE  1D03               	skipz
  5422  01FF  2A1B               	goto	l9596
  5423                           
  5424                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5425  0200  0A77               	incf	_Sw,w
  5426  0201  0086               	movwf	6
  5427  0202  3001               	movlw	1	; select bank2/3
  5428  0203  0087               	movwf	7
  5429  0204  1081               	bcf	1,1
  5430                           
  5431                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5432  0205  0020               	movlb	0	; select bank0
  5433  0206  086D               	movf	setSw_Main@sw,w
  5434  0207  319D  25EC  3181   	fcall	_getSw_KeyStatus
  5435  020A  3A01               	xorlw	1
  5436  020B  3000               	movlw	0
  5437  020C  1903               	skipnz
  5438  020D  3001               	movlw	1
  5439  020E  0020               	movlb	0	; select bank0
  5440  020F  00EB               	movwf	??_setSw_Main
  5441  0210  0877               	movf	_Sw,w
  5442  0211  0086               	movwf	6
  5443  0212  3001               	movlw	1	; select bank2/3
  5444  0213  0087               	movwf	7
  5445  0214  0DEB               	rlf	??_setSw_Main,f
  5446  0215  0801               	movf	1,w
  5447  0216  066B               	xorwf	??_setSw_Main,w
  5448  0217  39FD               	andlw	-3
  5449  0218  066B               	xorwf	??_setSw_Main,w
  5450  0219  0081               	movwf	1
  5451                           
  5452                           ;Switch_B1.c: 128: } else {
  5453  021A  2A30               	goto	l2417
  5454  021B                     l9596:	
  5455                           
  5456                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5457  021B  0A77               	incf	_Sw,w
  5458  021C  0086               	movwf	6
  5459  021D  3001               	movlw	1	; select bank2/3
  5460  021E  0087               	movwf	7
  5461  021F  1881               	btfsc	1,1
  5462  0220  2A30               	goto	l2417
  5463                           
  5464                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5465  0221  0A77               	incf	_Sw,w
  5466  0222  0086               	movwf	6
  5467  0223  3001               	movlw	1	; select bank2/3
  5468  0224  0087               	movwf	7
  5469  0225  1481               	bsf	1,1
  5470                           
  5471                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5472  0226  0877               	movf	_Sw,w
  5473  0227  0086               	movwf	6
  5474  0228  3001               	movlw	1	; select bank2/3
  5475  0229  0087               	movwf	7
  5476  022A  1081               	bcf	1,1
  5477                           
  5478                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5479  022B  0877               	movf	_Sw,w
  5480  022C  0086               	movwf	6
  5481  022D  3001               	movlw	1	; select bank2/3
  5482  022E  0087               	movwf	7
  5483  022F  1501               	bsf	1,2
  5484  0230                     l2417:	
  5485                           
  5486                           ;Switch_B1.c: 133: }
  5487                           ;Switch_B1.c: 134: }
  5488                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5489  0230  0877               	movf	_Sw,w
  5490  0231  0086               	movwf	6
  5491  0232  3001               	movlw	1	; select bank2/3
  5492  0233  0087               	movwf	7
  5493  0234  1C81               	btfss	1,1
  5494  0235  2B00               	goto	l9646
  5495                           
  5496                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5497  0236  0877               	movf	_Sw,w
  5498  0237  0086               	movwf	6
  5499  0238  3001               	movlw	1	; select bank2/3
  5500  0239  0087               	movwf	7
  5501  023A  1901               	btfsc	1,2
  5502  023B  2A5E               	goto	l9612
  5503                           
  5504                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5505  023C  3001               	movlw	1
  5506  023D  0020               	movlb	0	; select bank0
  5507  023E  00EB               	movwf	??_setSw_Main
  5508  023F  0877               	movf	_Sw,w
  5509  0240  3E02               	addlw	2
  5510  0241  0086               	movwf	6
  5511  0242  3001               	movlw	1	; select bank2/3
  5512  0243  0087               	movwf	7
  5513  0244  086B               	movf	??_setSw_Main,w
  5514  0245  0781               	addwf	1,f
  5515                           
  5516                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5517  0246  0877               	movf	_Sw,w
  5518  0247  3E02               	addlw	2
  5519  0248  0086               	movwf	6
  5520  0249  3001               	movlw	1	; select bank2/3
  5521  024A  0087               	movwf	7
  5522  024B  3005               	movlw	5
  5523  024C  0201               	subwf	1,w
  5524  024D  1C03               	skipc
  5525  024E  0008               	return
  5526                           
  5527                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5528  024F  0877               	movf	_Sw,w
  5529  0250  3E02               	addlw	2
  5530  0251  0086               	movwf	6
  5531  0252  3001               	movlw	1	; select bank2/3
  5532  0253  0087               	movwf	7
  5533  0254  0181               	clrf	1
  5534                           
  5535                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5536  0255  0877               	movf	_Sw,w
  5537  0256  0086               	movwf	6
  5538  0257  3001               	movlw	1	; select bank2/3
  5539  0258  0087               	movwf	7
  5540  0259  1501               	bsf	1,2
  5541                           
  5542                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5543  025A  086D               	movf	setSw_Main@sw,w
  5544  025B  3188  2000         	fcall	_setDimmerLights_SwOn
  5545                           
  5546                           ;Switch_B1.c: 147: }
  5547                           ;Switch_B1.c: 148: } else {
  5548  025D  0008               	return
  5549  025E                     l9612:	
  5550                           
  5551                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5552  025E  0877               	movf	_Sw,w
  5553  025F  0086               	movwf	6
  5554  0260  3001               	movlw	1	; select bank2/3
  5555  0261  0087               	movwf	7
  5556  0262  1981               	btfsc	1,3
  5557  0263  2A90               	goto	l9622
  5558                           
  5559                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5560  0264  0877               	movf	_Sw,w
  5561  0265  3E03               	addlw	3
  5562  0266  0086               	movwf	6
  5563  0267  3001               	movlw	1	; select bank2/3
  5564  0268  0087               	movwf	7
  5565  0269  3001               	movlw	1
  5566  026A  0781               	addwf	1,f
  5567  026B  3141               	addfsr 1,1
  5568  026C  1803               	skipnc
  5569  026D  0A81               	incf	1,f
  5570                           
  5571                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5572  026E  0877               	movf	_Sw,w
  5573  026F  3E03               	addlw	3
  5574  0270  0086               	movwf	6
  5575  0271  3001               	movlw	1	; select bank2/3
  5576  0272  0087               	movwf	7
  5577  0273  3F40               	moviw [0]fsr1
  5578  0274  0020               	movlb	0	; select bank0
  5579  0275  00EB               	movwf	??_setSw_Main
  5580  0276  3F41               	moviw [1]fsr1
  5581  0277  00EC               	movwf	??_setSw_Main+1
  5582  0278  3000               	movlw	0
  5583  0279  026C               	subwf	??_setSw_Main+1,w
  5584  027A  3096               	movlw	150
  5585  027B  1903               	skipnz
  5586  027C  026B               	subwf	??_setSw_Main,w
  5587  027D  1C03               	skipc
  5588  027E  0008               	return
  5589                           
  5590                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5591  027F  0877               	movf	_Sw,w
  5592  0280  3E03               	addlw	3
  5593  0281  0086               	movwf	6
  5594  0282  3001               	movlw	1	; select bank2/3
  5595  0283  0087               	movwf	7
  5596  0284  3000               	movlw	0
  5597  0285  3FC0               	movwi [0]fsr1
  5598  0286  3FC1               	movwi [1]fsr1
  5599                           
  5600                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5601  0287  0877               	movf	_Sw,w
  5602  0288  0086               	movwf	6
  5603  0289  3001               	movlw	1	; select bank2/3
  5604  028A  0087               	movwf	7
  5605  028B  1581               	bsf	1,3
  5606                           
  5607                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5608  028C  086D               	movf	setSw_Main@sw,w
  5609  028D  3193  2372         	fcall	_setDimmerLights_AdjOn
  5610                           
  5611                           ;Switch_B1.c: 159: }
  5612                           ;Switch_B1.c: 160: } else {
  5613  028F  0008               	return
  5614  0290                     l9622:	
  5615                           
  5616                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5617  0290  0877               	movf	_Sw,w
  5618  0291  0086               	movwf	6
  5619  0292  3001               	movlw	1	; select bank2/3
  5620  0293  0087               	movwf	7
  5621  0294  1A01               	btfsc	1,4
  5622  0295  2ACE               	goto	l9636
  5623                           
  5624                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5625  0296  0877               	movf	_Sw,w
  5626  0297  3E05               	addlw	5
  5627  0298  0086               	movwf	6
  5628  0299  3001               	movlw	1	; select bank2/3
  5629  029A  0087               	movwf	7
  5630  029B  3001               	movlw	1
  5631  029C  0781               	addwf	1,f
  5632  029D  3141               	addfsr 1,1
  5633  029E  1803               	skipnc
  5634  029F  0A81               	incf	1,f
  5635                           
  5636                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5637  02A0  0877               	movf	_Sw,w
  5638  02A1  3E05               	addlw	5
  5639  02A2  0086               	movwf	6
  5640  02A3  3001               	movlw	1	; select bank2/3
  5641  02A4  0087               	movwf	7
  5642  02A5  3F40               	moviw [0]fsr1
  5643  02A6  0020               	movlb	0	; select bank0
  5644  02A7  00EB               	movwf	??_setSw_Main
  5645  02A8  3F41               	moviw [1]fsr1
  5646  02A9  00EC               	movwf	??_setSw_Main+1
  5647  02AA  3000               	movlw	0
  5648  02AB  026C               	subwf	??_setSw_Main+1,w
  5649  02AC  3096               	movlw	150
  5650  02AD  1903               	skipnz
  5651  02AE  026B               	subwf	??_setSw_Main,w
  5652  02AF  1C03               	skipc
  5653  02B0  0008               	return
  5654                           
  5655                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5656  02B1  0877               	movf	_Sw,w
  5657  02B2  3E05               	addlw	5
  5658  02B3  0086               	movwf	6
  5659  02B4  3001               	movlw	1	; select bank2/3
  5660  02B5  0087               	movwf	7
  5661  02B6  3000               	movlw	0
  5662  02B7  3FC0               	movwi [0]fsr1
  5663  02B8  3FC1               	movwi [1]fsr1
  5664                           
  5665                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5666  02B9  0877               	movf	_Sw,w
  5667  02BA  0086               	movwf	6
  5668  02BB  3001               	movlw	1	; select bank2/3
  5669  02BC  0087               	movwf	7
  5670  02BD  1601               	bsf	1,4
  5671                           
  5672                           ;Switch_B1.c: 168: setRF_Learn(1);
  5673  02BE  3001               	movlw	1
  5674  02BF  319E  267E  3181   	fcall	_setRF_Learn
  5675                           
  5676                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5677  02C2  0021               	movlb	1	; select bank1
  5678  02C3  1EA0               	btfss	_myMain^(0+128),5
  5679  02C4  0008               	return
  5680                           
  5681                           ;Switch_B1.c: 171: setBuz(2, 100);
  5682  02C5  3064               	movlw	100
  5683  02C6  0020               	movlb	0	; select bank0
  5684  02C7  00A9               	movwf	setBuz@time
  5685  02C8  3000               	movlw	0
  5686  02C9  00AA               	movwf	setBuz@time+1
  5687  02CA  3002               	movlw	2
  5688  02CB  3197  27A7         	fcall	_setBuz
  5689                           
  5690                           ;Switch_B1.c: 172: }
  5691                           ;Switch_B1.c: 174: }
  5692                           ;Switch_B1.c: 175: } else {
  5693  02CD  0008               	return
  5694  02CE                     l9636:	
  5695                           
  5696                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5697  02CE  0877               	movf	_Sw,w
  5698  02CF  0086               	movwf	6
  5699  02D0  3001               	movlw	1	; select bank2/3
  5700  02D1  0087               	movwf	7
  5701  02D2  1A81               	btfsc	1,5
  5702  02D3  0008               	return
  5703                           
  5704                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5705  02D4  0877               	movf	_Sw,w
  5706  02D5  3E07               	addlw	7
  5707  02D6  0086               	movwf	6
  5708  02D7  3001               	movlw	1	; select bank2/3
  5709  02D8  0087               	movwf	7
  5710  02D9  3001               	movlw	1
  5711  02DA  0781               	addwf	1,f
  5712  02DB  3141               	addfsr 1,1
  5713  02DC  1803               	skipnc
  5714  02DD  0A81               	incf	1,f
  5715                           
  5716                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5717  02DE  0877               	movf	_Sw,w
  5718  02DF  3E07               	addlw	7
  5719  02E0  0086               	movwf	6
  5720  02E1  3001               	movlw	1	; select bank2/3
  5721  02E2  0087               	movwf	7
  5722  02E3  3F40               	moviw [0]fsr1
  5723  02E4  0020               	movlb	0	; select bank0
  5724  02E5  00EB               	movwf	??_setSw_Main
  5725  02E6  3F41               	moviw [1]fsr1
  5726  02E7  00EC               	movwf	??_setSw_Main+1
  5727  02E8  3001               	movlw	1
  5728  02E9  026C               	subwf	??_setSw_Main+1,w
  5729  02EA  302C               	movlw	44
  5730  02EB  1903               	skipnz
  5731  02EC  026B               	subwf	??_setSw_Main,w
  5732  02ED  1C03               	skipc
  5733  02EE  0008               	return
  5734                           
  5735                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5736  02EF  0877               	movf	_Sw,w
  5737  02F0  3E07               	addlw	7
  5738  02F1  0086               	movwf	6
  5739  02F2  3001               	movlw	1	; select bank2/3
  5740  02F3  0087               	movwf	7
  5741  02F4  3000               	movlw	0
  5742  02F5  3FC0               	movwi [0]fsr1
  5743  02F6  3FC1               	movwi [1]fsr1
  5744                           
  5745                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5746  02F7  0877               	movf	_Sw,w
  5747  02F8  0086               	movwf	6
  5748  02F9  3001               	movlw	1	; select bank2/3
  5749  02FA  0087               	movwf	7
  5750  02FB  1681               	bsf	1,5
  5751                           
  5752                           ;Switch_B1.c: 183: setRF_Learn(0);
  5753  02FC  3000               	movlw	0
  5754  02FD  319E  267E         	fcall	_setRF_Learn
  5755                           
  5756                           ;Switch_B1.c: 186: }
  5757                           ;Switch_B1.c: 187: }
  5758                           ;Switch_B1.c: 188: }
  5759                           ;Switch_B1.c: 189: }
  5760                           ;Switch_B1.c: 190: }
  5761                           ;Switch_B1.c: 191: } else {
  5762  02FF  0008               	return
  5763  0300                     l9646:	
  5764                           
  5765                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5766  0300  0877               	movf	_Sw,w
  5767  0301  0086               	movwf	6
  5768  0302  3001               	movlw	1	; select bank2/3
  5769  0303  0087               	movwf	7
  5770  0304  1D01               	btfss	1,2
  5771  0305  0008               	return
  5772                           
  5773                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5774  0306  3001               	movlw	1
  5775  0307  0020               	movlb	0	; select bank0
  5776  0308  00EB               	movwf	??_setSw_Main
  5777  0309  0877               	movf	_Sw,w
  5778  030A  3E02               	addlw	2
  5779  030B  0086               	movwf	6
  5780  030C  3001               	movlw	1	; select bank2/3
  5781  030D  0087               	movwf	7
  5782  030E  086B               	movf	??_setSw_Main,w
  5783  030F  0781               	addwf	1,f
  5784                           
  5785                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5786  0310  0877               	movf	_Sw,w
  5787  0311  3E02               	addlw	2
  5788  0312  0086               	movwf	6
  5789  0313  3001               	movlw	1	; select bank2/3
  5790  0314  0087               	movwf	7
  5791  0315  3005               	movlw	5
  5792  0316  0201               	subwf	1,w
  5793  0317  1C03               	skipc
  5794  0318  0008               	return
  5795                           
  5796                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5797  0319  0877               	movf	_Sw,w
  5798  031A  3E02               	addlw	2
  5799  031B  0086               	movwf	6
  5800  031C  3001               	movlw	1	; select bank2/3
  5801  031D  0087               	movwf	7
  5802  031E  0181               	clrf	1
  5803                           
  5804                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5805  031F  0877               	movf	_Sw,w
  5806  0320  0086               	movwf	6
  5807  0321  3001               	movlw	1	; select bank2/3
  5808  0322  0087               	movwf	7
  5809  0323  1101               	bcf	1,2
  5810                           
  5811                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5812  0324  0877               	movf	_Sw,w
  5813  0325  3E03               	addlw	3
  5814  0326  0086               	movwf	6
  5815  0327  3001               	movlw	1	; select bank2/3
  5816  0328  0087               	movwf	7
  5817  0329  3000               	movlw	0
  5818  032A  3FC0               	movwi [0]fsr1
  5819  032B  3FC1               	movwi [1]fsr1
  5820                           
  5821                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5822  032C  0877               	movf	_Sw,w
  5823  032D  0086               	movwf	6
  5824  032E  3001               	movlw	1	; select bank2/3
  5825  032F  0087               	movwf	7
  5826  0330  1181               	bcf	1,3
  5827                           
  5828                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5829  0331  0877               	movf	_Sw,w
  5830  0332  3E05               	addlw	5
  5831  0333  0086               	movwf	6
  5832  0334  3001               	movlw	1	; select bank2/3
  5833  0335  0087               	movwf	7
  5834  0336  3000               	movlw	0
  5835  0337  3FC0               	movwi [0]fsr1
  5836  0338  3FC1               	movwi [1]fsr1
  5837                           
  5838                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5839  0339  0877               	movf	_Sw,w
  5840  033A  0086               	movwf	6
  5841  033B  3001               	movlw	1	; select bank2/3
  5842  033C  0087               	movwf	7
  5843  033D  1201               	bcf	1,4
  5844                           
  5845                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5846  033E  0877               	movf	_Sw,w
  5847  033F  3E07               	addlw	7
  5848  0340  0086               	movwf	6
  5849  0341  3001               	movlw	1	; select bank2/3
  5850  0342  0087               	movwf	7
  5851  0343  3000               	movlw	0
  5852  0344  3FC0               	movwi [0]fsr1
  5853  0345  3FC1               	movwi [1]fsr1
  5854                           
  5855                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5856  0346  0877               	movf	_Sw,w
  5857  0347  0086               	movwf	6
  5858  0348  3001               	movlw	1	; select bank2/3
  5859  0349  0087               	movwf	7
  5860  034A  1281               	bcf	1,5
  5861                           
  5862                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5863  034B  0021               	movlb	1	; select bank1
  5864  034C  1852               	btfsc	_SwDetect^(0+128),0
  5865  034D  2B53               	goto	l9672
  5866                           
  5867                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5868  034E  0020               	movlb	0	; select bank0
  5869  034F  086D               	movf	setSw_Main@sw,w
  5870  0350  3195  2568  3181   	fcall	_setDimmerLights_SwOff
  5871  0353                     l9672:	
  5872                           
  5873                           ;Switch_B1.c: 206: }
  5874                           ;Switch_B1.c: 209: setRF_Learn(0);
  5875  0353  3000               	movlw	0
  5876  0354  319E  267E         	fcall	_setRF_Learn
  5877                           
  5878                           ;Switch_B1.c: 211: }
  5879                           ;Switch_B1.c: 212: }
  5880                           ;Switch_B1.c: 213: }
  5881                           ;Switch_B1.c: 214: } else {
  5882  0356  0008               	return
  5883  0357                     l2415:	
  5884                           
  5885                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5886  0357  0021               	movlb	1	; select bank1
  5887  0358  1C20               	btfss	_myMain^(0+128),0
  5888  0359  0008               	return
  5889                           
  5890                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5891  035A  0877               	movf	_Sw,w
  5892  035B  0086               	movwf	6
  5893  035C  3001               	movlw	1	; select bank2/3
  5894  035D  0087               	movwf	7
  5895  035E  1401               	bsf	1,0
  5896  035F  0008               	return
  5897  0360                     __end_of_setSw_Main:	
  5898                           
  5899                           	psect	text14
  5900  1E7E                     __ptext14:	
  5901 ;; *************** function _setRF_Learn *****************
  5902 ;; Defined at:
  5903 ;;		line 23 in file "../src/RF_Control_B1.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  command         1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  command         1    1[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;Total ram usage:        2 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    5
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_setSw_Main
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _setRF_Learn
  5933  1E7E                     _setRF_Learn:	
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5937                           ;setRF_Learn@command stored from wreg
  5938  1E7E  0020               	movlb	0	; select bank0
  5939  1E7F  00A1               	movwf	setRF_Learn@command
  5940                           
  5941                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5942  1E80  0821               	movf	setRF_Learn@command,w
  5943  1E81  3A01               	xorlw	1
  5944  1E82  3000               	movlw	0
  5945  1E83  1903               	skipnz
  5946  1E84  3001               	movlw	1
  5947  1E85  00A0               	movwf	??_setRF_Learn
  5948  1E86  0EA0               	swapf	??_setRF_Learn,f
  5949  1E87  0DA0               	rlf	??_setRF_Learn,f
  5950  1E88  0DA0               	rlf	??_setRF_Learn,f
  5951  1E89  0021               	movlb	1	; select bank1
  5952  1E8A  083A               	movf	_RF1^(0+128),w
  5953  1E8B  0020               	movlb	0	; select bank0
  5954  1E8C  0620               	xorwf	??_setRF_Learn,w
  5955  1E8D  39BF               	andlw	-65
  5956  1E8E  0620               	xorwf	??_setRF_Learn,w
  5957  1E8F  0021               	movlb	1	; select bank1
  5958  1E90  00BA               	movwf	_RF1^(0+128)
  5959  1E91  0008               	return
  5960  1E92                     __end_of_setRF_Learn:	
  5961                           
  5962                           	psect	text15
  5963  1372                     __ptext15:	
  5964 ;; *************** function _setDimmerLights_AdjOn *****************
  5965 ;; Defined at:
  5966 ;;		line 477 in file "../src/Dimmer_B1.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  sw              1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  sw              1    4[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;		None               void
  5973 ;; Registers used:
  5974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        1 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    7
  5987 ;; This function calls:
  5988 ;;		_DimmerLightsPointSelect
  5989 ;;		_getDimmerLights_Allow_Condition
  5990 ;; This function is called by:
  5991 ;;		_setSw_Main
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _setDimmerLights_AdjOn
  5997  1372                     _setDimmerLights_AdjOn:	
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6001                           ;setDimmerLights_AdjOn@sw stored from wreg
  6002  1372  0020               	movlb	0	; select bank0
  6003  1373  00A4               	movwf	setDimmerLights_AdjOn@sw
  6004                           
  6005                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6006  1374  0824               	movf	setDimmerLights_AdjOn@sw,w
  6007  1375  319C  24D4  3193   	fcall	_DimmerLightsPointSelect
  6008                           
  6009                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6010  1378  0020               	movlb	0	; select bank0
  6011  1379  086F               	movf	_DimmerLights,w
  6012  137A  3E0A               	addlw	10
  6013  137B  0086               	movwf	6
  6014  137C  3001               	movlw	1	; select bank2/3
  6015  137D  0087               	movwf	7
  6016  137E  1881               	btfsc	1,1
  6017  137F  0008               	return
  6018  1380  0824               	movf	setDimmerLights_AdjOn@sw,w
  6019  1381  319E  26D1  3193   	fcall	_getDimmerLights_Allow_Condition
  6020  1384  3800               	iorlw	0
  6021  1385  1D03               	skipz
  6022  1386  0008               	return
  6023                           
  6024                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6025  1387  0020               	movlb	0	; select bank0
  6026  1388  086F               	movf	_DimmerLights,w
  6027  1389  3E0B               	addlw	11
  6028  138A  0086               	movwf	6
  6029  138B  3001               	movlw	1	; select bank2/3
  6030  138C  0087               	movwf	7
  6031  138D  1C81               	btfss	1,1
  6032  138E  0008               	return
  6033                           
  6034                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6035  138F  086F               	movf	_DimmerLights,w
  6036  1390  3E0B               	addlw	11
  6037  1391  0086               	movwf	6
  6038  1392  3001               	movlw	1	; select bank2/3
  6039  1393  0087               	movwf	7
  6040  1394  1501               	bsf	1,2
  6041                           
  6042                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6043  1395  086F               	movf	_DimmerLights,w
  6044  1396  3E02               	addlw	2
  6045  1397  0086               	movwf	6
  6046  1398  3001               	movlw	1	; select bank2/3
  6047  1399  0087               	movwf	7
  6048  139A  1481               	bsf	1,1
  6049                           
  6050                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6051  139B  086F               	movf	_DimmerLights,w
  6052  139C  3E0A               	addlw	10
  6053  139D  0086               	movwf	6
  6054  139E  3001               	movlw	1	; select bank2/3
  6055  139F  0087               	movwf	7
  6056  13A0  1581               	bsf	1,3
  6057                           
  6058                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6059  13A1  086F               	movf	_DimmerLights,w
  6060  13A2  3E0A               	addlw	10
  6061  13A3  0086               	movwf	6
  6062  13A4  3001               	movlw	1	; select bank2/3
  6063  13A5  0087               	movwf	7
  6064  13A6  1501               	bsf	1,2
  6065  13A7  0008               	return
  6066  13A8                     __end_of_setDimmerLights_AdjOn:	
  6067                           
  6068                           	psect	text16
  6069  1DEC                     __ptext16:	
  6070 ;; *************** function _getSw_KeyStatus *****************
  6071 ;; Defined at:
  6072 ;;		line 222 in file "../src/Switch_B1.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  sw              1    wreg     unsigned char 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  sw              1    0[COMMON] unsigned char 
  6077 ;;  status          1    1[BANK0 ] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      unsigned char 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;Total ram usage:        3 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    5
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_setSw_Main
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           
  6102                           ;psect for function _getSw_KeyStatus
  6103  1DEC                     _getSw_KeyStatus:	
  6104                           
  6105                           ;Switch_B1.c: 223: char status = 0;
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6109  1DEC  0020               	movlb	0	; select bank0
  6110  1DED  01A1               	clrf	getSw_KeyStatus@status
  6111                           
  6112                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6113  1DEE  01A2               	clrf	_getSw_KeyStatus$6017
  6114  1DEF  0AA2               	incf	_getSw_KeyStatus$6017,f
  6115  1DF0  1F0C               	btfss	12,6	;volatile
  6116  1DF1  1A0C               	btfsc	12,4	;volatile
  6117  1DF2  2DF7               	goto	l9134
  6118  1DF3  1C0C               	btfss	12,0	;volatile
  6119  1DF4  1B8C               	btfsc	12,7	;volatile
  6120  1DF5  2DF7               	goto	l9134
  6121  1DF6  01A2               	clrf	_getSw_KeyStatus$6017
  6122  1DF7                     l9134:	
  6123  1DF7  0822               	movf	_getSw_KeyStatus$6017,w
  6124  1DF8  00A0               	movwf	??_getSw_KeyStatus
  6125  1DF9  0820               	movf	??_getSw_KeyStatus,w
  6126  1DFA  00A1               	movwf	getSw_KeyStatus@status
  6127                           
  6128                           ;Switch_B1.c: 246: return status;
  6129  1DFB  0821               	movf	getSw_KeyStatus@status,w
  6130  1DFC  0008               	return
  6131  1DFD                     __end_of_getSw_KeyStatus:	
  6132                           
  6133                           	psect	text17
  6134  1D00                     __ptext17:	
  6135 ;; *************** function _SwPointSelect *****************
  6136 ;; Defined at:
  6137 ;;		line 25 in file "../src/Switch_B1.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  sw              1    wreg     unsigned char 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sw              1    1[BANK0 ] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;		None               void
  6144 ;; Registers used:
  6145 ;;		wreg
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;Total ram usage:        2 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    5
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_setSw_Main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _SwPointSelect
  6167  1D00                     _SwPointSelect:	
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _SwPointSelect: [wreg]
  6171                           ;SwPointSelect@sw stored from wreg
  6172  1D00  0020               	movlb	0	; select bank0
  6173  1D01  00A1               	movwf	SwPointSelect@sw
  6174                           
  6175                           ;Switch_B1.c: 28: if (sw == 1) {
  6176  1D02  0821               	movf	SwPointSelect@sw,w
  6177  1D03  3A01               	xorlw	1
  6178  1D04  1D03               	skipz
  6179  1D05  0008               	return
  6180                           
  6181                           ;Switch_B1.c: 29: Sw = &Sw1;
  6182  1D06  30E3               	movlw	_Sw1& (0+255)
  6183  1D07  00A0               	movwf	??_SwPointSelect
  6184  1D08  0820               	movf	??_SwPointSelect,w
  6185  1D09  00F7               	movwf	_Sw
  6186  1D0A  0008               	return
  6187  1D0B                     __end_of_SwPointSelect:	
  6188                           
  6189                           	psect	text18
  6190  1C97                     __ptext18:	
  6191 ;; *************** function _Switch_Initialization *****************
  6192 ;; Defined at:
  6193 ;;		line 46 in file "../src/Switch_B1.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;Total ram usage:        0 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    8
  6214 ;; This function calls:
  6215 ;;		_TouchPower
  6216 ;;		_setSw_Initialization
  6217 ;; This function is called by:
  6218 ;;		_main
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _Switch_Initialization
  6224  1C97                     _Switch_Initialization:	
  6225                           
  6226                           ;Switch_B1.c: 47: TouchPower();
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6230  1C97  319E  26BC  319C   	fcall	_TouchPower
  6231                           
  6232                           ;Switch_B1.c: 49: WPUB1 = 0;
  6233  1C9A  0024               	movlb	4	; select bank4
  6234  1C9B  108D               	bcf	13,1	;volatile
  6235                           
  6236                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6237  1C9C  3001               	movlw	1
  6238  1C9D  319D  25A9         	fcall	_setSw_Initialization
  6239  1C9F  0008               	return
  6240  1CA0                     __end_of_Switch_Initialization:	
  6241                           
  6242                           	psect	text19
  6243  1DA9                     __ptext19:	
  6244 ;; *************** function _setSw_Initialization *****************
  6245 ;; Defined at:
  6246 ;;		line 93 in file "../src/Switch_B1.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  sw              1    wreg     unsigned char 
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;  sw              1    4[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;		None               void
  6253 ;; Registers used:
  6254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        1 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    7
  6267 ;; This function calls:
  6268 ;;		_setLED
  6269 ;; This function is called by:
  6270 ;;		_Switch_Initialization
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _setSw_Initialization
  6276  1DA9                     _setSw_Initialization:	
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6280                           ;setSw_Initialization@sw stored from wreg
  6281  1DA9  0020               	movlb	0	; select bank0
  6282  1DAA  00A4               	movwf	setSw_Initialization@sw
  6283                           
  6284                           ;Switch_B1.c: 94: setLED(sw, 1);
  6285  1DAB  01A2               	clrf	setLED@command
  6286  1DAC  0AA2               	incf	setLED@command,f
  6287  1DAD  0824               	movf	setSw_Initialization@sw,w
  6288  1DAE  3193  23DF  319D   	fcall	_setLED
  6289                           
  6290                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6291  1DB1  0020               	movlb	0	; select bank0
  6292  1DB2  01A2               	clrf	setLED@command
  6293  1DB3  0AA2               	incf	setLED@command,f
  6294  1DB4  0824               	movf	setSw_Initialization@sw,w
  6295  1DB5  3E01               	addlw	1
  6296  1DB6  3193  23DF         	fcall	_setLED
  6297  1DB8  0008               	return
  6298  1DB9                     __end_of_setSw_Initialization:	
  6299                           
  6300                           	psect	text20
  6301  1EBC                     __ptext20:	
  6302 ;; *************** function _TouchPower *****************
  6303 ;; Defined at:
  6304 ;;		line 10 in file "../src/Switch_B1.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    6
  6325 ;; This function calls:
  6326 ;;		_Timeout_Counter
  6327 ;;		_set_TimeoutCleared
  6328 ;; This function is called by:
  6329 ;;		_Switch_Initialization
  6330 ;;		_Switch_Main
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _TouchPower
  6336  1EBC                     _TouchPower:	
  6337                           
  6338                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6339                           
  6340                           ;incstack = 0
  6341                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6342  1EBC  0020               	movlb	0	; select bank0
  6343  1EBD  180D               	btfsc	13,0	;volatile
  6344  1EBE  0008               	return
  6345                           
  6346                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6347  1EBF  0021               	movlb	1	; select bank1
  6348  1EC0  1C20               	btfss	_myMain^(0+128),0
  6349  1EC1  0008               	return
  6350  1EC2  2EC8               	goto	l9578
  6351  1EC3                     l2395:	
  6352                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6353                           
  6354                           
  6355                           ;Switch_B1.c: 14: RB0 = 1;
  6356  1EC3  0020               	movlb	0	; select bank0
  6357  1EC4  140D               	bsf	13,0	;volatile
  6358                           
  6359                           ;Switch_B1.c: 15: Timeout_Counter();
  6360  1EC5  319E  2692  319E   	fcall	_Timeout_Counter
  6361  1EC8                     l9578:	
  6362  1EC8  0020               	movlb	0	; select bank0
  6363  1EC9  180D               	btfsc	13,0	;volatile
  6364  1ECA  2ECE               	goto	l9582
  6365  1ECB  0021               	movlb	1	; select bank1
  6366  1ECC  1D2B               	btfss	(_myMain^(0+128)+11),2
  6367  1ECD  2EC3               	goto	l2395
  6368  1ECE                     l9582:	
  6369                           
  6370                           ;Switch_B1.c: 16: }
  6371                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6372  1ECE  319C  2448         	fcall	_set_TimeoutCleared
  6373  1ED0  0008               	return
  6374  1ED1                     __end_of_TouchPower:	
  6375                           
  6376                           	psect	text21
  6377  1C1B                     __ptext21:	
  6378 ;; *************** function _RF_Main *****************
  6379 ;; Defined at:
  6380 ;;		line 16 in file "../src/RF_Control_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        0 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:   14
  6401 ;; This function calls:
  6402 ;;		_setRF_Main
  6403 ;; This function is called by:
  6404 ;;		_main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _RF_Main
  6410  1C1B                     _RF_Main:	
  6411                           
  6412                           ;RF_Control_B1.c: 18: setRF_Main();
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6416  1C1B  318C  2484         	fcall	_setRF_Main
  6417  1C1D  0008               	return
  6418  1C1E                     __end_of_RF_Main:	
  6419                           
  6420                           	psect	text22
  6421  0C84                     __ptext22:	
  6422 ;; *************** function _setRF_Main *****************
  6423 ;; Defined at:
  6424 ;;		line 52 in file "../src/RF_Control_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  error           1    2[BANK2 ] unsigned char 
  6429 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6430 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;		None               void
  6433 ;; Registers used:
  6434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        3 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:   13
  6447 ;; This function calls:
  6448 ;;		_CC2500_RxData
  6449 ;;		_CC2500_TxData
  6450 ;;		_CC2500_WriteCommand
  6451 ;;		_RF_RxDisable
  6452 ;;		_getBuz_GO
  6453 ;;		_getMain_All_Error_Status
  6454 ;;		_getRF_KeyStatus
  6455 ;;		_getRxData
  6456 ;; This function is called by:
  6457 ;;		_RF_Main
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _setRF_Main
  6463  0C84                     _setRF_Main:	
  6464                           
  6465                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6469  0C84  0022               	movlb	2	; select bank2
  6470  0C85  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6471  0C86  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6472  0C87  01EF               	clrf	setRF_Main@error^(0+256)
  6473                           
  6474                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6475  0C88  0021               	movlb	1	; select bank1
  6476  0C89  1C3A               	btfss	_RF1^(0+128),0
  6477  0C8A  2D00               	goto	l2040
  6478                           
  6479                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6480  0C8B  319D  25CA  318C   	fcall	_getBuz_GO
  6481  0C8E  0020               	movlb	0	; select bank0
  6482  0C8F  0821               	movf	?_getBuz_GO+1,w
  6483  0C90  0420               	iorwf	?_getBuz_GO,w
  6484  0C91  1D03               	skipz
  6485  0C92  0008               	return
  6486                           
  6487                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6488  0C93  3000               	movlw	0
  6489  0C94  3192  226B  318C   	fcall	_getMain_All_Error_Status
  6490  0C97  3800               	iorlw	0
  6491  0C98  1D03               	skipz
  6492  0C99  2CAA               	goto	l9522
  6493                           
  6494                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6495  0C9A  319D  25DB  318C   	fcall	_getRF_KeyStatus
  6496  0C9D  3A01               	xorlw	1
  6497  0C9E  1D03               	skipz
  6498  0C9F  2CAA               	goto	l9522
  6499  0CA0  0021               	movlb	1	; select bank1
  6500  0CA1  1B3A               	btfsc	_RF1^(0+128),6
  6501  0CA2  2CAA               	goto	l9522
  6502                           
  6503                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6504  0CA3  01BC               	clrf	(_RF1^(0+128)+2)
  6505  0CA4  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6506                           
  6507                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6508  0CA5  14BB               	bsf	(_RF1^(0+128)+1),1
  6509                           
  6510                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6511  0CA6  3005               	movlw	5
  6512  0CA7  00C1               	movwf	(_RF1^(0+128)+7)
  6513  0CA8  3000               	movlw	0
  6514  0CA9  00C2               	movwf	(_RF1^(0+128)+8)
  6515  0CAA                     l9522:	
  6516                           
  6517                           ;RF_Control_B1.c: 74: }
  6518                           ;RF_Control_B1.c: 84: }
  6519                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6520  0CAA  0021               	movlb	1	; select bank1
  6521  0CAB  1B3A               	btfsc	_RF1^(0+128),6
  6522  0CAC  2CC3               	goto	l2044
  6523                           
  6524                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6525  0CAD  1CBB               	btfss	(_RF1^(0+128)+1),1
  6526  0CAE  2CC9               	goto	l9538
  6527                           
  6528                           ;RF_Control_B1.c: 88: RF1.Count++;
  6529  0CAF  3001               	movlw	1
  6530  0CB0  07BC               	addwf	(_RF1^(0+128)+2),f
  6531  0CB1  3000               	movlw	0
  6532  0CB2  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6533                           
  6534                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6535  0CB3  3002               	movlw	2
  6536  0CB4  3EBA               	addlw	_RF1& (0+255)
  6537  0CB5  0086               	movwf	6
  6538  0CB6  0187               	clrf	7
  6539  0CB7  3F40               	moviw [0]fsr1
  6540  0CB8  0641               	xorwf	(_RF1^(0+128)+7),w
  6541  0CB9  1D03               	skipz
  6542  0CBA  2CBD               	goto	u10485
  6543  0CBB  3F41               	moviw [1]fsr1
  6544  0CBC  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6545  0CBD                     u10485:	
  6546  0CBD  1D03               	skipz
  6547  0CBE  2CC9               	goto	l9538
  6548                           
  6549                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6550  0CBF  01BC               	clrf	(_RF1^(0+128)+2)
  6551  0CC0  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6552                           
  6553                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6554  0CC1  10BB               	bcf	(_RF1^(0+128)+1),1
  6555                           
  6556                           ;RF_Control_B1.c: 92: }
  6557                           ;RF_Control_B1.c: 93: }
  6558                           ;RF_Control_B1.c: 94: } else {
  6559  0CC2  2CC9               	goto	l9538
  6560  0CC3                     l2044:	
  6561                           
  6562                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6563  0CC3  113A               	bcf	_RF1^(0+128),2
  6564                           
  6565                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6566  0CC4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6567  0CC5  2CC9               	goto	l9538
  6568                           
  6569                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6570  0CC6  10BB               	bcf	(_RF1^(0+128)+1),1
  6571                           
  6572                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6573  0CC7  01BC               	clrf	(_RF1^(0+128)+2)
  6574  0CC8  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6575  0CC9                     l9538:	
  6576                           
  6577                           ;RF_Control_B1.c: 99: }
  6578                           ;RF_Control_B1.c: 100: }
  6579                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6580  0CC9  18BB               	btfsc	(_RF1^(0+128)+1),1
  6581  0CCA  0008               	return
  6582                           
  6583                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6584  0CCB  1D3A               	btfss	_RF1^(0+128),2
  6585  0CCC  2CDC               	goto	l2050
  6586                           
  6587                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6588  0CCD  113A               	bcf	_RF1^(0+128),2
  6589                           
  6590                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6591  0CCE  14BB               	bsf	(_RF1^(0+128)+1),1
  6592                           
  6593                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6594  0CCF  3005               	movlw	5
  6595  0CD0  00C1               	movwf	(_RF1^(0+128)+7)
  6596  0CD1  3000               	movlw	0
  6597  0CD2  00C2               	movwf	(_RF1^(0+128)+8)
  6598                           
  6599                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6600  0CD3  319E  2645  318C   	fcall	_RF_RxDisable
  6601                           
  6602                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6603  0CD6  318A  2268         	fcall	_CC2500_TxData
  6604                           
  6605                           ;RF_Control_B1.c: 109: RB5 = RB5 == 1 ? 0 : 1;
  6606  0CD8  3020               	movlw	32
  6607  0CD9  0020               	movlb	0	; select bank0
  6608  0CDA  068D               	xorwf	13,f
  6609                           
  6610                           ;RF_Control_B1.c: 110: } else {
  6611  0CDB  0008               	return
  6612  0CDC                     l2050:	
  6613                           
  6614                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6615  0CDC  1DBA               	btfss	_RF1^(0+128),3
  6616  0CDD  2CF1               	goto	l2052
  6617                           
  6618                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6619  0CDE  1FBA               	btfss	_RF1^(0+128),7
  6620  0CDF  2CE2               	goto	l9554
  6621  0CE0  1F3A               	btfss	_RF1^(0+128),6
  6622  0CE1  0008               	return
  6623  0CE2                     l9554:	
  6624                           
  6625                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6626  0CE2  318B  2396  318C   	fcall	_CC2500_RxData
  6627                           
  6628                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6629  0CE5  0021               	movlb	1	; select bank1
  6630  0CE6  1CBA               	btfss	_RF1^(0+128),1
  6631  0CE7  0008               	return
  6632                           
  6633                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6634  0CE8  10BA               	bcf	_RF1^(0+128),1
  6635                           
  6636                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6637  0CE9  14BB               	bsf	(_RF1^(0+128)+1),1
  6638                           
  6639                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6640  0CEA  3005               	movlw	5
  6641  0CEB  00C1               	movwf	(_RF1^(0+128)+7)
  6642  0CEC  3000               	movlw	0
  6643  0CED  00C2               	movwf	(_RF1^(0+128)+8)
  6644                           
  6645                           ;RF_Control_B1.c: 127: getRxData();
  6646  0CEE  318C  2405         	fcall	_getRxData
  6647                           
  6648                           ;RF_Control_B1.c: 129: }
  6649                           ;RF_Control_B1.c: 130: }
  6650                           ;RF_Control_B1.c: 131: } else {
  6651  0CF0  0008               	return
  6652  0CF1                     l2052:	
  6653                           
  6654                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6655  0CF1  18BA               	btfsc	_RF1^(0+128),1
  6656  0CF2  0008               	return
  6657                           
  6658                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6659  0CF3  15BA               	bsf	_RF1^(0+128),3
  6660                           
  6661                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6662  0CF4  3036               	movlw	54
  6663  0CF5  319F  2718  318C   	fcall	_CC2500_WriteCommand
  6664                           
  6665                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6666  0CF8  303A               	movlw	58
  6667  0CF9  319F  2718  318C   	fcall	_CC2500_WriteCommand
  6668                           
  6669                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6670  0CFC  3034               	movlw	52
  6671  0CFD  319F  2718         	fcall	_CC2500_WriteCommand
  6672                           
  6673                           ;RF_Control_B1.c: 140: }
  6674                           ;RF_Control_B1.c: 142: }
  6675                           ;RF_Control_B1.c: 143: }
  6676                           ;RF_Control_B1.c: 144: }
  6677                           ;RF_Control_B1.c: 145: }
  6678                           ;RF_Control_B1.c: 146: } else {
  6679  0CFF  0008               	return
  6680  0D00                     l2040:	
  6681                           
  6682                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6683  0D00  1C20               	btfss	_myMain^(0+128),0
  6684  0D01  0008               	return
  6685                           
  6686                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6687  0D02  143A               	bsf	_RF1^(0+128),0
  6688  0D03  0008               	return
  6689  0D04                     __end_of_setRF_Main:	
  6690                           
  6691                           	psect	text23
  6692  0C05                     __ptext23:	
  6693 ;; *************** function _getRxData *****************
  6694 ;; Defined at:
  6695 ;;		line 243 in file "../src/RF_Control_B1.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  error           1    4[BANK1 ] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;		None               void
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;Total ram usage:        2 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:   12
  6716 ;; This function calls:
  6717 ;;		_getMain_All_Error_Status
  6718 ;;		_setControl_Lights_Table
  6719 ;;		_setLog_Code
  6720 ;;		_setTxData
  6721 ;; This function is called by:
  6722 ;;		_setRF_Main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _getRxData
  6728  0C05                     _getRxData:	
  6729                           
  6730                           ;RF_Control_B1.c: 244: char error = getMain_All_Error_Status(0);
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  0C05  3000               	movlw	0
  6735  0C06  3192  226B  318C   	fcall	_getMain_All_Error_Status
  6736  0C09  0020               	movlb	0	; select bank0
  6737  0C0A  00EE               	movwf	??_getRxData
  6738  0C0B  086E               	movf	??_getRxData,w
  6739  0C0C  0021               	movlb	1	; select bank1
  6740  0C0D  00ED               	movwf	getRxData@error^(0+128)
  6741                           
  6742                           ;RF_Control_B1.c: 245: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6743  0C0E  0023               	movlb	3	; select bank3
  6744  0C0F  0820               	movf	_RF_Data^(0+384),w
  6745  0C10  3AAA               	xorlw	170
  6746  0C11  1D03               	skipz
  6747  0C12  2C29               	goto	l9074
  6748  0C13  0821               	movf	(_RF_Data^(0+384)+1),w
  6749  0C14  3A01               	xorlw	1
  6750  0C15  1D03               	skipz
  6751  0C16  2C29               	goto	l9074
  6752                           
  6753                           ;RF_Control_B1.c: 247: product->Data[2] = 0x55;
  6754  0C17  3055               	movlw	85
  6755  0C18  0020               	movlb	0	; select bank0
  6756  0C19  00EE               	movwf	??_getRxData
  6757  0C1A  0879               	movf	_product,w
  6758  0C1B  3E02               	addlw	2
  6759  0C1C  0086               	movwf	6
  6760  0C1D  3002               	movlw	2	; select bank4/5
  6761  0C1E  0087               	movwf	7
  6762  0C1F  086E               	movf	??_getRxData,w
  6763  0C20  0081               	movwf	1
  6764                           
  6765                           ;RF_Control_B1.c: 248: setTxData();
  6766  0C21  318E  260C         	fcall	_setTxData
  6767                           
  6768                           ;RF_Control_B1.c: 249: RF1.RunTime = 10;
  6769  0C23  300A               	movlw	10
  6770  0C24  0021               	movlb	1	; select bank1
  6771  0C25  00C1               	movwf	(_RF1^(0+128)+7)
  6772  0C26  3000               	movlw	0
  6773  0C27  00C2               	movwf	(_RF1^(0+128)+8)
  6774                           
  6775                           ;RF_Control_B1.c: 255: } else {
  6776  0C28  0008               	return
  6777  0C29                     l9074:	
  6778                           
  6779                           ;RF_Control_B1.c: 257: if (error == 0) {
  6780  0C29  0021               	movlb	1	; select bank1
  6781  0C2A  08ED               	movf	getRxData@error^(0+128),f
  6782  0C2B  1D03               	skipz
  6783  0C2C  0008               	return
  6784                           
  6785                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  6786  0C2D  1F3A               	btfss	_RF1^(0+128),6
  6787  0C2E  2C3A               	goto	l9084
  6788                           
  6789                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6790  0C2F  0023               	movlb	3	; select bank3
  6791  0C30  08A0               	movf	_RF_Data^(0+384),f
  6792  0C31  1D03               	skipz
  6793  0C32  0008               	return
  6794  0C33  0821               	movf	(_RF_Data^(0+384)+1),w
  6795  0C34  3A64               	xorlw	100
  6796  0C35  1D03               	skipz
  6797  0C36  0008               	return
  6798                           
  6799                           ;RF_Control_B1.c: 260: setLog_Code();
  6800  0C37  3192  22D2         	fcall	_setLog_Code
  6801                           
  6802                           ;RF_Control_B1.c: 261: }
  6803                           ;RF_Control_B1.c: 262: } else {
  6804  0C39  0008               	return
  6805  0C3A                     l9084:	
  6806                           
  6807                           ;RF_Control_B1.c: 263: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6808  0C3A  0023               	movlb	3	; select bank3
  6809  0C3B  08A0               	movf	_RF_Data^(0+384),f
  6810  0C3C  1D03               	skipz
  6811  0C3D  2C6F               	goto	l9104
  6812  0C3E  0821               	movf	(_RF_Data^(0+384)+1),w
  6813  0C3F  3A02               	xorlw	2
  6814  0C40  1D03               	skipz
  6815  0C41  2C6F               	goto	l9104
  6816                           
  6817                           ;RF_Control_B1.c: 265: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6818  0C42  082C               	movf	(_RF_Data^(0+384)+12),w
  6819  0C43  3AFF               	xorlw	255
  6820  0C44  1D03               	skipz
  6821  0C45  2C50               	goto	l9096
  6822  0C46  082D               	movf	(_RF_Data^(0+384)+13),w
  6823  0C47  3AFF               	xorlw	255
  6824  0C48  1D03               	skipz
  6825  0C49  2C50               	goto	l9096
  6826  0C4A  082E               	movf	(_RF_Data^(0+384)+14),w
  6827  0C4B  3AFF               	xorlw	255
  6828  0C4C  1D03               	skipz
  6829  0C4D  2C50               	goto	l9096
  6830                           
  6831                           ;RF_Control_B1.c: 266: __nop();
  6832  0C4E  0000               	nop
  6833                           
  6834                           ;RF_Control_B1.c: 267: } else {
  6835  0C4F  0008               	return
  6836  0C50                     l9096:	
  6837                           
  6838                           ;RF_Control_B1.c: 268: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6839  0C50  0879               	movf	_product,w
  6840  0C51  3E0C               	addlw	12
  6841  0C52  0086               	movwf	6
  6842  0C53  3002               	movlw	2	; select bank4/5
  6843  0C54  0087               	movwf	7
  6844  0C55  0023               	movlb	3	; select bank3
  6845  0C56  082C               	movf	(_RF_Data^(0+384)+12),w
  6846  0C57  0601               	xorwf	1,w
  6847  0C58  1D03               	skipz
  6848  0C59  0008               	return
  6849  0C5A  0879               	movf	_product,w
  6850  0C5B  3E0D               	addlw	13
  6851  0C5C  0086               	movwf	6
  6852  0C5D  3002               	movlw	2	; select bank4/5
  6853  0C5E  0087               	movwf	7
  6854  0C5F  082D               	movf	(_RF_Data^(0+384)+13),w
  6855  0C60  0601               	xorwf	1,w
  6856  0C61  1D03               	skipz
  6857  0C62  0008               	return
  6858  0C63  0879               	movf	_product,w
  6859  0C64  3E0E               	addlw	14
  6860  0C65  0086               	movwf	6
  6861  0C66  3002               	movlw	2	; select bank4/5
  6862  0C67  0087               	movwf	7
  6863  0C68  082E               	movf	(_RF_Data^(0+384)+14),w
  6864  0C69  0601               	xorwf	1,w
  6865  0C6A  1D03               	skipz
  6866  0C6B  0008               	return
  6867                           
  6868                           ;RF_Control_B1.c: 269: setControl_Lights_Table();
  6869  0C6C  3189  21A8         	fcall	_setControl_Lights_Table
  6870                           
  6871                           ;RF_Control_B1.c: 270: }
  6872                           ;RF_Control_B1.c: 271: }
  6873                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6874  0C6E  0008               	return
  6875  0C6F                     l9104:	
  6876  0C6F  0023               	movlb	3	; select bank3
  6877  0C70  0820               	movf	_RF_Data^(0+384),w
  6878  0C71  3AFF               	xorlw	255
  6879  0C72  1D03               	skipz
  6880  0C73  2C7A               	goto	l9110
  6881  0C74  0821               	movf	(_RF_Data^(0+384)+1),w
  6882  0C75  3A02               	xorlw	2
  6883  0C76  1D03               	skipz
  6884  0C77  2C7A               	goto	l9110
  6885                           
  6886                           ;RF_Control_B1.c: 273: __nop();
  6887  0C78  0000               	nop
  6888                           
  6889                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6890  0C79  0008               	return
  6891  0C7A                     l9110:	
  6892  0C7A  0023               	movlb	3	; select bank3
  6893  0C7B  08A0               	movf	_RF_Data^(0+384),f
  6894  0C7C  1D03               	skipz
  6895  0C7D  0008               	return
  6896  0C7E  0821               	movf	(_RF_Data^(0+384)+1),w
  6897  0C7F  3A65               	xorlw	101
  6898  0C80  1D03               	skipz
  6899  0C81  0008               	return
  6900                           
  6901                           ;RF_Control_B1.c: 275: __nop();
  6902  0C82  0000               	nop
  6903                           
  6904                           ;RF_Control_B1.c: 283: ;
  6905                           
  6906                           ;RF_Control_B1.c: 276: }
  6907                           ;RF_Control_B1.c: 281: }
  6908                           ;RF_Control_B1.c: 282: } else {
  6909  0C83  0008               	return
  6910  0C84                     __end_of_getRxData:	
  6911                           
  6912                           	psect	text24
  6913  12D2                     __ptext24:	
  6914 ;; *************** function _setLog_Code *****************
  6915 ;; Defined at:
  6916 ;;		line 289 in file "../src/RF_Control_B1.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;		None               void
  6923 ;; Registers used:
  6924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;Total ram usage:        1 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    7
  6937 ;; This function calls:
  6938 ;;		_setBuz
  6939 ;;		_setMemory_LoopSave
  6940 ;;		_setMemory_Modify
  6941 ;;		_setProductData
  6942 ;; This function is called by:
  6943 ;;		_getRxData
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           
  6948                           ;psect for function _setLog_Code
  6949  12D2                     _setLog_Code:	
  6950                           
  6951                           ;RF_Control_B1.c: 290: RF1.Learn = 0;
  6952                           
  6953                           ;incstack = 0
  6954                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6955  12D2  0021               	movlb	1	; select bank1
  6956  12D3  133A               	bcf	_RF1^(0+128),6
  6957                           
  6958                           ;RF_Control_B1.c: 291: setProductData(12, RF_Data[12]);
  6959  12D4  0023               	movlb	3	; select bank3
  6960  12D5  082C               	movf	(_RF_Data^(0+384)+12),w
  6961  12D6  0020               	movlb	0	; select bank0
  6962  12D7  00E6               	movwf	??_setLog_Code
  6963  12D8  0866               	movf	??_setLog_Code,w
  6964  12D9  00E2               	movwf	setProductData@value
  6965  12DA  300C               	movlw	12
  6966  12DB  319D  255F  3192   	fcall	_setProductData
  6967                           
  6968                           ;RF_Control_B1.c: 292: setProductData(13, RF_Data[13]);
  6969  12DE  0023               	movlb	3	; select bank3
  6970  12DF  082D               	movf	(_RF_Data^(0+384)+13),w
  6971  12E0  0020               	movlb	0	; select bank0
  6972  12E1  00E6               	movwf	??_setLog_Code
  6973  12E2  0866               	movf	??_setLog_Code,w
  6974  12E3  00E2               	movwf	setProductData@value
  6975  12E4  300D               	movlw	13
  6976  12E5  319D  255F  3192   	fcall	_setProductData
  6977                           
  6978                           ;RF_Control_B1.c: 293: setProductData(14, RF_Data[14]);
  6979  12E8  0023               	movlb	3	; select bank3
  6980  12E9  082E               	movf	(_RF_Data^(0+384)+14),w
  6981  12EA  0020               	movlb	0	; select bank0
  6982  12EB  00E6               	movwf	??_setLog_Code
  6983  12EC  0866               	movf	??_setLog_Code,w
  6984  12ED  00E2               	movwf	setProductData@value
  6985  12EE  300E               	movlw	14
  6986  12EF  319D  255F  3192   	fcall	_setProductData
  6987                           
  6988                           ;RF_Control_B1.c: 294: setBuz(1, 100);
  6989  12F2  3064               	movlw	100
  6990  12F3  0020               	movlb	0	; select bank0
  6991  12F4  00A9               	movwf	setBuz@time
  6992  12F5  3000               	movlw	0
  6993  12F6  00AA               	movwf	setBuz@time+1
  6994  12F7  3001               	movlw	1
  6995  12F8  3197  27A7  3192   	fcall	_setBuz
  6996                           
  6997                           ;RF_Control_B1.c: 295: if (myMain.First == 1) {
  6998  12FB  0021               	movlb	1	; select bank1
  6999  12FC  1EA0               	btfss	_myMain^(0+128),5
  7000  12FD  2B02               	goto	l2101
  7001                           
  7002                           ;RF_Control_B1.c: 296: setMemory_LoopSave(1);
  7003  12FE  3001               	movlw	1
  7004  12FF  319E  266B  3192   	fcall	_setMemory_LoopSave
  7005  1302                     l2101:	
  7006                           
  7007                           ;RF_Control_B1.c: 297: }
  7008                           ;RF_Control_B1.c: 298: setMemory_Modify(1);
  7009  1302  3001               	movlw	1
  7010  1303  319E  2658         	fcall	_setMemory_Modify
  7011  1305  0008               	return
  7012  1306                     __end_of_setLog_Code:	
  7013                           
  7014                           	psect	text25
  7015  1E6B                     __ptext25:	
  7016 ;; *************** function _setMemory_LoopSave *****************
  7017 ;; Defined at:
  7018 ;;		line 1070 in file "../src/MCU_B1.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  command         1    wreg     unsigned char 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  command         1    1[BANK0 ] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;		None               void
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;Total ram usage:        2 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    5
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_setLog_Code
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function _setMemory_LoopSave
  7048  1E6B                     _setMemory_LoopSave:	
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7052                           ;setMemory_LoopSave@command stored from wreg
  7053  1E6B  0020               	movlb	0	; select bank0
  7054  1E6C  00A1               	movwf	setMemory_LoopSave@command
  7055                           
  7056                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7057  1E6D  0821               	movf	setMemory_LoopSave@command,w
  7058  1E6E  3A01               	xorlw	1
  7059  1E6F  3000               	movlw	0
  7060  1E70  1903               	skipnz
  7061  1E71  3001               	movlw	1
  7062  1E72  00A0               	movwf	??_setMemory_LoopSave
  7063  1E73  0DA0               	rlf	??_setMemory_LoopSave,f
  7064  1E74  0DA0               	rlf	??_setMemory_LoopSave,f
  7065  1E75  0023               	movlb	3	; select bank3
  7066  1E76  0862               	movf	(_Memory^(0+384)+36),w
  7067  1E77  0020               	movlb	0	; select bank0
  7068  1E78  0620               	xorwf	??_setMemory_LoopSave,w
  7069  1E79  39FB               	andlw	-5
  7070  1E7A  0620               	xorwf	??_setMemory_LoopSave,w
  7071  1E7B  0023               	movlb	3	; select bank3
  7072  1E7C  00E2               	movwf	(_Memory^(0+384)+36)
  7073  1E7D  0008               	return
  7074  1E7E                     __end_of_setMemory_LoopSave:	
  7075                           
  7076                           	psect	text26
  7077  09A8                     __ptext26:	
  7078 ;; *************** function _setControl_Lights_Table *****************
  7079 ;; Defined at:
  7080 ;;		line 302 in file "../src/RF_Control_B1.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;		None               void
  7087 ;; Registers used:
  7088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:   11
  7101 ;; This function calls:
  7102 ;;		_setBuz
  7103 ;;		_setDimmerLights_ErrorClose
  7104 ;;		_setProductData
  7105 ;;		_setRFSW_AdjControl
  7106 ;;		_setRFSW_Control
  7107 ;;		_setTxData
  7108 ;; This function is called by:
  7109 ;;		_getRxData
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           
  7114                           ;psect for function _setControl_Lights_Table
  7115  09A8                     _setControl_Lights_Table:	
  7116                           
  7117                           ;RF_Control_B1.c: 303: switch (RF_Data[15]) {
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7121  09A8  29EB               	goto	l8762
  7122  09A9                     l8750:	
  7123                           ;RF_Control_B1.c: 304: case 0x00:
  7124                           
  7125                           
  7126                           ;RF_Control_B1.c: 306: setDimmerLights_ErrorClose(255);
  7127  09A9  30FF               	movlw	255
  7128  09AA  3189  214A  3189   	fcall	_setDimmerLights_ErrorClose
  7129                           
  7130                           ;RF_Control_B1.c: 308: setProductData(9, 0);
  7131  09AD  0020               	movlb	0	; select bank0
  7132  09AE  01E2               	clrf	setProductData@value
  7133  09AF  3009               	movlw	9
  7134  09B0  319D  255F  3189   	fcall	_setProductData
  7135                           
  7136                           ;RF_Control_B1.c: 309: setProductData(11, 0);
  7137  09B3  0020               	movlb	0	; select bank0
  7138  09B4  01E2               	clrf	setProductData@value
  7139  09B5  300B               	movlw	11
  7140  09B6  319D  255F  3189   	fcall	_setProductData
  7141                           
  7142                           ;RF_Control_B1.c: 310: setProductData(15, 0);
  7143  09B9  0020               	movlb	0	; select bank0
  7144  09BA  01E2               	clrf	setProductData@value
  7145  09BB  300F               	movlw	15
  7146  09BC  319D  255F  3189   	fcall	_setProductData
  7147                           
  7148                           ;RF_Control_B1.c: 311: setProductData(17, 0);
  7149  09BF  0020               	movlb	0	; select bank0
  7150  09C0  01E2               	clrf	setProductData@value
  7151  09C1  3011               	movlw	17
  7152  09C2  319D  255F  3189   	fcall	_setProductData
  7153                           
  7154                           ;RF_Control_B1.c: 312: setBuz(1, 100);
  7155  09C5  3064               	movlw	100
  7156  09C6  0020               	movlb	0	; select bank0
  7157  09C7  00A9               	movwf	setBuz@time
  7158  09C8  3000               	movlw	0
  7159  09C9  00AA               	movwf	setBuz@time+1
  7160  09CA  3001               	movlw	1
  7161  09CB  3197  27A7         	fcall	_setBuz
  7162                           
  7163                           ;RF_Control_B1.c: 314: break;
  7164  09CD  0008               	return
  7165  09CE                     l8754:	
  7166                           ;RF_Control_B1.c: 315: case 0x20:
  7167                           
  7168                           
  7169                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7170  09CE  0020               	movlb	0	; select bank0
  7171  09CF  01E2               	clrf	setProductData@value
  7172  09D0  3009               	movlw	9
  7173  09D1  319D  255F  3189   	fcall	_setProductData
  7174                           
  7175                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7176  09D4  0020               	movlb	0	; select bank0
  7177  09D5  01E2               	clrf	setProductData@value
  7178  09D6  300B               	movlw	11
  7179  09D7  319D  255F  3189   	fcall	_setProductData
  7180                           
  7181                           ;RF_Control_B1.c: 318: setProductData(17, 0);
  7182  09DA  0020               	movlb	0	; select bank0
  7183  09DB  01E2               	clrf	setProductData@value
  7184  09DC  3011               	movlw	17
  7185  09DD  319D  255F  3189   	fcall	_setProductData
  7186                           
  7187                           ;RF_Control_B1.c: 319: setTxData();
  7188  09E0  318E  260C         	fcall	_setTxData
  7189                           
  7190                           ;RF_Control_B1.c: 320: break;
  7191  09E2  0008               	return
  7192  09E3                     l8756:	
  7193                           ;RF_Control_B1.c: 321: case 0x01:
  7194                           
  7195                           
  7196                           ;RF_Control_B1.c: 323: setRFSW_Control(1);
  7197  09E3  3001               	movlw	1
  7198  09E4  3195  25B7         	fcall	_setRFSW_Control
  7199                           
  7200                           ;RF_Control_B1.c: 335: break;
  7201                           
  7202                           ;RF_Control_B1.c: 331: case 0x03:
  7203                           
  7204                           ;RF_Control_B1.c: 330: break;
  7205                           
  7206                           ;RF_Control_B1.c: 326: case 0x02:
  7207                           
  7208                           ;RF_Control_B1.c: 325: break;
  7209  09E6  0008               	return
  7210  09E7                     l8758:	
  7211                           ;RF_Control_B1.c: 336: case 0x11:
  7212                           
  7213                           
  7214                           ;RF_Control_B1.c: 339: setRFSW_AdjControl(1);
  7215  09E7  3001               	movlw	1
  7216  09E8  3194  2454         	fcall	_setRFSW_AdjControl
  7217                           
  7218                           ;RF_Control_B1.c: 357: }
  7219                           
  7220                           ;RF_Control_B1.c: 356: break;
  7221                           
  7222                           ;RF_Control_B1.c: 350: case 0x31:
  7223                           
  7224                           ;RF_Control_B1.c: 349: break;
  7225                           
  7226                           ;RF_Control_B1.c: 343: case 0x21:
  7227                           
  7228                           ;RF_Control_B1.c: 342: break;
  7229  09EA  0008               	return
  7230  09EB                     l8762:	
  7231  09EB  0023               	movlb	3	; select bank3
  7232  09EC  082F               	movf	(_RF_Data^(0+384)+15),w
  7233                           
  7234                           ; Switch size 1, requested type "space"
  7235                           ; Number of cases is 8, Range of values is 0 to 49
  7236                           ; switch strategies available:
  7237                           ; Name         Instructions Cycles
  7238                           ; simple_byte           25    13 (average)
  7239                           ; direct_byte          106     6 (fixed)
  7240                           ; jumptable            260     6 (fixed)
  7241                           ;	Chosen strategy is simple_byte
  7242  09ED  3A00               	xorlw	0	; case 0
  7243  09EE  1903               	skipnz
  7244  09EF  29A9               	goto	l8750
  7245  09F0  3A01               	xorlw	1	; case 1
  7246  09F1  1903               	skipnz
  7247  09F2  29E3               	goto	l8756
  7248  09F3  3A03               	xorlw	3	; case 2
  7249  09F4  1903               	skipnz
  7250  09F5  2A06               	goto	l2115
  7251  09F6  3A01               	xorlw	1	; case 3
  7252  09F7  1903               	skipnz
  7253  09F8  2A06               	goto	l2115
  7254  09F9  3A12               	xorlw	18	; case 17
  7255  09FA  1903               	skipnz
  7256  09FB  29E7               	goto	l8758
  7257  09FC  3A31               	xorlw	49	; case 32
  7258  09FD  1903               	skipnz
  7259  09FE  29CE               	goto	l8754
  7260  09FF  3A01               	xorlw	1	; case 33
  7261  0A00  1903               	skipnz
  7262  0A01  2A06               	goto	l2115
  7263  0A02  3A10               	xorlw	16	; case 49
  7264  0A03  1903               	skipnz
  7265  0A04  2A06               	goto	l2115
  7266  0A05  2A06               	goto	l2115
  7267  0A06                     l2115:	
  7268  0A06  0008               	return
  7269  0A07                     __end_of_setControl_Lights_Table:	
  7270                           
  7271                           	psect	text27
  7272  15B7                     __ptext27:	
  7273 ;; *************** function _setRFSW_Control *****************
  7274 ;; Defined at:
  7275 ;;		line 384 in file "../src/RF_Control_B1.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  sw              1    wreg     unsigned char 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  sw              1   77[BANK0 ] unsigned char 
  7280 ;;  status          1   76[BANK0 ] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;Total ram usage:        3 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    9
  7297 ;; This function calls:
  7298 ;;		_getDelayOff_GO
  7299 ;;		_getDimmerLights_Status
  7300 ;;		_setBuz
  7301 ;;		_setDelayOff_GO
  7302 ;;		_setDimmerLights_SwOff
  7303 ;;		_setDimmerLights_SwOn
  7304 ;;		_setRF_DimmerLights
  7305 ;;		_setTxData
  7306 ;; This function is called by:
  7307 ;;		_setControl_Lights_Table
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           
  7312                           ;psect for function _setRFSW_Control
  7313  15B7                     _setRFSW_Control:	
  7314                           
  7315                           ;incstack = 0
  7316                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7317                           ;setRFSW_Control@sw stored from wreg
  7318  15B7  0020               	movlb	0	; select bank0
  7319  15B8  00ED               	movwf	setRFSW_Control@sw
  7320                           
  7321                           ;RF_Control_B1.c: 385: char status = 0;
  7322  15B9  01EC               	clrf	setRFSW_Control@status
  7323                           
  7324                           ;RF_Control_B1.c: 388: if (RF_Data[16] == 0x80) {
  7325  15BA  0023               	movlb	3	; select bank3
  7326  15BB  0830               	movf	(_RF_Data^(0+384)+16),w
  7327  15BC  3A80               	xorlw	128
  7328  15BD  1D03               	skipz
  7329  15BE  2DEA               	goto	l8594
  7330                           
  7331                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 1, RF_Data[17]);
  7332  15BF  0020               	movlb	0	; select bank0
  7333  15C0  01E6               	clrf	setDelayOff_GO@command
  7334  15C1  0AE6               	incf	setDelayOff_GO@command,f
  7335  15C2  0023               	movlb	3	; select bank3
  7336  15C3  0831               	movf	(_RF_Data^(0+384)+17),w
  7337  15C4  0020               	movlb	0	; select bank0
  7338  15C5  00EB               	movwf	??_setRFSW_Control
  7339  15C6  086B               	movf	??_setRFSW_Control,w
  7340  15C7  00E7               	movwf	setDelayOff_GO@value
  7341  15C8  086D               	movf	setRFSW_Control@sw,w
  7342  15C9  3196  26A8  3195   	fcall	_setDelayOff_GO
  7343                           
  7344                           ;RF_Control_B1.c: 390: if (getDimmerLights_Status(sw) == 1) {
  7345  15CC  0020               	movlb	0	; select bank0
  7346  15CD  086D               	movf	setRFSW_Control@sw,w
  7347  15CE  319D  25B9  3195   	fcall	_getDimmerLights_Status
  7348  15D1  3A01               	xorlw	1
  7349  15D2  1D03               	skipz
  7350  15D3  2DF9               	goto	l8598
  7351                           
  7352                           ;RF_Control_B1.c: 391: setBuz(1, 100);
  7353  15D4  3064               	movlw	100
  7354  15D5  0020               	movlb	0	; select bank0
  7355  15D6  00A9               	movwf	setBuz@time
  7356  15D7  3000               	movlw	0
  7357  15D8  00AA               	movwf	setBuz@time+1
  7358  15D9  3001               	movlw	1
  7359  15DA  3197  27A7  3195   	fcall	_setBuz
  7360                           
  7361                           ;RF_Control_B1.c: 392: status = 1;
  7362  15DD  0020               	movlb	0	; select bank0
  7363  15DE  01EC               	clrf	setRFSW_Control@status
  7364  15DF  0AEC               	incf	setRFSW_Control@status,f
  7365                           
  7366                           ;RF_Control_B1.c: 393: setRF_DimmerLights(sw, 1);
  7367  15E0  01E6               	clrf	setRF_DimmerLights@on
  7368  15E1  0AE6               	incf	setRF_DimmerLights@on,f
  7369  15E2  086D               	movf	setRFSW_Control@sw,w
  7370  15E3  3188  2039  3195   	fcall	_setRF_DimmerLights
  7371                           
  7372                           ;RF_Control_B1.c: 394: setTxData();
  7373  15E6  318E  260C  3195   	fcall	_setTxData
  7374                           
  7375                           ;RF_Control_B1.c: 396: }
  7376                           ;RF_Control_B1.c: 397: } else {
  7377  15E9  2DF9               	goto	l8598
  7378  15EA                     l8594:	
  7379                           
  7380                           ;RF_Control_B1.c: 399: if (getDelayOff_GO(sw) == 1) {
  7381  15EA  0020               	movlb	0	; select bank0
  7382  15EB  086D               	movf	setRFSW_Control@sw,w
  7383  15EC  319D  2599  3195   	fcall	_getDelayOff_GO
  7384  15EF  3A01               	xorlw	1
  7385  15F0  1D03               	skipz
  7386  15F1  2DF9               	goto	l8598
  7387                           
  7388                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 0, 0);
  7389  15F2  0020               	movlb	0	; select bank0
  7390  15F3  01E6               	clrf	setDelayOff_GO@command
  7391  15F4  01E7               	clrf	setDelayOff_GO@value
  7392  15F5  086D               	movf	setRFSW_Control@sw,w
  7393  15F6  3196  26A8  3195   	fcall	_setDelayOff_GO
  7394  15F9                     l8598:	
  7395                           
  7396                           ;RF_Control_B1.c: 401: }
  7397                           ;RF_Control_B1.c: 403: }
  7398                           ;RF_Control_B1.c: 404: if (status == 0) {
  7399  15F9  0020               	movlb	0	; select bank0
  7400  15FA  08EC               	movf	setRFSW_Control@status,f
  7401  15FB  1D03               	skipz
  7402  15FC  0008               	return
  7403                           
  7404                           ;RF_Control_B1.c: 406: setDimmerLights_SwOn(sw);
  7405  15FD  086D               	movf	setRFSW_Control@sw,w
  7406  15FE  3188  2000  3195   	fcall	_setDimmerLights_SwOn
  7407                           
  7408                           ;RF_Control_B1.c: 407: setDimmerLights_SwOff(sw);
  7409  1601  0020               	movlb	0	; select bank0
  7410  1602  086D               	movf	setRFSW_Control@sw,w
  7411  1603  3195  2568         	fcall	_setDimmerLights_SwOff
  7412  1605  0008               	return
  7413  1606                     __end_of_setRFSW_Control:	
  7414                           
  7415                           	psect	text28
  7416  0800                     __ptext28:	
  7417 ;; *************** function _setDimmerLights_SwOn *****************
  7418 ;; Defined at:
  7419 ;;		line 405 in file "../src/Dimmer_B1.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  sw              1    wreg     unsigned char 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  sw              1   13[BANK0 ] unsigned char 
  7424 ;;  idle            1   14[BANK0 ] unsigned char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;		None               void
  7427 ;; Registers used:
  7428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;Total ram usage:        2 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    7
  7441 ;; This function calls:
  7442 ;;		_DimmerLightsPointSelect
  7443 ;;		_setBuz
  7444 ;; This function is called by:
  7445 ;;		_setRFSW_Control
  7446 ;;		_setSw_Main
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           
  7451                           ;psect for function _setDimmerLights_SwOn
  7452  0800                     _setDimmerLights_SwOn:	
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7456                           ;setDimmerLights_SwOn@sw stored from wreg
  7457  0800  0020               	movlb	0	; select bank0
  7458  0801  00AD               	movwf	setDimmerLights_SwOn@sw
  7459                           
  7460                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7461  0802  082D               	movf	setDimmerLights_SwOn@sw,w
  7462  0803  319C  24D4  3188   	fcall	_DimmerLightsPointSelect
  7463                           
  7464                           ;Dimmer_B1.c: 407: char idle = 0;
  7465  0806  0020               	movlb	0	; select bank0
  7466  0807  01AE               	clrf	setDimmerLights_SwOn@idle
  7467                           
  7468                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7469  0808  08AE               	movf	setDimmerLights_SwOn@idle,f
  7470  0809  1D03               	skipz
  7471  080A  0008               	return
  7472                           
  7473                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7474  080B  086F               	movf	_DimmerLights,w
  7475  080C  3E0B               	addlw	11
  7476  080D  0086               	movwf	6
  7477  080E  3001               	movlw	1	; select bank2/3
  7478  080F  0087               	movwf	7
  7479  0810  1481               	bsf	1,1
  7480                           
  7481                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7482  0811  086F               	movf	_DimmerLights,w
  7483  0812  3E02               	addlw	2
  7484  0813  0086               	movwf	6
  7485  0814  3001               	movlw	1	; select bank2/3
  7486  0815  0087               	movwf	7
  7487  0816  1881               	btfsc	1,1
  7488  0817  282B               	goto	l8392
  7489                           
  7490                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7491  0818  086F               	movf	_DimmerLights,w
  7492  0819  3E02               	addlw	2
  7493  081A  0086               	movwf	6
  7494  081B  3001               	movlw	1	; select bank2/3
  7495  081C  0087               	movwf	7
  7496  081D  1481               	bsf	1,1
  7497                           
  7498                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7499  081E  086F               	movf	_DimmerLights,w
  7500  081F  3E0A               	addlw	10
  7501  0820  0086               	movwf	6
  7502  0821  3001               	movlw	1	; select bank2/3
  7503  0822  0087               	movwf	7
  7504  0823  1481               	bsf	1,1
  7505                           
  7506                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7507  0824  086F               	movf	_DimmerLights,w
  7508  0825  3E0A               	addlw	10
  7509  0826  0086               	movwf	6
  7510  0827  3001               	movlw	1	; select bank2/3
  7511  0828  0087               	movwf	7
  7512  0829  1401               	bsf	1,0
  7513                           
  7514                           ;Dimmer_B1.c: 442: } else {
  7515  082A  2831               	goto	l8394
  7516  082B                     l8392:	
  7517                           
  7518                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7519  082B  086F               	movf	_DimmerLights,w
  7520  082C  3E02               	addlw	2
  7521  082D  0086               	movwf	6
  7522  082E  3001               	movlw	1	; select bank2/3
  7523  082F  0087               	movwf	7
  7524  0830  1081               	bcf	1,1
  7525  0831                     l8394:	
  7526                           
  7527                           ;Dimmer_B1.c: 444: }
  7528                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7529  0831  3064               	movlw	100
  7530  0832  00A9               	movwf	setBuz@time
  7531  0833  3000               	movlw	0
  7532  0834  00AA               	movwf	setBuz@time+1
  7533  0835  3001               	movlw	1
  7534  0836  3197  27A7         	fcall	_setBuz
  7535  0838  0008               	return
  7536  0839                     __end_of_setDimmerLights_SwOn:	
  7537                           
  7538                           	psect	text29
  7539  1454                     __ptext29:	
  7540 ;; *************** function _setRFSW_AdjControl *****************
  7541 ;; Defined at:
  7542 ;;		line 413 in file "../src/RF_Control_B1.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  sw              1    wreg     unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  sw              1   75[BANK0 ] unsigned char 
  7547 ;;  status          1   74[BANK0 ] unsigned char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;		None               void
  7550 ;; Registers used:
  7551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;Total ram usage:        4 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:   10
  7564 ;; This function calls:
  7565 ;;		_getDimmerLights_Status
  7566 ;;		_setMemory_Modify
  7567 ;;		_setProductData
  7568 ;;		_setRF_DimmerValue
  7569 ;;		_setTxData
  7570 ;; This function is called by:
  7571 ;;		_setControl_Lights_Table
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function _setRFSW_AdjControl
  7577  1454                     _setRFSW_AdjControl:	
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7581                           ;setRFSW_AdjControl@sw stored from wreg
  7582  1454  0020               	movlb	0	; select bank0
  7583  1455  00EB               	movwf	setRFSW_AdjControl@sw
  7584                           
  7585                           ;RF_Control_B1.c: 414: char status = 0;
  7586  1456  01EA               	clrf	setRFSW_AdjControl@status
  7587                           
  7588                           ;RF_Control_B1.c: 416: status = getDimmerLights_Status(sw);
  7589  1457  086B               	movf	setRFSW_AdjControl@sw,w
  7590  1458  319D  25B9  3194   	fcall	_getDimmerLights_Status
  7591  145B  0020               	movlb	0	; select bank0
  7592  145C  00E8               	movwf	??_setRFSW_AdjControl
  7593  145D  0868               	movf	??_setRFSW_AdjControl,w
  7594  145E  00EA               	movwf	setRFSW_AdjControl@status
  7595                           
  7596                           ;RF_Control_B1.c: 419: if (status == 1) {
  7597  145F  086A               	movf	setRFSW_AdjControl@status,w
  7598  1460  3A01               	xorlw	1
  7599  1461  1D03               	skipz
  7600  1462  2C6D               	goto	l8612
  7601                           
  7602                           ;RF_Control_B1.c: 420: setMemory_Modify(1);
  7603  1463  3001               	movlw	1
  7604  1464  319E  2658  3194   	fcall	_setMemory_Modify
  7605                           
  7606                           ;RF_Control_B1.c: 421: setRF_DimmerValue(sw);
  7607  1467  0020               	movlb	0	; select bank0
  7608  1468  086B               	movf	setRFSW_AdjControl@sw,w
  7609  1469  3192  220B  3194   	fcall	_setRF_DimmerValue
  7610                           
  7611                           ;RF_Control_B1.c: 422: } else {
  7612  146C  2C7E               	goto	l2127
  7613  146D                     l8612:	
  7614                           
  7615                           ;RF_Control_B1.c: 423: setProductData(9, product->Data[20 + sw]);
  7616  146D  0020               	movlb	0	; select bank0
  7617  146E  086B               	movf	setRFSW_AdjControl@sw,w
  7618  146F  3E14               	addlw	20
  7619  1470  0779               	addwf	_product,w
  7620  1471  00E8               	movwf	??_setRFSW_AdjControl
  7621  1472  0868               	movf	??_setRFSW_AdjControl,w
  7622  1473  0086               	movwf	6
  7623  1474  3002               	movlw	2	; select bank4/5
  7624  1475  0087               	movwf	7
  7625  1476  0801               	movf	1,w
  7626  1477  00E9               	movwf	??_setRFSW_AdjControl+1
  7627  1478  0869               	movf	??_setRFSW_AdjControl+1,w
  7628  1479  00E2               	movwf	setProductData@value
  7629  147A  3009               	movlw	9
  7630  147B  319D  255F  3194   	fcall	_setProductData
  7631  147E                     l2127:	
  7632                           
  7633                           ;RF_Control_B1.c: 424: }
  7634                           ;RF_Control_B1.c: 425: setProductData(17, product->Data[26 + sw]);
  7635  147E  0020               	movlb	0	; select bank0
  7636  147F  086B               	movf	setRFSW_AdjControl@sw,w
  7637  1480  3E1A               	addlw	26
  7638  1481  0779               	addwf	_product,w
  7639  1482  00E8               	movwf	??_setRFSW_AdjControl
  7640  1483  0868               	movf	??_setRFSW_AdjControl,w
  7641  1484  0086               	movwf	6
  7642  1485  3002               	movlw	2	; select bank4/5
  7643  1486  0087               	movwf	7
  7644  1487  0801               	movf	1,w
  7645  1488  00E9               	movwf	??_setRFSW_AdjControl+1
  7646  1489  0869               	movf	??_setRFSW_AdjControl+1,w
  7647  148A  00E2               	movwf	setProductData@value
  7648  148B  3011               	movlw	17
  7649  148C  319D  255F  3194   	fcall	_setProductData
  7650                           
  7651                           ;RF_Control_B1.c: 426: setTxData();
  7652  148F  318E  260C         	fcall	_setTxData
  7653  1491  0008               	return
  7654  1492                     __end_of_setRFSW_AdjControl:	
  7655                           
  7656                           	psect	text30
  7657  120B                     __ptext30:	
  7658 ;; *************** function _setRF_DimmerValue *****************
  7659 ;; Defined at:
  7660 ;;		line 431 in file "../src/RF_Control_B1.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;  lights          1    wreg     unsigned char 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;  lights          1   71[BANK0 ] unsigned char 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;		None               void
  7667 ;; Registers used:
  7668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7678 ;;Total ram usage:        2 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    9
  7681 ;; This function calls:
  7682 ;;		_setDimmerLights_AdjRF
  7683 ;;		_setProductData
  7684 ;; This function is called by:
  7685 ;;		_setRFSW_AdjControl
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function _setRF_DimmerValue
  7691  120B                     _setRF_DimmerValue:	
  7692                           
  7693                           ;incstack = 0
  7694                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7695                           ;setRF_DimmerValue@lights stored from wreg
  7696  120B  0020               	movlb	0	; select bank0
  7697  120C  00E7               	movwf	setRF_DimmerValue@lights
  7698                           
  7699                           ;RF_Control_B1.c: 432: if (RF_Data[9] > 0x64) {
  7700  120D  3065               	movlw	101
  7701  120E  0023               	movlb	3	; select bank3
  7702  120F  0229               	subwf	(_RF_Data^(0+384)+9),w
  7703  1210  1C03               	skipc
  7704  1211  2A18               	goto	l8488
  7705                           
  7706                           ;RF_Control_B1.c: 433: RF_Data[9] = 0x64;
  7707  1212  3064               	movlw	100
  7708  1213  0020               	movlb	0	; select bank0
  7709  1214  00E6               	movwf	??_setRF_DimmerValue
  7710  1215  0866               	movf	??_setRF_DimmerValue,w
  7711  1216  0023               	movlb	3	; select bank3
  7712  1217  00A9               	movwf	(_RF_Data^(0+384)+9)
  7713  1218                     l8488:	
  7714                           
  7715                           ;RF_Control_B1.c: 434: }
  7716                           ;RF_Control_B1.c: 435: setProductData(9, RF_Data[9]);
  7717  1218  0829               	movf	(_RF_Data^(0+384)+9),w
  7718  1219  0020               	movlb	0	; select bank0
  7719  121A  00E6               	movwf	??_setRF_DimmerValue
  7720  121B  0866               	movf	??_setRF_DimmerValue,w
  7721  121C  00E2               	movwf	setProductData@value
  7722  121D  3009               	movlw	9
  7723  121E  319D  255F  3192   	fcall	_setProductData
  7724                           
  7725                           ;RF_Control_B1.c: 436: setProductData(11, lights);
  7726  1221  0020               	movlb	0	; select bank0
  7727  1222  0867               	movf	setRF_DimmerValue@lights,w
  7728  1223  00E6               	movwf	??_setRF_DimmerValue
  7729  1224  0866               	movf	??_setRF_DimmerValue,w
  7730  1225  00E2               	movwf	setProductData@value
  7731  1226  300B               	movlw	11
  7732  1227  319D  255F  3192   	fcall	_setProductData
  7733                           
  7734                           ;RF_Control_B1.c: 437: setProductData((20 + lights), RF_Data[9]);
  7735  122A  0023               	movlb	3	; select bank3
  7736  122B  0829               	movf	(_RF_Data^(0+384)+9),w
  7737  122C  0020               	movlb	0	; select bank0
  7738  122D  00E6               	movwf	??_setRF_DimmerValue
  7739  122E  0866               	movf	??_setRF_DimmerValue,w
  7740  122F  00E2               	movwf	setProductData@value
  7741  1230  0867               	movf	setRF_DimmerValue@lights,w
  7742  1231  3E14               	addlw	20
  7743  1232  319D  255F  3192   	fcall	_setProductData
  7744                           
  7745                           ;RF_Control_B1.c: 438: setDimmerLights_AdjRF(lights);
  7746  1235  0020               	movlb	0	; select bank0
  7747  1236  0867               	movf	setRF_DimmerValue@lights,w
  7748  1237  3190  20C9         	fcall	_setDimmerLights_AdjRF
  7749  1239  0008               	return
  7750  123A                     __end_of_setRF_DimmerValue:	
  7751                           
  7752                           	psect	text31
  7753  10C9                     __ptext31:	
  7754 ;; *************** function _setDimmerLights_AdjRF *****************
  7755 ;; Defined at:
  7756 ;;		line 903 in file "../src/Dimmer_B1.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  lights          1    wreg     unsigned char 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  lights          1   67[BANK0 ] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;		None               void
  7763 ;; Registers used:
  7764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;Total ram usage:        2 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    8
  7777 ;; This function calls:
  7778 ;;		_DimmerLightsPointSelect
  7779 ;;		_getPercentValue
  7780 ;; This function is called by:
  7781 ;;		_setRF_DimmerValue
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function _setDimmerLights_AdjRF
  7787  10C9                     _setDimmerLights_AdjRF:	
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7791                           ;setDimmerLights_AdjRF@lights stored from wreg
  7792  10C9  0020               	movlb	0	; select bank0
  7793  10CA  00E3               	movwf	setDimmerLights_AdjRF@lights
  7794                           
  7795                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7796  10CB  0863               	movf	setDimmerLights_AdjRF@lights,w
  7797  10CC  319C  24D4  3190   	fcall	_DimmerLightsPointSelect
  7798                           
  7799                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7800  10CF  0020               	movlb	0	; select bank0
  7801  10D0  086F               	movf	_DimmerLights,w
  7802  10D1  3E02               	addlw	2
  7803  10D2  0086               	movwf	6
  7804  10D3  3001               	movlw	1	; select bank2/3
  7805  10D4  0087               	movwf	7
  7806  10D5  1401               	bsf	1,0
  7807                           
  7808                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7809  10D6  0A6F               	incf	_DimmerLights,w
  7810  10D7  0086               	movwf	6
  7811  10D8  3001               	movlw	1	; select bank2/3
  7812  10D9  0087               	movwf	7
  7813  10DA  1681               	bsf	1,5
  7814                           
  7815                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7816  10DB  0879               	movf	_product,w
  7817  10DC  3E09               	addlw	9
  7818  10DD  0086               	movwf	6
  7819  10DE  3002               	movlw	2	; select bank4/5
  7820  10DF  0087               	movwf	7
  7821  10E0  0801               	movf	1,w
  7822  10E1  318B  2331         	fcall	_getPercentValue
  7823  10E3  0020               	movlb	0	; select bank0
  7824  10E4  00E2               	movwf	??_setDimmerLights_AdjRF
  7825  10E5  086F               	movf	_DimmerLights,w
  7826  10E6  3E06               	addlw	6
  7827  10E7  0086               	movwf	6
  7828  10E8  3001               	movlw	1	; select bank2/3
  7829  10E9  0087               	movwf	7
  7830  10EA  0862               	movf	??_setDimmerLights_AdjRF,w
  7831  10EB  0081               	movwf	1
  7832  10EC  0008               	return
  7833  10ED                     __end_of_setDimmerLights_AdjRF:	
  7834                           
  7835                           	psect	text32
  7836  0B31                     __ptext32:	
  7837 ;; *************** function _getPercentValue *****************
  7838 ;; Defined at:
  7839 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  value           1    wreg     unsigned char 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  value           1   62[BANK0 ] unsigned char 
  7844 ;;  i               3   63[BANK0 ] float 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      unsigned char 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;Total ram usage:        6 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    7
  7861 ;; This function calls:
  7862 ;;		___awtoft
  7863 ;;		___ftadd
  7864 ;;		___ftdiv
  7865 ;;		___ftmul
  7866 ;;		___ftneg
  7867 ;;		___fttol
  7868 ;; This function is called by:
  7869 ;;		_setDimmerLights_AdjRF
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           
  7874                           ;psect for function _getPercentValue
  7875  0B31                     _getPercentValue:	
  7876                           
  7877                           ;incstack = 0
  7878                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7879                           ;getPercentValue@value stored from wreg
  7880  0B31  0020               	movlb	0	; select bank0
  7881  0B32  00DE               	movwf	getPercentValue@value
  7882                           
  7883                           ;Dimmer_B1.c: 1026: float i = ((char)(75F*0.8)) - ((char)(15*0.8));
  7884  0B33  3000               	movlw	0
  7885  0B34  00DF               	movwf	getPercentValue@i
  7886  0B35  3040               	movlw	64
  7887  0B36  00E0               	movwf	getPercentValue@i+1
  7888  0B37  3042               	movlw	66
  7889  0B38  00E1               	movwf	getPercentValue@i+2
  7890                           
  7891                           ;Dimmer_B1.c: 1027: i /= 100;
  7892  0B39  3000               	movlw	0
  7893  0B3A  00AE               	movwf	___ftdiv@f2
  7894  0B3B  30C8               	movlw	200
  7895  0B3C  00AF               	movwf	___ftdiv@f2+1
  7896  0B3D  3042               	movlw	66
  7897  0B3E  00B0               	movwf	___ftdiv@f2+2
  7898  0B3F  085F               	movf	getPercentValue@i,w
  7899  0B40  00B1               	movwf	___ftdiv@f1
  7900  0B41  0860               	movf	getPercentValue@i+1,w
  7901  0B42  00B2               	movwf	___ftdiv@f1+1
  7902  0B43  0861               	movf	getPercentValue@i+2,w
  7903  0B44  00B3               	movwf	___ftdiv@f1+2
  7904  0B45  318E  26A7  318B   	fcall	___ftdiv
  7905  0B48  0020               	movlb	0	; select bank0
  7906  0B49  082E               	movf	?___ftdiv,w
  7907  0B4A  00DF               	movwf	getPercentValue@i
  7908  0B4B  082F               	movf	?___ftdiv+1,w
  7909  0B4C  00E0               	movwf	getPercentValue@i+1
  7910  0B4D  0830               	movf	?___ftdiv+2,w
  7911  0B4E  00E1               	movwf	getPercentValue@i+2
  7912                           
  7913                           ;Dimmer_B1.c: 1029: return (char) (((char)(75F*0.8)) - ((100 - value) * i));
  7914  0B4F  085E               	movf	getPercentValue@value,w
  7915  0B50  00DC               	movwf	??_getPercentValue
  7916  0B51  01DD               	clrf	??_getPercentValue+1
  7917  0B52  09DC               	comf	??_getPercentValue,f
  7918  0B53  09DD               	comf	??_getPercentValue+1,f
  7919  0B54  0ADC               	incf	??_getPercentValue,f
  7920  0B55  1903               	skipnz
  7921  0B56  0ADD               	incf	??_getPercentValue+1,f
  7922  0B57  085C               	movf	??_getPercentValue,w
  7923  0B58  3E64               	addlw	100
  7924  0B59  00A8               	movwf	___awtoft@c
  7925  0B5A  3000               	movlw	0
  7926  0B5B  3D5D               	addwfc	??_getPercentValue+1,w
  7927  0B5C  00A9               	movwf	___awtoft@c+1
  7928  0B5D  3190  2084  318B   	fcall	___awtoft
  7929  0B60  0020               	movlb	0	; select bank0
  7930  0B61  0828               	movf	?___awtoft,w
  7931  0B62  00B1               	movwf	___ftmul@f2
  7932  0B63  0829               	movf	?___awtoft+1,w
  7933  0B64  00B2               	movwf	___ftmul@f2+1
  7934  0B65  082A               	movf	?___awtoft+2,w
  7935  0B66  00B3               	movwf	___ftmul@f2+2
  7936  0B67  085F               	movf	getPercentValue@i,w
  7937  0B68  00AE               	movwf	___ftmul@f1
  7938  0B69  0860               	movf	getPercentValue@i+1,w
  7939  0B6A  00AF               	movwf	___ftmul@f1+1
  7940  0B6B  0861               	movf	getPercentValue@i+2,w
  7941  0B6C  00B0               	movwf	___ftmul@f1+2
  7942  0B6D  3187  2708  318B   	fcall	___ftmul
  7943  0B70  0020               	movlb	0	; select bank0
  7944  0B71  082E               	movf	?___ftmul,w
  7945  0B72  00BE               	movwf	___ftneg@f1
  7946  0B73  082F               	movf	?___ftmul+1,w
  7947  0B74  00BF               	movwf	___ftneg@f1+1
  7948  0B75  0830               	movf	?___ftmul+2,w
  7949  0B76  00C0               	movwf	___ftneg@f1+2
  7950  0B77  319C  2485  318B   	fcall	___ftneg
  7951  0B7A  0020               	movlb	0	; select bank0
  7952  0B7B  083E               	movf	?___ftneg,w
  7953  0B7C  00C4               	movwf	___ftadd@f2
  7954  0B7D  083F               	movf	?___ftneg+1,w
  7955  0B7E  00C5               	movwf	___ftadd@f2+1
  7956  0B7F  0840               	movf	?___ftneg+2,w
  7957  0B80  00C6               	movwf	___ftadd@f2+2
  7958  0B81  3000               	movlw	0
  7959  0B82  00C1               	movwf	___ftadd@f1
  7960  0B83  3070               	movlw	112
  7961  0B84  00C2               	movwf	___ftadd@f1+1
  7962  0B85  3042               	movlw	66
  7963  0B86  00C3               	movwf	___ftadd@f1+2
  7964  0B87  3184  245A  318B   	fcall	___ftadd
  7965  0B8A  0020               	movlb	0	; select bank0
  7966  0B8B  0841               	movf	?___ftadd,w
  7967  0B8C  00CE               	movwf	___fttol@f1
  7968  0B8D  0842               	movf	?___ftadd+1,w
  7969  0B8E  00CF               	movwf	___fttol@f1+1
  7970  0B8F  0843               	movf	?___ftadd+2,w
  7971  0B90  00D0               	movwf	___fttol@f1+2
  7972  0B91  318D  2585         	fcall	___fttol
  7973  0B93  0020               	movlb	0	; select bank0
  7974  0B94  084E               	movf	?___fttol,w
  7975  0B95  0008               	return
  7976  0B96                     __end_of_getPercentValue:	
  7977                           
  7978                           	psect	text33
  7979  0708                     __ptext33:	
  7980 ;; *************** function ___ftmul *****************
  7981 ;; Defined at:
  7982 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  f1              3   14[BANK0 ] float 
  7985 ;;  f2              3   17[BANK0 ] float 
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7988 ;;  sign            1   29[BANK0 ] unsigned char 
  7989 ;;  cntr            1   28[BANK0 ] unsigned char 
  7990 ;;  exp             1   24[BANK0 ] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  3   14[BANK0 ] float 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0, pclath, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8000 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;Total ram usage:       16 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    6
  8007 ;; This function calls:
  8008 ;;		___ftpack
  8009 ;; This function is called by:
  8010 ;;		_getPercentValue
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function ___ftmul
  8016  0708                     ___ftmul:	
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8020  0708  0020               	movlb	0	; select bank0
  8021  0709  082E               	movf	___ftmul@f1,w
  8022  070A  00B4               	movwf	??___ftmul
  8023  070B  082F               	movf	___ftmul@f1+1,w
  8024  070C  00B5               	movwf	??___ftmul+1
  8025  070D  0830               	movf	___ftmul@f1+2,w
  8026  070E  00B6               	movwf	??___ftmul+2
  8027  070F  1003               	clrc
  8028  0710  0D35               	rlf	??___ftmul+1,w
  8029  0711  0D36               	rlf	??___ftmul+2,w
  8030  0712  00B7               	movwf	??___ftmul+3
  8031  0713  0837               	movf	??___ftmul+3,w
  8032  0714  00B8               	movwf	___ftmul@exp
  8033  0715  08B8               	movf	___ftmul@exp,f
  8034  0716  1D03               	skipz
  8035  0717  2F1F               	goto	l8140
  8036  0718  3000               	movlw	0
  8037  0719  00AE               	movwf	?___ftmul
  8038  071A  3000               	movlw	0
  8039  071B  00AF               	movwf	?___ftmul+1
  8040  071C  3000               	movlw	0
  8041  071D  00B0               	movwf	?___ftmul+2
  8042  071E  0008               	return
  8043  071F                     l8140:	
  8044  071F  0831               	movf	___ftmul@f2,w
  8045  0720  00B4               	movwf	??___ftmul
  8046  0721  0832               	movf	___ftmul@f2+1,w
  8047  0722  00B5               	movwf	??___ftmul+1
  8048  0723  0833               	movf	___ftmul@f2+2,w
  8049  0724  00B6               	movwf	??___ftmul+2
  8050  0725  1003               	clrc
  8051  0726  0D35               	rlf	??___ftmul+1,w
  8052  0727  0D36               	rlf	??___ftmul+2,w
  8053  0728  00B7               	movwf	??___ftmul+3
  8054  0729  0837               	movf	??___ftmul+3,w
  8055  072A  00BD               	movwf	___ftmul@sign
  8056  072B  08BD               	movf	___ftmul@sign,f
  8057  072C  1D03               	skipz
  8058  072D  2F35               	goto	l8146
  8059  072E  3000               	movlw	0
  8060  072F  00AE               	movwf	?___ftmul
  8061  0730  3000               	movlw	0
  8062  0731  00AF               	movwf	?___ftmul+1
  8063  0732  3000               	movlw	0
  8064  0733  00B0               	movwf	?___ftmul+2
  8065  0734  0008               	return
  8066  0735                     l8146:	
  8067  0735  083D               	movf	___ftmul@sign,w
  8068  0736  3E7B               	addlw	123
  8069  0737  00B4               	movwf	??___ftmul
  8070  0738  0834               	movf	??___ftmul,w
  8071  0739  07B8               	addwf	___ftmul@exp,f
  8072  073A  082E               	movf	___ftmul@f1,w
  8073  073B  00B4               	movwf	??___ftmul
  8074  073C  082F               	movf	___ftmul@f1+1,w
  8075  073D  00B5               	movwf	??___ftmul+1
  8076  073E  0830               	movf	___ftmul@f1+2,w
  8077  073F  00B6               	movwf	??___ftmul+2
  8078  0740  3010               	movlw	16
  8079  0741                     u8505:	
  8080  0741  36B6               	lsrf	??___ftmul+2,f
  8081  0742  0CB5               	rrf	??___ftmul+1,f
  8082  0743  0CB4               	rrf	??___ftmul,f
  8083  0744  0B89               	decfsz	9,f
  8084  0745  2F41               	goto	u8505
  8085  0746  0834               	movf	??___ftmul,w
  8086  0747  00B7               	movwf	??___ftmul+3
  8087  0748  0837               	movf	??___ftmul+3,w
  8088  0749  00BD               	movwf	___ftmul@sign
  8089  074A  0831               	movf	___ftmul@f2,w
  8090  074B  00B4               	movwf	??___ftmul
  8091  074C  0832               	movf	___ftmul@f2+1,w
  8092  074D  00B5               	movwf	??___ftmul+1
  8093  074E  0833               	movf	___ftmul@f2+2,w
  8094  074F  00B6               	movwf	??___ftmul+2
  8095  0750  3010               	movlw	16
  8096  0751                     u8515:	
  8097  0751  36B6               	lsrf	??___ftmul+2,f
  8098  0752  0CB5               	rrf	??___ftmul+1,f
  8099  0753  0CB4               	rrf	??___ftmul,f
  8100  0754  0B89               	decfsz	9,f
  8101  0755  2F51               	goto	u8515
  8102  0756  0834               	movf	??___ftmul,w
  8103  0757  00B7               	movwf	??___ftmul+3
  8104  0758  0837               	movf	??___ftmul+3,w
  8105  0759  06BD               	xorwf	___ftmul@sign,f
  8106  075A  3080               	movlw	128
  8107  075B  00B4               	movwf	??___ftmul
  8108  075C  0834               	movf	??___ftmul,w
  8109  075D  05BD               	andwf	___ftmul@sign,f
  8110  075E  17AF               	bsf	___ftmul@f1+1,7
  8111  075F  17B2               	bsf	___ftmul@f2+1,7
  8112  0760  30FF               	movlw	255
  8113  0761  05B1               	andwf	___ftmul@f2,f
  8114  0762  30FF               	movlw	255
  8115  0763  05B2               	andwf	___ftmul@f2+1,f
  8116  0764  3000               	movlw	0
  8117  0765  05B3               	andwf	___ftmul@f2+2,f
  8118  0766  3000               	movlw	0
  8119  0767  00B9               	movwf	___ftmul@f3_as_product
  8120  0768  3000               	movlw	0
  8121  0769  00BA               	movwf	___ftmul@f3_as_product+1
  8122  076A  3000               	movlw	0
  8123  076B  00BB               	movwf	___ftmul@f3_as_product+2
  8124  076C  3007               	movlw	7
  8125  076D  00B4               	movwf	??___ftmul
  8126  076E  0834               	movf	??___ftmul,w
  8127  076F  00BC               	movwf	___ftmul@cntr
  8128  0770                     l8158:	
  8129  0770  1C2E               	btfss	___ftmul@f1,0
  8130  0771  2F78               	goto	l8162
  8131  0772  0831               	movf	___ftmul@f2,w
  8132  0773  07B9               	addwf	___ftmul@f3_as_product,f
  8133  0774  0832               	movf	___ftmul@f2+1,w
  8134  0775  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8135  0776  0833               	movf	___ftmul@f2+2,w
  8136  0777  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8137  0778                     l8162:	
  8138  0778  3001               	movlw	1
  8139  0779                     u8535:	
  8140  0779  36B0               	lsrf	___ftmul@f1+2,f
  8141  077A  0CAF               	rrf	___ftmul@f1+1,f
  8142  077B  0CAE               	rrf	___ftmul@f1,f
  8143  077C  0B89               	decfsz	9,f
  8144  077D  2F79               	goto	u8535
  8145  077E  3001               	movlw	1
  8146  077F                     u8545:	
  8147  077F  35B1               	lslf	___ftmul@f2,f
  8148  0780  0DB2               	rlf	___ftmul@f2+1,f
  8149  0781  0DB3               	rlf	___ftmul@f2+2,f
  8150  0782  0B89               	decfsz	9,f
  8151  0783  2F7F               	goto	u8545
  8152  0784  3001               	movlw	1
  8153  0785  02BC               	subwf	___ftmul@cntr,f
  8154  0786  1D03               	btfss	3,2
  8155  0787  2F70               	goto	l8158
  8156  0788  3009               	movlw	9
  8157  0789  00B4               	movwf	??___ftmul
  8158  078A  0834               	movf	??___ftmul,w
  8159  078B  00BC               	movwf	___ftmul@cntr
  8160  078C                     l8170:	
  8161  078C  1C2E               	btfss	___ftmul@f1,0
  8162  078D  2F94               	goto	l8174
  8163  078E  0831               	movf	___ftmul@f2,w
  8164  078F  07B9               	addwf	___ftmul@f3_as_product,f
  8165  0790  0832               	movf	___ftmul@f2+1,w
  8166  0791  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8167  0792  0833               	movf	___ftmul@f2+2,w
  8168  0793  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8169  0794                     l8174:	
  8170  0794  3001               	movlw	1
  8171  0795                     u8575:	
  8172  0795  36B0               	lsrf	___ftmul@f1+2,f
  8173  0796  0CAF               	rrf	___ftmul@f1+1,f
  8174  0797  0CAE               	rrf	___ftmul@f1,f
  8175  0798  0B89               	decfsz	9,f
  8176  0799  2F95               	goto	u8575
  8177  079A  3001               	movlw	1
  8178  079B                     u8585:	
  8179  079B  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8180  079C  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8181  079D  0CB9               	rrf	___ftmul@f3_as_product,f
  8182  079E  0B89               	decfsz	9,f
  8183  079F  2F9B               	goto	u8585
  8184  07A0  3001               	movlw	1
  8185  07A1  02BC               	subwf	___ftmul@cntr,f
  8186  07A2  1D03               	btfss	3,2
  8187  07A3  2F8C               	goto	l8170
  8188  07A4  0839               	movf	___ftmul@f3_as_product,w
  8189  07A5  00A0               	movwf	___ftpack@arg
  8190  07A6  083A               	movf	___ftmul@f3_as_product+1,w
  8191  07A7  00A1               	movwf	___ftpack@arg+1
  8192  07A8  083B               	movf	___ftmul@f3_as_product+2,w
  8193  07A9  00A2               	movwf	___ftpack@arg+2
  8194  07AA  0838               	movf	___ftmul@exp,w
  8195  07AB  00B4               	movwf	??___ftmul
  8196  07AC  0834               	movf	??___ftmul,w
  8197  07AD  00A3               	movwf	___ftpack@exp
  8198  07AE  083D               	movf	___ftmul@sign,w
  8199  07AF  00B5               	movwf	??___ftmul+1
  8200  07B0  0835               	movf	??___ftmul+1,w
  8201  07B1  00A4               	movwf	___ftpack@sign
  8202  07B2  318A  2207         	fcall	___ftpack
  8203  07B4  0020               	movlb	0	; select bank0
  8204  07B5  0820               	movf	?___ftpack,w
  8205  07B6  00AE               	movwf	?___ftmul
  8206  07B7  0821               	movf	?___ftpack+1,w
  8207  07B8  00AF               	movwf	?___ftmul+1
  8208  07B9  0822               	movf	?___ftpack+2,w
  8209  07BA  00B0               	movwf	?___ftmul+2
  8210  07BB  0008               	return
  8211  07BC                     __end_of___ftmul:	
  8212                           
  8213                           	psect	text34
  8214  1E58                     __ptext34:	
  8215 ;; *************** function _setMemory_Modify *****************
  8216 ;; Defined at:
  8217 ;;		line 1064 in file "../src/MCU_B1.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  command         1    wreg     unsigned char 
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  command         1    1[BANK0 ] unsigned char 
  8222 ;; Return value:  Size  Location     Type
  8223 ;;		None               void
  8224 ;; Registers used:
  8225 ;;		wreg, status,2, status,0
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;Total ram usage:        2 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:    5
  8238 ;; This function calls:
  8239 ;;		Nothing
  8240 ;; This function is called by:
  8241 ;;		_setLog_Code
  8242 ;;		_setRFSW_AdjControl
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function _setMemory_Modify
  8248  1E58                     _setMemory_Modify:	
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8252                           ;setMemory_Modify@command stored from wreg
  8253  1E58  0020               	movlb	0	; select bank0
  8254  1E59  00A1               	movwf	setMemory_Modify@command
  8255                           
  8256                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8257  1E5A  0821               	movf	setMemory_Modify@command,w
  8258  1E5B  3A01               	xorlw	1
  8259  1E5C  3000               	movlw	0
  8260  1E5D  1903               	skipnz
  8261  1E5E  3001               	movlw	1
  8262  1E5F  00A0               	movwf	??_setMemory_Modify
  8263  1E60  0023               	movlb	3	; select bank3
  8264  1E61  0862               	movf	(_Memory^(0+384)+36),w
  8265  1E62  0020               	movlb	0	; select bank0
  8266  1E63  0620               	xorwf	??_setMemory_Modify,w
  8267  1E64  39FE               	andlw	-2
  8268  1E65  0620               	xorwf	??_setMemory_Modify,w
  8269  1E66  0023               	movlb	3	; select bank3
  8270  1E67  00E2               	movwf	(_Memory^(0+384)+36)
  8271                           
  8272                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8273  1E68  01E0               	clrf	(_Memory^(0+384)+34)
  8274  1E69  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8275  1E6A  0008               	return
  8276  1E6B                     __end_of_setMemory_Modify:	
  8277                           
  8278                           	psect	text35
  8279  1DDB                     __ptext35:	
  8280 ;; *************** function _getRF_KeyStatus *****************
  8281 ;; Defined at:
  8282 ;;		line 154 in file "../src/RF_Control_B1.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;		None
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  key             1    1[BANK0 ] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      unsigned char 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;Total ram usage:        3 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    5
  8303 ;; This function calls:
  8304 ;;		Nothing
  8305 ;; This function is called by:
  8306 ;;		_setRF_Main
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           
  8311                           ;psect for function _getRF_KeyStatus
  8312  1DDB                     _getRF_KeyStatus:	
  8313                           
  8314                           ;RF_Control_B1.c: 155: char key = 0;
  8315                           
  8316                           ;incstack = 0
  8317                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8318  1DDB  0020               	movlb	0	; select bank0
  8319  1DDC  01A1               	clrf	getRF_KeyStatus@key
  8320                           
  8321                           ;RF_Control_B1.c: 165: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8322  1DDD  01A2               	clrf	_getRF_KeyStatus$5049
  8323  1DDE  0AA2               	incf	_getRF_KeyStatus$5049,f
  8324  1DDF  1F0C               	btfss	12,6	;volatile
  8325  1DE0  1A0C               	btfsc	12,4	;volatile
  8326  1DE1  2DE6               	goto	l9050
  8327  1DE2  1C0C               	btfss	12,0	;volatile
  8328  1DE3  1B8C               	btfsc	12,7	;volatile
  8329  1DE4  2DE6               	goto	l9050
  8330  1DE5  01A2               	clrf	_getRF_KeyStatus$5049
  8331  1DE6                     l9050:	
  8332  1DE6  0822               	movf	_getRF_KeyStatus$5049,w
  8333  1DE7  00A0               	movwf	??_getRF_KeyStatus
  8334  1DE8  0820               	movf	??_getRF_KeyStatus,w
  8335  1DE9  00A1               	movwf	getRF_KeyStatus@key
  8336                           
  8337                           ;RF_Control_B1.c: 167: return key;
  8338  1DEA  0821               	movf	getRF_KeyStatus@key,w
  8339  1DEB  0008               	return
  8340  1DEC                     __end_of_getRF_KeyStatus:	
  8341                           
  8342                           	psect	text36
  8343  1DCA                     __ptext36:	
  8344 ;; *************** function _getBuz_GO *****************
  8345 ;; Defined at:
  8346 ;;		line 82 in file "../src/Buzzer_B1.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;  i               2    4[BANK0 ] int 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  2    0[BANK0 ] int 
  8353 ;; Registers used:
  8354 ;;		wreg, status,2, status,0
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;Total ram usage:        6 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    5
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_setRF_Main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _getBuz_GO
  8376  1DCA                     _getBuz_GO:	
  8377                           
  8378                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8382  1DCA  0021               	movlb	1	; select bank1
  8383  1DCB  0C2E               	rrf	_Buz1^(0+128),w
  8384  1DCC  3901               	andlw	1
  8385  1DCD  0020               	movlb	0	; select bank0
  8386  1DCE  00A2               	movwf	??_getBuz_GO
  8387  1DCF  01A3               	clrf	??_getBuz_GO+1
  8388  1DD0  0822               	movf	??_getBuz_GO,w
  8389  1DD1  00A4               	movwf	getBuz_GO@i
  8390  1DD2  0823               	movf	??_getBuz_GO+1,w
  8391  1DD3  00A5               	movwf	getBuz_GO@i+1
  8392                           
  8393                           ;Buzzer_B1.c: 84: return i;
  8394  1DD4  0825               	movf	getBuz_GO@i+1,w
  8395  1DD5  01A1               	clrf	?_getBuz_GO+1
  8396  1DD6  07A1               	addwf	?_getBuz_GO+1,f
  8397  1DD7  0824               	movf	getBuz_GO@i,w
  8398  1DD8  01A0               	clrf	?_getBuz_GO
  8399  1DD9  07A0               	addwf	?_getBuz_GO,f
  8400  1DDA  0008               	return
  8401  1DDB                     __end_of_getBuz_GO:	
  8402                           
  8403                           	psect	text37
  8404  1E45                     __ptext37:	
  8405 ;; *************** function _RF_RxDisable *****************
  8406 ;; Defined at:
  8407 ;;		line 230 in file "../src/RF_Control_B1.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;		None
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;		None
  8412 ;; Return value:  Size  Location     Type
  8413 ;;		None               void
  8414 ;; Registers used:
  8415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;Total ram usage:        0 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    7
  8428 ;; This function calls:
  8429 ;;		_CC2500_WriteCommand
  8430 ;; This function is called by:
  8431 ;;		_setRF_Main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _RF_RxDisable
  8437  1E45                     _RF_RxDisable:	
  8438                           
  8439                           ;RF_Control_B1.c: 231: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8440                           
  8441                           ;incstack = 0
  8442                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8443  1E45  0021               	movlb	1	; select bank1
  8444  1E46  18BA               	btfsc	_RF1^(0+128),1
  8445  1E47  2E4A               	goto	l2079
  8446  1E48  1DBA               	btfss	_RF1^(0+128),3
  8447  1E49  0008               	return
  8448  1E4A                     l2079:	
  8449                           
  8450                           ;RF_Control_B1.c: 232: RF1.RxStatus = 0;
  8451  1E4A  11BA               	bcf	_RF1^(0+128),3
  8452                           
  8453                           ;RF_Control_B1.c: 233: RF1.ReceiveGO = 0;
  8454  1E4B  10BA               	bcf	_RF1^(0+128),1
  8455                           
  8456                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x36);
  8457  1E4C  3036               	movlw	54
  8458  1E4D  319F  2718  319E   	fcall	_CC2500_WriteCommand
  8459                           
  8460                           ;RF_Control_B1.c: 236: CC2500_WriteCommand(0x3A);
  8461  1E50  303A               	movlw	58
  8462  1E51  319F  2718  319E   	fcall	_CC2500_WriteCommand
  8463                           
  8464                           ;RF_Control_B1.c: 237: CC2500_WriteCommand(0x3B);
  8465  1E54  303B               	movlw	59
  8466  1E55  319F  2718         	fcall	_CC2500_WriteCommand
  8467  1E57  0008               	return
  8468  1E58                     __end_of_RF_RxDisable:	
  8469                           
  8470                           	psect	text38
  8471  0A68                     __ptext38:	
  8472 ;; *************** function _CC2500_TxData *****************
  8473 ;; Defined at:
  8474 ;;		line 32 in file "../src/CC2500_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        2 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    7
  8495 ;; This function calls:
  8496 ;;		_CC2500_WriteByte
  8497 ;;		_CC2500_WriteCommand
  8498 ;;		_Timeout_Counter
  8499 ;;		_set_TimeoutCleared
  8500 ;; This function is called by:
  8501 ;;		_setRF_Main
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           
  8506                           ;psect for function _CC2500_TxData
  8507  0A68                     _CC2500_TxData:	
  8508                           
  8509                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8510                           ;CC2500_B1.c: 35: RC0 = 0;
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8514  0A68  0020               	movlb	0	; select bank0
  8515  0A69  100E               	bcf	14,0	;volatile
  8516                           
  8517                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8518  0A6A  307F               	movlw	127
  8519  0A6B  00A4               	movwf	??_CC2500_TxData
  8520  0A6C  0824               	movf	??_CC2500_TxData,w
  8521  0A6D  0021               	movlb	1	; select bank1
  8522  0A6E  00D1               	movwf	_SPI0Buffer^(0+128)
  8523                           
  8524                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8525  0A6F  2A73               	goto	l8774
  8526  0A70                     l8772:	
  8527                           
  8528                           ;CC2500_B1.c: 38: Timeout_Counter();
  8529  0A70  319E  2692  318A   	fcall	_Timeout_Counter
  8530  0A73                     l8774:	
  8531  0A73  0020               	movlb	0	; select bank0
  8532  0A74  1E8E               	btfss	14,5	;volatile
  8533  0A75  2A79               	goto	l8778
  8534  0A76  0021               	movlb	1	; select bank1
  8535  0A77  1D2B               	btfss	(_myMain^(0+128)+11),2
  8536  0A78  2A70               	goto	l8772
  8537  0A79                     l8778:	
  8538                           
  8539                           ;CC2500_B1.c: 39: };
  8540                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8541  0A79  319C  2448  318A   	fcall	_set_TimeoutCleared
  8542                           
  8543                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8544  0A7C  319E  26FF  318A   	fcall	_CC2500_WriteByte
  8545                           
  8546                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8547  0A7F  0021               	movlb	1	; select bank1
  8548  0A80  0853               	movf	_Tx_Length^(0+128),w
  8549  0A81  0020               	movlb	0	; select bank0
  8550  0A82  00A4               	movwf	??_CC2500_TxData
  8551  0A83  0824               	movf	??_CC2500_TxData,w
  8552  0A84  0021               	movlb	1	; select bank1
  8553  0A85  00D1               	movwf	_SPI0Buffer^(0+128)
  8554                           
  8555                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8556  0A86  319E  26FF  318A   	fcall	_CC2500_WriteByte
  8557                           
  8558                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8559  0A89  0020               	movlb	0	; select bank0
  8560  0A8A  01A5               	clrf	CC2500_TxData@loop_e
  8561  0A8B                     l8792:	
  8562  0A8B  0021               	movlb	1	; select bank1
  8563  0A8C  0853               	movf	_Tx_Length^(0+128),w
  8564  0A8D  0020               	movlb	0	; select bank0
  8565  0A8E  0225               	subwf	CC2500_TxData@loop_e,w
  8566  0A8F  1803               	btfsc	3,0
  8567  0A90  2AA4               	goto	l231
  8568                           
  8569                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8570  0A91  0825               	movf	CC2500_TxData@loop_e,w
  8571  0A92  3EA0               	addlw	_RF_Data& (0+255)
  8572  0A93  0086               	movwf	6
  8573  0A94  3001               	movlw	1	; select bank3/4
  8574  0A95  0087               	movwf	7
  8575  0A96  0801               	movf	1,w
  8576  0A97  00A4               	movwf	??_CC2500_TxData
  8577  0A98  0824               	movf	??_CC2500_TxData,w
  8578  0A99  0021               	movlb	1	; select bank1
  8579  0A9A  00D1               	movwf	_SPI0Buffer^(0+128)
  8580                           
  8581                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8582  0A9B  319E  26FF  318A   	fcall	_CC2500_WriteByte
  8583  0A9E  3001               	movlw	1
  8584  0A9F  0020               	movlb	0	; select bank0
  8585  0AA0  00A4               	movwf	??_CC2500_TxData
  8586  0AA1  0824               	movf	??_CC2500_TxData,w
  8587  0AA2  07A5               	addwf	CC2500_TxData@loop_e,f
  8588  0AA3  2A8B               	goto	l8792
  8589  0AA4                     l231:	
  8590                           
  8591                           ;CC2500_B1.c: 48: }
  8592                           ;CC2500_B1.c: 49: RC0 = 1;
  8593  0AA4  140E               	bsf	14,0	;volatile
  8594                           
  8595                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8596  0AA5  3035               	movlw	53
  8597  0AA6  319F  2718  318A   	fcall	_CC2500_WriteCommand
  8598                           
  8599                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8600  0AA9  2AAD               	goto	l8798
  8601  0AAA                     l8796:	
  8602                           
  8603                           ;CC2500_B1.c: 52: Timeout_Counter();
  8604  0AAA  319E  2692  318A   	fcall	_Timeout_Counter
  8605  0AAD                     l8798:	
  8606  0AAD  0020               	movlb	0	; select bank0
  8607  0AAE  188E               	btfsc	14,1	;volatile
  8608  0AAF  2AB3               	goto	l8802
  8609  0AB0  0021               	movlb	1	; select bank1
  8610  0AB1  1D2B               	btfss	(_myMain^(0+128)+11),2
  8611  0AB2  2AAA               	goto	l8796
  8612  0AB3                     l8802:	
  8613                           
  8614                           ;CC2500_B1.c: 53: };
  8615                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8616  0AB3  319C  2448  318A   	fcall	_set_TimeoutCleared
  8617                           
  8618                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8619  0AB6  2ABA               	goto	l8806
  8620  0AB7                     l8804:	
  8621                           
  8622                           ;CC2500_B1.c: 57: Timeout_Counter();
  8623  0AB7  319E  2692  318A   	fcall	_Timeout_Counter
  8624  0ABA                     l8806:	
  8625  0ABA  0020               	movlb	0	; select bank0
  8626  0ABB  1C8E               	btfss	14,1	;volatile
  8627  0ABC  2AC0               	goto	l8810
  8628  0ABD  0021               	movlb	1	; select bank1
  8629  0ABE  1D2B               	btfss	(_myMain^(0+128)+11),2
  8630  0ABF  2AB7               	goto	l8804
  8631  0AC0                     l8810:	
  8632                           
  8633                           ;CC2500_B1.c: 58: };
  8634                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8635  0AC0  319C  2448  318A   	fcall	_set_TimeoutCleared
  8636                           
  8637                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8638  0AC3  3036               	movlw	54
  8639  0AC4  319F  2718  318A   	fcall	_CC2500_WriteCommand
  8640                           
  8641                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8642  0AC7  303B               	movlw	59
  8643  0AC8  319F  2718         	fcall	_CC2500_WriteCommand
  8644                           
  8645                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8646  0ACA  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8647  0ACB  0008               	return
  8648  0ACC                     __end_of_CC2500_TxData:	
  8649                           
  8650                           	psect	text39
  8651  0B96                     __ptext39:	
  8652 ;; *************** function _CC2500_RxData *****************
  8653 ;; Defined at:
  8654 ;;		line 70 in file "../src/CC2500_B1.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;		None
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8659 ;; Return value:  Size  Location     Type
  8660 ;;		None               void
  8661 ;; Registers used:
  8662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;Total ram usage:        2 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    7
  8675 ;; This function calls:
  8676 ;;		_CC2500_ReadByte
  8677 ;;		_CC2500_ReadStatus
  8678 ;;		_CC2500_WriteByte
  8679 ;;		_Timeout_Counter
  8680 ;;		_set_TimeoutCleared
  8681 ;; This function is called by:
  8682 ;;		_setRF_Main
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           
  8687                           ;psect for function _CC2500_RxData
  8688  0B96                     _CC2500_RxData:	
  8689                           
  8690                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8691                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8692                           
  8693                           ;incstack = 0
  8694                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8695  0B96  0020               	movlb	0	; select bank0
  8696  0B97  188E               	btfsc	14,1	;volatile
  8697  0B98  2B9D               	goto	l8824
  8698  0B99  2BA6               	goto	l8830
  8699  0B9A                     l8822:	
  8700                           ;CC2500_B1.c: 76: {
  8701                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8702                           
  8703                           
  8704                           ;CC2500_B1.c: 78: Timeout_Counter();
  8705  0B9A  319E  2692  318B   	fcall	_Timeout_Counter
  8706  0B9D                     l8824:	
  8707  0B9D  0020               	movlb	0	; select bank0
  8708  0B9E  1C8E               	btfss	14,1	;volatile
  8709  0B9F  2BA3               	goto	l8828
  8710  0BA0  0021               	movlb	1	; select bank1
  8711  0BA1  1D2B               	btfss	(_myMain^(0+128)+11),2
  8712  0BA2  2B9A               	goto	l8822
  8713  0BA3                     l8828:	
  8714                           
  8715                           ;CC2500_B1.c: 79: };
  8716                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8717  0BA3  319C  2448  318B   	fcall	_set_TimeoutCleared
  8718  0BA6                     l8830:	
  8719                           
  8720                           ;CC2500_B1.c: 81: }
  8721                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8722  0BA6  303B               	movlw	59
  8723  0BA7  3191  2112  318B   	fcall	_CC2500_ReadStatus
  8724                           
  8725                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8726  0BAA  0021               	movlb	1	; select bank1
  8727  0BAB  0856               	movf	_s_data^(0+128),w
  8728  0BAC  1903               	btfsc	3,2
  8729  0BAD  0008               	return
  8730                           
  8731                           ;CC2500_B1.c: 86: RC0 = 0;
  8732  0BAE  0020               	movlb	0	; select bank0
  8733  0BAF  100E               	bcf	14,0	;volatile
  8734                           
  8735                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8736  0BB0  30FF               	movlw	255
  8737  0BB1  00A4               	movwf	??_CC2500_RxData
  8738  0BB2  0824               	movf	??_CC2500_RxData,w
  8739  0BB3  0021               	movlb	1	; select bank1
  8740  0BB4  00D1               	movwf	_SPI0Buffer^(0+128)
  8741                           
  8742                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8743  0BB5  2BB9               	goto	l8840
  8744  0BB6                     l8838:	
  8745                           
  8746                           ;CC2500_B1.c: 89: Timeout_Counter();
  8747  0BB6  319E  2692  318B   	fcall	_Timeout_Counter
  8748  0BB9                     l8840:	
  8749  0BB9  0020               	movlb	0	; select bank0
  8750  0BBA  1E8E               	btfss	14,5	;volatile
  8751  0BBB  2BBF               	goto	l8844
  8752  0BBC  0021               	movlb	1	; select bank1
  8753  0BBD  1D2B               	btfss	(_myMain^(0+128)+11),2
  8754  0BBE  2BB6               	goto	l8838
  8755  0BBF                     l8844:	
  8756                           
  8757                           ;CC2500_B1.c: 90: };
  8758                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8759  0BBF  319C  2448  318B   	fcall	_set_TimeoutCleared
  8760                           
  8761                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8762  0BC2  319E  26FF  318B   	fcall	_CC2500_WriteByte
  8763                           
  8764                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8765  0BC5  319F  2784  318B   	fcall	_CC2500_ReadByte
  8766                           
  8767                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8768  0BC8  0021               	movlb	1	; select bank1
  8769  0BC9  0851               	movf	_SPI0Buffer^(0+128),w
  8770  0BCA  0020               	movlb	0	; select bank0
  8771  0BCB  00A4               	movwf	??_CC2500_RxData
  8772  0BCC  0824               	movf	??_CC2500_RxData,w
  8773  0BCD  0021               	movlb	1	; select bank1
  8774  0BCE  00D0               	movwf	_Rx_Length^(0+128)
  8775                           
  8776                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8777  0BCF  0020               	movlb	0	; select bank0
  8778  0BD0  01A5               	clrf	CC2500_RxData@loop_f
  8779  0BD1                     l8860:	
  8780  0BD1  0021               	movlb	1	; select bank1
  8781  0BD2  0850               	movf	_Rx_Length^(0+128),w
  8782  0BD3  0020               	movlb	0	; select bank0
  8783  0BD4  0225               	subwf	CC2500_RxData@loop_f,w
  8784  0BD5  1803               	btfsc	3,0
  8785  0BD6  2BEA               	goto	l8862
  8786                           
  8787                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8788  0BD7  319F  2784  318B   	fcall	_CC2500_ReadByte
  8789                           
  8790                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8791  0BDA  0021               	movlb	1	; select bank1
  8792  0BDB  0851               	movf	_SPI0Buffer^(0+128),w
  8793  0BDC  0020               	movlb	0	; select bank0
  8794  0BDD  00A4               	movwf	??_CC2500_RxData
  8795  0BDE  0825               	movf	CC2500_RxData@loop_f,w
  8796  0BDF  3EA0               	addlw	_RF_Data& (0+255)
  8797  0BE0  0086               	movwf	6
  8798  0BE1  3001               	movlw	1	; select bank3/4
  8799  0BE2  0087               	movwf	7
  8800  0BE3  0824               	movf	??_CC2500_RxData,w
  8801  0BE4  0081               	movwf	1
  8802  0BE5  3001               	movlw	1
  8803  0BE6  00A4               	movwf	??_CC2500_RxData
  8804  0BE7  0824               	movf	??_CC2500_RxData,w
  8805  0BE8  07A5               	addwf	CC2500_RxData@loop_f,f
  8806  0BE9  2BD1               	goto	l8860
  8807  0BEA                     l8862:	
  8808                           
  8809                           ;CC2500_B1.c: 99: }
  8810                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8811  0BEA  319F  2784  318B   	fcall	_CC2500_ReadByte
  8812                           
  8813                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8814  0BED  0021               	movlb	1	; select bank1
  8815  0BEE  0851               	movf	_SPI0Buffer^(0+128),w
  8816  0BEF  0020               	movlb	0	; select bank0
  8817  0BF0  00A4               	movwf	??_CC2500_RxData
  8818  0BF1  0824               	movf	??_CC2500_RxData,w
  8819  0BF2  0021               	movlb	1	; select bank1
  8820  0BF3  00CF               	movwf	_RSSI^(0+128)
  8821                           
  8822                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8823  0BF4  319F  2784         	fcall	_CC2500_ReadByte
  8824                           
  8825                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8826  0BF6  0021               	movlb	1	; select bank1
  8827  0BF7  0851               	movf	_SPI0Buffer^(0+128),w
  8828  0BF8  0020               	movlb	0	; select bank0
  8829  0BF9  00A4               	movwf	??_CC2500_RxData
  8830  0BFA  0824               	movf	??_CC2500_RxData,w
  8831  0BFB  0021               	movlb	1	; select bank1
  8832  0BFC  00CB               	movwf	_CRC^(0+128)
  8833                           
  8834                           ;CC2500_B1.c: 104: RC0 = 1;
  8835  0BFD  0020               	movlb	0	; select bank0
  8836  0BFE  140E               	bsf	14,0	;volatile
  8837                           
  8838                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8839  0BFF  0021               	movlb	1	; select bank1
  8840  0C00  1BCB               	btfsc	_CRC^(0+128),7
  8841                           
  8842                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8843  0C01  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8844                           
  8845                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8846  0C02  11BA               	bcf	_RF1^(0+128),3
  8847                           
  8848                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8849  0C03  14BA               	bsf	_RF1^(0+128),1
  8850  0C04  0008               	return
  8851  0C05                     __end_of_CC2500_RxData:	
  8852                           
  8853                           	psect	text40
  8854  1112                     __ptext40:	
  8855 ;; *************** function _CC2500_ReadStatus *****************
  8856 ;; Defined at:
  8857 ;;		line 301 in file "../src/CC2500_B1.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;  status_addr     1    wreg     unsigned char 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;		None               void
  8864 ;; Registers used:
  8865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        2 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    6
  8878 ;; This function calls:
  8879 ;;		_CC2500_ReadByte
  8880 ;;		_CC2500_WriteByte
  8881 ;;		_Timeout_Counter
  8882 ;;		_set_TimeoutCleared
  8883 ;; This function is called by:
  8884 ;;		_CC2500_RxData
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           
  8889                           ;psect for function _CC2500_ReadStatus
  8890  1112                     _CC2500_ReadStatus:	
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8894                           ;CC2500_ReadStatus@status_addr stored from wreg
  8895  1112  0020               	movlb	0	; select bank0
  8896  1113  00A3               	movwf	CC2500_ReadStatus@status_addr
  8897                           
  8898                           ;CC2500_B1.c: 302: RC0 = 0;
  8899  1114  100E               	bcf	14,0	;volatile
  8900                           
  8901                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8902  1115  0823               	movf	CC2500_ReadStatus@status_addr,w
  8903  1116  3EC0               	addlw	192
  8904  1117  00A2               	movwf	??_CC2500_ReadStatus
  8905  1118  0822               	movf	??_CC2500_ReadStatus,w
  8906  1119  0021               	movlb	1	; select bank1
  8907  111A  00D1               	movwf	_SPI0Buffer^(0+128)
  8908                           
  8909                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  8910  111B  291F               	goto	l8636
  8911  111C                     l8634:	
  8912                           
  8913                           ;CC2500_B1.c: 306: Timeout_Counter();
  8914  111C  319E  2692  3191   	fcall	_Timeout_Counter
  8915  111F                     l8636:	
  8916  111F  0020               	movlb	0	; select bank0
  8917  1120  1E8E               	btfss	14,5	;volatile
  8918  1121  2925               	goto	l8640
  8919  1122  0021               	movlb	1	; select bank1
  8920  1123  1D2B               	btfss	(_myMain^(0+128)+11),2
  8921  1124  291C               	goto	l8634
  8922  1125                     l8640:	
  8923                           
  8924                           ;CC2500_B1.c: 307: };
  8925                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8926  1125  319C  2448  3191   	fcall	_set_TimeoutCleared
  8927                           
  8928                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8929  1128  319E  26FF  3191   	fcall	_CC2500_WriteByte
  8930                           
  8931                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8932  112B  319F  2784         	fcall	_CC2500_ReadByte
  8933                           
  8934                           ;CC2500_B1.c: 312: RC0 = 1;
  8935  112D  0020               	movlb	0	; select bank0
  8936  112E  140E               	bsf	14,0	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8939  112F  0021               	movlb	1	; select bank1
  8940  1130  0851               	movf	_SPI0Buffer^(0+128),w
  8941  1131  0020               	movlb	0	; select bank0
  8942  1132  00A2               	movwf	??_CC2500_ReadStatus
  8943  1133  0822               	movf	??_CC2500_ReadStatus,w
  8944  1134  0021               	movlb	1	; select bank1
  8945  1135  00D6               	movwf	_s_data^(0+128)
  8946  1136  0008               	return
  8947  1137                     __end_of_CC2500_ReadStatus:	
  8948                           
  8949                           	psect	text41
  8950  1F84                     __ptext41:	
  8951 ;; *************** function _CC2500_ReadByte *****************
  8952 ;; Defined at:
  8953 ;;		line 235 in file "../src/CC2500_B1.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;		None
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;		None               void
  8960 ;; Registers used:
  8961 ;;		wreg, status,2, status,0
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;Total ram usage:        2 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    5
  8974 ;; This function calls:
  8975 ;;		Nothing
  8976 ;; This function is called by:
  8977 ;;		_CC2500_RxData
  8978 ;;		_CC2500_ReadStatus
  8979 ;;		_CC2500_ReadREG
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           
  8984                           ;psect for function _CC2500_ReadByte
  8985  1F84                     _CC2500_ReadByte:	
  8986                           
  8987                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8988                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8989                           
  8990                           ;incstack = 0
  8991                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8992  1F84  0020               	movlb	0	; select bank0
  8993  1F85  01A1               	clrf	CC2500_ReadByte@loop_b
  8994  1F86                     L2:	
  8995  1F86  3008               	movlw	8
  8996  1F87  0221               	subwf	CC2500_ReadByte@loop_b,w
  8997  1F88  1803               	btfsc	3,0
  8998  1F89  0008               	return
  8999                           
  9000                           ;CC2500_B1.c: 238: RC3 = 1;
  9001  1F8A  158E               	bsf	14,3	;volatile
  9002                           
  9003                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9004  1F8B  1003               	clrc
  9005  1F8C  0021               	movlb	1	; select bank1
  9006  1F8D  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9007                           
  9008                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9009  1F8E  0020               	movlb	0	; select bank0
  9010  1F8F  1E8E               	btfss	14,5	;volatile
  9011  1F90  2F94               	goto	l8536
  9012                           
  9013                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9014  1F91  0021               	movlb	1	; select bank1
  9015  1F92  1451               	bsf	_SPI0Buffer^(0+128),0
  9016  1F93  2F9A               	goto	l8538
  9017  1F94                     l8536:	
  9018                           
  9019                           ;CC2500_B1.c: 242: else
  9020                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9021  1F94  30FE               	movlw	254
  9022  1F95  0020               	movlb	0	; select bank0
  9023  1F96  00A0               	movwf	??_CC2500_ReadByte
  9024  1F97  0820               	movf	??_CC2500_ReadByte,w
  9025  1F98  0021               	movlb	1	; select bank1
  9026  1F99  05D1               	andwf	_SPI0Buffer^(0+128),f
  9027  1F9A                     l8538:	
  9028                           
  9029                           ;CC2500_B1.c: 244: RC3 = 0;
  9030  1F9A  0020               	movlb	0	; select bank0
  9031  1F9B  118E               	bcf	14,3	;volatile
  9032  1F9C  3001               	movlw	1
  9033  1F9D  00A0               	movwf	??_CC2500_ReadByte
  9034  1F9E  0820               	movf	??_CC2500_ReadByte,w
  9035  1F9F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9036  1FA0  2F86               	goto	L2
  9037  1FA1                     __end_of_CC2500_ReadByte:	
  9038                           
  9039                           	psect	text42
  9040  1C18                     __ptext42:	
  9041 ;; *************** function _RF_Initialization *****************
  9042 ;; Defined at:
  9043 ;;		line 9 in file "../src/RF_Control_B1.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;		None
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;		None               void
  9050 ;; Registers used:
  9051 ;;		wreg, status,2, status,0, pclath, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:        0 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    6
  9064 ;; This function calls:
  9065 ;;		_setRF_Initialization
  9066 ;; This function is called by:
  9067 ;;		_main
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _RF_Initialization
  9073  1C18                     _RF_Initialization:	
  9074                           
  9075                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9079  1C18  319C  24F5         	fcall	_setRF_Initialization
  9080  1C1A  0008               	return
  9081  1C1B                     __end_of_RF_Initialization:	
  9082                           
  9083                           	psect	text43
  9084  1CF5                     __ptext43:	
  9085 ;; *************** function _setRF_Initialization *****************
  9086 ;; Defined at:
  9087 ;;		line 43 in file "../src/RF_Control_B1.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		wreg
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:        1 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    5
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_RF_Initialization
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _setRF_Initialization
  9117  1CF5                     _setRF_Initialization:	
  9118                           
  9119                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9120                           
  9121                           ;incstack = 0
  9122                           ; Regs used in _setRF_Initialization: [wreg]
  9123  1CF5  3015               	movlw	21
  9124  1CF6  0020               	movlb	0	; select bank0
  9125  1CF7  00A0               	movwf	??_setRF_Initialization
  9126  1CF8  0820               	movf	??_setRF_Initialization,w
  9127  1CF9  0021               	movlb	1	; select bank1
  9128  1CFA  00D3               	movwf	_Tx_Length^(0+128)
  9129                           
  9130                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9131  1CFB  3005               	movlw	5
  9132  1CFC  00C1               	movwf	(_RF1^(0+128)+7)
  9133  1CFD  3000               	movlw	0
  9134  1CFE  00C2               	movwf	(_RF1^(0+128)+8)
  9135  1CFF  0008               	return
  9136  1D00                     __end_of_setRF_Initialization:	
  9137                           
  9138                           	psect	text44
  9139  1E21                     __ptext44:	
  9140 ;; *************** function _Mcu_Initialization *****************
  9141 ;; Defined at:
  9142 ;;		line 30 in file "../src/MCU_B1.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;		None               void
  9149 ;; Registers used:
  9150 ;;		wreg, status,2, status,0, pclath, cstack
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;Total ram usage:        0 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    6
  9163 ;; This function calls:
  9164 ;;		_ADC_Set
  9165 ;;		_Fosc_Set
  9166 ;;		_IOC_Set
  9167 ;;		_IO_Set
  9168 ;;		_TMR1_Set
  9169 ;;		_WDT_Set
  9170 ;; This function is called by:
  9171 ;;		_main
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           
  9176                           ;psect for function _Mcu_Initialization
  9177  1E21                     _Mcu_Initialization:	
  9178                           
  9179                           ;MCU_B1.c: 32: Fosc_Set();
  9180                           
  9181                           ;incstack = 0
  9182                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9183  1E21  319C  2444  319E   	fcall	_Fosc_Set
  9184                           
  9185                           ;MCU_B1.c: 34: IO_Set();
  9186  1E24  319E  26E7  319E   	fcall	_IO_Set
  9187                           
  9188                           ;MCU_B1.c: 36: ;;
  9189                           ;MCU_B1.c: 38: TMR1_Set();
  9190  1E27  319D  2553  319E   	fcall	_TMR1_Set
  9191                           
  9192                           ;MCU_B1.c: 40: ADC_Set();
  9193  1E2A  319C  245F  319E   	fcall	_ADC_Set
  9194                           
  9195                           ;MCU_B1.c: 42: ;;
  9196                           ;MCU_B1.c: 44: ;;
  9197                           ;MCU_B1.c: 46: IOC_Set();
  9198  1E2D  319D  2547  319E   	fcall	_IOC_Set
  9199                           
  9200                           ;MCU_B1.c: 48: ;;
  9201                           ;MCU_B1.c: 50: ;;
  9202                           ;MCU_B1.c: 52: WDT_Set();
  9203  1E30  319C  24EA         	fcall	_WDT_Set
  9204  1E32  0008               	return
  9205  1E33                     __end_of_Mcu_Initialization:	
  9206                           
  9207                           	psect	text45
  9208  1CEA                     __ptext45:	
  9209 ;; *************** function _WDT_Set *****************
  9210 ;; Defined at:
  9211 ;;		line 1083 in file "../src/MCU_B1.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;		None
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;		None
  9216 ;; Return value:  Size  Location     Type
  9217 ;;		None               void
  9218 ;; Registers used:
  9219 ;;		wreg
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;Total ram usage:        1 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    5
  9232 ;; This function calls:
  9233 ;;		Nothing
  9234 ;; This function is called by:
  9235 ;;		_Mcu_Initialization
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           
  9240                           ;psect for function _WDT_Set
  9241  1CEA                     _WDT_Set:	
  9242                           
  9243                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9244                           
  9245                           ;incstack = 0
  9246                           ; Regs used in _WDT_Set: [wreg]
  9247  1CEA  3017               	movlw	23
  9248  1CEB  0021               	movlb	1	; select bank1
  9249  1CEC  0097               	movwf	23	;volatile
  9250                           
  9251                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9252  1CED  1449               	bsf	_WDT^(0+128),0
  9253                           
  9254                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9255  1CEE  300A               	movlw	10
  9256  1CEF  0020               	movlb	0	; select bank0
  9257  1CF0  00A0               	movwf	??_WDT_Set
  9258  1CF1  0820               	movf	??_WDT_Set,w
  9259  1CF2  0021               	movlb	1	; select bank1
  9260  1CF3  00CA               	movwf	(_WDT^(0+128)+1)
  9261  1CF4  0008               	return
  9262  1CF5                     __end_of_WDT_Set:	
  9263                           
  9264                           	psect	text46
  9265  1D53                     __ptext46:	
  9266 ;; *************** function _TMR1_Set *****************
  9267 ;; Defined at:
  9268 ;;		line 199 in file "../src/MCU_B1.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;		None
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;		None               void
  9275 ;; Registers used:
  9276 ;;		wreg
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;Total ram usage:        0 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    5
  9289 ;; This function calls:
  9290 ;;		Nothing
  9291 ;; This function is called by:
  9292 ;;		_Mcu_Initialization
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _TMR1_Set
  9298  1D53                     _TMR1_Set:	
  9299                           
  9300                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _TMR1_Set: [wreg]
  9304  1D53  3041               	movlw	65
  9305  1D54  0020               	movlb	0	; select bank0
  9306  1D55  0098               	movwf	24	;volatile
  9307                           
  9308                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9309  1D56  30FA               	movlw	250
  9310  1D57  0097               	movwf	23	;volatile
  9311                           
  9312                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9313  1D58  3038               	movlw	56
  9314  1D59  0096               	movwf	22	;volatile
  9315                           
  9316                           ;MCU_B1.c: 203: TMR1IE = 1;
  9317  1D5A  0021               	movlb	1	; select bank1
  9318  1D5B  1411               	bsf	17,0	;volatile
  9319                           
  9320                           ;MCU_B1.c: 204: PEIE = 1;
  9321  1D5C  170B               	bsf	11,6	;volatile
  9322                           
  9323                           ;MCU_B1.c: 205: GIE = 1;
  9324  1D5D  178B               	bsf	11,7	;volatile
  9325  1D5E  0008               	return
  9326  1D5F                     __end_of_TMR1_Set:	
  9327                           
  9328                           	psect	text47
  9329  1EE7                     __ptext47:	
  9330 ;; *************** function _IO_Set *****************
  9331 ;; Defined at:
  9332 ;;		line 60 in file "../src/MCU_B1.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;		None               void
  9339 ;; Registers used:
  9340 ;;		wreg, status,2
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;Total ram usage:        0 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    5
  9353 ;; This function calls:
  9354 ;;		Nothing
  9355 ;; This function is called by:
  9356 ;;		_Mcu_Initialization
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _IO_Set
  9362  1EE7                     _IO_Set:	
  9363                           
  9364                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _IO_Set: [wreg+status,2]
  9368  1EE7  30F7               	movlw	247
  9369  1EE8  0021               	movlb	1	; select bank1
  9370  1EE9  008C               	movwf	12	;volatile
  9371                           
  9372                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9373  1EEA  3004               	movlw	4
  9374  1EEB  008D               	movwf	13	;volatile
  9375                           
  9376                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9377  1EEC  3026               	movlw	38
  9378  1EED  008E               	movwf	14	;volatile
  9379                           
  9380                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9381  1EEE  0022               	movlb	2	; select bank2
  9382  1EEF  018C               	clrf	12	;volatile
  9383                           
  9384                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9385  1EF0  018D               	clrf	13	;volatile
  9386                           
  9387                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9388  1EF1  018E               	clrf	14	;volatile
  9389                           
  9390                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9391  1EF2  300E               	movlw	14
  9392  1EF3  0023               	movlb	3	; select bank3
  9393  1EF4  008C               	movwf	12	;volatile
  9394                           
  9395                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9396  1EF5  018D               	clrf	13	;volatile
  9397                           
  9398                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9399  1EF6  018E               	clrf	14	;volatile
  9400                           
  9401                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9402  1EF7  30F7               	movlw	247
  9403  1EF8  0020               	movlb	0	; select bank0
  9404  1EF9  008C               	movwf	12	;volatile
  9405                           
  9406                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9407  1EFA  3004               	movlw	4
  9408  1EFB  008D               	movwf	13	;volatile
  9409                           
  9410                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9411  1EFC  3026               	movlw	38
  9412  1EFD  008E               	movwf	14	;volatile
  9413  1EFE  0008               	return
  9414  1EFF                     __end_of_IO_Set:	
  9415                           
  9416                           	psect	text48
  9417  1D47                     __ptext48:	
  9418 ;; *************** function _IOC_Set *****************
  9419 ;; Defined at:
  9420 ;;		line 365 in file "../src/MCU_B1.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;		None
  9425 ;; Return value:  Size  Location     Type
  9426 ;;		None               void
  9427 ;; Registers used:
  9428 ;;		wreg, status,2
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:        0 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    5
  9441 ;; This function calls:
  9442 ;;		Nothing
  9443 ;; This function is called by:
  9444 ;;		_Mcu_Initialization
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           
  9449                           ;psect for function _IOC_Set
  9450  1D47                     _IOC_Set:	
  9451                           
  9452                           ;MCU_B1.c: 366: WPUB2 = 0;
  9453                           
  9454                           ;incstack = 0
  9455                           ; Regs used in _IOC_Set: [wreg+status,2]
  9456  1D47  0024               	movlb	4	; select bank4
  9457  1D48  110D               	bcf	13,2	;volatile
  9458                           
  9459                           ;MCU_B1.c: 386: IOCBP = 0b00000100;
  9460  1D49  3004               	movlw	4
  9461  1D4A  0027               	movlb	7	; select bank7
  9462  1D4B  0094               	movwf	20	;volatile
  9463                           
  9464                           ;MCU_B1.c: 387: IOCBN = 0b00000000;
  9465  1D4C  0195               	clrf	21	;volatile
  9466                           
  9467                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9468  1D4D  0196               	clrf	22	;volatile
  9469                           
  9470                           ;MCU_B1.c: 393: IOCIE = 1;
  9471  1D4E  158B               	bsf	11,3	;volatile
  9472                           
  9473                           ;MCU_B1.c: 394: IOCIF = 0;
  9474  1D4F  100B               	bcf	11,0	;volatile
  9475                           
  9476                           ;MCU_B1.c: 395: PEIE = 1;
  9477  1D50  170B               	bsf	11,6	;volatile
  9478                           
  9479                           ;MCU_B1.c: 396: GIE = 1;
  9480  1D51  178B               	bsf	11,7	;volatile
  9481  1D52  0008               	return
  9482  1D53                     __end_of_IOC_Set:	
  9483                           
  9484                           	psect	text49
  9485  1C44                     __ptext49:	
  9486 ;; *************** function _Fosc_Set *****************
  9487 ;; Defined at:
  9488 ;;		line 56 in file "../src/MCU_B1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;		None
  9493 ;; Return value:  Size  Location     Type
  9494 ;;		None               void
  9495 ;; Registers used:
  9496 ;;		wreg
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;Total ram usage:        0 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    5
  9509 ;; This function calls:
  9510 ;;		Nothing
  9511 ;; This function is called by:
  9512 ;;		_Mcu_Initialization
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           
  9517                           ;psect for function _Fosc_Set
  9518  1C44                     _Fosc_Set:	
  9519                           
  9520                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _Fosc_Set: [wreg]
  9524  1C44  3078               	movlw	120
  9525  1C45  0021               	movlb	1	; select bank1
  9526  1C46  0099               	movwf	25	;volatile
  9527  1C47  0008               	return
  9528  1C48                     __end_of_Fosc_Set:	
  9529                           
  9530                           	psect	text50
  9531  1C5F                     __ptext50:	
  9532 ;; *************** function _ADC_Set *****************
  9533 ;; Defined at:
  9534 ;;		line 419 in file "../src/MCU_B1.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		wreg
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;Total ram usage:        0 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    5
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_Mcu_Initialization
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           
  9563                           ;psect for function _ADC_Set
  9564  1C5F                     _ADC_Set:	
  9565                           
  9566                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _ADC_Set: [wreg]
  9570  1C5F  30F3               	movlw	243
  9571  1C60  0021               	movlb	1	; select bank1
  9572  1C61  009E               	movwf	30	;volatile
  9573                           
  9574                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9575  1C62  30C1               	movlw	193
  9576  1C63  0022               	movlb	2	; select bank2
  9577  1C64  0097               	movwf	23	;volatile
  9578  1C65  0008               	return
  9579  1C66                     __end_of_ADC_Set:	
  9580                           
  9581                           	psect	text51
  9582  0041                     __ptext51:	
  9583 ;; *************** function _Load_Main *****************
  9584 ;; Defined at:
  9585 ;;		line 39 in file "../src/OverLoad_B1.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;		None
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;  i               2   12[BANK0 ] int 
  9590 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9591 ;;  error           1   10[BANK0 ] unsigned char 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;		None               void
  9594 ;; Registers used:
  9595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        6 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    7
  9608 ;; This function calls:
  9609 ;;		___lwdiv
  9610 ;;		___wmul
  9611 ;;		_getAll_DimmerLights_AdjSw
  9612 ;;		_getDimmer_LoadGO
  9613 ;;		_getDimmer_Load_Status
  9614 ;;		_getMain_All_Error_Status
  9615 ;;		_getMain_LightsStatus
  9616 ;;		_getMain_Lights_Count
  9617 ;;		_setLoad_AH_AL_Restore
  9618 ;; This function is called by:
  9619 ;;		_main
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _Load_Main
  9625  0041                     _Load_Main:	
  9626                           
  9627                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9631  0041  3000               	movlw	0
  9632  0042  3192  226B  3180   	fcall	_getMain_All_Error_Status
  9633  0045  0020               	movlb	0	; select bank0
  9634  0046  00A8               	movwf	??_Load_Main
  9635  0047  0828               	movf	??_Load_Main,w
  9636  0048  00AA               	movwf	Load_Main@error
  9637                           
  9638                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9639  0049  01AB               	clrf	Load_Main@Load_Status
  9640                           
  9641                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9642  004A  0022               	movlb	2	; select bank2
  9643  004B  1C25               	btfss	_Load^(0+256),0
  9644  004C  29E7               	goto	l1564
  9645                           
  9646                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9647  004D  319C  24B4  3180   	fcall	_getMain_LightsStatus
  9648  0050  3800               	iorlw	0
  9649  0051  1D03               	skipz
  9650  0052  2855               	goto	l9974
  9651                           
  9652                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9653  0053  0022               	movlb	2	; select bank2
  9654  0054  2876               	goto	l9992
  9655  0055                     l9974:	
  9656                           ;OverLoad_B1.c: 66: } else {
  9657                           
  9658                           
  9659                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9660  0055  0020               	movlb	0	; select bank0
  9661  0056  08AA               	movf	Load_Main@error,f
  9662  0057  1D03               	skipz
  9663  0058  2873               	goto	l1567
  9664  0059  3191  21B1  3180   	fcall	_getAll_DimmerLights_AdjSw
  9665  005C  3800               	iorlw	0
  9666  005D  1D03               	skipz
  9667  005E  2873               	goto	l1567
  9668                           
  9669                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9670  005F  0022               	movlb	2	; select bank2
  9671  0060  14A5               	bsf	_Load^(0+256),1
  9672                           
  9673                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9674  0061  319C  2475  3180   	fcall	_getDimmer_LoadGO
  9675  0064  3A01               	xorlw	1
  9676  0065  1D03               	skipz
  9677  0066  286E               	goto	l1568
  9678                           
  9679                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9680  0067  0022               	movlb	2	; select bank2
  9681  0068  1DA5               	btfss	_Load^(0+256),3
  9682  0069  1BA5               	btfsc	_Load^(0+256),7
  9683  006A  2877               	goto	l1566
  9684                           
  9685                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9686  006B  15A5               	bsf	_Load^(0+256),3
  9687                           
  9688                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9689  006C  01CE               	clrf	(_Load^(0+256)+41)
  9690                           
  9691                           ;OverLoad_B1.c: 76: }
  9692                           ;OverLoad_B1.c: 77: } else {
  9693  006D  2877               	goto	l1566
  9694  006E                     l1568:	
  9695                           
  9696                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9697  006E  0022               	movlb	2	; select bank2
  9698  006F  1FA5               	btfss	_Load^(0+256),7
  9699  0070  2877               	goto	l1566
  9700                           
  9701                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9702  0071  13A5               	bcf	_Load^(0+256),7
  9703                           
  9704                           ;OverLoad_B1.c: 80: }
  9705                           ;OverLoad_B1.c: 81: }
  9706                           ;OverLoad_B1.c: 82: } else {
  9707  0072  2877               	goto	l1566
  9708  0073                     l1567:	
  9709                           
  9710                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9711  0073  0022               	movlb	2	; select bank2
  9712  0074  1CA5               	btfss	_Load^(0+256),1
  9713  0075  2877               	goto	l1566
  9714  0076                     l9992:	
  9715                           
  9716                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9717  0076  10A5               	bcf	_Load^(0+256),1
  9718  0077                     l1566:	
  9719                           
  9720                           ;OverLoad_B1.c: 85: }
  9721                           ;OverLoad_B1.c: 86: }
  9722                           ;OverLoad_B1.c: 88: }
  9723                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9724  0077  1CA5               	btfss	_Load^(0+256),1
  9725  0078  29C3               	goto	l1574
  9726                           
  9727                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9728  0079  1525               	bsf	_Load^(0+256),2
  9729                           
  9730                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9731  007A  1E25               	btfss	_Load^(0+256),4
  9732  007B  29C1               	goto	l1575
  9733                           
  9734                           ;OverLoad_B1.c: 95: Load.Time++;
  9735  007C  3001               	movlw	1
  9736  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9737  007E  3000               	movlw	0
  9738  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9739                           
  9740                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9741  0080  3000               	movlw	0
  9742  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9743  0082  3005               	movlw	5
  9744  0083  1903               	skipnz
  9745  0084  0226               	subwf	(_Load^(0+256)+1),w
  9746  0085  1C03               	skipc
  9747  0086  0008               	return
  9748                           
  9749                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9750  0087  01A6               	clrf	(_Load^(0+256)+1)
  9751  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9752                           
  9753                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9754  0089  1225               	bcf	_Load^(0+256),4
  9755                           
  9756                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9757  008A  3001               	movlw	1
  9758  008B  0020               	movlb	0	; select bank0
  9759  008C  00AC               	movwf	Load_Main@i
  9760  008D  3000               	movlw	0
  9761  008E  00AD               	movwf	Load_Main@i+1
  9762  008F  082D               	movf	Load_Main@i+1,w
  9763  0090  3A80               	xorlw	128
  9764  0091  00A8               	movwf	??_Load_Main
  9765  0092  3080               	movlw	128
  9766  0093  0228               	subwf	??_Load_Main,w
  9767  0094  1D03               	skipz
  9768  0095  2898               	goto	u11425
  9769  0096  3004               	movlw	4
  9770  0097  022C               	subwf	Load_Main@i,w
  9771  0098                     u11425:	
  9772  0098  1803               	btfsc	3,0
  9773  0099  28CC               	goto	l10014
  9774  009A                     l10008:	
  9775                           
  9776                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9777  009A  0020               	movlb	0	; select bank0
  9778  009B  352C               	lslf	Load_Main@i,w
  9779  009C  3E30               	addlw	(_Load+11)& (0+255)
  9780  009D  0086               	movwf	6
  9781  009E  3001               	movlw	1	; select bank2/3
  9782  009F  0087               	movwf	7
  9783  00A0  3F40               	moviw [0]fsr1
  9784  00A1  00A8               	movwf	??_Load_Main
  9785  00A2  3F41               	moviw [1]fsr1
  9786  00A3  00A9               	movwf	??_Load_Main+1
  9787  00A4  0828               	movf	??_Load_Main,w
  9788  00A5  0022               	movlb	2	; select bank2
  9789  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9790  00A7  0020               	movlb	0	; select bank0
  9791  00A8  0829               	movf	??_Load_Main+1,w
  9792  00A9  0022               	movlb	2	; select bank2
  9793  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9794                           
  9795                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9796  00AB  0020               	movlb	0	; select bank0
  9797  00AC  352C               	lslf	Load_Main@i,w
  9798  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9799  00AE  0086               	movwf	6
  9800  00AF  3001               	movlw	1	; select bank2/3
  9801  00B0  0087               	movwf	7
  9802  00B1  3F40               	moviw [0]fsr1
  9803  00B2  00A8               	movwf	??_Load_Main
  9804  00B3  3F41               	moviw [1]fsr1
  9805  00B4  00A9               	movwf	??_Load_Main+1
  9806  00B5  0828               	movf	??_Load_Main,w
  9807  00B6  0022               	movlb	2	; select bank2
  9808  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9809  00B8  0020               	movlb	0	; select bank0
  9810  00B9  0829               	movf	??_Load_Main+1,w
  9811  00BA  0022               	movlb	2	; select bank2
  9812  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9813  00BC  3001               	movlw	1
  9814  00BD  0020               	movlb	0	; select bank0
  9815  00BE  07AC               	addwf	Load_Main@i,f
  9816  00BF  3000               	movlw	0
  9817  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9818  00C1  082D               	movf	Load_Main@i+1,w
  9819  00C2  3A80               	xorlw	128
  9820  00C3  00A8               	movwf	??_Load_Main
  9821  00C4  3080               	movlw	128
  9822  00C5  0228               	subwf	??_Load_Main,w
  9823  00C6  1D03               	skipz
  9824  00C7  28CA               	goto	u11435
  9825  00C8  3004               	movlw	4
  9826  00C9  022C               	subwf	Load_Main@i,w
  9827  00CA                     u11435:	
  9828  00CA  1C03               	skipc
  9829  00CB  289A               	goto	l10008
  9830  00CC                     l10014:	
  9831                           
  9832                           ;OverLoad_B1.c: 103: }
  9833                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9834  00CC  3003               	movlw	3
  9835  00CD  0020               	movlb	0	; select bank0
  9836  00CE  00A0               	movwf	___lwdiv@divisor
  9837  00CF  3000               	movlw	0
  9838  00D0  00A1               	movwf	___lwdiv@divisor+1
  9839  00D1  0022               	movlb	2	; select bank2
  9840  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9841  00D3  0020               	movlb	0	; select bank0
  9842  00D4  01A3               	clrf	___lwdiv@dividend+1
  9843  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9844  00D6  0022               	movlb	2	; select bank2
  9845  00D7  082A               	movf	(_Load^(0+256)+5),w
  9846  00D8  0020               	movlb	0	; select bank0
  9847  00D9  01A2               	clrf	___lwdiv@dividend
  9848  00DA  07A2               	addwf	___lwdiv@dividend,f
  9849  00DB  3193  23A8  3180   	fcall	___lwdiv
  9850  00DE  0020               	movlb	0	; select bank0
  9851  00DF  0821               	movf	?___lwdiv+1,w
  9852  00E0  0022               	movlb	2	; select bank2
  9853  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9854  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9855  00E3  0020               	movlb	0	; select bank0
  9856  00E4  0820               	movf	?___lwdiv,w
  9857  00E5  0022               	movlb	2	; select bank2
  9858  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9859  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9860                           
  9861                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9862  00E8  3003               	movlw	3
  9863  00E9  0020               	movlb	0	; select bank0
  9864  00EA  00A0               	movwf	___lwdiv@divisor
  9865  00EB  3000               	movlw	0
  9866  00EC  00A1               	movwf	___lwdiv@divisor+1
  9867  00ED  0022               	movlb	2	; select bank2
  9868  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9869  00EF  0020               	movlb	0	; select bank0
  9870  00F0  01A3               	clrf	___lwdiv@dividend+1
  9871  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9872  00F2  0022               	movlb	2	; select bank2
  9873  00F3  082C               	movf	(_Load^(0+256)+7),w
  9874  00F4  0020               	movlb	0	; select bank0
  9875  00F5  01A2               	clrf	___lwdiv@dividend
  9876  00F6  07A2               	addwf	___lwdiv@dividend,f
  9877  00F7  3193  23A8  3180   	fcall	___lwdiv
  9878  00FA  0020               	movlb	0	; select bank0
  9879  00FB  0821               	movf	?___lwdiv+1,w
  9880  00FC  0022               	movlb	2	; select bank2
  9881  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9882  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9883  00FF  0020               	movlb	0	; select bank0
  9884  0100  0820               	movf	?___lwdiv,w
  9885  0101  0022               	movlb	2	; select bank2
  9886  0102  01AC               	clrf	(_Load^(0+256)+7)
  9887  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9888                           
  9889                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9890  0104  319F  2768  3180   	fcall	_setLoad_AH_AL_Restore
  9891                           
  9892                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  9893  0107  0022               	movlb	2	; select bank2
  9894  0108  082B               	movf	((_Load+1)^(0+256)+5),w
  9895  0109  022D               	subwf	((_Load+1)^(0+256)+7),w
  9896  010A  1D03               	skipz
  9897  010B  290E               	goto	u11445
  9898  010C  082A               	movf	(_Load^(0+256)+5),w
  9899  010D  022C               	subwf	(_Load^(0+256)+7),w
  9900  010E                     u11445:	
  9901  010E  1803               	skipnc
  9902  010F  0008               	return
  9903                           
  9904                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9905  0110  3005               	movlw	5
  9906  0111  3E25               	addlw	_Load& (0+255)
  9907  0112  0086               	movwf	6
  9908  0113  3001               	movlw	1	; select bank2/3
  9909  0114  0087               	movwf	7
  9910  0115  092C               	comf	(_Load^(0+256)+7),w
  9911  0116  0020               	movlb	0	; select bank0
  9912  0117  00A8               	movwf	??_Load_Main
  9913  0118  0022               	movlb	2	; select bank2
  9914  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9915  011A  0020               	movlb	0	; select bank0
  9916  011B  00A9               	movwf	??_Load_Main+1
  9917  011C  0AA8               	incf	??_Load_Main,f
  9918  011D  1903               	skipnz
  9919  011E  0AA9               	incf	??_Load_Main+1,f
  9920  011F  3F40               	moviw [0]fsr1
  9921  0120  0728               	addwf	??_Load_Main,w
  9922  0121  0022               	movlb	2	; select bank2
  9923  0122  00C4               	movwf	(_Load^(0+256)+31)
  9924  0123  3F41               	moviw [1]fsr1
  9925  0124  0020               	movlb	0	; select bank0
  9926  0125  3D29               	addwfc	??_Load_Main+1,w
  9927  0126  0022               	movlb	2	; select bank2
  9928  0127  00C5               	movwf	(_Load^(0+256)+32)
  9929                           
  9930                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9931  0128  01AA               	clrf	(_Load^(0+256)+5)
  9932  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9933                           
  9934                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9935  012A  01AC               	clrf	(_Load^(0+256)+7)
  9936  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9937                           
  9938                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9939  012C  1DA5               	btfss	_Load^(0+256),3
  9940  012D  298D               	goto	l10054
  9941                           
  9942                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9943  012E  3002               	movlw	2
  9944  012F  024E               	subwf	(_Load^(0+256)+41),w
  9945  0130  1803               	skipnc
  9946  0131  298D               	goto	l10054
  9947                           
  9948                           ;OverLoad_B1.c: 115: Load.Count++;
  9949  0132  3001               	movlw	1
  9950  0133  0020               	movlb	0	; select bank0
  9951  0134  00A8               	movwf	??_Load_Main
  9952  0135  0828               	movf	??_Load_Main,w
  9953  0136  0022               	movlb	2	; select bank2
  9954  0137  07CE               	addwf	(_Load^(0+256)+41),f
  9955                           
  9956                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  9957  0138  319C  247D  3180   	fcall	_getDimmer_Load_Status
  9958  013B  0020               	movlb	0	; select bank0
  9959  013C  00A8               	movwf	??_Load_Main
  9960  013D  0828               	movf	??_Load_Main,w
  9961  013E  00AB               	movwf	Load_Main@Load_Status
  9962                           
  9963                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  9964  013F  319D  253B  3180   	fcall	_getMain_Lights_Count
  9965  0142  0020               	movlb	0	; select bank0
  9966  0143  00A8               	movwf	??_Load_Main
  9967  0144  0828               	movf	??_Load_Main,w
  9968  0145  0022               	movlb	2	; select bank2
  9969  0146  00D1               	movwf	(_Load^(0+256)+44)
  9970                           
  9971                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  9972  0147  084E               	movf	(_Load^(0+256)+41),w
  9973  0148  3A01               	xorlw	1
  9974  0149  1D03               	skipz
  9975  014A  2955               	goto	l10040
  9976                           
  9977                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  9978  014B  3002               	movlw	2
  9979  014C  0020               	movlb	0	; select bank0
  9980  014D  00A8               	movwf	??_Load_Main
  9981  014E  0828               	movf	??_Load_Main,w
  9982  014F  0022               	movlb	2	; select bank2
  9983  0150  00D0               	movwf	(_Load^(0+256)+43)
  9984                           
  9985                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
  9986  0151  3074               	movlw	116
  9987  0152  00CA               	movwf	(_Load^(0+256)+37)
  9988  0153  3004               	movlw	4
  9989  0154  2960               	goto	L3
  9990  0155                     l10040:	
  9991                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  9992                           
  9993  0155  084E               	movf	(_Load^(0+256)+41),w
  9994  0156  3A02               	xorlw	2
  9995  0157  1D03               	skipz
  9996  0158  298D               	goto	l10054
  9997                           
  9998                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
  9999  0159  0851               	movf	(_Load^(0+256)+44),w
 10000  015A  3A01               	xorlw	1
 10001  015B  1D03               	skipz
 10002  015C  2962               	goto	l10046
 10003                           
 10004                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.8*57);
 10005  015D  3066               	movlw	102
 10006  015E  00CA               	movwf	(_Load^(0+256)+37)
 10007  015F  3000               	movlw	0
 10008  0160                     L3:	
 10009  0160  00CB               	movwf	(_Load^(0+256)+38)
 10010                           
 10011                           ;OverLoad_B1.c: 124: } else {
 10012  0161  298D               	goto	l10054
 10013  0162                     l10046:	
 10014                           
 10015                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10016  0162  0020               	movlb	0	; select bank0
 10017  0163  08AB               	movf	Load_Main@Load_Status,f
 10018  0164  1D03               	skipz
 10019  0165  2981               	goto	l10050
 10020                           
 10021                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.8*57) * Load.LightsCount;
 10022  0166  0022               	movlb	2	; select bank2
 10023  0167  0851               	movf	(_Load^(0+256)+44),w
 10024  0168  0020               	movlb	0	; select bank0
 10025  0169  00A8               	movwf	??_Load_Main
 10026  016A  01A9               	clrf	??_Load_Main+1
 10027  016B  0828               	movf	??_Load_Main,w
 10028  016C  00A0               	movwf	___wmul@multiplier
 10029  016D  0829               	movf	??_Load_Main+1,w
 10030  016E  00A1               	movwf	___wmul@multiplier+1
 10031  016F  3066               	movlw	102
 10032  0170  00A2               	movwf	___wmul@multiplicand
 10033  0171  3000               	movlw	0
 10034  0172  00A3               	movwf	___wmul@multiplicand+1
 10035  0173  3190  2066  3180   	fcall	___wmul
 10036  0176  0020               	movlb	0	; select bank0
 10037  0177  0821               	movf	?___wmul+1,w
 10038  0178  0022               	movlb	2	; select bank2
 10039  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10040  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10041  017B  0020               	movlb	0	; select bank0
 10042  017C  0820               	movf	?___wmul,w
 10043  017D  0022               	movlb	2	; select bank2
 10044  017E  01CA               	clrf	(_Load^(0+256)+37)
 10045  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10046                           
 10047                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10048  0180  298D               	goto	l10054
 10049  0181                     l10050:	
 10050  0181  0020               	movlb	0	; select bank0
 10051  0182  082B               	movf	Load_Main@Load_Status,w
 10052  0183  3A01               	xorlw	1
 10053  0184  1D03               	skipz
 10054  0185  298D               	goto	l10054
 10055                           
 10056                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10057  0186  0022               	movlb	2	; select bank2
 10058  0187  082E               	movf	(_Load^(0+256)+9),w
 10059  0188  3E66               	addlw	102
 10060  0189  00CA               	movwf	(_Load^(0+256)+37)
 10061  018A  3000               	movlw	0
 10062  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10063  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10064  018D                     l10054:	
 10065                           
 10066                           ;OverLoad_B1.c: 129: }
 10067                           ;OverLoad_B1.c: 130: }
 10068                           ;OverLoad_B1.c: 131: }
 10069                           ;OverLoad_B1.c: 132: }
 10070                           ;OverLoad_B1.c: 133: }
 10071                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10072  018D  0022               	movlb	2	; select bank2
 10073  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10074  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10075  0190  1D03               	skipz
 10076  0191  2994               	goto	u11525
 10077  0192  084A               	movf	(_Load^(0+256)+37),w
 10078  0193  0244               	subwf	(_Load^(0+256)+31),w
 10079  0194                     u11525:	
 10080  0194  1C03               	skipc
 10081  0195  29A3               	goto	l10064
 10082                           
 10083                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10084  0196  3001               	movlw	1
 10085  0197  0020               	movlb	0	; select bank0
 10086  0198  00A8               	movwf	??_Load_Main
 10087  0199  0828               	movf	??_Load_Main,w
 10088  019A  0022               	movlb	2	; select bank2
 10089  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10090                           
 10091                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10092  019C  084F               	movf	(_Load^(0+256)+42),w
 10093  019D  0250               	subwf	(_Load^(0+256)+43),w
 10094  019E  1803               	skipnc
 10095  019F  0008               	return
 10096                           
 10097                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10098  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10099                           
 10100                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10101  01A1  16A5               	bsf	_Load^(0+256),5
 10102                           
 10103                           ;OverLoad_B1.c: 161: }
 10104                           ;OverLoad_B1.c: 162: } else {
 10105  01A2  0008               	return
 10106  01A3                     l10064:	
 10107                           
 10108                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10109  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10110                           
 10111                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10112  01A4  1DA5               	btfss	_Load^(0+256),3
 10113  01A5  0008               	return
 10114                           
 10115                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10116  01A6  3001               	movlw	1
 10117  01A7  0020               	movlb	0	; select bank0
 10118  01A8  00A8               	movwf	??_Load_Main
 10119  01A9  0828               	movf	??_Load_Main,w
 10120  01AA  0022               	movlb	2	; select bank2
 10121  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10122                           
 10123                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10124  01AC  3003               	movlw	3
 10125  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10126  01AE  1C03               	skipc
 10127  01AF  0008               	return
 10128                           
 10129                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10130  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10131                           
 10132                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10133  01B1  17A5               	bsf	_Load^(0+256),7
 10134                           
 10135                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10136  01B2  11A5               	bcf	_Load^(0+256),3
 10137                           
 10138                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10139  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10140                           
 10141                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10142  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10143  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10144  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10145  01B7  0844               	movf	(_Load^(0+256)+31),w
 10146  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10147  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10148                           
 10149                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10150  01BA  3003               	movlw	3
 10151  01BB  0020               	movlb	0	; select bank0
 10152  01BC  00A8               	movwf	??_Load_Main
 10153  01BD  0828               	movf	??_Load_Main,w
 10154  01BE  0022               	movlb	2	; select bank2
 10155  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10156                           
 10157                           ;OverLoad_B1.c: 176: }
 10158                           ;OverLoad_B1.c: 177: }
 10159                           ;OverLoad_B1.c: 200: }
 10160                           ;OverLoad_B1.c: 201: }
 10161                           ;OverLoad_B1.c: 202: }
 10162                           ;OverLoad_B1.c: 203: } else {
 10163  01C0  0008               	return
 10164  01C1                     l1575:	
 10165                           
 10166                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10167  01C1  1625               	bsf	_Load^(0+256),4
 10168                           
 10169                           ;OverLoad_B1.c: 205: }
 10170                           ;OverLoad_B1.c: 206: } else {
 10171  01C2  0008               	return
 10172  01C3                     l1574:	
 10173                           
 10174                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10175  01C3  1D25               	btfss	_Load^(0+256),2
 10176  01C4  29D6               	goto	l10102
 10177                           
 10178                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10179  01C5  1125               	bcf	_Load^(0+256),2
 10180                           
 10181                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10182  01C6  1225               	bcf	_Load^(0+256),4
 10183                           
 10184                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10185  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10186  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10187                           
 10188                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10189  01C9  319F  2768  3180   	fcall	_setLoad_AH_AL_Restore
 10190                           
 10191                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10192  01CC  0022               	movlb	2	; select bank2
 10193  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10194                           
 10195                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10196  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10197                           
 10198                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10199  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10200  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10201                           
 10202                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10203  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10204  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10205                           
 10206                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10207  01D3  11A5               	bcf	_Load^(0+256),3
 10208                           
 10209                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10210  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10211                           
 10212                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10213  01D5  13A5               	bcf	_Load^(0+256),7
 10214  01D6                     l10102:	
 10215                           
 10216                           ;OverLoad_B1.c: 248: }
 10217                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10218  01D6  1EA5               	btfss	_Load^(0+256),5
 10219  01D7  0008               	return
 10220                           
 10221                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10222  01D8  3001               	movlw	1
 10223  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10224  01DA  3000               	movlw	0
 10225  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10226                           
 10227                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10228  01DC  3003               	movlw	3
 10229  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10230  01DE  30E8               	movlw	232
 10231  01DF  1903               	skipnz
 10232  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10233  01E1  1C03               	skipc
 10234  01E2  0008               	return
 10235                           
 10236                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10237  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10238  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10239                           
 10240                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10241  01E5  12A5               	bcf	_Load^(0+256),5
 10242                           
 10243                           ;OverLoad_B1.c: 254: }
 10244                           ;OverLoad_B1.c: 255: }
 10245                           ;OverLoad_B1.c: 256: }
 10246                           ;OverLoad_B1.c: 257: } else {
 10247  01E6  0008               	return
 10248  01E7                     l1564:	
 10249                           
 10250                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10251  01E7  0021               	movlb	1	; select bank1
 10252  01E8  1C20               	btfss	_myMain^(0+128),0
 10253  01E9  0008               	return
 10254                           
 10255                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10256  01EA  0022               	movlb	2	; select bank2
 10257  01EB  1425               	bsf	_Load^(0+256),0
 10258  01EC  0008               	return
 10259  01ED                     __end_of_Load_Main:	
 10260                           
 10261                           	psect	text52
 10262  1D3B                     __ptext52:	
 10263 ;; *************** function _getMain_Lights_Count *****************
 10264 ;; Defined at:
 10265 ;;		line 467 in file "../src/Main_B1.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;  status1         1    1[BANK0 ] unsigned char 
 10270 ;;  count           1    0[BANK0 ] unsigned char 
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  1    wreg      unsigned char 
 10273 ;; Registers used:
 10274 ;;		wreg, status,2
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;Total ram usage:        2 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    5
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_Load_Main
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           
 10295                           ;psect for function _getMain_Lights_Count
 10296  1D3B                     _getMain_Lights_Count:	
 10297                           
 10298                           ;Main_B1.c: 468: char count = 0;
 10299                           
 10300                           ;incstack = 0
 10301                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10302  1D3B  0020               	movlb	0	; select bank0
 10303  1D3C  01A0               	clrf	getMain_Lights_Count@count
 10304                           
 10305                           ;Main_B1.c: 472: char status1 = 0;
 10306  1D3D  01A1               	clrf	getMain_Lights_Count@status1
 10307                           
 10308                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10309  1D3E  3000               	movlw	0
 10310  1D3F  0022               	movlb	2	; select bank2
 10311  1D40  1954               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10312  1D41  3001               	movlw	1
 10313  1D42  0020               	movlb	0	; select bank0
 10314  1D43  00A1               	movwf	getMain_Lights_Count@status1
 10315                           
 10316                           ;Main_B1.c: 498: return count = status1;
 10317  1D44  0821               	movf	getMain_Lights_Count@status1,w
 10318  1D45  00A0               	movwf	getMain_Lights_Count@count
 10319  1D46  0008               	return
 10320  1D47                     __end_of_getMain_Lights_Count:	
 10321                           
 10322                           	psect	text53
 10323  1C7D                     __ptext53:	
 10324 ;; *************** function _getDimmer_Load_Status *****************
 10325 ;; Defined at:
 10326 ;;		line 888 in file "../src/Dimmer_B1.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  status          1    0[BANK0 ] unsigned char 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      unsigned char 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        1 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_Load_Main
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _getDimmer_Load_Status
 10356  1C7D                     _getDimmer_Load_Status:	
 10357                           
 10358                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10362  1C7D  3000               	movlw	0
 10363  1C7E  0021               	movlb	1	; select bank1
 10364  1C7F  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10365  1C80  3001               	movlw	1
 10366  1C81  0020               	movlb	0	; select bank0
 10367  1C82  00A0               	movwf	getDimmer_Load_Status@status
 10368                           
 10369                           ;Dimmer_B1.c: 890: return status;
 10370  1C83  0820               	movf	getDimmer_Load_Status@status,w
 10371  1C84  0008               	return
 10372  1C85                     __end_of_getDimmer_Load_Status:	
 10373                           
 10374                           	psect	text54
 10375  1C75                     __ptext54:	
 10376 ;; *************** function _getDimmer_LoadGO *****************
 10377 ;; Defined at:
 10378 ;;		line 623 in file "../src/Dimmer_B1.c"
 10379 ;; Parameters:    Size  Location     Type
 10380 ;;		None
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  1    wreg      unsigned char 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;Total ram usage:        1 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    5
 10399 ;; This function calls:
 10400 ;;		Nothing
 10401 ;; This function is called by:
 10402 ;;		_Load_Main
 10403 ;; This function uses a non-reentrant model
 10404 ;;
 10405                           
 10406                           
 10407                           ;psect for function _getDimmer_LoadGO
 10408  1C75                     _getDimmer_LoadGO:	
 10409                           
 10410                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10411                           
 10412                           ;incstack = 0
 10413                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10414  1C75  3000               	movlw	0
 10415  1C76  0021               	movlb	1	; select bank1
 10416  1C77  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10417  1C78  3001               	movlw	1
 10418  1C79  0020               	movlb	0	; select bank0
 10419  1C7A  00A0               	movwf	getDimmer_LoadGO@loadgo
 10420                           
 10421                           ;Dimmer_B1.c: 625: return loadgo;
 10422  1C7B  0820               	movf	getDimmer_LoadGO@loadgo,w
 10423  1C7C  0008               	return
 10424  1C7D                     __end_of_getDimmer_LoadGO:	
 10425                           
 10426                           	psect	text55
 10427  11B1                     __ptext55:	
 10428 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10429 ;; Defined at:
 10430 ;;		line 832 in file "../src/Dimmer_B1.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;		None
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  i               2    4[BANK0 ] int 
 10435 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10436 ;;  count           1    3[BANK0 ] unsigned char 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  1    wreg      unsigned char 
 10439 ;; Registers used:
 10440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;Total ram usage:        5 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    6
 10453 ;; This function calls:
 10454 ;;		_DimmerLightsPointSelect
 10455 ;; This function is called by:
 10456 ;;		_Load_Main
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           
 10461                           ;psect for function _getAll_DimmerLights_AdjSw
 10462  11B1                     _getAll_DimmerLights_AdjSw:	
 10463                           
 10464                           ;Dimmer_B1.c: 833: char count = 1;
 10465                           
 10466                           ;incstack = 0
 10467                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10468  11B1  0020               	movlb	0	; select bank0
 10469  11B2  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10470  11B3  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10471                           
 10472                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10473  11B4  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10474                           
 10475                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10476  11B5  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10477  11B6  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10478  11B7                     l9300:	
 10479  11B7  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10480  11B8  3A80               	xorlw	128
 10481  11B9  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10482  11BA  3080               	movlw	128
 10483  11BB  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10484  11BC  1D03               	skipz
 10485  11BD  29C0               	goto	u10185
 10486  11BE  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10487  11BF  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10488  11C0                     u10185:	
 10489  11C0  1803               	btfsc	3,0
 10490  11C1  29D9               	goto	l9302
 10491                           
 10492                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10493  11C2  0020               	movlb	0	; select bank0
 10494  11C3  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10495  11C4  3E01               	addlw	1
 10496  11C5  319C  24D4  3191   	fcall	_DimmerLightsPointSelect
 10497                           
 10498                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10499  11C8  0020               	movlb	0	; select bank0
 10500  11C9  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10501  11CA  1D03               	skipz
 10502  11CB  29D4               	goto	l9298
 10503                           
 10504                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10505  11CC  0A6F               	incf	_DimmerLights,w
 10506  11CD  0086               	movwf	6
 10507  11CE  3001               	movlw	1	; select bank2/3
 10508  11CF  0087               	movwf	7
 10509  11D0  3000               	movlw	0
 10510  11D1  1B01               	btfsc	1,6
 10511  11D2  3001               	movlw	1
 10512  11D3  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10513  11D4                     l9298:	
 10514  11D4  3001               	movlw	1
 10515  11D5  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10516  11D6  3000               	movlw	0
 10517  11D7  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10518  11D8  29B7               	goto	l9300
 10519  11D9                     l9302:	
 10520                           
 10521                           ;Dimmer_B1.c: 840: }
 10522                           ;Dimmer_B1.c: 841: }
 10523                           ;Dimmer_B1.c: 842: return adjsw;
 10524  11D9  0020               	movlb	0	; select bank0
 10525  11DA  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10526  11DB  0008               	return
 10527  11DC                     __end_of_getAll_DimmerLights_AdjSw:	
 10528                           
 10529                           	psect	text56
 10530  1066                     __ptext56:	
 10531 ;; *************** function ___wmul *****************
 10532 ;; Defined at:
 10533 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10536 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;  product         2    4[BANK0 ] unsigned int 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  2    0[BANK0 ] unsigned int 
 10541 ;; Registers used:
 10542 ;;		wreg, status,2, status,0
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        6 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Load_Main
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function ___wmul
 10564  1066                     ___wmul:	
 10565                           
 10566                           ;incstack = 0
 10567                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10568  1066  0020               	movlb	0	; select bank0
 10569  1067  01A4               	clrf	___wmul@product
 10570  1068  01A5               	clrf	___wmul@product+1
 10571  1069                     l9678:	
 10572  1069  1C20               	btfss	___wmul@multiplier,0
 10573  106A  286F               	goto	l2591
 10574  106B  0822               	movf	___wmul@multiplicand,w
 10575  106C  07A4               	addwf	___wmul@product,f
 10576  106D  0823               	movf	___wmul@multiplicand+1,w
 10577  106E  3DA5               	addwfc	___wmul@product+1,f
 10578  106F                     l2591:	
 10579  106F  3001               	movlw	1
 10580  1070                     u10805:	
 10581  1070  35A2               	lslf	___wmul@multiplicand,f
 10582  1071  0DA3               	rlf	___wmul@multiplicand+1,f
 10583  1072  0B89               	decfsz	9,f
 10584  1073  2870               	goto	u10805
 10585  1074  3001               	movlw	1
 10586  1075                     u10815:	
 10587  1075  36A1               	lsrf	___wmul@multiplier+1,f
 10588  1076  0CA0               	rrf	___wmul@multiplier,f
 10589  1077  0B89               	decfsz	9,f
 10590  1078  2875               	goto	u10815
 10591  1079  0821               	movf	___wmul@multiplier+1,w
 10592  107A  0420               	iorwf	___wmul@multiplier,w
 10593  107B  1D03               	skipz
 10594  107C  2869               	goto	l9678
 10595  107D  0825               	movf	___wmul@product+1,w
 10596  107E  01A1               	clrf	?___wmul+1
 10597  107F  07A1               	addwf	?___wmul+1,f
 10598  1080  0824               	movf	___wmul@product,w
 10599  1081  01A0               	clrf	?___wmul
 10600  1082  07A0               	addwf	?___wmul,f
 10601  1083  0008               	return
 10602  1084                     __end_of___wmul:	
 10603                           
 10604                           	psect	text57
 10605  13A8                     __ptext57:	
 10606 ;; *************** function ___lwdiv *****************
 10607 ;; Defined at:
 10608 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;  divisor         2    0[BANK0 ] unsigned int 
 10611 ;;  dividend        2    2[BANK0 ] unsigned int 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  quotient        2    6[BANK0 ] unsigned int 
 10614 ;;  counter         1    5[BANK0 ] unsigned char 
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  2    0[BANK0 ] unsigned int 
 10617 ;; Registers used:
 10618 ;;		wreg, status,2, status,0
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10624 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;Total ram usage:        8 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    5
 10631 ;; This function calls:
 10632 ;;		Nothing
 10633 ;; This function is called by:
 10634 ;;		_Load_Main
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           
 10639                           ;psect for function ___lwdiv
 10640  13A8                     ___lwdiv:	
 10641                           
 10642                           ;incstack = 0
 10643                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10644  13A8  0020               	movlb	0	; select bank0
 10645  13A9  01A6               	clrf	___lwdiv@quotient
 10646  13AA  01A7               	clrf	___lwdiv@quotient+1
 10647  13AB  0821               	movf	___lwdiv@divisor+1,w
 10648  13AC  0420               	iorwf	___lwdiv@divisor,w
 10649  13AD  1903               	skipnz
 10650  13AE  2BD8               	goto	l9710
 10651  13AF  01A5               	clrf	___lwdiv@counter
 10652  13B0  0AA5               	incf	___lwdiv@counter,f
 10653  13B1                     l9698:	
 10654  13B1  1BA1               	btfsc	___lwdiv@divisor+1,7
 10655  13B2  2BBD               	goto	l9700
 10656  13B3  3001               	movlw	1
 10657  13B4                     u10845:	
 10658  13B4  35A0               	lslf	___lwdiv@divisor,f
 10659  13B5  0DA1               	rlf	___lwdiv@divisor+1,f
 10660  13B6  0B89               	decfsz	9,f
 10661  13B7  2BB4               	goto	u10845
 10662  13B8  3001               	movlw	1
 10663  13B9  00A4               	movwf	??___lwdiv
 10664  13BA  0824               	movf	??___lwdiv,w
 10665  13BB  07A5               	addwf	___lwdiv@counter,f
 10666  13BC  2BB1               	goto	l9698
 10667  13BD                     l9700:	
 10668  13BD  3001               	movlw	1
 10669  13BE                     u10865:	
 10670  13BE  35A6               	lslf	___lwdiv@quotient,f
 10671  13BF  0DA7               	rlf	___lwdiv@quotient+1,f
 10672  13C0  0B89               	decfsz	9,f
 10673  13C1  2BBE               	goto	u10865
 10674  13C2  0821               	movf	___lwdiv@divisor+1,w
 10675  13C3  0223               	subwf	___lwdiv@dividend+1,w
 10676  13C4  1D03               	skipz
 10677  13C5  2BC8               	goto	u10875
 10678  13C6  0820               	movf	___lwdiv@divisor,w
 10679  13C7  0222               	subwf	___lwdiv@dividend,w
 10680  13C8                     u10875:	
 10681  13C8  1C03               	skipc
 10682  13C9  2BCF               	goto	l9706
 10683  13CA  0820               	movf	___lwdiv@divisor,w
 10684  13CB  02A2               	subwf	___lwdiv@dividend,f
 10685  13CC  0821               	movf	___lwdiv@divisor+1,w
 10686  13CD  3BA3               	subwfb	___lwdiv@dividend+1,f
 10687  13CE  1426               	bsf	___lwdiv@quotient,0
 10688  13CF                     l9706:	
 10689  13CF  3001               	movlw	1
 10690  13D0                     u10885:	
 10691  13D0  36A1               	lsrf	___lwdiv@divisor+1,f
 10692  13D1  0CA0               	rrf	___lwdiv@divisor,f
 10693  13D2  0B89               	decfsz	9,f
 10694  13D3  2BD0               	goto	u10885
 10695  13D4  3001               	movlw	1
 10696  13D5  02A5               	subwf	___lwdiv@counter,f
 10697  13D6  1D03               	btfss	3,2
 10698  13D7  2BBD               	goto	l9700
 10699  13D8                     l9710:	
 10700  13D8  0827               	movf	___lwdiv@quotient+1,w
 10701  13D9  01A1               	clrf	?___lwdiv+1
 10702  13DA  07A1               	addwf	?___lwdiv+1,f
 10703  13DB  0826               	movf	___lwdiv@quotient,w
 10704  13DC  01A0               	clrf	?___lwdiv
 10705  13DD  07A0               	addwf	?___lwdiv,f
 10706  13DE  0008               	return
 10707  13DF                     __end_of___lwdiv:	
 10708                           
 10709                           	psect	text58
 10710  1C15                     __ptext58:	
 10711 ;; *************** function _Load_Initialization *****************
 10712 ;; Defined at:
 10713 ;;		line 9 in file "../src/OverLoad_B1.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;		None               void
 10720 ;; Registers used:
 10721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    6
 10734 ;; This function calls:
 10735 ;;		_setLoad_AH_AL_Restore
 10736 ;; This function is called by:
 10737 ;;		_main
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function _Load_Initialization
 10743  1C15                     _Load_Initialization:	
 10744                           
 10745                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10746                           
 10747                           ;incstack = 0
 10748                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10749  1C15  319F  2768         	fcall	_setLoad_AH_AL_Restore
 10750  1C17  0008               	return
 10751  1C18                     __end_of_Load_Initialization:	
 10752                           
 10753                           	psect	text59
 10754  1F68                     __ptext59:	
 10755 ;; *************** function _setLoad_AH_AL_Restore *****************
 10756 ;; Defined at:
 10757 ;;		line 285 in file "../src/OverLoad_B1.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;		None
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  i               1    1[BANK0 ] unsigned char 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;		None               void
 10764 ;; Registers used:
 10765 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;Total ram usage:        2 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    5
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		_Load_Initialization
 10782 ;;		_Load_Main
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           
 10787                           ;psect for function _setLoad_AH_AL_Restore
 10788  1F68                     _setLoad_AH_AL_Restore:	
 10789                           
 10790                           ;OverLoad_B1.c: 286: char i;
 10791                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10795  1F68  0020               	movlb	0	; select bank0
 10796  1F69  01A1               	clrf	setLoad_AH_AL_Restore@i
 10797  1F6A                     L4:	
 10798  1F6A  3005               	movlw	5
 10799  1F6B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10800  1F6C  1803               	btfsc	3,0
 10801  1F6D  0008               	return
 10802                           
 10803                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10804  1F6E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10805  1F6F  3E30               	addlw	(_Load+11)& (0+255)
 10806  1F70  0086               	movwf	6
 10807  1F71  3001               	movlw	1	; select bank2/3
 10808  1F72  0087               	movwf	7
 10809  1F73  3000               	movlw	0
 10810  1F74  3FC0               	movwi [0]fsr1
 10811  1F75  3FC1               	movwi [1]fsr1
 10812                           
 10813                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10814  1F76  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10815  1F77  3E3A               	addlw	(_Load+21)& (0+255)
 10816  1F78  0086               	movwf	6
 10817  1F79  3001               	movlw	1	; select bank2/3
 10818  1F7A  0087               	movwf	7
 10819  1F7B  30FF               	movlw	255
 10820  1F7C  3FC0               	movwi [0]fsr1
 10821  1F7D  30FF               	movlw	255
 10822  1F7E  3FC1               	movwi [1]fsr1
 10823  1F7F  3001               	movlw	1
 10824  1F80  00A0               	movwf	??_setLoad_AH_AL_Restore
 10825  1F81  0820               	movf	??_setLoad_AH_AL_Restore,w
 10826  1F82  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10827  1F83  2F6A               	goto	L4
 10828  1F84                     __end_of_setLoad_AH_AL_Restore:	
 10829                           
 10830                           	psect	text60
 10831  1C40                     __ptext60:	
 10832 ;; *************** function _LED_Main *****************
 10833 ;; Defined at:
 10834 ;;		line 47 in file "../src/LED_B1.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;		None
 10839 ;; Return value:  Size  Location     Type
 10840 ;;		None               void
 10841 ;; Registers used:
 10842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        0 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    7
 10855 ;; This function calls:
 10856 ;;		_setLED_Main
 10857 ;; This function is called by:
 10858 ;;		_main
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _LED_Main
 10864  1C40                     _LED_Main:	
 10865                           
 10866                           ;LED_B1.c: 62: setLED_Main(99);
 10867                           
 10868                           ;incstack = 0
 10869                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10870  1C40  3063               	movlw	99
 10871  1C41  3193  233C         	fcall	_setLED_Main
 10872  1C43  0008               	return
 10873  1C44                     __end_of_LED_Main:	
 10874                           
 10875                           	psect	text61
 10876  133C                     __ptext61:	
 10877 ;; *************** function _setLED_Main *****************
 10878 ;; Defined at:
 10879 ;;		line 221 in file "../src/LED_B1.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  led             1    wreg     unsigned char 
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;  led             1    4[BANK0 ] unsigned char 
 10884 ;; Return value:  Size  Location     Type
 10885 ;;		None               void
 10886 ;; Registers used:
 10887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;Total ram usage:        3 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    6
 10900 ;; This function calls:
 10901 ;;		_LedPointSelect
 10902 ;; This function is called by:
 10903 ;;		_LED_Main
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           
 10908                           ;psect for function _setLED_Main
 10909  133C                     _setLED_Main:	
 10910                           
 10911                           ;incstack = 0
 10912                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10913                           ;setLED_Main@led stored from wreg
 10914  133C  0020               	movlb	0	; select bank0
 10915  133D  00A4               	movwf	setLED_Main@led
 10916                           
 10917                           ;LED_B1.c: 222: LedPointSelect(led);
 10918  133E  0824               	movf	setLED_Main@led,w
 10919  133F  319D  2517  3193   	fcall	_LedPointSelect
 10920                           
 10921                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10922  1342  0021               	movlb	1	; select bank1
 10923  1343  084E               	movf	_LED^(0+128),w
 10924  1344  0086               	movwf	6
 10925  1345  3001               	movlw	1	; select bank2/3
 10926  1346  0087               	movwf	7
 10927  1347  1C81               	btfss	1,1
 10928  1348  0008               	return
 10929                           
 10930                           ;LED_B1.c: 224: LED->Time++;
 10931  1349  0A4E               	incf	_LED^(0+128),w
 10932  134A  0086               	movwf	6
 10933  134B  3001               	movlw	1	; select bank2/3
 10934  134C  0087               	movwf	7
 10935  134D  3001               	movlw	1
 10936  134E  0781               	addwf	1,f
 10937  134F  3141               	addfsr 1,1
 10938  1350  1803               	skipnc
 10939  1351  0A81               	incf	1,f
 10940                           
 10941                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10942  1352  0A4E               	incf	_LED^(0+128),w
 10943  1353  0086               	movwf	6
 10944  1354  3001               	movlw	1	; select bank2/3
 10945  1355  0087               	movwf	7
 10946  1356  3F40               	moviw [0]fsr1
 10947  1357  0020               	movlb	0	; select bank0
 10948  1358  00A2               	movwf	??_setLED_Main
 10949  1359  3F41               	moviw [1]fsr1
 10950  135A  00A3               	movwf	??_setLED_Main+1
 10951  135B  3000               	movlw	0
 10952  135C  0223               	subwf	??_setLED_Main+1,w
 10953  135D  3032               	movlw	50
 10954  135E  1903               	skipnz
 10955  135F  0222               	subwf	??_setLED_Main,w
 10956  1360  1C03               	skipc
 10957  1361  0008               	return
 10958                           
 10959                           ;LED_B1.c: 226: LED->Time = 0;
 10960  1362  0021               	movlb	1	; select bank1
 10961  1363  0A4E               	incf	_LED^(0+128),w
 10962  1364  0086               	movwf	6
 10963  1365  3001               	movlw	1	; select bank2/3
 10964  1366  0087               	movwf	7
 10965  1367  3000               	movlw	0
 10966  1368  3FC0               	movwi [0]fsr1
 10967  1369  3FC1               	movwi [1]fsr1
 10968                           
 10969                           ;LED_B1.c: 243: if (led == 99) {
 10970  136A  0020               	movlb	0	; select bank0
 10971  136B  0824               	movf	setLED_Main@led,w
 10972  136C  3A63               	xorlw	99
 10973  136D  1D03               	skipz
 10974  136E  0008               	return
 10975                           
 10976                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10977  136F  3020               	movlw	32
 10978  1370  068D               	xorwf	13,f
 10979  1371  0008               	return
 10980  1372                     __end_of_setLED_Main:	
 10981                           
 10982                           	psect	text62
 10983  1C3C                     __ptext62:	
 10984 ;; *************** function _LED_Initialization *****************
 10985 ;; Defined at:
 10986 ;;		line 31 in file "../src/LED_B1.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;		None               void
 10993 ;; Registers used:
 10994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    8
 11007 ;; This function calls:
 11008 ;;		_setLED_Initialization
 11009 ;; This function is called by:
 11010 ;;		_main
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           
 11015                           ;psect for function _LED_Initialization
 11016  1C3C                     _LED_Initialization:	
 11017                           
 11018                           ;LED_B1.c: 42: setLED_Initialization(99);
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11022  1C3C  3063               	movlw	99
 11023  1C3D  319E  260F         	fcall	_setLED_Initialization
 11024  1C3F  0008               	return
 11025  1C40                     __end_of_LED_Initialization:	
 11026                           
 11027                           	psect	text63
 11028  1E0F                     __ptext63:	
 11029 ;; *************** function _setLED_Initialization *****************
 11030 ;; Defined at:
 11031 ;;		line 69 in file "../src/LED_B1.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;  led             1    wreg     unsigned char 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  led             1    4[BANK0 ] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;		None               void
 11038 ;; Registers used:
 11039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;Total ram usage:        1 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    7
 11052 ;; This function calls:
 11053 ;;		_LedPointSelect
 11054 ;;		_setLED
 11055 ;; This function is called by:
 11056 ;;		_LED_Initialization
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           
 11061                           ;psect for function _setLED_Initialization
 11062  1E0F                     _setLED_Initialization:	
 11063                           
 11064                           ;incstack = 0
 11065                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11066                           ;setLED_Initialization@led stored from wreg
 11067  1E0F  0020               	movlb	0	; select bank0
 11068  1E10  00A4               	movwf	setLED_Initialization@led
 11069                           
 11070                           ;LED_B1.c: 70: LedPointSelect(led);
 11071  1E11  0824               	movf	setLED_Initialization@led,w
 11072  1E12  319D  2517  319E   	fcall	_LedPointSelect
 11073                           
 11074                           ;LED_B1.c: 71: LED->Enable = 1;
 11075  1E15  0021               	movlb	1	; select bank1
 11076  1E16  084E               	movf	_LED^(0+128),w
 11077  1E17  0086               	movwf	6
 11078  1E18  3001               	movlw	1	; select bank2/3
 11079  1E19  0087               	movwf	7
 11080  1E1A  1401               	bsf	1,0
 11081                           
 11082                           ;LED_B1.c: 72: setLED(led, 0);
 11083  1E1B  0020               	movlb	0	; select bank0
 11084  1E1C  01A2               	clrf	setLED@command
 11085  1E1D  0824               	movf	setLED_Initialization@led,w
 11086  1E1E  3193  23DF         	fcall	_setLED
 11087  1E20  0008               	return
 11088  1E21                     __end_of_setLED_Initialization:	
 11089                           
 11090                           	psect	text64
 11091  1306                     __ptext64:	
 11092 ;; *************** function _Flash_Memory_Main *****************
 11093 ;; Defined at:
 11094 ;;		line 965 in file "../src/MCU_B1.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;		None
 11099 ;; Return value:  Size  Location     Type
 11100 ;;		None               void
 11101 ;; Registers used:
 11102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;Total ram usage:        1 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:    8
 11115 ;; This function calls:
 11116 ;;		_Flash_Memory_Modify
 11117 ;;		_getMain_LightsStatus
 11118 ;; This function is called by:
 11119 ;;		_main
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           
 11124                           ;psect for function _Flash_Memory_Main
 11125  1306                     _Flash_Memory_Main:	
 11126                           
 11127                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11128                           
 11129                           ;incstack = 0
 11130                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11131  1306  0023               	movlb	3	; select bank3
 11132  1307  1C62               	btfss	(_Memory^(0+384)+36),0
 11133  1308  0008               	return
 11134                           
 11135                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11136  1309  319C  24B4  3193   	fcall	_getMain_LightsStatus
 11137  130C  3A00               	xorlw	0
 11138  130D  3000               	movlw	0
 11139  130E  1903               	skipnz
 11140  130F  3001               	movlw	1
 11141  1310  0020               	movlb	0	; select bank0
 11142  1311  00A6               	movwf	??_Flash_Memory_Main
 11143  1312  0DA6               	rlf	??_Flash_Memory_Main,f
 11144  1313  0023               	movlb	3	; select bank3
 11145  1314  0862               	movf	(_Memory^(0+384)+36),w
 11146  1315  0020               	movlb	0	; select bank0
 11147  1316  0626               	xorwf	??_Flash_Memory_Main,w
 11148  1317  39FD               	andlw	-3
 11149  1318  0626               	xorwf	??_Flash_Memory_Main,w
 11150  1319  0023               	movlb	3	; select bank3
 11151  131A  00E2               	movwf	(_Memory^(0+384)+36)
 11152                           
 11153                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11154  131B  1CE2               	btfss	(_Memory^(0+384)+36),1
 11155  131C  2B36               	goto	l1195
 11156                           
 11157                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11158  131D  15E2               	bsf	(_Memory^(0+384)+36),3
 11159                           
 11160                           ;MCU_B1.c: 970: Memory.Time++;
 11161  131E  3001               	movlw	1
 11162  131F  07E0               	addwf	(_Memory^(0+384)+34),f
 11163  1320  3000               	movlw	0
 11164  1321  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11165                           
 11166                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11167  1322  3022               	movlw	34
 11168  1323  3EBE               	addlw	_Memory& (0+255)
 11169  1324  0086               	movwf	6
 11170  1325  3001               	movlw	1	; select bank3/4
 11171  1326  0087               	movwf	7
 11172  1327  3F40               	moviw [0]fsr1
 11173  1328  3A19               	xorlw	25
 11174  1329  1D03               	skipz
 11175  132A  2B2D               	goto	u11075
 11176  132B  3F41               	moviw [1]fsr1
 11177  132C  3A00               	xorlw	0
 11178  132D                     u11075:	
 11179  132D  1D03               	skipz
 11180  132E  0008               	return
 11181                           
 11182                           ;MCU_B1.c: 972: Memory.Time = 0;
 11183  132F  01E0               	clrf	(_Memory^(0+384)+34)
 11184  1330  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11185                           
 11186                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11187  1331  1062               	bcf	(_Memory^(0+384)+36),0
 11188                           
 11189                           ;MCU_B1.c: 974: Memory.GO = 0;
 11190  1332  10E2               	bcf	(_Memory^(0+384)+36),1
 11191                           
 11192                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11193  1333  3195  251A         	fcall	_Flash_Memory_Modify
 11194                           
 11195                           ;MCU_B1.c: 976: }
 11196                           ;MCU_B1.c: 977: } else {
 11197  1335  0008               	return
 11198  1336                     l1195:	
 11199                           
 11200                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11201  1336  1DE2               	btfss	(_Memory^(0+384)+36),3
 11202  1337  0008               	return
 11203                           
 11204                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11205  1338  11E2               	bcf	(_Memory^(0+384)+36),3
 11206                           
 11207                           ;MCU_B1.c: 980: Memory.Time = 0;
 11208  1339  01E0               	clrf	(_Memory^(0+384)+34)
 11209  133A  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11210  133B  0008               	return
 11211  133C                     __end_of_Flash_Memory_Main:	
 11212                           
 11213                           	psect	text65
 11214  151A                     __ptext65:	
 11215 ;; *************** function _Flash_Memory_Modify *****************
 11216 ;; Defined at:
 11217 ;;		line 1038 in file "../src/MCU_B1.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;		None
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  i               1    5[BANK0 ] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;		None               void
 11224 ;; Registers used:
 11225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;Total ram usage:        2 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    7
 11238 ;; This function calls:
 11239 ;;		_Flash_Memory_Erasing
 11240 ;;		_Flash_Memory_Read
 11241 ;;		_Flash_Memory_Write
 11242 ;;		_setMemory_Data
 11243 ;; This function is called by:
 11244 ;;		_Flash_Memory_Main
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           
 11249                           ;psect for function _Flash_Memory_Modify
 11250  151A                     _Flash_Memory_Modify:	
 11251                           
 11252                           ;MCU_B1.c: 1039: char i = 0;
 11253                           
 11254                           ;incstack = 0
 11255                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11256  151A  0020               	movlb	0	; select bank0
 11257  151B  01A5               	clrf	Flash_Memory_Modify@i
 11258                           
 11259                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11260  151C  01A5               	clrf	Flash_Memory_Modify@i
 11261  151D  3020               	movlw	32
 11262  151E  0225               	subwf	Flash_Memory_Modify@i,w
 11263  151F  1803               	btfsc	3,0
 11264  1520  2D36               	goto	l9408
 11265  1521                     l9402:	
 11266                           
 11267                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11268  1521  0825               	movf	Flash_Memory_Modify@i,w
 11269  1522  319F  2732  3195   	fcall	_Flash_Memory_Read
 11270  1525  0020               	movlb	0	; select bank0
 11271  1526  00A4               	movwf	??_Flash_Memory_Modify
 11272  1527  0825               	movf	Flash_Memory_Modify@i,w
 11273  1528  3EBE               	addlw	_Memory& (0+255)
 11274  1529  0086               	movwf	6
 11275  152A  3001               	movlw	1	; select bank3/4
 11276  152B  0087               	movwf	7
 11277  152C  0824               	movf	??_Flash_Memory_Modify,w
 11278  152D  0081               	movwf	1
 11279  152E  3001               	movlw	1
 11280  152F  00A4               	movwf	??_Flash_Memory_Modify
 11281  1530  0824               	movf	??_Flash_Memory_Modify,w
 11282  1531  07A5               	addwf	Flash_Memory_Modify@i,f
 11283  1532  3020               	movlw	32
 11284  1533  0225               	subwf	Flash_Memory_Modify@i,w
 11285  1534  1C03               	skipc
 11286  1535  2D21               	goto	l9402
 11287  1536                     l9408:	
 11288                           
 11289                           ;MCU_B1.c: 1042: }
 11290                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11291  1536  0879               	movf	_product,w
 11292  1537  0086               	movwf	6
 11293  1538  3002               	movlw	2	; select bank4/5
 11294  1539  0087               	movwf	7
 11295  153A  3002               	movlw	2	; select bank4/5
 11296  153B  3F4C               	moviw [12]fsr1
 11297  153C  00A0               	movwf	setMemory_Data@data
 11298  153D  3000               	movlw	0
 11299  153E  319D  2523  3195   	fcall	_setMemory_Data
 11300                           
 11301                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11302  1541  0879               	movf	_product,w
 11303  1542  0086               	movwf	6
 11304  1543  3002               	movlw	2	; select bank4/5
 11305  1544  0087               	movwf	7
 11306  1545  3002               	movlw	2	; select bank4/5
 11307  1546  3F4D               	moviw [13]fsr1
 11308  1547  0020               	movlb	0	; select bank0
 11309  1548  00A0               	movwf	setMemory_Data@data
 11310  1549  3001               	movlw	1
 11311  154A  319D  2523  3195   	fcall	_setMemory_Data
 11312                           
 11313                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11314  154D  0879               	movf	_product,w
 11315  154E  0086               	movwf	6
 11316  154F  3002               	movlw	2	; select bank4/5
 11317  1550  0087               	movwf	7
 11318  1551  3002               	movlw	2	; select bank4/5
 11319  1552  3F4E               	moviw [14]fsr1
 11320  1553  0020               	movlb	0	; select bank0
 11321  1554  00A0               	movwf	setMemory_Data@data
 11322  1555  3002               	movlw	2
 11323  1556  319D  2523  3195   	fcall	_setMemory_Data
 11324                           
 11325                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11326  1559  0023               	movlb	3	; select bank3
 11327  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 11328  155B  2D60               	goto	l1218
 11329                           
 11330                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11331  155C  1162               	bcf	(_Memory^(0+384)+36),2
 11332                           
 11333                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11334  155D  0021               	movlb	1	; select bank1
 11335  155E  11A0               	bcf	_myMain^(0+128),3
 11336                           
 11337                           ;MCU_B1.c: 1054: myMain.First = 0;
 11338  155F  12A0               	bcf	_myMain^(0+128),5
 11339  1560                     l1218:	
 11340                           
 11341                           ;MCU_B1.c: 1056: }
 11342                           ;MCU_B1.c: 1057: GIE = 0;
 11343  1560  138B               	bcf	11,7	;volatile
 11344                           
 11345                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11346  1561  319D  252F  3195   	fcall	_Flash_Memory_Erasing
 11347                           
 11348                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11349  1564  3191  21DC         	fcall	_Flash_Memory_Write
 11350                           
 11351                           ;MCU_B1.c: 1060: GIE = 1;
 11352  1566  178B               	bsf	11,7	;volatile
 11353  1567  0008               	return
 11354  1568                     __end_of_Flash_Memory_Modify:	
 11355                           
 11356                           	psect	text66
 11357  1D2F                     __ptext66:	
 11358 ;; *************** function _Flash_Memory_Erasing *****************
 11359 ;; Defined at:
 11360 ;;		line 1027 in file "../src/MCU_B1.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;		None
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;		None               void
 11367 ;; Registers used:
 11368 ;;		wreg, status,2, status,0, pclath, cstack
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;Total ram usage:        0 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    6
 11381 ;; This function calls:
 11382 ;;		_Flash_Memory_Unlock
 11383 ;; This function is called by:
 11384 ;;		_Flash_Memory_Modify
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           
 11389                           ;psect for function _Flash_Memory_Erasing
 11390  1D2F                     _Flash_Memory_Erasing:	
 11391                           
 11392                           ;MCU_B1.c: 1028: CFGS = 0;
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11396  1D2F  0023               	movlb	3	; select bank3
 11397  1D30  1315               	bcf	21,6	;volatile
 11398                           
 11399                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11400  1D31  3030               	movlw	48
 11401  1D32  0092               	movwf	18	;volatile
 11402                           
 11403                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11404  1D33  0191               	clrf	17	;volatile
 11405                           
 11406                           ;MCU_B1.c: 1031: FREE = 1;
 11407  1D34  1615               	bsf	21,4	;volatile
 11408                           
 11409                           ;MCU_B1.c: 1032: WREN = 1;
 11410  1D35  1515               	bsf	21,2	;volatile
 11411                           
 11412                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11413  1D36  319C  248E         	fcall	_Flash_Memory_Unlock
 11414                           
 11415                           ;MCU_B1.c: 1034: WREN = 0;
 11416  1D38  0023               	movlb	3	; select bank3
 11417  1D39  1115               	bcf	21,2	;volatile
 11418  1D3A  0008               	return
 11419  1D3B                     __end_of_Flash_Memory_Erasing:	
 11420                           
 11421                           	psect	text67
 11422  0550                     __ptext67:	
 11423 ;; *************** function _Flash_Memory_Initialization *****************
 11424 ;; Defined at:
 11425 ;;		line 924 in file "../src/MCU_B1.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;		None
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;  i               1   67[BANK0 ] unsigned char 
 11430 ;; Return value:  Size  Location     Type
 11431 ;;		None               void
 11432 ;; Registers used:
 11433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;Total ram usage:        2 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    8
 11446 ;; This function calls:
 11447 ;;		_Flash_Memory_Read
 11448 ;;		_Flash_Memory_Write
 11449 ;;		_setMemory_Data
 11450 ;;		_setPercentValue
 11451 ;; This function is called by:
 11452 ;;		_main
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           
 11457                           ;psect for function _Flash_Memory_Initialization
 11458  0550                     _Flash_Memory_Initialization:	
 11459                           
 11460                           ;MCU_B1.c: 925: char i = 0;
 11461                           
 11462                           ;incstack = 0
 11463                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11464  0550  0020               	movlb	0	; select bank0
 11465  0551  01E3               	clrf	Flash_Memory_Initialization@i
 11466                           
 11467                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11468  0552  301F               	movlw	31
 11469  0553  319F  2732  3185   	fcall	_Flash_Memory_Read
 11470  0556  3AAA               	xorlw	170
 11471  0557  1D03               	skipz
 11472  0558  2DC2               	goto	l9796
 11473                           
 11474                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11475  0559  3000               	movlw	0
 11476  055A  319F  2732  3185   	fcall	_Flash_Memory_Read
 11477  055D  0020               	movlb	0	; select bank0
 11478  055E  00E2               	movwf	??_Flash_Memory_Initialization
 11479  055F  0879               	movf	_product,w
 11480  0560  3E0C               	addlw	12
 11481  0561  0086               	movwf	6
 11482  0562  3002               	movlw	2	; select bank4/5
 11483  0563  0087               	movwf	7
 11484  0564  0862               	movf	??_Flash_Memory_Initialization,w
 11485  0565  0081               	movwf	1
 11486                           
 11487                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11488  0566  3001               	movlw	1
 11489  0567  319F  2732  3185   	fcall	_Flash_Memory_Read
 11490  056A  0020               	movlb	0	; select bank0
 11491  056B  00E2               	movwf	??_Flash_Memory_Initialization
 11492  056C  0879               	movf	_product,w
 11493  056D  3E0D               	addlw	13
 11494  056E  0086               	movwf	6
 11495  056F  3002               	movlw	2	; select bank4/5
 11496  0570  0087               	movwf	7
 11497  0571  0862               	movf	??_Flash_Memory_Initialization,w
 11498  0572  0081               	movwf	1
 11499                           
 11500                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11501  0573  3002               	movlw	2
 11502  0574  319F  2732  3185   	fcall	_Flash_Memory_Read
 11503  0577  0020               	movlb	0	; select bank0
 11504  0578  00E2               	movwf	??_Flash_Memory_Initialization
 11505  0579  0879               	movf	_product,w
 11506  057A  3E0E               	addlw	14
 11507  057B  0086               	movwf	6
 11508  057C  3002               	movlw	2	; select bank4/5
 11509  057D  0087               	movwf	7
 11510  057E  0862               	movf	??_Flash_Memory_Initialization,w
 11511  057F  0081               	movwf	1
 11512                           
 11513                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75F*0.8)));
 11514  0580  303C               	movlw	60
 11515  0581  318A  22CC  3185   	fcall	_setPercentValue
 11516  0584  0020               	movlb	0	; select bank0
 11517  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11518  0586  0862               	movf	??_Flash_Memory_Initialization,w
 11519  0587  00E3               	movwf	Flash_Memory_Initialization@i
 11520                           
 11521                           ;MCU_B1.c: 936: product->Data[21] = i;
 11522  0588  0863               	movf	Flash_Memory_Initialization@i,w
 11523  0589  00E2               	movwf	??_Flash_Memory_Initialization
 11524  058A  0879               	movf	_product,w
 11525  058B  3E15               	addlw	21
 11526  058C  0086               	movwf	6
 11527  058D  3002               	movlw	2	; select bank4/5
 11528  058E  0087               	movwf	7
 11529  058F  0862               	movf	??_Flash_Memory_Initialization,w
 11530  0590  0081               	movwf	1
 11531                           
 11532                           ;MCU_B1.c: 937: product->Data[22] = i;
 11533  0591  0863               	movf	Flash_Memory_Initialization@i,w
 11534  0592  00E2               	movwf	??_Flash_Memory_Initialization
 11535  0593  0879               	movf	_product,w
 11536  0594  3E16               	addlw	22
 11537  0595  0086               	movwf	6
 11538  0596  3002               	movlw	2	; select bank4/5
 11539  0597  0087               	movwf	7
 11540  0598  0862               	movf	??_Flash_Memory_Initialization,w
 11541  0599  0081               	movwf	1
 11542                           
 11543                           ;MCU_B1.c: 938: product->Data[23] = i;
 11544  059A  0863               	movf	Flash_Memory_Initialization@i,w
 11545  059B  00E2               	movwf	??_Flash_Memory_Initialization
 11546  059C  0879               	movf	_product,w
 11547  059D  3E17               	addlw	23
 11548  059E  0086               	movwf	6
 11549  059F  3002               	movlw	2	; select bank4/5
 11550  05A0  0087               	movwf	7
 11551  05A1  0862               	movf	??_Flash_Memory_Initialization,w
 11552  05A2  0081               	movwf	1
 11553                           
 11554                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11555  05A3  0879               	movf	_product,w
 11556  05A4  3E0C               	addlw	12
 11557  05A5  0086               	movwf	6
 11558  05A6  3002               	movlw	2	; select bank4/5
 11559  05A7  0087               	movwf	7
 11560  05A8  0801               	movf	1,w
 11561  05A9  3AFF               	xorlw	255
 11562  05AA  1D03               	skipz
 11563  05AB  0008               	return
 11564  05AC  0879               	movf	_product,w
 11565  05AD  3E0D               	addlw	13
 11566  05AE  0086               	movwf	6
 11567  05AF  3002               	movlw	2	; select bank4/5
 11568  05B0  0087               	movwf	7
 11569  05B1  0801               	movf	1,w
 11570  05B2  3AFF               	xorlw	255
 11571  05B3  1D03               	skipz
 11572  05B4  0008               	return
 11573  05B5  0879               	movf	_product,w
 11574  05B6  3E0E               	addlw	14
 11575  05B7  0086               	movwf	6
 11576  05B8  3002               	movlw	2	; select bank4/5
 11577  05B9  0087               	movwf	7
 11578  05BA  0801               	movf	1,w
 11579  05BB  3AFF               	xorlw	255
 11580  05BC  1D03               	skipz
 11581  05BD  0008               	return
 11582                           
 11583                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11584  05BE  0021               	movlb	1	; select bank1
 11585  05BF  15A0               	bsf	_myMain^(0+128),3
 11586                           
 11587                           ;MCU_B1.c: 942: myMain.First = 1;
 11588  05C0  16A0               	bsf	_myMain^(0+128),5
 11589                           
 11590                           ;MCU_B1.c: 943: }
 11591                           ;MCU_B1.c: 944: } else {
 11592  05C1  0008               	return
 11593  05C2                     l9796:	
 11594                           
 11595                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75F*0.8)));
 11596  05C2  303C               	movlw	60
 11597  05C3  318A  22CC  3185   	fcall	_setPercentValue
 11598  05C6  0020               	movlb	0	; select bank0
 11599  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11600  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11601  05C9  00E3               	movwf	Flash_Memory_Initialization@i
 11602                           
 11603                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11604  05CA  30FF               	movlw	255
 11605  05CB  00E2               	movwf	??_Flash_Memory_Initialization
 11606  05CC  0862               	movf	??_Flash_Memory_Initialization,w
 11607  05CD  00A0               	movwf	setMemory_Data@data
 11608  05CE  3000               	movlw	0
 11609  05CF  319D  2523  3185   	fcall	_setMemory_Data
 11610                           
 11611                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11612  05D2  30FF               	movlw	255
 11613  05D3  0020               	movlb	0	; select bank0
 11614  05D4  00E2               	movwf	??_Flash_Memory_Initialization
 11615  05D5  0862               	movf	??_Flash_Memory_Initialization,w
 11616  05D6  00A0               	movwf	setMemory_Data@data
 11617  05D7  3001               	movlw	1
 11618  05D8  319D  2523  3185   	fcall	_setMemory_Data
 11619                           
 11620                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11621  05DB  30FF               	movlw	255
 11622  05DC  0020               	movlb	0	; select bank0
 11623  05DD  00E2               	movwf	??_Flash_Memory_Initialization
 11624  05DE  0862               	movf	??_Flash_Memory_Initialization,w
 11625  05DF  00A0               	movwf	setMemory_Data@data
 11626  05E0  3002               	movlw	2
 11627  05E1  319D  2523  3185   	fcall	_setMemory_Data
 11628                           
 11629                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11630  05E4  30FF               	movlw	255
 11631  05E5  0020               	movlb	0	; select bank0
 11632  05E6  00E2               	movwf	??_Flash_Memory_Initialization
 11633  05E7  0862               	movf	??_Flash_Memory_Initialization,w
 11634  05E8  00A0               	movwf	setMemory_Data@data
 11635  05E9  3003               	movlw	3
 11636  05EA  319D  2523  3185   	fcall	_setMemory_Data
 11637                           
 11638                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11639  05ED  30FF               	movlw	255
 11640  05EE  0020               	movlb	0	; select bank0
 11641  05EF  00E2               	movwf	??_Flash_Memory_Initialization
 11642  05F0  0862               	movf	??_Flash_Memory_Initialization,w
 11643  05F1  00A0               	movwf	setMemory_Data@data
 11644  05F2  3004               	movlw	4
 11645  05F3  319D  2523  3185   	fcall	_setMemory_Data
 11646                           
 11647                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11648  05F6  30FF               	movlw	255
 11649  05F7  0020               	movlb	0	; select bank0
 11650  05F8  00E2               	movwf	??_Flash_Memory_Initialization
 11651  05F9  0862               	movf	??_Flash_Memory_Initialization,w
 11652  05FA  00A0               	movwf	setMemory_Data@data
 11653  05FB  3005               	movlw	5
 11654  05FC  319D  2523  3185   	fcall	_setMemory_Data
 11655                           
 11656                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11657  05FF  30AA               	movlw	170
 11658  0600  0020               	movlb	0	; select bank0
 11659  0601  00E2               	movwf	??_Flash_Memory_Initialization
 11660  0602  0862               	movf	??_Flash_Memory_Initialization,w
 11661  0603  00A0               	movwf	setMemory_Data@data
 11662  0604  301F               	movlw	31
 11663  0605  319D  2523  3185   	fcall	_setMemory_Data
 11664                           
 11665                           ;MCU_B1.c: 953: product->Data[21] = i;
 11666  0608  0020               	movlb	0	; select bank0
 11667  0609  0863               	movf	Flash_Memory_Initialization@i,w
 11668  060A  00E2               	movwf	??_Flash_Memory_Initialization
 11669  060B  0879               	movf	_product,w
 11670  060C  3E15               	addlw	21
 11671  060D  0086               	movwf	6
 11672  060E  3002               	movlw	2	; select bank4/5
 11673  060F  0087               	movwf	7
 11674  0610  0862               	movf	??_Flash_Memory_Initialization,w
 11675  0611  0081               	movwf	1
 11676                           
 11677                           ;MCU_B1.c: 954: product->Data[22] = i;
 11678  0612  0863               	movf	Flash_Memory_Initialization@i,w
 11679  0613  00E2               	movwf	??_Flash_Memory_Initialization
 11680  0614  0879               	movf	_product,w
 11681  0615  3E16               	addlw	22
 11682  0616  0086               	movwf	6
 11683  0617  3002               	movlw	2	; select bank4/5
 11684  0618  0087               	movwf	7
 11685  0619  0862               	movf	??_Flash_Memory_Initialization,w
 11686  061A  0081               	movwf	1
 11687                           
 11688                           ;MCU_B1.c: 955: product->Data[23] = i;
 11689  061B  0863               	movf	Flash_Memory_Initialization@i,w
 11690  061C  00E2               	movwf	??_Flash_Memory_Initialization
 11691  061D  0879               	movf	_product,w
 11692  061E  3E17               	addlw	23
 11693  061F  0086               	movwf	6
 11694  0620  3002               	movlw	2	; select bank4/5
 11695  0621  0087               	movwf	7
 11696  0622  0862               	movf	??_Flash_Memory_Initialization,w
 11697  0623  0081               	movwf	1
 11698                           
 11699                           ;MCU_B1.c: 956: GIE = 0;
 11700  0624  138B               	bcf	11,7	;volatile
 11701                           
 11702                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11703  0625  3191  21DC         	fcall	_Flash_Memory_Write
 11704                           
 11705                           ;MCU_B1.c: 958: GIE = 1;
 11706  0627  178B               	bsf	11,7	;volatile
 11707                           
 11708                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11709  0628  0021               	movlb	1	; select bank1
 11710  0629  15A0               	bsf	_myMain^(0+128),3
 11711                           
 11712                           ;MCU_B1.c: 960: myMain.First = 1;
 11713  062A  16A0               	bsf	_myMain^(0+128),5
 11714  062B  0008               	return
 11715  062C                     __end_of_Flash_Memory_Initialization:	
 11716                           
 11717                           	psect	text68
 11718  1D23                     __ptext68:	
 11719 ;; *************** function _setMemory_Data *****************
 11720 ;; Defined at:
 11721 ;;		line 1075 in file "../src/MCU_B1.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;  address         1    wreg     unsigned char 
 11724 ;;  data            1    0[BANK0 ] unsigned char 
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  address         1    2[BANK0 ] unsigned char 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;		None               void
 11729 ;; Registers used:
 11730 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:        3 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    5
 11743 ;; This function calls:
 11744 ;;		Nothing
 11745 ;; This function is called by:
 11746 ;;		_Flash_Memory_Initialization
 11747 ;;		_Flash_Memory_Modify
 11748 ;; This function uses a non-reentrant model
 11749 ;;
 11750                           
 11751                           
 11752                           ;psect for function _setMemory_Data
 11753  1D23                     _setMemory_Data:	
 11754                           
 11755                           ;incstack = 0
 11756                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11757                           ;setMemory_Data@address stored from wreg
 11758  1D23  0020               	movlb	0	; select bank0
 11759  1D24  00A2               	movwf	setMemory_Data@address
 11760                           
 11761                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 11762  1D25  0820               	movf	setMemory_Data@data,w
 11763  1D26  00A1               	movwf	??_setMemory_Data
 11764  1D27  0822               	movf	setMemory_Data@address,w
 11765  1D28  3EBE               	addlw	_Memory& (0+255)
 11766  1D29  0086               	movwf	6
 11767  1D2A  3001               	movlw	1	; select bank3/4
 11768  1D2B  0087               	movwf	7
 11769  1D2C  0821               	movf	??_setMemory_Data,w
 11770  1D2D  0081               	movwf	1
 11771  1D2E  0008               	return
 11772  1D2F                     __end_of_setMemory_Data:	
 11773                           
 11774                           	psect	text69
 11775  11DC                     __ptext69:	
 11776 ;; *************** function _Flash_Memory_Write *****************
 11777 ;; Defined at:
 11778 ;;		line 1008 in file "../src/MCU_B1.c"
 11779 ;; Parameters:    Size  Location     Type
 11780 ;;		None
 11781 ;; Auto vars:     Size  Location     Type
 11782 ;;  i               1    1[BANK0 ] unsigned char 
 11783 ;; Return value:  Size  Location     Type
 11784 ;;		None               void
 11785 ;; Registers used:
 11786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11787 ;; Tracked objects:
 11788 ;;		On entry : 0/0
 11789 ;;		On exit  : 0/0
 11790 ;;		Unchanged: 0/0
 11791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;Total ram usage:        2 bytes
 11797 ;; Hardware stack levels used:    1
 11798 ;; Hardware stack levels required when called:    6
 11799 ;; This function calls:
 11800 ;;		_Flash_Memory_Unlock
 11801 ;; This function is called by:
 11802 ;;		_Flash_Memory_Initialization
 11803 ;;		_Flash_Memory_Modify
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           
 11808                           ;psect for function _Flash_Memory_Write
 11809  11DC                     _Flash_Memory_Write:	
 11810                           
 11811                           ;MCU_B1.c: 1009: char i = 0;
 11812                           
 11813                           ;incstack = 0
 11814                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11815  11DC  0020               	movlb	0	; select bank0
 11816  11DD  01A1               	clrf	Flash_Memory_Write@i
 11817                           
 11818                           ;MCU_B1.c: 1010: CFGS = 0;
 11819  11DE  0023               	movlb	3	; select bank3
 11820  11DF  1315               	bcf	21,6	;volatile
 11821                           
 11822                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 11823  11E0  3030               	movlw	48
 11824  11E1  0092               	movwf	18	;volatile
 11825                           
 11826                           ;MCU_B1.c: 1012: PMDATH = 0;
 11827  11E2  0194               	clrf	20	;volatile
 11828                           
 11829                           ;MCU_B1.c: 1013: FREE = 0;
 11830  11E3  1215               	bcf	21,4	;volatile
 11831                           
 11832                           ;MCU_B1.c: 1014: LWLO = 1;
 11833  11E4  1695               	bsf	21,5	;volatile
 11834                           
 11835                           ;MCU_B1.c: 1015: WREN = 1;
 11836  11E5  1515               	bsf	21,2	;volatile
 11837                           
 11838                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 11839  11E6  0020               	movlb	0	; select bank0
 11840  11E7  01A1               	clrf	Flash_Memory_Write@i
 11841  11E8  3020               	movlw	32
 11842  11E9  0221               	subwf	Flash_Memory_Write@i,w
 11843  11EA  1803               	btfsc	3,0
 11844  11EB  2A04               	goto	l1209
 11845  11EC                     l9006:	
 11846                           
 11847                           ;MCU_B1.c: 1017: PMADRL = i;
 11848  11EC  0821               	movf	Flash_Memory_Write@i,w
 11849  11ED  0023               	movlb	3	; select bank3
 11850  11EE  0091               	movwf	17	;volatile
 11851                           
 11852                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 11853  11EF  0020               	movlb	0	; select bank0
 11854  11F0  0821               	movf	Flash_Memory_Write@i,w
 11855  11F1  3EBE               	addlw	_Memory& (0+255)
 11856  11F2  0086               	movwf	6
 11857  11F3  3001               	movlw	1	; select bank3/4
 11858  11F4  0087               	movwf	7
 11859  11F5  0801               	movf	1,w
 11860  11F6  0023               	movlb	3	; select bank3
 11861  11F7  0093               	movwf	19	;volatile
 11862                           
 11863                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 11864  11F8  319C  248E  3191   	fcall	_Flash_Memory_Unlock
 11865  11FB  3001               	movlw	1
 11866  11FC  0020               	movlb	0	; select bank0
 11867  11FD  00A0               	movwf	??_Flash_Memory_Write
 11868  11FE  0820               	movf	??_Flash_Memory_Write,w
 11869  11FF  07A1               	addwf	Flash_Memory_Write@i,f
 11870  1200  3020               	movlw	32
 11871  1201  0221               	subwf	Flash_Memory_Write@i,w
 11872  1202  1C03               	skipc
 11873  1203  29EC               	goto	l9006
 11874  1204                     l1209:	
 11875                           
 11876                           ;MCU_B1.c: 1020: }
 11877                           ;MCU_B1.c: 1021: LWLO = 0;
 11878  1204  0023               	movlb	3	; select bank3
 11879  1205  1295               	bcf	21,5	;volatile
 11880                           
 11881                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11882  1206  319C  248E         	fcall	_Flash_Memory_Unlock
 11883                           
 11884                           ;MCU_B1.c: 1023: WREN = 0;
 11885  1208  0023               	movlb	3	; select bank3
 11886  1209  1115               	bcf	21,2	;volatile
 11887  120A  0008               	return
 11888  120B                     __end_of_Flash_Memory_Write:	
 11889                           
 11890                           	psect	text70
 11891  1C8E                     __ptext70:	
 11892 ;; *************** function _Flash_Memory_Unlock *****************
 11893 ;; Defined at:
 11894 ;;		line 987 in file "../src/MCU_B1.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;		None
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;		None
 11899 ;; Return value:  Size  Location     Type
 11900 ;;		None               void
 11901 ;; Registers used:
 11902 ;;		wreg
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;Total ram usage:        0 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; Hardware stack levels required when called:    5
 11915 ;; This function calls:
 11916 ;;		Nothing
 11917 ;; This function is called by:
 11918 ;;		_Flash_Memory_Write
 11919 ;;		_Flash_Memory_Erasing
 11920 ;; This function uses a non-reentrant model
 11921 ;;
 11922                           
 11923                           
 11924                           ;psect for function _Flash_Memory_Unlock
 11925  1C8E                     _Flash_Memory_Unlock:	
 11926                           
 11927                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 11928                           
 11929                           ;incstack = 0
 11930                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11931  1C8E  3055               	movlw	85
 11932  1C8F  0023               	movlb	3	; select bank3
 11933  1C90  0096               	movwf	22	;volatile
 11934                           
 11935                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 11936  1C91  30AA               	movlw	170
 11937  1C92  0096               	movwf	22	;volatile
 11938                           
 11939                           ;MCU_B1.c: 990: WR = 1;
 11940  1C93  1495               	bsf	21,1	;volatile
 11941                           
 11942                           ;MCU_B1.c: 991: __nop();
 11943  1C94  0000               	nop
 11944                           
 11945                           ;MCU_B1.c: 992: __nop();
 11946  1C95  0000               	nop
 11947  1C96  0008               	return
 11948  1C97                     __end_of_Flash_Memory_Unlock:	
 11949                           
 11950                           	psect	text71
 11951  1F32                     __ptext71:	
 11952 ;; *************** function _Flash_Memory_Read *****************
 11953 ;; Defined at:
 11954 ;;		line 996 in file "../src/MCU_B1.c"
 11955 ;; Parameters:    Size  Location     Type
 11956 ;;  address         1    wreg     unsigned char 
 11957 ;; Auto vars:     Size  Location     Type
 11958 ;;  address         1    2[BANK0 ] unsigned char 
 11959 ;;  ret             1    3[BANK0 ] unsigned char 
 11960 ;;  i               1    1[BANK0 ] unsigned char 
 11961 ;; Return value:  Size  Location     Type
 11962 ;;                  1    wreg      unsigned char 
 11963 ;; Registers used:
 11964 ;;		wreg, status,2
 11965 ;; Tracked objects:
 11966 ;;		On entry : 0/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;Total ram usage:        4 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    5
 11977 ;; This function calls:
 11978 ;;		Nothing
 11979 ;; This function is called by:
 11980 ;;		_Flash_Memory_Initialization
 11981 ;;		_Flash_Memory_Modify
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           
 11986                           ;psect for function _Flash_Memory_Read
 11987  1F32                     _Flash_Memory_Read:	
 11988                           
 11989                           ;incstack = 0
 11990                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11991                           ;Flash_Memory_Read@address stored from wreg
 11992  1F32  0020               	movlb	0	; select bank0
 11993  1F33  00A2               	movwf	Flash_Memory_Read@address
 11994                           
 11995                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 11996  1F34  01A1               	clrf	Flash_Memory_Read@i
 11997  1F35  01A3               	clrf	Flash_Memory_Read@ret
 11998                           
 11999                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12000  1F36  3030               	movlw	48
 12001  1F37  0023               	movlb	3	; select bank3
 12002  1F38  0092               	movwf	18	;volatile
 12003                           
 12004                           ;MCU_B1.c: 999: PMADRL = address;
 12005  1F39  0020               	movlb	0	; select bank0
 12006  1F3A  0822               	movf	Flash_Memory_Read@address,w
 12007  1F3B  0023               	movlb	3	; select bank3
 12008  1F3C  0091               	movwf	17	;volatile
 12009                           
 12010                           ;MCU_B1.c: 1000: CFGS = 0;
 12011  1F3D  1315               	bcf	21,6	;volatile
 12012                           
 12013                           ;MCU_B1.c: 1001: RD = 1;
 12014  1F3E  1415               	bsf	21,0	;volatile
 12015                           
 12016                           ;MCU_B1.c: 1002: i = PMDATH;
 12017  1F3F  0814               	movf	20,w	;volatile
 12018  1F40  0020               	movlb	0	; select bank0
 12019  1F41  00A0               	movwf	??_Flash_Memory_Read
 12020  1F42  0820               	movf	??_Flash_Memory_Read,w
 12021  1F43  00A1               	movwf	Flash_Memory_Read@i
 12022                           
 12023                           ;MCU_B1.c: 1003: ret = PMDATL;
 12024  1F44  0023               	movlb	3	; select bank3
 12025  1F45  0813               	movf	19,w	;volatile
 12026  1F46  0020               	movlb	0	; select bank0
 12027  1F47  00A0               	movwf	??_Flash_Memory_Read
 12028  1F48  0820               	movf	??_Flash_Memory_Read,w
 12029  1F49  00A3               	movwf	Flash_Memory_Read@ret
 12030                           
 12031                           ;MCU_B1.c: 1004: return ret;
 12032  1F4A  0823               	movf	Flash_Memory_Read@ret,w
 12033  1F4B  0008               	return
 12034  1F4C                     __end_of_Flash_Memory_Read:	
 12035                           
 12036                           	psect	text72
 12037  062C                     __ptext72:	
 12038 ;; *************** function _Exception_Main *****************
 12039 ;; Defined at:
 12040 ;;		line 523 in file "../src/Main_B1.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;		None
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;  i               2    4[BANK1 ] int 
 12045 ;;  i               2    2[BANK1 ] int 
 12046 ;;  lights          1    6[BANK1 ] unsigned char 
 12047 ;;  error           1    1[BANK1 ] unsigned char 
 12048 ;;  count           1    0[BANK1 ] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;		None               void
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;Total ram usage:        8 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    9
 12065 ;; This function calls:
 12066 ;;		_getDimmerLights_Line
 12067 ;;		_getDimmerLights_Status
 12068 ;;		_getMain_All_Error_Status
 12069 ;;		_getMain_LightsStatus
 12070 ;;		_setBuz
 12071 ;;		_setDimmerLights_SwOff
 12072 ;;		_setLED
 12073 ;; This function is called by:
 12074 ;;		_main
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           
 12079                           ;psect for function _Exception_Main
 12080  062C                     _Exception_Main:	
 12081                           
 12082                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12086  062C  3000               	movlw	0
 12087  062D  3192  226B  3186   	fcall	_getMain_All_Error_Status
 12088  0630  0020               	movlb	0	; select bank0
 12089  0631  00EB               	movwf	??_Exception_Main
 12090  0632  086B               	movf	??_Exception_Main,w
 12091  0633  0021               	movlb	1	; select bank1
 12092  0634  00EA               	movwf	Exception_Main@error^(0+128)
 12093                           
 12094                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12095  0635  01EF               	clrf	Exception_Main@lights^(0+128)
 12096  0636  01E9               	clrf	Exception_Main@count^(0+128)
 12097  0637  0AE9               	incf	Exception_Main@count^(0+128),f
 12098                           
 12099                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12100  0638  1DAB               	btfss	(_myMain^(0+128)+11),3
 12101  0639  2E47               	goto	l10130
 12102                           
 12103                           ;Main_B1.c: 527: if (error == 0) {
 12104  063A  08EA               	movf	Exception_Main@error^(0+128),f
 12105  063B  1D03               	skipz
 12106  063C  0008               	return
 12107                           
 12108                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12109  063D  11AB               	bcf	(_myMain^(0+128)+11),3
 12110                           
 12111                           ;Main_B1.c: 533: setLED(99, 10);
 12112  063E  300A               	movlw	10
 12113  063F  0020               	movlb	0	; select bank0
 12114  0640  00EB               	movwf	??_Exception_Main
 12115  0641  086B               	movf	??_Exception_Main,w
 12116  0642  00A2               	movwf	setLED@command
 12117  0643  3063               	movlw	99
 12118  0644  3193  23DF         	fcall	_setLED
 12119                           
 12120                           ;Main_B1.c: 535: }
 12121                           ;Main_B1.c: 536: } else {
 12122  0646  0008               	return
 12123  0647                     l10130:	
 12124                           
 12125                           ;Main_B1.c: 537: if (error != 0) {
 12126  0647  0021               	movlb	1	; select bank1
 12127  0648  086A               	movf	Exception_Main@error^(0+128),w
 12128  0649  1903               	btfsc	3,2
 12129  064A  0008               	return
 12130                           
 12131                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12132  064B  15AB               	bsf	(_myMain^(0+128)+11),3
 12133                           
 12134                           ;Main_B1.c: 541: setLED(99, 11);
 12135  064C  300B               	movlw	11
 12136  064D  0020               	movlb	0	; select bank0
 12137  064E  00EB               	movwf	??_Exception_Main
 12138  064F  086B               	movf	??_Exception_Main,w
 12139  0650  00A2               	movwf	setLED@command
 12140  0651  3063               	movlw	99
 12141  0652  3193  23DF  3186   	fcall	_setLED
 12142                           
 12143                           ;Main_B1.c: 543: switch (error) {
 12144  0655  2EFD               	goto	l10178
 12145  0656                     l10136:	
 12146                           ;Main_B1.c: 544: case 2:
 12147                           
 12148                           
 12149                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12150  0656  319C  24B4  3186   	fcall	_getMain_LightsStatus
 12151  0659  3A01               	xorlw	1
 12152  065A  1D03               	skipz
 12153  065B  2E65               	goto	l10140
 12154                           
 12155                           ;Main_B1.c: 546: setBuz(10, 300);
 12156  065C  302C               	movlw	44
 12157  065D  0020               	movlb	0	; select bank0
 12158  065E  00A9               	movwf	setBuz@time
 12159  065F  3001               	movlw	1
 12160  0660  00AA               	movwf	setBuz@time+1
 12161  0661  300A               	movlw	10
 12162  0662  3197  27A7  3186   	fcall	_setBuz
 12163  0665                     l10140:	
 12164                           
 12165                           ;Main_B1.c: 547: }
 12166                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12167  0665  0021               	movlb	1	; select bank1
 12168  0666  01EB               	clrf	Exception_Main@i^(0+128)
 12169  0667  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12170  0668                     l10150:	
 12171  0668  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12172  0669  3A80               	xorlw	128
 12173  066A  0020               	movlb	0	; select bank0
 12174  066B  00EB               	movwf	??_Exception_Main
 12175  066C  3080               	movlw	128
 12176  066D  026B               	subwf	??_Exception_Main,w
 12177  066E  1D03               	skipz
 12178  066F  2E73               	goto	u11655
 12179  0670  0021               	movlb	1	; select bank1
 12180  0671  0869               	movf	Exception_Main@count^(0+128),w
 12181  0672  026B               	subwf	Exception_Main@i^(0+128),w
 12182  0673                     u11655:	
 12183  0673  1803               	btfsc	3,0
 12184  0674  2E97               	goto	u11650
 12185                           
 12186                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12187  0675  0021               	movlb	1	; select bank1
 12188  0676  086B               	movf	Exception_Main@i^(0+128),w
 12189  0677  3E01               	addlw	1
 12190  0678  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12191  067B  3A01               	xorlw	1
 12192  067C  1D03               	skipz
 12193  067D  2E91               	goto	l10148
 12194                           
 12195                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12196  067E  0020               	movlb	0	; select bank0
 12197  067F  086F               	movf	_DimmerLights,w
 12198  0680  3E0B               	addlw	11
 12199  0681  0086               	movwf	6
 12200  0682  3001               	movlw	1	; select bank2/3
 12201  0683  0087               	movwf	7
 12202  0684  1481               	bsf	1,1
 12203                           
 12204                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12205  0685  086F               	movf	_DimmerLights,w
 12206  0686  3E02               	addlw	2
 12207  0687  0086               	movwf	6
 12208  0688  3001               	movlw	1	; select bank2/3
 12209  0689  0087               	movwf	7
 12210  068A  1081               	bcf	1,1
 12211                           
 12212                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12213  068B  0021               	movlb	1	; select bank1
 12214  068C  086B               	movf	Exception_Main@i^(0+128),w
 12215  068D  3E01               	addlw	1
 12216  068E  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12217  0691                     l10148:	
 12218  0691  3001               	movlw	1
 12219  0692  0021               	movlb	1	; select bank1
 12220  0693  07EB               	addwf	Exception_Main@i^(0+128),f
 12221  0694  3000               	movlw	0
 12222  0695  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12223  0696  2E68               	goto	l10150
 12224  0697                     u11650:	
 12225  0697  0021               	movlb	1	; select bank1
 12226  0698  0008               	return
 12227  0699                     l10152:	
 12228                           ;Main_B1.c: 558: case 3:
 12229                           
 12230                           ;Main_B1.c: 555: }
 12231                           ;Main_B1.c: 556: }
 12232                           ;Main_B1.c: 557: break;
 12233                           
 12234                           
 12235                           ;Main_B1.c: 560: setBuz(5, 300);
 12236  0699  302C               	movlw	44
 12237  069A  0020               	movlb	0	; select bank0
 12238  069B  00A9               	movwf	setBuz@time
 12239  069C  3001               	movlw	1
 12240  069D  00AA               	movwf	setBuz@time+1
 12241  069E  3005               	movlw	5
 12242  069F  3197  27A7  3186   	fcall	_setBuz
 12243                           
 12244                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12245  06A2  319C  24DF  3186   	fcall	_getDimmerLights_Line
 12246  06A5  0020               	movlb	0	; select bank0
 12247  06A6  00EB               	movwf	??_Exception_Main
 12248  06A7  086B               	movf	??_Exception_Main,w
 12249  06A8  0021               	movlb	1	; select bank1
 12250  06A9  00EF               	movwf	Exception_Main@lights^(0+128)
 12251                           
 12252                           ;Main_B1.c: 562: if (lights == 0) {
 12253  06AA  08EF               	movf	Exception_Main@lights^(0+128),f
 12254  06AB  1D03               	skipz
 12255  06AC  2EE0               	goto	l10170
 12256                           
 12257                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12258  06AD  01ED               	clrf	Exception_Main@i_3438^(0+128)
 12259  06AE  01EE               	clrf	(Exception_Main@i_3438+1)^(0+128)
 12260  06AF                     l10168:	
 12261  06AF  086E               	movf	(Exception_Main@i_3438+1)^(0+128),w
 12262  06B0  3A80               	xorlw	128
 12263  06B1  0020               	movlb	0	; select bank0
 12264  06B2  00EB               	movwf	??_Exception_Main
 12265  06B3  3080               	movlw	128
 12266  06B4  026B               	subwf	??_Exception_Main,w
 12267  06B5  1D03               	skipz
 12268  06B6  2EBA               	goto	u11685
 12269  06B7  0021               	movlb	1	; select bank1
 12270  06B8  0869               	movf	Exception_Main@count^(0+128),w
 12271  06B9  026D               	subwf	Exception_Main@i_3438^(0+128),w
 12272  06BA                     u11685:	
 12273  06BA  1803               	btfsc	3,0
 12274  06BB  2EDE               	goto	u11680
 12275                           
 12276                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12277  06BC  0021               	movlb	1	; select bank1
 12278  06BD  086D               	movf	Exception_Main@i_3438^(0+128),w
 12279  06BE  3E01               	addlw	1
 12280  06BF  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12281  06C2  3A01               	xorlw	1
 12282  06C3  1D03               	skipz
 12283  06C4  2ED8               	goto	l10166
 12284                           
 12285                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12286  06C5  0020               	movlb	0	; select bank0
 12287  06C6  086F               	movf	_DimmerLights,w
 12288  06C7  3E0B               	addlw	11
 12289  06C8  0086               	movwf	6
 12290  06C9  3001               	movlw	1	; select bank2/3
 12291  06CA  0087               	movwf	7
 12292  06CB  1481               	bsf	1,1
 12293                           
 12294                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12295  06CC  086F               	movf	_DimmerLights,w
 12296  06CD  3E02               	addlw	2
 12297  06CE  0086               	movwf	6
 12298  06CF  3001               	movlw	1	; select bank2/3
 12299  06D0  0087               	movwf	7
 12300  06D1  1081               	bcf	1,1
 12301                           
 12302                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12303  06D2  0021               	movlb	1	; select bank1
 12304  06D3  086D               	movf	Exception_Main@i_3438^(0+128),w
 12305  06D4  3E01               	addlw	1
 12306  06D5  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12307  06D8                     l10166:	
 12308  06D8  3001               	movlw	1
 12309  06D9  0021               	movlb	1	; select bank1
 12310  06DA  07ED               	addwf	Exception_Main@i_3438^(0+128),f
 12311  06DB  3000               	movlw	0
 12312  06DC  3DEE               	addwfc	(Exception_Main@i_3438+1)^(0+128),f
 12313  06DD  2EAF               	goto	l10168
 12314  06DE                     u11680:	
 12315  06DE  0021               	movlb	1	; select bank1
 12316  06DF  0008               	return
 12317  06E0                     l10170:	
 12318                           ;Main_B1.c: 570: }
 12319                           ;Main_B1.c: 571: }
 12320                           ;Main_B1.c: 572: } else {
 12321                           
 12322                           
 12323                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12324  06E0  0021               	movlb	1	; select bank1
 12325  06E1  086F               	movf	Exception_Main@lights^(0+128),w
 12326  06E2  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12327  06E5  3A01               	xorlw	1
 12328  06E6  1903               	btfsc	3,2
 12329  06E7  2EEA               	goto	l10172
 12330  06E8  0021               	movlb	1	; select bank1
 12331  06E9  0008               	return
 12332  06EA                     l10172:	
 12333                           
 12334                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12335  06EA  0020               	movlb	0	; select bank0
 12336  06EB  086F               	movf	_DimmerLights,w
 12337  06EC  3E0B               	addlw	11
 12338  06ED  0086               	movwf	6
 12339  06EE  3001               	movlw	1	; select bank2/3
 12340  06EF  0087               	movwf	7
 12341  06F0  1481               	bsf	1,1
 12342                           
 12343                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12344  06F1  086F               	movf	_DimmerLights,w
 12345  06F2  3E02               	addlw	2
 12346  06F3  0086               	movwf	6
 12347  06F4  3001               	movlw	1	; select bank2/3
 12348  06F5  0087               	movwf	7
 12349  06F6  1081               	bcf	1,1
 12350                           
 12351                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12352  06F7  0021               	movlb	1	; select bank1
 12353  06F8  086F               	movf	Exception_Main@lights^(0+128),w
 12354  06F9  3195  2568         	fcall	_setDimmerLights_SwOff
 12355  06FB  0021               	movlb	1	; select bank1
 12356  06FC  0008               	return
 12357  06FD                     l10178:	
 12358                           ;Main_B1.c: 582: }
 12359                           
 12360                           ;Main_B1.c: 579: }
 12361                           ;Main_B1.c: 580: }
 12362                           ;Main_B1.c: 581: break;
 12363                           
 12364  06FD  0021               	movlb	1	; select bank1
 12365  06FE  086A               	movf	Exception_Main@error^(0+128),w
 12366                           
 12367                           ; Switch size 1, requested type "space"
 12368                           ; Number of cases is 2, Range of values is 2 to 3
 12369                           ; switch strategies available:
 12370                           ; Name         Instructions Cycles
 12371                           ; simple_byte            7     4 (average)
 12372                           ; direct_byte           13     9 (fixed)
 12373                           ; jumptable            263     9 (fixed)
 12374                           ;	Chosen strategy is simple_byte
 12375  06FF  3A02               	xorlw	2	; case 2
 12376  0700  1903               	skipnz
 12377  0701  2E56               	goto	l10136
 12378  0702  3A01               	xorlw	1	; case 3
 12379  0703  1903               	skipnz
 12380  0704  2E99               	goto	l10152
 12381  0705  2F07               	goto	l1456
 12382  0706  0008               	return
 12383  0707                     l1456:	
 12384  0707  0008               	return
 12385  0708                     __end_of_Exception_Main:	
 12386                           
 12387                           	psect	text73
 12388  1CDF                     __ptext73:	
 12389 ;; *************** function _getDimmerLights_Line *****************
 12390 ;; Defined at:
 12391 ;;		line 736 in file "../src/Dimmer_B1.c"
 12392 ;; Parameters:    Size  Location     Type
 12393 ;;		None
 12394 ;; Auto vars:     Size  Location     Type
 12395 ;;  line            1    0[BANK0 ] unsigned char 
 12396 ;; Return value:  Size  Location     Type
 12397 ;;                  1    wreg      unsigned char 
 12398 ;; Registers used:
 12399 ;;		wreg, status,2
 12400 ;; Tracked objects:
 12401 ;;		On entry : 0/0
 12402 ;;		On exit  : 0/0
 12403 ;;		Unchanged: 0/0
 12404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;Total ram usage:        1 bytes
 12410 ;; Hardware stack levels used:    1
 12411 ;; Hardware stack levels required when called:    5
 12412 ;; This function calls:
 12413 ;;		Nothing
 12414 ;; This function is called by:
 12415 ;;		_Exception_Main
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           
 12420                           ;psect for function _getDimmerLights_Line
 12421  1CDF                     _getDimmerLights_Line:	
 12422                           
 12423                           ;Dimmer_B1.c: 737: char line = 0;
 12424                           
 12425                           ;incstack = 0
 12426                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12427  1CDF  0020               	movlb	0	; select bank0
 12428  1CE0  01A0               	clrf	getDimmerLights_Line@line
 12429                           
 12430                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12431  1CE1  0022               	movlb	2	; select bank2
 12432  1CE2  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12433  1CE3  2CE7               	goto	l9284
 12434                           
 12435                           ;Dimmer_B1.c: 740: line = 1;
 12436  1CE4  0020               	movlb	0	; select bank0
 12437  1CE5  01A0               	clrf	getDimmerLights_Line@line
 12438  1CE6  0AA0               	incf	getDimmerLights_Line@line,f
 12439  1CE7                     l9284:	
 12440                           
 12441                           ;Dimmer_B1.c: 741: }
 12442                           ;Dimmer_B1.c: 753: return line;
 12443  1CE7  0020               	movlb	0	; select bank0
 12444  1CE8  0820               	movf	getDimmerLights_Line@line,w
 12445  1CE9  0008               	return
 12446  1CEA                     __end_of_getDimmerLights_Line:	
 12447                           
 12448                           	psect	text74
 12449  1F4C                     __ptext74:	
 12450 ;; *************** function _DimmerLights_Main *****************
 12451 ;; Defined at:
 12452 ;;		line 502 in file "../src/Dimmer_B1.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;		None
 12457 ;; Return value:  Size  Location     Type
 12458 ;;		None               void
 12459 ;; Registers used:
 12460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;Total ram usage:        0 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; Hardware stack levels required when called:   10
 12473 ;; This function calls:
 12474 ;;		_getLoad_OK
 12475 ;;		_getMain_All_Error_Status
 12476 ;;		_getMain_LightsStatus
 12477 ;;		_setDimmerLights_Main
 12478 ;; This function is called by:
 12479 ;;		_main
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           
 12484                           ;psect for function _DimmerLights_Main
 12485  1F4C                     _DimmerLights_Main:	
 12486                           
 12487                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12488                           
 12489                           ;incstack = 0
 12490                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12491  1F4C  0021               	movlb	1	; select bank1
 12492  1F4D  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12493  1F4E  2F64               	goto	l9766
 12494                           
 12495                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12496  1F4F  319C  246D  319F   	fcall	_getLoad_OK
 12497  1F52  3A01               	xorlw	1
 12498  1F53  1903               	skipnz
 12499  1F54  2F62               	goto	l730
 12500  1F55  3000               	movlw	0
 12501  1F56  3192  226B  319F   	fcall	_getMain_All_Error_Status
 12502  1F59  3800               	iorlw	0
 12503  1F5A  1D03               	skipz
 12504  1F5B  2F62               	goto	l730
 12505  1F5C  319C  24B4  319F   	fcall	_getMain_LightsStatus
 12506  1F5F  3800               	iorlw	0
 12507  1F60  1D03               	skipz
 12508  1F61  2F64               	goto	l9766
 12509  1F62                     l730:	
 12510                           
 12511                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12512  1F62  0021               	movlb	1	; select bank1
 12513  1F63  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12514  1F64                     l9766:	
 12515                           
 12516                           ;Dimmer_B1.c: 517: }
 12517                           ;Dimmer_B1.c: 518: }
 12518                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12519  1F64  3001               	movlw	1
 12520  1F65  3196  2606         	fcall	_setDimmerLights_Main
 12521  1F67  0008               	return
 12522  1F68                     __end_of_DimmerLights_Main:	
 12523                           
 12524                           	psect	text75
 12525  1606                     __ptext75:	
 12526 ;; *************** function _setDimmerLights_Main *****************
 12527 ;; Defined at:
 12528 ;;		line 536 in file "../src/Dimmer_B1.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;  lights          1    wreg     unsigned char 
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;  lights          1   78[BANK0 ] unsigned char 
 12533 ;; Return value:  Size  Location     Type
 12534 ;;		None               void
 12535 ;; Registers used:
 12536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;Total ram usage:        1 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    9
 12549 ;; This function calls:
 12550 ;;		_DimmerLightsPointSelect
 12551 ;;		_getDimmerLights_Allow_Condition
 12552 ;;		_setDimmerLights
 12553 ;;		_setDimmerLights_Adj
 12554 ;; This function is called by:
 12555 ;;		_DimmerLights_Main
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           
 12560                           ;psect for function _setDimmerLights_Main
 12561  1606                     _setDimmerLights_Main:	
 12562                           
 12563                           ;incstack = 0
 12564                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12565                           ;setDimmerLights_Main@lights stored from wreg
 12566  1606  0020               	movlb	0	; select bank0
 12567  1607  00EE               	movwf	setDimmerLights_Main@lights
 12568                           
 12569                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12570  1608  086E               	movf	setDimmerLights_Main@lights,w
 12571  1609  319C  24D4  3196   	fcall	_DimmerLightsPointSelect
 12572                           
 12573                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12574  160C  0020               	movlb	0	; select bank0
 12575  160D  086F               	movf	_DimmerLights,w
 12576  160E  3E0A               	addlw	10
 12577  160F  0086               	movwf	6
 12578  1610  3001               	movlw	1	; select bank2/3
 12579  1611  0087               	movwf	7
 12580  1612  1C81               	btfss	1,1
 12581  1613  2E35               	goto	l9264
 12582                           
 12583                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12584  1614  086E               	movf	setDimmerLights_Main@lights,w
 12585  1615  319E  26D1  3196   	fcall	_getDimmerLights_Allow_Condition
 12586  1618  3800               	iorlw	0
 12587  1619  1D03               	skipz
 12588  161A  0008               	return
 12589                           
 12590                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12591  161B  0020               	movlb	0	; select bank0
 12592  161C  086F               	movf	_DimmerLights,w
 12593  161D  3E0A               	addlw	10
 12594  161E  0086               	movwf	6
 12595  161F  3001               	movlw	1	; select bank2/3
 12596  1620  0087               	movwf	7
 12597  1621  1081               	bcf	1,1
 12598                           
 12599                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12600  1622  086F               	movf	_DimmerLights,w
 12601  1623  3E0A               	addlw	10
 12602  1624  0086               	movwf	6
 12603  1625  3001               	movlw	1	; select bank2/3
 12604  1626  0087               	movwf	7
 12605  1627  1C01               	btfss	1,0
 12606  1628  2E2F               	goto	l9262
 12607                           
 12608                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12609  1629  01EB               	clrf	setDimmerLights@status
 12610  162A  0AEB               	incf	setDimmerLights@status,f
 12611  162B  086E               	movf	setDimmerLights_Main@lights,w
 12612  162C  3196  2656         	fcall	_setDimmerLights
 12613                           
 12614                           ;Dimmer_B1.c: 544: } else {
 12615  162E  0008               	return
 12616  162F                     l9262:	
 12617                           
 12618                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12619  162F  0020               	movlb	0	; select bank0
 12620  1630  01EB               	clrf	setDimmerLights@status
 12621  1631  086E               	movf	setDimmerLights_Main@lights,w
 12622  1632  3196  2656         	fcall	_setDimmerLights
 12623                           
 12624                           ;Dimmer_B1.c: 546: }
 12625                           ;Dimmer_B1.c: 547: }
 12626                           ;Dimmer_B1.c: 548: } else {
 12627  1634  0008               	return
 12628  1635                     l9264:	
 12629                           
 12630                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12631  1635  0020               	movlb	0	; select bank0
 12632  1636  086F               	movf	_DimmerLights,w
 12633  1637  3E0A               	addlw	10
 12634  1638  0086               	movwf	6
 12635  1639  3001               	movlw	1	; select bank2/3
 12636  163A  0087               	movwf	7
 12637  163B  1D81               	btfss	1,3
 12638  163C  0008               	return
 12639                           
 12640                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12641  163D  086F               	movf	_DimmerLights,w
 12642  163E  3E0A               	addlw	10
 12643  163F  0086               	movwf	6
 12644  1640  3001               	movlw	1	; select bank2/3
 12645  1641  0087               	movwf	7
 12646  1642  1181               	bcf	1,3
 12647                           
 12648                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12649  1643  086F               	movf	_DimmerLights,w
 12650  1644  3E0A               	addlw	10
 12651  1645  0086               	movwf	6
 12652  1646  3001               	movlw	1	; select bank2/3
 12653  1647  0087               	movwf	7
 12654  1648  1D01               	btfss	1,2
 12655  1649  2E50               	goto	l9270
 12656                           
 12657                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12658  164A  01EB               	clrf	setDimmerLights_Adj@status
 12659  164B  0AEB               	incf	setDimmerLights_Adj@status,f
 12660  164C  086E               	movf	setDimmerLights_Main@lights,w
 12661  164D  3197  274F         	fcall	_setDimmerLights_Adj
 12662                           
 12663                           ;Dimmer_B1.c: 553: } else {
 12664  164F  0008               	return
 12665  1650                     l9270:	
 12666                           
 12667                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12668  1650  0020               	movlb	0	; select bank0
 12669  1651  01EB               	clrf	setDimmerLights_Adj@status
 12670  1652  086E               	movf	setDimmerLights_Main@lights,w
 12671  1653  3197  274F         	fcall	_setDimmerLights_Adj
 12672  1655  0008               	return
 12673  1656                     __end_of_setDimmerLights_Main:	
 12674                           
 12675                           	psect	text76
 12676  174F                     __ptext76:	
 12677 ;; *************** function _setDimmerLights_Adj *****************
 12678 ;; Defined at:
 12679 ;;		line 672 in file "../src/Dimmer_B1.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;  lights          1    wreg     unsigned char 
 12682 ;;  status          1   75[BANK0 ] unsigned char 
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;  lights          1   77[BANK0 ] unsigned char 
 12685 ;; Return value:  Size  Location     Type
 12686 ;;		None               void
 12687 ;; Registers used:
 12688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12694 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;Total ram usage:        3 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    8
 12701 ;; This function calls:
 12702 ;;		_setBuz
 12703 ;;		_setDimmerLights_Line
 12704 ;;		_setPercentValue
 12705 ;;		_setProductData
 12706 ;;		_setRF_DimmerLights
 12707 ;;		_setTxData
 12708 ;; This function is called by:
 12709 ;;		_setDimmerLights_Main
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _setDimmerLights_Adj
 12715  174F                     _setDimmerLights_Adj:	
 12716                           
 12717                           ;incstack = 0
 12718                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12719                           ;setDimmerLights_Adj@lights stored from wreg
 12720  174F  0020               	movlb	0	; select bank0
 12721  1750  00ED               	movwf	setDimmerLights_Adj@lights
 12722                           
 12723                           ;Dimmer_B1.c: 674: if (status == 1) {
 12724  1751  086B               	movf	setDimmerLights_Adj@status,w
 12725  1752  3A01               	xorlw	1
 12726  1753  1D03               	skipz
 12727  1754  2F67               	goto	l8948
 12728                           
 12729                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12730  1755  0A6F               	incf	_DimmerLights,w
 12731  1756  0086               	movwf	6
 12732  1757  3001               	movlw	1	; select bank2/3
 12733  1758  0087               	movwf	7
 12734  1759  1701               	bsf	1,6
 12735                           
 12736                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12737  175A  0A6F               	incf	_DimmerLights,w
 12738  175B  0086               	movwf	6
 12739  175C  3001               	movlw	1	; select bank2/3
 12740  175D  0087               	movwf	7
 12741  175E  1681               	bsf	1,5
 12742                           
 12743                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12744  175F  3064               	movlw	100
 12745  1760  00A9               	movwf	setBuz@time
 12746  1761  3000               	movlw	0
 12747  1762  00AA               	movwf	setBuz@time+1
 12748  1763  3001               	movlw	1
 12749  1764  3197  27A7         	fcall	_setBuz
 12750                           
 12751                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12752  1766  0008               	return
 12753  1767                     l8948:	
 12754  1767  0020               	movlb	0	; select bank0
 12755  1768  08EB               	movf	setDimmerLights_Adj@status,f
 12756  1769  1D03               	skipz
 12757  176A  0008               	return
 12758                           
 12759                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12760  176B  0021               	movlb	1	; select bank1
 12761  176C  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12762                           
 12763                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12764  176D  0020               	movlb	0	; select bank0
 12765  176E  086D               	movf	setDimmerLights_Adj@lights,w
 12766  176F  319D  256D  3197   	fcall	_setDimmerLights_Line
 12767                           
 12768                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12769  1772  0020               	movlb	0	; select bank0
 12770  1773  0A6F               	incf	_DimmerLights,w
 12771  1774  0086               	movwf	6
 12772  1775  3001               	movlw	1	; select bank2/3
 12773  1776  0087               	movwf	7
 12774  1777  1301               	bcf	1,6
 12775                           
 12776                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 12777  1778  0A6F               	incf	_DimmerLights,w
 12778  1779  0086               	movwf	6
 12779  177A  3001               	movlw	1	; select bank2/3
 12780  177B  0087               	movwf	7
 12781  177C  1281               	bcf	1,5
 12782                           
 12783                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12784  177D  086F               	movf	_DimmerLights,w
 12785  177E  3E04               	addlw	4
 12786  177F  0086               	movwf	6
 12787  1780  3001               	movlw	1	; select bank2/3
 12788  1781  0087               	movwf	7
 12789  1782  0801               	movf	1,w
 12790  1783  00EC               	movwf	??_setDimmerLights_Adj
 12791  1784  086F               	movf	_DimmerLights,w
 12792  1785  3E06               	addlw	6
 12793  1786  0086               	movwf	6
 12794  1787  3001               	movlw	1	; select bank2/3
 12795  1788  0087               	movwf	7
 12796  1789  086C               	movf	??_setDimmerLights_Adj,w
 12797  178A  0081               	movwf	1
 12798                           
 12799                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12800  178B  086F               	movf	_DimmerLights,w
 12801  178C  3E04               	addlw	4
 12802  178D  0086               	movwf	6
 12803  178E  3001               	movlw	1	; select bank2/3
 12804  178F  0087               	movwf	7
 12805  1790  0801               	movf	1,w
 12806  1791  318A  22CC  3197   	fcall	_setPercentValue
 12807  1794  0020               	movlb	0	; select bank0
 12808  1795  00EC               	movwf	??_setDimmerLights_Adj
 12809  1796  086C               	movf	??_setDimmerLights_Adj,w
 12810  1797  00E2               	movwf	setProductData@value
 12811  1798  086D               	movf	setDimmerLights_Adj@lights,w
 12812  1799  3E14               	addlw	20
 12813  179A  319D  255F  3197   	fcall	_setProductData
 12814                           
 12815                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 12816  179D  0020               	movlb	0	; select bank0
 12817  179E  01E6               	clrf	setRF_DimmerLights@on
 12818  179F  0AE6               	incf	setRF_DimmerLights@on,f
 12819  17A0  086D               	movf	setDimmerLights_Adj@lights,w
 12820  17A1  3188  2039  3197   	fcall	_setRF_DimmerLights
 12821                           
 12822                           ;Dimmer_B1.c: 701: setTxData();
 12823  17A4  318E  260C         	fcall	_setTxData
 12824  17A6  0008               	return
 12825  17A7                     __end_of_setDimmerLights_Adj:	
 12826                           
 12827                           	psect	text77
 12828  1656                     __ptext77:	
 12829 ;; *************** function _setDimmerLights *****************
 12830 ;; Defined at:
 12831 ;;		line 630 in file "../src/Dimmer_B1.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  lights          1    wreg     unsigned char 
 12834 ;;  status          1   75[BANK0 ] unsigned char 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;  lights          1   77[BANK0 ] unsigned char 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;		None               void
 12839 ;; Registers used:
 12840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12846 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;Total ram usage:        3 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    8
 12853 ;; This function calls:
 12854 ;;		_setDimmerLights_Line
 12855 ;;		_setLED
 12856 ;;		_setPercentValue
 12857 ;;		_setProductData
 12858 ;;		_setRF_DimmerLights
 12859 ;;		_setTxData
 12860 ;; This function is called by:
 12861 ;;		_setDimmerLights_Main
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           
 12866                           ;psect for function _setDimmerLights
 12867  1656                     _setDimmerLights:	
 12868                           
 12869                           ;incstack = 0
 12870                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12871                           ;setDimmerLights@lights stored from wreg
 12872  1656  0020               	movlb	0	; select bank0
 12873  1657  00ED               	movwf	setDimmerLights@lights
 12874                           
 12875                           ;Dimmer_B1.c: 638: if (status == 1) {
 12876  1658  086B               	movf	setDimmerLights@status,w
 12877  1659  3A01               	xorlw	1
 12878  165A  1D03               	skipz
 12879  165B  2E86               	goto	l8928
 12880                           
 12881                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12882  165C  0A6F               	incf	_DimmerLights,w
 12883  165D  0086               	movwf	6
 12884  165E  3001               	movlw	1	; select bank2/3
 12885  165F  0087               	movwf	7
 12886  1660  1501               	bsf	1,2
 12887                           
 12888                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 12889  1661  0021               	movlb	1	; select bank1
 12890  1662  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12891                           
 12892                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 12893  1663  0020               	movlb	0	; select bank0
 12894  1664  086D               	movf	setDimmerLights@lights,w
 12895  1665  319D  256D  3196   	fcall	_setDimmerLights_Line
 12896                           
 12897                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 12898  1668  0020               	movlb	0	; select bank0
 12899  1669  01A2               	clrf	setLED@command
 12900  166A  086D               	movf	setDimmerLights@lights,w
 12901  166B  3193  23DF  3196   	fcall	_setLED
 12902                           
 12903                           ;Dimmer_B1.c: 646: ;;
 12904                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(75F*0.8));
 12905  166E  303C               	movlw	60
 12906  166F  0020               	movlb	0	; select bank0
 12907  1670  00EC               	movwf	??_setDimmerLights
 12908  1671  086F               	movf	_DimmerLights,w
 12909  1672  3E04               	addlw	4
 12910  1673  0086               	movwf	6
 12911  1674  3001               	movlw	1	; select bank2/3
 12912  1675  0087               	movwf	7
 12913  1676  086C               	movf	??_setDimmerLights,w
 12914  1677  0081               	movwf	1
 12915                           
 12916                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(75F*0.8))));
 12917  1678  303C               	movlw	60
 12918  1679  318A  22CC  3196   	fcall	_setPercentValue
 12919  167C  0020               	movlb	0	; select bank0
 12920  167D  00EC               	movwf	??_setDimmerLights
 12921  167E  086C               	movf	??_setDimmerLights,w
 12922  167F  00E2               	movwf	setProductData@value
 12923  1680  086D               	movf	setDimmerLights@lights,w
 12924  1681  3E14               	addlw	20
 12925  1682  319D  255F  3196   	fcall	_setProductData
 12926                           
 12927                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 12928  1685  2E9C               	goto	l8938
 12929  1686                     l8928:	
 12930  1686  0020               	movlb	0	; select bank0
 12931  1687  08EB               	movf	setDimmerLights@status,f
 12932  1688  1D03               	skipz
 12933  1689  2E9C               	goto	l8938
 12934                           
 12935                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12936  168A  0A6F               	incf	_DimmerLights,w
 12937  168B  0086               	movwf	6
 12938  168C  3001               	movlw	1	; select bank2/3
 12939  168D  0087               	movwf	7
 12940  168E  1101               	bcf	1,2
 12941                           
 12942                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 12943  168F  0021               	movlb	1	; select bank1
 12944  1690  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12945                           
 12946                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 12947  1691  3000               	movlw	0
 12948  1692  319D  256D  3196   	fcall	_setDimmerLights_Line
 12949                           
 12950                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12951  1695  0020               	movlb	0	; select bank0
 12952  1696  01A2               	clrf	setLED@command
 12953  1697  0AA2               	incf	setLED@command,f
 12954  1698  086D               	movf	setDimmerLights@lights,w
 12955  1699  3193  23DF  3196   	fcall	_setLED
 12956  169C                     l8938:	
 12957                           ;Dimmer_B1.c: 662: ;;
 12958                           
 12959                           
 12960                           ;Dimmer_B1.c: 663: }
 12961                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 12962  169C  0020               	movlb	0	; select bank0
 12963  169D  086B               	movf	setDimmerLights@status,w
 12964  169E  00EC               	movwf	??_setDimmerLights
 12965  169F  086C               	movf	??_setDimmerLights,w
 12966  16A0  00E6               	movwf	setRF_DimmerLights@on
 12967  16A1  086D               	movf	setDimmerLights@lights,w
 12968  16A2  3188  2039  3196   	fcall	_setRF_DimmerLights
 12969                           
 12970                           ;Dimmer_B1.c: 667: setTxData();
 12971  16A5  318E  260C         	fcall	_setTxData
 12972  16A7  0008               	return
 12973  16A8                     __end_of_setDimmerLights:	
 12974                           
 12975                           	psect	text78
 12976  0E0C                     __ptext78:	
 12977 ;; *************** function _setTxData *****************
 12978 ;; Defined at:
 12979 ;;		line 171 in file "../src/RF_Control_B1.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;		None
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;  i               1    0        unsigned char 
 12984 ;; Return value:  Size  Location     Type
 12985 ;;		None               void
 12986 ;; Registers used:
 12987 ;;		wreg, fsr1l, fsr1h
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;Total ram usage:        1 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    5
 13000 ;; This function calls:
 13001 ;;		Nothing
 13002 ;; This function is called by:
 13003 ;;		_setDimmerLights
 13004 ;;		_setDimmerLights_Adj
 13005 ;;		_getRxData
 13006 ;;		_setControl_Lights_Table
 13007 ;;		_setRFSW_Control
 13008 ;;		_setRFSW_AdjControl
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012                           
 13013                           ;psect for function _setTxData
 13014  0E0C                     _setTxData:	
 13015                           
 13016                           ;RF_Control_B1.c: 172: char i;
 13017                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _setTxData: [wregfsr1]
 13021  0E0C  0021               	movlb	1	; select bank1
 13022  0E0D  1C3A               	btfss	_RF1^(0+128),0
 13023  0E0E  0008               	return
 13024                           
 13025                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13026  0E0F  193A               	btfsc	_RF1^(0+128),2
 13027  0E10  0008               	return
 13028                           
 13029                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13030  0E11  153A               	bsf	_RF1^(0+128),2
 13031                           
 13032                           ;RF_Control_B1.c: 177: RF1.RunTime = 20;
 13033  0E12  3014               	movlw	20
 13034  0E13  00C1               	movwf	(_RF1^(0+128)+7)
 13035  0E14  3000               	movlw	0
 13036  0E15  00C2               	movwf	(_RF1^(0+128)+8)
 13037                           
 13038                           ;RF_Control_B1.c: 189: RF_Data[0] = 0x63;
 13039  0E16  3063               	movlw	99
 13040  0E17  0020               	movlb	0	; select bank0
 13041  0E18  00A0               	movwf	??_setTxData
 13042  0E19  0820               	movf	??_setTxData,w
 13043  0E1A  0023               	movlb	3	; select bank3
 13044  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13045                           
 13046                           ;RF_Control_B1.c: 190: RF_Data[1] = 0x02;
 13047  0E1C  3002               	movlw	2
 13048  0E1D  0020               	movlb	0	; select bank0
 13049  0E1E  00A0               	movwf	??_setTxData
 13050  0E1F  0820               	movf	??_setTxData,w
 13051  0E20  0023               	movlb	3	; select bank3
 13052  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13053                           
 13054                           ;RF_Control_B1.c: 192: RF_Data[2] = product->Data[2];
 13055  0E22  0879               	movf	_product,w
 13056  0E23  0086               	movwf	6
 13057  0E24  3002               	movlw	2	; select bank4/5
 13058  0E25  0087               	movwf	7
 13059  0E26  3002               	movlw	2	; select bank4/5
 13060  0E27  3F42               	moviw [2]fsr1
 13061  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13062                           
 13063                           ;RF_Control_B1.c: 193: RF_Data[3] = product->Data[3];
 13064  0E29  0879               	movf	_product,w
 13065  0E2A  0086               	movwf	6
 13066  0E2B  3002               	movlw	2	; select bank4/5
 13067  0E2C  0087               	movwf	7
 13068  0E2D  3002               	movlw	2	; select bank4/5
 13069  0E2E  3F43               	moviw [3]fsr1
 13070  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13071                           
 13072                           ;RF_Control_B1.c: 194: RF_Data[4] = product->Data[4];
 13073  0E30  0879               	movf	_product,w
 13074  0E31  0086               	movwf	6
 13075  0E32  3002               	movlw	2	; select bank4/5
 13076  0E33  0087               	movwf	7
 13077  0E34  3002               	movlw	2	; select bank4/5
 13078  0E35  3F44               	moviw [4]fsr1
 13079  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13080                           
 13081                           ;RF_Control_B1.c: 195: RF_Data[5] = product->Data[5];
 13082  0E37  0879               	movf	_product,w
 13083  0E38  0086               	movwf	6
 13084  0E39  3002               	movlw	2	; select bank4/5
 13085  0E3A  0087               	movwf	7
 13086  0E3B  3002               	movlw	2	; select bank4/5
 13087  0E3C  3F45               	moviw [5]fsr1
 13088  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13089                           
 13090                           ;RF_Control_B1.c: 196: RF_Data[6] = product->Data[6];
 13091  0E3E  0879               	movf	_product,w
 13092  0E3F  0086               	movwf	6
 13093  0E40  3002               	movlw	2	; select bank4/5
 13094  0E41  0087               	movwf	7
 13095  0E42  3002               	movlw	2	; select bank4/5
 13096  0E43  3F46               	moviw [6]fsr1
 13097  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13098                           
 13099                           ;RF_Control_B1.c: 197: RF_Data[7] = product->Data[7];
 13100  0E45  0879               	movf	_product,w
 13101  0E46  0086               	movwf	6
 13102  0E47  3002               	movlw	2	; select bank4/5
 13103  0E48  0087               	movwf	7
 13104  0E49  3002               	movlw	2	; select bank4/5
 13105  0E4A  3F47               	moviw [7]fsr1
 13106  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13107                           
 13108                           ;RF_Control_B1.c: 198: RF_Data[8] = product->Data[8];
 13109  0E4C  0879               	movf	_product,w
 13110  0E4D  0086               	movwf	6
 13111  0E4E  3002               	movlw	2	; select bank4/5
 13112  0E4F  0087               	movwf	7
 13113  0E50  3002               	movlw	2	; select bank4/5
 13114  0E51  3F48               	moviw [8]fsr1
 13115  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13116                           
 13117                           ;RF_Control_B1.c: 199: RF_Data[9] = product->Data[9];
 13118  0E53  0879               	movf	_product,w
 13119  0E54  0086               	movwf	6
 13120  0E55  3002               	movlw	2	; select bank4/5
 13121  0E56  0087               	movwf	7
 13122  0E57  3002               	movlw	2	; select bank4/5
 13123  0E58  3F49               	moviw [9]fsr1
 13124  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13125                           
 13126                           ;RF_Control_B1.c: 200: RF_Data[10] = product->Data[10];
 13127  0E5A  0879               	movf	_product,w
 13128  0E5B  0086               	movwf	6
 13129  0E5C  3002               	movlw	2	; select bank4/5
 13130  0E5D  0087               	movwf	7
 13131  0E5E  3002               	movlw	2	; select bank4/5
 13132  0E5F  3F4A               	moviw [10]fsr1
 13133  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13134                           
 13135                           ;RF_Control_B1.c: 201: RF_Data[11] = product->Data[11];
 13136  0E61  0879               	movf	_product,w
 13137  0E62  0086               	movwf	6
 13138  0E63  3002               	movlw	2	; select bank4/5
 13139  0E64  0087               	movwf	7
 13140  0E65  3002               	movlw	2	; select bank4/5
 13141  0E66  3F4B               	moviw [11]fsr1
 13142  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13143                           
 13144                           ;RF_Control_B1.c: 202: RF_Data[12] = product->Data[12];
 13145  0E68  0879               	movf	_product,w
 13146  0E69  0086               	movwf	6
 13147  0E6A  3002               	movlw	2	; select bank4/5
 13148  0E6B  0087               	movwf	7
 13149  0E6C  3002               	movlw	2	; select bank4/5
 13150  0E6D  3F4C               	moviw [12]fsr1
 13151  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13152                           
 13153                           ;RF_Control_B1.c: 203: RF_Data[13] = product->Data[13];
 13154  0E6F  0879               	movf	_product,w
 13155  0E70  0086               	movwf	6
 13156  0E71  3002               	movlw	2	; select bank4/5
 13157  0E72  0087               	movwf	7
 13158  0E73  3002               	movlw	2	; select bank4/5
 13159  0E74  3F4D               	moviw [13]fsr1
 13160  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13161                           
 13162                           ;RF_Control_B1.c: 204: RF_Data[14] = product->Data[14];
 13163  0E76  0879               	movf	_product,w
 13164  0E77  0086               	movwf	6
 13165  0E78  3002               	movlw	2	; select bank4/5
 13166  0E79  0087               	movwf	7
 13167  0E7A  3002               	movlw	2	; select bank4/5
 13168  0E7B  3F4E               	moviw [14]fsr1
 13169  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13170                           
 13171                           ;RF_Control_B1.c: 205: RF_Data[15] = product->Data[15];
 13172  0E7D  0879               	movf	_product,w
 13173  0E7E  0086               	movwf	6
 13174  0E7F  3002               	movlw	2	; select bank4/5
 13175  0E80  0087               	movwf	7
 13176  0E81  3002               	movlw	2	; select bank4/5
 13177  0E82  3F4F               	moviw [15]fsr1
 13178  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13179                           
 13180                           ;RF_Control_B1.c: 206: RF_Data[16] = product->Data[16];
 13181  0E84  0879               	movf	_product,w
 13182  0E85  0086               	movwf	6
 13183  0E86  3002               	movlw	2	; select bank4/5
 13184  0E87  0087               	movwf	7
 13185  0E88  3002               	movlw	2	; select bank4/5
 13186  0E89  3F50               	moviw [16]fsr1
 13187  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13188                           
 13189                           ;RF_Control_B1.c: 207: RF_Data[17] = product->Data[17];
 13190  0E8B  0879               	movf	_product,w
 13191  0E8C  0086               	movwf	6
 13192  0E8D  3002               	movlw	2	; select bank4/5
 13193  0E8E  0087               	movwf	7
 13194  0E8F  3002               	movlw	2	; select bank4/5
 13195  0E90  3F51               	moviw [17]fsr1
 13196  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13197                           
 13198                           ;RF_Control_B1.c: 208: RF_Data[18] = product->Data[18];
 13199  0E92  0879               	movf	_product,w
 13200  0E93  0086               	movwf	6
 13201  0E94  3002               	movlw	2	; select bank4/5
 13202  0E95  0087               	movwf	7
 13203  0E96  3002               	movlw	2	; select bank4/5
 13204  0E97  3F52               	moviw [18]fsr1
 13205  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13206                           
 13207                           ;RF_Control_B1.c: 209: RF_Data[19] = product->Data[19];
 13208  0E99  0879               	movf	_product,w
 13209  0E9A  0086               	movwf	6
 13210  0E9B  3002               	movlw	2	; select bank4/5
 13211  0E9C  0087               	movwf	7
 13212  0E9D  3002               	movlw	2	; select bank4/5
 13213  0E9E  3F53               	moviw [19]fsr1
 13214  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13215                           
 13216                           ;RF_Control_B1.c: 210: RF_Data[20] = 209;
 13217  0EA0  30D1               	movlw	209
 13218  0EA1  0020               	movlb	0	; select bank0
 13219  0EA2  00A0               	movwf	??_setTxData
 13220  0EA3  0820               	movf	??_setTxData,w
 13221  0EA4  0023               	movlb	3	; select bank3
 13222  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13223  0EA6  0008               	return
 13224  0EA7                     __end_of_setTxData:	
 13225                           
 13226                           	psect	text79
 13227  0839                     __ptext79:	
 13228 ;; *************** function _setRF_DimmerLights *****************
 13229 ;; Defined at:
 13230 ;;		line 442 in file "../src/RF_Control_B1.c"
 13231 ;; Parameters:    Size  Location     Type
 13232 ;;  lights          1    wreg     unsigned char 
 13233 ;;  on              1   70[BANK0 ] unsigned char 
 13234 ;; Auto vars:     Size  Location     Type
 13235 ;;  lights          1   74[BANK0 ] unsigned char 
 13236 ;;  status          1   73[BANK0 ] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;		None               void
 13239 ;; Registers used:
 13240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13246 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;Total ram usage:        5 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    6
 13253 ;; This function calls:
 13254 ;;		_setProductData
 13255 ;; This function is called by:
 13256 ;;		_setDimmerLights
 13257 ;;		_setDimmerLights_Adj
 13258 ;;		_setRFSW_Control
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function _setRF_DimmerLights
 13264  0839                     _setRF_DimmerLights:	
 13265                           
 13266                           ;incstack = 0
 13267                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13268                           ;setRF_DimmerLights@lights stored from wreg
 13269  0839  0020               	movlb	0	; select bank0
 13270  083A  00EA               	movwf	setRF_DimmerLights@lights
 13271                           
 13272                           ;RF_Control_B1.c: 443: char status = 1;
 13273  083B  01E9               	clrf	setRF_DimmerLights@status
 13274  083C  0AE9               	incf	setRF_DimmerLights@status,f
 13275                           
 13276                           ;RF_Control_B1.c: 444: status <<= (lights - 1);
 13277  083D  086A               	movf	setRF_DimmerLights@lights,w
 13278  083E  3EFF               	addlw	-1
 13279  083F  0A89               	incf	9,f
 13280  0840  2843               	goto	u8990
 13281  0841                     u8995:	
 13282  0841  1003               	clrc
 13283  0842  0DE9               	rlf	setRF_DimmerLights@status,f
 13284  0843                     u8990:	
 13285  0843  3EFF               	addlw	-1
 13286  0844  1D03               	skipz
 13287  0845  2841               	goto	u8995
 13288                           
 13289                           ;RF_Control_B1.c: 445: setProductData(11, lights);
 13290  0846  086A               	movf	setRF_DimmerLights@lights,w
 13291  0847  00E7               	movwf	??_setRF_DimmerLights
 13292  0848  0867               	movf	??_setRF_DimmerLights,w
 13293  0849  00E2               	movwf	setProductData@value
 13294  084A  300B               	movlw	11
 13295  084B  319D  255F  3188   	fcall	_setProductData
 13296                           
 13297                           ;RF_Control_B1.c: 453: setProductData(9, product->Data[20 + lights]);
 13298  084E  0020               	movlb	0	; select bank0
 13299  084F  086A               	movf	setRF_DimmerLights@lights,w
 13300  0850  3E14               	addlw	20
 13301  0851  0779               	addwf	_product,w
 13302  0852  00E7               	movwf	??_setRF_DimmerLights
 13303  0853  0867               	movf	??_setRF_DimmerLights,w
 13304  0854  0086               	movwf	6
 13305  0855  3002               	movlw	2	; select bank4/5
 13306  0856  0087               	movwf	7
 13307  0857  0801               	movf	1,w
 13308  0858  00E8               	movwf	??_setRF_DimmerLights+1
 13309  0859  0868               	movf	??_setRF_DimmerLights+1,w
 13310  085A  00E2               	movwf	setProductData@value
 13311  085B  3009               	movlw	9
 13312  085C  319D  255F  3188   	fcall	_setProductData
 13313                           
 13314                           ;RF_Control_B1.c: 454: setProductData(17, product->Data[26 + lights]);
 13315  085F  0020               	movlb	0	; select bank0
 13316  0860  086A               	movf	setRF_DimmerLights@lights,w
 13317  0861  3E1A               	addlw	26
 13318  0862  0779               	addwf	_product,w
 13319  0863  00E7               	movwf	??_setRF_DimmerLights
 13320  0864  0867               	movf	??_setRF_DimmerLights,w
 13321  0865  0086               	movwf	6
 13322  0866  3002               	movlw	2	; select bank4/5
 13323  0867  0087               	movwf	7
 13324  0868  0801               	movf	1,w
 13325  0869  00E8               	movwf	??_setRF_DimmerLights+1
 13326  086A  0868               	movf	??_setRF_DimmerLights+1,w
 13327  086B  00E2               	movwf	setProductData@value
 13328  086C  3011               	movlw	17
 13329  086D  319D  255F  3188   	fcall	_setProductData
 13330                           
 13331                           ;RF_Control_B1.c: 455: if (on == 1) {
 13332  0870  0020               	movlb	0	; select bank0
 13333  0871  0866               	movf	setRF_DimmerLights@on,w
 13334  0872  3A01               	xorlw	1
 13335  0873  1D03               	skipz
 13336  0874  2883               	goto	l8426
 13337                           
 13338                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15] | status));
 13339  0875  0879               	movf	_product,w
 13340  0876  3E0F               	addlw	15
 13341  0877  0086               	movwf	6
 13342  0878  3002               	movlw	2	; select bank4/5
 13343  0879  0087               	movwf	7
 13344  087A  0801               	movf	1,w
 13345  087B  0469               	iorwf	setRF_DimmerLights@status,w
 13346  087C  00E7               	movwf	??_setRF_DimmerLights
 13347  087D  0867               	movf	??_setRF_DimmerLights,w
 13348  087E  00E2               	movwf	setProductData@value
 13349  087F  300F               	movlw	15
 13350  0880  319D  255F         	fcall	_setProductData
 13351                           
 13352                           ;RF_Control_B1.c: 457: } else {
 13353  0882  0008               	return
 13354  0883                     l8426:	
 13355                           
 13356                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15]&(~status)));
 13357  0883  0879               	movf	_product,w
 13358  0884  3E0F               	addlw	15
 13359  0885  0086               	movwf	6
 13360  0886  3002               	movlw	2	; select bank4/5
 13361  0887  0087               	movwf	7
 13362  0888  0020               	movlb	0	; select bank0
 13363  0889  0969               	comf	setRF_DimmerLights@status,w
 13364  088A  0501               	andwf	1,w
 13365  088B  00E7               	movwf	??_setRF_DimmerLights
 13366  088C  0867               	movf	??_setRF_DimmerLights,w
 13367  088D  00E2               	movwf	setProductData@value
 13368  088E  300F               	movlw	15
 13369  088F  319D  255F         	fcall	_setProductData
 13370  0891  0008               	return
 13371  0892                     __end_of_setRF_DimmerLights:	
 13372                           
 13373                           	psect	text80
 13374  0ACC                     __ptext80:	
 13375 ;; *************** function _setPercentValue *****************
 13376 ;; Defined at:
 13377 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;  value           1    wreg     unsigned char 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  value           1   62[BANK0 ] unsigned char 
 13382 ;;  i               3   63[BANK0 ] float 
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  1    wreg      unsigned char 
 13385 ;; Registers used:
 13386 ;;		wreg, status,2, status,0, pclath, cstack
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:        6 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    7
 13399 ;; This function calls:
 13400 ;;		___awtoft
 13401 ;;		___ftadd
 13402 ;;		___ftdiv
 13403 ;;		___ftneg
 13404 ;;		___fttol
 13405 ;; This function is called by:
 13406 ;;		_setDimmerLights
 13407 ;;		_setDimmerLights_Adj
 13408 ;;		_Flash_Memory_Initialization
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _setPercentValue
 13414  0ACC                     _setPercentValue:	
 13415                           
 13416                           ;incstack = 0
 13417                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13418                           ;setPercentValue@value stored from wreg
 13419  0ACC  0020               	movlb	0	; select bank0
 13420  0ACD  00DE               	movwf	setPercentValue@value
 13421                           
 13422                           ;Dimmer_B1.c: 1042: float i = ((char)(75F*0.8)) - ((char)(15*0.8));
 13423  0ACE  3000               	movlw	0
 13424  0ACF  00DF               	movwf	setPercentValue@i
 13425  0AD0  3040               	movlw	64
 13426  0AD1  00E0               	movwf	setPercentValue@i+1
 13427  0AD2  3042               	movlw	66
 13428  0AD3  00E1               	movwf	setPercentValue@i+2
 13429                           
 13430                           ;Dimmer_B1.c: 1043: i /= 100;
 13431  0AD4  3000               	movlw	0
 13432  0AD5  00AE               	movwf	___ftdiv@f2
 13433  0AD6  30C8               	movlw	200
 13434  0AD7  00AF               	movwf	___ftdiv@f2+1
 13435  0AD8  3042               	movlw	66
 13436  0AD9  00B0               	movwf	___ftdiv@f2+2
 13437  0ADA  085F               	movf	setPercentValue@i,w
 13438  0ADB  00B1               	movwf	___ftdiv@f1
 13439  0ADC  0860               	movf	setPercentValue@i+1,w
 13440  0ADD  00B2               	movwf	___ftdiv@f1+1
 13441  0ADE  0861               	movf	setPercentValue@i+2,w
 13442  0ADF  00B3               	movwf	___ftdiv@f1+2
 13443  0AE0  318E  26A7  318A   	fcall	___ftdiv
 13444  0AE3  0020               	movlb	0	; select bank0
 13445  0AE4  082E               	movf	?___ftdiv,w
 13446  0AE5  00DF               	movwf	setPercentValue@i
 13447  0AE6  082F               	movf	?___ftdiv+1,w
 13448  0AE7  00E0               	movwf	setPercentValue@i+1
 13449  0AE8  0830               	movf	?___ftdiv+2,w
 13450  0AE9  00E1               	movwf	setPercentValue@i+2
 13451                           
 13452                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(75F*0.8)) - value) / i));
 13453  0AEA  085E               	movf	setPercentValue@value,w
 13454  0AEB  00DC               	movwf	??_setPercentValue
 13455  0AEC  01DD               	clrf	??_setPercentValue+1
 13456  0AED  09DC               	comf	??_setPercentValue,f
 13457  0AEE  09DD               	comf	??_setPercentValue+1,f
 13458  0AEF  0ADC               	incf	??_setPercentValue,f
 13459  0AF0  1903               	skipnz
 13460  0AF1  0ADD               	incf	??_setPercentValue+1,f
 13461  0AF2  085C               	movf	??_setPercentValue,w
 13462  0AF3  3E3C               	addlw	60
 13463  0AF4  00A8               	movwf	___awtoft@c
 13464  0AF5  3000               	movlw	0
 13465  0AF6  3D5D               	addwfc	??_setPercentValue+1,w
 13466  0AF7  00A9               	movwf	___awtoft@c+1
 13467  0AF8  3190  2084  318A   	fcall	___awtoft
 13468  0AFB  0020               	movlb	0	; select bank0
 13469  0AFC  0828               	movf	?___awtoft,w
 13470  0AFD  00B1               	movwf	___ftdiv@f1
 13471  0AFE  0829               	movf	?___awtoft+1,w
 13472  0AFF  00B2               	movwf	___ftdiv@f1+1
 13473  0B00  082A               	movf	?___awtoft+2,w
 13474  0B01  00B3               	movwf	___ftdiv@f1+2
 13475  0B02  085F               	movf	setPercentValue@i,w
 13476  0B03  00AE               	movwf	___ftdiv@f2
 13477  0B04  0860               	movf	setPercentValue@i+1,w
 13478  0B05  00AF               	movwf	___ftdiv@f2+1
 13479  0B06  0861               	movf	setPercentValue@i+2,w
 13480  0B07  00B0               	movwf	___ftdiv@f2+2
 13481  0B08  318E  26A7  318A   	fcall	___ftdiv
 13482  0B0B  0020               	movlb	0	; select bank0
 13483  0B0C  082E               	movf	?___ftdiv,w
 13484  0B0D  00BE               	movwf	___ftneg@f1
 13485  0B0E  082F               	movf	?___ftdiv+1,w
 13486  0B0F  00BF               	movwf	___ftneg@f1+1
 13487  0B10  0830               	movf	?___ftdiv+2,w
 13488  0B11  00C0               	movwf	___ftneg@f1+2
 13489  0B12  319C  2485  318A   	fcall	___ftneg
 13490  0B15  0020               	movlb	0	; select bank0
 13491  0B16  083E               	movf	?___ftneg,w
 13492  0B17  00C4               	movwf	___ftadd@f2
 13493  0B18  083F               	movf	?___ftneg+1,w
 13494  0B19  00C5               	movwf	___ftadd@f2+1
 13495  0B1A  0840               	movf	?___ftneg+2,w
 13496  0B1B  00C6               	movwf	___ftadd@f2+2
 13497  0B1C  3000               	movlw	0
 13498  0B1D  00C1               	movwf	___ftadd@f1
 13499  0B1E  30C8               	movlw	200
 13500  0B1F  00C2               	movwf	___ftadd@f1+1
 13501  0B20  3042               	movlw	66
 13502  0B21  00C3               	movwf	___ftadd@f1+2
 13503  0B22  3184  245A  318A   	fcall	___ftadd
 13504  0B25  0020               	movlb	0	; select bank0
 13505  0B26  0841               	movf	?___ftadd,w
 13506  0B27  00CE               	movwf	___fttol@f1
 13507  0B28  0842               	movf	?___ftadd+1,w
 13508  0B29  00CF               	movwf	___fttol@f1+1
 13509  0B2A  0843               	movf	?___ftadd+2,w
 13510  0B2B  00D0               	movwf	___fttol@f1+2
 13511  0B2C  318D  2585         	fcall	___fttol
 13512  0B2E  0020               	movlb	0	; select bank0
 13513  0B2F  084E               	movf	?___fttol,w
 13514  0B30  0008               	return
 13515  0B31                     __end_of_setPercentValue:	
 13516                           
 13517                           	psect	text81
 13518  0D85                     __ptext81:	
 13519 ;; *************** function ___fttol *****************
 13520 ;; Defined at:
 13521 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  f1              3   46[BANK0 ] float 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  lval            4   55[BANK0 ] unsigned long 
 13526 ;;  exp1            1   59[BANK0 ] unsigned char 
 13527 ;;  sign1           1   54[BANK0 ] unsigned char 
 13528 ;; Return value:  Size  Location     Type
 13529 ;;                  4   46[BANK0 ] long 
 13530 ;; Registers used:
 13531 ;;		wreg, status,2, status,0
 13532 ;; Tracked objects:
 13533 ;;		On entry : 0/0
 13534 ;;		On exit  : 0/0
 13535 ;;		Unchanged: 0/0
 13536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;Total ram usage:       14 bytes
 13542 ;; Hardware stack levels used:    1
 13543 ;; Hardware stack levels required when called:    5
 13544 ;; This function calls:
 13545 ;;		Nothing
 13546 ;; This function is called by:
 13547 ;;		_getPercentValue
 13548 ;;		_setPercentValue
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552                           
 13553                           ;psect for function ___fttol
 13554  0D85                     ___fttol:	
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13558  0D85  0020               	movlb	0	; select bank0
 13559  0D86  084E               	movf	___fttol@f1,w
 13560  0D87  00D2               	movwf	??___fttol
 13561  0D88  084F               	movf	___fttol@f1+1,w
 13562  0D89  00D3               	movwf	??___fttol+1
 13563  0D8A  0850               	movf	___fttol@f1+2,w
 13564  0D8B  00D4               	movwf	??___fttol+2
 13565  0D8C  1003               	clrc
 13566  0D8D  0D53               	rlf	??___fttol+1,w
 13567  0D8E  0D54               	rlf	??___fttol+2,w
 13568  0D8F  00D5               	movwf	??___fttol+3
 13569  0D90  0855               	movf	??___fttol+3,w
 13570  0D91  00DB               	movwf	___fttol@exp1
 13571  0D92  08DB               	movf	___fttol@exp1,f
 13572  0D93  1D03               	skipz
 13573  0D94  2D9E               	goto	l8198
 13574  0D95  3000               	movlw	0
 13575  0D96  00D1               	movwf	?___fttol+3
 13576  0D97  3000               	movlw	0
 13577  0D98  00D0               	movwf	?___fttol+2
 13578  0D99  3000               	movlw	0
 13579  0D9A  00CF               	movwf	?___fttol+1
 13580  0D9B  3000               	movlw	0
 13581  0D9C  00CE               	movwf	?___fttol
 13582  0D9D  0008               	return
 13583  0D9E                     l8198:	
 13584  0D9E  084E               	movf	___fttol@f1,w
 13585  0D9F  00D2               	movwf	??___fttol
 13586  0DA0  084F               	movf	___fttol@f1+1,w
 13587  0DA1  00D3               	movwf	??___fttol+1
 13588  0DA2  0850               	movf	___fttol@f1+2,w
 13589  0DA3  00D4               	movwf	??___fttol+2
 13590  0DA4  3017               	movlw	23
 13591  0DA5                     u8625:	
 13592  0DA5  36D4               	lsrf	??___fttol+2,f
 13593  0DA6  0CD3               	rrf	??___fttol+1,f
 13594  0DA7  0CD2               	rrf	??___fttol,f
 13595  0DA8  0B89               	decfsz	9,f
 13596  0DA9  2DA5               	goto	u8625
 13597  0DAA  0852               	movf	??___fttol,w
 13598  0DAB  00D5               	movwf	??___fttol+3
 13599  0DAC  0855               	movf	??___fttol+3,w
 13600  0DAD  00D6               	movwf	___fttol@sign1
 13601  0DAE  17CF               	bsf	___fttol@f1+1,7
 13602  0DAF  30FF               	movlw	255
 13603  0DB0  05CE               	andwf	___fttol@f1,f
 13604  0DB1  30FF               	movlw	255
 13605  0DB2  05CF               	andwf	___fttol@f1+1,f
 13606  0DB3  3000               	movlw	0
 13607  0DB4  05D0               	andwf	___fttol@f1+2,f
 13608  0DB5  084E               	movf	___fttol@f1,w
 13609  0DB6  00D7               	movwf	___fttol@lval
 13610  0DB7  084F               	movf	___fttol@f1+1,w
 13611  0DB8  00D8               	movwf	___fttol@lval+1
 13612  0DB9  0850               	movf	___fttol@f1+2,w
 13613  0DBA  00D9               	movwf	___fttol@lval+2
 13614  0DBB  01DA               	clrf	___fttol@lval+3
 13615  0DBC  308E               	movlw	142
 13616  0DBD  02DB               	subwf	___fttol@exp1,f
 13617  0DBE  1FDB               	btfss	___fttol@exp1,7
 13618  0DBF  2DDC               	goto	l8218
 13619  0DC0  085B               	movf	___fttol@exp1,w
 13620  0DC1  3A80               	xorlw	128
 13621  0DC2  3E8F               	addlw	143
 13622  0DC3  1803               	skipnc
 13623  0DC4  2DCE               	goto	l8216
 13624  0DC5  3000               	movlw	0
 13625  0DC6  00D1               	movwf	?___fttol+3
 13626  0DC7  3000               	movlw	0
 13627  0DC8  00D0               	movwf	?___fttol+2
 13628  0DC9  3000               	movlw	0
 13629  0DCA  00CF               	movwf	?___fttol+1
 13630  0DCB  3000               	movlw	0
 13631  0DCC  00CE               	movwf	?___fttol
 13632  0DCD  0008               	return
 13633  0DCE                     l8216:	
 13634  0DCE  3001               	movlw	1
 13635  0DCF                     u8655:	
 13636  0DCF  36DA               	lsrf	___fttol@lval+3,f
 13637  0DD0  0CD9               	rrf	___fttol@lval+2,f
 13638  0DD1  0CD8               	rrf	___fttol@lval+1,f
 13639  0DD2  0CD7               	rrf	___fttol@lval,f
 13640  0DD3  0B89               	decfsz	9,f
 13641  0DD4  2DCF               	goto	u8655
 13642  0DD5  3001               	movlw	1
 13643  0DD6  00D2               	movwf	??___fttol
 13644  0DD7  0852               	movf	??___fttol,w
 13645  0DD8  07DB               	addwf	___fttol@exp1,f
 13646  0DD9  1903               	btfsc	3,2
 13647  0DDA  2DF5               	goto	l8228
 13648  0DDB  2DCE               	goto	l8216
 13649  0DDC                     l8218:	
 13650  0DDC  3018               	movlw	24
 13651  0DDD  025B               	subwf	___fttol@exp1,w
 13652  0DDE  1C03               	skipc
 13653  0DDF  2DF2               	goto	l8226
 13654  0DE0  3000               	movlw	0
 13655  0DE1  00D1               	movwf	?___fttol+3
 13656  0DE2  3000               	movlw	0
 13657  0DE3  00D0               	movwf	?___fttol+2
 13658  0DE4  3000               	movlw	0
 13659  0DE5  00CF               	movwf	?___fttol+1
 13660  0DE6  3000               	movlw	0
 13661  0DE7  00CE               	movwf	?___fttol
 13662  0DE8  0008               	return
 13663  0DE9                     l8224:	
 13664  0DE9  3001               	movlw	1
 13665  0DEA                     u8685:	
 13666  0DEA  35D7               	lslf	___fttol@lval,f
 13667  0DEB  0DD8               	rlf	___fttol@lval+1,f
 13668  0DEC  0DD9               	rlf	___fttol@lval+2,f
 13669  0DED  0DDA               	rlf	___fttol@lval+3,f
 13670  0DEE  0B89               	decfsz	9,f
 13671  0DEF  2DEA               	goto	u8685
 13672  0DF0  3001               	movlw	1
 13673  0DF1  02DB               	subwf	___fttol@exp1,f
 13674  0DF2                     l8226:	
 13675  0DF2  08DB               	movf	___fttol@exp1,f
 13676  0DF3  1D03               	skipz
 13677  0DF4  2DE9               	goto	l8224
 13678  0DF5                     l8228:	
 13679  0DF5  0856               	movf	___fttol@sign1,w
 13680  0DF6  1903               	btfsc	3,2
 13681  0DF7  2E03               	goto	l8232
 13682  0DF8  09D7               	comf	___fttol@lval,f
 13683  0DF9  09D8               	comf	___fttol@lval+1,f
 13684  0DFA  09D9               	comf	___fttol@lval+2,f
 13685  0DFB  09DA               	comf	___fttol@lval+3,f
 13686  0DFC  0AD7               	incf	___fttol@lval,f
 13687  0DFD  1903               	skipnz
 13688  0DFE  0AD8               	incf	___fttol@lval+1,f
 13689  0DFF  1903               	skipnz
 13690  0E00  0AD9               	incf	___fttol@lval+2,f
 13691  0E01  1903               	skipnz
 13692  0E02  0ADA               	incf	___fttol@lval+3,f
 13693  0E03                     l8232:	
 13694  0E03  085A               	movf	___fttol@lval+3,w
 13695  0E04  00D1               	movwf	?___fttol+3
 13696  0E05  0859               	movf	___fttol@lval+2,w
 13697  0E06  00D0               	movwf	?___fttol+2
 13698  0E07  0858               	movf	___fttol@lval+1,w
 13699  0E08  00CF               	movwf	?___fttol+1
 13700  0E09  0857               	movf	___fttol@lval,w
 13701  0E0A  00CE               	movwf	?___fttol
 13702  0E0B  0008               	return
 13703  0E0C                     __end_of___fttol:	
 13704                           
 13705                           	psect	text82
 13706  1C85                     __ptext82:	
 13707 ;; *************** function ___ftneg *****************
 13708 ;; Defined at:
 13709 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;  f1              3   30[BANK0 ] float 
 13712 ;; Auto vars:     Size  Location     Type
 13713 ;;		None
 13714 ;; Return value:  Size  Location     Type
 13715 ;;                  3   30[BANK0 ] float 
 13716 ;; Registers used:
 13717 ;;		wreg
 13718 ;; Tracked objects:
 13719 ;;		On entry : 0/0
 13720 ;;		On exit  : 0/0
 13721 ;;		Unchanged: 0/0
 13722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13723 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;Total ram usage:        3 bytes
 13728 ;; Hardware stack levels used:    1
 13729 ;; Hardware stack levels required when called:    5
 13730 ;; This function calls:
 13731 ;;		Nothing
 13732 ;; This function is called by:
 13733 ;;		_getPercentValue
 13734 ;;		_setPercentValue
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function ___ftneg
 13740  1C85                     ___ftneg:	
 13741                           
 13742                           ;incstack = 0
 13743                           ; Regs used in ___ftneg: [wreg]
 13744  1C85  0020               	movlb	0	; select bank0
 13745  1C86  0840               	movf	___ftneg@f1+2,w
 13746  1C87  043F               	iorwf	___ftneg@f1+1,w
 13747  1C88  043E               	iorwf	___ftneg@f1,w
 13748  1C89  1903               	skipnz
 13749  1C8A  0008               	return
 13750  1C8B  3080               	movlw	128
 13751  1C8C  06C0               	xorwf	___ftneg@f1+2,f
 13752  1C8D  0008               	return
 13753  1C8E                     __end_of___ftneg:	
 13754                           
 13755                           	psect	text83
 13756  0EA7                     __ptext83:	
 13757 ;; *************** function ___ftdiv *****************
 13758 ;; Defined at:
 13759 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;  f2              3   14[BANK0 ] float 
 13762 ;;  f1              3   17[BANK0 ] float 
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;  f3              3   25[BANK0 ] float 
 13765 ;;  sign            1   29[BANK0 ] unsigned char 
 13766 ;;  exp             1   28[BANK0 ] unsigned char 
 13767 ;;  cntr            1   24[BANK0 ] unsigned char 
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  3   14[BANK0 ] float 
 13770 ;; Registers used:
 13771 ;;		wreg, status,2, status,0, pclath, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;Total ram usage:       16 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    6
 13784 ;; This function calls:
 13785 ;;		___ftpack
 13786 ;; This function is called by:
 13787 ;;		_getPercentValue
 13788 ;;		_setPercentValue
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function ___ftdiv
 13794  0EA7                     ___ftdiv:	
 13795                           
 13796                           ;incstack = 0
 13797                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13798  0EA7  0020               	movlb	0	; select bank0
 13799  0EA8  0831               	movf	___ftdiv@f1,w
 13800  0EA9  00B4               	movwf	??___ftdiv
 13801  0EAA  0832               	movf	___ftdiv@f1+1,w
 13802  0EAB  00B5               	movwf	??___ftdiv+1
 13803  0EAC  0833               	movf	___ftdiv@f1+2,w
 13804  0EAD  00B6               	movwf	??___ftdiv+2
 13805  0EAE  1003               	clrc
 13806  0EAF  0D35               	rlf	??___ftdiv+1,w
 13807  0EB0  0D36               	rlf	??___ftdiv+2,w
 13808  0EB1  00B7               	movwf	??___ftdiv+3
 13809  0EB2  0837               	movf	??___ftdiv+3,w
 13810  0EB3  00BC               	movwf	___ftdiv@exp
 13811  0EB4  08BC               	movf	___ftdiv@exp,f
 13812  0EB5  1D03               	skipz
 13813  0EB6  2EBE               	goto	l8098
 13814  0EB7  3000               	movlw	0
 13815  0EB8  00AE               	movwf	?___ftdiv
 13816  0EB9  3000               	movlw	0
 13817  0EBA  00AF               	movwf	?___ftdiv+1
 13818  0EBB  3000               	movlw	0
 13819  0EBC  00B0               	movwf	?___ftdiv+2
 13820  0EBD  0008               	return
 13821  0EBE                     l8098:	
 13822  0EBE  082E               	movf	___ftdiv@f2,w
 13823  0EBF  00B4               	movwf	??___ftdiv
 13824  0EC0  082F               	movf	___ftdiv@f2+1,w
 13825  0EC1  00B5               	movwf	??___ftdiv+1
 13826  0EC2  0830               	movf	___ftdiv@f2+2,w
 13827  0EC3  00B6               	movwf	??___ftdiv+2
 13828  0EC4  1003               	clrc
 13829  0EC5  0D35               	rlf	??___ftdiv+1,w
 13830  0EC6  0D36               	rlf	??___ftdiv+2,w
 13831  0EC7  00B7               	movwf	??___ftdiv+3
 13832  0EC8  0837               	movf	??___ftdiv+3,w
 13833  0EC9  00BD               	movwf	___ftdiv@sign
 13834  0ECA  08BD               	movf	___ftdiv@sign,f
 13835  0ECB  1D03               	skipz
 13836  0ECC  2ED4               	goto	l8104
 13837  0ECD  3000               	movlw	0
 13838  0ECE  00AE               	movwf	?___ftdiv
 13839  0ECF  3000               	movlw	0
 13840  0ED0  00AF               	movwf	?___ftdiv+1
 13841  0ED1  3000               	movlw	0
 13842  0ED2  00B0               	movwf	?___ftdiv+2
 13843  0ED3  0008               	return
 13844  0ED4                     l8104:	
 13845  0ED4  3000               	movlw	0
 13846  0ED5  00B9               	movwf	___ftdiv@f3
 13847  0ED6  3000               	movlw	0
 13848  0ED7  00BA               	movwf	___ftdiv@f3+1
 13849  0ED8  3000               	movlw	0
 13850  0ED9  00BB               	movwf	___ftdiv@f3+2
 13851  0EDA  3089               	movlw	137
 13852  0EDB  073D               	addwf	___ftdiv@sign,w
 13853  0EDC  00B4               	movwf	??___ftdiv
 13854  0EDD  0834               	movf	??___ftdiv,w
 13855  0EDE  02BC               	subwf	___ftdiv@exp,f
 13856  0EDF  0831               	movf	___ftdiv@f1,w
 13857  0EE0  00B4               	movwf	??___ftdiv
 13858  0EE1  0832               	movf	___ftdiv@f1+1,w
 13859  0EE2  00B5               	movwf	??___ftdiv+1
 13860  0EE3  0833               	movf	___ftdiv@f1+2,w
 13861  0EE4  00B6               	movwf	??___ftdiv+2
 13862  0EE5  3010               	movlw	16
 13863  0EE6                     u8425:	
 13864  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13865  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13866  0EE8  0CB4               	rrf	??___ftdiv,f
 13867  0EE9  0B89               	decfsz	9,f
 13868  0EEA  2EE6               	goto	u8425
 13869  0EEB  0834               	movf	??___ftdiv,w
 13870  0EEC  00B7               	movwf	??___ftdiv+3
 13871  0EED  0837               	movf	??___ftdiv+3,w
 13872  0EEE  00BD               	movwf	___ftdiv@sign
 13873  0EEF  082E               	movf	___ftdiv@f2,w
 13874  0EF0  00B4               	movwf	??___ftdiv
 13875  0EF1  082F               	movf	___ftdiv@f2+1,w
 13876  0EF2  00B5               	movwf	??___ftdiv+1
 13877  0EF3  0830               	movf	___ftdiv@f2+2,w
 13878  0EF4  00B6               	movwf	??___ftdiv+2
 13879  0EF5  3010               	movlw	16
 13880  0EF6                     u8435:	
 13881  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13882  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13883  0EF8  0CB4               	rrf	??___ftdiv,f
 13884  0EF9  0B89               	decfsz	9,f
 13885  0EFA  2EF6               	goto	u8435
 13886  0EFB  0834               	movf	??___ftdiv,w
 13887  0EFC  00B7               	movwf	??___ftdiv+3
 13888  0EFD  0837               	movf	??___ftdiv+3,w
 13889  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13890  0EFF  3080               	movlw	128
 13891  0F00  00B4               	movwf	??___ftdiv
 13892  0F01  0834               	movf	??___ftdiv,w
 13893  0F02  05BD               	andwf	___ftdiv@sign,f
 13894  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13895  0F04  30FF               	movlw	255
 13896  0F05  05B1               	andwf	___ftdiv@f1,f
 13897  0F06  30FF               	movlw	255
 13898  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13899  0F08  3000               	movlw	0
 13900  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13901  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13902  0F0B  30FF               	movlw	255
 13903  0F0C  05AE               	andwf	___ftdiv@f2,f
 13904  0F0D  30FF               	movlw	255
 13905  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13906  0F0F  3000               	movlw	0
 13907  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13908  0F11  3018               	movlw	24
 13909  0F12  00B4               	movwf	??___ftdiv
 13910  0F13  0834               	movf	??___ftdiv,w
 13911  0F14  00B8               	movwf	___ftdiv@cntr
 13912  0F15                     l8118:	
 13913  0F15  3001               	movlw	1
 13914  0F16                     u8445:	
 13915  0F16  35B9               	lslf	___ftdiv@f3,f
 13916  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13917  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13918  0F19  0B89               	decfsz	9,f
 13919  0F1A  2F16               	goto	u8445
 13920  0F1B  0830               	movf	___ftdiv@f2+2,w
 13921  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13922  0F1D  1D03               	skipz
 13923  0F1E  2F25               	goto	u8455
 13924  0F1F  082F               	movf	___ftdiv@f2+1,w
 13925  0F20  0232               	subwf	___ftdiv@f1+1,w
 13926  0F21  1D03               	skipz
 13927  0F22  2F25               	goto	u8455
 13928  0F23  082E               	movf	___ftdiv@f2,w
 13929  0F24  0231               	subwf	___ftdiv@f1,w
 13930  0F25                     u8455:	
 13931  0F25  1C03               	skipc
 13932  0F26  2F2E               	goto	l8126
 13933  0F27  082E               	movf	___ftdiv@f2,w
 13934  0F28  02B1               	subwf	___ftdiv@f1,f
 13935  0F29  082F               	movf	___ftdiv@f2+1,w
 13936  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13937  0F2B  0830               	movf	___ftdiv@f2+2,w
 13938  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13939  0F2D  1439               	bsf	___ftdiv@f3,0
 13940  0F2E                     l8126:	
 13941  0F2E  3001               	movlw	1
 13942  0F2F                     u8465:	
 13943  0F2F  35B1               	lslf	___ftdiv@f1,f
 13944  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13945  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13946  0F32  0B89               	decfsz	9,f
 13947  0F33  2F2F               	goto	u8465
 13948  0F34  3001               	movlw	1
 13949  0F35  02B8               	subwf	___ftdiv@cntr,f
 13950  0F36  1D03               	btfss	3,2
 13951  0F37  2F15               	goto	l8118
 13952  0F38  0839               	movf	___ftdiv@f3,w
 13953  0F39  00A0               	movwf	___ftpack@arg
 13954  0F3A  083A               	movf	___ftdiv@f3+1,w
 13955  0F3B  00A1               	movwf	___ftpack@arg+1
 13956  0F3C  083B               	movf	___ftdiv@f3+2,w
 13957  0F3D  00A2               	movwf	___ftpack@arg+2
 13958  0F3E  083C               	movf	___ftdiv@exp,w
 13959  0F3F  00B4               	movwf	??___ftdiv
 13960  0F40  0834               	movf	??___ftdiv,w
 13961  0F41  00A3               	movwf	___ftpack@exp
 13962  0F42  083D               	movf	___ftdiv@sign,w
 13963  0F43  00B5               	movwf	??___ftdiv+1
 13964  0F44  0835               	movf	??___ftdiv+1,w
 13965  0F45  00A4               	movwf	___ftpack@sign
 13966  0F46  318A  2207         	fcall	___ftpack
 13967  0F48  0020               	movlb	0	; select bank0
 13968  0F49  0820               	movf	?___ftpack,w
 13969  0F4A  00AE               	movwf	?___ftdiv
 13970  0F4B  0821               	movf	?___ftpack+1,w
 13971  0F4C  00AF               	movwf	?___ftdiv+1
 13972  0F4D  0822               	movf	?___ftpack+2,w
 13973  0F4E  00B0               	movwf	?___ftdiv+2
 13974  0F4F  0008               	return
 13975  0F50                     __end_of___ftdiv:	
 13976                           
 13977                           	psect	text84
 13978  045A                     __ptext84:	
 13979 ;; *************** function ___ftadd *****************
 13980 ;; Defined at:
 13981 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  f1              3   33[BANK0 ] float 
 13984 ;;  f2              3   36[BANK0 ] float 
 13985 ;; Auto vars:     Size  Location     Type
 13986 ;;  exp1            1   45[BANK0 ] unsigned char 
 13987 ;;  exp2            1   44[BANK0 ] unsigned char 
 13988 ;;  sign            1   43[BANK0 ] unsigned char 
 13989 ;; Return value:  Size  Location     Type
 13990 ;;                  3   33[BANK0 ] float 
 13991 ;; Registers used:
 13992 ;;		wreg, status,2, status,0, pclath, cstack
 13993 ;; Tracked objects:
 13994 ;;		On entry : 0/0
 13995 ;;		On exit  : 0/0
 13996 ;;		Unchanged: 0/0
 13997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13998 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;Total ram usage:       13 bytes
 14003 ;; Hardware stack levels used:    1
 14004 ;; Hardware stack levels required when called:    6
 14005 ;; This function calls:
 14006 ;;		___ftpack
 14007 ;; This function is called by:
 14008 ;;		_getPercentValue
 14009 ;;		_setPercentValue
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           
 14014                           ;psect for function ___ftadd
 14015  045A                     ___ftadd:	
 14016                           
 14017                           ;incstack = 0
 14018                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14019  045A  0020               	movlb	0	; select bank0
 14020  045B  0841               	movf	___ftadd@f1,w
 14021  045C  00C7               	movwf	??___ftadd
 14022  045D  0842               	movf	___ftadd@f1+1,w
 14023  045E  00C8               	movwf	??___ftadd+1
 14024  045F  0843               	movf	___ftadd@f1+2,w
 14025  0460  00C9               	movwf	??___ftadd+2
 14026  0461  1003               	clrc
 14027  0462  0D48               	rlf	??___ftadd+1,w
 14028  0463  0D49               	rlf	??___ftadd+2,w
 14029  0464  00CA               	movwf	??___ftadd+3
 14030  0465  084A               	movf	??___ftadd+3,w
 14031  0466  00CD               	movwf	___ftadd@exp1
 14032  0467  0844               	movf	___ftadd@f2,w
 14033  0468  00C7               	movwf	??___ftadd
 14034  0469  0845               	movf	___ftadd@f2+1,w
 14035  046A  00C8               	movwf	??___ftadd+1
 14036  046B  0846               	movf	___ftadd@f2+2,w
 14037  046C  00C9               	movwf	??___ftadd+2
 14038  046D  1003               	clrc
 14039  046E  0D48               	rlf	??___ftadd+1,w
 14040  046F  0D49               	rlf	??___ftadd+2,w
 14041  0470  00CA               	movwf	??___ftadd+3
 14042  0471  084A               	movf	??___ftadd+3,w
 14043  0472  00CC               	movwf	___ftadd@exp2
 14044  0473  084D               	movf	___ftadd@exp1,w
 14045  0474  1903               	btfsc	3,2
 14046  0475  2C82               	goto	l8028
 14047  0476  084C               	movf	___ftadd@exp2,w
 14048  0477  024D               	subwf	___ftadd@exp1,w
 14049  0478  1803               	skipnc
 14050  0479  2C89               	goto	l8032
 14051  047A  034D               	decf	___ftadd@exp1,w
 14052  047B  3AFF               	xorlw	255
 14053  047C  074C               	addwf	___ftadd@exp2,w
 14054  047D  00C7               	movwf	??___ftadd
 14055  047E  3019               	movlw	25
 14056  047F  0247               	subwf	??___ftadd,w
 14057  0480  1C03               	skipc
 14058  0481  2C89               	goto	l8032
 14059  0482                     l8028:	
 14060  0482  0844               	movf	___ftadd@f2,w
 14061  0483  00C1               	movwf	?___ftadd
 14062  0484  0845               	movf	___ftadd@f2+1,w
 14063  0485  00C2               	movwf	?___ftadd+1
 14064  0486  0846               	movf	___ftadd@f2+2,w
 14065  0487  00C3               	movwf	?___ftadd+2
 14066  0488  0008               	return
 14067  0489                     l8032:	
 14068  0489  084C               	movf	___ftadd@exp2,w
 14069  048A  1903               	btfsc	3,2
 14070  048B  0008               	return
 14071  048C  084D               	movf	___ftadd@exp1,w
 14072  048D  024C               	subwf	___ftadd@exp2,w
 14073  048E  1803               	skipnc
 14074  048F  2C98               	goto	l8038
 14075  0490  034C               	decf	___ftadd@exp2,w
 14076  0491  3AFF               	xorlw	255
 14077  0492  074D               	addwf	___ftadd@exp1,w
 14078  0493  00C7               	movwf	??___ftadd
 14079  0494  3019               	movlw	25
 14080  0495  0247               	subwf	??___ftadd,w
 14081  0496  1803               	btfsc	3,0
 14082  0497  0008               	return
 14083  0498                     l8038:	
 14084  0498  3006               	movlw	6
 14085  0499  00C7               	movwf	??___ftadd
 14086  049A  0847               	movf	??___ftadd,w
 14087  049B  00CB               	movwf	___ftadd@sign
 14088  049C  1BC3               	btfsc	___ftadd@f1+2,7
 14089  049D  17CB               	bsf	___ftadd@sign,7
 14090  049E  1BC6               	btfsc	___ftadd@f2+2,7
 14091  049F  174B               	bsf	___ftadd@sign,6
 14092  04A0  17C2               	bsf	___ftadd@f1+1,7
 14093  04A1  30FF               	movlw	255
 14094  04A2  05C1               	andwf	___ftadd@f1,f
 14095  04A3  30FF               	movlw	255
 14096  04A4  05C2               	andwf	___ftadd@f1+1,f
 14097  04A5  3000               	movlw	0
 14098  04A6  05C3               	andwf	___ftadd@f1+2,f
 14099  04A7  17C5               	bsf	___ftadd@f2+1,7
 14100  04A8  30FF               	movlw	255
 14101  04A9  05C4               	andwf	___ftadd@f2,f
 14102  04AA  30FF               	movlw	255
 14103  04AB  05C5               	andwf	___ftadd@f2+1,f
 14104  04AC  3000               	movlw	0
 14105  04AD  05C6               	andwf	___ftadd@f2+2,f
 14106  04AE  084C               	movf	___ftadd@exp2,w
 14107  04AF  024D               	subwf	___ftadd@exp1,w
 14108  04B0  1803               	skipnc
 14109  04B1  2CD4               	goto	l8060
 14110  04B2                     l8050:	
 14111  04B2  3001               	movlw	1
 14112  04B3                     u8265:	
 14113  04B3  35C4               	lslf	___ftadd@f2,f
 14114  04B4  0DC5               	rlf	___ftadd@f2+1,f
 14115  04B5  0DC6               	rlf	___ftadd@f2+2,f
 14116  04B6  0B89               	decfsz	9,f
 14117  04B7  2CB3               	goto	u8265
 14118  04B8  3001               	movlw	1
 14119  04B9  02CC               	subwf	___ftadd@exp2,f
 14120  04BA  084C               	movf	___ftadd@exp2,w
 14121  04BB  064D               	xorwf	___ftadd@exp1,w
 14122  04BC  1903               	skipnz
 14123  04BD  2CCF               	goto	l8058
 14124  04BE  3001               	movlw	1
 14125  04BF  02CB               	subwf	___ftadd@sign,f
 14126  04C0  084B               	movf	___ftadd@sign,w
 14127  04C1  3907               	andlw	7
 14128  04C2  1903               	btfsc	3,2
 14129  04C3  2CCF               	goto	l8058
 14130  04C4  2CB2               	goto	l8050
 14131  04C5                     l8056:	
 14132  04C5  3001               	movlw	1
 14133  04C6                     u8295:	
 14134  04C6  36C3               	lsrf	___ftadd@f1+2,f
 14135  04C7  0CC2               	rrf	___ftadd@f1+1,f
 14136  04C8  0CC1               	rrf	___ftadd@f1,f
 14137  04C9  0B89               	decfsz	9,f
 14138  04CA  2CC6               	goto	u8295
 14139  04CB  3001               	movlw	1
 14140  04CC  00C7               	movwf	??___ftadd
 14141  04CD  0847               	movf	??___ftadd,w
 14142  04CE  07CD               	addwf	___ftadd@exp1,f
 14143  04CF                     l8058:	
 14144  04CF  084D               	movf	___ftadd@exp1,w
 14145  04D0  064C               	xorwf	___ftadd@exp2,w
 14146  04D1  1903               	btfsc	3,2
 14147  04D2  2CF9               	goto	l2781
 14148  04D3  2CC5               	goto	l8056
 14149  04D4                     l8060:	
 14150  04D4  084D               	movf	___ftadd@exp1,w
 14151  04D5  024C               	subwf	___ftadd@exp2,w
 14152  04D6  1803               	skipnc
 14153  04D7  2CF9               	goto	l2781
 14154  04D8                     l8062:	
 14155  04D8  3001               	movlw	1
 14156  04D9                     u8325:	
 14157  04D9  35C1               	lslf	___ftadd@f1,f
 14158  04DA  0DC2               	rlf	___ftadd@f1+1,f
 14159  04DB  0DC3               	rlf	___ftadd@f1+2,f
 14160  04DC  0B89               	decfsz	9,f
 14161  04DD  2CD9               	goto	u8325
 14162  04DE  3001               	movlw	1
 14163  04DF  02CD               	subwf	___ftadd@exp1,f
 14164  04E0  084C               	movf	___ftadd@exp2,w
 14165  04E1  064D               	xorwf	___ftadd@exp1,w
 14166  04E2  1903               	skipnz
 14167  04E3  2CF5               	goto	l8070
 14168  04E4  3001               	movlw	1
 14169  04E5  02CB               	subwf	___ftadd@sign,f
 14170  04E6  084B               	movf	___ftadd@sign,w
 14171  04E7  3907               	andlw	7
 14172  04E8  1903               	btfsc	3,2
 14173  04E9  2CF5               	goto	l8070
 14174  04EA  2CD8               	goto	l8062
 14175  04EB                     l8068:	
 14176  04EB  3001               	movlw	1
 14177  04EC                     u8355:	
 14178  04EC  36C6               	lsrf	___ftadd@f2+2,f
 14179  04ED  0CC5               	rrf	___ftadd@f2+1,f
 14180  04EE  0CC4               	rrf	___ftadd@f2,f
 14181  04EF  0B89               	decfsz	9,f
 14182  04F0  2CEC               	goto	u8355
 14183  04F1  3001               	movlw	1
 14184  04F2  00C7               	movwf	??___ftadd
 14185  04F3  0847               	movf	??___ftadd,w
 14186  04F4  07CC               	addwf	___ftadd@exp2,f
 14187  04F5                     l8070:	
 14188  04F5  084D               	movf	___ftadd@exp1,w
 14189  04F6  064C               	xorwf	___ftadd@exp2,w
 14190  04F7  1D03               	skipz
 14191  04F8  2CEB               	goto	l8068
 14192  04F9                     l2781:	
 14193  04F9  1FCB               	btfss	___ftadd@sign,7
 14194  04FA  2D0B               	goto	l8074
 14195  04FB  30FF               	movlw	255
 14196  04FC  06C1               	xorwf	___ftadd@f1,f
 14197  04FD  30FF               	movlw	255
 14198  04FE  06C2               	xorwf	___ftadd@f1+1,f
 14199  04FF  30FF               	movlw	255
 14200  0500  06C3               	xorwf	___ftadd@f1+2,f
 14201  0501  3001               	movlw	1
 14202  0502  07C1               	addwf	___ftadd@f1,f
 14203  0503  3000               	movlw	0
 14204  0504  1803               	skipnc
 14205  0505  3001               	movlw	1
 14206  0506  07C2               	addwf	___ftadd@f1+1,f
 14207  0507  3000               	movlw	0
 14208  0508  1803               	skipnc
 14209  0509  3001               	movlw	1
 14210  050A  07C3               	addwf	___ftadd@f1+2,f
 14211  050B                     l8074:	
 14212  050B  1F4B               	btfss	___ftadd@sign,6
 14213  050C  2D1D               	goto	l8078
 14214  050D  30FF               	movlw	255
 14215  050E  06C4               	xorwf	___ftadd@f2,f
 14216  050F  30FF               	movlw	255
 14217  0510  06C5               	xorwf	___ftadd@f2+1,f
 14218  0511  30FF               	movlw	255
 14219  0512  06C6               	xorwf	___ftadd@f2+2,f
 14220  0513  3001               	movlw	1
 14221  0514  07C4               	addwf	___ftadd@f2,f
 14222  0515  3000               	movlw	0
 14223  0516  1803               	skipnc
 14224  0517  3001               	movlw	1
 14225  0518  07C5               	addwf	___ftadd@f2+1,f
 14226  0519  3000               	movlw	0
 14227  051A  1803               	skipnc
 14228  051B  3001               	movlw	1
 14229  051C  07C6               	addwf	___ftadd@f2+2,f
 14230  051D                     l8078:	
 14231  051D  01CB               	clrf	___ftadd@sign
 14232  051E  0841               	movf	___ftadd@f1,w
 14233  051F  07C4               	addwf	___ftadd@f2,f
 14234  0520  0842               	movf	___ftadd@f1+1,w
 14235  0521  3DC5               	addwfc	___ftadd@f2+1,f
 14236  0522  0843               	movf	___ftadd@f1+2,w
 14237  0523  3DC6               	addwfc	___ftadd@f2+2,f
 14238  0524  1FC6               	btfss	___ftadd@f2+2,7
 14239  0525  2D38               	goto	l8088
 14240  0526  30FF               	movlw	255
 14241  0527  06C4               	xorwf	___ftadd@f2,f
 14242  0528  30FF               	movlw	255
 14243  0529  06C5               	xorwf	___ftadd@f2+1,f
 14244  052A  30FF               	movlw	255
 14245  052B  06C6               	xorwf	___ftadd@f2+2,f
 14246  052C  3001               	movlw	1
 14247  052D  07C4               	addwf	___ftadd@f2,f
 14248  052E  3000               	movlw	0
 14249  052F  1803               	skipnc
 14250  0530  3001               	movlw	1
 14251  0531  07C5               	addwf	___ftadd@f2+1,f
 14252  0532  3000               	movlw	0
 14253  0533  1803               	skipnc
 14254  0534  3001               	movlw	1
 14255  0535  07C6               	addwf	___ftadd@f2+2,f
 14256  0536  01CB               	clrf	___ftadd@sign
 14257  0537  0ACB               	incf	___ftadd@sign,f
 14258  0538                     l8088:	
 14259  0538  0844               	movf	___ftadd@f2,w
 14260  0539  00A0               	movwf	___ftpack@arg
 14261  053A  0845               	movf	___ftadd@f2+1,w
 14262  053B  00A1               	movwf	___ftpack@arg+1
 14263  053C  0846               	movf	___ftadd@f2+2,w
 14264  053D  00A2               	movwf	___ftpack@arg+2
 14265  053E  084D               	movf	___ftadd@exp1,w
 14266  053F  00C7               	movwf	??___ftadd
 14267  0540  0847               	movf	??___ftadd,w
 14268  0541  00A3               	movwf	___ftpack@exp
 14269  0542  084B               	movf	___ftadd@sign,w
 14270  0543  00C8               	movwf	??___ftadd+1
 14271  0544  0848               	movf	??___ftadd+1,w
 14272  0545  00A4               	movwf	___ftpack@sign
 14273  0546  318A  2207         	fcall	___ftpack
 14274  0548  0020               	movlb	0	; select bank0
 14275  0549  0820               	movf	?___ftpack,w
 14276  054A  00C1               	movwf	?___ftadd
 14277  054B  0821               	movf	?___ftpack+1,w
 14278  054C  00C2               	movwf	?___ftadd+1
 14279  054D  0822               	movf	?___ftpack+2,w
 14280  054E  00C3               	movwf	?___ftadd+2
 14281  054F  0008               	return
 14282  0550                     __end_of___ftadd:	
 14283                           
 14284                           	psect	text85
 14285  1084                     __ptext85:	
 14286 ;; *************** function ___awtoft *****************
 14287 ;; Defined at:
 14288 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  c               2    8[BANK0 ] int 
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;  sign            1   13[BANK0 ] unsigned char 
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  3    8[BANK0 ] float 
 14295 ;; Registers used:
 14296 ;;		wreg, status,2, status,0, pclath, cstack
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        6 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; Hardware stack levels required when called:    6
 14309 ;; This function calls:
 14310 ;;		___ftpack
 14311 ;; This function is called by:
 14312 ;;		_getPercentValue
 14313 ;;		_setPercentValue
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           
 14318                           ;psect for function ___awtoft
 14319  1084                     ___awtoft:	
 14320                           
 14321                           ;incstack = 0
 14322                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14323  1084  0020               	movlb	0	; select bank0
 14324  1085  01AD               	clrf	___awtoft@sign
 14325  1086  1FA9               	btfss	___awtoft@c+1,7
 14326  1087  288F               	goto	l8016
 14327  1088  09A8               	comf	___awtoft@c,f
 14328  1089  09A9               	comf	___awtoft@c+1,f
 14329  108A  0AA8               	incf	___awtoft@c,f
 14330  108B  1903               	skipnz
 14331  108C  0AA9               	incf	___awtoft@c+1,f
 14332  108D  01AD               	clrf	___awtoft@sign
 14333  108E  0AAD               	incf	___awtoft@sign,f
 14334  108F                     l8016:	
 14335  108F  0828               	movf	___awtoft@c,w
 14336  1090  00A0               	movwf	___ftpack@arg
 14337  1091  0829               	movf	___awtoft@c+1,w
 14338  1092  00A1               	movwf	___ftpack@arg+1
 14339  1093  01A2               	clrf	___ftpack@arg+2
 14340  1094  308E               	movlw	142
 14341  1095  00AB               	movwf	??___awtoft
 14342  1096  082B               	movf	??___awtoft,w
 14343  1097  00A3               	movwf	___ftpack@exp
 14344  1098  082D               	movf	___awtoft@sign,w
 14345  1099  00AC               	movwf	??___awtoft+1
 14346  109A  082C               	movf	??___awtoft+1,w
 14347  109B  00A4               	movwf	___ftpack@sign
 14348  109C  318A  2207         	fcall	___ftpack
 14349  109E  0020               	movlb	0	; select bank0
 14350  109F  0820               	movf	?___ftpack,w
 14351  10A0  00A8               	movwf	?___awtoft
 14352  10A1  0821               	movf	?___ftpack+1,w
 14353  10A2  00A9               	movwf	?___awtoft+1
 14354  10A3  0822               	movf	?___ftpack+2,w
 14355  10A4  00AA               	movwf	?___awtoft+2
 14356  10A5  0008               	return
 14357  10A6                     __end_of___awtoft:	
 14358                           
 14359                           	psect	text86
 14360  0A07                     __ptext86:	
 14361 ;; *************** function ___ftpack *****************
 14362 ;; Defined at:
 14363 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;  arg             3    0[BANK0 ] unsigned um
 14366 ;;  exp             1    3[BANK0 ] unsigned char 
 14367 ;;  sign            1    4[BANK0 ] unsigned char 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;		None
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  3    0[BANK0 ] float 
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, status,0
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14379 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;Total ram usage:        8 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    5
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		___awtoft
 14390 ;;		___ftadd
 14391 ;;		___ftdiv
 14392 ;;		___ftmul
 14393 ;; This function uses a non-reentrant model
 14394 ;;
 14395                           
 14396                           
 14397                           ;psect for function ___ftpack
 14398  0A07                     ___ftpack:	
 14399                           
 14400                           ;incstack = 0
 14401                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14402  0A07  0020               	movlb	0	; select bank0
 14403  0A08  0823               	movf	___ftpack@exp,w
 14404  0A09  1903               	btfsc	3,2
 14405  0A0A  2A10               	goto	l7966
 14406  0A0B  0822               	movf	___ftpack@arg+2,w
 14407  0A0C  0421               	iorwf	___ftpack@arg+1,w
 14408  0A0D  0420               	iorwf	___ftpack@arg,w
 14409  0A0E  1D03               	skipz
 14410  0A0F  2A21               	goto	l7972
 14411  0A10                     l7966:	
 14412  0A10  3000               	movlw	0
 14413  0A11  00A0               	movwf	?___ftpack
 14414  0A12  3000               	movlw	0
 14415  0A13  00A1               	movwf	?___ftpack+1
 14416  0A14  3000               	movlw	0
 14417  0A15  00A2               	movwf	?___ftpack+2
 14418  0A16  0008               	return
 14419  0A17                     l7970:	
 14420  0A17  3001               	movlw	1
 14421  0A18  00A5               	movwf	??___ftpack
 14422  0A19  0825               	movf	??___ftpack,w
 14423  0A1A  07A3               	addwf	___ftpack@exp,f
 14424  0A1B  3001               	movlw	1
 14425  0A1C                     u8055:	
 14426  0A1C  36A2               	lsrf	___ftpack@arg+2,f
 14427  0A1D  0CA1               	rrf	___ftpack@arg+1,f
 14428  0A1E  0CA0               	rrf	___ftpack@arg,f
 14429  0A1F  0B89               	decfsz	9,f
 14430  0A20  2A1C               	goto	u8055
 14431  0A21                     l7972:	
 14432  0A21  30FE               	movlw	254
 14433  0A22  0522               	andwf	___ftpack@arg+2,w
 14434  0A23  1903               	btfsc	3,2
 14435  0A24  2A3A               	goto	l2752
 14436  0A25  2A17               	goto	l7970
 14437  0A26                     l7974:	
 14438  0A26  3001               	movlw	1
 14439  0A27  00A5               	movwf	??___ftpack
 14440  0A28  0825               	movf	??___ftpack,w
 14441  0A29  07A3               	addwf	___ftpack@exp,f
 14442  0A2A  3001               	movlw	1
 14443  0A2B  07A0               	addwf	___ftpack@arg,f
 14444  0A2C  3000               	movlw	0
 14445  0A2D  1803               	skipnc
 14446  0A2E  3001               	movlw	1
 14447  0A2F  07A1               	addwf	___ftpack@arg+1,f
 14448  0A30  3000               	movlw	0
 14449  0A31  1803               	skipnc
 14450  0A32  3001               	movlw	1
 14451  0A33  07A2               	addwf	___ftpack@arg+2,f
 14452  0A34  3001               	movlw	1
 14453  0A35                     u8075:	
 14454  0A35  36A2               	lsrf	___ftpack@arg+2,f
 14455  0A36  0CA1               	rrf	___ftpack@arg+1,f
 14456  0A37  0CA0               	rrf	___ftpack@arg,f
 14457  0A38  0B89               	decfsz	9,f
 14458  0A39  2A35               	goto	u8075
 14459  0A3A                     l2752:	
 14460  0A3A  30FF               	movlw	255
 14461  0A3B  0522               	andwf	___ftpack@arg+2,w
 14462  0A3C  1903               	btfsc	3,2
 14463  0A3D  2A47               	goto	l7982
 14464  0A3E  2A26               	goto	l7974
 14465  0A3F                     l7980:	
 14466  0A3F  3001               	movlw	1
 14467  0A40  02A3               	subwf	___ftpack@exp,f
 14468  0A41  3001               	movlw	1
 14469  0A42                     u8095:	
 14470  0A42  35A0               	lslf	___ftpack@arg,f
 14471  0A43  0DA1               	rlf	___ftpack@arg+1,f
 14472  0A44  0DA2               	rlf	___ftpack@arg+2,f
 14473  0A45  0B89               	decfsz	9,f
 14474  0A46  2A42               	goto	u8095
 14475  0A47                     l7982:	
 14476  0A47  1FA1               	btfss	___ftpack@arg+1,7
 14477  0A48  2A3F               	goto	l7980
 14478  0A49  1823               	btfsc	___ftpack@exp,0
 14479  0A4A  2A51               	goto	l2758
 14480  0A4B  30FF               	movlw	255
 14481  0A4C  05A0               	andwf	___ftpack@arg,f
 14482  0A4D  307F               	movlw	127
 14483  0A4E  05A1               	andwf	___ftpack@arg+1,f
 14484  0A4F  30FF               	movlw	255
 14485  0A50  05A2               	andwf	___ftpack@arg+2,f
 14486  0A51                     l2758:	
 14487  0A51  1003               	clrc
 14488  0A52  0CA3               	rrf	___ftpack@exp,f
 14489  0A53  0823               	movf	___ftpack@exp,w
 14490  0A54  00A5               	movwf	??___ftpack
 14491  0A55  01A6               	clrf	??___ftpack+1
 14492  0A56  01A7               	clrf	??___ftpack+2
 14493  0A57  3010               	movlw	16
 14494  0A58                     u8125:	
 14495  0A58  35A5               	lslf	??___ftpack,f
 14496  0A59  0DA6               	rlf	??___ftpack+1,f
 14497  0A5A  0DA7               	rlf	??___ftpack+2,f
 14498  0A5B  0B89               	decfsz	9,f
 14499  0A5C  2A58               	goto	u8125
 14500  0A5D  0825               	movf	??___ftpack,w
 14501  0A5E  04A0               	iorwf	___ftpack@arg,f
 14502  0A5F  0826               	movf	??___ftpack+1,w
 14503  0A60  04A1               	iorwf	___ftpack@arg+1,f
 14504  0A61  0827               	movf	??___ftpack+2,w
 14505  0A62  04A2               	iorwf	___ftpack@arg+2,f
 14506  0A63  0824               	movf	___ftpack@sign,w
 14507  0A64  1903               	btfsc	3,2
 14508  0A65  0008               	return
 14509  0A66  17A2               	bsf	___ftpack@arg+2,7
 14510  0A67  0008               	return
 14511  0A68                     __end_of___ftpack:	
 14512                           
 14513                           	psect	text87
 14514  13DF                     __ptext87:	
 14515 ;; *************** function _setLED *****************
 14516 ;; Defined at:
 14517 ;;		line 76 in file "../src/LED_B1.c"
 14518 ;; Parameters:    Size  Location     Type
 14519 ;;  led             1    wreg     unsigned char 
 14520 ;;  command         1    2[BANK0 ] unsigned char 
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;  led             1    3[BANK0 ] unsigned char 
 14523 ;; Return value:  Size  Location     Type
 14524 ;;		None               void
 14525 ;; Registers used:
 14526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14527 ;; Tracked objects:
 14528 ;;		On entry : 0/0
 14529 ;;		On exit  : 0/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14532 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;Total ram usage:        2 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    6
 14539 ;; This function calls:
 14540 ;;		_LedPointSelect
 14541 ;; This function is called by:
 14542 ;;		_setDimmerLights
 14543 ;;		_setLED_Initialization
 14544 ;;		_Exception_Main
 14545 ;;		_setSw_Initialization
 14546 ;; This function uses a non-reentrant model
 14547 ;;
 14548                           
 14549                           
 14550                           ;psect for function _setLED
 14551  13DF                     _setLED:	
 14552                           
 14553                           ;incstack = 0
 14554                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14555                           ;setLED@led stored from wreg
 14556  13DF  0020               	movlb	0	; select bank0
 14557  13E0  00A3               	movwf	setLED@led
 14558                           
 14559                           ;LED_B1.c: 77: LedPointSelect(led);
 14560  13E1  0823               	movf	setLED@led,w
 14561  13E2  319D  2517  3193   	fcall	_LedPointSelect
 14562                           
 14563                           ;LED_B1.c: 78: if (command == 0) {
 14564  13E5  0020               	movlb	0	; select bank0
 14565  13E6  08A2               	movf	setLED@command,f
 14566  13E7  1D03               	skipz
 14567  13E8  2BEE               	goto	l8704
 14568                           
 14569                           ;LED_B1.c: 107: if (led == 99) {
 14570  13E9  0823               	movf	setLED@led,w
 14571  13EA  3A63               	xorlw	99
 14572  13EB  1D03               	skipz
 14573  13EC  2BEE               	goto	l8704
 14574                           
 14575                           ;LED_B1.c: 111: RB5 = 1;
 14576  13ED  168D               	bsf	13,5	;volatile
 14577  13EE                     l8704:	
 14578                           
 14579                           ;LED_B1.c: 113: }
 14580                           ;LED_B1.c: 115: }
 14581                           ;LED_B1.c: 116: if (command == 1) {
 14582  13EE  0822               	movf	setLED@command,w
 14583  13EF  3A01               	xorlw	1
 14584  13F0  1D03               	skipz
 14585  13F1  2BF7               	goto	l8710
 14586                           
 14587                           ;LED_B1.c: 145: if (led == 99) {
 14588  13F2  0823               	movf	setLED@led,w
 14589  13F3  3A63               	xorlw	99
 14590  13F4  1D03               	skipz
 14591  13F5  2BF7               	goto	l8710
 14592                           
 14593                           ;LED_B1.c: 149: RB5 = 0;
 14594  13F6  128D               	bcf	13,5	;volatile
 14595  13F7                     l8710:	
 14596                           
 14597                           ;LED_B1.c: 151: }
 14598                           ;LED_B1.c: 153: }
 14599                           ;LED_B1.c: 154: if (command == 10) {
 14600  13F7  0822               	movf	setLED@command,w
 14601  13F8  3A0A               	xorlw	10
 14602  13F9  1D03               	skipz
 14603  13FA  2C0D               	goto	l8718
 14604                           
 14605                           ;LED_B1.c: 155: LED->GO = 0;
 14606  13FB  0021               	movlb	1	; select bank1
 14607  13FC  084E               	movf	_LED^(0+128),w
 14608  13FD  0086               	movwf	6
 14609  13FE  3001               	movlw	1	; select bank2/3
 14610  13FF  0087               	movwf	7
 14611  1400  1081               	bcf	1,1
 14612                           
 14613                           ;LED_B1.c: 156: LED->Time = 0;
 14614  1401  0A4E               	incf	_LED^(0+128),w
 14615  1402  0086               	movwf	6
 14616  1403  3001               	movlw	1	; select bank2/3
 14617  1404  0087               	movwf	7
 14618  1405  3000               	movlw	0
 14619  1406  3FC0               	movwi [0]fsr1
 14620  1407  3FC1               	movwi [1]fsr1
 14621                           
 14622                           ;LED_B1.c: 185: if (led == 99) {
 14623  1408  0020               	movlb	0	; select bank0
 14624  1409  0823               	movf	setLED@led,w
 14625  140A  3A63               	xorlw	99
 14626  140B  1903               	btfsc	3,2
 14627                           
 14628                           ;LED_B1.c: 189: RB5 = 1;
 14629  140C  168D               	bsf	13,5	;volatile
 14630  140D                     l8718:	
 14631                           
 14632                           ;LED_B1.c: 191: }
 14633                           ;LED_B1.c: 193: }
 14634                           ;LED_B1.c: 194: if (command == 11) {
 14635  140D  0822               	movf	setLED@command,w
 14636  140E  3A0B               	xorlw	11
 14637  140F  1D03               	skipz
 14638  1410  0008               	return
 14639                           
 14640                           ;LED_B1.c: 195: LED->GO = 1;
 14641  1411  0021               	movlb	1	; select bank1
 14642  1412  084E               	movf	_LED^(0+128),w
 14643  1413  0086               	movwf	6
 14644  1414  3001               	movlw	1	; select bank2/3
 14645  1415  0087               	movwf	7
 14646  1416  1481               	bsf	1,1
 14647  1417  0008               	return
 14648  1418                     __end_of_setLED:	
 14649                           
 14650                           	psect	text88
 14651  1D17                     __ptext88:	
 14652 ;; *************** function _LedPointSelect *****************
 14653 ;; Defined at:
 14654 ;;		line 7 in file "../src/LED_B1.c"
 14655 ;; Parameters:    Size  Location     Type
 14656 ;;  led             1    wreg     unsigned char 
 14657 ;; Auto vars:     Size  Location     Type
 14658 ;;  led             1    1[BANK0 ] unsigned char 
 14659 ;; Return value:  Size  Location     Type
 14660 ;;		None               void
 14661 ;; Registers used:
 14662 ;;		wreg
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;Total ram usage:        2 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; Hardware stack levels required when called:    5
 14675 ;; This function calls:
 14676 ;;		Nothing
 14677 ;; This function is called by:
 14678 ;;		_setLED_Initialization
 14679 ;;		_setLED
 14680 ;;		_setLED_Main
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           
 14685                           ;psect for function _LedPointSelect
 14686  1D17                     _LedPointSelect:	
 14687                           
 14688                           ;incstack = 0
 14689                           ; Regs used in _LedPointSelect: [wreg]
 14690                           ;LedPointSelect@led stored from wreg
 14691  1D17  0020               	movlb	0	; select bank0
 14692  1D18  00A1               	movwf	LedPointSelect@led
 14693                           
 14694                           ;LED_B1.c: 24: if (led == 99) {
 14695  1D19  0821               	movf	LedPointSelect@led,w
 14696  1D1A  3A63               	xorlw	99
 14697  1D1B  1D03               	skipz
 14698  1D1C  0008               	return
 14699                           
 14700                           ;LED_B1.c: 25: LED = &VarErrLED;
 14701  1D1D  3069               	movlw	_VarErrLED& (0+255)
 14702  1D1E  00A0               	movwf	??_LedPointSelect
 14703  1D1F  0820               	movf	??_LedPointSelect,w
 14704  1D20  0021               	movlb	1	; select bank1
 14705  1D21  00CE               	movwf	_LED^(0+128)
 14706  1D22  0008               	return
 14707  1D23                     __end_of_LedPointSelect:	
 14708                           
 14709                           	psect	text89
 14710  1D6D                     __ptext89:	
 14711 ;; *************** function _setDimmerLights_Line *****************
 14712 ;; Defined at:
 14713 ;;		line 706 in file "../src/Dimmer_B1.c"
 14714 ;; Parameters:    Size  Location     Type
 14715 ;;  lights          1    wreg     unsigned char 
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;  lights          1    0[BANK0 ] unsigned char 
 14718 ;; Return value:  Size  Location     Type
 14719 ;;		None               void
 14720 ;; Registers used:
 14721 ;;		wreg
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/0
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;Total ram usage:        1 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    5
 14734 ;; This function calls:
 14735 ;;		Nothing
 14736 ;; This function is called by:
 14737 ;;		_setDimmerLights
 14738 ;;		_setDimmerLights_Adj
 14739 ;; This function uses a non-reentrant model
 14740 ;;
 14741                           
 14742                           
 14743                           ;psect for function _setDimmerLights_Line
 14744  1D6D                     _setDimmerLights_Line:	
 14745                           
 14746                           ;incstack = 0
 14747                           ; Regs used in _setDimmerLights_Line: [wreg]
 14748                           ;setDimmerLights_Line@lights stored from wreg
 14749  1D6D  0020               	movlb	0	; select bank0
 14750  1D6E  00A0               	movwf	setDimmerLights_Line@lights
 14751                           
 14752                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 14753  1D6F  0021               	movlb	1	; select bank1
 14754  1D70  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14755                           
 14756                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 14757  1D71  0022               	movlb	2	; select bank2
 14758  1D72  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14759                           
 14760                           ;Dimmer_B1.c: 718: if (lights == 1) {
 14761  1D73  0020               	movlb	0	; select bank0
 14762  1D74  0820               	movf	setDimmerLights_Line@lights,w
 14763  1D75  3A01               	xorlw	1
 14764  1D76  1D03               	skipz
 14765  1D77  0008               	return
 14766                           
 14767                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 14768  1D78  0022               	movlb	2	; select bank2
 14769  1D79  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14770  1D7A  0008               	return
 14771  1D7B                     __end_of_setDimmerLights_Line:	
 14772                           
 14773                           	psect	text90
 14774  1ED1                     __ptext90:	
 14775 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14776 ;; Defined at:
 14777 ;;		line 586 in file "../src/Dimmer_B1.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;  lights          1    wreg     unsigned char 
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  lights          1    0[COMMON] unsigned char 
 14782 ;;  allow           1    2[BANK0 ] unsigned char 
 14783 ;; Return value:  Size  Location     Type
 14784 ;;                  1    wreg      unsigned char 
 14785 ;; Registers used:
 14786 ;;		wreg, status,2, pclath, cstack
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;Total ram usage:        3 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; Hardware stack levels required when called:    6
 14799 ;; This function calls:
 14800 ;;		_getLoad_OK
 14801 ;; This function is called by:
 14802 ;;		_setDimmerLights_AdjOn
 14803 ;;		_setDimmerLights_Main
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           
 14808                           ;psect for function _getDimmerLights_Allow_Condition
 14809  1ED1                     _getDimmerLights_Allow_Condition:	
 14810                           
 14811                           ;Dimmer_B1.c: 587: char allow = 0;
 14812                           
 14813                           ;incstack = 0
 14814                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14815  1ED1  0020               	movlb	0	; select bank0
 14816  1ED2  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14817                           
 14818                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14819  1ED3  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14820  1ED4  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14821  1ED5  319C  246D  319E   	fcall	_getLoad_OK
 14822  1ED8  3800               	iorlw	0
 14823  1ED9  1D03               	skipz
 14824  1EDA  2EE0               	goto	l8660
 14825  1EDB  0021               	movlb	1	; select bank1
 14826  1EDC  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14827  1EDD  2EE0               	goto	l8660
 14828  1EDE  0020               	movlb	0	; select bank0
 14829  1EDF  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14830  1EE0                     l8660:	
 14831  1EE0  0020               	movlb	0	; select bank0
 14832  1EE1  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14833  1EE2  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14834  1EE3  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14835  1EE4  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14836                           
 14837                           ;Dimmer_B1.c: 619: return allow;
 14838  1EE5  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14839  1EE6  0008               	return
 14840  1EE7                     __end_of_getDimmerLights_Allow_Condition:	
 14841                           
 14842                           	psect	text91
 14843  1C6D                     __ptext91:	
 14844 ;; *************** function _getLoad_OK *****************
 14845 ;; Defined at:
 14846 ;;		line 265 in file "../src/OverLoad_B1.c"
 14847 ;; Parameters:    Size  Location     Type
 14848 ;;		None
 14849 ;; Auto vars:     Size  Location     Type
 14850 ;;  ok              1    0[BANK0 ] unsigned char 
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  1    wreg      unsigned char 
 14853 ;; Registers used:
 14854 ;;		wreg, status,2
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;Total ram usage:        1 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; Hardware stack levels required when called:    5
 14867 ;; This function calls:
 14868 ;;		Nothing
 14869 ;; This function is called by:
 14870 ;;		_DimmerLights_Main
 14871 ;;		_getDimmerLights_Allow_Condition
 14872 ;; This function uses a non-reentrant model
 14873 ;;
 14874                           
 14875                           
 14876                           ;psect for function _getLoad_OK
 14877  1C6D                     _getLoad_OK:	
 14878                           
 14879                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14883  1C6D  3000               	movlw	0
 14884  1C6E  0022               	movlb	2	; select bank2
 14885  1C6F  1BA5               	btfsc	_Load^(0+256),7
 14886  1C70  3001               	movlw	1
 14887  1C71  0020               	movlb	0	; select bank0
 14888  1C72  00A0               	movwf	getLoad_OK@ok
 14889                           
 14890                           ;OverLoad_B1.c: 267: return ok;
 14891  1C73  0820               	movf	getLoad_OK@ok,w
 14892  1C74  0008               	return
 14893  1C75                     __end_of_getLoad_OK:	
 14894                           
 14895                           	psect	text92
 14896  1CB4                     __ptext92:	
 14897 ;; *************** function _getMain_LightsStatus *****************
 14898 ;; Defined at:
 14899 ;;		line 375 in file "../src/Main_B1.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;		None
 14902 ;; Auto vars:     Size  Location     Type
 14903 ;;  status          1    0[BANK0 ] unsigned char 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  1    wreg      unsigned char 
 14906 ;; Registers used:
 14907 ;;		wreg, status,2
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;Total ram usage:        1 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    5
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_DimmerLights_Main
 14924 ;;		_Flash_Memory_Main
 14925 ;;		_Exception_Main
 14926 ;;		_Load_Main
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           
 14931                           ;psect for function _getMain_LightsStatus
 14932  1CB4                     _getMain_LightsStatus:	
 14933                           
 14934                           ;Main_B1.c: 376: char status = 0;
 14935                           
 14936                           ;incstack = 0
 14937                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14938  1CB4  0020               	movlb	0	; select bank0
 14939  1CB5  01A0               	clrf	getMain_LightsStatus@status
 14940                           
 14941                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14942  1CB6  3000               	movlw	0
 14943  1CB7  0022               	movlb	2	; select bank2
 14944  1CB8  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 14945  1CB9  3001               	movlw	1
 14946  1CBA  0020               	movlb	0	; select bank0
 14947  1CBB  00A0               	movwf	getMain_LightsStatus@status
 14948                           
 14949                           ;Main_B1.c: 422: return status;
 14950  1CBC  0820               	movf	getMain_LightsStatus@status,w
 14951  1CBD  0008               	return
 14952  1CBE                     __end_of_getMain_LightsStatus:	
 14953                           
 14954                           	psect	text93
 14955  126B                     __ptext93:	
 14956 ;; *************** function _getMain_All_Error_Status *****************
 14957 ;; Defined at:
 14958 ;;		line 426 in file "../src/Main_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;  command         1    wreg     unsigned char 
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  command         1    5[BANK0 ] unsigned char 
 14963 ;;  status          1    6[BANK0 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;                  1    wreg      unsigned char 
 14966 ;; Registers used:
 14967 ;;		wreg, status,2, status,0
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;Total ram usage:        7 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    5
 14980 ;; This function calls:
 14981 ;;		Nothing
 14982 ;; This function is called by:
 14983 ;;		_DimmerLights_Main
 14984 ;;		_Exception_Main
 14985 ;;		_Load_Main
 14986 ;;		_setTemp_Main
 14987 ;;		_setRF_Main
 14988 ;;		_getRxData
 14989 ;;		_setSw_Main
 14990 ;; This function uses a non-reentrant model
 14991 ;;
 14992                           
 14993                           
 14994                           ;psect for function _getMain_All_Error_Status
 14995  126B                     _getMain_All_Error_Status:	
 14996                           
 14997                           ;incstack = 0
 14998                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14999                           ;getMain_All_Error_Status@command stored from wreg
 15000  126B  0020               	movlb	0	; select bank0
 15001  126C  00A5               	movwf	getMain_All_Error_Status@command
 15002                           
 15003                           ;Main_B1.c: 427: char status = 0;
 15004  126D  01A6               	clrf	getMain_All_Error_Status@status
 15005                           
 15006                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15007  126E  08A6               	movf	getMain_All_Error_Status@status,f
 15008  126F  1D03               	skipz
 15009  1270  2A85               	goto	l8678
 15010  1271  0825               	movf	getMain_All_Error_Status@command,w
 15011  1272  3A02               	xorlw	2
 15012  1273  1903               	skipnz
 15013  1274  2A85               	goto	l8678
 15014                           
 15015                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15016  1275  0021               	movlb	1	; select bank1
 15017  1276  18D7               	btfsc	_Temp^(0+128),1
 15018  1277  2A7C               	goto	l8676
 15019  1278  0020               	movlb	0	; select bank0
 15020  1279  01A1               	clrf	_getMain_All_Error_Status$3424
 15021  127A  01A2               	clrf	_getMain_All_Error_Status$3424+1
 15022  127B  2A81               	goto	l1421
 15023  127C                     l8676:	
 15024  127C  3002               	movlw	2
 15025  127D  0020               	movlb	0	; select bank0
 15026  127E  00A1               	movwf	_getMain_All_Error_Status$3424
 15027  127F  3000               	movlw	0
 15028  1280  00A2               	movwf	_getMain_All_Error_Status$3424+1
 15029  1281                     l1421:	
 15030  1281  0821               	movf	_getMain_All_Error_Status$3424,w
 15031  1282  00A0               	movwf	??_getMain_All_Error_Status
 15032  1283  0820               	movf	??_getMain_All_Error_Status,w
 15033  1284  00A6               	movwf	getMain_All_Error_Status@status
 15034  1285                     l8678:	
 15035                           
 15036                           ;Main_B1.c: 440: }
 15037                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15038  1285  08A6               	movf	getMain_All_Error_Status@status,f
 15039  1286  1D03               	skipz
 15040  1287  2A9C               	goto	l1422
 15041  1288  0825               	movf	getMain_All_Error_Status@command,w
 15042  1289  3A03               	xorlw	3
 15043  128A  1903               	skipnz
 15044  128B  2A9C               	goto	l1422
 15045                           
 15046                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15047  128C  0022               	movlb	2	; select bank2
 15048  128D  1AA5               	btfsc	_Load^(0+256),5
 15049  128E  2A93               	goto	l8686
 15050  128F  0020               	movlb	0	; select bank0
 15051  1290  01A3               	clrf	_getMain_All_Error_Status$3425
 15052  1291  01A4               	clrf	_getMain_All_Error_Status$3425+1
 15053  1292  2A98               	goto	l1426
 15054  1293                     l8686:	
 15055  1293  3003               	movlw	3
 15056  1294  0020               	movlb	0	; select bank0
 15057  1295  00A3               	movwf	_getMain_All_Error_Status$3425
 15058  1296  3000               	movlw	0
 15059  1297  00A4               	movwf	_getMain_All_Error_Status$3425+1
 15060  1298                     l1426:	
 15061  1298  0823               	movf	_getMain_All_Error_Status$3425,w
 15062  1299  00A0               	movwf	??_getMain_All_Error_Status
 15063  129A  0820               	movf	??_getMain_All_Error_Status,w
 15064  129B  00A6               	movwf	getMain_All_Error_Status@status
 15065  129C                     l1422:	
 15066                           
 15067                           ;Main_B1.c: 447: }
 15068                           ;Main_B1.c: 463: return status;
 15069  129C  0826               	movf	getMain_All_Error_Status@status,w
 15070  129D  0008               	return
 15071  129E                     __end_of_getMain_All_Error_Status:	
 15072                           
 15073                           	psect	text94
 15074  1CAA                     __ptext94:	
 15075 ;; *************** function _DimmerLights_Initialization *****************
 15076 ;; Defined at:
 15077 ;;		line 341 in file "../src/Dimmer_B1.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;		None
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;		None
 15082 ;; Return value:  Size  Location     Type
 15083 ;;		None               void
 15084 ;; Registers used:
 15085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;Total ram usage:        1 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    7
 15098 ;; This function calls:
 15099 ;;		_setDimmerLights_Initialization
 15100 ;; This function is called by:
 15101 ;;		_main
 15102 ;; This function uses a non-reentrant model
 15103 ;;
 15104                           
 15105                           
 15106                           ;psect for function _DimmerLights_Initialization
 15107  1CAA                     _DimmerLights_Initialization:	
 15108                           
 15109                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15110                           
 15111                           ;incstack = 0
 15112                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15113  1CAA  3053               	movlw	_DimmerLights1& (0+255)
 15114  1CAB  0020               	movlb	0	; select bank0
 15115  1CAC  00A4               	movwf	??_DimmerLights_Initialization
 15116  1CAD  0824               	movf	??_DimmerLights_Initialization,w
 15117  1CAE  0021               	movlb	1	; select bank1
 15118  1CAF  00CC               	movwf	_DimmerLights11^(0+128)
 15119                           
 15120                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15121  1CB0  3001               	movlw	1
 15122  1CB1  3192  223A         	fcall	_setDimmerLights_Initialization
 15123  1CB3  0008               	return
 15124  1CB4                     __end_of_DimmerLights_Initialization:	
 15125                           
 15126                           	psect	text95
 15127  123A                     __ptext95:	
 15128 ;; *************** function _setDimmerLights_Initialization *****************
 15129 ;; Defined at:
 15130 ;;		line 365 in file "../src/Dimmer_B1.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  lights          1    wreg     unsigned char 
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;  lights          1    3[BANK0 ] unsigned char 
 15135 ;; Return value:  Size  Location     Type
 15136 ;;		None               void
 15137 ;; Registers used:
 15138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15139 ;; Tracked objects:
 15140 ;;		On entry : 0/0
 15141 ;;		On exit  : 0/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;Total ram usage:        2 bytes
 15149 ;; Hardware stack levels used:    1
 15150 ;; Hardware stack levels required when called:    6
 15151 ;; This function calls:
 15152 ;;		_DimmerLightsPointSelect
 15153 ;; This function is called by:
 15154 ;;		_DimmerLights_Initialization
 15155 ;; This function uses a non-reentrant model
 15156 ;;
 15157                           
 15158                           
 15159                           ;psect for function _setDimmerLights_Initialization
 15160  123A                     _setDimmerLights_Initialization:	
 15161                           
 15162                           ;incstack = 0
 15163                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15164                           ;setDimmerLights_Initialization@lights stored from wreg
 15165  123A  0020               	movlb	0	; select bank0
 15166  123B  00A3               	movwf	setDimmerLights_Initialization@lights
 15167                           
 15168                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15169  123C  0823               	movf	setDimmerLights_Initialization@lights,w
 15170  123D  319C  24D4  3192   	fcall	_DimmerLightsPointSelect
 15171                           
 15172                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15173  1240  3007               	movlw	7
 15174  1241  0020               	movlb	0	; select bank0
 15175  1242  00A2               	movwf	??_setDimmerLights_Initialization
 15176  1243  086F               	movf	_DimmerLights,w
 15177  1244  3E08               	addlw	8
 15178  1245  0086               	movwf	6
 15179  1246  3001               	movlw	1	; select bank2/3
 15180  1247  0087               	movwf	7
 15181  1248  0822               	movf	??_setDimmerLights_Initialization,w
 15182  1249  0081               	movwf	1
 15183                           
 15184                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75F*0.8));
 15185  124A  303C               	movlw	60
 15186  124B  00A2               	movwf	??_setDimmerLights_Initialization
 15187  124C  086F               	movf	_DimmerLights,w
 15188  124D  3E06               	addlw	6
 15189  124E  0086               	movwf	6
 15190  124F  3001               	movlw	1	; select bank2/3
 15191  1250  0087               	movwf	7
 15192  1251  0822               	movf	??_setDimmerLights_Initialization,w
 15193  1252  0081               	movwf	1
 15194                           
 15195                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15196  1253  300C               	movlw	12
 15197  1254  00A2               	movwf	??_setDimmerLights_Initialization
 15198  1255  086F               	movf	_DimmerLights,w
 15199  1256  3E09               	addlw	9
 15200  1257  0086               	movwf	6
 15201  1258  3001               	movlw	1	; select bank2/3
 15202  1259  0087               	movwf	7
 15203  125A  0822               	movf	??_setDimmerLights_Initialization,w
 15204  125B  0081               	movwf	1
 15205                           
 15206                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15207  125C  086F               	movf	_DimmerLights,w
 15208  125D  3E06               	addlw	6
 15209  125E  0086               	movwf	6
 15210  125F  3001               	movlw	1	; select bank2/3
 15211  1260  0087               	movwf	7
 15212  1261  0801               	movf	1,w
 15213  1262  00A2               	movwf	??_setDimmerLights_Initialization
 15214  1263  086F               	movf	_DimmerLights,w
 15215  1264  3E04               	addlw	4
 15216  1265  0086               	movwf	6
 15217  1266  3001               	movlw	1	; select bank2/3
 15218  1267  0087               	movwf	7
 15219  1268  0822               	movf	??_setDimmerLights_Initialization,w
 15220  1269  0081               	movwf	1
 15221  126A  0008               	return
 15222  126B                     __end_of_setDimmerLights_Initialization:	
 15223                           
 15224                           	psect	text96
 15225  1C38                     __ptext96:	
 15226 ;; *************** function _DelayOff_Main *****************
 15227 ;; Defined at:
 15228 ;;		line 41 in file "../src/DelayOff_B1.c"
 15229 ;; Parameters:    Size  Location     Type
 15230 ;;		None
 15231 ;; Auto vars:     Size  Location     Type
 15232 ;;		None
 15233 ;; Return value:  Size  Location     Type
 15234 ;;		None               void
 15235 ;; Registers used:
 15236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15237 ;; Tracked objects:
 15238 ;;		On entry : 0/0
 15239 ;;		On exit  : 0/0
 15240 ;;		Unchanged: 0/0
 15241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;Total ram usage:        0 bytes
 15247 ;; Hardware stack levels used:    1
 15248 ;; Hardware stack levels required when called:   11
 15249 ;; This function calls:
 15250 ;;		_DlyOff_Main
 15251 ;; This function is called by:
 15252 ;;		_main
 15253 ;; This function uses a non-reentrant model
 15254 ;;
 15255                           
 15256                           
 15257                           ;psect for function _DelayOff_Main
 15258  1C38                     _DelayOff_Main:	
 15259                           
 15260                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15261                           
 15262                           ;incstack = 0
 15263                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15264  1C38  3001               	movlw	1
 15265  1C39  3188  20ED         	fcall	_DlyOff_Main
 15266  1C3B  0008               	return
 15267  1C3C                     __end_of_DelayOff_Main:	
 15268                           
 15269                           	psect	text97
 15270  08ED                     __ptext97:	
 15271 ;; *************** function _DlyOff_Main *****************
 15272 ;; Defined at:
 15273 ;;		line 61 in file "../src/DelayOff_B1.c"
 15274 ;; Parameters:    Size  Location     Type
 15275 ;;  sw              1    wreg     unsigned char 
 15276 ;; Auto vars:     Size  Location     Type
 15277 ;;  sw              1   78[BANK0 ] unsigned char 
 15278 ;; Return value:  Size  Location     Type
 15279 ;;		None               void
 15280 ;; Registers used:
 15281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15282 ;; Tracked objects:
 15283 ;;		On entry : 0/0
 15284 ;;		On exit  : 0/0
 15285 ;;		Unchanged: 0/0
 15286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;Total ram usage:        3 bytes
 15292 ;; Hardware stack levels used:    1
 15293 ;; Hardware stack levels required when called:   10
 15294 ;; This function calls:
 15295 ;;		_DelayOffPointSelect
 15296 ;;		_setBuz
 15297 ;;		_setDimmerLights_ErrorClose
 15298 ;; This function is called by:
 15299 ;;		_DelayOff_Main
 15300 ;; This function uses a non-reentrant model
 15301 ;;
 15302                           
 15303                           
 15304                           ;psect for function _DlyOff_Main
 15305  08ED                     _DlyOff_Main:	
 15306                           
 15307                           ;incstack = 0
 15308                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15309                           ;DlyOff_Main@sw stored from wreg
 15310  08ED  0020               	movlb	0	; select bank0
 15311  08EE  00EE               	movwf	DlyOff_Main@sw
 15312                           
 15313                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15314  08EF  086E               	movf	DlyOff_Main@sw,w
 15315  08F0  319C  24C9  3188   	fcall	_DelayOffPointSelect
 15316                           
 15317                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15318  08F3  0875               	movf	_DelayOff,w
 15319  08F4  0086               	movwf	6
 15320  08F5  3001               	movlw	1	; select bank2/3
 15321  08F6  0087               	movwf	7
 15322  08F7  1C81               	btfss	1,1
 15323  08F8  0008               	return
 15324                           
 15325                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15326  08F9  0875               	movf	_DelayOff,w
 15327  08FA  3E02               	addlw	2
 15328  08FB  0086               	movwf	6
 15329  08FC  3001               	movlw	1	; select bank2/3
 15330  08FD  0087               	movwf	7
 15331  08FE  3001               	movlw	1
 15332  08FF  0781               	addwf	1,f
 15333  0900  3141               	addfsr 1,1
 15334  0901  1803               	skipnc
 15335  0902  0A81               	incf	1,f
 15336                           
 15337                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15338  0903  0875               	movf	_DelayOff,w
 15339  0904  3E02               	addlw	2
 15340  0905  0086               	movwf	6
 15341  0906  3001               	movlw	1	; select bank2/3
 15342  0907  0087               	movwf	7
 15343  0908  3F40               	moviw [0]fsr1
 15344  0909  0020               	movlb	0	; select bank0
 15345  090A  00EC               	movwf	??_DlyOff_Main
 15346  090B  3F41               	moviw [1]fsr1
 15347  090C  00ED               	movwf	??_DlyOff_Main+1
 15348  090D  3017               	movlw	23
 15349  090E  026D               	subwf	??_DlyOff_Main+1,w
 15350  090F  3070               	movlw	112
 15351  0910  1903               	skipnz
 15352  0911  026C               	subwf	??_DlyOff_Main,w
 15353  0912  1C03               	skipc
 15354  0913  0008               	return
 15355                           
 15356                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15357  0914  0875               	movf	_DelayOff,w
 15358  0915  3E02               	addlw	2
 15359  0916  0086               	movwf	6
 15360  0917  3001               	movlw	1	; select bank2/3
 15361  0918  0087               	movwf	7
 15362  0919  3000               	movlw	0
 15363  091A  3FC0               	movwi [0]fsr1
 15364  091B  3FC1               	movwi [1]fsr1
 15365                           
 15366                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15367  091C  3001               	movlw	1
 15368  091D  00EC               	movwf	??_DlyOff_Main
 15369  091E  0875               	movf	_DelayOff,w
 15370  091F  3E04               	addlw	4
 15371  0920  0086               	movwf	6
 15372  0921  3001               	movlw	1	; select bank2/3
 15373  0922  0087               	movwf	7
 15374  0923  086C               	movf	??_DlyOff_Main,w
 15375  0924  0781               	addwf	1,f
 15376                           
 15377                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15378  0925  0875               	movf	_DelayOff,w
 15379  0926  3E04               	addlw	4
 15380  0927  0086               	movwf	6
 15381  0928  3001               	movlw	1	; select bank2/3
 15382  0929  0087               	movwf	7
 15383  092A  0A75               	incf	_DelayOff,w
 15384  092B  0084               	movwf	4
 15385  092C  3001               	movlw	1	; select bank2/3
 15386  092D  0085               	movwf	5
 15387  092E  0800               	movf	0,w
 15388  092F  0201               	subwf	1,w
 15389  0930  1C03               	skipc
 15390  0931  0008               	return
 15391                           
 15392                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15393  0932  0875               	movf	_DelayOff,w
 15394  0933  3E04               	addlw	4
 15395  0934  0086               	movwf	6
 15396  0935  3001               	movlw	1	; select bank2/3
 15397  0936  0087               	movwf	7
 15398  0937  0181               	clrf	1
 15399                           
 15400                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15401  0938  0875               	movf	_DelayOff,w
 15402  0939  0086               	movwf	6
 15403  093A  3001               	movlw	1	; select bank2/3
 15404  093B  0087               	movwf	7
 15405  093C  1081               	bcf	1,1
 15406                           
 15407                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15408  093D  3064               	movlw	100
 15409  093E  00A9               	movwf	setBuz@time
 15410  093F  3000               	movlw	0
 15411  0940  00AA               	movwf	setBuz@time+1
 15412  0941  3001               	movlw	1
 15413  0942  3197  27A7  3188   	fcall	_setBuz
 15414                           
 15415                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15416  0945  0020               	movlb	0	; select bank0
 15417  0946  086E               	movf	DlyOff_Main@sw,w
 15418  0947  3189  214A         	fcall	_setDimmerLights_ErrorClose
 15419  0949  0008               	return
 15420  094A                     __end_of_DlyOff_Main:	
 15421                           
 15422                           	psect	text98
 15423  094A                     __ptext98:	
 15424 ;; *************** function _setDimmerLights_ErrorClose *****************
 15425 ;; Defined at:
 15426 ;;		line 846 in file "../src/Dimmer_B1.c"
 15427 ;; Parameters:    Size  Location     Type
 15428 ;;  lights          1    wreg     unsigned char 
 15429 ;; Auto vars:     Size  Location     Type
 15430 ;;  lights          1    1[BANK1 ] unsigned char 
 15431 ;;  i               2    2[BANK1 ] int 
 15432 ;;  count           1    0[BANK1 ] unsigned char 
 15433 ;; Return value:  Size  Location     Type
 15434 ;;		None               void
 15435 ;; Registers used:
 15436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15437 ;; Tracked objects:
 15438 ;;		On entry : 0/0
 15439 ;;		On exit  : 0/0
 15440 ;;		Unchanged: 0/0
 15441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;Total ram usage:        5 bytes
 15447 ;; Hardware stack levels used:    1
 15448 ;; Hardware stack levels required when called:    9
 15449 ;; This function calls:
 15450 ;;		_DimmerLightsPointSelect
 15451 ;;		_getDimmerLights_Status
 15452 ;;		_setDimmerLights_SwOff
 15453 ;; This function is called by:
 15454 ;;		_DlyOff_Main
 15455 ;;		_setControl_Lights_Table
 15456 ;; This function uses a non-reentrant model
 15457 ;;
 15458                           
 15459                           
 15460                           ;psect for function _setDimmerLights_ErrorClose
 15461  094A                     _setDimmerLights_ErrorClose:	
 15462                           
 15463                           ;incstack = 0
 15464                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15465                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15466  094A  0021               	movlb	1	; select bank1
 15467  094B  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15468                           
 15469                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15470  094C  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15471  094D  3AFF               	xorlw	255
 15472  094E  1D03               	skipz
 15473  094F  2989               	goto	l8560
 15474                           
 15475                           ;Dimmer_B1.c: 849: char count = 1;
 15476  0950  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15477  0951  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15478                           
 15479                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15480  0952  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15481  0953  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15482  0954                     l8558:	
 15483  0954  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15484  0955  3A80               	xorlw	128
 15485  0956  0020               	movlb	0	; select bank0
 15486  0957  00EB               	movwf	??_setDimmerLights_ErrorClose
 15487  0958  3080               	movlw	128
 15488  0959  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15489  095A  1D03               	skipz
 15490  095B  295F               	goto	u9135
 15491  095C  0021               	movlb	1	; select bank1
 15492  095D  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15493  095E  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15494  095F                     u9135:	
 15495  095F  1803               	btfsc	3,0
 15496  0960  0008               	return
 15497                           
 15498                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15499  0961  0021               	movlb	1	; select bank1
 15500  0962  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15501  0963  3E01               	addlw	1
 15502  0964  319C  24D4  3189   	fcall	_DimmerLightsPointSelect
 15503                           
 15504                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15505  0967  0021               	movlb	1	; select bank1
 15506  0968  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15507  0969  3E01               	addlw	1
 15508  096A  319D  25B9  3189   	fcall	_getDimmerLights_Status
 15509  096D  3A01               	xorlw	1
 15510  096E  1D03               	skipz
 15511  096F  2983               	goto	l8556
 15512                           
 15513                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15514  0970  0020               	movlb	0	; select bank0
 15515  0971  086F               	movf	_DimmerLights,w
 15516  0972  3E0B               	addlw	11
 15517  0973  0086               	movwf	6
 15518  0974  3001               	movlw	1	; select bank2/3
 15519  0975  0087               	movwf	7
 15520  0976  1481               	bsf	1,1
 15521                           
 15522                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15523  0977  086F               	movf	_DimmerLights,w
 15524  0978  3E02               	addlw	2
 15525  0979  0086               	movwf	6
 15526  097A  3001               	movlw	1	; select bank2/3
 15527  097B  0087               	movwf	7
 15528  097C  1081               	bcf	1,1
 15529                           
 15530                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15531  097D  0021               	movlb	1	; select bank1
 15532  097E  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15533  097F  3E01               	addlw	1
 15534  0980  3195  2568  3189   	fcall	_setDimmerLights_SwOff
 15535  0983                     l8556:	
 15536  0983  3001               	movlw	1
 15537  0984  0021               	movlb	1	; select bank1
 15538  0985  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15539  0986  3000               	movlw	0
 15540  0987  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15541  0988  2954               	goto	l8558
 15542  0989                     l8560:	
 15543                           ;Dimmer_B1.c: 863: }
 15544                           ;Dimmer_B1.c: 864: }
 15545                           ;Dimmer_B1.c: 865: } else {
 15546                           
 15547                           
 15548                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15549  0989  0021               	movlb	1	; select bank1
 15550  098A  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15551  098B  319C  24D4  3189   	fcall	_DimmerLightsPointSelect
 15552                           
 15553                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15554  098E  0021               	movlb	1	; select bank1
 15555  098F  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15556  0990  319D  25B9  3189   	fcall	_getDimmerLights_Status
 15557  0993  3A01               	xorlw	1
 15558  0994  1D03               	skipz
 15559  0995  0008               	return
 15560                           
 15561                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15562  0996  0020               	movlb	0	; select bank0
 15563  0997  086F               	movf	_DimmerLights,w
 15564  0998  3E0B               	addlw	11
 15565  0999  0086               	movwf	6
 15566  099A  3001               	movlw	1	; select bank2/3
 15567  099B  0087               	movwf	7
 15568  099C  1481               	bsf	1,1
 15569                           
 15570                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15571  099D  086F               	movf	_DimmerLights,w
 15572  099E  3E02               	addlw	2
 15573  099F  0086               	movwf	6
 15574  09A0  3001               	movlw	1	; select bank2/3
 15575  09A1  0087               	movwf	7
 15576  09A2  1081               	bcf	1,1
 15577                           
 15578                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 15579  09A3  0021               	movlb	1	; select bank1
 15580  09A4  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15581  09A5  3195  2568         	fcall	_setDimmerLights_SwOff
 15582  09A7  0008               	return
 15583  09A8                     __end_of_setDimmerLights_ErrorClose:	
 15584                           
 15585                           	psect	text99
 15586  1568                     __ptext99:	
 15587 ;; *************** function _setDimmerLights_SwOff *****************
 15588 ;; Defined at:
 15589 ;;		line 450 in file "../src/Dimmer_B1.c"
 15590 ;; Parameters:    Size  Location     Type
 15591 ;;  sw              1    wreg     unsigned char 
 15592 ;; Auto vars:     Size  Location     Type
 15593 ;;  sw              1   74[BANK0 ] unsigned char 
 15594 ;; Return value:  Size  Location     Type
 15595 ;;		None               void
 15596 ;; Registers used:
 15597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15598 ;; Tracked objects:
 15599 ;;		On entry : 0/0
 15600 ;;		On exit  : 0/0
 15601 ;;		Unchanged: 0/0
 15602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;Total ram usage:        1 bytes
 15608 ;; Hardware stack levels used:    1
 15609 ;; Hardware stack levels required when called:    8
 15610 ;; This function calls:
 15611 ;;		_DimmerLightsPointSelect
 15612 ;;		_getDelayOff_GO
 15613 ;;		_setDelayOff_GO
 15614 ;; This function is called by:
 15615 ;;		_setDimmerLights_ErrorClose
 15616 ;;		_Exception_Main
 15617 ;;		_setRFSW_Control
 15618 ;;		_setSw_Main
 15619 ;; This function uses a non-reentrant model
 15620 ;;
 15621                           
 15622                           
 15623                           ;psect for function _setDimmerLights_SwOff
 15624  1568                     _setDimmerLights_SwOff:	
 15625                           
 15626                           ;incstack = 0
 15627                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15628                           ;setDimmerLights_SwOff@sw stored from wreg
 15629  1568  0020               	movlb	0	; select bank0
 15630  1569  00EA               	movwf	setDimmerLights_SwOff@sw
 15631                           
 15632                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15633  156A  086A               	movf	setDimmerLights_SwOff@sw,w
 15634  156B  319C  24D4  3195   	fcall	_DimmerLightsPointSelect
 15635                           
 15636                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15637  156E  0020               	movlb	0	; select bank0
 15638  156F  086F               	movf	_DimmerLights,w
 15639  1570  3E0B               	addlw	11
 15640  1571  0086               	movwf	6
 15641  1572  3001               	movlw	1	; select bank2/3
 15642  1573  0087               	movwf	7
 15643  1574  1C81               	btfss	1,1
 15644  1575  0008               	return
 15645                           
 15646                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15647  1576  086F               	movf	_DimmerLights,w
 15648  1577  3E0B               	addlw	11
 15649  1578  0086               	movwf	6
 15650  1579  3001               	movlw	1	; select bank2/3
 15651  157A  0087               	movwf	7
 15652  157B  1081               	bcf	1,1
 15653                           
 15654                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15655  157C  086F               	movf	_DimmerLights,w
 15656  157D  3E02               	addlw	2
 15657  157E  0086               	movwf	6
 15658  157F  3001               	movlw	1	; select bank2/3
 15659  1580  0087               	movwf	7
 15660  1581  1C81               	btfss	1,1
 15661  1582  2D9D               	goto	l8406
 15662                           
 15663                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15664  1583  086F               	movf	_DimmerLights,w
 15665  1584  3E0B               	addlw	11
 15666  1585  0086               	movwf	6
 15667  1586  3001               	movlw	1	; select bank2/3
 15668  1587  0087               	movwf	7
 15669  1588  1D01               	btfss	1,2
 15670  1589  0008               	return
 15671                           
 15672                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15673  158A  086F               	movf	_DimmerLights,w
 15674  158B  3E0B               	addlw	11
 15675  158C  0086               	movwf	6
 15676  158D  3001               	movlw	1	; select bank2/3
 15677  158E  0087               	movwf	7
 15678  158F  1101               	bcf	1,2
 15679                           
 15680                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15681  1590  086F               	movf	_DimmerLights,w
 15682  1591  3E0A               	addlw	10
 15683  1592  0086               	movwf	6
 15684  1593  3001               	movlw	1	; select bank2/3
 15685  1594  0087               	movwf	7
 15686  1595  1581               	bsf	1,3
 15687                           
 15688                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15689  1596  086F               	movf	_DimmerLights,w
 15690  1597  3E0A               	addlw	10
 15691  1598  0086               	movwf	6
 15692  1599  3001               	movlw	1	; select bank2/3
 15693  159A  0087               	movwf	7
 15694  159B  1101               	bcf	1,2
 15695                           
 15696                           ;Dimmer_B1.c: 462: }
 15697                           ;Dimmer_B1.c: 463: } else {
 15698  159C  0008               	return
 15699  159D                     l8406:	
 15700                           
 15701                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15702  159D  086F               	movf	_DimmerLights,w
 15703  159E  3E0A               	addlw	10
 15704  159F  0086               	movwf	6
 15705  15A0  3001               	movlw	1	; select bank2/3
 15706  15A1  0087               	movwf	7
 15707  15A2  1481               	bsf	1,1
 15708                           
 15709                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15710  15A3  086F               	movf	_DimmerLights,w
 15711  15A4  3E0A               	addlw	10
 15712  15A5  0086               	movwf	6
 15713  15A6  3001               	movlw	1	; select bank2/3
 15714  15A7  0087               	movwf	7
 15715  15A8  1001               	bcf	1,0
 15716                           
 15717                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15718  15A9  086A               	movf	setDimmerLights_SwOff@sw,w
 15719  15AA  319D  2599  3195   	fcall	_getDelayOff_GO
 15720  15AD  3A01               	xorlw	1
 15721  15AE  1D03               	skipz
 15722  15AF  0008               	return
 15723                           
 15724                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15725  15B0  0020               	movlb	0	; select bank0
 15726  15B1  01E6               	clrf	setDelayOff_GO@command
 15727  15B2  01E7               	clrf	setDelayOff_GO@value
 15728  15B3  086A               	movf	setDimmerLights_SwOff@sw,w
 15729  15B4  3196  26A8         	fcall	_setDelayOff_GO
 15730  15B6  0008               	return
 15731  15B7                     __end_of_setDimmerLights_SwOff:	
 15732                           
 15733                           	psect	text100
 15734  16A8                     __ptext100:	
 15735 ;; *************** function _setDelayOff_GO *****************
 15736 ;; Defined at:
 15737 ;;		line 83 in file "../src/DelayOff_B1.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;  sw              1    wreg     unsigned char 
 15740 ;;  command         1   70[BANK0 ] unsigned char 
 15741 ;;  value           1   71[BANK0 ] unsigned char 
 15742 ;; Auto vars:     Size  Location     Type
 15743 ;;  sw              1   73[BANK0 ] unsigned char 
 15744 ;; Return value:  Size  Location     Type
 15745 ;;		None               void
 15746 ;; Registers used:
 15747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15748 ;; Tracked objects:
 15749 ;;		On entry : 0/0
 15750 ;;		On exit  : 0/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;Total ram usage:        4 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    7
 15760 ;; This function calls:
 15761 ;;		_DelayOffPointSelect
 15762 ;;		_DelayTimejudge
 15763 ;;		_setProductData
 15764 ;; This function is called by:
 15765 ;;		_setDimmerLights_SwOff
 15766 ;;		_setRFSW_Control
 15767 ;; This function uses a non-reentrant model
 15768 ;;
 15769                           
 15770                           
 15771                           ;psect for function _setDelayOff_GO
 15772  16A8                     _setDelayOff_GO:	
 15773                           
 15774                           ;incstack = 0
 15775                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15776                           ;setDelayOff_GO@sw stored from wreg
 15777  16A8  0020               	movlb	0	; select bank0
 15778  16A9  00E9               	movwf	setDelayOff_GO@sw
 15779                           
 15780                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15781  16AA  0869               	movf	setDelayOff_GO@sw,w
 15782  16AB  319C  24C9  3196   	fcall	_DelayOffPointSelect
 15783                           
 15784                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15785  16AE  0020               	movlb	0	; select bank0
 15786  16AF  0866               	movf	setDelayOff_GO@command,w
 15787  16B0  3A01               	xorlw	1
 15788  16B1  3000               	movlw	0
 15789  16B2  1903               	skipnz
 15790  16B3  3001               	movlw	1
 15791  16B4  00E8               	movwf	??_setDelayOff_GO
 15792  16B5  0875               	movf	_DelayOff,w
 15793  16B6  0086               	movwf	6
 15794  16B7  3001               	movlw	1	; select bank2/3
 15795  16B8  0087               	movwf	7
 15796  16B9  0DE8               	rlf	??_setDelayOff_GO,f
 15797  16BA  0801               	movf	1,w
 15798  16BB  0668               	xorwf	??_setDelayOff_GO,w
 15799  16BC  39FD               	andlw	-3
 15800  16BD  0668               	xorwf	??_setDelayOff_GO,w
 15801  16BE  0081               	movwf	1
 15802                           
 15803                           ;DelayOff_B1.c: 89: if (command == 1) {
 15804  16BF  0866               	movf	setDelayOff_GO@command,w
 15805  16C0  3A01               	xorlw	1
 15806  16C1  1D03               	skipz
 15807  16C2  2EE6               	goto	l8360
 15808                           
 15809                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15810  16C3  0867               	movf	setDelayOff_GO@value,w
 15811  16C4  3191  2187  3196   	fcall	_DelayTimejudge
 15812  16C7  0020               	movlb	0	; select bank0
 15813  16C8  00E8               	movwf	??_setDelayOff_GO
 15814  16C9  0A75               	incf	_DelayOff,w
 15815  16CA  0086               	movwf	6
 15816  16CB  3001               	movlw	1	; select bank2/3
 15817  16CC  0087               	movwf	7
 15818  16CD  0868               	movf	??_setDelayOff_GO,w
 15819  16CE  0081               	movwf	1
 15820                           
 15821                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15822  16CF  300F               	movlw	15
 15823  16D0  0567               	andwf	setDelayOff_GO@value,w
 15824  16D1  00E8               	movwf	??_setDelayOff_GO
 15825  16D2  0868               	movf	??_setDelayOff_GO,w
 15826  16D3  3A05               	xorlw	5
 15827  16D4  1903               	skipnz
 15828  16D5  2EDA               	goto	l8354
 15829  16D6  0867               	movf	setDelayOff_GO@value,w
 15830  16D7  390F               	andlw	15
 15831  16D8  1D03               	btfss	3,2
 15832  16D9  2EE0               	goto	l8358
 15833  16DA                     l8354:	
 15834  16DA  3026               	movlw	38
 15835  16DB  0267               	subwf	setDelayOff_GO@value,w
 15836  16DC  1803               	skipnc
 15837  16DD  2EE0               	goto	l8358
 15838                           
 15839                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15840  16DE  0867               	movf	setDelayOff_GO@value,w
 15841  16DF  2EE2               	goto	L6
 15842  16E0                     l8358:	
 15843                           ;DelayOff_B1.c: 93: } else {
 15844                           
 15845                           
 15846                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15847  16E0  3005               	movlw	5
 15848  16E1  0020               	movlb	0	; select bank0
 15849  16E2                     L6:	
 15850  16E2  00E8               	movwf	??_setDelayOff_GO
 15851  16E3  0868               	movf	??_setDelayOff_GO,w
 15852  16E4  00E2               	movwf	setProductData@value
 15853  16E5  2EE8               	goto	L5
 15854  16E6                     l8360:	
 15855                           ;DelayOff_B1.c: 95: }
 15856                           ;DelayOff_B1.c: 96: } else {
 15857                           
 15858                           
 15859                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15860  16E6  0020               	movlb	0	; select bank0
 15861  16E7  01E2               	clrf	setProductData@value
 15862  16E8                     L5:	
 15863  16E8  0869               	movf	setDelayOff_GO@sw,w
 15864  16E9  3E1A               	addlw	26
 15865  16EA  319D  255F         	fcall	_setProductData
 15866                           
 15867                           ;DelayOff_B1.c: 98: }
 15868                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15869  16EC  0875               	movf	_DelayOff,w
 15870  16ED  3E02               	addlw	2
 15871  16EE  0086               	movwf	6
 15872  16EF  3001               	movlw	1	; select bank2/3
 15873  16F0  0087               	movwf	7
 15874  16F1  3000               	movlw	0
 15875  16F2  3FC0               	movwi [0]fsr1
 15876  16F3  3FC1               	movwi [1]fsr1
 15877                           
 15878                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15879  16F4  0875               	movf	_DelayOff,w
 15880  16F5  3E04               	addlw	4
 15881  16F6  0086               	movwf	6
 15882  16F7  3001               	movlw	1	; select bank2/3
 15883  16F8  0087               	movwf	7
 15884  16F9  0181               	clrf	1
 15885  16FA  0008               	return
 15886  16FB                     __end_of_setDelayOff_GO:	
 15887                           
 15888                           	psect	text101
 15889  1D5F                     __ptext101:	
 15890 ;; *************** function _setProductData *****************
 15891 ;; Defined at:
 15892 ;;		line 605 in file "../src/Main_B1.c"
 15893 ;; Parameters:    Size  Location     Type
 15894 ;;  address         1    wreg     unsigned char 
 15895 ;;  value           1   66[BANK0 ] unsigned char 
 15896 ;; Auto vars:     Size  Location     Type
 15897 ;;  address         1   69[BANK0 ] unsigned char 
 15898 ;; Return value:  Size  Location     Type
 15899 ;;		None               void
 15900 ;; Registers used:
 15901 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15902 ;; Tracked objects:
 15903 ;;		On entry : 0/0
 15904 ;;		On exit  : 0/0
 15905 ;;		Unchanged: 0/0
 15906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15907 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;Total ram usage:        4 bytes
 15912 ;; Hardware stack levels used:    1
 15913 ;; Hardware stack levels required when called:    5
 15914 ;; This function calls:
 15915 ;;		Nothing
 15916 ;; This function is called by:
 15917 ;;		_setDelayOff_GO
 15918 ;;		_setDimmerLights
 15919 ;;		_setDimmerLights_Adj
 15920 ;;		_setTemp_Main
 15921 ;;		_setLog_Code
 15922 ;;		_setControl_Lights_Table
 15923 ;;		_setRFSW_AdjControl
 15924 ;;		_setRF_DimmerValue
 15925 ;;		_setRF_DimmerLights
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           
 15930                           ;psect for function _setProductData
 15931  1D5F                     _setProductData:	
 15932                           
 15933                           ;incstack = 0
 15934                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15935                           ;setProductData@address stored from wreg
 15936  1D5F  0020               	movlb	0	; select bank0
 15937  1D60  00E5               	movwf	setProductData@address
 15938                           
 15939                           ;Main_B1.c: 606: product->Data[address] = value;
 15940  1D61  0862               	movf	setProductData@value,w
 15941  1D62  00E3               	movwf	??_setProductData
 15942  1D63  0865               	movf	setProductData@address,w
 15943  1D64  0779               	addwf	_product,w
 15944  1D65  00E4               	movwf	??_setProductData+1
 15945  1D66  0864               	movf	??_setProductData+1,w
 15946  1D67  0086               	movwf	6
 15947  1D68  3002               	movlw	2	; select bank4/5
 15948  1D69  0087               	movwf	7
 15949  1D6A  0863               	movf	??_setProductData,w
 15950  1D6B  0081               	movwf	1
 15951  1D6C  0008               	return
 15952  1D6D                     __end_of_setProductData:	
 15953                           
 15954                           	psect	text102
 15955  1187                     __ptext102:	
 15956 ;; *************** function _DelayTimejudge *****************
 15957 ;; Defined at:
 15958 ;;		line 112 in file "../src/DelayOff_B1.c"
 15959 ;; Parameters:    Size  Location     Type
 15960 ;;  value           1    wreg     unsigned char 
 15961 ;; Auto vars:     Size  Location     Type
 15962 ;;  value           1    9[BANK0 ] unsigned char 
 15963 ;;  k               1    8[BANK0 ] unsigned char 
 15964 ;;  j               1    7[BANK0 ] unsigned char 
 15965 ;;  i               1    6[BANK0 ] unsigned char 
 15966 ;; Return value:  Size  Location     Type
 15967 ;;                  1    wreg      unsigned char 
 15968 ;; Registers used:
 15969 ;;		wreg, status,2, status,0, pclath, cstack
 15970 ;; Tracked objects:
 15971 ;;		On entry : 0/0
 15972 ;;		On exit  : 0/0
 15973 ;;		Unchanged: 0/0
 15974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15976 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;Total ram usage:        6 bytes
 15980 ;; Hardware stack levels used:    1
 15981 ;; Hardware stack levels required when called:    6
 15982 ;; This function calls:
 15983 ;;		___bmul
 15984 ;; This function is called by:
 15985 ;;		_setDelayOff_GO
 15986 ;; This function uses a non-reentrant model
 15987 ;;
 15988                           
 15989                           
 15990                           ;psect for function _DelayTimejudge
 15991  1187                     _DelayTimejudge:	
 15992                           
 15993                           ;incstack = 0
 15994                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15995                           ;DelayTimejudge@value stored from wreg
 15996  1187  0020               	movlb	0	; select bank0
 15997  1188  00A9               	movwf	DelayTimejudge@value
 15998                           
 15999                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16000  1189  3005               	movlw	5
 16001  118A  00A4               	movwf	??_DelayTimejudge
 16002  118B  0824               	movf	??_DelayTimejudge,w
 16003  118C  00A6               	movwf	DelayTimejudge@i
 16004  118D  01A7               	clrf	DelayTimejudge@j
 16005  118E  01A8               	clrf	DelayTimejudge@k
 16006                           
 16007                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16008  118F  3031               	movlw	49
 16009  1190  0229               	subwf	DelayTimejudge@value,w
 16010  1191  1803               	skipnc
 16011  1192  29AF               	goto	l8252
 16012                           
 16013                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16014  1193  0829               	movf	DelayTimejudge@value,w
 16015  1194  390F               	andlw	15
 16016  1195  00A4               	movwf	??_DelayTimejudge
 16017  1196  0824               	movf	??_DelayTimejudge,w
 16018  1197  00A7               	movwf	DelayTimejudge@j
 16019                           
 16020                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16021  1198  0829               	movf	DelayTimejudge@value,w
 16022  1199  00A4               	movwf	??_DelayTimejudge
 16023  119A  3004               	movlw	4
 16024  119B                     u8735:	
 16025  119B  36A4               	lsrf	??_DelayTimejudge,f
 16026  119C  0B89               	decfsz	9,f
 16027  119D  299B               	goto	u8735
 16028  119E  0824               	movf	??_DelayTimejudge,w
 16029  119F  390F               	andlw	15
 16030  11A0  00A5               	movwf	??_DelayTimejudge+1
 16031  11A1  0825               	movf	??_DelayTimejudge+1,w
 16032  11A2  00A8               	movwf	DelayTimejudge@k
 16033                           
 16034                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16035  11A3  300A               	movlw	10
 16036  11A4  00A4               	movwf	??_DelayTimejudge
 16037  11A5  0824               	movf	??_DelayTimejudge,w
 16038  11A6  00A0               	movwf	___bmul@multiplicand
 16039  11A7  0828               	movf	DelayTimejudge@k,w
 16040  11A8  319D  25FD         	fcall	___bmul
 16041  11AA  0020               	movlb	0	; select bank0
 16042  11AB  0727               	addwf	DelayTimejudge@j,w
 16043  11AC  00A5               	movwf	??_DelayTimejudge+1
 16044  11AD  0825               	movf	??_DelayTimejudge+1,w
 16045  11AE  00A6               	movwf	DelayTimejudge@i
 16046  11AF                     l8252:	
 16047                           
 16048                           ;DelayOff_B1.c: 118: }
 16049                           ;DelayOff_B1.c: 139: return i;
 16050  11AF  0826               	movf	DelayTimejudge@i,w
 16051  11B0  0008               	return
 16052  11B1                     __end_of_DelayTimejudge:	
 16053                           
 16054                           	psect	text103
 16055  1DFD                     __ptext103:	
 16056 ;; *************** function ___bmul *****************
 16057 ;; Defined at:
 16058 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16059 ;; Parameters:    Size  Location     Type
 16060 ;;  multiplier      1    wreg     unsigned char 
 16061 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16064 ;;  product         1    2[BANK0 ] unsigned char 
 16065 ;; Return value:  Size  Location     Type
 16066 ;;                  1    wreg      unsigned char 
 16067 ;; Registers used:
 16068 ;;		wreg, status,2, status,0
 16069 ;; Tracked objects:
 16070 ;;		On entry : 0/0
 16071 ;;		On exit  : 0/0
 16072 ;;		Unchanged: 0/0
 16073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16074 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;Total ram usage:        4 bytes
 16079 ;; Hardware stack levels used:    1
 16080 ;; Hardware stack levels required when called:    5
 16081 ;; This function calls:
 16082 ;;		Nothing
 16083 ;; This function is called by:
 16084 ;;		_DelayTimejudge
 16085 ;; This function uses a non-reentrant model
 16086 ;;
 16087                           
 16088                           
 16089                           ;psect for function ___bmul
 16090  1DFD                     ___bmul:	
 16091                           
 16092                           ;incstack = 0
 16093                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16094                           ;___bmul@multiplier stored from wreg
 16095  1DFD  0020               	movlb	0	; select bank0
 16096  1DFE  00A3               	movwf	___bmul@multiplier
 16097  1DFF  01A2               	clrf	___bmul@product
 16098  1E00                     l7994:	
 16099  1E00  1C23               	btfss	___bmul@multiplier,0
 16100  1E01  2E06               	goto	l7998
 16101  1E02  0820               	movf	___bmul@multiplicand,w
 16102  1E03  00A1               	movwf	??___bmul
 16103  1E04  0821               	movf	??___bmul,w
 16104  1E05  07A2               	addwf	___bmul@product,f
 16105  1E06                     l7998:	
 16106  1E06  1003               	clrc
 16107  1E07  0DA0               	rlf	___bmul@multiplicand,f
 16108  1E08  1003               	clrc
 16109  1E09  0CA3               	rrf	___bmul@multiplier,f
 16110  1E0A  08A3               	movf	___bmul@multiplier,f
 16111  1E0B  1D03               	skipz
 16112  1E0C  2E00               	goto	l7994
 16113  1E0D  0822               	movf	___bmul@product,w
 16114  1E0E  0008               	return
 16115  1E0F                     __end_of___bmul:	
 16116                           
 16117                           	psect	text104
 16118  1D99                     __ptext104:	
 16119 ;; *************** function _getDelayOff_GO *****************
 16120 ;; Defined at:
 16121 ;;		line 105 in file "../src/DelayOff_B1.c"
 16122 ;; Parameters:    Size  Location     Type
 16123 ;;  sw              1    wreg     unsigned char 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  sw              1    2[BANK0 ] unsigned char 
 16126 ;;  go              1    3[BANK0 ] unsigned char 
 16127 ;; Return value:  Size  Location     Type
 16128 ;;                  1    wreg      unsigned char 
 16129 ;; Registers used:
 16130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;Total ram usage:        2 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    6
 16143 ;; This function calls:
 16144 ;;		_DelayOffPointSelect
 16145 ;; This function is called by:
 16146 ;;		_setDimmerLights_SwOff
 16147 ;;		_setRFSW_Control
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           
 16152                           ;psect for function _getDelayOff_GO
 16153  1D99                     _getDelayOff_GO:	
 16154                           
 16155                           ;incstack = 0
 16156                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16157                           ;getDelayOff_GO@sw stored from wreg
 16158  1D99  0020               	movlb	0	; select bank0
 16159  1D9A  00A2               	movwf	getDelayOff_GO@sw
 16160                           
 16161                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16162  1D9B  0822               	movf	getDelayOff_GO@sw,w
 16163  1D9C  319C  24C9         	fcall	_DelayOffPointSelect
 16164                           
 16165                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16166  1D9E  0875               	movf	_DelayOff,w
 16167  1D9F  0086               	movwf	6
 16168  1DA0  3001               	movlw	1	; select bank2/3
 16169  1DA1  0087               	movwf	7
 16170  1DA2  3000               	movlw	0
 16171  1DA3  1881               	btfsc	1,1
 16172  1DA4  3001               	movlw	1
 16173  1DA5  0020               	movlb	0	; select bank0
 16174  1DA6  00A3               	movwf	getDelayOff_GO@go
 16175                           
 16176                           ;DelayOff_B1.c: 108: return go;
 16177  1DA7  0823               	movf	getDelayOff_GO@go,w
 16178  1DA8  0008               	return
 16179  1DA9                     __end_of_getDelayOff_GO:	
 16180                           
 16181                           	psect	text105
 16182  1DB9                     __ptext105:	
 16183 ;; *************** function _getDimmerLights_Status *****************
 16184 ;; Defined at:
 16185 ;;		line 757 in file "../src/Dimmer_B1.c"
 16186 ;; Parameters:    Size  Location     Type
 16187 ;;  lights          1    wreg     unsigned char 
 16188 ;; Auto vars:     Size  Location     Type
 16189 ;;  lights          1    2[BANK0 ] unsigned char 
 16190 ;;  status          1    3[BANK0 ] unsigned char 
 16191 ;; Return value:  Size  Location     Type
 16192 ;;                  1    wreg      unsigned char 
 16193 ;; Registers used:
 16194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16195 ;; Tracked objects:
 16196 ;;		On entry : 0/0
 16197 ;;		On exit  : 0/0
 16198 ;;		Unchanged: 0/0
 16199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;Total ram usage:        2 bytes
 16205 ;; Hardware stack levels used:    1
 16206 ;; Hardware stack levels required when called:    6
 16207 ;; This function calls:
 16208 ;;		_DimmerLightsPointSelect
 16209 ;; This function is called by:
 16210 ;;		_setDimmerLights_ErrorClose
 16211 ;;		_Exception_Main
 16212 ;;		_setRFSW_Control
 16213 ;;		_setRFSW_AdjControl
 16214 ;; This function uses a non-reentrant model
 16215 ;;
 16216                           
 16217                           
 16218                           ;psect for function _getDimmerLights_Status
 16219  1DB9                     _getDimmerLights_Status:	
 16220                           
 16221                           ;incstack = 0
 16222                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16223                           ;getDimmerLights_Status@lights stored from wreg
 16224  1DB9  0020               	movlb	0	; select bank0
 16225  1DBA  00A2               	movwf	getDimmerLights_Status@lights
 16226                           
 16227                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16228  1DBB  0822               	movf	getDimmerLights_Status@lights,w
 16229  1DBC  319C  24D4         	fcall	_DimmerLightsPointSelect
 16230                           
 16231                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16232  1DBE  0020               	movlb	0	; select bank0
 16233  1DBF  086F               	movf	_DimmerLights,w
 16234  1DC0  3E02               	addlw	2
 16235  1DC1  0086               	movwf	6
 16236  1DC2  3001               	movlw	1	; select bank2/3
 16237  1DC3  0087               	movwf	7
 16238  1DC4  3000               	movlw	0
 16239  1DC5  1881               	btfsc	1,1
 16240  1DC6  3001               	movlw	1
 16241  1DC7  00A3               	movwf	getDimmerLights_Status@status
 16242                           
 16243                           ;Dimmer_B1.c: 760: return status;
 16244  1DC8  0823               	movf	getDimmerLights_Status@status,w
 16245  1DC9  0008               	return
 16246  1DCA                     __end_of_getDimmerLights_Status:	
 16247                           
 16248                           	psect	text106
 16249  1CD4                     __ptext106:	
 16250 ;; *************** function _DimmerLightsPointSelect *****************
 16251 ;; Defined at:
 16252 ;;		line 321 in file "../src/Dimmer_B1.c"
 16253 ;; Parameters:    Size  Location     Type
 16254 ;;  lights          1    wreg     unsigned char 
 16255 ;; Auto vars:     Size  Location     Type
 16256 ;;  lights          1    1[BANK0 ] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;		None               void
 16259 ;; Registers used:
 16260 ;;		wreg
 16261 ;; Tracked objects:
 16262 ;;		On entry : 0/0
 16263 ;;		On exit  : 0/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;Total ram usage:        2 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; Hardware stack levels required when called:    5
 16273 ;; This function calls:
 16274 ;;		Nothing
 16275 ;; This function is called by:
 16276 ;;		_setDimmerLights_Initialization
 16277 ;;		_setDimmerLights_SwOn
 16278 ;;		_setDimmerLights_SwOff
 16279 ;;		_setDimmerLights_AdjOn
 16280 ;;		_setDimmerLights_Main
 16281 ;;		_getDimmerLights_Status
 16282 ;;		_getAll_DimmerLights_AdjSw
 16283 ;;		_setDimmerLights_ErrorClose
 16284 ;;		_setDimmerLights_AdjRF
 16285 ;;		_setDimmerLights_Status
 16286 ;;		_setDimmerLights_GO
 16287 ;;		_setDimmerLights_MaxmumValue
 16288 ;;		_setDimmerLights_Trigger
 16289 ;;		_setDimmerLights_TriggerAdj
 16290 ;; This function uses a non-reentrant model
 16291 ;;
 16292                           
 16293                           
 16294                           ;psect for function _DimmerLightsPointSelect
 16295  1CD4                     _DimmerLightsPointSelect:	
 16296                           
 16297                           ;incstack = 0
 16298                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16299                           ;DimmerLightsPointSelect@lights stored from wreg
 16300  1CD4  0020               	movlb	0	; select bank0
 16301  1CD5  00A1               	movwf	DimmerLightsPointSelect@lights
 16302                           
 16303                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16304  1CD6  0821               	movf	DimmerLightsPointSelect@lights,w
 16305  1CD7  3A01               	xorlw	1
 16306  1CD8  1D03               	skipz
 16307  1CD9  0008               	return
 16308                           
 16309                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16310  1CDA  3053               	movlw	_DimmerLights1& (0+255)
 16311  1CDB  00A0               	movwf	??_DimmerLightsPointSelect
 16312  1CDC  0820               	movf	??_DimmerLightsPointSelect,w
 16313  1CDD  00EF               	movwf	_DimmerLights
 16314  1CDE  0008               	return
 16315  1CDF                     __end_of_DimmerLightsPointSelect:	
 16316                           
 16317                           	psect	text107
 16318  17A7                     __ptext107:	
 16319 ;; *************** function _setBuz *****************
 16320 ;; Defined at:
 16321 ;;		line 22 in file "../src/Buzzer_B1.c"
 16322 ;; Parameters:    Size  Location     Type
 16323 ;;  count           1    wreg     unsigned char 
 16324 ;;  time            2    9[BANK0 ] int 
 16325 ;; Auto vars:     Size  Location     Type
 16326 ;;  count           1   12[BANK0 ] unsigned char 
 16327 ;; Return value:  Size  Location     Type
 16328 ;;		None               void
 16329 ;; Registers used:
 16330 ;;		wreg, status,2, status,0, pclath, cstack
 16331 ;; Tracked objects:
 16332 ;;		On entry : 0/0
 16333 ;;		On exit  : 0/0
 16334 ;;		Unchanged: 0/0
 16335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16336 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16340 ;;Total ram usage:        4 bytes
 16341 ;; Hardware stack levels used:    1
 16342 ;; Hardware stack levels required when called:    6
 16343 ;; This function calls:
 16344 ;;		___awdiv
 16345 ;; This function is called by:
 16346 ;;		_DlyOff_Main
 16347 ;;		_setDimmerLights_SwOn
 16348 ;;		_setDimmerLights_Adj
 16349 ;;		_my_MainTimer
 16350 ;;		_Exception_Main
 16351 ;;		_setTemp_Main
 16352 ;;		_setLog_Code
 16353 ;;		_setControl_Lights_Table
 16354 ;;		_setRFSW_Control
 16355 ;;		_setSw_Main
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           
 16360                           ;psect for function _setBuz
 16361  17A7                     _setBuz:	
 16362                           
 16363                           ;incstack = 0
 16364                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16365                           ;setBuz@count stored from wreg
 16366  17A7  0020               	movlb	0	; select bank0
 16367  17A8  00AC               	movwf	setBuz@count
 16368                           
 16369                           ;Buzzer_B1.c: 23: time /= 10;
 16370  17A9  300A               	movlw	10
 16371  17AA  00A0               	movwf	___awdiv@divisor
 16372  17AB  3000               	movlw	0
 16373  17AC  00A1               	movwf	___awdiv@divisor+1
 16374  17AD  082A               	movf	setBuz@time+1,w
 16375  17AE  01A3               	clrf	___awdiv@dividend+1
 16376  17AF  07A3               	addwf	___awdiv@dividend+1,f
 16377  17B0  0829               	movf	setBuz@time,w
 16378  17B1  01A2               	clrf	___awdiv@dividend
 16379  17B2  07A2               	addwf	___awdiv@dividend,f
 16380  17B3  3196  26FB  3197   	fcall	___awdiv
 16381  17B6  0020               	movlb	0	; select bank0
 16382  17B7  0821               	movf	?___awdiv+1,w
 16383  17B8  01AA               	clrf	setBuz@time+1
 16384  17B9  07AA               	addwf	setBuz@time+1,f
 16385  17BA  0820               	movf	?___awdiv,w
 16386  17BB  01A9               	clrf	setBuz@time
 16387  17BC  07A9               	addwf	setBuz@time,f
 16388                           
 16389                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16390  17BD  0021               	movlb	1	; select bank1
 16391  17BE  1C2E               	btfss	_Buz1^(0+128),0
 16392  17BF  0008               	return
 16393                           
 16394                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16395  17C0  18AE               	btfsc	_Buz1^(0+128),1
 16396  17C1  2FD8               	goto	l84
 16397                           
 16398                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16399  17C2  14AE               	bsf	_Buz1^(0+128),1
 16400                           
 16401                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16402  17C3  01AF               	clrf	(_Buz1^(0+128)+1)
 16403  17C4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16404                           
 16405                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16406  17C5  0020               	movlb	0	; select bank0
 16407  17C6  082C               	movf	setBuz@count,w
 16408  17C7  00AB               	movwf	??_setBuz
 16409  17C8  082B               	movf	??_setBuz,w
 16410  17C9  0021               	movlb	1	; select bank1
 16411  17CA  00B1               	movwf	(_Buz1^(0+128)+3)
 16412                           
 16413                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16414  17CB  0020               	movlb	0	; select bank0
 16415  17CC  082A               	movf	setBuz@time+1,w
 16416  17CD  0021               	movlb	1	; select bank1
 16417  17CE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16418  17CF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16419  17D0  0020               	movlb	0	; select bank0
 16420  17D1  0829               	movf	setBuz@time,w
 16421  17D2  0021               	movlb	1	; select bank1
 16422  17D3  01B4               	clrf	(_Buz1^(0+128)+6)
 16423  17D4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16424                           
 16425                           ;Buzzer_B1.c: 30: RB3 = 1;
 16426  17D5  0020               	movlb	0	; select bank0
 16427  17D6  158D               	bsf	13,3	;volatile
 16428                           
 16429                           ;Buzzer_B1.c: 31: } else {
 16430  17D7  0008               	return
 16431  17D8                     l84:	
 16432                           
 16433                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16434  17D8  19AE               	btfsc	_Buz1^(0+128),3
 16435  17D9  2FEC               	goto	l86
 16436                           
 16437                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16438  17DA  15AE               	bsf	_Buz1^(0+128),3
 16439                           
 16440                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16441  17DB  0020               	movlb	0	; select bank0
 16442  17DC  082C               	movf	setBuz@count,w
 16443  17DD  00AB               	movwf	??_setBuz
 16444  17DE  082B               	movf	??_setBuz,w
 16445  17DF  0021               	movlb	1	; select bank1
 16446  17E0  00B2               	movwf	(_Buz1^(0+128)+4)
 16447                           
 16448                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16449  17E1  0020               	movlb	0	; select bank0
 16450  17E2  082A               	movf	setBuz@time+1,w
 16451  17E3  0021               	movlb	1	; select bank1
 16452  17E4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16453  17E5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16454  17E6  0020               	movlb	0	; select bank0
 16455  17E7  0829               	movf	setBuz@time,w
 16456  17E8  0021               	movlb	1	; select bank1
 16457  17E9  01B6               	clrf	(_Buz1^(0+128)+8)
 16458  17EA  07B6               	addwf	(_Buz1^(0+128)+8),f
 16459                           
 16460                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16461  17EB  0008               	return
 16462  17EC                     l86:	
 16463  17EC  1A2E               	btfsc	_Buz1^(0+128),4
 16464  17ED  0008               	return
 16465                           
 16466                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16467  17EE  162E               	bsf	_Buz1^(0+128),4
 16468                           
 16469                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16470  17EF  0020               	movlb	0	; select bank0
 16471  17F0  082C               	movf	setBuz@count,w
 16472  17F1  00AB               	movwf	??_setBuz
 16473  17F2  082B               	movf	??_setBuz,w
 16474  17F3  0021               	movlb	1	; select bank1
 16475  17F4  00B3               	movwf	(_Buz1^(0+128)+5)
 16476                           
 16477                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16478  17F5  0020               	movlb	0	; select bank0
 16479  17F6  082A               	movf	setBuz@time+1,w
 16480  17F7  0021               	movlb	1	; select bank1
 16481  17F8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16482  17F9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16483  17FA  0020               	movlb	0	; select bank0
 16484  17FB  0829               	movf	setBuz@time,w
 16485  17FC  0021               	movlb	1	; select bank1
 16486  17FD  01B8               	clrf	(_Buz1^(0+128)+10)
 16487  17FE  07B8               	addwf	(_Buz1^(0+128)+10),f
 16488  17FF  0008               	return
 16489  1800                     __end_of_setBuz:	
 16490                           
 16491                           	psect	text108
 16492  16FB                     __ptext108:	
 16493 ;; *************** function ___awdiv *****************
 16494 ;; Defined at:
 16495 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16496 ;; Parameters:    Size  Location     Type
 16497 ;;  divisor         2    0[BANK0 ] int 
 16498 ;;  dividend        2    2[BANK0 ] int 
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;  quotient        2    7[BANK0 ] int 
 16501 ;;  sign            1    6[BANK0 ] unsigned char 
 16502 ;;  counter         1    5[BANK0 ] unsigned char 
 16503 ;; Return value:  Size  Location     Type
 16504 ;;                  2    0[BANK0 ] int 
 16505 ;; Registers used:
 16506 ;;		wreg, status,2, status,0
 16507 ;; Tracked objects:
 16508 ;;		On entry : 0/0
 16509 ;;		On exit  : 0/0
 16510 ;;		Unchanged: 0/0
 16511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16512 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16516 ;;Total ram usage:        9 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:    5
 16519 ;; This function calls:
 16520 ;;		Nothing
 16521 ;; This function is called by:
 16522 ;;		_setBuz
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           
 16527                           ;psect for function ___awdiv
 16528  16FB                     ___awdiv:	
 16529                           
 16530                           ;incstack = 0
 16531                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16532  16FB  0020               	movlb	0	; select bank0
 16533  16FC  01A6               	clrf	___awdiv@sign
 16534  16FD  1FA1               	btfss	___awdiv@divisor+1,7
 16535  16FE  2F06               	goto	l8278
 16536  16FF  09A0               	comf	___awdiv@divisor,f
 16537  1700  09A1               	comf	___awdiv@divisor+1,f
 16538  1701  0AA0               	incf	___awdiv@divisor,f
 16539  1702  1903               	skipnz
 16540  1703  0AA1               	incf	___awdiv@divisor+1,f
 16541  1704  01A6               	clrf	___awdiv@sign
 16542  1705  0AA6               	incf	___awdiv@sign,f
 16543  1706                     l8278:	
 16544  1706  1FA3               	btfss	___awdiv@dividend+1,7
 16545  1707  2F11               	goto	l8284
 16546  1708  09A2               	comf	___awdiv@dividend,f
 16547  1709  09A3               	comf	___awdiv@dividend+1,f
 16548  170A  0AA2               	incf	___awdiv@dividend,f
 16549  170B  1903               	skipnz
 16550  170C  0AA3               	incf	___awdiv@dividend+1,f
 16551  170D  3001               	movlw	1
 16552  170E  00A4               	movwf	??___awdiv
 16553  170F  0824               	movf	??___awdiv,w
 16554  1710  06A6               	xorwf	___awdiv@sign,f
 16555  1711                     l8284:	
 16556  1711  01A7               	clrf	___awdiv@quotient
 16557  1712  01A8               	clrf	___awdiv@quotient+1
 16558  1713  0821               	movf	___awdiv@divisor+1,w
 16559  1714  0420               	iorwf	___awdiv@divisor,w
 16560  1715  1903               	skipnz
 16561  1716  2F40               	goto	l8306
 16562  1717  01A5               	clrf	___awdiv@counter
 16563  1718  0AA5               	incf	___awdiv@counter,f
 16564  1719                     l8294:	
 16565  1719  1BA1               	btfsc	___awdiv@divisor+1,7
 16566  171A  2F25               	goto	l8296
 16567  171B  3001               	movlw	1
 16568  171C                     u8785:	
 16569  171C  35A0               	lslf	___awdiv@divisor,f
 16570  171D  0DA1               	rlf	___awdiv@divisor+1,f
 16571  171E  0B89               	decfsz	9,f
 16572  171F  2F1C               	goto	u8785
 16573  1720  3001               	movlw	1
 16574  1721  00A4               	movwf	??___awdiv
 16575  1722  0824               	movf	??___awdiv,w
 16576  1723  07A5               	addwf	___awdiv@counter,f
 16577  1724  2F19               	goto	l8294
 16578  1725                     l8296:	
 16579  1725  3001               	movlw	1
 16580  1726                     u8805:	
 16581  1726  35A7               	lslf	___awdiv@quotient,f
 16582  1727  0DA8               	rlf	___awdiv@quotient+1,f
 16583  1728  0B89               	decfsz	9,f
 16584  1729  2F26               	goto	u8805
 16585  172A  0821               	movf	___awdiv@divisor+1,w
 16586  172B  0223               	subwf	___awdiv@dividend+1,w
 16587  172C  1D03               	skipz
 16588  172D  2F30               	goto	u8815
 16589  172E  0820               	movf	___awdiv@divisor,w
 16590  172F  0222               	subwf	___awdiv@dividend,w
 16591  1730                     u8815:	
 16592  1730  1C03               	skipc
 16593  1731  2F37               	goto	l8302
 16594  1732  0820               	movf	___awdiv@divisor,w
 16595  1733  02A2               	subwf	___awdiv@dividend,f
 16596  1734  0821               	movf	___awdiv@divisor+1,w
 16597  1735  3BA3               	subwfb	___awdiv@dividend+1,f
 16598  1736  1427               	bsf	___awdiv@quotient,0
 16599  1737                     l8302:	
 16600  1737  3001               	movlw	1
 16601  1738                     u8825:	
 16602  1738  36A1               	lsrf	___awdiv@divisor+1,f
 16603  1739  0CA0               	rrf	___awdiv@divisor,f
 16604  173A  0B89               	decfsz	9,f
 16605  173B  2F38               	goto	u8825
 16606  173C  3001               	movlw	1
 16607  173D  02A5               	subwf	___awdiv@counter,f
 16608  173E  1D03               	btfss	3,2
 16609  173F  2F25               	goto	l8296
 16610  1740                     l8306:	
 16611  1740  0826               	movf	___awdiv@sign,w
 16612  1741  1903               	btfsc	3,2
 16613  1742  2F48               	goto	l8310
 16614  1743  09A7               	comf	___awdiv@quotient,f
 16615  1744  09A8               	comf	___awdiv@quotient+1,f
 16616  1745  0AA7               	incf	___awdiv@quotient,f
 16617  1746  1903               	skipnz
 16618  1747  0AA8               	incf	___awdiv@quotient+1,f
 16619  1748                     l8310:	
 16620  1748  0828               	movf	___awdiv@quotient+1,w
 16621  1749  01A1               	clrf	?___awdiv+1
 16622  174A  07A1               	addwf	?___awdiv+1,f
 16623  174B  0827               	movf	___awdiv@quotient,w
 16624  174C  01A0               	clrf	?___awdiv
 16625  174D  07A0               	addwf	?___awdiv,f
 16626  174E  0008               	return
 16627  174F                     __end_of___awdiv:	
 16628                           
 16629                           	psect	text109
 16630  1C34                     __ptext109:	
 16631 ;; *************** function _DelayOff_Initialization *****************
 16632 ;; Defined at:
 16633 ;;		line 26 in file "../src/DelayOff_B1.c"
 16634 ;; Parameters:    Size  Location     Type
 16635 ;;		None
 16636 ;; Auto vars:     Size  Location     Type
 16637 ;;		None
 16638 ;; Return value:  Size  Location     Type
 16639 ;;		None               void
 16640 ;; Registers used:
 16641 ;;		wreg, status,2, status,0, pclath, cstack
 16642 ;; Tracked objects:
 16643 ;;		On entry : 0/0
 16644 ;;		On exit  : 0/0
 16645 ;;		Unchanged: 0/0
 16646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;Total ram usage:        0 bytes
 16652 ;; Hardware stack levels used:    1
 16653 ;; Hardware stack levels required when called:    7
 16654 ;; This function calls:
 16655 ;;		_DlyOff_Initialization
 16656 ;; This function is called by:
 16657 ;;		_main
 16658 ;; This function uses a non-reentrant model
 16659 ;;
 16660                           
 16661                           
 16662                           ;psect for function _DelayOff_Initialization
 16663  1C34                     _DelayOff_Initialization:	
 16664                           
 16665                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16666                           
 16667                           ;incstack = 0
 16668                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16669  1C34  3001               	movlw	1
 16670  1C35  319C  244D         	fcall	_DlyOff_Initialization
 16671  1C37  0008               	return
 16672  1C38                     __end_of_DelayOff_Initialization:	
 16673                           
 16674                           	psect	text110
 16675  1C4D                     __ptext110:	
 16676 ;; *************** function _DlyOff_Initialization *****************
 16677 ;; Defined at:
 16678 ;;		line 56 in file "../src/DelayOff_B1.c"
 16679 ;; Parameters:    Size  Location     Type
 16680 ;;  sw              1    wreg     unsigned char 
 16681 ;; Auto vars:     Size  Location     Type
 16682 ;;  sw              1    2[BANK0 ] unsigned char 
 16683 ;; Return value:  Size  Location     Type
 16684 ;;		None               void
 16685 ;; Registers used:
 16686 ;;		wreg, status,2, status,0, pclath, cstack
 16687 ;; Tracked objects:
 16688 ;;		On entry : 0/0
 16689 ;;		On exit  : 0/0
 16690 ;;		Unchanged: 0/0
 16691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;Total ram usage:        1 bytes
 16697 ;; Hardware stack levels used:    1
 16698 ;; Hardware stack levels required when called:    6
 16699 ;; This function calls:
 16700 ;;		_DelayOffPointSelect
 16701 ;; This function is called by:
 16702 ;;		_DelayOff_Initialization
 16703 ;; This function uses a non-reentrant model
 16704 ;;
 16705                           
 16706                           
 16707                           ;psect for function _DlyOff_Initialization
 16708  1C4D                     _DlyOff_Initialization:	
 16709                           
 16710                           ;incstack = 0
 16711                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16712                           ;DlyOff_Initialization@sw stored from wreg
 16713  1C4D  0020               	movlb	0	; select bank0
 16714  1C4E  00A2               	movwf	DlyOff_Initialization@sw
 16715                           
 16716                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16717  1C4F  0822               	movf	DlyOff_Initialization@sw,w
 16718  1C50  319C  24C9         	fcall	_DelayOffPointSelect
 16719  1C52  0008               	return
 16720  1C53                     __end_of_DlyOff_Initialization:	
 16721                           
 16722                           	psect	text111
 16723  1CC9                     __ptext111:	
 16724 ;; *************** function _DelayOffPointSelect *****************
 16725 ;; Defined at:
 16726 ;;		line 7 in file "../src/DelayOff_B1.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;  sw              1    wreg     unsigned char 
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;  sw              1    1[BANK0 ] unsigned char 
 16731 ;; Return value:  Size  Location     Type
 16732 ;;		None               void
 16733 ;; Registers used:
 16734 ;;		wreg
 16735 ;; Tracked objects:
 16736 ;;		On entry : 0/0
 16737 ;;		On exit  : 0/0
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;Total ram usage:        2 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; Hardware stack levels required when called:    5
 16747 ;; This function calls:
 16748 ;;		Nothing
 16749 ;; This function is called by:
 16750 ;;		_DlyOff_Initialization
 16751 ;;		_DlyOff_Main
 16752 ;;		_setDelayOff_GO
 16753 ;;		_getDelayOff_GO
 16754 ;; This function uses a non-reentrant model
 16755 ;;
 16756                           
 16757                           
 16758                           ;psect for function _DelayOffPointSelect
 16759  1CC9                     _DelayOffPointSelect:	
 16760                           
 16761                           ;incstack = 0
 16762                           ; Regs used in _DelayOffPointSelect: [wreg]
 16763                           ;DelayOffPointSelect@sw stored from wreg
 16764  1CC9  0020               	movlb	0	; select bank0
 16765  1CCA  00A1               	movwf	DelayOffPointSelect@sw
 16766                           
 16767                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16768  1CCB  0821               	movf	DelayOffPointSelect@sw,w
 16769  1CCC  3A01               	xorlw	1
 16770  1CCD  1D03               	skipz
 16771  1CCE  0008               	return
 16772                           
 16773                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16774  1CCF  3064               	movlw	_DlySw1& (0+255)
 16775  1CD0  00A0               	movwf	??_DelayOffPointSelect
 16776  1CD1  0820               	movf	??_DelayOffPointSelect,w
 16777  1CD2  00F5               	movwf	_DelayOff
 16778  1CD3  0008               	return
 16779  1CD4                     __end_of_DelayOffPointSelect:	
 16780                           
 16781                           	psect	text112
 16782  1EA7                     __ptext112:	
 16783 ;; *************** function _CC2500_PowerOnInitial *****************
 16784 ;; Defined at:
 16785 ;;		line 119 in file "../src/CC2500_B1.c"
 16786 ;; Parameters:    Size  Location     Type
 16787 ;;		None
 16788 ;; Auto vars:     Size  Location     Type
 16789 ;;		None
 16790 ;; Return value:  Size  Location     Type
 16791 ;;		None               void
 16792 ;; Registers used:
 16793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16794 ;; Tracked objects:
 16795 ;;		On entry : 0/0
 16796 ;;		On exit  : 0/0
 16797 ;;		Unchanged: 0/0
 16798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;Total ram usage:        0 bytes
 16804 ;; Hardware stack levels used:    1
 16805 ;; Hardware stack levels required when called:    8
 16806 ;; This function calls:
 16807 ;;		_CC2500_ClearRXFIFO
 16808 ;;		_CC2500_ClearTXFIFO
 16809 ;;		_CC2500_FrequencyCabr
 16810 ;;		_CC2500_InitPATable
 16811 ;;		_CC2500_InitSetREG
 16812 ;;		_CC2500_PowerRST
 16813 ;;		_CC2500_SIDLEMode
 16814 ;; This function is called by:
 16815 ;;		_main
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           
 16820                           ;psect for function _CC2500_PowerOnInitial
 16821  1EA7                     _CC2500_PowerOnInitial:	
 16822                           
 16823                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16824                           
 16825                           ;incstack = 0
 16826                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16827  1EA7  3187  27BC  319E   	fcall	_CC2500_PowerRST
 16828                           
 16829                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16830  1EAA  3191  215D  319E   	fcall	_CC2500_InitSetREG
 16831                           
 16832                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16833  1EAD  319F  27A1  319E   	fcall	_CC2500_InitPATable
 16834                           
 16835                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16836  1EB0  319C  242C  319E   	fcall	_CC2500_ClearTXFIFO
 16837                           
 16838                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16839  1EB3  319C  2428  319E   	fcall	_CC2500_ClearRXFIFO
 16840                           
 16841                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16842  1EB6  319D  250B  319E   	fcall	_CC2500_FrequencyCabr
 16843                           
 16844                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16845  1EB9  319C  2430         	fcall	_CC2500_SIDLEMode
 16846  1EBB  0008               	return
 16847  1EBC                     __end_of_CC2500_PowerOnInitial:	
 16848                           
 16849                           	psect	text113
 16850  1C30                     __ptext113:	
 16851 ;; *************** function _CC2500_SIDLEMode *****************
 16852 ;; Defined at:
 16853 ;;		line 209 in file "../src/CC2500_B1.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;		None
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;		None
 16858 ;; Return value:  Size  Location     Type
 16859 ;;		None               void
 16860 ;; Registers used:
 16861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;Total ram usage:        0 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    7
 16874 ;; This function calls:
 16875 ;;		_CC2500_WriteCommand
 16876 ;; This function is called by:
 16877 ;;		_CC2500_PowerOnInitial
 16878 ;; This function uses a non-reentrant model
 16879 ;;
 16880                           
 16881                           
 16882                           ;psect for function _CC2500_SIDLEMode
 16883  1C30                     _CC2500_SIDLEMode:	
 16884                           
 16885                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16886                           
 16887                           ;incstack = 0
 16888                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16889  1C30  3036               	movlw	54
 16890  1C31  319F  2718         	fcall	_CC2500_WriteCommand
 16891  1C33  0008               	return
 16892  1C34                     __end_of_CC2500_SIDLEMode:	
 16893                           
 16894                           	psect	text114
 16895  07BC                     __ptext114:	
 16896 ;; *************** function _CC2500_PowerRST *****************
 16897 ;; Defined at:
 16898 ;;		line 132 in file "../src/CC2500_B1.c"
 16899 ;; Parameters:    Size  Location     Type
 16900 ;;		None
 16901 ;; Auto vars:     Size  Location     Type
 16902 ;;		None
 16903 ;; Return value:  Size  Location     Type
 16904 ;;		None               void
 16905 ;; Registers used:
 16906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;Total ram usage:        1 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; Hardware stack levels required when called:    6
 16919 ;; This function calls:
 16920 ;;		_CC2500_WriteByte
 16921 ;;		_DelayTime_1us
 16922 ;;		_Timeout_Counter
 16923 ;;		_set_TimeoutCleared
 16924 ;; This function is called by:
 16925 ;;		_CC2500_PowerOnInitial
 16926 ;; This function uses a non-reentrant model
 16927 ;;
 16928                           
 16929                           
 16930                           ;psect for function _CC2500_PowerRST
 16931  07BC                     _CC2500_PowerRST:	
 16932                           
 16933                           ;CC2500_B1.c: 133: RC3 = 0;
 16934                           
 16935                           ;incstack = 0
 16936                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16937  07BC  0020               	movlb	0	; select bank0
 16938  07BD  118E               	bcf	14,3	;volatile
 16939                           
 16940                           ;CC2500_B1.c: 134: RC4 = 0;
 16941  07BE  120E               	bcf	14,4	;volatile
 16942                           
 16943                           ;CC2500_B1.c: 135: RC0 = 1;
 16944  07BF  140E               	bsf	14,0	;volatile
 16945                           
 16946                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16947  07C0  300A               	movlw	10
 16948  07C1  00A0               	movwf	DelayTime_1us@count
 16949  07C2  3000               	movlw	0
 16950  07C3  00A1               	movwf	DelayTime_1us@count+1
 16951  07C4  3191  2137  3187   	fcall	_DelayTime_1us
 16952                           
 16953                           ;CC2500_B1.c: 137: RC0 = 0;
 16954  07C7  0020               	movlb	0	; select bank0
 16955  07C8  100E               	bcf	14,0	;volatile
 16956                           
 16957                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16958  07C9  300A               	movlw	10
 16959  07CA  00A0               	movwf	DelayTime_1us@count
 16960  07CB  3000               	movlw	0
 16961  07CC  00A1               	movwf	DelayTime_1us@count+1
 16962  07CD  3191  2137  3187   	fcall	_DelayTime_1us
 16963                           
 16964                           ;CC2500_B1.c: 139: RC0 = 1;
 16965  07D0  0020               	movlb	0	; select bank0
 16966  07D1  140E               	bsf	14,0	;volatile
 16967                           
 16968                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16969  07D2  3028               	movlw	40
 16970  07D3  00A0               	movwf	DelayTime_1us@count
 16971  07D4  3000               	movlw	0
 16972  07D5  00A1               	movwf	DelayTime_1us@count+1
 16973  07D6  3191  2137  3187   	fcall	_DelayTime_1us
 16974                           
 16975                           ;CC2500_B1.c: 141: RC0 = 0;
 16976  07D9  0020               	movlb	0	; select bank0
 16977  07DA  100E               	bcf	14,0	;volatile
 16978                           
 16979                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16980  07DB  3030               	movlw	48
 16981  07DC  00A6               	movwf	??_CC2500_PowerRST
 16982  07DD  0826               	movf	??_CC2500_PowerRST,w
 16983  07DE  0021               	movlb	1	; select bank1
 16984  07DF  00D1               	movwf	_SPI0Buffer^(0+128)
 16985                           
 16986                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16987  07E0  2FE4               	goto	l9154
 16988  07E1                     l9152:	
 16989                           
 16990                           ;CC2500_B1.c: 144: Timeout_Counter();
 16991  07E1  319E  2692  3187   	fcall	_Timeout_Counter
 16992  07E4                     l9154:	
 16993  07E4  0020               	movlb	0	; select bank0
 16994  07E5  1E8E               	btfss	14,5	;volatile
 16995  07E6  2FEA               	goto	l9158
 16996  07E7  0021               	movlb	1	; select bank1
 16997  07E8  1D2B               	btfss	(_myMain^(0+128)+11),2
 16998  07E9  2FE1               	goto	l9152
 16999  07EA                     l9158:	
 17000                           
 17001                           ;CC2500_B1.c: 145: };
 17002                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17003  07EA  319C  2448  3187   	fcall	_set_TimeoutCleared
 17004                           
 17005                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17006  07ED  319E  26FF  3187   	fcall	_CC2500_WriteByte
 17007                           
 17008                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17009  07F0  2FF4               	goto	l9164
 17010  07F1                     l9162:	
 17011                           
 17012                           ;CC2500_B1.c: 149: Timeout_Counter();
 17013  07F1  319E  2692  3187   	fcall	_Timeout_Counter
 17014  07F4                     l9164:	
 17015  07F4  0020               	movlb	0	; select bank0
 17016  07F5  1E8E               	btfss	14,5	;volatile
 17017  07F6  2FFA               	goto	l9168
 17018  07F7  0021               	movlb	1	; select bank1
 17019  07F8  1D2B               	btfss	(_myMain^(0+128)+11),2
 17020  07F9  2FF1               	goto	l9162
 17021  07FA                     l9168:	
 17022                           
 17023                           ;CC2500_B1.c: 150: };
 17024                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17025  07FA  319C  2448         	fcall	_set_TimeoutCleared
 17026                           
 17027                           ;CC2500_B1.c: 152: RC4 = 0;
 17028  07FC  0020               	movlb	0	; select bank0
 17029  07FD  120E               	bcf	14,4	;volatile
 17030                           
 17031                           ;CC2500_B1.c: 153: RC0 = 1;
 17032  07FE  140E               	bsf	14,0	;volatile
 17033  07FF  0008               	return
 17034  0800                     __end_of_CC2500_PowerRST:	
 17035                           
 17036                           	psect	text115
 17037  115D                     __ptext115:	
 17038 ;; *************** function _CC2500_InitSetREG *****************
 17039 ;; Defined at:
 17040 ;;		line 159 in file "../src/CC2500_B1.c"
 17041 ;; Parameters:    Size  Location     Type
 17042 ;;		None
 17043 ;; Auto vars:     Size  Location     Type
 17044 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17045 ;;  temp2           1    7[BANK0 ] unsigned char 
 17046 ;;  temp1           1    6[BANK0 ] unsigned char 
 17047 ;; Return value:  Size  Location     Type
 17048 ;;		None               void
 17049 ;; Registers used:
 17050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17051 ;; Tracked objects:
 17052 ;;		On entry : 0/0
 17053 ;;		On exit  : 0/0
 17054 ;;		Unchanged: 0/0
 17055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17057 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17060 ;;Total ram usage:        4 bytes
 17061 ;; Hardware stack levels used:    1
 17062 ;; Hardware stack levels required when called:    7
 17063 ;; This function calls:
 17064 ;;		_CC2500_WriteREG
 17065 ;; This function is called by:
 17066 ;;		_CC2500_PowerOnInitial
 17067 ;; This function uses a non-reentrant model
 17068 ;;
 17069                           
 17070                           
 17071                           ;psect for function _CC2500_InitSetREG
 17072  115D                     _CC2500_InitSetREG:	
 17073                           
 17074                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17075                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17076                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17077                           
 17078                           ;incstack = 0
 17079                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17080  115D  0020               	movlb	0	; select bank0
 17081  115E  01A8               	clrf	CC2500_InitSetREG@loop_c
 17082  115F                     L7:	
 17083  115F  302F               	movlw	47
 17084  1160  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17085  1161  1803               	btfsc	3,0
 17086  1162  0008               	return
 17087                           
 17088                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17089  1163  0828               	movf	CC2500_InitSetREG@loop_c,w
 17090  1164  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17091  1165  0084               	movwf	4
 17092  1166  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17093  1167  1803               	skipnc
 17094  1168  3E01               	addlw	1
 17095  1169  0085               	movwf	5
 17096  116A  0800               	movf	0,w	;code access
 17097  116B  00A5               	movwf	??_CC2500_InitSetREG
 17098  116C  0825               	movf	??_CC2500_InitSetREG,w
 17099  116D  00A6               	movwf	CC2500_InitSetREG@temp1
 17100                           
 17101                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17102  116E  0828               	movf	CC2500_InitSetREG@loop_c,w
 17103  116F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17104  1170  0084               	movwf	4
 17105  1171  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17106  1172  1803               	skipnc
 17107  1173  3E01               	addlw	1
 17108  1174  0085               	movwf	5
 17109  1175  0800               	movf	0,w	;code access
 17110  1176  00A5               	movwf	??_CC2500_InitSetREG
 17111  1177  0825               	movf	??_CC2500_InitSetREG,w
 17112  1178  00A7               	movwf	CC2500_InitSetREG@temp2
 17113                           
 17114                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17115  1179  0827               	movf	CC2500_InitSetREG@temp2,w
 17116  117A  00A5               	movwf	??_CC2500_InitSetREG
 17117  117B  0825               	movf	??_CC2500_InitSetREG,w
 17118  117C  00A2               	movwf	CC2500_WriteREG@value
 17119  117D  0826               	movf	CC2500_InitSetREG@temp1,w
 17120  117E  3190  20A6  3191   	fcall	_CC2500_WriteREG
 17121  1181  3001               	movlw	1
 17122  1182  0020               	movlb	0	; select bank0
 17123  1183  00A5               	movwf	??_CC2500_InitSetREG
 17124  1184  0825               	movf	??_CC2500_InitSetREG,w
 17125  1185  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17126  1186  295F               	goto	L7
 17127  1187                     __end_of_CC2500_InitSetREG:	
 17128                           
 17129                           	psect	text116
 17130  1FA1                     __ptext116:	
 17131 ;; *************** function _CC2500_InitPATable *****************
 17132 ;; Defined at:
 17133 ;;		line 174 in file "../src/CC2500_B1.c"
 17134 ;; Parameters:    Size  Location     Type
 17135 ;;		None
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17138 ;;  temp            1    6[BANK0 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;		None               void
 17141 ;; Registers used:
 17142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17151 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17152 ;;Total ram usage:        3 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:    7
 17155 ;; This function calls:
 17156 ;;		_CC2500_WriteREG
 17157 ;; This function is called by:
 17158 ;;		_CC2500_PowerOnInitial
 17159 ;; This function uses a non-reentrant model
 17160 ;;
 17161                           
 17162                           
 17163                           ;psect for function _CC2500_InitPATable
 17164  1FA1                     _CC2500_InitPATable:	
 17165                           
 17166                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17167                           ;CC2500_B1.c: 176: unsigned char temp;
 17168                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17169                           
 17170                           ;incstack = 0
 17171                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17172  1FA1  0020               	movlb	0	; select bank0
 17173  1FA2  01A7               	clrf	CC2500_InitPATable@loop_d
 17174  1FA3                     L8:	
 17175  1FA3  3008               	movlw	8
 17176  1FA4  0227               	subwf	CC2500_InitPATable@loop_d,w
 17177  1FA5  1803               	btfsc	3,0
 17178  1FA6  0008               	return
 17179                           
 17180                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17181  1FA7  0827               	movf	CC2500_InitPATable@loop_d,w
 17182  1FA8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17183  1FA9  0084               	movwf	4
 17184  1FAA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17185  1FAB  1803               	skipnc
 17186  1FAC  3E01               	addlw	1
 17187  1FAD  0085               	movwf	5
 17188  1FAE  0800               	movf	0,w	;code access
 17189  1FAF  00A5               	movwf	??_CC2500_InitPATable
 17190  1FB0  0825               	movf	??_CC2500_InitPATable,w
 17191  1FB1  00A6               	movwf	CC2500_InitPATable@temp
 17192                           
 17193                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17194  1FB2  0826               	movf	CC2500_InitPATable@temp,w
 17195  1FB3  00A5               	movwf	??_CC2500_InitPATable
 17196  1FB4  0825               	movf	??_CC2500_InitPATable,w
 17197  1FB5  00A2               	movwf	CC2500_WriteREG@value
 17198  1FB6  303E               	movlw	62
 17199  1FB7  3190  20A6  319F   	fcall	_CC2500_WriteREG
 17200  1FBA  3001               	movlw	1
 17201  1FBB  0020               	movlb	0	; select bank0
 17202  1FBC  00A5               	movwf	??_CC2500_InitPATable
 17203  1FBD  0825               	movf	??_CC2500_InitPATable,w
 17204  1FBE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17205  1FBF  2FA3               	goto	L8
 17206  1FC0                     __end_of_CC2500_InitPATable:	
 17207                           
 17208                           	psect	text117
 17209  10A6                     __ptext117:	
 17210 ;; *************** function _CC2500_WriteREG *****************
 17211 ;; Defined at:
 17212 ;;		line 251 in file "../src/CC2500_B1.c"
 17213 ;; Parameters:    Size  Location     Type
 17214 ;;  w_addr          1    wreg     unsigned char 
 17215 ;;  value           1    2[BANK0 ] unsigned char 
 17216 ;; Auto vars:     Size  Location     Type
 17217 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17218 ;; Return value:  Size  Location     Type
 17219 ;;		None               void
 17220 ;; Registers used:
 17221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17222 ;; Tracked objects:
 17223 ;;		On entry : 0/0
 17224 ;;		On exit  : 0/0
 17225 ;;		Unchanged: 0/0
 17226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17227 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;Total ram usage:        3 bytes
 17232 ;; Hardware stack levels used:    1
 17233 ;; Hardware stack levels required when called:    6
 17234 ;; This function calls:
 17235 ;;		_CC2500_WriteByte
 17236 ;;		_Timeout_Counter
 17237 ;;		_set_TimeoutCleared
 17238 ;; This function is called by:
 17239 ;;		_CC2500_InitSetREG
 17240 ;;		_CC2500_InitPATable
 17241 ;; This function uses a non-reentrant model
 17242 ;;
 17243                           
 17244                           
 17245                           ;psect for function _CC2500_WriteREG
 17246  10A6                     _CC2500_WriteREG:	
 17247                           
 17248                           ;incstack = 0
 17249                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17250                           ;CC2500_WriteREG@w_addr stored from wreg
 17251  10A6  0020               	movlb	0	; select bank0
 17252  10A7  00A4               	movwf	CC2500_WriteREG@w_addr
 17253                           
 17254                           ;CC2500_B1.c: 252: RC0 = 0;
 17255  10A8  100E               	bcf	14,0	;volatile
 17256                           
 17257                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17258  10A9  0824               	movf	CC2500_WriteREG@w_addr,w
 17259  10AA  00A3               	movwf	??_CC2500_WriteREG
 17260  10AB  0823               	movf	??_CC2500_WriteREG,w
 17261  10AC  0021               	movlb	1	; select bank1
 17262  10AD  00D1               	movwf	_SPI0Buffer^(0+128)
 17263                           
 17264                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17265  10AE  28B2               	goto	l8892
 17266  10AF                     l8890:	
 17267                           
 17268                           ;CC2500_B1.c: 255: Timeout_Counter();
 17269  10AF  319E  2692  3190   	fcall	_Timeout_Counter
 17270  10B2                     l8892:	
 17271  10B2  0020               	movlb	0	; select bank0
 17272  10B3  1E8E               	btfss	14,5	;volatile
 17273  10B4  28B8               	goto	l8896
 17274  10B5  0021               	movlb	1	; select bank1
 17275  10B6  1D2B               	btfss	(_myMain^(0+128)+11),2
 17276  10B7  28AF               	goto	l8890
 17277  10B8                     l8896:	
 17278                           
 17279                           ;CC2500_B1.c: 256: };
 17280                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17281  10B8  319C  2448  3190   	fcall	_set_TimeoutCleared
 17282                           
 17283                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17284  10BB  319E  26FF  3190   	fcall	_CC2500_WriteByte
 17285                           
 17286                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17287  10BE  0020               	movlb	0	; select bank0
 17288  10BF  0822               	movf	CC2500_WriteREG@value,w
 17289  10C0  00A3               	movwf	??_CC2500_WriteREG
 17290  10C1  0823               	movf	??_CC2500_WriteREG,w
 17291  10C2  0021               	movlb	1	; select bank1
 17292  10C3  00D1               	movwf	_SPI0Buffer^(0+128)
 17293                           
 17294                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17295  10C4  319E  26FF         	fcall	_CC2500_WriteByte
 17296                           
 17297                           ;CC2500_B1.c: 262: RC0 = 1;
 17298  10C6  0020               	movlb	0	; select bank0
 17299  10C7  140E               	bsf	14,0	;volatile
 17300  10C8  0008               	return
 17301  10C9                     __end_of_CC2500_WriteREG:	
 17302                           
 17303                           	psect	text118
 17304  1D0B                     __ptext118:	
 17305 ;; *************** function _CC2500_FrequencyCabr *****************
 17306 ;; Defined at:
 17307 ;;		line 201 in file "../src/CC2500_B1.c"
 17308 ;; Parameters:    Size  Location     Type
 17309 ;;		None
 17310 ;; Auto vars:     Size  Location     Type
 17311 ;;		None
 17312 ;; Return value:  Size  Location     Type
 17313 ;;		None               void
 17314 ;; Registers used:
 17315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17316 ;; Tracked objects:
 17317 ;;		On entry : 0/0
 17318 ;;		On exit  : 0/0
 17319 ;;		Unchanged: 0/0
 17320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;Total ram usage:        0 bytes
 17326 ;; Hardware stack levels used:    1
 17327 ;; Hardware stack levels required when called:    7
 17328 ;; This function calls:
 17329 ;;		_CC2500_WriteCommand
 17330 ;;		_DelayTime_1us
 17331 ;; This function is called by:
 17332 ;;		_CC2500_PowerOnInitial
 17333 ;; This function uses a non-reentrant model
 17334 ;;
 17335                           
 17336                           
 17337                           ;psect for function _CC2500_FrequencyCabr
 17338  1D0B                     _CC2500_FrequencyCabr:	
 17339                           
 17340                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17341                           
 17342                           ;incstack = 0
 17343                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17344  1D0B  3033               	movlw	51
 17345  1D0C  319F  2718  319D   	fcall	_CC2500_WriteCommand
 17346                           
 17347                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17348  1D0F  30E8               	movlw	232
 17349  1D10  0020               	movlb	0	; select bank0
 17350  1D11  00A0               	movwf	DelayTime_1us@count
 17351  1D12  3003               	movlw	3
 17352  1D13  00A1               	movwf	DelayTime_1us@count+1
 17353  1D14  3191  2137         	fcall	_DelayTime_1us
 17354  1D16  0008               	return
 17355  1D17                     __end_of_CC2500_FrequencyCabr:	
 17356                           
 17357                           	psect	text119
 17358  1137                     __ptext119:	
 17359 ;; *************** function _DelayTime_1us *****************
 17360 ;; Defined at:
 17361 ;;		line 320 in file "../src/CC2500_B1.c"
 17362 ;; Parameters:    Size  Location     Type
 17363 ;;  count           2    0[BANK0 ] int 
 17364 ;; Auto vars:     Size  Location     Type
 17365 ;;  j               2    4[BANK0 ] unsigned int 
 17366 ;;  i               2    2[BANK0 ] unsigned int 
 17367 ;; Return value:  Size  Location     Type
 17368 ;;		None               void
 17369 ;; Registers used:
 17370 ;;		wreg, status,2
 17371 ;; Tracked objects:
 17372 ;;		On entry : 0/0
 17373 ;;		On exit  : 0/0
 17374 ;;		Unchanged: 0/0
 17375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17377 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;Total ram usage:        6 bytes
 17381 ;; Hardware stack levels used:    1
 17382 ;; Hardware stack levels required when called:    5
 17383 ;; This function calls:
 17384 ;;		Nothing
 17385 ;; This function is called by:
 17386 ;;		_CC2500_PowerRST
 17387 ;;		_CC2500_FrequencyCabr
 17388 ;; This function uses a non-reentrant model
 17389 ;;
 17390                           
 17391                           
 17392                           ;psect for function _DelayTime_1us
 17393  1137                     _DelayTime_1us:	
 17394                           
 17395                           ;CC2500_B1.c: 321: unsigned int i, j;
 17396                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17397                           
 17398                           ;incstack = 0
 17399                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17400  1137  3001               	movlw	1
 17401  1138  0020               	movlb	0	; select bank0
 17402  1139  00A2               	movwf	DelayTime_1us@i
 17403  113A  3000               	movlw	0
 17404  113B  00A3               	movwf	DelayTime_1us@i+1
 17405  113C                     l348:	
 17406  113C  0821               	movf	DelayTime_1us@count+1,w
 17407  113D  0223               	subwf	DelayTime_1us@i+1,w
 17408  113E  1D03               	skipz
 17409  113F  2942               	goto	u9595
 17410  1140  0820               	movf	DelayTime_1us@count,w
 17411  1141  0222               	subwf	DelayTime_1us@i,w
 17412  1142                     u9595:	
 17413  1142  1803               	btfsc	3,0
 17414  1143  0008               	return
 17415                           
 17416                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17417  1144  01A4               	clrf	DelayTime_1us@j
 17418  1145  01A5               	clrf	DelayTime_1us@j+1
 17419  1146  3000               	movlw	0
 17420  1147  0225               	subwf	DelayTime_1us@j+1,w
 17421  1148  3002               	movlw	2
 17422  1149  1903               	skipnz
 17423  114A  0224               	subwf	DelayTime_1us@j,w
 17424  114B  1803               	btfsc	3,0
 17425  114C  2958               	goto	l8884
 17426  114D                     l8882:	
 17427  114D  3001               	movlw	1
 17428  114E  07A4               	addwf	DelayTime_1us@j,f
 17429  114F  3000               	movlw	0
 17430  1150  3DA5               	addwfc	DelayTime_1us@j+1,f
 17431  1151  3000               	movlw	0
 17432  1152  0225               	subwf	DelayTime_1us@j+1,w
 17433  1153  3002               	movlw	2
 17434  1154  1903               	skipnz
 17435  1155  0224               	subwf	DelayTime_1us@j,w
 17436  1156  1C03               	skipc
 17437  1157  294D               	goto	l8882
 17438  1158                     l8884:	
 17439  1158  3001               	movlw	1
 17440  1159  07A2               	addwf	DelayTime_1us@i,f
 17441  115A  3000               	movlw	0
 17442  115B  3DA3               	addwfc	DelayTime_1us@i+1,f
 17443  115C  293C               	goto	l348
 17444  115D                     __end_of_DelayTime_1us:	
 17445                           
 17446                           	psect	text120
 17447  1C2C                     __ptext120:	
 17448 ;; *************** function _CC2500_ClearTXFIFO *****************
 17449 ;; Defined at:
 17450 ;;		line 187 in file "../src/CC2500_B1.c"
 17451 ;; Parameters:    Size  Location     Type
 17452 ;;		None
 17453 ;; Auto vars:     Size  Location     Type
 17454 ;;		None
 17455 ;; Return value:  Size  Location     Type
 17456 ;;		None               void
 17457 ;; Registers used:
 17458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17459 ;; Tracked objects:
 17460 ;;		On entry : 0/0
 17461 ;;		On exit  : 0/0
 17462 ;;		Unchanged: 0/0
 17463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;Total ram usage:        0 bytes
 17469 ;; Hardware stack levels used:    1
 17470 ;; Hardware stack levels required when called:    7
 17471 ;; This function calls:
 17472 ;;		_CC2500_WriteCommand
 17473 ;; This function is called by:
 17474 ;;		_CC2500_PowerOnInitial
 17475 ;; This function uses a non-reentrant model
 17476 ;;
 17477                           
 17478                           
 17479                           ;psect for function _CC2500_ClearTXFIFO
 17480  1C2C                     _CC2500_ClearTXFIFO:	
 17481                           
 17482                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17483                           
 17484                           ;incstack = 0
 17485                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17486  1C2C  303B               	movlw	59
 17487  1C2D  319F  2718         	fcall	_CC2500_WriteCommand
 17488  1C2F  0008               	return
 17489  1C30                     __end_of_CC2500_ClearTXFIFO:	
 17490                           
 17491                           	psect	text121
 17492  1C28                     __ptext121:	
 17493 ;; *************** function _CC2500_ClearRXFIFO *****************
 17494 ;; Defined at:
 17495 ;;		line 194 in file "../src/CC2500_B1.c"
 17496 ;; Parameters:    Size  Location     Type
 17497 ;;		None
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;		None
 17500 ;; Return value:  Size  Location     Type
 17501 ;;		None               void
 17502 ;; Registers used:
 17503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17504 ;; Tracked objects:
 17505 ;;		On entry : 0/0
 17506 ;;		On exit  : 0/0
 17507 ;;		Unchanged: 0/0
 17508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;Total ram usage:        0 bytes
 17514 ;; Hardware stack levels used:    1
 17515 ;; Hardware stack levels required when called:    7
 17516 ;; This function calls:
 17517 ;;		_CC2500_WriteCommand
 17518 ;; This function is called by:
 17519 ;;		_CC2500_PowerOnInitial
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           
 17524                           ;psect for function _CC2500_ClearRXFIFO
 17525  1C28                     _CC2500_ClearRXFIFO:	
 17526                           
 17527                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17528                           
 17529                           ;incstack = 0
 17530                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17531  1C28  303A               	movlw	58
 17532  1C29  319F  2718         	fcall	_CC2500_WriteCommand
 17533  1C2B  0008               	return
 17534  1C2C                     __end_of_CC2500_ClearRXFIFO:	
 17535                           
 17536                           	psect	text122
 17537  1F18                     __ptext122:	
 17538 ;; *************** function _CC2500_WriteCommand *****************
 17539 ;; Defined at:
 17540 ;;		line 285 in file "../src/CC2500_B1.c"
 17541 ;; Parameters:    Size  Location     Type
 17542 ;;  command         1    wreg     unsigned char 
 17543 ;; Auto vars:     Size  Location     Type
 17544 ;;  command         1    3[BANK0 ] unsigned char 
 17545 ;; Return value:  Size  Location     Type
 17546 ;;		None               void
 17547 ;; Registers used:
 17548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17549 ;; Tracked objects:
 17550 ;;		On entry : 0/0
 17551 ;;		On exit  : 0/0
 17552 ;;		Unchanged: 0/0
 17553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;Total ram usage:        2 bytes
 17559 ;; Hardware stack levels used:    1
 17560 ;; Hardware stack levels required when called:    6
 17561 ;; This function calls:
 17562 ;;		_CC2500_WriteByte
 17563 ;;		_Timeout_Counter
 17564 ;;		_set_TimeoutCleared
 17565 ;; This function is called by:
 17566 ;;		_CC2500_TxData
 17567 ;;		_CC2500_ClearTXFIFO
 17568 ;;		_CC2500_ClearRXFIFO
 17569 ;;		_CC2500_FrequencyCabr
 17570 ;;		_CC2500_SIDLEMode
 17571 ;;		_setRF_Main
 17572 ;;		_RF_RxDisable
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576                           
 17577                           ;psect for function _CC2500_WriteCommand
 17578  1F18                     _CC2500_WriteCommand:	
 17579                           
 17580                           ;incstack = 0
 17581                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17582                           ;CC2500_WriteCommand@command stored from wreg
 17583  1F18  0020               	movlb	0	; select bank0
 17584  1F19  00A3               	movwf	CC2500_WriteCommand@command
 17585                           
 17586                           ;CC2500_B1.c: 286: RC0 = 0;
 17587  1F1A  100E               	bcf	14,0	;volatile
 17588                           
 17589                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17590  1F1B  0823               	movf	CC2500_WriteCommand@command,w
 17591  1F1C  00A2               	movwf	??_CC2500_WriteCommand
 17592  1F1D  0822               	movf	??_CC2500_WriteCommand,w
 17593  1F1E  0021               	movlb	1	; select bank1
 17594  1F1F  00D1               	movwf	_SPI0Buffer^(0+128)
 17595                           
 17596                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17597  1F20  2F24               	goto	l8620
 17598  1F21                     l8618:	
 17599                           
 17600                           ;CC2500_B1.c: 290: Timeout_Counter();
 17601  1F21  319E  2692  319F   	fcall	_Timeout_Counter
 17602  1F24                     l8620:	
 17603  1F24  0020               	movlb	0	; select bank0
 17604  1F25  1E8E               	btfss	14,5	;volatile
 17605  1F26  2F2A               	goto	l8624
 17606  1F27  0021               	movlb	1	; select bank1
 17607  1F28  1D2B               	btfss	(_myMain^(0+128)+11),2
 17608  1F29  2F21               	goto	l8618
 17609  1F2A                     l8624:	
 17610                           
 17611                           ;CC2500_B1.c: 291: };
 17612                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17613  1F2A  319C  2448  319F   	fcall	_set_TimeoutCleared
 17614                           
 17615                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17616  1F2D  319E  26FF         	fcall	_CC2500_WriteByte
 17617                           
 17618                           ;CC2500_B1.c: 295: RC0 = 1;
 17619  1F2F  0020               	movlb	0	; select bank0
 17620  1F30  140E               	bsf	14,0	;volatile
 17621  1F31  0008               	return
 17622  1F32                     __end_of_CC2500_WriteCommand:	
 17623                           
 17624                           	psect	text123
 17625  1C48                     __ptext123:	
 17626 ;; *************** function _set_TimeoutCleared *****************
 17627 ;; Defined at:
 17628 ;;		line 283 in file "../src/Main_B1.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;		None               void
 17635 ;; Registers used:
 17636 ;;		status,2
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;Total ram usage:        0 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    5
 17649 ;; This function calls:
 17650 ;;		Nothing
 17651 ;; This function is called by:
 17652 ;;		_CC2500_TxData
 17653 ;;		_CC2500_RxData
 17654 ;;		_CC2500_PowerRST
 17655 ;;		_CC2500_WriteREG
 17656 ;;		_CC2500_WriteCommand
 17657 ;;		_CC2500_ReadStatus
 17658 ;;		_getAD
 17659 ;;		_TouchPower
 17660 ;;		_CC2500_ReadREG
 17661 ;; This function uses a non-reentrant model
 17662 ;;
 17663                           
 17664                           
 17665                           ;psect for function _set_TimeoutCleared
 17666  1C48                     _set_TimeoutCleared:	
 17667                           
 17668                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17669                           
 17670                           ;incstack = 0
 17671                           ; Regs used in _set_TimeoutCleared: [status,2]
 17672  1C48  0021               	movlb	1	; select bank1
 17673  1C49  112B               	bcf	(_myMain^(0+128)+11),2
 17674                           
 17675                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17676  1C4A  01AC               	clrf	(_myMain^(0+128)+12)
 17677  1C4B  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17678  1C4C  0008               	return
 17679  1C4D                     __end_of_set_TimeoutCleared:	
 17680                           
 17681                           	psect	text124
 17682  1E92                     __ptext124:	
 17683 ;; *************** function _Timeout_Counter *****************
 17684 ;; Defined at:
 17685 ;;		line 274 in file "../src/Main_B1.c"
 17686 ;; Parameters:    Size  Location     Type
 17687 ;;		None
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;		None
 17690 ;; Return value:  Size  Location     Type
 17691 ;;		None               void
 17692 ;; Registers used:
 17693 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17694 ;; Tracked objects:
 17695 ;;		On entry : 0/0
 17696 ;;		On exit  : 0/0
 17697 ;;		Unchanged: 0/0
 17698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;Total ram usage:        0 bytes
 17704 ;; Hardware stack levels used:    1
 17705 ;; Hardware stack levels required when called:    5
 17706 ;; This function calls:
 17707 ;;		Nothing
 17708 ;; This function is called by:
 17709 ;;		_CC2500_TxData
 17710 ;;		_CC2500_RxData
 17711 ;;		_CC2500_PowerRST
 17712 ;;		_CC2500_WriteREG
 17713 ;;		_CC2500_WriteCommand
 17714 ;;		_CC2500_ReadStatus
 17715 ;;		_getAD
 17716 ;;		_TouchPower
 17717 ;;		_CC2500_ReadREG
 17718 ;; This function uses a non-reentrant model
 17719 ;;
 17720                           
 17721                           
 17722                           ;psect for function _Timeout_Counter
 17723  1E92                     _Timeout_Counter:	
 17724                           
 17725                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17726                           
 17727                           ;incstack = 0
 17728                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17729  1E92  3001               	movlw	1
 17730  1E93  0021               	movlb	1	; select bank1
 17731  1E94  07AC               	addwf	(_myMain^(0+128)+12),f
 17732  1E95  3000               	movlw	0
 17733  1E96  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17734                           
 17735                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17736  1E97  300C               	movlw	12
 17737  1E98  3EA0               	addlw	_myMain& (0+255)
 17738  1E99  0086               	movwf	6
 17739  1E9A  0187               	clrf	7
 17740  1E9B  3F40               	moviw [0]fsr1
 17741  1E9C  3A10               	xorlw	16
 17742  1E9D  1D03               	skipz
 17743  1E9E  2EA1               	goto	u9045
 17744  1E9F  3F41               	moviw [1]fsr1
 17745  1EA0  3A27               	xorlw	39
 17746  1EA1                     u9045:	
 17747  1EA1  1D03               	skipz
 17748  1EA2  0008               	return
 17749                           
 17750                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17751  1EA3  01AC               	clrf	(_myMain^(0+128)+12)
 17752  1EA4  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17753                           
 17754                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17755  1EA5  152B               	bsf	(_myMain^(0+128)+11),2
 17756  1EA6  0008               	return
 17757  1EA7                     __end_of_Timeout_Counter:	
 17758                           
 17759                           	psect	text125
 17760  1EFF                     __ptext125:	
 17761 ;; *************** function _CC2500_WriteByte *****************
 17762 ;; Defined at:
 17763 ;;		line 219 in file "../src/CC2500_B1.c"
 17764 ;; Parameters:    Size  Location     Type
 17765 ;;		None
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17768 ;; Return value:  Size  Location     Type
 17769 ;;		None               void
 17770 ;; Registers used:
 17771 ;;		wreg, status,2, status,0
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17781 ;;Total ram usage:        2 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    5
 17784 ;; This function calls:
 17785 ;;		Nothing
 17786 ;; This function is called by:
 17787 ;;		_CC2500_TxData
 17788 ;;		_CC2500_RxData
 17789 ;;		_CC2500_PowerRST
 17790 ;;		_CC2500_WriteREG
 17791 ;;		_CC2500_WriteCommand
 17792 ;;		_CC2500_ReadStatus
 17793 ;;		_CC2500_ReadREG
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           
 17798                           ;psect for function _CC2500_WriteByte
 17799  1EFF                     _CC2500_WriteByte:	
 17800                           
 17801                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17802                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17803                           
 17804                           ;incstack = 0
 17805                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17806  1EFF  0020               	movlb	0	; select bank0
 17807  1F00  01A1               	clrf	CC2500_WriteByte@loop_a
 17808  1F01                     L9:	
 17809  1F01  3008               	movlw	8
 17810  1F02  0221               	subwf	CC2500_WriteByte@loop_a,w
 17811  1F03  1803               	btfsc	3,0
 17812  1F04  0008               	return
 17813                           
 17814                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17815  1F05  0021               	movlb	1	; select bank1
 17816  1F06  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17817  1F07  2F0B               	goto	l304
 17818                           
 17819                           ;CC2500_B1.c: 223: RC4 = 1;
 17820  1F08  0020               	movlb	0	; select bank0
 17821  1F09  160E               	bsf	14,4	;volatile
 17822  1F0A  2F0D               	goto	l305
 17823  1F0B                     l304:	
 17824                           
 17825                           ;CC2500_B1.c: 224: else
 17826                           ;CC2500_B1.c: 225: RC4 = 0;
 17827  1F0B  0020               	movlb	0	; select bank0
 17828  1F0C  120E               	bcf	14,4	;volatile
 17829  1F0D                     l305:	
 17830                           
 17831                           ;CC2500_B1.c: 226: RC3 = 1;
 17832  1F0D  158E               	bsf	14,3	;volatile
 17833                           
 17834                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17835  1F0E  1003               	clrc
 17836  1F0F  0021               	movlb	1	; select bank1
 17837  1F10  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17838                           
 17839                           ;CC2500_B1.c: 228: RC3 = 0;
 17840  1F11  0020               	movlb	0	; select bank0
 17841  1F12  118E               	bcf	14,3	;volatile
 17842  1F13  3001               	movlw	1
 17843  1F14  00A0               	movwf	??_CC2500_WriteByte
 17844  1F15  0820               	movf	??_CC2500_WriteByte,w
 17845  1F16  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17846  1F17  2F01               	goto	L9
 17847  1F18                     __end_of_CC2500_WriteByte:	
 17848                           
 17849                           	psect	text126
 17850  14D0                     __ptext126:	
 17851 ;; *************** function _Buzzer_Main *****************
 17852 ;; Defined at:
 17853 ;;		line 46 in file "../src/Buzzer_B1.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;		None
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;		None
 17858 ;; Return value:  Size  Location     Type
 17859 ;;		None               void
 17860 ;; Registers used:
 17861 ;;		wreg, status,2, status,0
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;Total ram usage:        1 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    5
 17874 ;; This function calls:
 17875 ;;		Nothing
 17876 ;; This function is called by:
 17877 ;;		_main
 17878 ;; This function uses a non-reentrant model
 17879 ;;
 17880                           
 17881                           
 17882                           ;psect for function _Buzzer_Main
 17883  14D0                     _Buzzer_Main:	
 17884                           
 17885                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17886                           
 17887                           ;incstack = 0
 17888                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17889  14D0  0021               	movlb	1	; select bank1
 17890  14D1  1CAE               	btfss	_Buz1^(0+128),1
 17891  14D2  0008               	return
 17892                           
 17893                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17894  14D3  3001               	movlw	1
 17895  14D4  07AF               	addwf	(_Buz1^(0+128)+1),f
 17896  14D5  3000               	movlw	0
 17897  14D6  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17898                           
 17899                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17900  14D7  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17901  14D8  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17902  14D9  1D03               	skipz
 17903  14DA  2CDD               	goto	u10915
 17904  14DB  0834               	movf	(_Buz1^(0+128)+6),w
 17905  14DC  022F               	subwf	(_Buz1^(0+128)+1),w
 17906  14DD                     u10915:	
 17907  14DD  1C03               	skipc
 17908  14DE  0008               	return
 17909                           
 17910                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17911  14DF  01AF               	clrf	(_Buz1^(0+128)+1)
 17912  14E0  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17913                           
 17914                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17915  14E1  12AE               	bcf	_Buz1^(0+128),5
 17916  14E2  0020               	movlb	0	; select bank0
 17917  14E3  1D8D               	btfss	13,3	;volatile
 17918  14E4  2CE7               	goto	l9724
 17919  14E5  0021               	movlb	1	; select bank1
 17920  14E6  16AE               	bsf	_Buz1^(0+128),5
 17921  14E7                     l9724:	
 17922                           
 17923                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17924  14E7  0021               	movlb	1	; select bank1
 17925  14E8  1AAE               	btfsc	_Buz1^(0+128),5
 17926  14E9  2D13               	goto	l94
 17927                           
 17928                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17929  14EA  08B1               	movf	(_Buz1^(0+128)+3),f
 17930  14EB  1D03               	skipz
 17931  14EC  2D0F               	goto	l95
 17932                           
 17933                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17934  14ED  1DAE               	btfss	_Buz1^(0+128),3
 17935  14EE  2CFD               	goto	l96
 17936                           
 17937                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17938  14EF  11AE               	bcf	_Buz1^(0+128),3
 17939                           
 17940                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17941  14F0  0832               	movf	(_Buz1^(0+128)+4),w
 17942  14F1  0020               	movlb	0	; select bank0
 17943  14F2  00A0               	movwf	??_Buzzer_Main
 17944  14F3  0820               	movf	??_Buzzer_Main,w
 17945  14F4  0021               	movlb	1	; select bank1
 17946  14F5  00B1               	movwf	(_Buz1^(0+128)+3)
 17947                           
 17948                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17949  14F6  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17950  14F7  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17951  14F8  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17952  14F9  0836               	movf	(_Buz1^(0+128)+8),w
 17953  14FA  01B4               	clrf	(_Buz1^(0+128)+6)
 17954  14FB  07B4               	addwf	(_Buz1^(0+128)+6),f
 17955                           
 17956                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17957  14FC  0008               	return
 17958  14FD                     l96:	
 17959  14FD  1E2E               	btfss	_Buz1^(0+128),4
 17960  14FE  2D0D               	goto	l98
 17961                           
 17962                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17963  14FF  122E               	bcf	_Buz1^(0+128),4
 17964                           
 17965                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17966  1500  0833               	movf	(_Buz1^(0+128)+5),w
 17967  1501  0020               	movlb	0	; select bank0
 17968  1502  00A0               	movwf	??_Buzzer_Main
 17969  1503  0820               	movf	??_Buzzer_Main,w
 17970  1504  0021               	movlb	1	; select bank1
 17971  1505  00B1               	movwf	(_Buz1^(0+128)+3)
 17972                           
 17973                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17974  1506  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17975  1507  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17976  1508  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17977  1509  0838               	movf	(_Buz1^(0+128)+10),w
 17978  150A  01B4               	clrf	(_Buz1^(0+128)+6)
 17979  150B  07B4               	addwf	(_Buz1^(0+128)+6),f
 17980                           
 17981                           ;Buzzer_B1.c: 62: } else {
 17982  150C  0008               	return
 17983  150D                     l98:	
 17984                           
 17985                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17986  150D  10AE               	bcf	_Buz1^(0+128),1
 17987                           
 17988                           ;Buzzer_B1.c: 64: }
 17989                           ;Buzzer_B1.c: 65: } else {
 17990  150E  0008               	return
 17991  150F                     l95:	
 17992                           
 17993                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17994  150F  16AE               	bsf	_Buz1^(0+128),5
 17995                           
 17996                           ;Buzzer_B1.c: 68: RB3 = 1;
 17997  1510  0020               	movlb	0	; select bank0
 17998  1511  158D               	bsf	13,3	;volatile
 17999                           
 18000                           ;Buzzer_B1.c: 69: }
 18001                           ;Buzzer_B1.c: 70: } else {
 18002  1512  0008               	return
 18003  1513                     l94:	
 18004                           
 18005                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18006  1513  12AE               	bcf	_Buz1^(0+128),5
 18007                           
 18008                           ;Buzzer_B1.c: 73: RB3 = 0;
 18009  1514  0020               	movlb	0	; select bank0
 18010  1515  118D               	bcf	13,3	;volatile
 18011                           
 18012                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18013  1516  3001               	movlw	1
 18014  1517  0021               	movlb	1	; select bank1
 18015  1518  02B1               	subwf	(_Buz1^(0+128)+3),f
 18016  1519  0008               	return
 18017  151A                     __end_of_Buzzer_Main:	
 18018                           
 18019                           	psect	text127
 18020  1C12                     __ptext127:	
 18021 ;; *************** function _Buzzer_Initialization *****************
 18022 ;; Defined at:
 18023 ;;		line 11 in file "../src/Buzzer_B1.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;		None
 18026 ;; Auto vars:     Size  Location     Type
 18027 ;;		None
 18028 ;; Return value:  Size  Location     Type
 18029 ;;		None               void
 18030 ;; Registers used:
 18031 ;;		None
 18032 ;; Tracked objects:
 18033 ;;		On entry : 0/0
 18034 ;;		On exit  : 0/0
 18035 ;;		Unchanged: 0/0
 18036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;Total ram usage:        0 bytes
 18042 ;; Hardware stack levels used:    1
 18043 ;; Hardware stack levels required when called:    5
 18044 ;; This function calls:
 18045 ;;		Nothing
 18046 ;; This function is called by:
 18047 ;;		_main
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           
 18052                           ;psect for function _Buzzer_Initialization
 18053  1C12                     _Buzzer_Initialization:	
 18054                           
 18055                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18056                           
 18057                           ;incstack = 0
 18058                           ; Regs used in _Buzzer_Initialization: []
 18059  1C12  0021               	movlb	1	; select bank1
 18060  1C13  142E               	bsf	_Buz1^(0+128),0
 18061  1C14  0008               	return
 18062  1C15                     __end_of_Buzzer_Initialization:	
 18063                           
 18064                           	psect	intentry
 18065  0004                     __pintentry:	
 18066 ;; *************** function _ISR *****************
 18067 ;; Defined at:
 18068 ;;		line 107 in file "../src/MCU_B1.c"
 18069 ;; Parameters:    Size  Location     Type
 18070 ;;		None
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;		None
 18073 ;; Return value:  Size  Location     Type
 18074 ;;		None               void
 18075 ;; Registers used:
 18076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18086 ;;Total ram usage:        1 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    4
 18089 ;; This function calls:
 18090 ;;		_IOC_ISR
 18091 ;;		_TMR1_ISR
 18092 ;; This function is called by:
 18093 ;;		Interrupt level 1
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097  0004                     _ISR:	
 18098                           
 18099                           ;incstack = 0
 18100                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18101  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18102  0005  3180               	pagesel	$
 18103  0006  0020               	movlb	0	; select bank0
 18104  0007  087F               	movf	127,w
 18105  0008  00F4               	movwf	??_ISR
 18106                           
 18107                           ;MCU_B1.c: 109: IOC_ISR();
 18108  0009  319D  257B  3180   	fcall	_IOC_ISR
 18109                           
 18110                           ;MCU_B1.c: 111: ;;
 18111                           ;MCU_B1.c: 113: TMR1_ISR();
 18112  000C  3190  20ED         	fcall	_TMR1_ISR
 18113  000E  0874               	movf	??_ISR,w
 18114  000F  0020               	movlb	0	; select bank0
 18115  0010  00FF               	movwf	127
 18116  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18117  0012  0009               	retfie
 18118  0013                     __end_of_ISR:	
 18119                           
 18120                           	psect	text129
 18121  10ED                     __ptext129:	
 18122 ;; *************** function _TMR1_ISR *****************
 18123 ;; Defined at:
 18124 ;;		line 209 in file "../src/MCU_B1.c"
 18125 ;; Parameters:    Size  Location     Type
 18126 ;;		None
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;		None
 18129 ;; Return value:  Size  Location     Type
 18130 ;;		None               void
 18131 ;; Registers used:
 18132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18142 ;;Total ram usage:        0 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    2
 18145 ;; This function calls:
 18146 ;;		_setDimmerLights_IntrControl
 18147 ;; This function is called by:
 18148 ;;		_ISR
 18149 ;; This function uses a non-reentrant model
 18150 ;;
 18151                           
 18152                           
 18153                           ;psect for function _TMR1_ISR
 18154  10ED                     _TMR1_ISR:	
 18155                           
 18156                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18157                           
 18158                           ;incstack = 0
 18159                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18160  10ED  0021               	movlb	1	; select bank1
 18161  10EE  1C11               	btfss	17,0	;volatile
 18162  10EF  0008               	return
 18163  10F0  0020               	movlb	0	; select bank0
 18164  10F1  1C11               	btfss	17,0	;volatile
 18165  10F2  0008               	return
 18166                           
 18167                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18168  10F3  30FA               	movlw	250
 18169  10F4  0097               	movwf	23	;volatile
 18170                           
 18171                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18172  10F5  3038               	movlw	56
 18173  10F6  0096               	movwf	22	;volatile
 18174                           
 18175                           ;MCU_B1.c: 214: TMR1IF = 0;
 18176  10F7  1011               	bcf	17,0	;volatile
 18177                           
 18178                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18179  10F8  3001               	movlw	1
 18180  10F9  3183  2360  3190   	fcall	_setDimmerLights_IntrControl
 18181                           
 18182                           ;MCU_B1.c: 235: Timer1.Count++;
 18183  10FC  3001               	movlw	1
 18184  10FD  0022               	movlb	2	; select bank2
 18185  10FE  07A1               	addwf	(_Timer1^(0+256)+1),f
 18186  10FF  3000               	movlw	0
 18187  1100  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18188                           
 18189                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18190  1101  3001               	movlw	1
 18191  1102  3E20               	addlw	_Timer1& (0+255)
 18192  1103  0086               	movwf	6
 18193  1104  3001               	movlw	1	; select bank2/3
 18194  1105  0087               	movwf	7
 18195  1106  3F40               	moviw [0]fsr1
 18196  1107  3A64               	xorlw	100
 18197  1108  1D03               	skipz
 18198  1109  290C               	goto	u727_25
 18199  110A  3F41               	moviw [1]fsr1
 18200  110B  3A00               	xorlw	0
 18201  110C                     u727_25:	
 18202  110C  1D03               	skipz
 18203  110D  0008               	return
 18204                           
 18205                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18206  110E  01A1               	clrf	(_Timer1^(0+256)+1)
 18207  110F  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18208                           
 18209                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18210  1110  1420               	bsf	_Timer1^(0+256),0
 18211  1111  0008               	return
 18212  1112                     __end_of_TMR1_ISR:	
 18213                           
 18214                           	psect	text130
 18215  0360                     __ptext130:	
 18216 ;; *************** function _setDimmerLights_IntrControl *****************
 18217 ;; Defined at:
 18218 ;;		line 96 in file "../src/Dimmer_B1.c"
 18219 ;; Parameters:    Size  Location     Type
 18220 ;;  lights          1    wreg     unsigned char 
 18221 ;; Auto vars:     Size  Location     Type
 18222 ;;  lights          1    3[COMMON] unsigned char 
 18223 ;; Return value:  Size  Location     Type
 18224 ;;		None               void
 18225 ;; Registers used:
 18226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18227 ;; Tracked objects:
 18228 ;;		On entry : 0/0
 18229 ;;		On exit  : 0/0
 18230 ;;		Unchanged: 0/0
 18231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;Total ram usage:        2 bytes
 18237 ;; Hardware stack levels used:    1
 18238 ;; Hardware stack levels required when called:    1
 18239 ;; This function calls:
 18240 ;;		_DimmerIntrPointSelect
 18241 ;; This function is called by:
 18242 ;;		_TMR1_ISR
 18243 ;; This function uses a non-reentrant model
 18244 ;;
 18245                           
 18246                           
 18247                           ;psect for function _setDimmerLights_IntrControl
 18248  0360                     _setDimmerLights_IntrControl:	
 18249                           
 18250                           ;incstack = 0
 18251                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18252                           ;setDimmerLights_IntrControl@lights stored from wreg
 18253  0360  00F3               	movwf	setDimmerLights_IntrControl@lights
 18254                           
 18255                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18256  0361  0873               	movf	setDimmerLights_IntrControl@lights,w
 18257  0362  319C  24A0  3183   	fcall	_DimmerIntrPointSelect
 18258                           
 18259                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18260  0365  0876               	movf	_DimmerLightsIntr,w
 18261  0366  3E02               	addlw	2
 18262  0367  0086               	movwf	6
 18263  0368  3001               	movlw	1	; select bank2/3
 18264  0369  0087               	movwf	7
 18265  036A  1D01               	btfss	1,2
 18266  036B  2B8A               	goto	i1l6782
 18267                           
 18268                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18269  036C  3001               	movlw	1
 18270  036D  00F2               	movwf	??_setDimmerLights_IntrControl
 18271  036E  0876               	movf	_DimmerLightsIntr,w
 18272  036F  3E03               	addlw	3
 18273  0370  0086               	movwf	6
 18274  0371  3001               	movlw	1	; select bank2/3
 18275  0372  0087               	movwf	7
 18276  0373  0872               	movf	??_setDimmerLights_IntrControl,w
 18277  0374  0781               	addwf	1,f
 18278                           
 18279                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75F*0.8)) + 1) {
 18280  0375  0876               	movf	_DimmerLightsIntr,w
 18281  0376  3E03               	addlw	3
 18282  0377  0086               	movwf	6
 18283  0378  3001               	movlw	1	; select bank2/3
 18284  0379  0087               	movwf	7
 18285  037A  303D               	movlw	61
 18286  037B  0201               	subwf	1,w
 18287  037C  1C03               	skipc
 18288  037D  2B8A               	goto	i1l6782
 18289                           
 18290                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18291  037E  0876               	movf	_DimmerLightsIntr,w
 18292  037F  3E03               	addlw	3
 18293  0380  0086               	movwf	6
 18294  0381  3001               	movlw	1	; select bank2/3
 18295  0382  0087               	movwf	7
 18296  0383  0181               	clrf	1
 18297                           
 18298                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18299  0384  0876               	movf	_DimmerLightsIntr,w
 18300  0385  3E02               	addlw	2
 18301  0386  0086               	movwf	6
 18302  0387  3001               	movlw	1	; select bank2/3
 18303  0388  0087               	movwf	7
 18304  0389  1101               	bcf	1,2
 18305  038A                     i1l6782:	
 18306                           
 18307                           ;Dimmer_B1.c: 241: }
 18308                           ;Dimmer_B1.c: 242: }
 18309                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18310  038A  0A76               	incf	_DimmerLightsIntr,w
 18311  038B  0086               	movwf	6
 18312  038C  3001               	movlw	1	; select bank2/3
 18313  038D  0087               	movwf	7
 18314  038E  1C01               	btfss	1,0
 18315  038F  2BBA               	goto	i1l6794
 18316                           
 18317                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18318  0390  0876               	movf	_DimmerLightsIntr,w
 18319  0391  3E03               	addlw	3
 18320  0392  0086               	movwf	6
 18321  0393  3001               	movlw	1	; select bank2/3
 18322  0394  0087               	movwf	7
 18323  0395  0876               	movf	_DimmerLightsIntr,w
 18324  0396  3E04               	addlw	4
 18325  0397  0084               	movwf	4
 18326  0398  3001               	movlw	1	; select bank2/3
 18327  0399  0085               	movwf	5
 18328  039A  0800               	movf	0,w
 18329  039B  0201               	subwf	1,w
 18330  039C  1C03               	skipc
 18331  039D  0008               	return
 18332                           
 18333                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18334  039E  0A76               	incf	_DimmerLightsIntr,w
 18335  039F  0086               	movwf	6
 18336  03A0  3001               	movlw	1	; select bank2/3
 18337  03A1  0087               	movwf	7
 18338  03A2  1001               	bcf	1,0
 18339                           
 18340                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18341  03A3  0A76               	incf	_DimmerLightsIntr,w
 18342  03A4  0086               	movwf	6
 18343  03A5  3001               	movlw	1	; select bank2/3
 18344  03A6  0087               	movwf	7
 18345  03A7  1581               	bsf	1,3
 18346                           
 18347                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18348  03A8  0876               	movf	_DimmerLightsIntr,w
 18349  03A9  0086               	movwf	6
 18350  03AA  3001               	movlw	1	; select bank2/3
 18351  03AB  0087               	movwf	7
 18352  03AC  1C01               	btfss	1,0
 18353  03AD  0008               	return
 18354                           
 18355                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18356  03AE  0876               	movf	_DimmerLightsIntr,w
 18357  03AF  0086               	movwf	6
 18358  03B0  3001               	movlw	1	; select bank2/3
 18359  03B1  0087               	movwf	7
 18360  03B2  1001               	bcf	1,0
 18361                           
 18362                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18363  03B3  0873               	movf	setDimmerLights_IntrControl@lights,w
 18364  03B4  3A01               	xorlw	1
 18365  03B5  1D03               	skipz
 18366  03B6  0008               	return
 18367                           
 18368                           ;Dimmer_B1.c: 253: RB1 = 0;
 18369  03B7  0020               	movlb	0	; select bank0
 18370  03B8  108D               	bcf	13,1	;volatile
 18371                           
 18372                           ;Dimmer_B1.c: 255: }
 18373                           ;Dimmer_B1.c: 262: }
 18374                           ;Dimmer_B1.c: 263: }
 18375                           ;Dimmer_B1.c: 264: } else {
 18376  03B9  0008               	return
 18377  03BA                     i1l6794:	
 18378                           
 18379                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18380  03BA  0A76               	incf	_DimmerLightsIntr,w
 18381  03BB  0086               	movwf	6
 18382  03BC  3001               	movlw	1	; select bank2/3
 18383  03BD  0087               	movwf	7
 18384  03BE  1D81               	btfss	1,3
 18385  03BF  0008               	return
 18386                           
 18387                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18388  03C0  0A76               	incf	_DimmerLightsIntr,w
 18389  03C1  0086               	movwf	6
 18390  03C2  3001               	movlw	1	; select bank2/3
 18391  03C3  0087               	movwf	7
 18392  03C4  1181               	bcf	1,3
 18393                           
 18394                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18395  03C5  3001               	movlw	1
 18396  03C6  00F2               	movwf	??_setDimmerLights_IntrControl
 18397  03C7  0876               	movf	_DimmerLightsIntr,w
 18398  03C8  3E05               	addlw	5
 18399  03C9  0086               	movwf	6
 18400  03CA  3001               	movlw	1	; select bank2/3
 18401  03CB  0087               	movwf	7
 18402  03CC  0872               	movf	??_setDimmerLights_IntrControl,w
 18403  03CD  0781               	addwf	1,f
 18404                           
 18405                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18406  03CE  0876               	movf	_DimmerLightsIntr,w
 18407  03CF  3E05               	addlw	5
 18408  03D0  0086               	movwf	6
 18409  03D1  3001               	movlw	1	; select bank2/3
 18410  03D2  0087               	movwf	7
 18411  03D3  0876               	movf	_DimmerLightsIntr,w
 18412  03D4  3E08               	addlw	8
 18413  03D5  0084               	movwf	4
 18414  03D6  3001               	movlw	1	; select bank2/3
 18415  03D7  0085               	movwf	5
 18416  03D8  0800               	movf	0,w
 18417  03D9  0201               	subwf	1,w
 18418  03DA  1C03               	skipc
 18419  03DB  2C1E               	goto	i1l6820
 18420                           
 18421                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18422  03DC  0876               	movf	_DimmerLightsIntr,w
 18423  03DD  3E05               	addlw	5
 18424  03DE  0086               	movwf	6
 18425  03DF  3001               	movlw	1	; select bank2/3
 18426  03E0  0087               	movwf	7
 18427  03E1  0181               	clrf	1
 18428                           
 18429                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18430  03E2  0A76               	incf	_DimmerLightsIntr,w
 18431  03E3  0086               	movwf	6
 18432  03E4  3001               	movlw	1	; select bank2/3
 18433  03E5  0087               	movwf	7
 18434  03E6  1F01               	btfss	1,6
 18435  03E7  0008               	return
 18436                           
 18437                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18438  03E8  0A76               	incf	_DimmerLightsIntr,w
 18439  03E9  0086               	movwf	6
 18440  03EA  3001               	movlw	1	; select bank2/3
 18441  03EB  0087               	movwf	7
 18442  03EC  1B81               	btfsc	1,7
 18443  03ED  2C07               	goto	i1l6814
 18444                           
 18445                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75F*0.8))) {
 18446  03EE  0876               	movf	_DimmerLightsIntr,w
 18447  03EF  3E04               	addlw	4
 18448  03F0  0086               	movwf	6
 18449  03F1  3001               	movlw	1	; select bank2/3
 18450  03F2  0087               	movwf	7
 18451  03F3  303C               	movlw	60
 18452  03F4  0201               	subwf	1,w
 18453  03F5  1803               	skipnc
 18454  03F6  2C01               	goto	i1l6812
 18455                           
 18456                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18457  03F7  3001               	movlw	1
 18458  03F8  00F2               	movwf	??_setDimmerLights_IntrControl
 18459  03F9  0876               	movf	_DimmerLightsIntr,w
 18460  03FA  3E04               	addlw	4
 18461  03FB  0086               	movwf	6
 18462  03FC  3001               	movlw	1	; select bank2/3
 18463  03FD  0087               	movwf	7
 18464  03FE  0872               	movf	??_setDimmerLights_IntrControl,w
 18465  03FF  0781               	addwf	1,f
 18466                           
 18467                           ;Dimmer_B1.c: 274: } else {
 18468  0400  0008               	return
 18469  0401                     i1l6812:	
 18470                           
 18471                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18472  0401  0A76               	incf	_DimmerLightsIntr,w
 18473  0402  0086               	movwf	6
 18474  0403  3001               	movlw	1	; select bank2/3
 18475  0404  0087               	movwf	7
 18476  0405  1781               	bsf	1,7
 18477                           
 18478                           ;Dimmer_B1.c: 276: }
 18479                           ;Dimmer_B1.c: 277: } else {
 18480  0406  0008               	return
 18481  0407                     i1l6814:	
 18482                           
 18483                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18484  0407  0876               	movf	_DimmerLightsIntr,w
 18485  0408  3E04               	addlw	4
 18486  0409  0086               	movwf	6
 18487  040A  3001               	movlw	1	; select bank2/3
 18488  040B  0087               	movwf	7
 18489  040C  300D               	movlw	13
 18490  040D  0201               	subwf	1,w
 18491  040E  1C03               	skipc
 18492  040F  2C18               	goto	i1l6818
 18493                           
 18494                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18495  0410  0876               	movf	_DimmerLightsIntr,w
 18496  0411  3E04               	addlw	4
 18497  0412  0086               	movwf	6
 18498  0413  3001               	movlw	1	; select bank2/3
 18499  0414  0087               	movwf	7
 18500  0415  3001               	movlw	1
 18501  0416  0281               	subwf	1,f
 18502                           
 18503                           ;Dimmer_B1.c: 280: } else
 18504  0417  0008               	return
 18505  0418                     i1l6818:	
 18506                           
 18507                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18508  0418  0A76               	incf	_DimmerLightsIntr,w
 18509  0419  0086               	movwf	6
 18510  041A  3001               	movlw	1	; select bank2/3
 18511  041B  0087               	movwf	7
 18512  041C  1381               	bcf	1,7
 18513                           
 18514                           ;Dimmer_B1.c: 282: }
 18515                           ;Dimmer_B1.c: 283: }
 18516                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18517  041D  0008               	return
 18518  041E                     i1l6820:	
 18519  041E  0876               	movf	_DimmerLightsIntr,w
 18520  041F  3E02               	addlw	2
 18521  0420  0086               	movwf	6
 18522  0421  3001               	movlw	1	; select bank2/3
 18523  0422  0087               	movwf	7
 18524  0423  1C01               	btfss	1,0
 18525  0424  0008               	return
 18526                           
 18527                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18528  0425  0876               	movf	_DimmerLightsIntr,w
 18529  0426  3E04               	addlw	4
 18530  0427  0086               	movwf	6
 18531  0428  3001               	movlw	1	; select bank2/3
 18532  0429  0087               	movwf	7
 18533  042A  0876               	movf	_DimmerLightsIntr,w
 18534  042B  3E06               	addlw	6
 18535  042C  0084               	movwf	4
 18536  042D  3001               	movlw	1	; select bank2/3
 18537  042E  0085               	movwf	5
 18538  042F  0800               	movf	0,w
 18539  0430  0201               	subwf	1,w
 18540  0431  1803               	skipnc
 18541  0432  2C3D               	goto	i1l6826
 18542                           
 18543                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18544  0433  3001               	movlw	1
 18545  0434  00F2               	movwf	??_setDimmerLights_IntrControl
 18546  0435  0876               	movf	_DimmerLightsIntr,w
 18547  0436  3E04               	addlw	4
 18548  0437  0086               	movwf	6
 18549  0438  3001               	movlw	1	; select bank2/3
 18550  0439  0087               	movwf	7
 18551  043A  0872               	movf	??_setDimmerLights_IntrControl,w
 18552  043B  0781               	addwf	1,f
 18553                           
 18554                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18555  043C  0008               	return
 18556  043D                     i1l6826:	
 18557  043D  0876               	movf	_DimmerLightsIntr,w
 18558  043E  3E06               	addlw	6
 18559  043F  0086               	movwf	6
 18560  0440  3001               	movlw	1	; select bank2/3
 18561  0441  0087               	movwf	7
 18562  0442  0876               	movf	_DimmerLightsIntr,w
 18563  0443  3E04               	addlw	4
 18564  0444  0084               	movwf	4
 18565  0445  3001               	movlw	1	; select bank2/3
 18566  0446  0085               	movwf	5
 18567  0447  0800               	movf	0,w
 18568  0448  0201               	subwf	1,w
 18569  0449  1803               	skipnc
 18570  044A  2C53               	goto	i1l6830
 18571                           
 18572                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18573  044B  0876               	movf	_DimmerLightsIntr,w
 18574  044C  3E04               	addlw	4
 18575  044D  0086               	movwf	6
 18576  044E  3001               	movlw	1	; select bank2/3
 18577  044F  0087               	movwf	7
 18578  0450  3001               	movlw	1
 18579  0451  0281               	subwf	1,f
 18580                           
 18581                           ;Dimmer_B1.c: 289: } else {
 18582  0452  0008               	return
 18583  0453                     i1l6830:	
 18584                           
 18585                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18586  0453  0876               	movf	_DimmerLightsIntr,w
 18587  0454  3E02               	addlw	2
 18588  0455  0086               	movwf	6
 18589  0456  3001               	movlw	1	; select bank2/3
 18590  0457  0087               	movwf	7
 18591  0458  1001               	bcf	1,0
 18592  0459  0008               	return
 18593  045A                     __end_of_setDimmerLights_IntrControl:	
 18594                           
 18595                           	psect	text131
 18596  1CA0                     __ptext131:	
 18597 ;; *************** function _DimmerIntrPointSelect *****************
 18598 ;; Defined at:
 18599 ;;		line 74 in file "../src/Dimmer_B1.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;  lights          1    wreg     unsigned char 
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;  lights          1    1[COMMON] unsigned char 
 18604 ;; Return value:  Size  Location     Type
 18605 ;;		None               void
 18606 ;; Registers used:
 18607 ;;		wreg
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18617 ;;Total ram usage:        2 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; This function calls:
 18620 ;;		Nothing
 18621 ;; This function is called by:
 18622 ;;		_setDimmerLights_IntrControl
 18623 ;; This function uses a non-reentrant model
 18624 ;;
 18625                           
 18626                           
 18627                           ;psect for function _DimmerIntrPointSelect
 18628  1CA0                     _DimmerIntrPointSelect:	
 18629                           
 18630                           ;incstack = 0
 18631                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18632                           ;DimmerIntrPointSelect@lights stored from wreg
 18633  1CA0  00F1               	movwf	DimmerIntrPointSelect@lights
 18634                           
 18635                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18636  1CA1  0871               	movf	DimmerIntrPointSelect@lights,w
 18637  1CA2  3A01               	xorlw	1
 18638  1CA3  1D03               	skipz
 18639  1CA4  0008               	return
 18640                           
 18641                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18642  1CA5  3053               	movlw	_DimmerLights1& (0+255)
 18643  1CA6  00F0               	movwf	??_DimmerIntrPointSelect
 18644  1CA7  0870               	movf	??_DimmerIntrPointSelect,w
 18645  1CA8  00F6               	movwf	_DimmerLightsIntr
 18646  1CA9  0008               	return
 18647  1CAA                     __end_of_DimmerIntrPointSelect:	
 18648                           
 18649                           	psect	text132
 18650  1D7B                     __ptext132:	
 18651 ;; *************** function _IOC_ISR *****************
 18652 ;; Defined at:
 18653 ;;		line 400 in file "../src/MCU_B1.c"
 18654 ;; Parameters:    Size  Location     Type
 18655 ;;		None
 18656 ;; Auto vars:     Size  Location     Type
 18657 ;;		None
 18658 ;; Return value:  Size  Location     Type
 18659 ;;		None               void
 18660 ;; Registers used:
 18661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18662 ;; Tracked objects:
 18663 ;;		On entry : 0/0
 18664 ;;		On exit  : 0/0
 18665 ;;		Unchanged: 0/0
 18666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18671 ;;Total ram usage:        0 bytes
 18672 ;; Hardware stack levels used:    1
 18673 ;; Hardware stack levels required when called:    3
 18674 ;; This function calls:
 18675 ;;		_setDimmerReClock
 18676 ;; This function is called by:
 18677 ;;		_ISR
 18678 ;; This function uses a non-reentrant model
 18679 ;;
 18680                           
 18681                           
 18682                           ;psect for function _IOC_ISR
 18683  1D7B                     _IOC_ISR:	
 18684                           
 18685                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18686                           
 18687                           ;incstack = 0
 18688                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18689  1D7B  1D8B               	btfss	11,3	;volatile
 18690  1D7C  0008               	return
 18691  1D7D  1C0B               	btfss	11,0	;volatile
 18692  1D7E  0008               	return
 18693  1D7F  0027               	movlb	7	; select bank7
 18694  1D80  1D16               	btfss	22,2	;volatile
 18695  1D81  0008               	return
 18696                           
 18697                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18698  1D82  1116               	bcf	22,2	;volatile
 18699                           
 18700                           ;MCU_B1.c: 403: IOCIF = 0;
 18701  1D83  100B               	bcf	11,0	;volatile
 18702                           
 18703                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18704  1D84  0021               	movlb	1	; select bank1
 18705  1D85  1C20               	btfss	_myMain^(0+128),0
 18706  1D86  0008               	return
 18707                           
 18708                           ;MCU_B1.c: 407: setDimmerReClock();
 18709  1D87  319C  2424         	fcall	_setDimmerReClock
 18710  1D89  0008               	return
 18711  1D8A                     __end_of_IOC_ISR:	
 18712                           
 18713                           	psect	text133
 18714  1C24                     __ptext133:	
 18715 ;; *************** function _setDimmerReClock *****************
 18716 ;; Defined at:
 18717 ;;		line 243 in file "../src/MCU_B1.c"
 18718 ;; Parameters:    Size  Location     Type
 18719 ;;		None
 18720 ;; Auto vars:     Size  Location     Type
 18721 ;;		None
 18722 ;; Return value:  Size  Location     Type
 18723 ;;		None               void
 18724 ;; Registers used:
 18725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18726 ;; Tracked objects:
 18727 ;;		On entry : 0/0
 18728 ;;		On exit  : 0/0
 18729 ;;		Unchanged: 0/0
 18730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;Total ram usage:        0 bytes
 18736 ;; Hardware stack levels used:    1
 18737 ;; Hardware stack levels required when called:    2
 18738 ;; This function calls:
 18739 ;;		_setDimmerLights_IntrIOC_GO
 18740 ;; This function is called by:
 18741 ;;		_IOC_ISR
 18742 ;; This function uses a non-reentrant model
 18743 ;;
 18744                           
 18745                           
 18746                           ;psect for function _setDimmerReClock
 18747  1C24                     _setDimmerReClock:	
 18748                           
 18749                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18750                           
 18751                           ;incstack = 0
 18752                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18753  1C24  3001               	movlw	1
 18754  1C25  3192  229E         	fcall	_setDimmerLights_IntrIOC_GO
 18755  1C27  0008               	return
 18756  1C28                     __end_of_setDimmerReClock:	
 18757                           
 18758                           	psect	text134
 18759  129E                     __ptext134:	
 18760 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18761 ;; Defined at:
 18762 ;;		line 28 in file "../src/Dimmer_B1.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;  lights          1    wreg     unsigned char 
 18765 ;; Auto vars:     Size  Location     Type
 18766 ;;  lights          1    2[COMMON] unsigned char 
 18767 ;; Return value:  Size  Location     Type
 18768 ;;		None               void
 18769 ;; Registers used:
 18770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18780 ;;Total ram usage:        1 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; Hardware stack levels required when called:    1
 18783 ;; This function calls:
 18784 ;;		_DimmerIntrIOCPointSelect
 18785 ;; This function is called by:
 18786 ;;		_setDimmerReClock
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           
 18791                           ;psect for function _setDimmerLights_IntrIOC_GO
 18792  129E                     _setDimmerLights_IntrIOC_GO:	
 18793                           
 18794                           ;incstack = 0
 18795                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18796                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18797  129E  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18798                           
 18799                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18800  129F  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18801  12A0  319C  24BE  3192   	fcall	_DimmerIntrIOCPointSelect
 18802                           
 18803                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18804  12A3  0021               	movlb	1	; select bank1
 18805  12A4  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18806  12A5  3E02               	addlw	2
 18807  12A6  0086               	movwf	6
 18808  12A7  3001               	movlw	1	; select bank2/3
 18809  12A8  0087               	movwf	7
 18810  12A9  1901               	btfsc	1,2
 18811  12AA  0008               	return
 18812  12AB  0020               	movlb	0	; select bank0
 18813  12AC  1D0D               	btfss	13,2	;volatile
 18814  12AD  0008               	return
 18815                           
 18816                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18817  12AE  0021               	movlb	1	; select bank1
 18818  12AF  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18819  12B0  3E02               	addlw	2
 18820  12B1  0086               	movwf	6
 18821  12B2  3001               	movlw	1	; select bank2/3
 18822  12B3  0087               	movwf	7
 18823  12B4  1501               	bsf	1,2
 18824                           
 18825                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18826  12B5  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18827  12B6  0086               	movwf	6
 18828  12B7  3001               	movlw	1	; select bank2/3
 18829  12B8  0087               	movwf	7
 18830  12B9  1401               	bsf	1,0
 18831                           
 18832                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18833  12BA  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18834  12BB  0086               	movwf	6
 18835  12BC  3001               	movlw	1	; select bank2/3
 18836  12BD  0087               	movwf	7
 18837  12BE  1481               	bsf	1,1
 18838                           
 18839                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18840  12BF  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18841                           
 18842                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18843  12C0  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18844  12C1  0086               	movwf	6
 18845  12C2  3001               	movlw	1	; select bank2/3
 18846  12C3  0087               	movwf	7
 18847  12C4  1D01               	btfss	1,2
 18848  12C5  0008               	return
 18849                           
 18850                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18851  12C6  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18852  12C7  0086               	movwf	6
 18853  12C8  3001               	movlw	1	; select bank2/3
 18854  12C9  0087               	movwf	7
 18855  12CA  1401               	bsf	1,0
 18856                           
 18857                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18858  12CB  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18859  12CC  3A01               	xorlw	1
 18860  12CD  1D03               	skipz
 18861  12CE  0008               	return
 18862                           
 18863                           ;Dimmer_B1.c: 56: RB1 = 1;
 18864  12CF  0020               	movlb	0	; select bank0
 18865  12D0  148D               	bsf	13,1	;volatile
 18866  12D1  0008               	return
 18867  12D2                     __end_of_setDimmerLights_IntrIOC_GO:	
 18868                           
 18869                           	psect	text135
 18870  1CBE                     __ptext135:	
 18871 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18872 ;; Defined at:
 18873 ;;		line 8 in file "../src/Dimmer_B1.c"
 18874 ;; Parameters:    Size  Location     Type
 18875 ;;  lights          1    wreg     unsigned char 
 18876 ;; Auto vars:     Size  Location     Type
 18877 ;;  lights          1    1[COMMON] unsigned char 
 18878 ;; Return value:  Size  Location     Type
 18879 ;;		None               void
 18880 ;; Registers used:
 18881 ;;		wreg
 18882 ;; Tracked objects:
 18883 ;;		On entry : 0/0
 18884 ;;		On exit  : 0/0
 18885 ;;		Unchanged: 0/0
 18886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;Total ram usage:        2 bytes
 18892 ;; Hardware stack levels used:    1
 18893 ;; This function calls:
 18894 ;;		Nothing
 18895 ;; This function is called by:
 18896 ;;		_setDimmerLights_IntrIOC_GO
 18897 ;; This function uses a non-reentrant model
 18898 ;;
 18899                           
 18900                           
 18901                           ;psect for function _DimmerIntrIOCPointSelect
 18902  1CBE                     _DimmerIntrIOCPointSelect:	
 18903                           
 18904                           ;incstack = 0
 18905                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18906                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18907  1CBE  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18908                           
 18909                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18910  1CBF  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18911  1CC0  3A01               	xorlw	1
 18912  1CC1  1D03               	skipz
 18913  1CC2  0008               	return
 18914                           
 18915                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18916  1CC3  3053               	movlw	_DimmerLights1& (0+255)
 18917  1CC4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18918  1CC5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18919  1CC6  0021               	movlb	1	; select bank1
 18920  1CC7  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18921  1CC8  0008               	return
 18922  1CC9                     __end_of_DimmerIntrIOCPointSelect:	
 18923  007E                     btemp	set	126	;btemp
 18924  007E                     pic14e$flags	set	126
 18925  007E                     wtemp	set	126
 18926  007E                     wtemp0	set	126
 18927  0080                     wtemp1	set	128
 18928  0082                     wtemp2	set	130
 18929  0084                     wtemp3	set	132
 18930  0086                     wtemp4	set	134
 18931  0088                     wtemp5	set	136
 18932  007F                     wtemp6	set	127
 18933  007E                     ttemp	set	126
 18934  007E                     ttemp0	set	126
 18935  0081                     ttemp1	set	129
 18936  0084                     ttemp2	set	132
 18937  0087                     ttemp3	set	135
 18938  007F                     ttemp4	set	127
 18939  007E                     ltemp	set	126
 18940  007E                     ltemp0	set	126
 18941  0082                     ltemp1	set	130
 18942  0086                     ltemp2	set	134
 18943  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127316
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7770
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7770
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     201
                                              4 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45365
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45365
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35279
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   34970
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 19 13:53:21 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 17D8  
                                      l94 1513                                        l86 17EC  
                                      l95 150F                                        l96 14FD  
                                      l98 150D                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10C9                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CDF  
                  __end_of_setDelayOff_GO 16FB                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1606  
                    _setDimmerLights_Line 1D6D                              ___ftadd@sign 004B  
                                     l231 0AA4                                       l304 1F0B  
                                     l305 1F0D                      _setDimmerLights_SwOn 0800  
                                     l348 113C                                       l730 1F62  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1F18                     _Buzzer_Initialization 1C12  
                         __end_of_ADC_Set 1C66                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 1656  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 10C9  
                   _setDimmerLights_AdjOn 1372                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D8A                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l2101 1302  
                                    l2040 0D00                                      l1209 1204  
                                    l1218 1560                                      l2050 0CDC  
                                    l2115 0A06                                      l2052 0CF1  
                                    l2044 0CC3                                      l1421 1281  
                                    l1422 129C                                      l2127 147E  
                                    l1426 1298                  ?_DimmerLightsPointSelect 0070  
                                    l1195 1336                                      l2079 1E4A  
                                    l2415 0357                                      l1456 0707  
                                    l1720 0FFC                                      l2417 0230  
                                    l1395 1452                                      l1564 01E7  
                         __end_of_IOC_Set 1D53                                      l1725 0FF6  
                                    l1574 01C3                                      l1566 0077  
                                    l1575 01C1                                      l1567 0073  
                                    l1568 006E                                      l2395 1EC3  
                                    l2591 106F                                      l2752 0A3A  
                                    l2781 04F9                                      l2758 0A51  
                                    l8016 108F                                      l8032 0489  
                                    l8104 0ED4                                      l8050 04B2  
                                    l8060 04D4                                      l8028 0482  
                                    l8140 071F                     _setDimmerLights_SwOff 1568  
                                    l8310 1748                                      l8302 1737  
                                    l8070 04F5                                      l8062 04D8  
                                    l8038 0498                                      l8126 0F2E  
                                    l8118 0F15                                      l9006 11EC  
                                    l9110 0C7A                                      l8056 04C5  
                                    l8232 0E03                                      l8224 0DE9  
                                    l8216 0DCE                                      l9104 0C6F  
                                    l8306 1740                                      l8074 050B  
                                    l8058 04CF                                      l8226 0DF2  
                                    l8218 0DDC                                      l9050 1DE6  
                                    l8170 078C                                      l8162 0778  
                                    l8146 0735                                      l8252 11AF  
                                    l8068 04EB                                      l8228 0DF5  
                                    l9300 11B7                                      l8406 159D  
                                    l8078 051D                                      l9302 11D9  
                                    l8174 0794                                      l8158 0770  
                                    l9134 1DF7                                      l9152 07E1  
                                    l8360 16E6                                      l8088 0538  
                                    l9162 07F1                                      l9154 07E4  
                                    l8354 16DA                                      l8098 0EBE  
                                    l8426 0883                                      l9402 1521  
                                    l9074 0C29                                      l8620 1F24  
                                    l9164 07F4                                      l8284 1711  
                                    l8612 146D                                      l9084 0C3A  
                                    l9158 07EA                                      l8294 1719  
                                    l8278 1706                                      l8358 16E0  
                                    l8710 13F7                                      l8198 0D9E  
                                    l9270 1650                                      l9262 162F  
                                    l8624 1F2A                                      l9168 07FA  
                                    l8296 1725                                      l8560 0989  
                                    l8704 13EE                                      l9264 1635  
                                    l9408 1536                                      l8536 1F94  
                                    l8640 1125                                      l8392 082B  
                                    l9096 0C50                                      l8618 1F21  
                                    l8538 1F9A                                      l8634 111C  
                                    l8810 0AC0                                      l8802 0AB3  
                                    l8394 0831                                      l9522 0CAA  
                                    l8556 0983                                      l8660 1EE0  
                                    l9284 1CE7                                      l9700 13BD  
                                    l8636 111F                                      l8804 0AB7  
                                    l9612 025E                                      l9452 0F6C  
                   _myMain_Initialization 1D8A                                      l8558 0954  
                                    l8718 140D                                      l9710 13D8  
                                    l8822 0B9A                                      l8830 0BA6  
                                    l8806 0ABA                                      l8750 09A9  
                                    l9622 0290                                      l9390 1FD3  
                                    l8840 0BB9                                      l8824 0B9D  
                                    l8488 1218                                      l9384 1FCB  
                                    l7970 0A17                                      l9706 13CF  
                                    l9298 11D4                                      l8594 15EA  
                                    l8754 09CE                                      l8762 09EB  
                                    l9554 0CE2                                      l9538 0CC9  
                                    l9482 0FCB                                      l9386 1FCE  
                                    l9724 14E7                                      l8676 127C  
                                    l7980 0A3F                                      l7972 0A21  
                                    l8860 0BD1                                      l8844 0BBF  
                                    l8828 0BA3                                      l8772 0A70  
                                    l8756 09E3                                      l9636 02CE  
                                    l9484 0FCD                                      l8686 1293  
                                    l8678 1285                                      l7982 0A47  
                                    l7974 0A26                                      l7966 0A10  
                                    l8862 0BEA                                      l8838 0BB6  
                                    l8774 0A73                                      l8598 15F9  
                                    l8758 09E7                                      l9582 1ECE  
                                    l9646 0300                                      l9494 0FE2  
                                    l8928 1686                                      l8792 0A8B  
                                    l9672 0353                                      l9496 0FE3  
                                    _CFGS 0CAE                                      l8882 114D  
                                    l8890 10AF                                      l7994 1E00  
                                    l8938 169C                                      l8778 0A79  
                                    l9578 1EC8                                      l9914 0D7F  
                                    l8884 1158                                      l8892 10B2  
                                    l8948 1767                                      l8796 0AAA  
                                    l9596 021B                                      l7998 1E06  
                                    l9766 1F64                                      l9678 1069  
                                    l8798 0AAD                                      l8896 10B8  
                                    l9928 14C1                              __CFG_WDTE$ON 0000  
                                    l9698 13B1                                      l9946 1432  
                                    l9796 05C2                                      l9974 0055  
                                    l9894 0D4A                                      l9886 0D25  
                                    l9992 0076                                      l9898 0D52  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8125 0A58  
                                    u8055 0A1C                                      u8075 0A35  
                                    u9045 1EA1                                      u8325 04D9  
                                    u9135 095F                                      u8095 0A42  
                                    u8265 04B3                                      u8425 0EE6  
                                    u8505 0741                                      u8355 04EC  
                                    u8435 0EF6                                      u8515 0751  
                                    u8445 0F16                                      u8295 04C6  
                                    u8455 0F25                                      u8535 0779  
                                    u8465 0F2F                                      u8625 0DA5  
                                    u8545 077F                                      u8805 1726  
                                    u8815 1730                                      u8735 119B  
                                    u8655 0DCF                                      u8575 0795  
                                    u8825 1738                                      u8585 079B  
                                    u8685 0DEA                                      u8785 171C  
                                    u9595 1142                                      _LWLO 0CAD  
                                    u8990 0843                                      u8995 0841  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0125  
                                    _Temp 00D7                                      _main 0892  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 094A  
                         __end_of_RF_Main 1C1E                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1CF5  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1C24                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1492  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2172 0023  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1EE7  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1ED1  
                  _getDimmerLights_Status 1DB9                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 000A                          __end_of_LED_Main 1C44  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1CAA  
                   ?_getDimmerLights_Line 0070                                     l10102 01D6  
                                   l10014 00CC                                     l10040 0155  
                                   l10008 009A                                     l10130 0647  
                                   l10050 0181                                     l10140 0665  
                                   l10150 0668                                     l10046 0162  
                                   l10054 018D                                     l10152 0699  
                                   l10136 0656                                     l10064 01A3  
                                   l10170 06E0                                     l10172 06EA  
                                   l10148 0691                                     l10244 08B6  
                                   l10166 06D8                                     l10168 06AF  
                                   l10248 08C1                                     l10178 06FD  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 174F  
                         __end_of___ftadd 0550                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1C8E                           __end_of___ftmul 07BC  
                                   u11135 0D38                                     u10185 11C0  
                                   u11075 132D                                     u11235 14B8  
                         ___awdiv@divisor 0020                                     u10365 0FB3  
                                   u11245 14C7                                     _T1CON 0018  
                                   u11425 0098                                     u10385 0FD3  
                                   u11185 0D6C                                     u11435 00CA  
                         __end_of___fttol 0E0C                                     u10805 1070  
                                   u11525 0194                                     u11445 010E  
                                   u10485 0CBD                                     u11285 144A  
                                   u10815 1075                                     u11650 0697  
                                   u10915 14DD                                     u10845 13B4  
                                   u11655 0673                                     u11680 06DE  
                                   u10865 13BE                                     u10875 13C8  
                                   u11685 06BA                                     u10885 13D0  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 13DF  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1EA7                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12D2                _setDimmerLights_IntrIOC_GO 129E  
                        __end_of_TMR1_ISR 1112                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 09A8  
              _setDimmerLights_ErrorClose 094A                          __end_of_TMR1_Set 1D5F  
                                   _getAD 1FC0                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E45               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D47  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CBE  
           __end_of_setLED_Initialization 1E21                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 0839  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0B31  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 08ED                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1C48                        ??_setMemory_Modify 0020  
                          _Exception_Main 062C                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 16A8  
                    _setSw_Initialization 1DA9                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 09A8                            _setMemory_Data 1D23  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CDF  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08ED                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1C7D                                 ??_WDT_Set 0020  
                        __end_of___awtoft 10A6                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0A68                  _getMain_All_Error_Status 126B  
                                  _IOCBF2 1CB2                                    i1l6812 0401  
                                  i1l6820 041E                                    i1l6830 0453  
                                  i1l6814 0407                                    i1l6826 043D  
                                  i1l6818 0418                                    i1l6782 038A  
                                  i1l6794 03BA                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  u727_25 110C                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EE7  
                                  _WDTCON 0097                      Exception_Main@i_3438 00ED  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1EBC                                    _Dimmer 00C6  
                                  _DlySw1 0164                __end_of_Mcu_Initialization 1E33  
                     __end_of_Buzzer_Main 151A                                    _Memory 01BE  
                                  _Timer1 0120                                    ___bmul 1DFD  
                  __end_of_Exception_Main 0708                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 1066  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 13DF  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D2F  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 17A7                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1C18          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 045A               _setDimmerLights_IntrControl 0360  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E7E               getMain_Lights_Count@status1 0021  
                   __end_of_SwPointSelect 1D0B              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1EBC  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B96  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 003D  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5049 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1FE0                             __end_of_getAD 1FE0  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1C3C  
                         _getSw_KeyStatus 1DEC                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D3B  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1CB4  
              __end_of_set_TimeoutCleared 1C4D                  __end_of_setDimmerReClock 1C28  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D5F  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1C1E                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14D0  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1C24  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C34                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0892                            _getDelayOff_GO 1D99  
                     _CC2500_WriteCommand 1F18                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 000B  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0D04  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1C6D  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1C5F                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1492                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1D00  
                      _setRFSW_AdjControl 1454                    __end_of_setProductData 1D6D  
                                 _IOC_ISR 1D7B                                   _IOC_Set 1D47  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1306  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F32  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C1B  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CEA           __end_of_setControl_Lights_Table 0A07  
                         setRF_Main@error 016F                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0ACC  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1D17                           __size_of_IO_Set 0018  
                       __end_of_getBuz_GO 1DDB                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1DA9  
          __end_of_getDimmerLights_Status 1DCA                         __end_of_getRxData 0C84  
                 __end_of_getSw_KeyStatus 1DFD                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CC9                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16FB                                   ___ftadd 045A  
                                 ___ftdiv 0EA7                                   ___ftneg 1C85  
                         __size_of___wmul 001E                                   ___ftmul 0708  
                                 ___fttol 0D85                       __end_of_Switch_Main 1C6D  
                                 ___lwdiv 13A8                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1DDB                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 1418                                   __ptext2 1D8A  
                                 __ptext3 1492                                   __ptext4 0D04  
                                 __ptext5 1FC0                                   __ptext6 1E33  
                                 __ptext7 0002                                   __ptext8 1C21  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0024                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1CA0                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 133C                 __end_of_Flash_Memory_Read 1F4C  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0C84  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1C38  
                       _DimmerLights_Main 1F4C            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1C53                __end_of_CC2500_ClearRXFIFO 1C2C  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1C30  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1D17                       _DelayOffPointSelect 1CC9  
                                 clrloop0 1C5A            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1CA0                      end_of_initialization 003D  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 115D  
                           _DelayTime_1us 1137                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 120B                                   init_ram 1C53  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C54  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1112  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1E0F  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B96                             _CC2500_TxData 0A68  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 151A  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C8E                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F68                        _Mcu_Initialization 1E21  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1454  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D23                   __end_of_setPercentValue 0B31  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 1187  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 174F                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1137                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1EFF                      _setRF_Initialization 1CF5  
                      _setMemory_LoopSave 1E6B                               _Switch_Main 1C66  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CD4                   __end_of_getRF_KeyStatus 1DEC  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1EA7                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1E0F                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CBE                            __end_of___wmul 1084  
                       getSw_KeyStatus@sw 0070                         __size_of_TMR1_ISR 0025  
           __size_of_getDimmerLights_Line 000B                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 1418             __size_of_setDimmerLights_Line 000E  
           __size_of_setDimmerLights_SwOn 0039                            __end_of_setBuz 1800  
                    _CC2500_FrequencyCabr 1D0B                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15B7  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 120B  
                         ?_LedPointSelect 0070                                 _Load_Main 0041  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1C75  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1FC0           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1C48  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1C21                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 000B  
                               _Tx_Length 00D3                               __pdataBANK4 0220  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 11B1  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 129E                          _CC2500_SIDLEMode 1C30  
              __size_of_DimmerLights_Main 001C                 __end_of_setRF_DimmerValue 123A  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1E58  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK2 016D  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0153  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F84  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00ED               __size_of_LED_Initialization 0004  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0080  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1C11  
                               _getBuz_GO 1DCA       __end_of_Flash_Memory_Initialization 062C  
             _Flash_Memory_Initialization 0550                                  ?___awdiv 0020  
                               __ptext100 16A8                                 __ptext101 1D5F  
                               __ptext110 1C4D                                 __ptext102 1187  
                               __ptext111 1CC9                                 __ptext103 1DFD  
                               __ptext120 1C2C                                 __ptext112 1EA7  
                               __ptext104 1D99                                 __ptext121 1C28  
                               __ptext113 1C30                                 __ptext105 1DB9  
                               __ptext130 0360                                 __ptext122 1F18  
                               __ptext114 07BC                                 __ptext106 1CD4  
                               __ptext131 1CA0                                 __ptext123 1C48  
                               __ptext115 115D                                 __ptext107 17A7  
                               __ptext132 1D7B                                 __ptext124 1E92  
                               __ptext116 1FA1                                 __ptext108 16FB  
                               __ptext133 1C24                                 __ptext125 1EFF  
                               __ptext117 10A6                                 __ptext109 1C34  
                                ?___ftadd 0041                                 __ptext134 129E  
                               __ptext126 14D0                                 __ptext118 1D0B  
                               __ptext135 1CBE                                 __ptext127 1C12  
                               __ptext119 1137                                 __ptext129 10ED  
                               _getRxData 0C05                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1606  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1C15  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1ED1                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 10ED             __end_of_setDimmerLights_AdjOn 13A8  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D4  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 15B7              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D99                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D00                       __end_of_setLED_Main 1372  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CD  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1C21  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1C40                           SwPointSelect@sw 0021  
                               clear_ram0 1C59                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 1418                                 _setTxData 0E0C  
     __end_of_DimmerLights_Initialization 1CB4               _DimmerLights_Initialization 1CAA  
                      _CC2500_ClearRXFIFO 1C28                        _CC2500_ClearTXFIFO 1C2C  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E92                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11DC                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10ED  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1D53  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1E58  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1F32  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1E33  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016D                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D3B  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1306  
                   _DlyOff_Initialization 1C4D                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1C44  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D85                        __end_of_getLoad_OK 1C75  
                   _Switch_Initialization 1C97         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 14D0                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1EFF                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D2  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3424 0021             _getMain_All_Error_Status$3425 0023  
                __end_of_getDimmer_LoadGO 1C7D                       _Load_Initialization 1C15  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1084                          ??_LedPointSelect 0020  
                                ___ftpack 0A07             __size_of_getMain_Lights_Count 000C  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 000A  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 133C  
              __end_of_setRF_DimmerLights 0892            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1C85  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002B  
                         ___lwdiv@counter 0025                                  __ptext10 1C1E  
                                __ptext11 1C11                                  __ptext20 1EBC  
                                __ptext12 1C66                                  __ptext21 1C1B  
                                __ptext13 01ED                                  __ptext30 120B  
                                __ptext22 0C84                                  __ptext14 1E7E  
                                __ptext31 10C9                                  __ptext23 0C05  
                                __ptext15 1372                                  __ptext40 1112  
                                __ptext32 0B31                                  __ptext24 12D2  
                                __ptext16 1DEC                                  __ptext41 1F84  
                                __ptext33 0708                                  __ptext25 1E6B  
                                __ptext17 1D00                                  __ptext50 1C5F  
                                __ptext42 1C18                                  __ptext34 1E58  
                                __ptext26 09A8                                  __ptext18 1C97  
                                __ptext51 0041                                  __ptext43 1CF5  
                                __ptext35 1DDB                                  __ptext27 15B7  
                                __ptext19 1DA9                                  __ptext60 1C40  
                                __ptext52 1D3B                                  __ptext44 1E21  
                                __ptext36 1DCA                                  __ptext28 0800  
                                __ptext61 133C                                  __ptext53 1C7D  
                                __ptext45 1CEA                                  __ptext37 1E45  
                                __ptext29 1454                                  __ptext70 1C8E  
                                __ptext62 1C3C                                  __ptext54 1C75  
                                __ptext46 1D53                                  __ptext38 0A68  
                                __ptext71 1F32                                  __ptext63 1E0F  
                                __ptext55 11B1                                  __ptext47 1EE7  
                                __ptext39 0B96                                  __ptext80 0ACC  
                                __ptext72 062C                                  __ptext64 1306  
                                __ptext56 1066                                  __ptext48 1D47  
                                __ptext81 0D85                                  __ptext73 1CDF  
                                __ptext65 151A                                  __ptext57 13A8  
                                __ptext49 1C44                                  __ptext90 1ED1  
                                __ptext82 1C85                                  __ptext74 1F4C  
                                __ptext66 1D2F                                  __ptext58 1C15  
                                __ptext91 1C6D                                  __ptext83 0EA7  
                                __ptext75 1606                                  __ptext67 0550  
                                __ptext59 1F68                                  __ptext92 1CB4  
                                __ptext84 045A                                  __ptext76 174F  
                                __ptext68 1D23                                  __ptext93 126B  
                                __ptext85 1084                                  __ptext77 1656  
                                __ptext69 11DC                                  __ptext94 1CAA  
                                __ptext86 0A07                                  __ptext78 0E0C  
                                __ptext95 123A                                  __ptext87 13DF  
                                __ptext79 0839                                  __ptext96 1C38  
                                __ptext88 1D17                                  __ptext97 08ED  
                                __ptext89 1D6D                                  __ptext98 094A  
                                __ptext99 1568                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CEA  
            __end_of_setDimmerLights_Main 1656              __end_of_setDimmerLights_Line 1D7B  
            __end_of_setDimmerLights_SwOn 0839                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E7E                  __end_of_CC2500_SIDLEMode 1C34  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1CD4  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 016E  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0024  
                         _CC2500_ReadByte 1F84                        _CC2500_InitPATable 1FA1  
                __end_of_setMemory_Modify 1E6B                        __end_of_setRF_Main 0D04  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 01EC                                  main@argv 01EE  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6017 0022  
                         _CC2500_PowerRST 07BC                  __size_of_getSw_KeyStatus 0011  
             __end_of_Flash_Memory_Modify 1568                         ??_getPercentValue 005C  
                             _setLog_Code 12D2               __end_of_Flash_Memory_Unlock 1C97  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 10A6  
                      __end_of_setSw_Main 0360                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 1187                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 11DC  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 126B   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 123A               __end_of_setDimmerLights_Adj 17A7  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 0013  
                       _RF_Initialization 1C18      __size_of_setDimmerLights_IntrControl 00FA  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1D2F  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00DC           __end_of_DelayOff_Initialization 1C38  
     __size_of_setDimmerLights_IntrIOC_GO 0034       __size_of_setDimmerLights_ErrorClose 005E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1C3C  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 16A8          __size_of_setControl_Lights_Table 005F  
                  __end_of_DelayTimejudge 11B1               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 115D                   __end_of_CC2500_ReadByte 1FA1  
            __end_of_setSw_Initialization 1DB9                           _Timeout_Counter 1E92  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1E45                __end_of_LED_Initialization 1C40  
          __end_of_setTemp_Initialization 1C12                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1C1B                     __end_of_CC2500_RxData 0C05  
                   __end_of_CC2500_TxData 0ACC                     _setLoad_AH_AL_Restore 1F68  
                 __end_of_CC2500_PowerRST 0800  
