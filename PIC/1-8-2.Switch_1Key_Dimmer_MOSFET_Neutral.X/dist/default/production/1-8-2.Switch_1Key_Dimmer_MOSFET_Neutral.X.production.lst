

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Jan 31 10:51:26 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0010                     	;# 
  2070  0011                     	;# 
  2071  0012                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  008C                     	;# 
  2082  008D                     	;# 
  2083  008E                     	;# 
  2084  0090                     	;# 
  2085  0091                     	;# 
  2086  0092                     	;# 
  2087  0095                     	;# 
  2088  0096                     	;# 
  2089  0097                     	;# 
  2090  0099                     	;# 
  2091  009A                     	;# 
  2092  009B                     	;# 
  2093  009B                     	;# 
  2094  009C                     	;# 
  2095  009D                     	;# 
  2096  009E                     	;# 
  2097  010C                     	;# 
  2098  010D                     	;# 
  2099  010E                     	;# 
  2100  0116                     	;# 
  2101  0117                     	;# 
  2102  011D                     	;# 
  2103  018C                     	;# 
  2104  018D                     	;# 
  2105  018E                     	;# 
  2106  0191                     	;# 
  2107  0191                     	;# 
  2108  0192                     	;# 
  2109  0193                     	;# 
  2110  0193                     	;# 
  2111  0194                     	;# 
  2112  0195                     	;# 
  2113  0196                     	;# 
  2114  0197                     	;# 
  2115  0199                     	;# 
  2116  019A                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019C                     	;# 
  2122  019C                     	;# 
  2123  019D                     	;# 
  2124  019E                     	;# 
  2125  019F                     	;# 
  2126  020D                     	;# 
  2127  0210                     	;# 
  2128  0211                     	;# 
  2129  0211                     	;# 
  2130  0212                     	;# 
  2131  0212                     	;# 
  2132  0213                     	;# 
  2133  0213                     	;# 
  2134  0214                     	;# 
  2135  0214                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0298                     	;# 
  2148  0298                     	;# 
  2149  0299                     	;# 
  2150  029A                     	;# 
  2151  0394                     	;# 
  2152  0395                     	;# 
  2153  0396                     	;# 
  2154  0FE4                     	;# 
  2155  0FE5                     	;# 
  2156  0FE6                     	;# 
  2157  0FE7                     	;# 
  2158  0FE8                     	;# 
  2159  0FE9                     	;# 
  2160  0FEA                     	;# 
  2161  0FEB                     	;# 
  2162  0FED                     	;# 
  2163  0FEE                     	;# 
  2164  0FEF                     	;# 
  2165                           
  2166                           	psect	idataBANK4
  2167  1DEA                     __pidataBANK4:	
  2168                           
  2169                           ;initializer for __product
  2170  1DEA  3463               	retlw	99
  2171  1DEB  3402               	retlw	2
  2172  1DEC  3400               	retlw	0
  2173  1DED  3400               	retlw	0
  2174  1DEE  3400               	retlw	0
  2175  1DEF  3400               	retlw	0
  2176  1DF0  3400               	retlw	0
  2177  1DF1  3400               	retlw	0
  2178  1DF2  3400               	retlw	0
  2179  1DF3  3400               	retlw	0
  2180  1DF4  3400               	retlw	0
  2181  1DF5  3400               	retlw	0
  2182  1DF6  34FF               	retlw	255
  2183  1DF7  34FF               	retlw	255
  2184  1DF8  34FF               	retlw	255
  2185  1DF9  3400               	retlw	0
  2186  1DFA  3400               	retlw	0
  2187  1DFB  3400               	retlw	0
  2188  1DFC  3400               	retlw	0
  2189  1DFD  3400               	retlw	0
  2190  1DFE  3400               	retlw	0
  2191  1DFF  3400               	retlw	0
  2192  1E00  3400               	retlw	0
  2193  1E01  3400               	retlw	0
  2194  1E02  3400               	retlw	0
  2195  1E03  3400               	retlw	0
  2196  1E04  3400               	retlw	0
  2197  1E05  3400               	retlw	0
  2198  1E06  3400               	retlw	0
  2199  1E07  3400               	retlw	0
  2200  1E08  3400               	retlw	0
  2201  1E09  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext
  2204  1800                     __pstringtext:	
  2205  1800                     _CC2500_registers_address:	
  2206  1800  3403               	retlw	3
  2207  1801  3416               	retlw	22
  2208  1802  3417               	retlw	23
  2209  1803  341E               	retlw	30
  2210  1804  341F               	retlw	31
  2211  1805  3420               	retlw	32
  2212  1806  342A               	retlw	42
  2213  1807  342B               	retlw	43
  2214  1808  340B               	retlw	11
  2215  1809  340C               	retlw	12
  2216  180A  340D               	retlw	13
  2217  180B  340E               	retlw	14
  2218  180C  340F               	retlw	15
  2219  180D  3410               	retlw	16
  2220  180E  3411               	retlw	17
  2221  180F  3412               	retlw	18
  2222  1810  3413               	retlw	19
  2223  1811  3414               	retlw	20
  2224  1812  340A               	retlw	10
  2225  1813  3415               	retlw	21
  2226  1814  3421               	retlw	33
  2227  1815  3422               	retlw	34
  2228  1816  3418               	retlw	24
  2229  1817  3419               	retlw	25
  2230  1818  341A               	retlw	26
  2231  1819  341B               	retlw	27
  2232  181A  341C               	retlw	28
  2233  181B  341D               	retlw	29
  2234  181C  3423               	retlw	35
  2235  181D  3424               	retlw	36
  2236  181E  3425               	retlw	37
  2237  181F  3426               	retlw	38
  2238  1820  3429               	retlw	41
  2239  1821  342C               	retlw	44
  2240  1822  342D               	retlw	45
  2241  1823  342E               	retlw	46
  2242  1824  3400               	retlw	0
  2243  1825  3401               	retlw	1
  2244  1826  3402               	retlw	2
  2245  1827  3407               	retlw	7
  2246  1828  3408               	retlw	8
  2247  1829  3409               	retlw	9
  2248  182A  3406               	retlw	6
  2249  182B  3404               	retlw	4
  2250  182C  3405               	retlw	5
  2251  182D  3427               	retlw	39
  2252  182E  3428               	retlw	40
  2253  182F                     __end_of_CC2500_registers_address:	
  2254  182F                     _CC2500_rfSettings:	
  2255  182F  3407               	retlw	7
  2256  1830  3407               	retlw	7
  2257  1831  3430               	retlw	48
  2258  1832  3487               	retlw	135
  2259  1833  346B               	retlw	107
  2260  1834  34F8               	retlw	248
  2261  1835  347F               	retlw	127
  2262  1836  343F               	retlw	63
  2263  1837  3409               	retlw	9
  2264  1838  3400               	retlw	0
  2265  1839  345C               	retlw	92
  2266  183A  34A7               	retlw	167
  2267  183B  3462               	retlw	98
  2268  183C  3486               	retlw	134
  2269  183D  3483               	retlw	131
  2270  183E  3403               	retlw	3
  2271  183F  3422               	retlw	34
  2272  1840  34F8               	retlw	248
  2273  1841  3400               	retlw	0
  2274  1842  3444               	retlw	68
  2275  1843  34B6               	retlw	182
  2276  1844  3410               	retlw	16
  2277  1845  3418               	retlw	24
  2278  1846  341D               	retlw	29
  2279  1847  341C               	retlw	28
  2280  1848  34C7               	retlw	199
  2281  1849  3400               	retlw	0
  2282  184A  34B2               	retlw	178
  2283  184B  34EA               	retlw	234
  2284  184C  340A               	retlw	10
  2285  184D  3400               	retlw	0
  2286  184E  3411               	retlw	17
  2287  184F  3459               	retlw	89
  2288  1850  3488               	retlw	136
  2289  1851  3431               	retlw	49
  2290  1852  340B               	retlw	11
  2291  1853  342F               	retlw	47
  2292  1854  342E               	retlw	46
  2293  1855  3406               	retlw	6
  2294  1856  3404               	retlw	4
  2295  1857  3405               	retlw	5
  2296  1858  3400               	retlw	0
  2297  1859  3430               	retlw	48
  2298  185A  34D3               	retlw	211
  2299  185B  3491               	retlw	145
  2300  185C  3441               	retlw	65
  2301  185D  3400               	retlw	0
  2302  185E                     __end_of_CC2500_rfSettings:	
  2303  185E                     _CC2500_patable_vaule:	
  2304  185E  34FE               	retlw	254
  2305  185F  34FE               	retlw	254
  2306  1860  34FE               	retlw	254
  2307  1861  34FE               	retlw	254
  2308  1862  34FE               	retlw	254
  2309  1863  34FE               	retlw	254
  2310  1864  34FE               	retlw	254
  2311  1865  34FE               	retlw	254
  2312  1866                     __end_of_CC2500_patable_vaule:	
  2313                           
  2314                           	psect	nvBANK1
  2315  00ED                     __pnvBANK1:	
  2316  00ED                     _product:	
  2317  00ED                     	ds	1
  2318  000C                     _PORTA	set	12
  2319  000D                     _PORTB	set	13
  2320  000E                     _PORTC	set	14
  2321  0018                     _T1CON	set	24
  2322  0017                     _TMR1H	set	23
  2323  0016                     _TMR1L	set	22
  2324  005F                     _GIE	set	95
  2325  005B                     _IOCIE	set	91
  2326  0058                     _IOCIF	set	88
  2327  005E                     _PEIE	set	94
  2328  0060                     _RA0	set	96
  2329  0063                     _RA3	set	99
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006C                     _RB4	set	108
  2338  006D                     _RB5	set	109
  2339  0070                     _RC0	set	112
  2340  0071                     _RC1	set	113
  2341  0072                     _RC2	set	114
  2342  0074                     _RC4	set	116
  2343  0075                     _RC5	set	117
  2344  0077                     _RC7	set	119
  2345  0088                     _TMR1IF	set	136
  2346  009D                     _ADCON0	set	157
  2347  009E                     _ADCON1	set	158
  2348  009C                     _ADRESH	set	156
  2349  009B                     _ADRESL	set	155
  2350  0099                     _OSCCON	set	153
  2351  008C                     _TRISA	set	140
  2352  008D                     _TRISB	set	141
  2353  008E                     _TRISC	set	142
  2354  0097                     _WDTCON	set	151
  2355  04E9                     _GO_nDONE	set	1257
  2356  0488                     _TMR1IE	set	1160
  2357  0117                     _FVRCON	set	279
  2358  010C                     _LATA	set	268
  2359  010D                     _LATB	set	269
  2360  010E                     _LATC	set	270
  2361  018C                     _ANSELA	set	396
  2362  018D                     _ANSELB	set	397
  2363  018E                     _ANSELC	set	398
  2364  0192                     _PMADRH	set	402
  2365  0191                     _PMADRL	set	401
  2366  0196                     _PMCON2	set	406
  2367  0194                     _PMDATH	set	404
  2368  0193                     _PMDATL	set	403
  2369  0CAE                     _CFGS	set	3246
  2370  0CAC                     _FREE	set	3244
  2371  0CAD                     _LWLO	set	3245
  2372  0CA8                     _RD	set	3240
  2373  0CA9                     _WR	set	3241
  2374  0CAA                     _WREN	set	3242
  2375  020D                     _WPUB	set	525
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0022                     start_initialization:	
  2385  0022                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITBANK0
  2388  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0023  30A0               	movlw	low __pbssBANK1
  2392  0024  0084               	movwf	4
  2393  0025  3000               	movlw	high __pbssBANK1
  2394  0026  0085               	movwf	5
  2395  0027  3045               	movlw	69
  2396  0028  3199  2162  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  002B  3020               	movlw	low __pbssBANK2
  2400  002C  0084               	movwf	4
  2401  002D  3001               	movlw	high __pbssBANK2
  2402  002E  0085               	movwf	5
  2403  002F  3050               	movlw	80
  2404  0030  3199  2162  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0033  30A0               	movlw	low __pbssBANK3
  2408  0034  0084               	movwf	4
  2409  0035  3001               	movlw	high __pbssBANK3
  2410  0036  0085               	movwf	5
  2411  0037  304E               	movlw	78
  2412  0038  3199  2162  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK4
  2415  003B  3020               	movlw	low __pbssBANK4
  2416  003C  0084               	movwf	4
  2417  003D  3002               	movlw	high __pbssBANK4
  2418  003E  0085               	movwf	5
  2419  003F  3025               	movlw	37
  2420  0040  3199  2162  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  0043  30EA               	movlw	low __pidataBANK4
  2424  0044  0084               	movwf	4
  2425  0045  309D               	movlw	(high __pidataBANK4)| (0+128)
  2426  0046  0085               	movwf	5
  2427  0047  3045               	movlw	low __pdataBANK4
  2428  0048  0086               	movwf	6
  2429  0049  3002               	movlw	high __pdataBANK4
  2430  004A  0087               	movwf	7
  2431  004B  3020               	movlw	32
  2432  004C  3199  215C         	fcall	init_ram
  2433  004E                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  004E                     __end_of__initialization:	
  2437  004E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  004F  0020               	movlb	0
  2439  0050  3195  2D51         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssBANK0
  2442  0370                     __pbitbssBANK0:	
  2443  0370                     _Receive_OK:	
  2444  0370                     	ds	1
  2445  0371                     _Transceive_OK:	
  2446  0371                     	ds	1
  2447                           
  2448                           	psect	bssBANK1
  2449  00A0                     __pbssBANK1:	
  2450  00A0                     _RF1:	
  2451  00A0                     	ds	14
  2452  00AE                     _DimmerIntr1:	
  2453  00AE                     	ds	12
  2454  00BA                     _DimmerIntr2:	
  2455  00BA                     	ds	12
  2456  00C6                     _Timer1:	
  2457  00C6                     	ds	3
  2458  00C9                     _WDT:	
  2459  00C9                     	ds	2
  2460  00CB                     _CRC:	
  2461  00CB                     	ds	1
  2462  00CC                     _Cmd:	
  2463  00CC                     	ds	1
  2464  00CD                     _DelayOff:	
  2465  00CD                     	ds	1
  2466  00CE                     _DimmerIntr:	
  2467  00CE                     	ds	1
  2468  00CF                     _DimmerLights:	
  2469  00CF                     	ds	1
  2470  00D0                     _LED:	
  2471  00D0                     	ds	1
  2472  00D1                     _Light:	
  2473  00D1                     	ds	1
  2474  00D2                     _RSSI:	
  2475  00D2                     	ds	1
  2476  00D3                     _Rx_Length:	
  2477  00D3                     	ds	1
  2478  00D4                     _SPI0Buffer:	
  2479  00D4                     	ds	1
  2480  00D5                     _Sw:	
  2481  00D5                     	ds	1
  2482  00D6                     _SwDetect:	
  2483  00D6                     	ds	1
  2484  00D7                     _Tx_Length:	
  2485  00D7                     	ds	1
  2486  00D8                     _r_address:	
  2487  00D8                     	ds	1
  2488  00D9                     _r_data:	
  2489  00D9                     	ds	1
  2490  00DA                     _s_data:	
  2491  00DA                     	ds	1
  2492  00DB                     _Temp:	
  2493  00DB                     	ds	10
  2494                           
  2495                           	psect	bssBANK2
  2496  0120                     __pbssBANK2:	
  2497  0120                     _myMain:	
  2498  0120                     	ds	13
  2499  012D                     _Buz1:	
  2500  012D                     	ds	12
  2501  0139                     _Dimmer:	
  2502  0139                     	ds	5
  2503  013E                     _RF_Count:	
  2504  013E                     	ds	2
  2505  0140                     _Load:	
  2506  0140                     	ds	40
  2507  0168                     _DimmerLights1:	
  2508  0168                     	ds	8
  2509                           
  2510                           	psect	bssBANK3
  2511  01A0                     __pbssBANK3:	
  2512  01A0                     _RF_Data:	
  2513  01A0                     	ds	30
  2514  01BE                     _Sw1:	
  2515  01BE                     	ds	9
  2516  01C7                     _Sw2:	
  2517  01C7                     	ds	9
  2518  01D0                     _DimmerLights2:	
  2519  01D0                     	ds	8
  2520  01D8                     _DlySw1:	
  2521  01D8                     	ds	5
  2522  01DD                     _DlySw2:	
  2523  01DD                     	ds	5
  2524  01E2                     _VarErrLED:	
  2525  01E2                     	ds	4
  2526  01E6                     _VarLED1:	
  2527  01E6                     	ds	4
  2528  01EA                     _VarLED2:	
  2529  01EA                     	ds	4
  2530                           
  2531                           	psect	bssBANK4
  2532  0220                     __pbssBANK4:	
  2533  0220                     _Memory:	
  2534  0220                     	ds	37
  2535                           
  2536                           	psect	dataBANK4
  2537  0245                     __pdataBANK4:	
  2538  0245                     __product:	
  2539  0245                     	ds	32
  2540                           
  2541                           	psect	clrtext
  2542  1962                     clear_ram0:	
  2543                           ;	Called with FSR0 containing the base address, and
  2544                           ;	WREG with the size to clear
  2545                           
  2546  1962  0064               	clrwdt	;clear the watchdog before getting into this loop
  2547  1963                     clrloop0:	
  2548  1963  0180               	clrf	0	;clear RAM location pointed to by FSR
  2549  1964  3101               	addfsr 0,1
  2550  1965  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2551  1966  2963               	goto	clrloop0	;have we reached the end yet?
  2552  1967  3400               	retlw	0	;all done for this memory range, return
  2553                           
  2554                           	psect	inittext
  2555  195C                     init_ram:	
  2556  195C  00FE               	movwf	126
  2557  195D                     initloop:	
  2558  195D  0012               	moviw fsr0++
  2559  195E  001E               	movwi fsr1++
  2560  195F  0BFE               	decfsz	126,f
  2561  1960  295D               	goto	initloop
  2562  1961  3400               	retlw	0
  2563                           
  2564                           	psect	cstackBANK4
  2565  0265                     __pcstackBANK4:	
  2566  0265                     ?_main:	
  2567  0265                     main@argc:	
  2568                           ; 2 bytes @ 0x0
  2569                           
  2570                           
  2571                           ; 2 bytes @ 0x0
  2572  0265                     	ds	2
  2573  0267                     main@argv:	
  2574                           
  2575                           ; 2 bytes @ 0x2
  2576  0267                     	ds	2
  2577                           
  2578                           	psect	cstackBANK1
  2579  00E5                     __pcstackBANK1:	
  2580  00E5                     ?_setDimmerLights_OnOff:	
  2581  00E5                     ??_setRFSW_Control:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  00E5                     setDimmerLights_OnOff@command:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  00E5                     setTemp_Main@error:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590                           
  2591                           ; 1 bytes @ 0x0
  2592  00E5                     	ds	1
  2593  00E6                     ??_setDimmerLights_OnOff:	
  2594  00E6                     setTemp_Main@TempGO:	
  2595                           ; 0 bytes @ 0x1
  2596                           
  2597  00E6                     setRFSW_Control@status:	
  2598                           ; 1 bytes @ 0x1
  2599                           
  2600                           
  2601                           ; 1 bytes @ 0x1
  2602  00E6                     	ds	1
  2603  00E7                     setRFSW_Control@sw:	
  2604  00E7                     setTemp_Main@SafeValue:	
  2605                           ; 1 bytes @ 0x2
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x2
  2609  00E7                     	ds	1
  2610  00E8                     ??_getRxData:	
  2611  00E8                     setDimmerLights_OnOff@lights:	
  2612                           ; 0 bytes @ 0x3
  2613                           
  2614                           
  2615                           ; 1 bytes @ 0x3
  2616  00E8                     	ds	1
  2617  00E9                     setDimmerLights_Main@lights:	
  2618  00E9                     getRxData@error:	
  2619                           ; 1 bytes @ 0x4
  2620                           
  2621  00E9                     setTemp_Main@DangerValue:	
  2622                           ; 1 bytes @ 0x4
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0x4
  2626  00E9                     	ds	1
  2627  00EA                     ??_setRF_Main:	
  2628                           
  2629                           ; 0 bytes @ 0x5
  2630  00EA                     	ds	1
  2631  00EB                     setRF_Main@error:	
  2632  00EB                     setTemp_Main@AD:	
  2633                           ; 1 bytes @ 0x6
  2634                           
  2635                           
  2636                           ; 2 bytes @ 0x6
  2637  00EB                     	ds	2
  2638                           
  2639                           	psect	cstackCOMMON
  2640  0070                     __pcstackCOMMON:	
  2641  0070                     ?_CC2500_WriteCommand:	
  2642  0070                     ?_RF_Timeout_Counter:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setRF_TimeoutCleared:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_CC2500_WriteByte:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_CC2500_ReadStatus:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_CC2500_ReadByte:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_CC2500_PowerRST:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_CC2500_InitSetREG:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_CC2500_InitPATable:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_CC2500_ClearTXFIFO:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_CC2500_ClearRXFIFO:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_CC2500_FrequencyCabr:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_CC2500_SIDLEMode:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_DlyOff_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_DlyOff_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_SwOn:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_SwOff:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setDimmerLights_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setDimmerLights_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setDimmerLights_Line:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setTxData:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setRF_TransceiveGO:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setLED_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setLED_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Fosc_Set:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_IO_Set:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_TMR1_Set:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_ADC_Set:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_IOC_Set:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_WDT_Set:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_TMR1_ISR:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_IOC_ISR:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Timeout_Counter:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_set_TimeoutCleared:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Flash_Memory_Write:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Flash_Memory_Modify:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_WDT_Clearing:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_myMain_Initialization:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Temp_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Load_Initialization:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_Switch_Initialization:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_RF_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_getLoad_AD:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_getTemp_AD:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_my_MainTimer:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_Temp_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Load_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Switch_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_RF_Main:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_Exception_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setLoad_AH_AL_Restore:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setTemp_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setTemp_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setRF_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setRF_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_RF_RxDisable:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_getRxData:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setLog_Code:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setControl_Lights_Table:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setRFSW_Control:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_setRFSW_AdjControl:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_setSw_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_setSw_Main:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Buzzer_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_Buzzer_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_CC2500_TxData:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_CC2500_RxData:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_CC2500_PowerOnInitial:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DelayOffPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_DelayOff_Initialization:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_DelayOff_Main:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DimmerIntr_Initialization:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_DimmerLights_SelectPointer:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_DimmerLights_Initialization:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_setDimmerLights_DimmingOn:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_DimmerLights_Main:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_DimmerLights_TMR_1:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ??_DimmerLights_TMR_1:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_DimmerLights_IOC_1:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_DimmerLights_TMR_2:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ??_DimmerLights_TMR_2:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_DimmerLights_IOC_2:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_LedPointSelect:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_LED_Initialization:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_LED_Main:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_Mcu_Initialization:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_ISR:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_Flash_Memory_Initialization:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_Flash_Memory_Main:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_Flash_Memory_Unlock:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_Flash_Memory_Erasing:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_setMemory_Modify:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_setMemory_LoopSave:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_WDT_Main:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_setRF_Learn:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0070                     ?_TouchPower:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0070                     ?_SwPointSelect:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmerLights_Status:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0070                     ?_getLoad_OK:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getMain_All_Error_Status:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getMain_All_LightsStatus:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_getDimmerLights_Allow_Condition:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getDimmerLights_PercentToValue:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getDimmerLights_ValueToPercent:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getCmd_Status:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_Flash_Memory_Read:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getRF_KeyStatus:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getSw_KeyStatus:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getDelayOff_GO:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getDimmerIntr_DimmingValue:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getDimmerLights_Line:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getDimmer_LoadGO:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_getDimmer_Load_Status:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ?_getMain_Lights_Count:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?___lbdiv:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     setDimmerLights_Initialization@lights:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     ___lbdiv@divisor:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x0
  2995  0070                     	ds	1
  2996  0071                     ??___lbdiv:	
  2997  0071                     DimmerLights_TMR_1@count:	
  2998                           ; 0 bytes @ 0x1
  2999                           
  3000  0071                     DimmerLights_TMR_2@count:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x1
  3005  0071                     	ds	1
  3006  0072                     ??_TMR1_ISR:	
  3007  0072                     ___lbdiv@dividend:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0x2
  3012  0072                     	ds	1
  3013  0073                     ___lbdiv@counter:	
  3014                           
  3015                           ; 1 bytes @ 0x3
  3016  0073                     	ds	1
  3017  0074                     ___lbdiv@quotient:	
  3018                           
  3019                           ; 1 bytes @ 0x4
  3020  0074                     	ds	1
  3021  0075                     ?_Division:	
  3022  0075                     Division@num:	
  3023                           ; 1 bytes @ 0x5
  3024                           
  3025                           
  3026                           ; 1 bytes @ 0x5
  3027  0075                     	ds	1
  3028  0076                     ??_Division:	
  3029                           
  3030                           ; 0 bytes @ 0x6
  3031  0076                     	ds	2
  3032  0078                     Division@value:	
  3033                           
  3034                           ; 1 bytes @ 0x8
  3035  0078                     	ds	1
  3036  0079                     Division@result:	
  3037                           
  3038                           ; 1 bytes @ 0x9
  3039  0079                     	ds	1
  3040  007A                     ??_DimmerLights_IOC_1:	
  3041  007A                     ??_DimmerLights_IOC_2:	
  3042                           ; 0 bytes @ 0xA
  3043                           
  3044                           
  3045                           ; 0 bytes @ 0xA
  3046  007A                     	ds	2
  3047  007C                     DimmerLights_IOC_1@count:	
  3048  007C                     DimmerLights_IOC_2@count:	
  3049                           ; 1 bytes @ 0xC
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0xC
  3053  007C                     	ds	1
  3054  007D                     DimmerLights_IOC_1@dimming:	
  3055  007D                     DimmerLights_IOC_2@dimming:	
  3056                           ; 1 bytes @ 0xD
  3057                           
  3058                           
  3059                           ; 1 bytes @ 0xD
  3060  007D                     	ds	1
  3061  007E                     ??_IOC_ISR:	
  3062                           
  3063                           	psect	cstackBANK0
  3064  0020                     __pcstackBANK0:	
  3065                           ; 0 bytes @ 0xE
  3066                           
  3067  0020                     ??_ISR:	
  3068                           
  3069                           ; 0 bytes @ 0x0
  3070  0020                     	ds	1
  3071  0021                     ??_RF_Timeout_Counter:	
  3072  0021                     ??_setRF_TimeoutCleared:	
  3073                           ; 0 bytes @ 0x1
  3074                           
  3075  0021                     ??_CC2500_WriteByte:	
  3076                           ; 0 bytes @ 0x1
  3077                           
  3078  0021                     ??_CC2500_ReadByte:	
  3079                           ; 0 bytes @ 0x1
  3080                           
  3081  0021                     ?_DelayTime_1us:	
  3082                           ; 0 bytes @ 0x1
  3083                           
  3084  0021                     ??_setDimmerLights_Initialization:	
  3085                           ; 0 bytes @ 0x1
  3086                           
  3087  0021                     ??_getLoad_OK:	
  3088                           ; 0 bytes @ 0x1
  3089                           
  3090  0021                     ??_getMain_All_Error_Status:	
  3091                           ; 0 bytes @ 0x1
  3092                           
  3093  0021                     ??_getMain_All_LightsStatus:	
  3094                           ; 0 bytes @ 0x1
  3095                           
  3096  0021                     ??_setDimmerLights_Line:	
  3097                           ; 0 bytes @ 0x1
  3098                           
  3099  0021                     ??_getCmd_Status:	
  3100                           ; 0 bytes @ 0x1
  3101                           
  3102  0021                     ?_setCmd_Status:	
  3103                           ; 0 bytes @ 0x1
  3104                           
  3105  0021                     ??_setTxData:	
  3106                           ; 0 bytes @ 0x1
  3107                           
  3108  0021                     ??_setRF_TransceiveGO:	
  3109                           ; 0 bytes @ 0x1
  3110                           
  3111  0021                     ??_Fosc_Set:	
  3112                           ; 0 bytes @ 0x1
  3113                           
  3114  0021                     ??_IO_Set:	
  3115                           ; 0 bytes @ 0x1
  3116                           
  3117  0021                     ??_TMR1_Set:	
  3118                           ; 0 bytes @ 0x1
  3119                           
  3120  0021                     ??_ADC_Set:	
  3121                           ; 0 bytes @ 0x1
  3122                           
  3123  0021                     ??_IOC_Set:	
  3124                           ; 0 bytes @ 0x1
  3125                           
  3126  0021                     ??_WDT_Set:	
  3127                           ; 0 bytes @ 0x1
  3128                           
  3129  0021                     ??_Timeout_Counter:	
  3130                           ; 0 bytes @ 0x1
  3131                           
  3132  0021                     ??_set_TimeoutCleared:	
  3133                           ; 0 bytes @ 0x1
  3134                           
  3135  0021                     ??_Flash_Memory_Read:	
  3136                           ; 0 bytes @ 0x1
  3137                           
  3138  0021                     ?_setMemory_Data:	
  3139                           ; 0 bytes @ 0x1
  3140                           
  3141  0021                     ??_Flash_Memory_Write:	
  3142                           ; 0 bytes @ 0x1
  3143                           
  3144  0021                     ??_WDT_Clearing:	
  3145                           ; 0 bytes @ 0x1
  3146                           
  3147  0021                     ??_myMain_Initialization:	
  3148                           ; 0 bytes @ 0x1
  3149                           
  3150  0021                     ??_Temp_Initialization:	
  3151                           ; 0 bytes @ 0x1
  3152                           
  3153  0021                     ??_setLoad_AH_AL_Restore:	
  3154                           ; 0 bytes @ 0x1
  3155                           
  3156  0021                     ??_setTemp_Initialization:	
  3157                           ; 0 bytes @ 0x1
  3158                           
  3159  0021                     ??_setRF_Initialization:	
  3160                           ; 0 bytes @ 0x1
  3161                           
  3162  0021                     ??_getRF_KeyStatus:	
  3163                           ; 0 bytes @ 0x1
  3164                           
  3165  0021                     ??_getSw_KeyStatus:	
  3166                           ; 0 bytes @ 0x1
  3167                           
  3168  0021                     ??_Buzzer_Initialization:	
  3169                           ; 0 bytes @ 0x1
  3170                           
  3171  0021                     ??_Buzzer_Main:	
  3172                           ; 0 bytes @ 0x1
  3173                           
  3174  0021                     ??_DelayOffPointSelect:	
  3175                           ; 0 bytes @ 0x1
  3176                           
  3177  0021                     ??_DimmerIntr_Initialization:	
  3178                           ; 0 bytes @ 0x1
  3179                           
  3180  0021                     ?_setDimmerIntr_ControlStatus:	
  3181                           ; 0 bytes @ 0x1
  3182                           
  3183  0021                     ?_setDimmerIntr_DimmingValue:	
  3184                           ; 0 bytes @ 0x1
  3185                           
  3186  0021                     ??_getDimmerIntr_DimmingValue:	
  3187                           ; 0 bytes @ 0x1
  3188                           
  3189  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3190                           ; 0 bytes @ 0x1
  3191                           
  3192  0021                     ?_setDimmerIntr_Dimming_RF:	
  3193                           ; 0 bytes @ 0x1
  3194                           
  3195  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3196                           ; 0 bytes @ 0x1
  3197                           
  3198  0021                     ??_DimmerLights_SelectPointer:	
  3199                           ; 0 bytes @ 0x1
  3200                           
  3201  0021                     ??_getDimmerLights_Line:	
  3202                           ; 0 bytes @ 0x1
  3203                           
  3204  0021                     ??_getDimmer_LoadGO:	
  3205                           ; 0 bytes @ 0x1
  3206                           
  3207  0021                     ??_getDimmer_Load_Status:	
  3208                           ; 0 bytes @ 0x1
  3209                           
  3210  0021                     ??_LedPointSelect:	
  3211                           ; 0 bytes @ 0x1
  3212                           
  3213  0021                     ??_Flash_Memory_Unlock:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_Flash_Memory_Erasing:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??_setMemory_Modify:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     ??_setMemory_LoopSave:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     ??_WDT_Main:	
  3226                           ; 0 bytes @ 0x1
  3227                           
  3228  0021                     ??_getMain_Lights_Count:	
  3229                           ; 0 bytes @ 0x1
  3230                           
  3231  0021                     ??_setRF_Learn:	
  3232                           ; 0 bytes @ 0x1
  3233                           
  3234  0021                     ??_TouchPower:	
  3235                           ; 0 bytes @ 0x1
  3236                           
  3237  0021                     ??_SwPointSelect:	
  3238                           ; 0 bytes @ 0x1
  3239                           
  3240  0021                     ?___bmul:	
  3241                           ; 0 bytes @ 0x1
  3242                           
  3243  0021                     ?_getBuz_GO:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     ?_getAD:	
  3247                           ; 2 bytes @ 0x1
  3248                           
  3249  0021                     ?___wmul:	
  3250                           ; 2 bytes @ 0x1
  3251                           
  3252  0021                     ?___awdiv:	
  3253                           ; 2 bytes @ 0x1
  3254                           
  3255  0021                     ?___lwdiv:	
  3256                           ; 2 bytes @ 0x1
  3257                           
  3258  0021                     ?___ftpack:	
  3259                           ; 2 bytes @ 0x1
  3260                           
  3261  0021                     setDimmerIntr_ControlStatus@command:	
  3262                           ; 3 bytes @ 0x1
  3263                           
  3264  0021                     setDimmerIntr_DimmingValue@value:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     setDimmerIntr_Dimming_Sw@command:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     setDimmerIntr_Dimming_RF@command:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273  0021                     setDimmerLights_Line@lights:	
  3274                           ; 1 bytes @ 0x1
  3275                           
  3276  0021                     getDimmer_LoadGO@loadgo:	
  3277                           ; 1 bytes @ 0x1
  3278                           
  3279  0021                     getDimmer_Load_Status@status:	
  3280                           ; 1 bytes @ 0x1
  3281                           
  3282  0021                     getAD@adcon1:	
  3283                           ; 1 bytes @ 0x1
  3284                           
  3285  0021                     setMemory_Data@data:	
  3286                           ; 1 bytes @ 0x1
  3287                           
  3288  0021                     getMain_All_LightsStatus@status:	
  3289                           ; 1 bytes @ 0x1
  3290                           
  3291  0021                     getMain_Lights_Count@count:	
  3292                           ; 1 bytes @ 0x1
  3293                           
  3294  0021                     setCmd_Status@cmd:	
  3295                           ; 1 bytes @ 0x1
  3296                           
  3297  0021                     getCmd_Status@number:	
  3298                           ; 1 bytes @ 0x1
  3299                           
  3300  0021                     getLoad_OK@ok:	
  3301                           ; 1 bytes @ 0x1
  3302                           
  3303  0021                     ___bmul@multiplicand:	
  3304                           ; 1 bytes @ 0x1
  3305                           
  3306  0021                     DelayTime_1us@count:	
  3307                           ; 1 bytes @ 0x1
  3308                           
  3309  0021                     ___wmul@multiplier:	
  3310                           ; 2 bytes @ 0x1
  3311                           
  3312  0021                     ___awdiv@divisor:	
  3313                           ; 2 bytes @ 0x1
  3314                           
  3315  0021                     ___lwdiv@divisor:	
  3316                           ; 2 bytes @ 0x1
  3317                           
  3318  0021                     ___ftpack@arg:	
  3319                           ; 2 bytes @ 0x1
  3320                           
  3321                           
  3322                           ; 3 bytes @ 0x1
  3323  0021                     	ds	1
  3324  0022                     ??_getDimmerLights_Allow_Condition:	
  3325  0022                     ??_setCmd_Status:	
  3326                           ; 0 bytes @ 0x2
  3327                           
  3328  0022                     ??_setMemory_Data:	
  3329                           ; 0 bytes @ 0x2
  3330                           
  3331  0022                     ??_RF_Initialization:	
  3332                           ; 0 bytes @ 0x2
  3333                           
  3334  0022                     ??_setDimmerIntr_ControlStatus:	
  3335                           ; 0 bytes @ 0x2
  3336                           
  3337  0022                     ??_setDimmerIntr_DimmingValue:	
  3338                           ; 0 bytes @ 0x2
  3339                           
  3340  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3341                           ; 0 bytes @ 0x2
  3342                           
  3343  0022                     ??_setDimmerIntr_Dimming_RF:	
  3344                           ; 0 bytes @ 0x2
  3345                           
  3346  0022                     ??_DimmerLights_Initialization:	
  3347                           ; 0 bytes @ 0x2
  3348                           
  3349  0022                     ??_Mcu_Initialization:	
  3350                           ; 0 bytes @ 0x2
  3351                           
  3352  0022                     ??___bmul:	
  3353                           ; 0 bytes @ 0x2
  3354                           
  3355  0022                     CC2500_WriteByte@loop_a:	
  3356                           ; 0 bytes @ 0x2
  3357                           
  3358  0022                     CC2500_ReadByte@loop_b:	
  3359                           ; 1 bytes @ 0x2
  3360                           
  3361  0022                     DelayOffPointSelect@sw:	
  3362                           ; 1 bytes @ 0x2
  3363                           
  3364  0022                     getDimmerIntr_DimmingValue@value:	
  3365                           ; 1 bytes @ 0x2
  3366                           
  3367  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2268:	
  3368                           ; 1 bytes @ 0x2
  3369                           
  3370  0022                     DimmerLights_SelectPointer@lights:	
  3371                           ; 1 bytes @ 0x2
  3372                           
  3373  0022                     getDimmerLights_Line@line:	
  3374                           ; 1 bytes @ 0x2
  3375                           
  3376  0022                     LedPointSelect@led:	
  3377                           ; 1 bytes @ 0x2
  3378                           
  3379  0022                     Flash_Memory_Read@i:	
  3380                           ; 1 bytes @ 0x2
  3381                           
  3382  0022                     Flash_Memory_Write@i:	
  3383                           ; 1 bytes @ 0x2
  3384                           
  3385  0022                     setMemory_Modify@command:	
  3386                           ; 1 bytes @ 0x2
  3387                           
  3388  0022                     setMemory_LoopSave@command:	
  3389                           ; 1 bytes @ 0x2
  3390                           
  3391  0022                     getMain_Lights_Count@status1:	
  3392                           ; 1 bytes @ 0x2
  3393                           
  3394  0022                     getCmd_Status@cmd:	
  3395                           ; 1 bytes @ 0x2
  3396                           
  3397  0022                     setLoad_AH_AL_Restore@i:	
  3398                           ; 1 bytes @ 0x2
  3399                           
  3400  0022                     setRF_Learn@command:	
  3401                           ; 1 bytes @ 0x2
  3402                           
  3403  0022                     getRF_KeyStatus@key:	
  3404                           ; 1 bytes @ 0x2
  3405                           
  3406  0022                     setRF_TransceiveGO@command:	
  3407                           ; 1 bytes @ 0x2
  3408                           
  3409  0022                     SwPointSelect@sw:	
  3410                           ; 1 bytes @ 0x2
  3411                           
  3412  0022                     _getSw_KeyStatus$6569:	
  3413                           ; 1 bytes @ 0x2
  3414                           
  3415  0022                     _getMain_All_Error_Status$3735:	
  3416                           ; 1 bytes @ 0x2
  3417                           
  3418                           
  3419                           ; 2 bytes @ 0x2
  3420  0022                     	ds	1
  3421  0023                     ??_CC2500_WriteCommand:	
  3422  0023                     ??_CC2500_ReadStatus:	
  3423                           ; 0 bytes @ 0x3
  3424                           
  3425  0023                     ??_DelayTime_1us:	
  3426                           ; 0 bytes @ 0x3
  3427                           
  3428  0023                     ?_CC2500_WriteREG:	
  3429                           ; 0 bytes @ 0x3
  3430                           
  3431  0023                     ??_DlyOff_Initialization:	
  3432                           ; 0 bytes @ 0x3
  3433                           
  3434  0023                     ??_getDimmerLights_Status:	
  3435                           ; 0 bytes @ 0x3
  3436                           
  3437  0023                     ??_setDimmerLights_SwOff:	
  3438                           ; 0 bytes @ 0x3
  3439                           
  3440  0023                     ?_setLED:	
  3441                           ; 0 bytes @ 0x3
  3442                           
  3443  0023                     ??_setLED_Main:	
  3444                           ; 0 bytes @ 0x3
  3445                           
  3446  0023                     ??_Load_Initialization:	
  3447                           ; 0 bytes @ 0x3
  3448                           
  3449  0023                     ??_getBuz_GO:	
  3450                           ; 0 bytes @ 0x3
  3451                           
  3452  0023                     ??_getDelayOff_GO:	
  3453                           ; 0 bytes @ 0x3
  3454                           
  3455  0023                     ??_setDimmerLights_DimmingOn:	
  3456                           ; 0 bytes @ 0x3
  3457                           
  3458  0023                     ?_setDimmerLights_DimmingRun:	
  3459                           ; 0 bytes @ 0x3
  3460                           
  3461  0023                     CC2500_WriteREG@value:	
  3462                           ; 0 bytes @ 0x3
  3463                           
  3464  0023                     DlyOff_Initialization@sw:	
  3465                           ; 1 bytes @ 0x3
  3466                           
  3467  0023                     getDelayOff_GO@sw:	
  3468                           ; 1 bytes @ 0x3
  3469                           
  3470  0023                     setDimmerIntr_ControlStatus@lights:	
  3471                           ; 1 bytes @ 0x3
  3472                           
  3473  0023                     setDimmerIntr_DimmingValue@lights:	
  3474                           ; 1 bytes @ 0x3
  3475                           
  3476  0023                     getDimmerIntr_DimmingValue@lights:	
  3477                           ; 1 bytes @ 0x3
  3478                           
  3479  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3480                           ; 1 bytes @ 0x3
  3481                           
  3482  0023                     setDimmerIntr_Dimming_RF@lights:	
  3483                           ; 1 bytes @ 0x3
  3484                           
  3485  0023                     _getAll_DimmerIntr_Dimming_Sw_RF$2269:	
  3486                           ; 1 bytes @ 0x3
  3487                           
  3488  0023                     setDimmerLights_SwOff@sw:	
  3489                           ; 1 bytes @ 0x3
  3490                           
  3491  0023                     setDimmerLights_DimmingOn@sw:	
  3492                           ; 1 bytes @ 0x3
  3493                           
  3494  0023                     _getDimmerLights_Allow_Condition$2375:	
  3495                           ; 1 bytes @ 0x3
  3496                           
  3497  0023                     getDimmerLights_Status@lights:	
  3498                           ; 1 bytes @ 0x3
  3499                           
  3500  0023                     setDimmerLights_DimmingRun@command:	
  3501                           ; 1 bytes @ 0x3
  3502                           
  3503  0023                     setLED@command:	
  3504                           ; 1 bytes @ 0x3
  3505                           
  3506  0023                     Flash_Memory_Read@address:	
  3507                           ; 1 bytes @ 0x3
  3508                           
  3509  0023                     setMemory_Data@address:	
  3510                           ; 1 bytes @ 0x3
  3511                           
  3512  0023                     getMain_Lights_Count@status2:	
  3513                           ; 1 bytes @ 0x3
  3514                           
  3515  0023                     setCmd_Status@number:	
  3516                           ; 1 bytes @ 0x3
  3517                           
  3518  0023                     _getRF_KeyStatus$5521:	
  3519                           ; 1 bytes @ 0x3
  3520                           
  3521  0023                     _getSw_KeyStatus$6570:	
  3522                           ; 1 bytes @ 0x3
  3523                           
  3524  0023                     ___bmul@product:	
  3525                           ; 1 bytes @ 0x3
  3526                           
  3527  0023                     DelayTime_1us@i:	
  3528                           ; 1 bytes @ 0x3
  3529                           
  3530  0023                     ___wmul@multiplicand:	
  3531                           ; 2 bytes @ 0x3
  3532                           
  3533  0023                     ___awdiv@dividend:	
  3534                           ; 2 bytes @ 0x3
  3535                           
  3536  0023                     ___lwdiv@dividend:	
  3537                           ; 2 bytes @ 0x3
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x3
  3541  0023                     	ds	1
  3542  0024                     ??_CC2500_WriteREG:	
  3543  0024                     ??_setLED:	
  3544                           ; 0 bytes @ 0x4
  3545                           
  3546  0024                     ??_DelayOff_Initialization:	
  3547                           ; 0 bytes @ 0x4
  3548                           
  3549  0024                     ??_setDimmerLights_DimmingRun:	
  3550                           ; 0 bytes @ 0x4
  3551                           
  3552  0024                     ??_getAD:	
  3553                           ; 0 bytes @ 0x4
  3554                           
  3555  0024                     CC2500_WriteCommand@command:	
  3556                           ; 0 bytes @ 0x4
  3557                           
  3558  0024                     CC2500_ReadStatus@status_addr:	
  3559                           ; 1 bytes @ 0x4
  3560                           
  3561  0024                     getDelayOff_GO@go:	
  3562                           ; 1 bytes @ 0x4
  3563                           
  3564  0024                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3565                           ; 1 bytes @ 0x4
  3566                           
  3567  0024                     _getDimmerLights_Allow_Condition$2376:	
  3568                           ; 1 bytes @ 0x4
  3569                           
  3570  0024                     getDimmerLights_Status@status:	
  3571                           ; 1 bytes @ 0x4
  3572                           
  3573  0024                     setLED@led:	
  3574                           ; 1 bytes @ 0x4
  3575                           
  3576  0024                     getAD@adcon0:	
  3577                           ; 1 bytes @ 0x4
  3578                           
  3579  0024                     Flash_Memory_Read@ret:	
  3580                           ; 1 bytes @ 0x4
  3581                           
  3582  0024                     getSw_KeyStatus@status:	
  3583                           ; 1 bytes @ 0x4
  3584                           
  3585  0024                     ___bmul@multiplier:	
  3586                           ; 1 bytes @ 0x4
  3587                           
  3588  0024                     ___ftpack@exp:	
  3589                           ; 1 bytes @ 0x4
  3590                           
  3591  0024                     _getMain_All_Error_Status$3736:	
  3592                           ; 1 bytes @ 0x4
  3593                           
  3594                           
  3595                           ; 2 bytes @ 0x4
  3596  0024                     	ds	1
  3597  0025                     ??_CC2500_ClearTXFIFO:	
  3598  0025                     ??_CC2500_ClearRXFIFO:	
  3599                           ; 0 bytes @ 0x5
  3600                           
  3601  0025                     ??_CC2500_SIDLEMode:	
  3602                           ; 0 bytes @ 0x5
  3603                           
  3604  0025                     ??_setLED_Initialization:	
  3605                           ; 0 bytes @ 0x5
  3606                           
  3607  0025                     ??_Flash_Memory_Modify:	
  3608                           ; 0 bytes @ 0x5
  3609                           
  3610  0025                     ??_getLoad_AD:	
  3611                           ; 0 bytes @ 0x5
  3612                           
  3613  0025                     ??_getTemp_AD:	
  3614                           ; 0 bytes @ 0x5
  3615                           
  3616  0025                     ??_RF_RxDisable:	
  3617                           ; 0 bytes @ 0x5
  3618                           
  3619  0025                     ??_setSw_Initialization:	
  3620                           ; 0 bytes @ 0x5
  3621                           
  3622  0025                     ??_CC2500_TxData:	
  3623                           ; 0 bytes @ 0x5
  3624                           
  3625  0025                     ??_CC2500_RxData:	
  3626                           ; 0 bytes @ 0x5
  3627                           
  3628  0025                     ??___wmul:	
  3629                           ; 0 bytes @ 0x5
  3630                           
  3631  0025                     ??___awdiv:	
  3632                           ; 0 bytes @ 0x5
  3633                           
  3634  0025                     ??___lwdiv:	
  3635                           ; 0 bytes @ 0x5
  3636                           
  3637  0025                     CC2500_WriteREG@w_addr:	
  3638                           ; 0 bytes @ 0x5
  3639                           
  3640  0025                     _getDimmerLights_Allow_Condition$2377:	
  3641                           ; 1 bytes @ 0x5
  3642                           
  3643  0025                     setDimmerLights_DimmingRun@lights:	
  3644                           ; 1 bytes @ 0x5
  3645                           
  3646  0025                     setLED_Initialization@led:	
  3647                           ; 1 bytes @ 0x5
  3648                           
  3649  0025                     setLED_Main@led:	
  3650                           ; 1 bytes @ 0x5
  3651                           
  3652  0025                     setSw_Initialization@sw:	
  3653                           ; 1 bytes @ 0x5
  3654                           
  3655  0025                     getSw_KeyStatus@sw:	
  3656                           ; 1 bytes @ 0x5
  3657                           
  3658  0025                     ___ftpack@sign:	
  3659                           ; 1 bytes @ 0x5
  3660                           
  3661  0025                     getBuz_GO@i:	
  3662                           ; 1 bytes @ 0x5
  3663                           
  3664  0025                     DelayTime_1us@j:	
  3665                           ; 2 bytes @ 0x5
  3666                           
  3667  0025                     ___wmul@product:	
  3668                           ; 2 bytes @ 0x5
  3669                           
  3670                           
  3671                           ; 2 bytes @ 0x5
  3672  0025                     	ds	1
  3673  0026                     ??_CC2500_InitSetREG:	
  3674  0026                     ??_CC2500_InitPATable:	
  3675                           ; 0 bytes @ 0x6
  3676                           
  3677  0026                     ??_Switch_Initialization:	
  3678                           ; 0 bytes @ 0x6
  3679                           
  3680  0026                     ??___ftpack:	
  3681                           ; 0 bytes @ 0x6
  3682                           
  3683  0026                     ??_LED_Initialization:	
  3684                           ; 0 bytes @ 0x6
  3685                           
  3686  0026                     ??_LED_Main:	
  3687                           ; 0 bytes @ 0x6
  3688                           
  3689  0026                     CC2500_TxData@loop_e:	
  3690                           ; 0 bytes @ 0x6
  3691                           
  3692  0026                     CC2500_RxData@loop_f:	
  3693                           ; 1 bytes @ 0x6
  3694                           
  3695  0026                     getDimmerLights_Allow_Condition@lights:	
  3696                           ; 1 bytes @ 0x6
  3697                           
  3698  0026                     Flash_Memory_Modify@i:	
  3699                           ; 1 bytes @ 0x6
  3700                           
  3701  0026                     getMain_All_Error_Status@command:	
  3702                           ; 1 bytes @ 0x6
  3703                           
  3704  0026                     getTemp_AD@channel:	
  3705                           ; 1 bytes @ 0x6
  3706                           
  3707  0026                     ___awdiv@counter:	
  3708                           ; 1 bytes @ 0x6
  3709                           
  3710  0026                     ___lwdiv@quotient:	
  3711                           ; 1 bytes @ 0x6
  3712                           
  3713                           
  3714                           ; 2 bytes @ 0x6
  3715  0026                     	ds	1
  3716  0027                     ??_CC2500_PowerRST:	
  3717  0027                     ??_CC2500_FrequencyCabr:	
  3718                           ; 0 bytes @ 0x7
  3719                           
  3720  0027                     ??_Flash_Memory_Main:	
  3721                           ; 0 bytes @ 0x7
  3722                           
  3723  0027                     CC2500_InitSetREG@temp1:	
  3724                           ; 0 bytes @ 0x7
  3725                           
  3726  0027                     CC2500_InitPATable@temp:	
  3727                           ; 1 bytes @ 0x7
  3728                           
  3729  0027                     getDimmerLights_Allow_Condition@allow:	
  3730                           ; 1 bytes @ 0x7
  3731                           
  3732  0027                     getMain_All_Error_Status@status:	
  3733                           ; 1 bytes @ 0x7
  3734                           
  3735  0027                     getLoad_AD@channel:	
  3736                           ; 1 bytes @ 0x7
  3737                           
  3738  0027                     ___awdiv@sign:	
  3739                           ; 1 bytes @ 0x7
  3740                           
  3741  0027                     getTemp_AD@ADRES:	
  3742                           ; 1 bytes @ 0x7
  3743                           
  3744                           
  3745                           ; 2 bytes @ 0x7
  3746  0027                     	ds	1
  3747  0028                     CC2500_InitSetREG@temp2:	
  3748  0028                     CC2500_InitPATable@loop_d:	
  3749                           ; 1 bytes @ 0x8
  3750                           
  3751  0028                     getLoad_AD@k:	
  3752                           ; 1 bytes @ 0x8
  3753                           
  3754  0028                     ___lwdiv@counter:	
  3755                           ; 1 bytes @ 0x8
  3756                           
  3757  0028                     ___awdiv@quotient:	
  3758                           ; 1 bytes @ 0x8
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x8
  3762  0028                     	ds	1
  3763  0029                     ??_Load_Main:	
  3764  0029                     ?___awtoft:	
  3765                           ; 0 bytes @ 0x9
  3766                           
  3767  0029                     CC2500_InitSetREG@loop_c:	
  3768                           ; 3 bytes @ 0x9
  3769                           
  3770  0029                     getLoad_AD@j:	
  3771                           ; 1 bytes @ 0x9
  3772                           
  3773  0029                     ___awtoft@c:	
  3774                           ; 1 bytes @ 0x9
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x9
  3778  0029                     	ds	1
  3779  002A                     ?_setBuz:	
  3780  002A                     ??_CC2500_PowerOnInitial:	
  3781                           ; 0 bytes @ 0xA
  3782                           
  3783  002A                     setBuz@time:	
  3784                           ; 0 bytes @ 0xA
  3785                           
  3786  002A                     getLoad_AD@ADRES:	
  3787                           ; 2 bytes @ 0xA
  3788                           
  3789                           
  3790                           ; 2 bytes @ 0xA
  3791  002A                     	ds	1
  3792  002B                     Load_Main@error:	
  3793                           
  3794                           ; 1 bytes @ 0xB
  3795  002B                     	ds	1
  3796  002C                     ??_setBuz:	
  3797  002C                     ??___awtoft:	
  3798                           ; 0 bytes @ 0xC
  3799                           
  3800  002C                     getLoad_AD@i:	
  3801                           ; 0 bytes @ 0xC
  3802                           
  3803  002C                     _Load_Main$4111:	
  3804                           ; 1 bytes @ 0xC
  3805                           
  3806                           
  3807                           ; 2 bytes @ 0xC
  3808  002C                     	ds	1
  3809  002D                     setBuz@count:	
  3810                           
  3811                           ; 1 bytes @ 0xD
  3812  002D                     	ds	1
  3813  002E                     ??_setDimmerLights_SwOn:	
  3814  002E                     ??_my_MainTimer:	
  3815                           ; 0 bytes @ 0xE
  3816                           
  3817  002E                     ??_Exception_Main:	
  3818                           ; 0 bytes @ 0xE
  3819                           
  3820  002E                     Load_Main@ErrorCountValue:	
  3821                           ; 0 bytes @ 0xE
  3822                           
  3823  002E                     ___awtoft@sign:	
  3824                           ; 1 bytes @ 0xE
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0xE
  3828  002E                     	ds	1
  3829  002F                     ?___ftdiv:	
  3830  002F                     ?___ftmul:	
  3831                           ; 3 bytes @ 0xF
  3832                           
  3833  002F                     _setDimmerLights_SwOn$2314:	
  3834                           ; 3 bytes @ 0xF
  3835                           
  3836  002F                     Exception_Main@status:	
  3837                           ; 1 bytes @ 0xF
  3838                           
  3839  002F                     Load_Main@Load_RunStatus:	
  3840                           ; 1 bytes @ 0xF
  3841                           
  3842  002F                     ___ftdiv@f2:	
  3843                           ; 1 bytes @ 0xF
  3844                           
  3845  002F                     ___ftmul@f1:	
  3846                           ; 3 bytes @ 0xF
  3847                           
  3848                           
  3849                           ; 3 bytes @ 0xF
  3850  002F                     	ds	1
  3851  0030                     _setDimmerLights_SwOn$2323:	
  3852  0030                     Exception_Main@count:	
  3853                           ; 1 bytes @ 0x10
  3854                           
  3855  0030                     Load_Main@LightsCount:	
  3856                           ; 1 bytes @ 0x10
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x10
  3860  0030                     	ds	1
  3861  0031                     setDimmerLights_SwOn@idle:	
  3862  0031                     Exception_Main@i:	
  3863                           ; 1 bytes @ 0x11
  3864                           
  3865  0031                     Load_Main@i:	
  3866                           ; 2 bytes @ 0x11
  3867                           
  3868                           
  3869                           ; 2 bytes @ 0x11
  3870  0031                     	ds	1
  3871  0032                     setDimmerLights_SwOn@sw:	
  3872  0032                     ___ftdiv@f1:	
  3873                           ; 1 bytes @ 0x12
  3874                           
  3875  0032                     ___ftmul@f2:	
  3876                           ; 3 bytes @ 0x12
  3877                           
  3878                           
  3879                           ; 3 bytes @ 0x12
  3880  0032                     	ds	1
  3881  0033                     ??_setSw_Main:	
  3882  0033                     Exception_Main@i_3748:	
  3883                           ; 0 bytes @ 0x13
  3884                           
  3885                           
  3886                           ; 2 bytes @ 0x13
  3887  0033                     	ds	2
  3888  0035                     ??___ftdiv:	
  3889  0035                     ??___ftmul:	
  3890                           ; 0 bytes @ 0x15
  3891                           
  3892  0035                     Exception_Main@lights:	
  3893                           ; 0 bytes @ 0x15
  3894                           
  3895  0035                     setSw_Main@sw:	
  3896                           ; 1 bytes @ 0x15
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x15
  3900  0035                     	ds	1
  3901  0036                     ??_Switch_Main:	
  3902  0036                     Exception_Main@error:	
  3903                           ; 0 bytes @ 0x16
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x16
  3907  0036                     	ds	3
  3908  0039                     ___ftdiv@cntr:	
  3909  0039                     ___ftmul@exp:	
  3910                           ; 1 bytes @ 0x19
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x19
  3914  0039                     	ds	1
  3915  003A                     ___ftdiv@f3:	
  3916  003A                     ___ftmul@f3_as_product:	
  3917                           ; 3 bytes @ 0x1A
  3918                           
  3919                           
  3920                           ; 3 bytes @ 0x1A
  3921  003A                     	ds	3
  3922  003D                     ___ftdiv@exp:	
  3923  003D                     ___ftmul@cntr:	
  3924                           ; 1 bytes @ 0x1D
  3925                           
  3926                           
  3927                           ; 1 bytes @ 0x1D
  3928  003D                     	ds	1
  3929  003E                     ___ftdiv@sign:	
  3930  003E                     ___ftmul@sign:	
  3931                           ; 1 bytes @ 0x1E
  3932                           
  3933                           
  3934                           ; 1 bytes @ 0x1E
  3935  003E                     	ds	1
  3936  003F                     ?___ftneg:	
  3937  003F                     ___ftneg@f1:	
  3938                           ; 3 bytes @ 0x1F
  3939                           
  3940                           
  3941                           ; 3 bytes @ 0x1F
  3942  003F                     	ds	3
  3943  0042                     ??___ftneg:	
  3944  0042                     ?___ftadd:	
  3945                           ; 0 bytes @ 0x22
  3946                           
  3947  0042                     ___ftadd@f1:	
  3948                           ; 3 bytes @ 0x22
  3949                           
  3950                           
  3951                           ; 3 bytes @ 0x22
  3952  0042                     	ds	3
  3953  0045                     ___ftadd@f2:	
  3954                           
  3955                           ; 3 bytes @ 0x25
  3956  0045                     	ds	3
  3957  0048                     ??___ftadd:	
  3958                           
  3959                           ; 0 bytes @ 0x28
  3960  0048                     	ds	4
  3961  004C                     ___ftadd@sign:	
  3962                           
  3963                           ; 1 bytes @ 0x2C
  3964  004C                     	ds	1
  3965  004D                     ___ftadd@exp2:	
  3966                           
  3967                           ; 1 bytes @ 0x2D
  3968  004D                     	ds	1
  3969  004E                     ___ftadd@exp1:	
  3970                           
  3971                           ; 1 bytes @ 0x2E
  3972  004E                     	ds	1
  3973  004F                     ?___fttol:	
  3974  004F                     ___fttol@f1:	
  3975                           ; 4 bytes @ 0x2F
  3976                           
  3977                           
  3978                           ; 3 bytes @ 0x2F
  3979  004F                     	ds	4
  3980  0053                     ??___fttol:	
  3981                           
  3982                           ; 0 bytes @ 0x33
  3983  0053                     	ds	4
  3984  0057                     ___fttol@sign1:	
  3985                           
  3986                           ; 1 bytes @ 0x37
  3987  0057                     	ds	1
  3988  0058                     ___fttol@lval:	
  3989                           
  3990                           ; 4 bytes @ 0x38
  3991  0058                     	ds	4
  3992  005C                     ___fttol@exp1:	
  3993                           
  3994                           ; 1 bytes @ 0x3C
  3995  005C                     	ds	1
  3996  005D                     ??_getDimmerLights_PercentToValue:	
  3997  005D                     ??_getDimmerLights_ValueToPercent:	
  3998                           ; 0 bytes @ 0x3D
  3999                           
  4000                           
  4001                           ; 0 bytes @ 0x3D
  4002  005D                     	ds	2
  4003  005F                     getDimmerLights_PercentToValue@value:	
  4004  005F                     getDimmerLights_ValueToPercent@value:	
  4005                           ; 1 bytes @ 0x3F
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x3F
  4009  005F                     	ds	1
  4010  0060                     getDimmerLights_PercentToValue@i:	
  4011  0060                     getDimmerLights_ValueToPercent@i:	
  4012                           ; 3 bytes @ 0x40
  4013                           
  4014                           
  4015                           ; 3 bytes @ 0x40
  4016  0060                     	ds	3
  4017  0063                     ?_setProductData:	
  4018  0063                     ?_setDimmerIntr_MaxmumValue:	
  4019                           ; 0 bytes @ 0x43
  4020                           
  4021  0063                     ??_Flash_Memory_Initialization:	
  4022                           ; 0 bytes @ 0x43
  4023                           
  4024  0063                     setDimmerIntr_MaxmumValue@value:	
  4025                           ; 0 bytes @ 0x43
  4026                           
  4027  0063                     setProductData@value:	
  4028                           ; 1 bytes @ 0x43
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x43
  4032  0063                     	ds	1
  4033  0064                     ??_setProductData:	
  4034  0064                     ??_setDimmerIntr_MaxmumValue:	
  4035                           ; 0 bytes @ 0x44
  4036                           
  4037  0064                     Flash_Memory_Initialization@i:	
  4038                           ; 0 bytes @ 0x44
  4039                           
  4040                           
  4041                           ; 1 bytes @ 0x44
  4042  0064                     	ds	1
  4043  0065                     setDimmerIntr_MaxmumValue@lights:	
  4044  0065                     setProductData@address:	
  4045                           ; 1 bytes @ 0x45
  4046                           
  4047                           
  4048                           ; 1 bytes @ 0x45
  4049  0065                     	ds	1
  4050  0066                     ??_DlyOff_Main:	
  4051  0066                     ?_setRF_DimmerLights:	
  4052                           ; 0 bytes @ 0x46
  4053                           
  4054  0066                     ??_setTemp_Main:	
  4055                           ; 0 bytes @ 0x46
  4056                           
  4057  0066                     ??_setLog_Code:	
  4058                           ; 0 bytes @ 0x46
  4059                           
  4060  0066                     ??_setRFSW_AdjControl:	
  4061                           ; 0 bytes @ 0x46
  4062                           
  4063  0066                     ?_setDelayOff_GO:	
  4064                           ; 0 bytes @ 0x46
  4065                           
  4066  0066                     setDelayOff_GO@command:	
  4067                           ; 0 bytes @ 0x46
  4068                           
  4069  0066                     setRF_DimmerLights@on:	
  4070                           ; 1 bytes @ 0x46
  4071                           
  4072                           
  4073                           ; 1 bytes @ 0x46
  4074  0066                     	ds	1
  4075  0067                     ??_setRF_DimmerLights:	
  4076  0067                     ??_Temp_Main:	
  4077                           ; 0 bytes @ 0x47
  4078                           
  4079  0067                     setDelayOff_GO@value:	
  4080                           ; 0 bytes @ 0x47
  4081                           
  4082                           
  4083                           ; 1 bytes @ 0x47
  4084  0067                     	ds	1
  4085  0068                     ??_setDelayOff_GO:	
  4086  0068                     DlyOff_Main@sw:	
  4087                           ; 0 bytes @ 0x48
  4088                           
  4089  0068                     setRFSW_AdjControl@status:	
  4090                           ; 1 bytes @ 0x48
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x48
  4094  0068                     	ds	1
  4095  0069                     ??_DelayOff_Main:	
  4096  0069                     setRFSW_AdjControl@sw:	
  4097                           ; 0 bytes @ 0x49
  4098                           
  4099  0069                     setRF_DimmerLights@status:	
  4100                           ; 1 bytes @ 0x49
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x49
  4104  0069                     	ds	1
  4105  006A                     setDelayOff_GO@i:	
  4106  006A                     setRF_DimmerLights@lights:	
  4107                           ; 1 bytes @ 0x4A
  4108                           
  4109                           
  4110                           ; 1 bytes @ 0x4A
  4111  006A                     	ds	1
  4112  006B                     ?_setDimmerLights_Dimming:	
  4113  006B                     setDelayOff_GO@j:	
  4114                           ; 0 bytes @ 0x4B
  4115                           
  4116  006B                     setDimmerLights_Dimming@status:	
  4117                           ; 1 bytes @ 0x4B
  4118                           
  4119                           
  4120                           ; 1 bytes @ 0x4B
  4121  006B                     	ds	1
  4122  006C                     ??_setDimmerLights_Dimming:	
  4123  006C                     setDelayOff_GO@k:	
  4124                           ; 0 bytes @ 0x4C
  4125                           
  4126                           
  4127                           ; 1 bytes @ 0x4C
  4128  006C                     	ds	1
  4129  006D                     setDelayOff_GO@sw:	
  4130  006D                     setDimmerLights_Dimming@lights:	
  4131                           ; 1 bytes @ 0x4D
  4132                           
  4133                           
  4134                           ; 1 bytes @ 0x4D
  4135  006D                     	ds	1
  4136  006E                     ??_setDimmerLights_Main:	
  4137  006E                     ??_RF_Main:	
  4138                           ; 0 bytes @ 0x4E
  4139                           
  4140  006E                     ??_setControl_Lights_Table:	
  4141                           ; 0 bytes @ 0x4E
  4142                           
  4143  006E                     ??_DimmerLights_Main:	
  4144                           ; 0 bytes @ 0x4E
  4145                           
  4146  006E                     ??_main:	
  4147                           ; 0 bytes @ 0x4E
  4148                           
  4149                           
  4150                           	psect	maintext
  4151  1551                     __pmaintext:	
  4152                           ; 0 bytes @ 0x4E
  4153 ;;
  4154 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4155 ;;
  4156 ;; *************** function _main *****************
  4157 ;; Defined at:
  4158 ;;		line 7 in file "../src/Main_B1.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  argc            2    0[BANK4 ] int 
  4161 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  2    0[BANK4 ] int 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 17F/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4173 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4177 ;;Total ram usage:        4 bytes
  4178 ;; Hardware stack levels required when called:   13
  4179 ;; This function calls:
  4180 ;;		_Buzzer_Initialization
  4181 ;;		_Buzzer_Main
  4182 ;;		_CC2500_PowerOnInitial
  4183 ;;		_DelayOff_Initialization
  4184 ;;		_DelayOff_Main
  4185 ;;		_DimmerLights_Initialization
  4186 ;;		_DimmerLights_Main
  4187 ;;		_Exception_Main
  4188 ;;		_Flash_Memory_Initialization
  4189 ;;		_Flash_Memory_Main
  4190 ;;		_LED_Initialization
  4191 ;;		_LED_Main
  4192 ;;		_Load_Initialization
  4193 ;;		_Load_Main
  4194 ;;		_Mcu_Initialization
  4195 ;;		_RF_Initialization
  4196 ;;		_RF_Main
  4197 ;;		_Switch_Initialization
  4198 ;;		_Switch_Main
  4199 ;;		_Temp_Initialization
  4200 ;;		_Temp_Main
  4201 ;;		_WDT_Main
  4202 ;;		_getLoad_AD
  4203 ;;		_getTemp_AD
  4204 ;;		_myMain_Initialization
  4205 ;;		_my_MainTimer
  4206 ;; This function is called by:
  4207 ;;		Startup code after reset
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _main
  4213  1551                     _main:	
  4214                           
  4215                           ;Main_B1.c: 8: myMain_Initialization();
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4219  1551  319B  2359  3195   	fcall	_myMain_Initialization
  4220                           
  4221                           ;Main_B1.c: 9: Mcu_Initialization();
  4222  1554  319A  22E9  3195   	fcall	_Mcu_Initialization
  4223                           
  4224                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4225  1557  3184  247E  3195   	fcall	_Flash_Memory_Initialization
  4226                           
  4227                           ;Main_B1.c: 11: LED_Initialization();
  4228  155A  319A  2220  3195   	fcall	_LED_Initialization
  4229                           
  4230                           ;Main_B1.c: 12: Buzzer_Initialization();
  4231  155D  3199  212B  3195   	fcall	_Buzzer_Initialization
  4232                           
  4233                           ;Main_B1.c: 14: ;;
  4234                           ;Main_B1.c: 15: Temp_Initialization();
  4235  1560  3199  2137  3195   	fcall	_Temp_Initialization
  4236                           
  4237                           ;Main_B1.c: 16: Load_Initialization();
  4238  1563  3199  212E  3195   	fcall	_Load_Initialization
  4239                           
  4240                           ;Main_B1.c: 17: ;;
  4241                           ;Main_B1.c: 18: DelayOff_Initialization();
  4242  1566  3199  216F  3195   	fcall	_DelayOff_Initialization
  4243                           
  4244                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4245  1569  3199  21B9  3195   	fcall	_DimmerLights_Initialization
  4246                           
  4247                           ;Main_B1.c: 21: ;;
  4248                           ;Main_B1.c: 22: ;;
  4249                           ;Main_B1.c: 23: ;;
  4250                           ;Main_B1.c: 24: Switch_Initialization();
  4251  156C  3199  219F  3195   	fcall	_Switch_Initialization
  4252                           
  4253                           ;Main_B1.c: 25: RF_Initialization();
  4254  156F  3199  2131  3195   	fcall	_RF_Initialization
  4255                           
  4256                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4257  1572  319B  23A9  3195   	fcall	_CC2500_PowerOnInitial
  4258  1575                     l10057:	
  4259                           ;Main_B1.c: 27: ;;
  4260                           ;Main_B1.c: 28: ;;
  4261                           ;Main_B1.c: 30: while (1) {
  4262                           
  4263                           
  4264                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4265  1575  0022               	movlb	2	; select bank2
  4266  1576  1C20               	btfss	_myMain^(0+256),0
  4267  1577  2D80               	goto	l10061
  4268                           
  4269                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4270  1578  3005               	movlw	5
  4271  1579  318A  22A4  3195   	fcall	_getLoad_AD
  4272                           
  4273                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4274  157C  3009               	movlw	9
  4275  157D  3192  225C  3195   	fcall	_getTemp_AD
  4276  1580                     l10061:	
  4277                           
  4278                           ;Main_B1.c: 57: }
  4279                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4280  1580  0021               	movlb	1	; select bank1
  4281  1581  1C46               	btfss	_Timer1^(0+128),0
  4282  1582  2D75               	goto	l10057
  4283                           
  4284                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4285  1583  1046               	bcf	_Timer1^(0+128),0
  4286                           
  4287                           ;Main_B1.c: 96: my_MainTimer();
  4288  1584  3191  21E1  3195   	fcall	_my_MainTimer
  4289                           
  4290                           ;Main_B1.c: 97: WDT_Main();
  4291  1587  319A  22FB  3195   	fcall	_WDT_Main
  4292                           
  4293                           ;Main_B1.c: 98: ;;
  4294                           ;Main_B1.c: 99: ;;
  4295                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4296  158A  0022               	movlb	2	; select bank2
  4297  158B  1C20               	btfss	_myMain^(0+256),0
  4298  158C  2D75               	goto	l10057
  4299                           
  4300                           ;Main_B1.c: 101: Flash_Memory_Main();
  4301  158D  3190  20C1  3195   	fcall	_Flash_Memory_Main
  4302                           
  4303                           ;Main_B1.c: 103: LED_Main();
  4304  1590  319A  222C  3195   	fcall	_LED_Main
  4305                           
  4306                           ;Main_B1.c: 104: Buzzer_Main();
  4307  1593  3193  2364  3195   	fcall	_Buzzer_Main
  4308                           
  4309                           ;Main_B1.c: 106: ;;
  4310                           ;Main_B1.c: 107: Temp_Main();
  4311  1596  3199  213A  3195   	fcall	_Temp_Main
  4312                           
  4313                           ;Main_B1.c: 108: Load_Main();
  4314  1599  3180  2052  3195   	fcall	_Load_Main
  4315                           
  4316                           ;Main_B1.c: 109: ;;
  4317                           ;Main_B1.c: 111: ;;
  4318                           ;Main_B1.c: 112: DimmerLights_Main();
  4319  159C  319D  25CA  3195   	fcall	_DimmerLights_Main
  4320                           
  4321                           ;Main_B1.c: 113: Switch_Main();
  4322  159F  3199  21E5  3195   	fcall	_Switch_Main
  4323                           
  4324                           ;Main_B1.c: 114: ;;
  4325                           ;Main_B1.c: 115: ;;
  4326                           ;Main_B1.c: 117: RF_Main();
  4327  15A2  3199  2134  3195   	fcall	_RF_Main
  4328                           
  4329                           ;Main_B1.c: 118: DelayOff_Main();
  4330  15A5  3199  2177  3195   	fcall	_DelayOff_Main
  4331                           
  4332                           ;Main_B1.c: 119: ;;
  4333                           ;Main_B1.c: 120: ;;
  4334                           ;Main_B1.c: 121: Exception_Main();
  4335  15A8  3186  2644  3195   	fcall	_Exception_Main
  4336  15AB  2D75               	goto	l10057
  4337  15AC                     __end_of_main:	
  4338                           ;Main_B1.c: 128: }
  4339                           ;Main_B1.c: 129: }
  4340                           ;Main_B1.c: 163: }
  4341                           ;Main_B1.c: 164: return (0);
  4342                           ;	Return value of _main is never used
  4343                           
  4344                           
  4345                           	psect	text1
  4346  11E1                     __ptext1:	
  4347 ;; *************** function _my_MainTimer *****************
  4348 ;; Defined at:
  4349 ;;		line 185 in file "../src/Main_B1.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;Total ram usage:        1 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    7
  4370 ;; This function calls:
  4371 ;;		_setBuz
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _my_MainTimer
  4379  11E1                     _my_MainTimer:	
  4380                           
  4381                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4382                           
  4383                           ;incstack = 0
  4384                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4385  11E1  0022               	movlb	2	; select bank2
  4386  11E2  1820               	btfsc	_myMain^(0+256),0
  4387  11E3  29FB               	goto	l9793
  4388                           
  4389                           ;Main_B1.c: 188: myMain.PowerCount++;
  4390  11E4  3001               	movlw	1
  4391  11E5  0020               	movlb	0	; select bank0
  4392  11E6  00AE               	movwf	??_my_MainTimer
  4393  11E7  082E               	movf	??_my_MainTimer,w
  4394  11E8  0022               	movlb	2	; select bank2
  4395  11E9  07A1               	addwf	(_myMain^(0+256)+1),f
  4396                           
  4397                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4398  11EA  0821               	movf	(_myMain^(0+256)+1),w
  4399  11EB  3A4B               	xorlw	75
  4400  11EC  1D03               	skipz
  4401  11ED  0008               	return
  4402                           
  4403                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4404  11EE  01A1               	clrf	(_myMain^(0+256)+1)
  4405                           
  4406                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4407  11EF  1420               	bsf	_myMain^(0+256),0
  4408                           
  4409                           ;Main_B1.c: 196: setBuz(3, 50);
  4410  11F0  3032               	movlw	50
  4411  11F1  0020               	movlb	0	; select bank0
  4412  11F2  00AA               	movwf	setBuz@time
  4413  11F3  3000               	movlw	0
  4414  11F4  00AB               	movwf	setBuz@time+1
  4415  11F5  3003               	movlw	3
  4416  11F6  3194  24F8         	fcall	_setBuz
  4417                           
  4418                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4419  11F8  0022               	movlb	2	; select bank2
  4420  11F9  1620               	bsf	_myMain^(0+256),4
  4421                           
  4422                           ;Main_B1.c: 206: }
  4423                           ;Main_B1.c: 207: } else {
  4424  11FA  0008               	return
  4425  11FB                     l9793:	
  4426                           
  4427                           ;Main_B1.c: 208: myMain.PowerCount++;
  4428  11FB  3001               	movlw	1
  4429  11FC  0020               	movlb	0	; select bank0
  4430  11FD  00AE               	movwf	??_my_MainTimer
  4431  11FE  082E               	movf	??_my_MainTimer,w
  4432  11FF  0022               	movlb	2	; select bank2
  4433  1200  07A1               	addwf	(_myMain^(0+256)+1),f
  4434                           
  4435                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4436  1201  0821               	movf	(_myMain^(0+256)+1),w
  4437  1202  3A32               	xorlw	50
  4438  1203  1903               	btfsc	3,2
  4439                           
  4440                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4441  1204  01A1               	clrf	(_myMain^(0+256)+1)
  4442                           
  4443                           ;Main_B1.c: 226: }
  4444                           ;Main_B1.c: 228: myMain.Count1++;
  4445  1205  3001               	movlw	1
  4446  1206  07A4               	addwf	(_myMain^(0+256)+4),f
  4447  1207  3000               	movlw	0
  4448  1208  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4449                           
  4450                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4451  1209  3004               	movlw	4
  4452  120A  3E20               	addlw	_myMain& (0+255)
  4453  120B  0086               	movwf	6
  4454  120C  3001               	movlw	1	; select bank2/3
  4455  120D  0087               	movwf	7
  4456  120E  3F40               	moviw [0]fsr1
  4457  120F  3A32               	xorlw	50
  4458  1210  1D03               	skipz
  4459  1211  2A14               	goto	u11325
  4460  1212  3F41               	moviw [1]fsr1
  4461  1213  3A00               	xorlw	0
  4462  1214                     u11325:	
  4463  1214  1D03               	skipz
  4464  1215  0008               	return
  4465                           
  4466                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4467  1216  01A4               	clrf	(_myMain^(0+256)+4)
  4468  1217  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4469                           
  4470                           ;Main_B1.c: 242: if (myMain.Flag) {
  4471  1218  1CA0               	btfss	_myMain^(0+256),1
  4472  1219  2A1C               	goto	l1637
  4473                           
  4474                           ;Main_B1.c: 243: myMain.Flag = 0;
  4475  121A  10A0               	bcf	_myMain^(0+256),1
  4476                           
  4477                           ;Main_B1.c: 252: } else {
  4478  121B  0008               	return
  4479  121C                     l1637:	
  4480                           
  4481                           ;Main_B1.c: 253: myMain.Flag = 1;
  4482  121C  14A0               	bsf	_myMain^(0+256),1
  4483  121D  0008               	return
  4484  121E                     __end_of_my_MainTimer:	
  4485                           
  4486                           	psect	text2
  4487  1B59                     __ptext2:	
  4488 ;; *************** function _myMain_Initialization *****************
  4489 ;; Defined at:
  4490 ;;		line 170 in file "../src/Main_B1.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;		None               void
  4497 ;; Registers used:
  4498 ;;		wreg, fsr1l, fsr1h
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;Total ram usage:        1 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    5
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function _myMain_Initialization
  4520  1B59                     _myMain_Initialization:	
  4521                           
  4522                           ;Main_B1.c: 173: product = &_product;
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4526  1B59  3045               	movlw	__product& (0+255)
  4527  1B5A  0020               	movlb	0	; select bank0
  4528  1B5B  00A1               	movwf	??_myMain_Initialization
  4529  1B5C  0821               	movf	??_myMain_Initialization,w
  4530  1B5D  0021               	movlb	1	; select bank1
  4531  1B5E  00ED               	movwf	_product^(0+128)
  4532                           
  4533                           ;Main_B1.c: 174: product->Data[20] = 210;
  4534  1B5F  30D2               	movlw	210
  4535  1B60  0020               	movlb	0	; select bank0
  4536  1B61  00A1               	movwf	??_myMain_Initialization
  4537  1B62  0021               	movlb	1	; select bank1
  4538  1B63  086D               	movf	_product^(0+128),w
  4539  1B64  3E14               	addlw	20
  4540  1B65  0086               	movwf	6
  4541  1B66  3002               	movlw	2	; select bank4/5
  4542  1B67  0087               	movwf	7
  4543  1B68  0020               	movlb	0	; select bank0
  4544  1B69  0821               	movf	??_myMain_Initialization,w
  4545  1B6A  0081               	movwf	1
  4546  1B6B  0008               	return
  4547  1B6C                     __end_of_myMain_Initialization:	
  4548                           
  4549                           	psect	text3
  4550  125C                     __ptext3:	
  4551 ;; *************** function _getTemp_AD *****************
  4552 ;; Defined at:
  4553 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  channel         1    wreg     unsigned char 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  channel         1    6[BANK0 ] unsigned char 
  4558 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;		None               void
  4561 ;; Registers used:
  4562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;Total ram usage:        4 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    7
  4575 ;; This function calls:
  4576 ;;		_getAD
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _getTemp_AD
  4584  125C                     _getTemp_AD:	
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4588                           ;getTemp_AD@channel stored from wreg
  4589  125C  0020               	movlb	0	; select bank0
  4590  125D  00A6               	movwf	getTemp_AD@channel
  4591                           
  4592                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4593  125E  01A7               	clrf	getTemp_AD@ADRES
  4594  125F  01A8               	clrf	getTemp_AD@ADRES+1
  4595                           
  4596                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4597  1260  0021               	movlb	1	; select bank1
  4598  1261  1D5B               	btfss	_Temp^(0+128),2
  4599  1262  2A8C               	goto	l8611
  4600                           
  4601                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4602  1263  30F0               	movlw	240
  4603  1264  0020               	movlb	0	; select bank0
  4604  1265  00A5               	movwf	??_getTemp_AD
  4605  1266  0825               	movf	??_getTemp_AD,w
  4606  1267  00A1               	movwf	getAD@adcon1
  4607  1268  0826               	movf	getTemp_AD@channel,w
  4608  1269  319E  266D  3192   	fcall	_getAD
  4609  126C  0020               	movlb	0	; select bank0
  4610  126D  0822               	movf	?_getAD+1,w
  4611  126E  01A8               	clrf	getTemp_AD@ADRES+1
  4612  126F  07A8               	addwf	getTemp_AD@ADRES+1,f
  4613  1270  0821               	movf	?_getAD,w
  4614  1271  01A7               	clrf	getTemp_AD@ADRES
  4615  1272  07A7               	addwf	getTemp_AD@ADRES,f
  4616                           
  4617                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4618  1273  0828               	movf	getTemp_AD@ADRES+1,w
  4619  1274  0427               	iorwf	getTemp_AD@ADRES,w
  4620  1275  1903               	skipnz
  4621  1276  2A8C               	goto	l8611
  4622                           
  4623                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4624  1277  0828               	movf	getTemp_AD@ADRES+1,w
  4625  1278  0021               	movlb	1	; select bank1
  4626  1279  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4627  127A  1D03               	skipz
  4628  127B  2A80               	goto	u9205
  4629  127C  0020               	movlb	0	; select bank0
  4630  127D  0827               	movf	getTemp_AD@ADRES,w
  4631  127E  0021               	movlb	1	; select bank1
  4632  127F  0263               	subwf	(_Temp^(0+128)+8),w
  4633  1280                     u9205:	
  4634  1280  1803               	skipnc
  4635  1281  2A8C               	goto	l8611
  4636                           
  4637                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4638  1282  0020               	movlb	0	; select bank0
  4639  1283  0828               	movf	getTemp_AD@ADRES+1,w
  4640  1284  0021               	movlb	1	; select bank1
  4641  1285  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4642  1286  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4643  1287  0020               	movlb	0	; select bank0
  4644  1288  0827               	movf	getTemp_AD@ADRES,w
  4645  1289  0021               	movlb	1	; select bank1
  4646  128A  01E3               	clrf	(_Temp^(0+128)+8)
  4647  128B  07E3               	addwf	(_Temp^(0+128)+8),f
  4648  128C                     l8611:	
  4649                           
  4650                           ;OverTemperature_B1.c: 32: }
  4651                           ;OverTemperature_B1.c: 33: }
  4652                           ;OverTemperature_B1.c: 34: }
  4653                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4654  128C  30F0               	movlw	240
  4655  128D  0020               	movlb	0	; select bank0
  4656  128E  00A5               	movwf	??_getTemp_AD
  4657  128F  0825               	movf	??_getTemp_AD,w
  4658  1290  00A1               	movwf	getAD@adcon1
  4659  1291  0826               	movf	getTemp_AD@channel,w
  4660  1292  319E  266D         	fcall	_getAD
  4661  1294  0020               	movlb	0	; select bank0
  4662  1295  0822               	movf	?_getAD+1,w
  4663  1296  01A8               	clrf	getTemp_AD@ADRES+1
  4664  1297  07A8               	addwf	getTemp_AD@ADRES+1,f
  4665  1298  0821               	movf	?_getAD,w
  4666  1299  01A7               	clrf	getTemp_AD@ADRES
  4667  129A  07A7               	addwf	getTemp_AD@ADRES,f
  4668  129B  0008               	return
  4669  129C                     __end_of_getTemp_AD:	
  4670                           
  4671                           	psect	text4
  4672  0AA4                     __ptext4:	
  4673 ;; *************** function _getLoad_AD *****************
  4674 ;; Defined at:
  4675 ;;		line 15 in file "../src/OverLoad_B1.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  channel         1    wreg     unsigned char 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  channel         1    7[BANK0 ] unsigned char 
  4680 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4681 ;;  i               1   12[BANK0 ] unsigned char 
  4682 ;;  j               1    9[BANK0 ] unsigned char 
  4683 ;;  k               1    8[BANK0 ] unsigned char 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;		None               void
  4686 ;; Registers used:
  4687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;Total ram usage:        8 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    7
  4700 ;; This function calls:
  4701 ;;		_getAD
  4702 ;; This function is called by:
  4703 ;;		_main
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getLoad_AD
  4709  0AA4                     _getLoad_AD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getLoad_AD@channel stored from wreg
  4714  0AA4  0020               	movlb	0	; select bank0
  4715  0AA5  00A7               	movwf	getLoad_AD@channel
  4716                           
  4717                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4718  0AA6  01AC               	clrf	getLoad_AD@i
  4719  0AA7  01A9               	clrf	getLoad_AD@j
  4720  0AA8  01A8               	clrf	getLoad_AD@k
  4721                           
  4722                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4723  0AA9  01AA               	clrf	getLoad_AD@ADRES
  4724  0AAA  01AB               	clrf	getLoad_AD@ADRES+1
  4725                           
  4726                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4727  0AAB  0022               	movlb	2	; select bank2
  4728  0AAC  1E40               	btfss	_Load^(0+256),4
  4729  0AAD  0008               	return
  4730                           
  4731                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4732  0AAE  30F3               	movlw	243
  4733  0AAF  0020               	movlb	0	; select bank0
  4734  0AB0  00A5               	movwf	??_getLoad_AD
  4735  0AB1  0825               	movf	??_getLoad_AD,w
  4736  0AB2  00A1               	movwf	getAD@adcon1
  4737  0AB3  0827               	movf	getLoad_AD@channel,w
  4738  0AB4  319E  266D  318A   	fcall	_getAD
  4739  0AB7  0020               	movlb	0	; select bank0
  4740  0AB8  0822               	movf	?_getAD+1,w
  4741  0AB9  01AB               	clrf	getLoad_AD@ADRES+1
  4742  0ABA  07AB               	addwf	getLoad_AD@ADRES+1,f
  4743  0ABB  0821               	movf	?_getAD,w
  4744  0ABC  01AA               	clrf	getLoad_AD@ADRES
  4745  0ABD  07AA               	addwf	getLoad_AD@ADRES,f
  4746                           
  4747                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4748  0ABE  01AC               	clrf	getLoad_AD@i
  4749  0ABF  3004               	movlw	4
  4750  0AC0  022C               	subwf	getLoad_AD@i,w
  4751  0AC1  1803               	btfsc	3,0
  4752  0AC2  2AEA               	goto	l8579
  4753  0AC3                     l8567:	
  4754                           
  4755                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4756  0AC3  352C               	lslf	getLoad_AD@i,w
  4757  0AC4  3E4B               	addlw	(_Load+11)& (0+255)
  4758  0AC5  0086               	movwf	6
  4759  0AC6  3001               	movlw	1	; select bank2/3
  4760  0AC7  0087               	movwf	7
  4761  0AC8  3F40               	moviw [0]fsr1
  4762  0AC9  00A5               	movwf	??_getLoad_AD
  4763  0ACA  3F41               	moviw [1]fsr1
  4764  0ACB  00A6               	movwf	??_getLoad_AD+1
  4765  0ACC  082B               	movf	getLoad_AD@ADRES+1,w
  4766  0ACD  0226               	subwf	??_getLoad_AD+1,w
  4767  0ACE  1D03               	skipz
  4768  0ACF  2AD2               	goto	u9105
  4769  0AD0  082A               	movf	getLoad_AD@ADRES,w
  4770  0AD1  0225               	subwf	??_getLoad_AD,w
  4771  0AD2                     u9105:	
  4772  0AD2  1803               	skipnc
  4773  0AD3  2AE2               	goto	l8575
  4774  0AD4  08A9               	movf	getLoad_AD@j,f
  4775  0AD5  1D03               	skipz
  4776  0AD6  2AE2               	goto	l8575
  4777                           
  4778                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4779  0AD7  352C               	lslf	getLoad_AD@i,w
  4780  0AD8  3E4B               	addlw	(_Load+11)& (0+255)
  4781  0AD9  0086               	movwf	6
  4782  0ADA  3001               	movlw	1	; select bank2/3
  4783  0ADB  0087               	movwf	7
  4784  0ADC  082A               	movf	getLoad_AD@ADRES,w
  4785  0ADD  3FC0               	movwi [0]fsr1
  4786  0ADE  082B               	movf	getLoad_AD@ADRES+1,w
  4787  0ADF  3FC1               	movwi [1]fsr1
  4788                           
  4789                           ;OverLoad_B1.c: 24: j = 1;
  4790  0AE0  01A9               	clrf	getLoad_AD@j
  4791  0AE1  0AA9               	incf	getLoad_AD@j,f
  4792  0AE2                     l8575:	
  4793  0AE2  3001               	movlw	1
  4794  0AE3  00A5               	movwf	??_getLoad_AD
  4795  0AE4  0825               	movf	??_getLoad_AD,w
  4796  0AE5  07AC               	addwf	getLoad_AD@i,f
  4797  0AE6  3004               	movlw	4
  4798  0AE7  022C               	subwf	getLoad_AD@i,w
  4799  0AE8  1C03               	skipc
  4800  0AE9  2AC3               	goto	l8567
  4801  0AEA                     l8579:	
  4802                           
  4803                           ;OverLoad_B1.c: 25: }
  4804                           ;OverLoad_B1.c: 26: }
  4805                           ;OverLoad_B1.c: 27: if (j == 0) {
  4806  0AEA  08A9               	movf	getLoad_AD@j,f
  4807  0AEB  1D03               	skipz
  4808  0AEC  0008               	return
  4809                           
  4810                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4811  0AED  01AC               	clrf	getLoad_AD@i
  4812  0AEE                     L1:	
  4813  0AEE  3004               	movlw	4
  4814  0AEF  022C               	subwf	getLoad_AD@i,w
  4815  0AF0  1803               	btfsc	3,0
  4816  0AF1  0008               	return
  4817                           
  4818                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4819  0AF2  352C               	lslf	getLoad_AD@i,w
  4820  0AF3  3E55               	addlw	(_Load+21)& (0+255)
  4821  0AF4  0086               	movwf	6
  4822  0AF5  3001               	movlw	1	; select bank2/3
  4823  0AF6  0087               	movwf	7
  4824  0AF7  3F40               	moviw [0]fsr1
  4825  0AF8  00A5               	movwf	??_getLoad_AD
  4826  0AF9  3F41               	moviw [1]fsr1
  4827  0AFA  00A6               	movwf	??_getLoad_AD+1
  4828  0AFB  0826               	movf	??_getLoad_AD+1,w
  4829  0AFC  022B               	subwf	getLoad_AD@ADRES+1,w
  4830  0AFD  1D03               	skipz
  4831  0AFE  2B01               	goto	u9155
  4832  0AFF  0825               	movf	??_getLoad_AD,w
  4833  0B00  022A               	subwf	getLoad_AD@ADRES,w
  4834  0B01                     u9155:	
  4835  0B01  1803               	skipnc
  4836  0B02  2B11               	goto	l8595
  4837  0B03  08A8               	movf	getLoad_AD@k,f
  4838  0B04  1D03               	skipz
  4839  0B05  2B11               	goto	l8595
  4840                           
  4841                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4842  0B06  352C               	lslf	getLoad_AD@i,w
  4843  0B07  3E55               	addlw	(_Load+21)& (0+255)
  4844  0B08  0086               	movwf	6
  4845  0B09  3001               	movlw	1	; select bank2/3
  4846  0B0A  0087               	movwf	7
  4847  0B0B  082A               	movf	getLoad_AD@ADRES,w
  4848  0B0C  3FC0               	movwi [0]fsr1
  4849  0B0D  082B               	movf	getLoad_AD@ADRES+1,w
  4850  0B0E  3FC1               	movwi [1]fsr1
  4851                           
  4852                           ;OverLoad_B1.c: 31: k = 1;
  4853  0B0F  01A8               	clrf	getLoad_AD@k
  4854  0B10  0AA8               	incf	getLoad_AD@k,f
  4855  0B11                     l8595:	
  4856  0B11  3001               	movlw	1
  4857  0B12  00A5               	movwf	??_getLoad_AD
  4858  0B13  0825               	movf	??_getLoad_AD,w
  4859  0B14  07AC               	addwf	getLoad_AD@i,f
  4860  0B15  2AEE               	goto	L1
  4861  0B16                     __end_of_getLoad_AD:	
  4862                           
  4863                           	psect	text5
  4864  1E6D                     __ptext5:	
  4865 ;; *************** function _getAD *****************
  4866 ;; Defined at:
  4867 ;;		line 459 in file "../src/MCU_B1.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  adcon0          1    wreg     unsigned char 
  4870 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  2    1[BANK0 ] int 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4882 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;Total ram usage:        4 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    6
  4889 ;; This function calls:
  4890 ;;		_Timeout_Counter
  4891 ;;		_set_TimeoutCleared
  4892 ;; This function is called by:
  4893 ;;		_getLoad_AD
  4894 ;;		_getTemp_AD
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _getAD
  4900  1E6D                     _getAD:	
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4904                           ;getAD@adcon0 stored from wreg
  4905  1E6D  0020               	movlb	0	; select bank0
  4906  1E6E  00A4               	movwf	getAD@adcon0
  4907                           
  4908                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4909  1E6F  0824               	movf	getAD@adcon0,w
  4910  1E70  0021               	movlb	1	; select bank1
  4911  1E71  009D               	movwf	29	;volatile
  4912                           
  4913                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4914  1E72  0020               	movlb	0	; select bank0
  4915  1E73  0821               	movf	getAD@adcon1,w
  4916  1E74  0021               	movlb	1	; select bank1
  4917  1E75  009E               	movwf	30	;volatile
  4918                           
  4919                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4920  1E76  149D               	bsf	29,1	;volatile
  4921                           
  4922                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4923  1E77  2E7B               	goto	l8063
  4924  1E78                     l8061:	
  4925                           
  4926                           ;MCU_B1.c: 464: Timeout_Counter();
  4927  1E78  3188  2000  319E   	fcall	_Timeout_Counter
  4928  1E7B                     l8063:	
  4929  1E7B  0021               	movlb	1	; select bank1
  4930  1E7C  1C9D               	btfss	29,1	;volatile
  4931  1E7D  2E81               	goto	l8067
  4932  1E7E  0022               	movlb	2	; select bank2
  4933  1E7F  1D2A               	btfss	(_myMain^(0+256)+10),2
  4934  1E80  2E78               	goto	l8061
  4935  1E81                     l8067:	
  4936                           
  4937                           ;MCU_B1.c: 465: };
  4938                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4939  1E81  3199  2151         	fcall	_set_TimeoutCleared
  4940                           
  4941                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4942  1E83  0021               	movlb	1	; select bank1
  4943  1E84  081C               	movf	28,w	;volatile
  4944  1E85  0020               	movlb	0	; select bank0
  4945  1E86  01A2               	clrf	?_getAD+1
  4946  1E87  07A2               	addwf	?_getAD+1,f
  4947  1E88  0021               	movlb	1	; select bank1
  4948  1E89  081B               	movf	27,w	;volatile
  4949  1E8A  0020               	movlb	0	; select bank0
  4950  1E8B  01A1               	clrf	?_getAD
  4951  1E8C  07A1               	addwf	?_getAD,f
  4952  1E8D  0008               	return
  4953  1E8E                     __end_of_getAD:	
  4954                           
  4955                           	psect	text6
  4956  1AFB                     __ptext6:	
  4957 ;; *************** function _WDT_Main *****************
  4958 ;; Defined at:
  4959 ;;		line 1103 in file "../src/MCU_B1.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;		None
  4964 ;; Return value:  Size  Location     Type
  4965 ;;		None               void
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;Total ram usage:        1 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    6
  4980 ;; This function calls:
  4981 ;;		_WDT_Clearing
  4982 ;; This function is called by:
  4983 ;;		_main
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           
  4988                           ;psect for function _WDT_Main
  4989  1AFB                     _WDT_Main:	
  4990                           
  4991                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4992                           
  4993                           ;incstack = 0
  4994                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4995  1AFB  0021               	movlb	1	; select bank1
  4996  1AFC  1C49               	btfss	_WDT^(0+128),0
  4997  1AFD  0008               	return
  4998                           
  4999                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  5000  1AFE  3001               	movlw	1
  5001  1AFF  02CA               	subwf	(_WDT^(0+128)+1),f
  5002  1B00  084A               	movf	(_WDT^(0+128)+1),w
  5003  1B01  3AFF               	xorlw	255
  5004  1B02  1903               	skipnz
  5005  1B03  0008               	return
  5006                           
  5007                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  5008  1B04  3064               	movlw	100
  5009  1B05  0020               	movlb	0	; select bank0
  5010  1B06  00A1               	movwf	??_WDT_Main
  5011  1B07  0821               	movf	??_WDT_Main,w
  5012  1B08  0021               	movlb	1	; select bank1
  5013  1B09  00CA               	movwf	(_WDT^(0+128)+1)
  5014                           
  5015                           ;MCU_B1.c: 1107: WDT_Clearing();
  5016  1B0A  3180  2002         	fcall	_WDT_Clearing
  5017  1B0C  0008               	return
  5018  1B0D                     __end_of_WDT_Main:	
  5019                           
  5020                           	psect	text7
  5021  0002                     __ptext7:	
  5022 ;; *************** function _WDT_Clearing *****************
  5023 ;; Defined at:
  5024 ;;		line 1113 in file "../src/MCU_B1.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;		None               void
  5031 ;; Registers used:
  5032 ;;		None
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;Total ram usage:        0 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    5
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_WDT_Main
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _WDT_Clearing
  5054  0002                     _WDT_Clearing:	
  5055                           
  5056                           ;incstack = 0
  5057                           ; Regs used in _WDT_Clearing: []
  5058  0002  0064               	clrwdt	;# 
  5059  0003  0008               	return
  5060  0004                     __end_of_WDT_Clearing:	
  5061                           
  5062                           	psect	text8
  5063  193A                     __ptext8:	
  5064 ;; *************** function _Temp_Main *****************
  5065 ;; Defined at:
  5066 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    8
  5087 ;; This function calls:
  5088 ;;		_setTemp_Main
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _Temp_Main
  5096  193A                     _Temp_Main:	
  5097                           
  5098                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5099                           
  5100                           ;incstack = 0
  5101                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5102  193A  318D  25E1         	fcall	_setTemp_Main
  5103  193C  0008               	return
  5104  193D                     __end_of_Temp_Main:	
  5105                           
  5106                           	psect	text9
  5107  0DE1                     __ptext9:	
  5108 ;; *************** function _setTemp_Main *****************
  5109 ;; Defined at:
  5110 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;		None
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  AD              2    6[BANK1 ] unsigned int 
  5115 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5116 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5117 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5118 ;;  error           1    0[BANK1 ] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;		None               void
  5121 ;; Registers used:
  5122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5132 ;;Total ram usage:        9 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    7
  5135 ;; This function calls:
  5136 ;;		_getMain_All_Error_Status
  5137 ;;		_getMain_All_LightsStatus
  5138 ;;		_setBuz
  5139 ;;		_setProductData
  5140 ;; This function is called by:
  5141 ;;		_Temp_Main
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           
  5146                           ;psect for function _setTemp_Main
  5147  0DE1                     _setTemp_Main:	
  5148                           
  5149                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5153  0DE1  3000               	movlw	0
  5154  0DE2  3190  205A  318D   	fcall	_getMain_All_Error_Status
  5155  0DE5  0020               	movlb	0	; select bank0
  5156  0DE6  00E6               	movwf	??_setTemp_Main
  5157  0DE7  0866               	movf	??_setTemp_Main,w
  5158  0DE8  0021               	movlb	1	; select bank1
  5159  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5160                           
  5161                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5162  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5163  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5164  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5165  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5166                           
  5167                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5168  0DEE  319B  2320  318D   	fcall	_getMain_All_LightsStatus
  5169  0DF1  0020               	movlb	0	; select bank0
  5170  0DF2  00E6               	movwf	??_setTemp_Main
  5171  0DF3  0866               	movf	??_setTemp_Main,w
  5172  0DF4  0021               	movlb	1	; select bank1
  5173  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5174                           
  5175                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5176  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5177  0DF7  2E8B               	goto	l2001
  5178                           
  5179                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5180  0DF8  195B               	btfsc	_Temp^(0+128),2
  5181  0DF9  2E14               	goto	l9529
  5182                           
  5183                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5184  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5185  0DFB  3A01               	xorlw	1
  5186  0DFC  1D03               	skipz
  5187  0DFD  2E00               	goto	l2007
  5188  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5189  0DFF  2E02               	goto	l9521
  5190  0E00                     l2007:	
  5191  0E00  1CDB               	btfss	_Temp^(0+128),1
  5192  0E01  2E11               	goto	l9527
  5193  0E02                     l9521:	
  5194                           
  5195                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5196  0E02  3001               	movlw	1
  5197  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5198  0E04  3000               	movlw	0
  5199  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5200                           
  5201                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5202  0E06  3000               	movlw	0
  5203  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5204  0E08  30FA               	movlw	250
  5205  0E09  1903               	skipnz
  5206  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5207  0E0B  1C03               	skipc
  5208  0E0C  0008               	return
  5209                           
  5210                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5211  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5212  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5213                           
  5214                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5215  0E0F  155B               	bsf	_Temp^(0+128),2
  5216                           
  5217                           ;OverTemperature_B1.c: 83: }
  5218                           ;OverTemperature_B1.c: 84: } else {
  5219  0E10  0008               	return
  5220  0E11                     l9527:	
  5221                           
  5222                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5223  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5224  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5225                           
  5226                           ;OverTemperature_B1.c: 86: }
  5227                           ;OverTemperature_B1.c: 87: } else {
  5228  0E13  0008               	return
  5229  0E14                     l9529:	
  5230                           
  5231                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5232  0E14  3001               	movlw	1
  5233  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5234  0E16  3000               	movlw	0
  5235  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5236                           
  5237                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5238  0E18  3000               	movlw	0
  5239  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5240  0E1A  3005               	movlw	5
  5241  0E1B  1903               	skipnz
  5242  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5243  0E1D  1C03               	skipc
  5244  0E1E  0008               	return
  5245                           
  5246                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5247  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5248  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5249                           
  5250                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5251  0E21  3008               	movlw	8
  5252  0E22  3EDB               	addlw	_Temp& (0+255)
  5253  0E23  0086               	movwf	6
  5254  0E24  0187               	clrf	7
  5255  0E25  0016               	moviw fsr1++
  5256  0E26  0401               	iorwf	1,w
  5257  0E27  1903               	skipnz
  5258  0E28  2E83               	goto	l2012
  5259                           
  5260                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5261  0E29  115B               	bcf	_Temp^(0+128),2
  5262                           
  5263                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5264  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5265  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5266  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5267  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5268  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5269  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5270                           
  5271                           ;OverTemperature_B1.c: 112: SafeValue = 425;
  5272  0E30  30A9               	movlw	169
  5273  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5274  0E32  3001               	movlw	1
  5275  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5276                           
  5277                           ;OverTemperature_B1.c: 113: DangerValue = 380;
  5278  0E34  307C               	movlw	124
  5279  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5280  0E36  3001               	movlw	1
  5281  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5282                           
  5283                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5284  0E38  1CDB               	btfss	_Temp^(0+128),1
  5285  0E39  2E5A               	goto	l9559
  5286                           
  5287                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5288  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5289  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5290  0E3C  1D03               	skipz
  5291  0E3D  2E40               	goto	u10875
  5292  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5293  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5294  0E40                     u10875:	
  5295  0E40  1C03               	skipc
  5296  0E41  2E58               	goto	l9557
  5297                           
  5298                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5299  0E42  3001               	movlw	1
  5300  0E43  0020               	movlb	0	; select bank0
  5301  0E44  00E6               	movwf	??_setTemp_Main
  5302  0E45  0866               	movf	??_setTemp_Main,w
  5303  0E46  0021               	movlb	1	; select bank1
  5304  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5305                           
  5306                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5307  0E48  3003               	movlw	3
  5308  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5309  0E4A  1C03               	skipc
  5310  0E4B  2E70               	goto	l9571
  5311                           
  5312                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5313  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5314                           
  5315                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5316  0E4D  10DB               	bcf	_Temp^(0+128),1
  5317                           
  5318                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5319  0E4E  3064               	movlw	100
  5320  0E4F  0020               	movlb	0	; select bank0
  5321  0E50  00AA               	movwf	setBuz@time
  5322  0E51  3000               	movlw	0
  5323  0E52  00AB               	movwf	setBuz@time+1
  5324  0E53  3002               	movlw	2
  5325  0E54  3194  24F8  318D   	fcall	_setBuz
  5326                           
  5327                           ;OverTemperature_B1.c: 126: }
  5328                           ;OverTemperature_B1.c: 127: } else {
  5329  0E57  2E70               	goto	l9571
  5330  0E58                     l9557:	
  5331                           
  5332                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5333  0E58  0021               	movlb	1	; select bank1
  5334  0E59  2E6F               	goto	l9569
  5335  0E5A                     l9559:	
  5336                           ;OverTemperature_B1.c: 129: }
  5337                           ;OverTemperature_B1.c: 130: } else {
  5338                           
  5339                           
  5340                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5341  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5342  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5343  0E5C  1D03               	skipz
  5344  0E5D  2E60               	goto	u10895
  5345  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5346  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5347  0E60                     u10895:	
  5348  0E60  1C03               	skipc
  5349  0E61  2E6F               	goto	l9569
  5350                           
  5351                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5352  0E62  3001               	movlw	1
  5353  0E63  0020               	movlb	0	; select bank0
  5354  0E64  00E6               	movwf	??_setTemp_Main
  5355  0E65  0866               	movf	??_setTemp_Main,w
  5356  0E66  0021               	movlb	1	; select bank1
  5357  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5358                           
  5359                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5360  0E68  3003               	movlw	3
  5361  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5362  0E6A  1C03               	skipc
  5363  0E6B  2E70               	goto	l9571
  5364                           
  5365                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5366  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5367                           
  5368                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5369  0E6D  14DB               	bsf	_Temp^(0+128),1
  5370                           
  5371                           ;OverTemperature_B1.c: 136: }
  5372                           ;OverTemperature_B1.c: 137: } else {
  5373  0E6E  2E70               	goto	l9571
  5374  0E6F                     l9569:	
  5375                           
  5376                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5377  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5378  0E70                     l9571:	
  5379                           
  5380                           ;OverTemperature_B1.c: 139: }
  5381                           ;OverTemperature_B1.c: 140: }
  5382                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5383  0E70  0021               	movlb	1	; select bank1
  5384  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5385  0E72  0020               	movlb	0	; select bank0
  5386  0E73  00E6               	movwf	??_setTemp_Main
  5387  0E74  0866               	movf	??_setTemp_Main,w
  5388  0E75  00E3               	movwf	setProductData@value
  5389  0E76  3018               	movlw	24
  5390  0E77  3199  21FC  318D   	fcall	_setProductData
  5391                           
  5392                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5393  0E7A  0021               	movlb	1	; select bank1
  5394  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5395  0E7C  0020               	movlb	0	; select bank0
  5396  0E7D  00E6               	movwf	??_setTemp_Main
  5397  0E7E  0866               	movf	??_setTemp_Main,w
  5398  0E7F  00E3               	movwf	setProductData@value
  5399  0E80  3019               	movlw	25
  5400  0E81  3199  21FC         	fcall	_setProductData
  5401  0E83                     l2012:	
  5402                           
  5403                           ;OverTemperature_B1.c: 158: }
  5404                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5405  0E83  0021               	movlb	1	; select bank1
  5406  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5407  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5408                           
  5409                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5410  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5411  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5412                           
  5413                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5414  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5415  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5416                           
  5417                           ;OverTemperature_B1.c: 162: }
  5418                           ;OverTemperature_B1.c: 163: }
  5419                           ;OverTemperature_B1.c: 166: } else {
  5420  0E8A  0008               	return
  5421  0E8B                     l2001:	
  5422                           
  5423                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5424  0E8B  0022               	movlb	2	; select bank2
  5425  0E8C  1C20               	btfss	_myMain^(0+256),0
  5426  0E8D  0008               	return
  5427                           
  5428                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5429  0E8E  0021               	movlb	1	; select bank1
  5430  0E8F  145B               	bsf	_Temp^(0+128),0
  5431  0E90  0008               	return
  5432  0E91                     __end_of_setTemp_Main:	
  5433                           
  5434                           	psect	text10
  5435  1937                     __ptext10:	
  5436 ;; *************** function _Temp_Initialization *****************
  5437 ;; Defined at:
  5438 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;		None
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;		None               void
  5445 ;; Registers used:
  5446 ;;		status,2, status,0, pclath, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;Total ram usage:        0 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    6
  5459 ;; This function calls:
  5460 ;;		_setTemp_Initialization
  5461 ;; This function is called by:
  5462 ;;		_main
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _Temp_Initialization
  5468  1937                     _Temp_Initialization:	
  5469                           
  5470                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5474  1937  3187  27FF         	fcall	_setTemp_Initialization
  5475  1939  0008               	return
  5476  193A                     __end_of_Temp_Initialization:	
  5477                           
  5478                           	psect	text11
  5479  07FF                     __ptext11:	
  5480 ;; *************** function _setTemp_Initialization *****************
  5481 ;; Defined at:
  5482 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		None
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    5
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_Temp_Initialization
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _setTemp_Initialization
  5512  07FF                     _setTemp_Initialization:	
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _setTemp_Initialization: []
  5516  07FF  0008               	return
  5517  0800                     __end_of_setTemp_Initialization:	
  5518                           
  5519                           	psect	text12
  5520  19E5                     __ptext12:	
  5521 ;; *************** function _Switch_Main *****************
  5522 ;; Defined at:
  5523 ;;		line 76 in file "../src/Switch_B1.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;		None
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;		None
  5528 ;; Return value:  Size  Location     Type
  5529 ;;		None               void
  5530 ;; Registers used:
  5531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;Total ram usage:        0 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    9
  5544 ;; This function calls:
  5545 ;;		_TouchPower
  5546 ;;		_setSw_Main
  5547 ;; This function is called by:
  5548 ;;		_main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           
  5553                           ;psect for function _Switch_Main
  5554  19E5                     _Switch_Main:	
  5555                           
  5556                           ;Switch_B1.c: 79: setSw_Main(1);
  5557                           
  5558                           ;incstack = 0
  5559                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5560  19E5  3001               	movlw	1
  5561  19E6  3182  2202  3199   	fcall	_setSw_Main
  5562                           
  5563                           ;Switch_B1.c: 83: setSw_Main(2);
  5564  19E9  3002               	movlw	2
  5565  19EA  3182  2202  3199   	fcall	_setSw_Main
  5566                           
  5567                           ;Switch_B1.c: 91: TouchPower();
  5568  19ED  319B  23BE         	fcall	_TouchPower
  5569  19EF  0008               	return
  5570  19F0                     __end_of_Switch_Main:	
  5571                           
  5572                           	psect	text13
  5573  0202                     __ptext13:	
  5574 ;; *************** function _setSw_Main *****************
  5575 ;; Defined at:
  5576 ;;		line 117 in file "../src/Switch_B1.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  sw              1    wreg     unsigned char 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  sw              1   21[BANK0 ] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;		None               void
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        3 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    8
  5597 ;; This function calls:
  5598 ;;		_SwPointSelect
  5599 ;;		_getMain_All_Error_Status
  5600 ;;		_getSw_KeyStatus
  5601 ;;		_setBuz
  5602 ;;		_setDimmerLights_DimmingOn
  5603 ;;		_setDimmerLights_SwOff
  5604 ;;		_setDimmerLights_SwOn
  5605 ;;		_setRF_Learn
  5606 ;; This function is called by:
  5607 ;;		_Switch_Main
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _setSw_Main
  5613  0202                     _setSw_Main:	
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5617                           ;setSw_Main@sw stored from wreg
  5618  0202  0020               	movlb	0	; select bank0
  5619  0203  00B5               	movwf	setSw_Main@sw
  5620                           
  5621                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5622  0204  0835               	movf	setSw_Main@sw,w
  5623  0205  319C  2445  3182   	fcall	_SwPointSelect
  5624                           
  5625                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5626  0208  0021               	movlb	1	; select bank1
  5627  0209  0855               	movf	_Sw^(0+128),w
  5628  020A  0086               	movwf	6
  5629  020B  3001               	movlw	1	; select bank2/3
  5630  020C  0087               	movwf	7
  5631  020D  1C01               	btfss	1,0
  5632  020E  2B7E               	goto	l2788
  5633                           
  5634                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5635  020F  3000               	movlw	0
  5636  0210  3190  205A  3182   	fcall	_getMain_All_Error_Status
  5637  0213  3800               	iorlw	0
  5638  0214  1D03               	skipz
  5639  0215  2A34               	goto	l9665
  5640                           
  5641                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5642  0216  0021               	movlb	1	; select bank1
  5643  0217  0A55               	incf	_Sw^(0+128),w
  5644  0218  0086               	movwf	6
  5645  0219  3001               	movlw	1	; select bank2/3
  5646  021A  0087               	movwf	7
  5647  021B  1081               	bcf	1,1
  5648                           
  5649                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5650  021C  0020               	movlb	0	; select bank0
  5651  021D  0835               	movf	setSw_Main@sw,w
  5652  021E  319D  258B  3182   	fcall	_getSw_KeyStatus
  5653  0221  3A01               	xorlw	1
  5654  0222  3000               	movlw	0
  5655  0223  1903               	skipnz
  5656  0224  3001               	movlw	1
  5657  0225  0020               	movlb	0	; select bank0
  5658  0226  00B3               	movwf	??_setSw_Main
  5659  0227  0021               	movlb	1	; select bank1
  5660  0228  0855               	movf	_Sw^(0+128),w
  5661  0229  0086               	movwf	6
  5662  022A  3001               	movlw	1	; select bank2/3
  5663  022B  0087               	movwf	7
  5664  022C  0020               	movlb	0	; select bank0
  5665  022D  0DB3               	rlf	??_setSw_Main,f
  5666  022E  0801               	movf	1,w
  5667  022F  0633               	xorwf	??_setSw_Main,w
  5668  0230  39FD               	andlw	-3
  5669  0231  0633               	xorwf	??_setSw_Main,w
  5670  0232  0081               	movwf	1
  5671                           
  5672                           ;Switch_B1.c: 124: } else {
  5673  0233  2A4A               	goto	l2790
  5674  0234                     l9665:	
  5675                           
  5676                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5677  0234  0021               	movlb	1	; select bank1
  5678  0235  0A55               	incf	_Sw^(0+128),w
  5679  0236  0086               	movwf	6
  5680  0237  3001               	movlw	1	; select bank2/3
  5681  0238  0087               	movwf	7
  5682  0239  1881               	btfsc	1,1
  5683  023A  2A4A               	goto	l2790
  5684                           
  5685                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5686  023B  0A55               	incf	_Sw^(0+128),w
  5687  023C  0086               	movwf	6
  5688  023D  3001               	movlw	1	; select bank2/3
  5689  023E  0087               	movwf	7
  5690  023F  1481               	bsf	1,1
  5691                           
  5692                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5693  0240  0855               	movf	_Sw^(0+128),w
  5694  0241  0086               	movwf	6
  5695  0242  3001               	movlw	1	; select bank2/3
  5696  0243  0087               	movwf	7
  5697  0244  1081               	bcf	1,1
  5698                           
  5699                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5700  0245  0855               	movf	_Sw^(0+128),w
  5701  0246  0086               	movwf	6
  5702  0247  3001               	movlw	1	; select bank2/3
  5703  0248  0087               	movwf	7
  5704  0249  1501               	bsf	1,2
  5705  024A                     l2790:	
  5706                           
  5707                           ;Switch_B1.c: 130: }
  5708                           ;Switch_B1.c: 131: }
  5709                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5710  024A  0021               	movlb	1	; select bank1
  5711  024B  0855               	movf	_Sw^(0+128),w
  5712  024C  0086               	movwf	6
  5713  024D  3001               	movlw	1	; select bank2/3
  5714  024E  0087               	movwf	7
  5715  024F  1C81               	btfss	1,1
  5716  0250  2B26               	goto	l9715
  5717                           
  5718                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5719  0251  0855               	movf	_Sw^(0+128),w
  5720  0252  0086               	movwf	6
  5721  0253  3001               	movlw	1	; select bank2/3
  5722  0254  0087               	movwf	7
  5723  0255  1901               	btfsc	1,2
  5724  0256  2A7D               	goto	l9681
  5725                           
  5726                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5727  0257  3001               	movlw	1
  5728  0258  0020               	movlb	0	; select bank0
  5729  0259  00B3               	movwf	??_setSw_Main
  5730  025A  0021               	movlb	1	; select bank1
  5731  025B  0855               	movf	_Sw^(0+128),w
  5732  025C  3E02               	addlw	2
  5733  025D  0086               	movwf	6
  5734  025E  3001               	movlw	1	; select bank2/3
  5735  025F  0087               	movwf	7
  5736  0260  0020               	movlb	0	; select bank0
  5737  0261  0833               	movf	??_setSw_Main,w
  5738  0262  0781               	addwf	1,f
  5739                           
  5740                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5741  0263  0021               	movlb	1	; select bank1
  5742  0264  0855               	movf	_Sw^(0+128),w
  5743  0265  3E02               	addlw	2
  5744  0266  0086               	movwf	6
  5745  0267  3001               	movlw	1	; select bank2/3
  5746  0268  0087               	movwf	7
  5747  0269  3003               	movlw	3
  5748  026A  0201               	subwf	1,w
  5749  026B  1C03               	skipc
  5750  026C  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5753  026D  0855               	movf	_Sw^(0+128),w
  5754  026E  3E02               	addlw	2
  5755  026F  0086               	movwf	6
  5756  0270  3001               	movlw	1	; select bank2/3
  5757  0271  0087               	movwf	7
  5758  0272  0181               	clrf	1
  5759                           
  5760                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5761  0273  0855               	movf	_Sw^(0+128),w
  5762  0274  0086               	movwf	6
  5763  0275  3001               	movlw	1	; select bank2/3
  5764  0276  0087               	movwf	7
  5765  0277  1501               	bsf	1,2
  5766                           
  5767                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5768  0278  0020               	movlb	0	; select bank0
  5769  0279  0835               	movf	setSw_Main@sw,w
  5770  027A  3195  25AC         	fcall	_setDimmerLights_SwOn
  5771                           
  5772                           ;Switch_B1.c: 146: }
  5773                           ;Switch_B1.c: 147: } else {
  5774  027C  0008               	return
  5775  027D                     l9681:	
  5776                           
  5777                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5778  027D  0021               	movlb	1	; select bank1
  5779  027E  0855               	movf	_Sw^(0+128),w
  5780  027F  0086               	movwf	6
  5781  0280  3001               	movlw	1	; select bank2/3
  5782  0281  0087               	movwf	7
  5783  0282  1981               	btfsc	1,3
  5784  0283  2AB2               	goto	l9691
  5785                           
  5786                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5787  0284  0855               	movf	_Sw^(0+128),w
  5788  0285  3E03               	addlw	3
  5789  0286  0086               	movwf	6
  5790  0287  3001               	movlw	1	; select bank2/3
  5791  0288  0087               	movwf	7
  5792  0289  3001               	movlw	1
  5793  028A  0781               	addwf	1,f
  5794  028B  3141               	addfsr 1,1
  5795  028C  1803               	skipnc
  5796  028D  0A81               	incf	1,f
  5797                           
  5798                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5799  028E  0855               	movf	_Sw^(0+128),w
  5800  028F  3E03               	addlw	3
  5801  0290  0086               	movwf	6
  5802  0291  3001               	movlw	1	; select bank2/3
  5803  0292  0087               	movwf	7
  5804  0293  3F40               	moviw [0]fsr1
  5805  0294  0020               	movlb	0	; select bank0
  5806  0295  00B3               	movwf	??_setSw_Main
  5807  0296  3F41               	moviw [1]fsr1
  5808  0297  00B4               	movwf	??_setSw_Main+1
  5809  0298  3000               	movlw	0
  5810  0299  0234               	subwf	??_setSw_Main+1,w
  5811  029A  304B               	movlw	75
  5812  029B  1903               	skipnz
  5813  029C  0233               	subwf	??_setSw_Main,w
  5814  029D  1C03               	skipc
  5815  029E  0008               	return
  5816                           
  5817                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5818  029F  0021               	movlb	1	; select bank1
  5819  02A0  0855               	movf	_Sw^(0+128),w
  5820  02A1  3E03               	addlw	3
  5821  02A2  0086               	movwf	6
  5822  02A3  3001               	movlw	1	; select bank2/3
  5823  02A4  0087               	movwf	7
  5824  02A5  3000               	movlw	0
  5825  02A6  3FC0               	movwi [0]fsr1
  5826  02A7  3FC1               	movwi [1]fsr1
  5827                           
  5828                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5829  02A8  0855               	movf	_Sw^(0+128),w
  5830  02A9  0086               	movwf	6
  5831  02AA  3001               	movlw	1	; select bank2/3
  5832  02AB  0087               	movwf	7
  5833  02AC  1581               	bsf	1,3
  5834                           
  5835                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5836  02AD  0020               	movlb	0	; select bank0
  5837  02AE  0835               	movf	setSw_Main@sw,w
  5838  02AF  3190  2001         	fcall	_setDimmerLights_DimmingOn
  5839                           
  5840                           ;Switch_B1.c: 161: }
  5841                           ;Switch_B1.c: 162: } else {
  5842  02B1  0008               	return
  5843  02B2                     l9691:	
  5844                           
  5845                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5846  02B2  0021               	movlb	1	; select bank1
  5847  02B3  0855               	movf	_Sw^(0+128),w
  5848  02B4  0086               	movwf	6
  5849  02B5  3001               	movlw	1	; select bank2/3
  5850  02B6  0087               	movwf	7
  5851  02B7  1A01               	btfsc	1,4
  5852  02B8  2AF2               	goto	l9705
  5853                           
  5854                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5855  02B9  0855               	movf	_Sw^(0+128),w
  5856  02BA  3E05               	addlw	5
  5857  02BB  0086               	movwf	6
  5858  02BC  3001               	movlw	1	; select bank2/3
  5859  02BD  0087               	movwf	7
  5860  02BE  3001               	movlw	1
  5861  02BF  0781               	addwf	1,f
  5862  02C0  3141               	addfsr 1,1
  5863  02C1  1803               	skipnc
  5864  02C2  0A81               	incf	1,f
  5865                           
  5866                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5867  02C3  0855               	movf	_Sw^(0+128),w
  5868  02C4  3E05               	addlw	5
  5869  02C5  0086               	movwf	6
  5870  02C6  3001               	movlw	1	; select bank2/3
  5871  02C7  0087               	movwf	7
  5872  02C8  3F40               	moviw [0]fsr1
  5873  02C9  0020               	movlb	0	; select bank0
  5874  02CA  00B3               	movwf	??_setSw_Main
  5875  02CB  3F41               	moviw [1]fsr1
  5876  02CC  00B4               	movwf	??_setSw_Main+1
  5877  02CD  3000               	movlw	0
  5878  02CE  0234               	subwf	??_setSw_Main+1,w
  5879  02CF  304B               	movlw	75
  5880  02D0  1903               	skipnz
  5881  02D1  0233               	subwf	??_setSw_Main,w
  5882  02D2  1C03               	skipc
  5883  02D3  0008               	return
  5884                           
  5885                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5886  02D4  0021               	movlb	1	; select bank1
  5887  02D5  0855               	movf	_Sw^(0+128),w
  5888  02D6  3E05               	addlw	5
  5889  02D7  0086               	movwf	6
  5890  02D8  3001               	movlw	1	; select bank2/3
  5891  02D9  0087               	movwf	7
  5892  02DA  3000               	movlw	0
  5893  02DB  3FC0               	movwi [0]fsr1
  5894  02DC  3FC1               	movwi [1]fsr1
  5895                           
  5896                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5897  02DD  0855               	movf	_Sw^(0+128),w
  5898  02DE  0086               	movwf	6
  5899  02DF  3001               	movlw	1	; select bank2/3
  5900  02E0  0087               	movwf	7
  5901  02E1  1601               	bsf	1,4
  5902                           
  5903                           ;Switch_B1.c: 171: setRF_Learn(1);
  5904  02E2  3001               	movlw	1
  5905  02E3  319B  2380  3182   	fcall	_setRF_Learn
  5906                           
  5907                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5908  02E6  0022               	movlb	2	; select bank2
  5909  02E7  1EA0               	btfss	_myMain^(0+256),5
  5910  02E8  0008               	return
  5911                           
  5912                           ;Switch_B1.c: 173: setBuz(2, 100);
  5913  02E9  3064               	movlw	100
  5914  02EA  0020               	movlb	0	; select bank0
  5915  02EB  00AA               	movwf	setBuz@time
  5916  02EC  3000               	movlw	0
  5917  02ED  00AB               	movwf	setBuz@time+1
  5918  02EE  3002               	movlw	2
  5919  02EF  3194  24F8         	fcall	_setBuz
  5920                           
  5921                           ;Switch_B1.c: 174: }
  5922                           ;Switch_B1.c: 178: }
  5923                           ;Switch_B1.c: 179: } else {
  5924  02F1  0008               	return
  5925  02F2                     l9705:	
  5926                           
  5927                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5928  02F2  0021               	movlb	1	; select bank1
  5929  02F3  0855               	movf	_Sw^(0+128),w
  5930  02F4  0086               	movwf	6
  5931  02F5  3001               	movlw	1	; select bank2/3
  5932  02F6  0087               	movwf	7
  5933  02F7  1A81               	btfsc	1,5
  5934  02F8  0008               	return
  5935                           
  5936                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5937  02F9  0855               	movf	_Sw^(0+128),w
  5938  02FA  3E07               	addlw	7
  5939  02FB  0086               	movwf	6
  5940  02FC  3001               	movlw	1	; select bank2/3
  5941  02FD  0087               	movwf	7
  5942  02FE  3001               	movlw	1
  5943  02FF  0781               	addwf	1,f
  5944  0300  3141               	addfsr 1,1
  5945  0301  1803               	skipnc
  5946  0302  0A81               	incf	1,f
  5947                           
  5948                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5949  0303  0855               	movf	_Sw^(0+128),w
  5950  0304  3E07               	addlw	7
  5951  0305  0086               	movwf	6
  5952  0306  3001               	movlw	1	; select bank2/3
  5953  0307  0087               	movwf	7
  5954  0308  3F40               	moviw [0]fsr1
  5955  0309  0020               	movlb	0	; select bank0
  5956  030A  00B3               	movwf	??_setSw_Main
  5957  030B  3F41               	moviw [1]fsr1
  5958  030C  00B4               	movwf	??_setSw_Main+1
  5959  030D  3000               	movlw	0
  5960  030E  0234               	subwf	??_setSw_Main+1,w
  5961  030F  3096               	movlw	150
  5962  0310  1903               	skipnz
  5963  0311  0233               	subwf	??_setSw_Main,w
  5964  0312  1C03               	skipc
  5965  0313  0008               	return
  5966                           
  5967                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5968  0314  0021               	movlb	1	; select bank1
  5969  0315  0855               	movf	_Sw^(0+128),w
  5970  0316  3E07               	addlw	7
  5971  0317  0086               	movwf	6
  5972  0318  3001               	movlw	1	; select bank2/3
  5973  0319  0087               	movwf	7
  5974  031A  3000               	movlw	0
  5975  031B  3FC0               	movwi [0]fsr1
  5976  031C  3FC1               	movwi [1]fsr1
  5977                           
  5978                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5979  031D  0855               	movf	_Sw^(0+128),w
  5980  031E  0086               	movwf	6
  5981  031F  3001               	movlw	1	; select bank2/3
  5982  0320  0087               	movwf	7
  5983  0321  1681               	bsf	1,5
  5984                           
  5985                           ;Switch_B1.c: 187: setRF_Learn(0);
  5986  0322  3000               	movlw	0
  5987  0323  319B  2380         	fcall	_setRF_Learn
  5988                           
  5989                           ;Switch_B1.c: 190: }
  5990                           ;Switch_B1.c: 191: }
  5991                           ;Switch_B1.c: 192: }
  5992                           ;Switch_B1.c: 194: }
  5993                           ;Switch_B1.c: 195: }
  5994                           ;Switch_B1.c: 196: } else {
  5995  0325  0008               	return
  5996  0326                     l9715:	
  5997                           
  5998                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5999  0326  0021               	movlb	1	; select bank1
  6000  0327  0855               	movf	_Sw^(0+128),w
  6001  0328  0086               	movwf	6
  6002  0329  3001               	movlw	1	; select bank2/3
  6003  032A  0087               	movwf	7
  6004  032B  1D01               	btfss	1,2
  6005  032C  0008               	return
  6006                           
  6007                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6008  032D  3001               	movlw	1
  6009  032E  0020               	movlb	0	; select bank0
  6010  032F  00B3               	movwf	??_setSw_Main
  6011  0330  0021               	movlb	1	; select bank1
  6012  0331  0855               	movf	_Sw^(0+128),w
  6013  0332  3E02               	addlw	2
  6014  0333  0086               	movwf	6
  6015  0334  3001               	movlw	1	; select bank2/3
  6016  0335  0087               	movwf	7
  6017  0336  0020               	movlb	0	; select bank0
  6018  0337  0833               	movf	??_setSw_Main,w
  6019  0338  0781               	addwf	1,f
  6020                           
  6021                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6022  0339  0021               	movlb	1	; select bank1
  6023  033A  0855               	movf	_Sw^(0+128),w
  6024  033B  3E02               	addlw	2
  6025  033C  0086               	movwf	6
  6026  033D  3001               	movlw	1	; select bank2/3
  6027  033E  0087               	movwf	7
  6028  033F  3003               	movlw	3
  6029  0340  0201               	subwf	1,w
  6030  0341  1C03               	skipc
  6031  0342  0008               	return
  6032                           
  6033                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6034  0343  0855               	movf	_Sw^(0+128),w
  6035  0344  3E02               	addlw	2
  6036  0345  0086               	movwf	6
  6037  0346  3001               	movlw	1	; select bank2/3
  6038  0347  0087               	movwf	7
  6039  0348  0181               	clrf	1
  6040                           
  6041                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6042  0349  0855               	movf	_Sw^(0+128),w
  6043  034A  0086               	movwf	6
  6044  034B  3001               	movlw	1	; select bank2/3
  6045  034C  0087               	movwf	7
  6046  034D  1101               	bcf	1,2
  6047                           
  6048                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6049  034E  0855               	movf	_Sw^(0+128),w
  6050  034F  3E03               	addlw	3
  6051  0350  0086               	movwf	6
  6052  0351  3001               	movlw	1	; select bank2/3
  6053  0352  0087               	movwf	7
  6054  0353  3000               	movlw	0
  6055  0354  3FC0               	movwi [0]fsr1
  6056  0355  3FC1               	movwi [1]fsr1
  6057                           
  6058                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6059  0356  0855               	movf	_Sw^(0+128),w
  6060  0357  0086               	movwf	6
  6061  0358  3001               	movlw	1	; select bank2/3
  6062  0359  0087               	movwf	7
  6063  035A  1181               	bcf	1,3
  6064                           
  6065                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6066  035B  0855               	movf	_Sw^(0+128),w
  6067  035C  0086               	movwf	6
  6068  035D  3001               	movlw	1	; select bank2/3
  6069  035E  0087               	movwf	7
  6070  035F  1201               	bcf	1,4
  6071                           
  6072                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6073  0360  0855               	movf	_Sw^(0+128),w
  6074  0361  0086               	movwf	6
  6075  0362  3001               	movlw	1	; select bank2/3
  6076  0363  0087               	movwf	7
  6077  0364  1281               	bcf	1,5
  6078                           
  6079                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6080  0365  0855               	movf	_Sw^(0+128),w
  6081  0366  3E05               	addlw	5
  6082  0367  0086               	movwf	6
  6083  0368  3001               	movlw	1	; select bank2/3
  6084  0369  0087               	movwf	7
  6085  036A  3000               	movlw	0
  6086  036B  3FC0               	movwi [0]fsr1
  6087  036C  3FC1               	movwi [1]fsr1
  6088                           
  6089                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6090  036D  0855               	movf	_Sw^(0+128),w
  6091  036E  3E07               	addlw	7
  6092  036F  0086               	movwf	6
  6093  0370  3001               	movlw	1	; select bank2/3
  6094  0371  0087               	movwf	7
  6095  0372  3000               	movlw	0
  6096  0373  3FC0               	movwi [0]fsr1
  6097  0374  3FC1               	movwi [1]fsr1
  6098                           
  6099                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6100  0375  0020               	movlb	0	; select bank0
  6101  0376  0835               	movf	setSw_Main@sw,w
  6102  0377  3191  212E  3182   	fcall	_setDimmerLights_SwOff
  6103                           
  6104                           ;Switch_B1.c: 219: setRF_Learn(0);
  6105  037A  3000               	movlw	0
  6106  037B  319B  2380         	fcall	_setRF_Learn
  6107                           
  6108                           ;Switch_B1.c: 221: }
  6109                           ;Switch_B1.c: 222: }
  6110                           ;Switch_B1.c: 223: }
  6111                           ;Switch_B1.c: 224: } else {
  6112  037D  0008               	return
  6113  037E                     l2788:	
  6114                           
  6115                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6116  037E  0022               	movlb	2	; select bank2
  6117  037F  1C20               	btfss	_myMain^(0+256),0
  6118  0380  0008               	return
  6119                           
  6120                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6121  0381  0021               	movlb	1	; select bank1
  6122  0382  0855               	movf	_Sw^(0+128),w
  6123  0383  0086               	movwf	6
  6124  0384  3001               	movlw	1	; select bank2/3
  6125  0385  0087               	movwf	7
  6126  0386  1401               	bsf	1,0
  6127  0387  0008               	return
  6128  0388                     __end_of_setSw_Main:	
  6129                           
  6130                           	psect	text14
  6131  1B80                     __ptext14:	
  6132 ;; *************** function _setRF_Learn *****************
  6133 ;; Defined at:
  6134 ;;		line 33 in file "../src/RF_Control_B1.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  command         1    wreg     unsigned char 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;  command         1    2[BANK0 ] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;		None               void
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;Total ram usage:        2 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    5
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_setSw_Main
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           
  6163                           ;psect for function _setRF_Learn
  6164  1B80                     _setRF_Learn:	
  6165                           
  6166                           ;incstack = 0
  6167                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6168                           ;setRF_Learn@command stored from wreg
  6169  1B80  0020               	movlb	0	; select bank0
  6170  1B81  00A2               	movwf	setRF_Learn@command
  6171                           
  6172                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6173  1B82  0822               	movf	setRF_Learn@command,w
  6174  1B83  3A01               	xorlw	1
  6175  1B84  3000               	movlw	0
  6176  1B85  1903               	skipnz
  6177  1B86  3001               	movlw	1
  6178  1B87  00A1               	movwf	??_setRF_Learn
  6179  1B88  0EA1               	swapf	??_setRF_Learn,f
  6180  1B89  0DA1               	rlf	??_setRF_Learn,f
  6181  1B8A  0DA1               	rlf	??_setRF_Learn,f
  6182  1B8B  0021               	movlb	1	; select bank1
  6183  1B8C  0820               	movf	_RF1^(0+128),w
  6184  1B8D  0020               	movlb	0	; select bank0
  6185  1B8E  0621               	xorwf	??_setRF_Learn,w
  6186  1B8F  39BF               	andlw	-65
  6187  1B90  0621               	xorwf	??_setRF_Learn,w
  6188  1B91  0021               	movlb	1	; select bank1
  6189  1B92  00A0               	movwf	_RF1^(0+128)
  6190  1B93  0008               	return
  6191  1B94                     __end_of_setRF_Learn:	
  6192                           
  6193                           	psect	text15
  6194  1001                     __ptext15:	
  6195 ;; *************** function _setDimmerLights_DimmingOn *****************
  6196 ;; Defined at:
  6197 ;;		line 715 in file "../src/Dimmer_B1.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  sw              1    wreg     unsigned char 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;  sw              1    3[BANK0 ] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;		None               void
  6204 ;; Registers used:
  6205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;Total ram usage:        1 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    6
  6218 ;; This function calls:
  6219 ;;		_DimmerLights_SelectPointer
  6220 ;; This function is called by:
  6221 ;;		_setSw_Main
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _setDimmerLights_DimmingOn
  6227  1001                     _setDimmerLights_DimmingOn:	
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6231                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6232  1001  0020               	movlb	0	; select bank0
  6233  1002  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6234                           
  6235                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6236  1003  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6237  1004  319C  2400  3190   	fcall	_DimmerLights_SelectPointer
  6238                           
  6239                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6240  1007  0021               	movlb	1	; select bank1
  6241  1008  084F               	movf	_DimmerLights^(0+128),w
  6242  1009  0086               	movwf	6
  6243  100A  3001               	movlw	1	; select bank2/3
  6244  100B  0087               	movwf	7
  6245  100C  1881               	btfsc	1,1
  6246  100D  0008               	return
  6247                           
  6248                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6249  100E  084F               	movf	_DimmerLights^(0+128),w
  6250  100F  0086               	movwf	6
  6251  1010  3001               	movlw	1	; select bank2/3
  6252  1011  0087               	movwf	7
  6253  1012  1C01               	btfss	1,0
  6254  1013  0008               	return
  6255                           
  6256                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6257  1014  0A4F               	incf	_DimmerLights^(0+128),w
  6258  1015  0086               	movwf	6
  6259  1016  3001               	movlw	1	; select bank2/3
  6260  1017  0087               	movwf	7
  6261  1018  1401               	bsf	1,0
  6262                           
  6263                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6264  1019  084F               	movf	_DimmerLights^(0+128),w
  6265  101A  0086               	movwf	6
  6266  101B  3001               	movlw	1	; select bank2/3
  6267  101C  0087               	movwf	7
  6268  101D  1581               	bsf	1,3
  6269                           
  6270                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6271  101E  084F               	movf	_DimmerLights^(0+128),w
  6272  101F  0086               	movwf	6
  6273  1020  3001               	movlw	1	; select bank2/3
  6274  1021  0087               	movwf	7
  6275  1022  1601               	bsf	1,4
  6276                           
  6277                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6278  1023  084F               	movf	_DimmerLights^(0+128),w
  6279  1024  0086               	movwf	6
  6280  1025  3001               	movlw	1	; select bank2/3
  6281  1026  0087               	movwf	7
  6282  1027  1681               	bsf	1,5
  6283  1028  0008               	return
  6284  1029                     __end_of_setDimmerLights_DimmingOn:	
  6285                           
  6286                           	psect	text16
  6287  1D8B                     __ptext16:	
  6288 ;; *************** function _getSw_KeyStatus *****************
  6289 ;; Defined at:
  6290 ;;		line 237 in file "../src/Switch_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  sw              1    wreg     unsigned char 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  sw              1    5[BANK0 ] unsigned char 
  6295 ;;  status          1    4[BANK0 ] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      unsigned char 
  6298 ;; Registers used:
  6299 ;;		wreg, status,2
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:        5 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    5
  6312 ;; This function calls:
  6313 ;;		Nothing
  6314 ;; This function is called by:
  6315 ;;		_setSw_Main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _getSw_KeyStatus
  6321  1D8B                     _getSw_KeyStatus:	
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6325                           ;getSw_KeyStatus@sw stored from wreg
  6326  1D8B  0020               	movlb	0	; select bank0
  6327  1D8C  00A5               	movwf	getSw_KeyStatus@sw
  6328                           
  6329                           ;Switch_B1.c: 238: char status = 0;
  6330  1D8D  01A4               	clrf	getSw_KeyStatus@status
  6331                           
  6332                           ;Switch_B1.c: 258: if (sw == 1) {
  6333  1D8E  0825               	movf	getSw_KeyStatus@sw,w
  6334  1D8F  3A01               	xorlw	1
  6335  1D90  1D03               	skipz
  6336  1D91  2D9A               	goto	l7669
  6337                           
  6338                           ;Switch_B1.c: 259: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6339  1D92  01A2               	clrf	_getSw_KeyStatus$6569
  6340  1D93  0AA2               	incf	_getSw_KeyStatus$6569,f
  6341  1D94  1F0C               	btfss	12,6	;volatile
  6342  1D95  1A0C               	btfsc	12,4	;volatile
  6343  1D96  2D98               	goto	l7667
  6344  1D97  01A2               	clrf	_getSw_KeyStatus$6569
  6345  1D98                     l7667:	
  6346  1D98  0822               	movf	_getSw_KeyStatus$6569,w
  6347  1D99  2DA5               	goto	L2
  6348  1D9A                     l7669:	
  6349                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6350                           
  6351  1D9A  0825               	movf	getSw_KeyStatus@sw,w
  6352  1D9B  3A02               	xorlw	2
  6353  1D9C  1D03               	skipz
  6354  1D9D  2DA8               	goto	l7679
  6355                           
  6356                           ;Switch_B1.c: 261: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6357  1D9E  01A3               	clrf	_getSw_KeyStatus$6570
  6358  1D9F  0AA3               	incf	_getSw_KeyStatus$6570,f
  6359  1DA0  1C0C               	btfss	12,0	;volatile
  6360  1DA1  188D               	btfsc	13,1	;volatile
  6361  1DA2  2DA4               	goto	l7677
  6362  1DA3  01A3               	clrf	_getSw_KeyStatus$6570
  6363  1DA4                     l7677:	
  6364  1DA4  0823               	movf	_getSw_KeyStatus$6570,w
  6365  1DA5                     L2:	
  6366  1DA5  00A1               	movwf	??_getSw_KeyStatus
  6367  1DA6  0821               	movf	??_getSw_KeyStatus,w
  6368  1DA7  00A4               	movwf	getSw_KeyStatus@status
  6369  1DA8                     l7679:	
  6370                           
  6371                           ;Switch_B1.c: 262: }
  6372                           ;Switch_B1.c: 275: return status;
  6373  1DA8  0824               	movf	getSw_KeyStatus@status,w
  6374  1DA9  0008               	return
  6375  1DAA                     __end_of_getSw_KeyStatus:	
  6376                           
  6377                           	psect	text17
  6378  1C45                     __ptext17:	
  6379 ;; *************** function _SwPointSelect *****************
  6380 ;; Defined at:
  6381 ;;		line 25 in file "../src/Switch_B1.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;  sw              1    wreg     unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  sw              1    2[BANK0 ] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    5
  6402 ;; This function calls:
  6403 ;;		Nothing
  6404 ;; This function is called by:
  6405 ;;		_setSw_Main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _SwPointSelect
  6411  1C45                     _SwPointSelect:	
  6412                           
  6413                           ;incstack = 0
  6414                           ; Regs used in _SwPointSelect: [wreg]
  6415                           ;SwPointSelect@sw stored from wreg
  6416  1C45  0020               	movlb	0	; select bank0
  6417  1C46  00A2               	movwf	SwPointSelect@sw
  6418                           
  6419                           ;Switch_B1.c: 28: if (sw == 1) {
  6420  1C47  0822               	movf	SwPointSelect@sw,w
  6421  1C48  3A01               	xorlw	1
  6422  1C49  1D03               	skipz
  6423  1C4A  2C51               	goto	l7653
  6424                           
  6425                           ;Switch_B1.c: 29: Sw = &Sw1;
  6426  1C4B  30BE               	movlw	_Sw1& (0+255)
  6427  1C4C  00A1               	movwf	??_SwPointSelect
  6428  1C4D  0821               	movf	??_SwPointSelect,w
  6429  1C4E  0021               	movlb	1	; select bank1
  6430  1C4F  00D5               	movwf	_Sw^(0+128)
  6431                           
  6432                           ;Switch_B1.c: 30: }
  6433  1C50  0008               	return
  6434  1C51                     l7653:	
  6435                           
  6436                           ;Switch_B1.c: 33: else if (sw == 2) {
  6437  1C51  0020               	movlb	0	; select bank0
  6438  1C52  0822               	movf	SwPointSelect@sw,w
  6439  1C53  3A02               	xorlw	2
  6440  1C54  1D03               	skipz
  6441  1C55  0008               	return
  6442                           
  6443                           ;Switch_B1.c: 34: Sw = &Sw2;
  6444  1C56  30C7               	movlw	_Sw2& (0+255)
  6445  1C57  00A1               	movwf	??_SwPointSelect
  6446  1C58  0821               	movf	??_SwPointSelect,w
  6447  1C59  0021               	movlb	1	; select bank1
  6448  1C5A  00D5               	movwf	_Sw^(0+128)
  6449  1C5B  0008               	return
  6450  1C5C                     __end_of_SwPointSelect:	
  6451                           
  6452                           	psect	text18
  6453  1BBE                     __ptext18:	
  6454 ;; *************** function _TouchPower *****************
  6455 ;; Defined at:
  6456 ;;		line 10 in file "../src/Switch_B1.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;		None               void
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        0 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    6
  6477 ;; This function calls:
  6478 ;;		_Timeout_Counter
  6479 ;;		_set_TimeoutCleared
  6480 ;; This function is called by:
  6481 ;;		_Switch_Main
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           
  6486                           ;psect for function _TouchPower
  6487  1BBE                     _TouchPower:	
  6488                           
  6489                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6490                           
  6491                           ;incstack = 0
  6492                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6493  1BBE  0022               	movlb	2	; select bank2
  6494  1BBF  1C20               	btfss	_myMain^(0+256),0
  6495  1BC0  0008               	return
  6496                           
  6497                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6498  1BC1  0020               	movlb	0	; select bank0
  6499  1BC2  1A8E               	btfsc	14,5	;volatile
  6500  1BC3  0008               	return
  6501  1BC4  2BCA               	goto	l8279
  6502  1BC5                     l2766:	
  6503                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6504                           
  6505                           
  6506                           ;Switch_B1.c: 14: RC5 = 1;
  6507  1BC5  0020               	movlb	0	; select bank0
  6508  1BC6  168E               	bsf	14,5	;volatile
  6509                           
  6510                           ;Switch_B1.c: 15: Timeout_Counter();
  6511  1BC7  3188  2000  319B   	fcall	_Timeout_Counter
  6512  1BCA                     l8279:	
  6513  1BCA  0020               	movlb	0	; select bank0
  6514  1BCB  1A8E               	btfsc	14,5	;volatile
  6515  1BCC  2BD0               	goto	l8283
  6516  1BCD  0022               	movlb	2	; select bank2
  6517  1BCE  1D2A               	btfss	(_myMain^(0+256)+10),2
  6518  1BCF  2BC5               	goto	l2766
  6519  1BD0                     l8283:	
  6520                           
  6521                           ;Switch_B1.c: 16: }
  6522                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6523  1BD0  3199  2151         	fcall	_set_TimeoutCleared
  6524  1BD2  0008               	return
  6525  1BD3                     __end_of_TouchPower:	
  6526                           
  6527                           	psect	text19
  6528  1951                     __ptext19:	
  6529 ;; *************** function _set_TimeoutCleared *****************
  6530 ;; Defined at:
  6531 ;;		line 281 in file "../src/Main_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		status,2
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    5
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_getAD
  6556 ;;		_TouchPower
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _set_TimeoutCleared
  6562  1951                     _set_TimeoutCleared:	
  6563                           
  6564                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _set_TimeoutCleared: [status,2]
  6568  1951  0022               	movlb	2	; select bank2
  6569  1952  112A               	bcf	(_myMain^(0+256)+10),2
  6570                           
  6571                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6572  1953  01AB               	clrf	(_myMain^(0+256)+11)
  6573  1954  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6574  1955  0008               	return
  6575  1956                     __end_of_set_TimeoutCleared:	
  6576                           
  6577                           	psect	text20
  6578  0800                     __ptext20:	
  6579 ;; *************** function _Timeout_Counter *****************
  6580 ;; Defined at:
  6581 ;;		line 272 in file "../src/Main_B1.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    5
  6602 ;; This function calls:
  6603 ;;		Nothing
  6604 ;; This function is called by:
  6605 ;;		_getAD
  6606 ;;		_TouchPower
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _Timeout_Counter
  6612  0800                     _Timeout_Counter:	
  6613                           
  6614                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6615                           
  6616                           ;incstack = 0
  6617                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6618  0800  3001               	movlw	1
  6619  0801  0022               	movlb	2	; select bank2
  6620  0802  07AB               	addwf	(_myMain^(0+256)+11),f
  6621  0803  3000               	movlw	0
  6622  0804  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6623                           
  6624                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6625  0805  300B               	movlw	11
  6626  0806  3E20               	addlw	_myMain& (0+255)
  6627  0807  0086               	movwf	6
  6628  0808  3001               	movlw	1	; select bank2/3
  6629  0809  0087               	movwf	7
  6630  080A  3F40               	moviw [0]fsr1
  6631  080B  3AA8               	xorlw	168
  6632  080C  1D03               	skipz
  6633  080D  2810               	goto	u7155
  6634  080E  3F41               	moviw [1]fsr1
  6635  080F  3A61               	xorlw	97
  6636  0810                     u7155:	
  6637  0810  1D03               	skipz
  6638  0811  0008               	return
  6639                           
  6640                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6641  0812  01AB               	clrf	(_myMain^(0+256)+11)
  6642  0813  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6643                           
  6644                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6645  0814  152A               	bsf	(_myMain^(0+256)+10),2
  6646  0815  0008               	return
  6647  0816                     __end_of_Timeout_Counter:	
  6648                           
  6649                           	psect	text21
  6650  199F                     __ptext21:	
  6651 ;; *************** function _Switch_Initialization *****************
  6652 ;; Defined at:
  6653 ;;		line 46 in file "../src/Switch_B1.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;		None               void
  6660 ;; Registers used:
  6661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    8
  6674 ;; This function calls:
  6675 ;;		_setSw_Initialization
  6676 ;; This function is called by:
  6677 ;;		_main
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _Switch_Initialization
  6683  199F                     _Switch_Initialization:	
  6684                           
  6685                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6686                           
  6687                           ;incstack = 0
  6688                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6689  199F  3001               	movlw	1
  6690  19A0  3199  2197  3199   	fcall	_setSw_Initialization
  6691                           
  6692                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6693  19A3  3002               	movlw	2
  6694  19A4  3199  2197         	fcall	_setSw_Initialization
  6695  19A6  0008               	return
  6696  19A7                     __end_of_Switch_Initialization:	
  6697                           
  6698                           	psect	text22
  6699  1997                     __ptext22:	
  6700 ;; *************** function _setSw_Initialization *****************
  6701 ;; Defined at:
  6702 ;;		line 66 in file "../src/Switch_B1.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;  sw              1    wreg     unsigned char 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  sw              1    5[BANK0 ] unsigned char 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;		None               void
  6709 ;; Registers used:
  6710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;Total ram usage:        1 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    7
  6723 ;; This function calls:
  6724 ;;		_setLED
  6725 ;; This function is called by:
  6726 ;;		_Switch_Initialization
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           
  6731                           ;psect for function _setSw_Initialization
  6732  1997                     _setSw_Initialization:	
  6733                           
  6734                           ;incstack = 0
  6735                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6736                           ;setSw_Initialization@sw stored from wreg
  6737  1997  0020               	movlb	0	; select bank0
  6738  1998  00A5               	movwf	setSw_Initialization@sw
  6739                           
  6740                           ;Switch_B1.c: 68: setLED(sw, 1);
  6741  1999  01A3               	clrf	setLED@command
  6742  199A  0AA3               	incf	setLED@command,f
  6743  199B  0825               	movf	setSw_Initialization@sw,w
  6744  199C  3194  2451         	fcall	_setLED
  6745  199E  0008               	return
  6746  199F                     __end_of_setSw_Initialization:	
  6747                           
  6748                           	psect	text23
  6749  1934                     __ptext23:	
  6750 ;; *************** function _RF_Main *****************
  6751 ;; Defined at:
  6752 ;;		line 26 in file "../src/RF_Control_B1.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;		None
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;		None
  6757 ;; Return value:  Size  Location     Type
  6758 ;;		None               void
  6759 ;; Registers used:
  6760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;Total ram usage:        0 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:   12
  6773 ;; This function calls:
  6774 ;;		_setRF_Main
  6775 ;; This function is called by:
  6776 ;;		_main
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function _RF_Main
  6782  1934                     _RF_Main:	
  6783                           
  6784                           ;RF_Control_B1.c: 28: setRF_Main();
  6785                           
  6786                           ;incstack = 0
  6787                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6788  1934  3185  256D         	fcall	_setRF_Main
  6789  1936  0008               	return
  6790  1937                     __end_of_RF_Main:	
  6791                           
  6792                           	psect	text24
  6793  056D                     __ptext24:	
  6794 ;; *************** function _setRF_Main *****************
  6795 ;; Defined at:
  6796 ;;		line 53 in file "../src/RF_Control_B1.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  error           1    6[BANK1 ] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;		None               void
  6803 ;; Registers used:
  6804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;Total ram usage:        2 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:   11
  6817 ;; This function calls:
  6818 ;;		_CC2500_PowerOnInitial
  6819 ;;		_CC2500_RxData
  6820 ;;		_CC2500_TxData
  6821 ;;		_CC2500_WriteCommand
  6822 ;;		_RF_RxDisable
  6823 ;;		___lwdiv
  6824 ;;		_getBuz_GO
  6825 ;;		_getRF_KeyStatus
  6826 ;;		_getRxData
  6827 ;; This function is called by:
  6828 ;;		_RF_Main
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           
  6833                           ;psect for function _setRF_Main
  6834  056D                     _setRF_Main:	
  6835                           
  6836                           ;RF_Control_B1.c: 54: char error = 0;
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6840  056D  0021               	movlb	1	; select bank1
  6841  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6842                           
  6843                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6844  056F  1C20               	btfss	_RF1^(0+128),0
  6845  0570  2E3E               	goto	l2369
  6846                           
  6847                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6848  0571  319A  227F  3185   	fcall	_getBuz_GO
  6849  0574  0020               	movlb	0	; select bank0
  6850  0575  0822               	movf	?_getBuz_GO+1,w
  6851  0576  0421               	iorwf	?_getBuz_GO,w
  6852  0577  1D03               	skipz
  6853  0578  2E1F               	goto	l9633
  6854                           
  6855                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6856  0579  319A  2290  3185   	fcall	_getRF_KeyStatus
  6857  057C  3A01               	xorlw	1
  6858  057D  3000               	movlw	0
  6859  057E  1903               	skipnz
  6860  057F  3001               	movlw	1
  6861  0580  0021               	movlb	1	; select bank1
  6862  0581  00EA               	movwf	??_setRF_Main^(0+128)
  6863  0582  0CEA               	rrf	??_setRF_Main^(0+128),f
  6864  0583  0CEA               	rrf	??_setRF_Main^(0+128),f
  6865  0584  0820               	movf	_RF1^(0+128),w
  6866  0585  066A               	xorwf	??_setRF_Main^(0+128),w
  6867  0586  397F               	andlw	-129
  6868  0587  066A               	xorwf	??_setRF_Main^(0+128),w
  6869  0588  00A0               	movwf	_RF1^(0+128)
  6870                           
  6871                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6872  0589  1FA0               	btfss	_RF1^(0+128),7
  6873  058A  2D8D               	goto	l2373
  6874  058B  1F20               	btfss	_RF1^(0+128),6
  6875  058C  2E1F               	goto	l9633
  6876  058D                     l2373:	
  6877                           
  6878                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6879  058D  1D20               	btfss	_RF1^(0+128),2
  6880  058E  2DDE               	goto	l2374
  6881                           
  6882                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6883  058F  1B20               	btfsc	_RF1^(0+128),6
  6884  0590  2DD9               	goto	l9605
  6885                           
  6886                           ;RF_Control_B1.c: 68: RF1.Count++;
  6887  0591  3001               	movlw	1
  6888  0592  07A2               	addwf	(_RF1^(0+128)+2),f
  6889  0593  3000               	movlw	0
  6890  0594  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6891                           
  6892                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6893  0595  3014               	movlw	20
  6894  0596  0020               	movlb	0	; select bank0
  6895  0597  00A1               	movwf	___lwdiv@divisor
  6896  0598  3000               	movlw	0
  6897  0599  00A2               	movwf	___lwdiv@divisor+1
  6898  059A  0021               	movlb	1	; select bank1
  6899  059B  0828               	movf	((_RF1+1)^(0+128)+7),w
  6900  059C  0020               	movlb	0	; select bank0
  6901  059D  01A4               	clrf	___lwdiv@dividend+1
  6902  059E  07A4               	addwf	___lwdiv@dividend+1,f
  6903  059F  0021               	movlb	1	; select bank1
  6904  05A0  0827               	movf	(_RF1^(0+128)+7),w
  6905  05A1  0020               	movlb	0	; select bank0
  6906  05A2  01A3               	clrf	___lwdiv@dividend
  6907  05A3  07A3               	addwf	___lwdiv@dividend,f
  6908  05A4  3190  20F7  3185   	fcall	___lwdiv
  6909  05A7  0020               	movlb	0	; select bank0
  6910  05A8  0822               	movf	?___lwdiv+1,w
  6911  05A9  0021               	movlb	1	; select bank1
  6912  05AA  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6913  05AB  1D03               	skipz
  6914  05AC  2DB1               	goto	u10985
  6915  05AD  0020               	movlb	0	; select bank0
  6916  05AE  0821               	movf	?___lwdiv,w
  6917  05AF  0021               	movlb	1	; select bank1
  6918  05B0  0222               	subwf	(_RF1^(0+128)+2),w
  6919  05B1                     u10985:	
  6920  05B1  1C03               	skipc
  6921  05B2  2E1F               	goto	l9633
  6922                           
  6923                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6924  05B3  3014               	movlw	20
  6925  05B4  0020               	movlb	0	; select bank0
  6926  05B5  00A1               	movwf	___lwdiv@divisor
  6927  05B6  3000               	movlw	0
  6928  05B7  00A2               	movwf	___lwdiv@divisor+1
  6929  05B8  0021               	movlb	1	; select bank1
  6930  05B9  0828               	movf	((_RF1+1)^(0+128)+7),w
  6931  05BA  0020               	movlb	0	; select bank0
  6932  05BB  01A4               	clrf	___lwdiv@dividend+1
  6933  05BC  07A4               	addwf	___lwdiv@dividend+1,f
  6934  05BD  0021               	movlb	1	; select bank1
  6935  05BE  0827               	movf	(_RF1^(0+128)+7),w
  6936  05BF  0020               	movlb	0	; select bank0
  6937  05C0  01A3               	clrf	___lwdiv@dividend
  6938  05C1  07A3               	addwf	___lwdiv@dividend,f
  6939  05C2  3190  20F7  3185   	fcall	___lwdiv
  6940  05C5  0020               	movlb	0	; select bank0
  6941  05C6  0822               	movf	?___lwdiv+1,w
  6942  05C7  0021               	movlb	1	; select bank1
  6943  05C8  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6944  05C9  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6945  05CA  0020               	movlb	0	; select bank0
  6946  05CB  0821               	movf	?___lwdiv,w
  6947  05CC  0021               	movlb	1	; select bank1
  6948  05CD  01A2               	clrf	(_RF1^(0+128)+2)
  6949  05CE  07A2               	addwf	(_RF1^(0+128)+2),f
  6950                           
  6951                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6952  05CF  1120               	bcf	_RF1^(0+128),2
  6953                           
  6954                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6955  05D0  01AA               	clrf	(_RF1^(0+128)+10)
  6956  05D1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6957                           
  6958                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6959  05D2  3187  27F0  3185   	fcall	_RF_RxDisable
  6960                           
  6961                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6962  05D5  3188  20E8  3185   	fcall	_CC2500_TxData
  6963                           
  6964                           ;RF_Control_B1.c: 77: }
  6965                           ;RF_Control_B1.c: 78: } else {
  6966  05D8  2E1F               	goto	l9633
  6967  05D9                     l9605:	
  6968                           
  6969                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6970  05D9  0021               	movlb	1	; select bank1
  6971  05DA  01A2               	clrf	(_RF1^(0+128)+2)
  6972  05DB  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6973                           
  6974                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6975  05DC  1120               	bcf	_RF1^(0+128),2
  6976                           
  6977                           ;RF_Control_B1.c: 81: }
  6978                           ;RF_Control_B1.c: 82: } else {
  6979  05DD  2E1F               	goto	l9633
  6980  05DE                     l2374:	
  6981                           
  6982                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6983  05DE  1DA0               	btfss	_RF1^(0+128),3
  6984  05DF  2DED               	goto	l9619
  6985                           
  6986                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6987  05E0  3189  2155  3185   	fcall	_CC2500_RxData
  6988                           
  6989                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6990  05E3  0021               	movlb	1	; select bank1
  6991  05E4  1CA0               	btfss	_RF1^(0+128),1
  6992  05E5  2E1F               	goto	l9633
  6993                           
  6994                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6995  05E6  10A0               	bcf	_RF1^(0+128),1
  6996                           
  6997                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6998  05E7  01AA               	clrf	(_RF1^(0+128)+10)
  6999  05E8  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7000                           
  7001                           ;RF_Control_B1.c: 97: getRxData();
  7002  05E9  318A  2232  3185   	fcall	_getRxData
  7003                           
  7004                           ;RF_Control_B1.c: 100: }
  7005                           ;RF_Control_B1.c: 101: } else {
  7006  05EC  2E1F               	goto	l9633
  7007  05ED                     l9619:	
  7008                           
  7009                           ;RF_Control_B1.c: 102: RF1.Count++;
  7010  05ED  3001               	movlw	1
  7011  05EE  0021               	movlb	1	; select bank1
  7012  05EF  07A2               	addwf	(_RF1^(0+128)+2),f
  7013  05F0  3000               	movlw	0
  7014  05F1  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7015                           
  7016                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7017  05F2  3014               	movlw	20
  7018  05F3  0020               	movlb	0	; select bank0
  7019  05F4  00A1               	movwf	___lwdiv@divisor
  7020  05F5  3000               	movlw	0
  7021  05F6  00A2               	movwf	___lwdiv@divisor+1
  7022  05F7  0021               	movlb	1	; select bank1
  7023  05F8  0828               	movf	((_RF1+1)^(0+128)+7),w
  7024  05F9  0020               	movlb	0	; select bank0
  7025  05FA  01A4               	clrf	___lwdiv@dividend+1
  7026  05FB  07A4               	addwf	___lwdiv@dividend+1,f
  7027  05FC  0021               	movlb	1	; select bank1
  7028  05FD  0827               	movf	(_RF1^(0+128)+7),w
  7029  05FE  0020               	movlb	0	; select bank0
  7030  05FF  01A3               	clrf	___lwdiv@dividend
  7031  0600  07A3               	addwf	___lwdiv@dividend,f
  7032  0601  3190  20F7  3185   	fcall	___lwdiv
  7033  0604  0020               	movlb	0	; select bank0
  7034  0605  0822               	movf	?___lwdiv+1,w
  7035  0606  0021               	movlb	1	; select bank1
  7036  0607  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7037  0608  1D03               	skipz
  7038  0609  2E0E               	goto	u11015
  7039  060A  0020               	movlb	0	; select bank0
  7040  060B  0821               	movf	?___lwdiv,w
  7041  060C  0021               	movlb	1	; select bank1
  7042  060D  0222               	subwf	(_RF1^(0+128)+2),w
  7043  060E                     u11015:	
  7044  060E  1C03               	skipc
  7045  060F  2E1F               	goto	l9633
  7046                           
  7047                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7048  0610  01A2               	clrf	(_RF1^(0+128)+2)
  7049  0611  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7050                           
  7051                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7052  0612  15A0               	bsf	_RF1^(0+128),3
  7053                           
  7054                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7055  0613  3036               	movlw	54
  7056  0614  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7057                           
  7058                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7059  0617  303A               	movlw	58
  7060  0618  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7061                           
  7062                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7063  061B  3034               	movlw	52
  7064  061C  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7065  061F                     l9633:	
  7066                           
  7067                           ;RF_Control_B1.c: 111: }
  7068                           ;RF_Control_B1.c: 112: }
  7069                           ;RF_Control_B1.c: 113: }
  7070                           ;RF_Control_B1.c: 114: }
  7071                           ;RF_Control_B1.c: 115: }
  7072                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7073  061F  3001               	movlw	1
  7074  0620  0021               	movlb	1	; select bank1
  7075  0621  07AA               	addwf	(_RF1^(0+128)+10),f
  7076  0622  3000               	movlw	0
  7077  0623  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7078                           
  7079                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7080  0624  300B               	movlw	11
  7081  0625  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7082  0626  30B9               	movlw	185
  7083  0627  1903               	skipnz
  7084  0628  022A               	subwf	(_RF1^(0+128)+10),w
  7085  0629  1C03               	skipc
  7086  062A  2E37               	goto	l9647
  7087                           
  7088                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7089  062B  01AA               	clrf	(_RF1^(0+128)+10)
  7090  062C  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7091                           
  7092                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7093  062D  11A0               	bcf	_RF1^(0+128),3
  7094                           
  7095                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7096  062E  10A0               	bcf	_RF1^(0+128),1
  7097                           
  7098                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7099  062F  3036               	movlw	54
  7100  0630  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7101                           
  7102                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7103  0633  303A               	movlw	58
  7104  0634  319C  24A8  3185   	fcall	_CC2500_WriteCommand
  7105  0637                     l9647:	
  7106                           
  7107                           ;RF_Control_B1.c: 125: }
  7108                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7109  0637  0021               	movlb	1	; select bank1
  7110  0638  1F21               	btfss	(_RF1^(0+128)+1),6
  7111  0639  0008               	return
  7112                           
  7113                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7114  063A  1321               	bcf	(_RF1^(0+128)+1),6
  7115                           
  7116                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7117  063B  319B  23A9         	fcall	_CC2500_PowerOnInitial
  7118                           
  7119                           ;RF_Control_B1.c: 130: }
  7120                           ;RF_Control_B1.c: 132: } else {
  7121  063D  0008               	return
  7122  063E                     l2369:	
  7123                           
  7124                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7125  063E  0022               	movlb	2	; select bank2
  7126  063F  1C20               	btfss	_myMain^(0+256),0
  7127  0640  0008               	return
  7128                           
  7129                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7130  0641  0021               	movlb	1	; select bank1
  7131  0642  1420               	bsf	_RF1^(0+128),0
  7132  0643  0008               	return
  7133  0644                     __end_of_setRF_Main:	
  7134                           
  7135                           	psect	text25
  7136  0A32                     __ptext25:	
  7137 ;; *************** function _getRxData *****************
  7138 ;; Defined at:
  7139 ;;		line 227 in file "../src/RF_Control_B1.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  error           1    4[BANK1 ] unsigned char 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;		None               void
  7146 ;; Registers used:
  7147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;Total ram usage:        2 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:   10
  7160 ;; This function calls:
  7161 ;;		_getMain_All_Error_Status
  7162 ;;		_setControl_Lights_Table
  7163 ;;		_setLog_Code
  7164 ;;		_setTxData
  7165 ;; This function is called by:
  7166 ;;		_setRF_Main
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function _getRxData
  7172  0A32                     _getRxData:	
  7173                           
  7174                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7178  0A32  0023               	movlb	3	; select bank3
  7179  0A33  0820               	movf	_RF_Data^(0+384),w
  7180  0A34  3AAA               	xorlw	170
  7181  0A35  1D03               	skipz
  7182  0A36  2A48               	goto	l9421
  7183  0A37  0821               	movf	(_RF_Data^(0+384)+1),w
  7184  0A38  3A01               	xorlw	1
  7185  0A39  1D03               	skipz
  7186  0A3A  2A48               	goto	l9421
  7187                           
  7188                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7189  0A3B  3055               	movlw	85
  7190  0A3C  0021               	movlb	1	; select bank1
  7191  0A3D  00E8               	movwf	??_getRxData^(0+128)
  7192  0A3E  086D               	movf	_product^(0+128),w
  7193  0A3F  3E02               	addlw	2
  7194  0A40  0086               	movwf	6
  7195  0A41  3002               	movlw	2	; select bank4/5
  7196  0A42  0087               	movwf	7
  7197  0A43  0868               	movf	??_getRxData^(0+128),w
  7198  0A44  0081               	movwf	1
  7199                           
  7200                           ;RF_Control_B1.c: 231: setTxData();
  7201  0A45  318F  2745         	fcall	_setTxData
  7202                           
  7203                           ;RF_Control_B1.c: 235: } else {
  7204  0A47  0008               	return
  7205  0A48                     l9421:	
  7206                           
  7207                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7208  0A48  3000               	movlw	0
  7209  0A49  3190  205A  318A   	fcall	_getMain_All_Error_Status
  7210  0A4C  0021               	movlb	1	; select bank1
  7211  0A4D  00E8               	movwf	??_getRxData^(0+128)
  7212  0A4E  0868               	movf	??_getRxData^(0+128),w
  7213  0A4F  00E9               	movwf	getRxData@error^(0+128)
  7214                           
  7215                           ;RF_Control_B1.c: 237: if (error == 0) {
  7216  0A50  08E9               	movf	getRxData@error^(0+128),f
  7217  0A51  1D03               	skipz
  7218  0A52  2AA2               	goto	l2414
  7219                           
  7220                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7221  0A53  1F20               	btfss	_RF1^(0+128),6
  7222  0A54  2A60               	goto	l9433
  7223                           
  7224                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7225  0A55  0023               	movlb	3	; select bank3
  7226  0A56  08A0               	movf	_RF_Data^(0+384),f
  7227  0A57  1D03               	skipz
  7228  0A58  0008               	return
  7229  0A59  0821               	movf	(_RF_Data^(0+384)+1),w
  7230  0A5A  3A64               	xorlw	100
  7231  0A5B  1D03               	skipz
  7232  0A5C  0008               	return
  7233                           
  7234                           ;RF_Control_B1.c: 241: setLog_Code();
  7235  0A5D  3190  208D         	fcall	_setLog_Code
  7236                           
  7237                           ;RF_Control_B1.c: 242: }
  7238                           ;RF_Control_B1.c: 243: } else {
  7239  0A5F  0008               	return
  7240  0A60                     l9433:	
  7241                           
  7242                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7243  0A60  0023               	movlb	3	; select bank3
  7244  0A61  0834               	movf	(_RF_Data^(0+384)+20),w
  7245  0A62  3AD2               	xorlw	210
  7246  0A63  1903               	skipnz
  7247  0A64  2A69               	goto	l9437
  7248  0A65  0834               	movf	(_RF_Data^(0+384)+20),w
  7249  0A66  3A0A               	xorlw	10
  7250  0A67  1D03               	skipz
  7251  0A68  0008               	return
  7252  0A69                     l9437:	
  7253                           
  7254                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7255  0A69  08A0               	movf	_RF_Data^(0+384),f
  7256  0A6A  1D03               	skipz
  7257  0A6B  0008               	return
  7258  0A6C  0821               	movf	(_RF_Data^(0+384)+1),w
  7259  0A6D  3A02               	xorlw	2
  7260  0A6E  1D03               	skipz
  7261  0A6F  0008               	return
  7262                           
  7263                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7264  0A70  082C               	movf	(_RF_Data^(0+384)+12),w
  7265  0A71  3AFF               	xorlw	255
  7266  0A72  1D03               	skipz
  7267  0A73  2A7E               	goto	l9449
  7268  0A74  082D               	movf	(_RF_Data^(0+384)+13),w
  7269  0A75  3AFF               	xorlw	255
  7270  0A76  1D03               	skipz
  7271  0A77  2A7E               	goto	l9449
  7272  0A78  082E               	movf	(_RF_Data^(0+384)+14),w
  7273  0A79  3AFF               	xorlw	255
  7274  0A7A  1D03               	skipz
  7275  0A7B  2A7E               	goto	l9449
  7276                           
  7277                           ;RF_Control_B1.c: 249: __nop();
  7278  0A7C  0000               	nop
  7279                           
  7280                           ;RF_Control_B1.c: 250: } else {
  7281  0A7D  0008               	return
  7282  0A7E                     l9449:	
  7283                           
  7284                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7285  0A7E  0021               	movlb	1	; select bank1
  7286  0A7F  086D               	movf	_product^(0+128),w
  7287  0A80  3E0C               	addlw	12
  7288  0A81  0086               	movwf	6
  7289  0A82  3002               	movlw	2	; select bank4/5
  7290  0A83  0087               	movwf	7
  7291  0A84  0023               	movlb	3	; select bank3
  7292  0A85  082C               	movf	(_RF_Data^(0+384)+12),w
  7293  0A86  0601               	xorwf	1,w
  7294  0A87  1D03               	skipz
  7295  0A88  0008               	return
  7296  0A89  0021               	movlb	1	; select bank1
  7297  0A8A  086D               	movf	_product^(0+128),w
  7298  0A8B  3E0D               	addlw	13
  7299  0A8C  0086               	movwf	6
  7300  0A8D  3002               	movlw	2	; select bank4/5
  7301  0A8E  0087               	movwf	7
  7302  0A8F  0023               	movlb	3	; select bank3
  7303  0A90  082D               	movf	(_RF_Data^(0+384)+13),w
  7304  0A91  0601               	xorwf	1,w
  7305  0A92  1D03               	skipz
  7306  0A93  0008               	return
  7307  0A94  0021               	movlb	1	; select bank1
  7308  0A95  086D               	movf	_product^(0+128),w
  7309  0A96  3E0E               	addlw	14
  7310  0A97  0086               	movwf	6
  7311  0A98  3002               	movlw	2	; select bank4/5
  7312  0A99  0087               	movwf	7
  7313  0A9A  0023               	movlb	3	; select bank3
  7314  0A9B  082E               	movf	(_RF_Data^(0+384)+14),w
  7315  0A9C  0601               	xorwf	1,w
  7316  0A9D  1D03               	skipz
  7317  0A9E  0008               	return
  7318                           
  7319                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7320  0A9F  318C  24A9         	fcall	_setControl_Lights_Table
  7321                           
  7322                           ;RF_Control_B1.c: 253: }
  7323                           ;RF_Control_B1.c: 254: }
  7324                           ;RF_Control_B1.c: 256: }
  7325                           ;RF_Control_B1.c: 267: }
  7326                           ;RF_Control_B1.c: 268: }
  7327                           ;RF_Control_B1.c: 269: } else {
  7328  0AA1  0008               	return
  7329  0AA2                     l2414:	
  7330                           
  7331                           ;RF_Control_B1.c: 270: __nop();
  7332  0AA2  0000               	nop
  7333  0AA3  0008               	return
  7334  0AA4                     __end_of_getRxData:	
  7335                           
  7336                           	psect	text26
  7337  108D                     __ptext26:	
  7338 ;; *************** function _setLog_Code *****************
  7339 ;; Defined at:
  7340 ;;		line 276 in file "../src/RF_Control_B1.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;		None               void
  7347 ;; Registers used:
  7348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        1 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    7
  7361 ;; This function calls:
  7362 ;;		_setBuz
  7363 ;;		_setMemory_LoopSave
  7364 ;;		_setMemory_Modify
  7365 ;;		_setProductData
  7366 ;; This function is called by:
  7367 ;;		_getRxData
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function _setLog_Code
  7373  108D                     _setLog_Code:	
  7374                           
  7375                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7376                           
  7377                           ;incstack = 0
  7378                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7379  108D  0021               	movlb	1	; select bank1
  7380  108E  1320               	bcf	_RF1^(0+128),6
  7381                           
  7382                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7383  108F  0023               	movlb	3	; select bank3
  7384  1090  082C               	movf	(_RF_Data^(0+384)+12),w
  7385  1091  0020               	movlb	0	; select bank0
  7386  1092  00E6               	movwf	??_setLog_Code
  7387  1093  0866               	movf	??_setLog_Code,w
  7388  1094  00E3               	movwf	setProductData@value
  7389  1095  300C               	movlw	12
  7390  1096  3199  21FC  3190   	fcall	_setProductData
  7391                           
  7392                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7393  1099  0023               	movlb	3	; select bank3
  7394  109A  082D               	movf	(_RF_Data^(0+384)+13),w
  7395  109B  0020               	movlb	0	; select bank0
  7396  109C  00E6               	movwf	??_setLog_Code
  7397  109D  0866               	movf	??_setLog_Code,w
  7398  109E  00E3               	movwf	setProductData@value
  7399  109F  300D               	movlw	13
  7400  10A0  3199  21FC  3190   	fcall	_setProductData
  7401                           
  7402                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7403  10A3  0023               	movlb	3	; select bank3
  7404  10A4  082E               	movf	(_RF_Data^(0+384)+14),w
  7405  10A5  0020               	movlb	0	; select bank0
  7406  10A6  00E6               	movwf	??_setLog_Code
  7407  10A7  0866               	movf	??_setLog_Code,w
  7408  10A8  00E3               	movwf	setProductData@value
  7409  10A9  300E               	movlw	14
  7410  10AA  3199  21FC  3190   	fcall	_setProductData
  7411                           
  7412                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7413  10AD  3064               	movlw	100
  7414  10AE  0020               	movlb	0	; select bank0
  7415  10AF  00AA               	movwf	setBuz@time
  7416  10B0  3000               	movlw	0
  7417  10B1  00AB               	movwf	setBuz@time+1
  7418  10B2  3001               	movlw	1
  7419  10B3  3194  24F8  3190   	fcall	_setBuz
  7420                           
  7421                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7422  10B6  0022               	movlb	2	; select bank2
  7423  10B7  1EA0               	btfss	_myMain^(0+256),5
  7424  10B8  28BD               	goto	l2429
  7425                           
  7426                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7427  10B9  3001               	movlw	1
  7428  10BA  319B  2346  3190   	fcall	_setMemory_LoopSave
  7429  10BD                     l2429:	
  7430                           
  7431                           ;RF_Control_B1.c: 284: }
  7432                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7433  10BD  3001               	movlw	1
  7434  10BE  319B  2333         	fcall	_setMemory_Modify
  7435  10C0  0008               	return
  7436  10C1                     __end_of_setLog_Code:	
  7437                           
  7438                           	psect	text27
  7439  1B46                     __ptext27:	
  7440 ;; *************** function _setMemory_LoopSave *****************
  7441 ;; Defined at:
  7442 ;;		line 1076 in file "../src/MCU_B1.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  command         1    wreg     unsigned char 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  command         1    2[BANK0 ] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;		None               void
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;Total ram usage:        2 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    5
  7463 ;; This function calls:
  7464 ;;		Nothing
  7465 ;; This function is called by:
  7466 ;;		_setLog_Code
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function _setMemory_LoopSave
  7472  1B46                     _setMemory_LoopSave:	
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7476                           ;setMemory_LoopSave@command stored from wreg
  7477  1B46  0020               	movlb	0	; select bank0
  7478  1B47  00A2               	movwf	setMemory_LoopSave@command
  7479                           
  7480                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7481  1B48  0822               	movf	setMemory_LoopSave@command,w
  7482  1B49  3A01               	xorlw	1
  7483  1B4A  3000               	movlw	0
  7484  1B4B  1903               	skipnz
  7485  1B4C  3001               	movlw	1
  7486  1B4D  00A1               	movwf	??_setMemory_LoopSave
  7487  1B4E  0DA1               	rlf	??_setMemory_LoopSave,f
  7488  1B4F  0DA1               	rlf	??_setMemory_LoopSave,f
  7489  1B50  0024               	movlb	4	; select bank4
  7490  1B51  0844               	movf	(_Memory^(0+512)+36),w
  7491  1B52  0020               	movlb	0	; select bank0
  7492  1B53  0621               	xorwf	??_setMemory_LoopSave,w
  7493  1B54  39FB               	andlw	-5
  7494  1B55  0621               	xorwf	??_setMemory_LoopSave,w
  7495  1B56  0024               	movlb	4	; select bank4
  7496  1B57  00C4               	movwf	(_Memory^(0+512)+36)
  7497  1B58  0008               	return
  7498  1B59                     __end_of_setMemory_LoopSave:	
  7499                           
  7500                           	psect	text28
  7501  0CA9                     __ptext28:	
  7502 ;; *************** function _setControl_Lights_Table *****************
  7503 ;; Defined at:
  7504 ;;		line 289 in file "../src/RF_Control_B1.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;Total ram usage:        0 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    9
  7525 ;; This function calls:
  7526 ;;		_getDimmerLights_Status
  7527 ;;		_getMain_All_LightsStatus
  7528 ;;		_setCmd_Status
  7529 ;;		_setDimmerLights_SwOff
  7530 ;;		_setDimmerLights_SwOn
  7531 ;;		_setProductData
  7532 ;;		_setRFSW_AdjControl
  7533 ;;		_setRFSW_Control
  7534 ;;		_setTxData
  7535 ;; This function is called by:
  7536 ;;		_getRxData
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function _setControl_Lights_Table
  7542  0CA9                     _setControl_Lights_Table:	
  7543                           
  7544                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7545                           
  7546                           ;incstack = 0
  7547                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7548  0CA9  2D22               	goto	l9339
  7549  0CAA                     l9315:	
  7550                           ;RF_Control_B1.c: 292: case 0x00:
  7551                           
  7552                           
  7553                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7554  0CAA  319B  2320  318C   	fcall	_getMain_All_LightsStatus
  7555  0CAD  3A01               	xorlw	1
  7556  0CAE  1D03               	skipz
  7557  0CAF  2CD5               	goto	l9325
  7558                           
  7559                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7560  0CB0  3001               	movlw	1
  7561  0CB1  319A  225D  318C   	fcall	_getDimmerLights_Status
  7562  0CB4  3A01               	xorlw	1
  7563  0CB5  1D03               	skipz
  7564  0CB6  2CBF               	goto	l2436
  7565                           
  7566                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7567  0CB7  3001               	movlw	1
  7568  0CB8  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7569                           
  7570                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7571  0CBB  3001               	movlw	1
  7572  0CBC  3191  212E  318C   	fcall	_setDimmerLights_SwOff
  7573  0CBF                     l2436:	
  7574                           
  7575                           ;RF_Control_B1.c: 299: }
  7576                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7577  0CBF  3002               	movlw	2
  7578  0CC0  319A  225D  318C   	fcall	_getDimmerLights_Status
  7579  0CC3  3A01               	xorlw	1
  7580  0CC4  1D03               	skipz
  7581  0CC5  2CCE               	goto	l9323
  7582                           
  7583                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7584  0CC6  3002               	movlw	2
  7585  0CC7  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7586                           
  7587                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7588  0CCA  3002               	movlw	2
  7589  0CCB  3191  212E  318C   	fcall	_setDimmerLights_SwOff
  7590  0CCE                     l9323:	
  7591                           
  7592                           ;RF_Control_B1.c: 305: }
  7593                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7594  0CCE  0020               	movlb	0	; select bank0
  7595  0CCF  01A1               	clrf	setCmd_Status@cmd
  7596  0CD0  0AA1               	incf	setCmd_Status@cmd,f
  7597  0CD1  3001               	movlw	1
  7598  0CD2  319C  245C         	fcall	_setCmd_Status
  7599                           
  7600                           ;RF_Control_B1.c: 315: } else {
  7601  0CD4  0008               	return
  7602  0CD5                     l9325:	
  7603                           
  7604                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7605  0CD5  0020               	movlb	0	; select bank0
  7606  0CD6  01E3               	clrf	setProductData@value
  7607  0CD7  3009               	movlw	9
  7608  0CD8  3199  21FC  318C   	fcall	_setProductData
  7609                           
  7610                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7611  0CDB  0020               	movlb	0	; select bank0
  7612  0CDC  01E3               	clrf	setProductData@value
  7613  0CDD  300B               	movlw	11
  7614  0CDE  3199  21FC  318C   	fcall	_setProductData
  7615                           
  7616                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7617  0CE1  0020               	movlb	0	; select bank0
  7618  0CE2  01E3               	clrf	setProductData@value
  7619  0CE3  300F               	movlw	15
  7620  0CE4  3199  21FC  318C   	fcall	_setProductData
  7621                           
  7622                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7623  0CE7  0020               	movlb	0	; select bank0
  7624  0CE8  01E3               	clrf	setProductData@value
  7625  0CE9  3011               	movlw	17
  7626  0CEA  3199  21FC  318C   	fcall	_setProductData
  7627                           
  7628                           ;RF_Control_B1.c: 320: setTxData();
  7629  0CED  318F  2745         	fcall	_setTxData
  7630                           
  7631                           ;RF_Control_B1.c: 321: }
  7632                           ;RF_Control_B1.c: 322: break;
  7633  0CEF  0008               	return
  7634  0CF0                     l9327:	
  7635                           ;RF_Control_B1.c: 324: case 0x20:
  7636                           
  7637                           
  7638                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7639  0CF0  0020               	movlb	0	; select bank0
  7640  0CF1  01E3               	clrf	setProductData@value
  7641  0CF2  3009               	movlw	9
  7642  0CF3  3199  21FC  318C   	fcall	_setProductData
  7643                           
  7644                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7645  0CF6  0020               	movlb	0	; select bank0
  7646  0CF7  01E3               	clrf	setProductData@value
  7647  0CF8  300B               	movlw	11
  7648  0CF9  3199  21FC  318C   	fcall	_setProductData
  7649                           
  7650                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7651  0CFC  0021               	movlb	1	; select bank1
  7652  0CFD  086D               	movf	_product^(0+128),w
  7653  0CFE  0086               	movwf	6
  7654  0CFF  3002               	movlw	2	; select bank4/5
  7655  0D00  0087               	movwf	7
  7656  0D01  3002               	movlw	2	; select bank4/5
  7657  0D02  3F4F               	moviw [15]fsr1
  7658  0D03  0020               	movlb	0	; select bank0
  7659  0D04  00E3               	movwf	setProductData@value
  7660  0D05  300F               	movlw	15
  7661  0D06  3199  21FC  318C   	fcall	_setProductData
  7662                           
  7663                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7664  0D09  0020               	movlb	0	; select bank0
  7665  0D0A  01E3               	clrf	setProductData@value
  7666  0D0B  3011               	movlw	17
  7667  0D0C  3199  21FC  318C   	fcall	_setProductData
  7668                           
  7669                           ;RF_Control_B1.c: 329: setTxData();
  7670  0D0F  318F  2745         	fcall	_setTxData
  7671                           
  7672                           ;RF_Control_B1.c: 330: break;
  7673  0D11  0008               	return
  7674  0D12                     l9329:	
  7675                           ;RF_Control_B1.c: 333: case 0x01:
  7676                           
  7677                           
  7678                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7679  0D12  3001               	movlw	1
  7680  0D13  3192  22DD         	fcall	_setRFSW_Control
  7681                           
  7682                           ;RF_Control_B1.c: 335: break;
  7683  0D15  0008               	return
  7684  0D16                     l9331:	
  7685                           ;RF_Control_B1.c: 339: case 0x11:
  7686                           
  7687                           
  7688                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7689  0D16  3001               	movlw	1
  7690  0D17  318B  2316         	fcall	_setRFSW_AdjControl
  7691                           
  7692                           ;RF_Control_B1.c: 341: break;
  7693  0D19  0008               	return
  7694  0D1A                     l9333:	
  7695                           ;RF_Control_B1.c: 346: case 0x02:
  7696                           
  7697                           
  7698                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7699  0D1A  3002               	movlw	2
  7700  0D1B  3192  22DD         	fcall	_setRFSW_Control
  7701                           
  7702                           ;RF_Control_B1.c: 348: break;
  7703  0D1D  0008               	return
  7704  0D1E                     l9335:	
  7705                           ;RF_Control_B1.c: 351: case 0x21:
  7706                           
  7707                           
  7708                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7709  0D1E  3002               	movlw	2
  7710  0D1F  318B  2316         	fcall	_setRFSW_AdjControl
  7711                           
  7712                           ;RF_Control_B1.c: 370: }
  7713                           
  7714                           ;RF_Control_B1.c: 353: break;
  7715  0D21  0008               	return
  7716  0D22                     l9339:	
  7717  0D22  0023               	movlb	3	; select bank3
  7718  0D23  082F               	movf	(_RF_Data^(0+384)+15),w
  7719                           
  7720                           ; Switch size 1, requested type "space"
  7721                           ; Number of cases is 6, Range of values is 0 to 33
  7722                           ; switch strategies available:
  7723                           ; Name         Instructions Cycles
  7724                           ; simple_byte           19    10 (average)
  7725                           ; direct_byte           74     6 (fixed)
  7726                           ; jumptable            260     6 (fixed)
  7727                           ;	Chosen strategy is simple_byte
  7728  0D24  3A00               	xorlw	0	; case 0
  7729  0D25  1903               	skipnz
  7730  0D26  2CAA               	goto	l9315
  7731  0D27  3A01               	xorlw	1	; case 1
  7732  0D28  1903               	skipnz
  7733  0D29  2D12               	goto	l9329
  7734  0D2A  3A03               	xorlw	3	; case 2
  7735  0D2B  1903               	skipnz
  7736  0D2C  2D1A               	goto	l9333
  7737  0D2D  3A13               	xorlw	19	; case 17
  7738  0D2E  1903               	skipnz
  7739  0D2F  2D16               	goto	l9331
  7740  0D30  3A31               	xorlw	49	; case 32
  7741  0D31  1903               	skipnz
  7742  0D32  2CF0               	goto	l9327
  7743  0D33  3A01               	xorlw	1	; case 33
  7744  0D34  1903               	skipnz
  7745  0D35  2D1E               	goto	l9335
  7746  0D36  2D37               	goto	l2445
  7747  0D37                     l2445:	
  7748  0D37  0008               	return
  7749  0D38                     __end_of_setControl_Lights_Table:	
  7750                           
  7751                           	psect	text29
  7752  12DD                     __ptext29:	
  7753 ;; *************** function _setRFSW_Control *****************
  7754 ;; Defined at:
  7755 ;;		line 378 in file "../src/RF_Control_B1.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  sw              1    wreg     unsigned char 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  sw              1    2[BANK1 ] unsigned char 
  7760 ;;  status          1    1[BANK1 ] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;		None               void
  7763 ;; Registers used:
  7764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;Total ram usage:        3 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    8
  7777 ;; This function calls:
  7778 ;;		_getDimmerLights_Status
  7779 ;;		_setBuz
  7780 ;;		_setDelayOff_GO
  7781 ;;		_setDimmerLights_SwOff
  7782 ;;		_setDimmerLights_SwOn
  7783 ;;		_setRF_DimmerLights
  7784 ;;		_setTxData
  7785 ;; This function is called by:
  7786 ;;		_setControl_Lights_Table
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           
  7791                           ;psect for function _setRFSW_Control
  7792  12DD                     _setRFSW_Control:	
  7793                           
  7794                           ;incstack = 0
  7795                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7796                           ;setRFSW_Control@sw stored from wreg
  7797  12DD  0021               	movlb	1	; select bank1
  7798  12DE  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7799                           
  7800                           ;RF_Control_B1.c: 379: char status = 0;
  7801  12DF  01E6               	clrf	setRFSW_Control@status^(0+128)
  7802                           
  7803                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7804  12E0  0023               	movlb	3	; select bank3
  7805  12E1  0830               	movf	(_RF_Data^(0+384)+16),w
  7806  12E2  3A80               	xorlw	128
  7807  12E3  1D03               	skipz
  7808  12E4  2B13               	goto	l9249
  7809                           
  7810                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7811  12E5  0020               	movlb	0	; select bank0
  7812  12E6  01E6               	clrf	setDelayOff_GO@command
  7813  12E7  0AE6               	incf	setDelayOff_GO@command,f
  7814  12E8  0023               	movlb	3	; select bank3
  7815  12E9  0831               	movf	(_RF_Data^(0+384)+17),w
  7816  12EA  0021               	movlb	1	; select bank1
  7817  12EB  00E5               	movwf	??_setRFSW_Control^(0+128)
  7818  12EC  0865               	movf	??_setRFSW_Control^(0+128),w
  7819  12ED  0020               	movlb	0	; select bank0
  7820  12EE  00E7               	movwf	setDelayOff_GO@value
  7821  12EF  0021               	movlb	1	; select bank1
  7822  12F0  0867               	movf	setRFSW_Control@sw^(0+128),w
  7823  12F1  318C  241D  3192   	fcall	_setDelayOff_GO
  7824                           
  7825                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7826  12F4  0021               	movlb	1	; select bank1
  7827  12F5  0867               	movf	setRFSW_Control@sw^(0+128),w
  7828  12F6  319A  225D  3192   	fcall	_getDimmerLights_Status
  7829  12F9  3A01               	xorlw	1
  7830  12FA  1D03               	skipz
  7831  12FB  2B13               	goto	l9249
  7832                           
  7833                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7834  12FC  3064               	movlw	100
  7835  12FD  0020               	movlb	0	; select bank0
  7836  12FE  00AA               	movwf	setBuz@time
  7837  12FF  3000               	movlw	0
  7838  1300  00AB               	movwf	setBuz@time+1
  7839  1301  3001               	movlw	1
  7840  1302  3194  24F8  3192   	fcall	_setBuz
  7841                           
  7842                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7843  1305  0020               	movlb	0	; select bank0
  7844  1306  01E6               	clrf	setRF_DimmerLights@on
  7845  1307  0AE6               	incf	setRF_DimmerLights@on,f
  7846  1308  0021               	movlb	1	; select bank1
  7847  1309  0867               	movf	setRFSW_Control@sw^(0+128),w
  7848  130A  3196  26CE  3192   	fcall	_setRF_DimmerLights
  7849                           
  7850                           ;RF_Control_B1.c: 386: setTxData();
  7851  130D  318F  2745  3192   	fcall	_setTxData
  7852                           
  7853                           ;RF_Control_B1.c: 387: status = 1;
  7854  1310  0021               	movlb	1	; select bank1
  7855  1311  01E6               	clrf	setRFSW_Control@status^(0+128)
  7856  1312  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7857  1313                     l9249:	
  7858                           
  7859                           ;RF_Control_B1.c: 388: }
  7860                           ;RF_Control_B1.c: 389: }
  7861                           ;RF_Control_B1.c: 391: if (status == 0) {
  7862  1313  0021               	movlb	1	; select bank1
  7863  1314  08E6               	movf	setRFSW_Control@status^(0+128),f
  7864  1315  1D03               	skipz
  7865  1316  0008               	return
  7866                           
  7867                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7868  1317  0867               	movf	setRFSW_Control@sw^(0+128),w
  7869  1318  3195  25AC  3192   	fcall	_setDimmerLights_SwOn
  7870                           
  7871                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7872  131B  0021               	movlb	1	; select bank1
  7873  131C  0867               	movf	setRFSW_Control@sw^(0+128),w
  7874  131D  3191  212E         	fcall	_setDimmerLights_SwOff
  7875  131F  0008               	return
  7876  1320                     __end_of_setRFSW_Control:	
  7877                           
  7878                           	psect	text30
  7879  0B16                     __ptext30:	
  7880 ;; *************** function _setRFSW_AdjControl *****************
  7881 ;; Defined at:
  7882 ;;		line 400 in file "../src/RF_Control_B1.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  sw              1    wreg     unsigned char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  sw              1   73[BANK0 ] unsigned char 
  7887 ;;  status          1   72[BANK0 ] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;		None               void
  7890 ;; Registers used:
  7891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;Total ram usage:        4 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    8
  7904 ;; This function calls:
  7905 ;;		_getDimmerLights_PercentToValue
  7906 ;;		_getDimmerLights_Status
  7907 ;;		_setDimmerIntr_Dimming_RF
  7908 ;;		_setDimmerIntr_MaxmumValue
  7909 ;;		_setDimmerLights_DimmingRun
  7910 ;;		_setDimmerLights_SwOff
  7911 ;;		_setDimmerLights_SwOn
  7912 ;;		_setMemory_Modify
  7913 ;;		_setProductData
  7914 ;;		_setTxData
  7915 ;; This function is called by:
  7916 ;;		_setControl_Lights_Table
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           
  7921                           ;psect for function _setRFSW_AdjControl
  7922  0B16                     _setRFSW_AdjControl:	
  7923                           
  7924                           ;incstack = 0
  7925                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7926                           ;setRFSW_AdjControl@sw stored from wreg
  7927  0B16  0020               	movlb	0	; select bank0
  7928  0B17  00E9               	movwf	setRFSW_AdjControl@sw
  7929                           
  7930                           ;RF_Control_B1.c: 401: char status = 0;
  7931  0B18  01E8               	clrf	setRFSW_AdjControl@status
  7932                           
  7933                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7934  0B19  0869               	movf	setRFSW_AdjControl@sw,w
  7935  0B1A  319A  225D  318B   	fcall	_getDimmerLights_Status
  7936  0B1D  0020               	movlb	0	; select bank0
  7937  0B1E  00E6               	movwf	??_setRFSW_AdjControl
  7938  0B1F  0866               	movf	??_setRFSW_AdjControl,w
  7939  0B20  00E8               	movwf	setRFSW_AdjControl@status
  7940                           
  7941                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7942  0B21  3065               	movlw	101
  7943  0B22  0023               	movlb	3	; select bank3
  7944  0B23  0229               	subwf	(_RF_Data^(0+384)+9),w
  7945  0B24  1C03               	skipc
  7946  0B25  2B2D               	goto	l9261
  7947                           
  7948                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7949  0B26  3064               	movlw	100
  7950  0B27  0020               	movlb	0	; select bank0
  7951  0B28  00E6               	movwf	??_setRFSW_AdjControl
  7952  0B29  0866               	movf	??_setRFSW_AdjControl,w
  7953  0B2A  0023               	movlb	3	; select bank3
  7954  0B2B  00A9               	movwf	(_RF_Data^(0+384)+9)
  7955                           
  7956                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7957  0B2C  2B32               	goto	l9265
  7958  0B2D                     l9261:	
  7959  0B2D  08A9               	movf	(_RF_Data^(0+384)+9),f
  7960  0B2E  1D03               	skipz
  7961  0B2F  2B32               	goto	l9265
  7962                           
  7963                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7964  0B30  01A9               	clrf	(_RF_Data^(0+384)+9)
  7965  0B31  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7966  0B32                     l9265:	
  7967                           
  7968                           ;RF_Control_B1.c: 409: }
  7969                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7970  0B32  0829               	movf	(_RF_Data^(0+384)+9),w
  7971  0B33  0020               	movlb	0	; select bank0
  7972  0B34  00E6               	movwf	??_setRFSW_AdjControl
  7973  0B35  0866               	movf	??_setRFSW_AdjControl,w
  7974  0B36  00E3               	movwf	setProductData@value
  7975  0B37  3009               	movlw	9
  7976  0B38  3199  21FC  318B   	fcall	_setProductData
  7977                           
  7978                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7979  0B3B  0020               	movlb	0	; select bank0
  7980  0B3C  0869               	movf	setRFSW_AdjControl@sw,w
  7981  0B3D  00E6               	movwf	??_setRFSW_AdjControl
  7982  0B3E  0866               	movf	??_setRFSW_AdjControl,w
  7983  0B3F  00E3               	movwf	setProductData@value
  7984  0B40  300B               	movlw	11
  7985  0B41  3199  21FC  318B   	fcall	_setProductData
  7986                           
  7987                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7988  0B44  0020               	movlb	0	; select bank0
  7989  0B45  0869               	movf	setRFSW_AdjControl@sw,w
  7990  0B46  3E1A               	addlw	26
  7991  0B47  0021               	movlb	1	; select bank1
  7992  0B48  076D               	addwf	_product^(0+128),w
  7993  0B49  0020               	movlb	0	; select bank0
  7994  0B4A  00E6               	movwf	??_setRFSW_AdjControl
  7995  0B4B  0866               	movf	??_setRFSW_AdjControl,w
  7996  0B4C  0086               	movwf	6
  7997  0B4D  3002               	movlw	2	; select bank4/5
  7998  0B4E  0087               	movwf	7
  7999  0B4F  0801               	movf	1,w
  8000  0B50  00E7               	movwf	??_setRFSW_AdjControl+1
  8001  0B51  0867               	movf	??_setRFSW_AdjControl+1,w
  8002  0B52  00E3               	movwf	setProductData@value
  8003  0B53  3011               	movlw	17
  8004  0B54  3199  21FC  318B   	fcall	_setProductData
  8005                           
  8006                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8007  0B57  0023               	movlb	3	; select bank3
  8008  0B58  0829               	movf	(_RF_Data^(0+384)+9),w
  8009  0B59  0020               	movlb	0	; select bank0
  8010  0B5A  00E6               	movwf	??_setRFSW_AdjControl
  8011  0B5B  0866               	movf	??_setRFSW_AdjControl,w
  8012  0B5C  00E3               	movwf	setProductData@value
  8013  0B5D  0869               	movf	setRFSW_AdjControl@sw,w
  8014  0B5E  3E14               	addlw	20
  8015  0B5F  3199  21FC  318B   	fcall	_setProductData
  8016                           
  8017                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  8018  0B62  3001               	movlw	1
  8019  0B63  319B  2333  318B   	fcall	_setMemory_Modify
  8020                           
  8021                           ;RF_Control_B1.c: 416: if (status == 1) {
  8022  0B66  0020               	movlb	0	; select bank0
  8023  0B67  0868               	movf	setRFSW_AdjControl@status,w
  8024  0B68  3A01               	xorlw	1
  8025  0B69  1D03               	skipz
  8026  0B6A  2B82               	goto	l9275
  8027                           
  8028                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8029  0B6B  0023               	movlb	3	; select bank3
  8030  0B6C  0829               	movf	(_RF_Data^(0+384)+9),w
  8031  0B6D  3197  2733  318B   	fcall	_getDimmerLights_PercentToValue
  8032  0B70  0020               	movlb	0	; select bank0
  8033  0B71  00E6               	movwf	??_setRFSW_AdjControl
  8034  0B72  0866               	movf	??_setRFSW_AdjControl,w
  8035  0B73  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  8036  0B74  0869               	movf	setRFSW_AdjControl@sw,w
  8037  0B75  319C  2417  318B   	fcall	_setDimmerIntr_MaxmumValue
  8038                           
  8039                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  8040  0B78  0020               	movlb	0	; select bank0
  8041  0B79  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  8042  0B7A  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  8043  0B7B  0869               	movf	setRFSW_AdjControl@sw,w
  8044  0B7C  319F  27A2  318B   	fcall	_setDimmerIntr_Dimming_RF
  8045                           
  8046                           ;RF_Control_B1.c: 419: setTxData();
  8047  0B7F  318F  2745         	fcall	_setTxData
  8048                           
  8049                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  8050  0B81  0008               	return
  8051  0B82                     l9275:	
  8052  0B82  0020               	movlb	0	; select bank0
  8053  0B83  08E8               	movf	setRFSW_AdjControl@status,f
  8054  0B84  1D03               	skipz
  8055  0B85  0008               	return
  8056                           
  8057                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  8058  0B86  01A3               	clrf	setDimmerLights_DimmingRun@command
  8059  0B87  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  8060  0B88  0869               	movf	setRFSW_AdjControl@sw,w
  8061  0B89  319C  24DD  318B   	fcall	_setDimmerLights_DimmingRun
  8062                           
  8063                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  8064  0B8C  0020               	movlb	0	; select bank0
  8065  0B8D  0869               	movf	setRFSW_AdjControl@sw,w
  8066  0B8E  3195  25AC  318B   	fcall	_setDimmerLights_SwOn
  8067                           
  8068                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  8069  0B91  0020               	movlb	0	; select bank0
  8070  0B92  0869               	movf	setRFSW_AdjControl@sw,w
  8071  0B93  3191  212E         	fcall	_setDimmerLights_SwOff
  8072  0B95  0008               	return
  8073  0B96                     __end_of_setRFSW_AdjControl:	
  8074                           
  8075                           	psect	text31
  8076  1B33                     __ptext31:	
  8077 ;; *************** function _setMemory_Modify *****************
  8078 ;; Defined at:
  8079 ;;		line 1070 in file "../src/MCU_B1.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;  command         1    wreg     unsigned char 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  command         1    2[BANK0 ] unsigned char 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;		None               void
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;Total ram usage:        2 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    5
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_setLog_Code
  8104 ;;		_setRFSW_AdjControl
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           
  8109                           ;psect for function _setMemory_Modify
  8110  1B33                     _setMemory_Modify:	
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8114                           ;setMemory_Modify@command stored from wreg
  8115  1B33  0020               	movlb	0	; select bank0
  8116  1B34  00A2               	movwf	setMemory_Modify@command
  8117                           
  8118                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  8119  1B35  0822               	movf	setMemory_Modify@command,w
  8120  1B36  3A01               	xorlw	1
  8121  1B37  3000               	movlw	0
  8122  1B38  1903               	skipnz
  8123  1B39  3001               	movlw	1
  8124  1B3A  00A1               	movwf	??_setMemory_Modify
  8125  1B3B  0024               	movlb	4	; select bank4
  8126  1B3C  0844               	movf	(_Memory^(0+512)+36),w
  8127  1B3D  0020               	movlb	0	; select bank0
  8128  1B3E  0621               	xorwf	??_setMemory_Modify,w
  8129  1B3F  39FE               	andlw	-2
  8130  1B40  0621               	xorwf	??_setMemory_Modify,w
  8131  1B41  0024               	movlb	4	; select bank4
  8132  1B42  00C4               	movwf	(_Memory^(0+512)+36)
  8133                           
  8134                           ;MCU_B1.c: 1072: Memory.Time = 0;
  8135  1B43  01C2               	clrf	(_Memory^(0+512)+34)
  8136  1B44  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8137  1B45  0008               	return
  8138  1B46                     __end_of_setMemory_Modify:	
  8139                           
  8140                           	psect	text32
  8141  1CDD                     __ptext32:	
  8142 ;; *************** function _setDimmerLights_DimmingRun *****************
  8143 ;; Defined at:
  8144 ;;		line 1012 in file "../src/Dimmer_B1.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;  lights          1    wreg     unsigned char 
  8147 ;;  command         1    3[BANK0 ] unsigned char 
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;  lights          1    5[BANK0 ] unsigned char 
  8150 ;; Return value:  Size  Location     Type
  8151 ;;		None               void
  8152 ;; Registers used:
  8153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8159 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;Total ram usage:        3 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    6
  8166 ;; This function calls:
  8167 ;;		_DimmerLights_SelectPointer
  8168 ;; This function is called by:
  8169 ;;		_setRFSW_AdjControl
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           
  8174                           ;psect for function _setDimmerLights_DimmingRun
  8175  1CDD                     _setDimmerLights_DimmingRun:	
  8176                           
  8177                           ;incstack = 0
  8178                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8179                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8180  1CDD  0020               	movlb	0	; select bank0
  8181  1CDE  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8182                           
  8183                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8184  1CDF  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8185  1CE0  319C  2400         	fcall	_DimmerLights_SelectPointer
  8186                           
  8187                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8188  1CE2  0020               	movlb	0	; select bank0
  8189  1CE3  0823               	movf	setDimmerLights_DimmingRun@command,w
  8190  1CE4  3A01               	xorlw	1
  8191  1CE5  3000               	movlw	0
  8192  1CE6  1903               	skipnz
  8193  1CE7  3001               	movlw	1
  8194  1CE8  00A4               	movwf	??_setDimmerLights_DimmingRun
  8195  1CE9  0021               	movlb	1	; select bank1
  8196  1CEA  0A4F               	incf	_DimmerLights^(0+128),w
  8197  1CEB  0086               	movwf	6
  8198  1CEC  3001               	movlw	1	; select bank2/3
  8199  1CED  0087               	movwf	7
  8200  1CEE  0020               	movlb	0	; select bank0
  8201  1CEF  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8202  1CF0  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8203  1CF1  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8204  1CF2  0801               	movf	1,w
  8205  1CF3  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8206  1CF4  39BF               	andlw	-65
  8207  1CF5  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8208  1CF6  0081               	movwf	1
  8209  1CF7  0008               	return
  8210  1CF8                     __end_of_setDimmerLights_DimmingRun:	
  8211                           
  8212                           	psect	text33
  8213  1A90                     __ptext33:	
  8214 ;; *************** function _getRF_KeyStatus *****************
  8215 ;; Defined at:
  8216 ;;		line 166 in file "../src/RF_Control_B1.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  key             1    2[BANK0 ] unsigned char 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      unsigned char 
  8223 ;; Registers used:
  8224 ;;		wreg, status,2
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;Total ram usage:        3 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    5
  8237 ;; This function calls:
  8238 ;;		Nothing
  8239 ;; This function is called by:
  8240 ;;		_setRF_Main
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           
  8245                           ;psect for function _getRF_KeyStatus
  8246  1A90                     _getRF_KeyStatus:	
  8247                           
  8248                           ;RF_Control_B1.c: 167: char key = 0;
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8252  1A90  0020               	movlb	0	; select bank0
  8253  1A91  01A2               	clrf	getRF_KeyStatus@key
  8254                           
  8255                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8256  1A92  01A3               	clrf	_getRF_KeyStatus$5521
  8257  1A93  0AA3               	incf	_getRF_KeyStatus$5521,f
  8258  1A94  1F0C               	btfss	12,6	;volatile
  8259  1A95  1A0C               	btfsc	12,4	;volatile
  8260  1A96  2A9B               	goto	l7593
  8261  1A97  1C0C               	btfss	12,0	;volatile
  8262  1A98  188D               	btfsc	13,1	;volatile
  8263  1A99  2A9B               	goto	l7593
  8264  1A9A  01A3               	clrf	_getRF_KeyStatus$5521
  8265  1A9B                     l7593:	
  8266  1A9B  0823               	movf	_getRF_KeyStatus$5521,w
  8267  1A9C  00A1               	movwf	??_getRF_KeyStatus
  8268  1A9D  0821               	movf	??_getRF_KeyStatus,w
  8269  1A9E  00A2               	movwf	getRF_KeyStatus@key
  8270                           
  8271                           ;RF_Control_B1.c: 179: return key;
  8272  1A9F  0822               	movf	getRF_KeyStatus@key,w
  8273  1AA0  0008               	return
  8274  1AA1                     __end_of_getRF_KeyStatus:	
  8275                           
  8276                           	psect	text34
  8277  1A7F                     __ptext34:	
  8278 ;; *************** function _getBuz_GO *****************
  8279 ;; Defined at:
  8280 ;;		line 82 in file "../src/Buzzer_B1.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;  i               2    5[BANK0 ] int 
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2    1[BANK0 ] int 
  8287 ;; Registers used:
  8288 ;;		wreg, status,2, status,0
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        6 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    5
  8301 ;; This function calls:
  8302 ;;		Nothing
  8303 ;; This function is called by:
  8304 ;;		_setRF_Main
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function _getBuz_GO
  8310  1A7F                     _getBuz_GO:	
  8311                           
  8312                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8313                           
  8314                           ;incstack = 0
  8315                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8316  1A7F  0022               	movlb	2	; select bank2
  8317  1A80  0C2D               	rrf	_Buz1^(0+256),w
  8318  1A81  3901               	andlw	1
  8319  1A82  0020               	movlb	0	; select bank0
  8320  1A83  00A3               	movwf	??_getBuz_GO
  8321  1A84  01A4               	clrf	??_getBuz_GO+1
  8322  1A85  0823               	movf	??_getBuz_GO,w
  8323  1A86  00A5               	movwf	getBuz_GO@i
  8324  1A87  0824               	movf	??_getBuz_GO+1,w
  8325  1A88  00A6               	movwf	getBuz_GO@i+1
  8326                           
  8327                           ;Buzzer_B1.c: 84: return i;
  8328  1A89  0826               	movf	getBuz_GO@i+1,w
  8329  1A8A  01A2               	clrf	?_getBuz_GO+1
  8330  1A8B  07A2               	addwf	?_getBuz_GO+1,f
  8331  1A8C  0825               	movf	getBuz_GO@i,w
  8332  1A8D  01A1               	clrf	?_getBuz_GO
  8333  1A8E  07A1               	addwf	?_getBuz_GO,f
  8334  1A8F  0008               	return
  8335  1A90                     __end_of_getBuz_GO:	
  8336                           
  8337                           	psect	text35
  8338  07F0                     __ptext35:	
  8339 ;; *************** function _RF_RxDisable *****************
  8340 ;; Defined at:
  8341 ;;		line 154 in file "../src/RF_Control_B1.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;		None               void
  8348 ;; Registers used:
  8349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;Total ram usage:        0 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    7
  8362 ;; This function calls:
  8363 ;;		_CC2500_WriteCommand
  8364 ;; This function is called by:
  8365 ;;		_setRF_Main
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _RF_RxDisable
  8371  07F0                     _RF_RxDisable:	
  8372                           
  8373                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8377  07F0  0021               	movlb	1	; select bank1
  8378  07F1  18A0               	btfsc	_RF1^(0+128),1
  8379  07F2  2FF5               	goto	l2399
  8380  07F3  1DA0               	btfss	_RF1^(0+128),3
  8381  07F4  0008               	return
  8382  07F5                     l2399:	
  8383                           
  8384                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8385  07F5  11A0               	bcf	_RF1^(0+128),3
  8386                           
  8387                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8388  07F6  10A0               	bcf	_RF1^(0+128),1
  8389                           
  8390                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8391  07F7  3036               	movlw	54
  8392  07F8  319C  24A8  3187   	fcall	_CC2500_WriteCommand
  8393                           
  8394                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8395  07FB  303A               	movlw	58
  8396  07FC  319C  24A8         	fcall	_CC2500_WriteCommand
  8397  07FE  0008               	return
  8398  07FF                     __end_of_RF_RxDisable:	
  8399                           
  8400                           	psect	text36
  8401  08E8                     __ptext36:	
  8402 ;; *************** function _CC2500_TxData *****************
  8403 ;; Defined at:
  8404 ;;		line 32 in file "../src/CC2500_B1.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;		None               void
  8411 ;; Registers used:
  8412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        2 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    7
  8425 ;; This function calls:
  8426 ;;		_CC2500_WriteByte
  8427 ;;		_CC2500_WriteCommand
  8428 ;;		_RF_Timeout_Counter
  8429 ;;		_setRF_TimeoutCleared
  8430 ;; This function is called by:
  8431 ;;		_setRF_Main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _CC2500_TxData
  8437  08E8                     _CC2500_TxData:	
  8438                           
  8439                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8440                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8444  08E8  3036               	movlw	54
  8445  08E9  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8446                           
  8447                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8448  08EC  303B               	movlw	59
  8449  08ED  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8450                           
  8451                           ;CC2500_B1.c: 38: RC4 = 0;
  8452  08F0  0020               	movlb	0	; select bank0
  8453  08F1  120E               	bcf	14,4	;volatile
  8454                           
  8455                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8456  08F2  307F               	movlw	127
  8457  08F3  00A5               	movwf	??_CC2500_TxData
  8458  08F4  0825               	movf	??_CC2500_TxData,w
  8459  08F5  0021               	movlb	1	; select bank1
  8460  08F6  00D4               	movwf	_SPI0Buffer^(0+128)
  8461                           
  8462                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8463  08F7  28FB               	goto	l7275
  8464  08F8                     l7273:	
  8465                           
  8466                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8467  08F8  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8468  08FB                     l7275:	
  8469  08FB  0020               	movlb	0	; select bank0
  8470  08FC  1D0E               	btfss	14,2	;volatile
  8471  08FD  2901               	goto	l7279
  8472  08FE  0021               	movlb	1	; select bank1
  8473  08FF  1F21               	btfss	(_RF1^(0+128)+1),6
  8474  0900  28F8               	goto	l7273
  8475  0901                     l7279:	
  8476                           
  8477                           ;CC2500_B1.c: 42: };
  8478                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8479  0901  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8480                           
  8481                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8482  0904  319C  2475  3188   	fcall	_CC2500_WriteByte
  8483                           
  8484                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8485  0907  0021               	movlb	1	; select bank1
  8486  0908  0857               	movf	_Tx_Length^(0+128),w
  8487  0909  0020               	movlb	0	; select bank0
  8488  090A  00A5               	movwf	??_CC2500_TxData
  8489  090B  0825               	movf	??_CC2500_TxData,w
  8490  090C  0021               	movlb	1	; select bank1
  8491  090D  00D4               	movwf	_SPI0Buffer^(0+128)
  8492                           
  8493                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8494  090E  319C  2475  3188   	fcall	_CC2500_WriteByte
  8495                           
  8496                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8497  0911  0020               	movlb	0	; select bank0
  8498  0912  01A6               	clrf	CC2500_TxData@loop_e
  8499  0913                     l7293:	
  8500  0913  0021               	movlb	1	; select bank1
  8501  0914  0857               	movf	_Tx_Length^(0+128),w
  8502  0915  0020               	movlb	0	; select bank0
  8503  0916  0226               	subwf	CC2500_TxData@loop_e,w
  8504  0917  1803               	btfsc	3,0
  8505  0918  292C               	goto	l259
  8506                           
  8507                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8508  0919  0826               	movf	CC2500_TxData@loop_e,w
  8509  091A  3EA0               	addlw	_RF_Data& (0+255)
  8510  091B  0086               	movwf	6
  8511  091C  3001               	movlw	1	; select bank3/4
  8512  091D  0087               	movwf	7
  8513  091E  0801               	movf	1,w
  8514  091F  00A5               	movwf	??_CC2500_TxData
  8515  0920  0825               	movf	??_CC2500_TxData,w
  8516  0921  0021               	movlb	1	; select bank1
  8517  0922  00D4               	movwf	_SPI0Buffer^(0+128)
  8518                           
  8519                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8520  0923  319C  2475  3188   	fcall	_CC2500_WriteByte
  8521  0926  3001               	movlw	1
  8522  0927  0020               	movlb	0	; select bank0
  8523  0928  00A5               	movwf	??_CC2500_TxData
  8524  0929  0825               	movf	??_CC2500_TxData,w
  8525  092A  07A6               	addwf	CC2500_TxData@loop_e,f
  8526  092B  2913               	goto	l7293
  8527  092C                     l259:	
  8528                           
  8529                           ;CC2500_B1.c: 51: }
  8530                           ;CC2500_B1.c: 52: RC4 = 1;
  8531  092C  160E               	bsf	14,4	;volatile
  8532                           
  8533                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8534  092D  3035               	movlw	53
  8535  092E  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8536                           
  8537                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8538  0931  2935               	goto	l7299
  8539  0932                     l7297:	
  8540                           
  8541                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8542  0932  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8543  0935                     l7299:	
  8544  0935  0020               	movlb	0	; select bank0
  8545  0936  180D               	btfsc	13,0	;volatile
  8546  0937  293B               	goto	l7303
  8547  0938  0021               	movlb	1	; select bank1
  8548  0939  1F21               	btfss	(_RF1^(0+128)+1),6
  8549  093A  2932               	goto	l7297
  8550  093B                     l7303:	
  8551                           
  8552                           ;CC2500_B1.c: 56: };
  8553                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8554  093B  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8555                           
  8556                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8557  093E  2942               	goto	l7307
  8558  093F                     l7305:	
  8559                           
  8560                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8561  093F  319B  2394  3188   	fcall	_RF_Timeout_Counter
  8562  0942                     l7307:	
  8563  0942  0020               	movlb	0	; select bank0
  8564  0943  1C0D               	btfss	13,0	;volatile
  8565  0944  2948               	goto	l7311
  8566  0945  0021               	movlb	1	; select bank1
  8567  0946  1F21               	btfss	(_RF1^(0+128)+1),6
  8568  0947  293F               	goto	l7305
  8569  0948                     l7311:	
  8570                           
  8571                           ;CC2500_B1.c: 61: };
  8572                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8573  0948  3199  2141  3188   	fcall	_setRF_TimeoutCleared
  8574                           
  8575                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8576  094B  3036               	movlw	54
  8577  094C  319C  24A8  3188   	fcall	_CC2500_WriteCommand
  8578                           
  8579                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8580  094F  303B               	movlw	59
  8581  0950  319C  24A8         	fcall	_CC2500_WriteCommand
  8582                           
  8583                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8584  0952  0020               	movlb	0	; select bank0
  8585  0953  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8586  0954  0008               	return
  8587  0955                     __end_of_CC2500_TxData:	
  8588                           
  8589                           	psect	text37
  8590  0955                     __ptext37:	
  8591 ;; *************** function _CC2500_RxData *****************
  8592 ;; Defined at:
  8593 ;;		line 73 in file "../src/CC2500_B1.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;		None               void
  8600 ;; Registers used:
  8601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;Total ram usage:        2 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    7
  8614 ;; This function calls:
  8615 ;;		_CC2500_ReadByte
  8616 ;;		_CC2500_ReadStatus
  8617 ;;		_CC2500_WriteByte
  8618 ;;		_CC2500_WriteCommand
  8619 ;;		_RF_Timeout_Counter
  8620 ;;		_setRF_TimeoutCleared
  8621 ;; This function is called by:
  8622 ;;		_setRF_Main
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           
  8627                           ;psect for function _CC2500_RxData
  8628  0955                     _CC2500_RxData:	
  8629                           
  8630                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8631                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8635  0955  0020               	movlb	0	; select bank0
  8636  0956  180D               	btfsc	13,0	;volatile
  8637  0957  0008               	return
  8638                           
  8639                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8640  0958  303B               	movlw	59
  8641  0959  319E  26D3  3189   	fcall	_CC2500_ReadStatus
  8642                           
  8643                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8644  095C  0021               	movlb	1	; select bank1
  8645  095D  085A               	movf	_s_data^(0+128),w
  8646  095E  1903               	btfsc	3,2
  8647  095F  0008               	return
  8648                           
  8649                           ;CC2500_B1.c: 90: RC4 = 0;
  8650  0960  0020               	movlb	0	; select bank0
  8651  0961  120E               	bcf	14,4	;volatile
  8652                           
  8653                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8654  0962  30FF               	movlw	255
  8655  0963  00A5               	movwf	??_CC2500_RxData
  8656  0964  0825               	movf	??_CC2500_RxData,w
  8657  0965  0021               	movlb	1	; select bank1
  8658  0966  00D4               	movwf	_SPI0Buffer^(0+128)
  8659                           
  8660                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8661  0967  296B               	goto	l7331
  8662  0968                     l7329:	
  8663                           
  8664                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8665  0968  319B  2394  3189   	fcall	_RF_Timeout_Counter
  8666  096B                     l7331:	
  8667  096B  0020               	movlb	0	; select bank0
  8668  096C  1D0E               	btfss	14,2	;volatile
  8669  096D  2971               	goto	l7335
  8670  096E  0021               	movlb	1	; select bank1
  8671  096F  1F21               	btfss	(_RF1^(0+128)+1),6
  8672  0970  2968               	goto	l7329
  8673  0971                     l7335:	
  8674                           
  8675                           ;CC2500_B1.c: 95: };
  8676                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8677  0971  3199  2141  3189   	fcall	_setRF_TimeoutCleared
  8678                           
  8679                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8680  0974  319C  2475  3189   	fcall	_CC2500_WriteByte
  8681                           
  8682                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8683  0977  319D  2531  3189   	fcall	_CC2500_ReadByte
  8684                           
  8685                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8686  097A  0021               	movlb	1	; select bank1
  8687  097B  0854               	movf	_SPI0Buffer^(0+128),w
  8688  097C  0020               	movlb	0	; select bank0
  8689  097D  00A5               	movwf	??_CC2500_RxData
  8690  097E  0825               	movf	??_CC2500_RxData,w
  8691  097F  0021               	movlb	1	; select bank1
  8692  0980  00D3               	movwf	_Rx_Length^(0+128)
  8693                           
  8694                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8695  0981  0020               	movlb	0	; select bank0
  8696  0982  01A6               	clrf	CC2500_RxData@loop_f
  8697  0983                     l7351:	
  8698  0983  0021               	movlb	1	; select bank1
  8699  0984  0853               	movf	_Rx_Length^(0+128),w
  8700  0985  0020               	movlb	0	; select bank0
  8701  0986  0226               	subwf	CC2500_RxData@loop_f,w
  8702  0987  1803               	btfsc	3,0
  8703  0988  299C               	goto	l7353
  8704                           
  8705                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8706  0989  319D  2531  3189   	fcall	_CC2500_ReadByte
  8707                           
  8708                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8709  098C  0021               	movlb	1	; select bank1
  8710  098D  0854               	movf	_SPI0Buffer^(0+128),w
  8711  098E  0020               	movlb	0	; select bank0
  8712  098F  00A5               	movwf	??_CC2500_RxData
  8713  0990  0826               	movf	CC2500_RxData@loop_f,w
  8714  0991  3EA0               	addlw	_RF_Data& (0+255)
  8715  0992  0086               	movwf	6
  8716  0993  3001               	movlw	1	; select bank3/4
  8717  0994  0087               	movwf	7
  8718  0995  0825               	movf	??_CC2500_RxData,w
  8719  0996  0081               	movwf	1
  8720  0997  3001               	movlw	1
  8721  0998  00A5               	movwf	??_CC2500_RxData
  8722  0999  0825               	movf	??_CC2500_RxData,w
  8723  099A  07A6               	addwf	CC2500_RxData@loop_f,f
  8724  099B  2983               	goto	l7351
  8725  099C                     l7353:	
  8726                           
  8727                           ;CC2500_B1.c: 104: }
  8728                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8729  099C  319D  2531  3189   	fcall	_CC2500_ReadByte
  8730                           
  8731                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8732  099F  0021               	movlb	1	; select bank1
  8733  09A0  0854               	movf	_SPI0Buffer^(0+128),w
  8734  09A1  0020               	movlb	0	; select bank0
  8735  09A2  00A5               	movwf	??_CC2500_RxData
  8736  09A3  0825               	movf	??_CC2500_RxData,w
  8737  09A4  0021               	movlb	1	; select bank1
  8738  09A5  00D2               	movwf	_RSSI^(0+128)
  8739                           
  8740                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8741  09A6  319D  2531  3189   	fcall	_CC2500_ReadByte
  8742                           
  8743                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8744  09A9  0021               	movlb	1	; select bank1
  8745  09AA  0854               	movf	_SPI0Buffer^(0+128),w
  8746  09AB  0020               	movlb	0	; select bank0
  8747  09AC  00A5               	movwf	??_CC2500_RxData
  8748  09AD  0825               	movf	??_CC2500_RxData,w
  8749  09AE  0021               	movlb	1	; select bank1
  8750  09AF  00CB               	movwf	_CRC^(0+128)
  8751                           
  8752                           ;CC2500_B1.c: 109: RC4 = 1;
  8753  09B0  0020               	movlb	0	; select bank0
  8754  09B1  160E               	bsf	14,4	;volatile
  8755                           
  8756                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8757  09B2  0021               	movlb	1	; select bank1
  8758  09B3  1FCB               	btfss	_CRC^(0+128),7
  8759  09B4  29B7               	goto	l283
  8760                           
  8761                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8762  09B5  0020               	movlb	0	; select bank0
  8763  09B6  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8764  09B7                     l283:	
  8765                           
  8766                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8767  09B7  0021               	movlb	1	; select bank1
  8768  09B8  11A0               	bcf	_RF1^(0+128),3
  8769                           
  8770                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8771  09B9  14A0               	bsf	_RF1^(0+128),1
  8772                           
  8773                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8774  09BA  3036               	movlw	54
  8775  09BB  319C  24A8  3189   	fcall	_CC2500_WriteCommand
  8776                           
  8777                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8778  09BE  303A               	movlw	58
  8779  09BF  319C  24A8         	fcall	_CC2500_WriteCommand
  8780  09C1  0021               	movlb	1	; select bank1
  8781  09C2  0008               	return
  8782  09C3                     __end_of_CC2500_RxData:	
  8783                           
  8784                           	psect	text38
  8785  1ED3                     __ptext38:	
  8786 ;; *************** function _CC2500_ReadStatus *****************
  8787 ;; Defined at:
  8788 ;;		line 308 in file "../src/CC2500_B1.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  status_addr     1    wreg     unsigned char 
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;Total ram usage:        2 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    6
  8809 ;; This function calls:
  8810 ;;		_CC2500_ReadByte
  8811 ;;		_CC2500_WriteByte
  8812 ;;		_RF_Timeout_Counter
  8813 ;;		_setRF_TimeoutCleared
  8814 ;; This function is called by:
  8815 ;;		_CC2500_RxData
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           
  8820                           ;psect for function _CC2500_ReadStatus
  8821  1ED3                     _CC2500_ReadStatus:	
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8825                           ;CC2500_ReadStatus@status_addr stored from wreg
  8826  1ED3  0020               	movlb	0	; select bank0
  8827  1ED4  00A4               	movwf	CC2500_ReadStatus@status_addr
  8828                           
  8829                           ;CC2500_B1.c: 309: RC4 = 0;
  8830  1ED5  120E               	bcf	14,4	;volatile
  8831                           
  8832                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8833  1ED6  0824               	movf	CC2500_ReadStatus@status_addr,w
  8834  1ED7  3EC0               	addlw	192
  8835  1ED8  00A3               	movwf	??_CC2500_ReadStatus
  8836  1ED9  0823               	movf	??_CC2500_ReadStatus,w
  8837  1EDA  0021               	movlb	1	; select bank1
  8838  1EDB  00D4               	movwf	_SPI0Buffer^(0+128)
  8839                           
  8840                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8841  1EDC  2EE0               	goto	l6945
  8842  1EDD                     l6943:	
  8843                           
  8844                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8845  1EDD  319B  2394  319E   	fcall	_RF_Timeout_Counter
  8846  1EE0                     l6945:	
  8847  1EE0  0020               	movlb	0	; select bank0
  8848  1EE1  1D0E               	btfss	14,2	;volatile
  8849  1EE2  2EE6               	goto	l6949
  8850  1EE3  0021               	movlb	1	; select bank1
  8851  1EE4  1F21               	btfss	(_RF1^(0+128)+1),6
  8852  1EE5  2EDD               	goto	l6943
  8853  1EE6                     l6949:	
  8854                           
  8855                           ;CC2500_B1.c: 314: };
  8856                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8857  1EE6  3199  2141  319E   	fcall	_setRF_TimeoutCleared
  8858                           
  8859                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8860  1EE9  319C  2475  319E   	fcall	_CC2500_WriteByte
  8861                           
  8862                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8863  1EEC  319D  2531         	fcall	_CC2500_ReadByte
  8864                           
  8865                           ;CC2500_B1.c: 319: RC4 = 1;
  8866  1EEE  0020               	movlb	0	; select bank0
  8867  1EEF  160E               	bsf	14,4	;volatile
  8868                           
  8869                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8870  1EF0  0021               	movlb	1	; select bank1
  8871  1EF1  0854               	movf	_SPI0Buffer^(0+128),w
  8872  1EF2  0020               	movlb	0	; select bank0
  8873  1EF3  00A3               	movwf	??_CC2500_ReadStatus
  8874  1EF4  0823               	movf	??_CC2500_ReadStatus,w
  8875  1EF5  0021               	movlb	1	; select bank1
  8876  1EF6  00DA               	movwf	_s_data^(0+128)
  8877  1EF7  0008               	return
  8878  1EF8                     __end_of_CC2500_ReadStatus:	
  8879                           
  8880                           	psect	text39
  8881  1D31                     __ptext39:	
  8882 ;; *************** function _CC2500_ReadByte *****************
  8883 ;; Defined at:
  8884 ;;		line 242 in file "../src/CC2500_B1.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;		None
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8889 ;; Return value:  Size  Location     Type
  8890 ;;		None               void
  8891 ;; Registers used:
  8892 ;;		wreg, status,2, status,0
  8893 ;; Tracked objects:
  8894 ;;		On entry : 0/0
  8895 ;;		On exit  : 0/0
  8896 ;;		Unchanged: 0/0
  8897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;Total ram usage:        2 bytes
  8903 ;; Hardware stack levels used:    1
  8904 ;; Hardware stack levels required when called:    5
  8905 ;; This function calls:
  8906 ;;		Nothing
  8907 ;; This function is called by:
  8908 ;;		_CC2500_RxData
  8909 ;;		_CC2500_ReadStatus
  8910 ;;		_CC2500_ReadREG
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           
  8915                           ;psect for function _CC2500_ReadByte
  8916  1D31                     _CC2500_ReadByte:	
  8917                           
  8918                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8919                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8923  1D31  0020               	movlb	0	; select bank0
  8924  1D32  01A2               	clrf	CC2500_ReadByte@loop_b
  8925  1D33                     L3:	
  8926  1D33  3008               	movlw	8
  8927  1D34  0222               	subwf	CC2500_ReadByte@loop_b,w
  8928  1D35  1803               	btfsc	3,0
  8929  1D36  0008               	return
  8930                           
  8931                           ;CC2500_B1.c: 245: RC1 = 1;
  8932  1D37  148E               	bsf	14,1	;volatile
  8933                           
  8934                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8935  1D38  1003               	clrc
  8936  1D39  0021               	movlb	1	; select bank1
  8937  1D3A  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8938                           
  8939                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8940  1D3B  0020               	movlb	0	; select bank0
  8941  1D3C  1D0E               	btfss	14,2	;volatile
  8942  1D3D  2D41               	goto	l6829
  8943                           
  8944                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8945  1D3E  0021               	movlb	1	; select bank1
  8946  1D3F  1454               	bsf	_SPI0Buffer^(0+128),0
  8947  1D40  2D47               	goto	l6831
  8948  1D41                     l6829:	
  8949                           
  8950                           ;CC2500_B1.c: 249: else
  8951                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8952  1D41  30FE               	movlw	254
  8953  1D42  0020               	movlb	0	; select bank0
  8954  1D43  00A1               	movwf	??_CC2500_ReadByte
  8955  1D44  0821               	movf	??_CC2500_ReadByte,w
  8956  1D45  0021               	movlb	1	; select bank1
  8957  1D46  05D4               	andwf	_SPI0Buffer^(0+128),f
  8958  1D47                     l6831:	
  8959                           
  8960                           ;CC2500_B1.c: 251: RC1 = 0;
  8961  1D47  0020               	movlb	0	; select bank0
  8962  1D48  108E               	bcf	14,1	;volatile
  8963  1D49  3001               	movlw	1
  8964  1D4A  00A1               	movwf	??_CC2500_ReadByte
  8965  1D4B  0821               	movf	??_CC2500_ReadByte,w
  8966  1D4C  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8967  1D4D  2D33               	goto	L3
  8968  1D4E                     __end_of_CC2500_ReadByte:	
  8969                           
  8970                           	psect	text40
  8971  1BA9                     __ptext40:	
  8972 ;; *************** function _CC2500_PowerOnInitial *****************
  8973 ;; Defined at:
  8974 ;;		line 126 in file "../src/CC2500_B1.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;		None
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;		None
  8979 ;; Return value:  Size  Location     Type
  8980 ;;		None               void
  8981 ;; Registers used:
  8982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;Total ram usage:        0 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    8
  8995 ;; This function calls:
  8996 ;;		_CC2500_ClearRXFIFO
  8997 ;;		_CC2500_ClearTXFIFO
  8998 ;;		_CC2500_FrequencyCabr
  8999 ;;		_CC2500_InitPATable
  9000 ;;		_CC2500_InitSetREG
  9001 ;;		_CC2500_PowerRST
  9002 ;;		_CC2500_SIDLEMode
  9003 ;; This function is called by:
  9004 ;;		_main
  9005 ;;		_setRF_Main
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _CC2500_PowerOnInitial
  9011  1BA9                     _CC2500_PowerOnInitial:	
  9012                           
  9013                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9014                           
  9015                           ;incstack = 0
  9016                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9017  1BA9  3193  2320  319B   	fcall	_CC2500_PowerRST
  9018                           
  9019                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9020  1BAC  319F  271E  319B   	fcall	_CC2500_InitSetREG
  9021                           
  9022                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9023  1BAF  319D  256C  319B   	fcall	_CC2500_InitPATable
  9024                           
  9025                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9026  1BB2  3199  2149  319B   	fcall	_CC2500_ClearTXFIFO
  9027                           
  9028                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9029  1BB5  3199  2145  319B   	fcall	_CC2500_ClearRXFIFO
  9030                           
  9031                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9032  1BB8  319A  2244  319B   	fcall	_CC2500_FrequencyCabr
  9033                           
  9034                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9035  1BBB  3199  214D         	fcall	_CC2500_SIDLEMode
  9036  1BBD  0008               	return
  9037  1BBE                     __end_of_CC2500_PowerOnInitial:	
  9038                           
  9039                           	psect	text41
  9040  194D                     __ptext41:	
  9041 ;; *************** function _CC2500_SIDLEMode *****************
  9042 ;; Defined at:
  9043 ;;		line 216 in file "../src/CC2500_B1.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;		None
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;		None               void
  9050 ;; Registers used:
  9051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:        0 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    7
  9064 ;; This function calls:
  9065 ;;		_CC2500_WriteCommand
  9066 ;; This function is called by:
  9067 ;;		_CC2500_PowerOnInitial
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _CC2500_SIDLEMode
  9073  194D                     _CC2500_SIDLEMode:	
  9074                           
  9075                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9079  194D  3036               	movlw	54
  9080  194E  319C  24A8         	fcall	_CC2500_WriteCommand
  9081  1950  0008               	return
  9082  1951                     __end_of_CC2500_SIDLEMode:	
  9083                           
  9084                           	psect	text42
  9085  1320                     __ptext42:	
  9086 ;; *************** function _CC2500_PowerRST *****************
  9087 ;; Defined at:
  9088 ;;		line 139 in file "../src/CC2500_B1.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;		None               void
  9095 ;; Registers used:
  9096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;Total ram usage:        1 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    6
  9109 ;; This function calls:
  9110 ;;		_CC2500_WriteByte
  9111 ;;		_DelayTime_1us
  9112 ;;		_RF_Timeout_Counter
  9113 ;;		_setRF_TimeoutCleared
  9114 ;; This function is called by:
  9115 ;;		_CC2500_PowerOnInitial
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _CC2500_PowerRST
  9121  1320                     _CC2500_PowerRST:	
  9122                           
  9123                           ;CC2500_B1.c: 140: RC1 = 0;
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9127  1320  0020               	movlb	0	; select bank0
  9128  1321  108E               	bcf	14,1	;volatile
  9129                           
  9130                           ;CC2500_B1.c: 141: RC0 = 0;
  9131  1322  100E               	bcf	14,0	;volatile
  9132                           
  9133                           ;CC2500_B1.c: 142: RC4 = 1;
  9134  1323  160E               	bsf	14,4	;volatile
  9135                           
  9136                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9137  1324  300A               	movlw	10
  9138  1325  00A1               	movwf	DelayTime_1us@count
  9139  1326  3000               	movlw	0
  9140  1327  00A2               	movwf	DelayTime_1us@count+1
  9141  1328  319E  26F8  3193   	fcall	_DelayTime_1us
  9142                           
  9143                           ;CC2500_B1.c: 144: RC4 = 0;
  9144  132B  0020               	movlb	0	; select bank0
  9145  132C  120E               	bcf	14,4	;volatile
  9146                           
  9147                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9148  132D  300A               	movlw	10
  9149  132E  00A1               	movwf	DelayTime_1us@count
  9150  132F  3000               	movlw	0
  9151  1330  00A2               	movwf	DelayTime_1us@count+1
  9152  1331  319E  26F8  3193   	fcall	_DelayTime_1us
  9153                           
  9154                           ;CC2500_B1.c: 146: RC4 = 1;
  9155  1334  0020               	movlb	0	; select bank0
  9156  1335  160E               	bsf	14,4	;volatile
  9157                           
  9158                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9159  1336  3028               	movlw	40
  9160  1337  00A1               	movwf	DelayTime_1us@count
  9161  1338  3000               	movlw	0
  9162  1339  00A2               	movwf	DelayTime_1us@count+1
  9163  133A  319E  26F8  3193   	fcall	_DelayTime_1us
  9164                           
  9165                           ;CC2500_B1.c: 148: RC4 = 0;
  9166  133D  0020               	movlb	0	; select bank0
  9167  133E  120E               	bcf	14,4	;volatile
  9168                           
  9169                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9170  133F  3030               	movlw	48
  9171  1340  00A7               	movwf	??_CC2500_PowerRST
  9172  1341  0827               	movf	??_CC2500_PowerRST,w
  9173  1342  0021               	movlb	1	; select bank1
  9174  1343  00D4               	movwf	_SPI0Buffer^(0+128)
  9175                           
  9176                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9177  1344  2B48               	goto	l6973
  9178  1345                     l6971:	
  9179                           
  9180                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9181  1345  319B  2394  3193   	fcall	_RF_Timeout_Counter
  9182  1348                     l6973:	
  9183  1348  0020               	movlb	0	; select bank0
  9184  1349  1D0E               	btfss	14,2	;volatile
  9185  134A  2B4E               	goto	l6977
  9186  134B  0021               	movlb	1	; select bank1
  9187  134C  1F21               	btfss	(_RF1^(0+128)+1),6
  9188  134D  2B45               	goto	l6971
  9189  134E                     l6977:	
  9190                           
  9191                           ;CC2500_B1.c: 152: };
  9192                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9193  134E  3199  2141  3193   	fcall	_setRF_TimeoutCleared
  9194                           
  9195                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9196  1351  319C  2475  3193   	fcall	_CC2500_WriteByte
  9197                           
  9198                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9199  1354  2B58               	goto	l6983
  9200  1355                     l6981:	
  9201                           
  9202                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9203  1355  319B  2394  3193   	fcall	_RF_Timeout_Counter
  9204  1358                     l6983:	
  9205  1358  0020               	movlb	0	; select bank0
  9206  1359  1D0E               	btfss	14,2	;volatile
  9207  135A  2B5E               	goto	l6987
  9208  135B  0021               	movlb	1	; select bank1
  9209  135C  1F21               	btfss	(_RF1^(0+128)+1),6
  9210  135D  2B55               	goto	l6981
  9211  135E                     l6987:	
  9212                           
  9213                           ;CC2500_B1.c: 157: };
  9214                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9215  135E  3199  2141         	fcall	_setRF_TimeoutCleared
  9216                           
  9217                           ;CC2500_B1.c: 159: RC0 = 0;
  9218  1360  0020               	movlb	0	; select bank0
  9219  1361  100E               	bcf	14,0	;volatile
  9220                           
  9221                           ;CC2500_B1.c: 160: RC4 = 1;
  9222  1362  160E               	bsf	14,4	;volatile
  9223  1363  0008               	return
  9224  1364                     __end_of_CC2500_PowerRST:	
  9225                           
  9226                           	psect	text43
  9227  1F1E                     __ptext43:	
  9228 ;; *************** function _CC2500_InitSetREG *****************
  9229 ;; Defined at:
  9230 ;;		line 166 in file "../src/CC2500_B1.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;		None
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9235 ;;  temp2           1    8[BANK0 ] unsigned char 
  9236 ;;  temp1           1    7[BANK0 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        4 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    7
  9253 ;; This function calls:
  9254 ;;		_CC2500_WriteREG
  9255 ;; This function is called by:
  9256 ;;		_CC2500_PowerOnInitial
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           
  9261                           ;psect for function _CC2500_InitSetREG
  9262  1F1E                     _CC2500_InitSetREG:	
  9263                           
  9264                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9265                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9266                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9267                           
  9268                           ;incstack = 0
  9269                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9270  1F1E  0020               	movlb	0	; select bank0
  9271  1F1F  01A9               	clrf	CC2500_InitSetREG@loop_c
  9272  1F20                     L4:	
  9273  1F20  302F               	movlw	47
  9274  1F21  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9275  1F22  1803               	btfsc	3,0
  9276  1F23  0008               	return
  9277                           
  9278                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9279  1F24  0829               	movf	CC2500_InitSetREG@loop_c,w
  9280  1F25  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9281  1F26  0084               	movwf	4
  9282  1F27  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9283  1F28  1803               	skipnc
  9284  1F29  3E01               	addlw	1
  9285  1F2A  0085               	movwf	5
  9286  1F2B  0800               	movf	0,w	;code access
  9287  1F2C  00A6               	movwf	??_CC2500_InitSetREG
  9288  1F2D  0826               	movf	??_CC2500_InitSetREG,w
  9289  1F2E  00A7               	movwf	CC2500_InitSetREG@temp1
  9290                           
  9291                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9292  1F2F  0829               	movf	CC2500_InitSetREG@loop_c,w
  9293  1F30  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9294  1F31  0084               	movwf	4
  9295  1F32  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9296  1F33  1803               	skipnc
  9297  1F34  3E01               	addlw	1
  9298  1F35  0085               	movwf	5
  9299  1F36  0800               	movf	0,w	;code access
  9300  1F37  00A6               	movwf	??_CC2500_InitSetREG
  9301  1F38  0826               	movf	??_CC2500_InitSetREG,w
  9302  1F39  00A8               	movwf	CC2500_InitSetREG@temp2
  9303                           
  9304                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9305  1F3A  0828               	movf	CC2500_InitSetREG@temp2,w
  9306  1F3B  00A6               	movwf	??_CC2500_InitSetREG
  9307  1F3C  0826               	movf	??_CC2500_InitSetREG,w
  9308  1F3D  00A3               	movwf	CC2500_WriteREG@value
  9309  1F3E  0827               	movf	CC2500_InitSetREG@temp1,w
  9310  1F3F  319E  26B0  319F   	fcall	_CC2500_WriteREG
  9311  1F42  3001               	movlw	1
  9312  1F43  0020               	movlb	0	; select bank0
  9313  1F44  00A6               	movwf	??_CC2500_InitSetREG
  9314  1F45  0826               	movf	??_CC2500_InitSetREG,w
  9315  1F46  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9316  1F47  2F20               	goto	L4
  9317  1F48                     __end_of_CC2500_InitSetREG:	
  9318                           
  9319                           	psect	text44
  9320  1D6C                     __ptext44:	
  9321 ;; *************** function _CC2500_InitPATable *****************
  9322 ;; Defined at:
  9323 ;;		line 181 in file "../src/CC2500_B1.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;		None
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9328 ;;  temp            1    7[BANK0 ] unsigned char 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        3 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    7
  9345 ;; This function calls:
  9346 ;;		_CC2500_WriteREG
  9347 ;; This function is called by:
  9348 ;;		_CC2500_PowerOnInitial
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function _CC2500_InitPATable
  9354  1D6C                     _CC2500_InitPATable:	
  9355                           
  9356                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9357                           ;CC2500_B1.c: 183: unsigned char temp;
  9358                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9362  1D6C  0020               	movlb	0	; select bank0
  9363  1D6D  01A8               	clrf	CC2500_InitPATable@loop_d
  9364  1D6E                     L5:	
  9365  1D6E  3008               	movlw	8
  9366  1D6F  0228               	subwf	CC2500_InitPATable@loop_d,w
  9367  1D70  1803               	btfsc	3,0
  9368  1D71  0008               	return
  9369                           
  9370                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9371  1D72  0828               	movf	CC2500_InitPATable@loop_d,w
  9372  1D73  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9373  1D74  0084               	movwf	4
  9374  1D75  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9375  1D76  1803               	skipnc
  9376  1D77  3E01               	addlw	1
  9377  1D78  0085               	movwf	5
  9378  1D79  0800               	movf	0,w	;code access
  9379  1D7A  00A6               	movwf	??_CC2500_InitPATable
  9380  1D7B  0826               	movf	??_CC2500_InitPATable,w
  9381  1D7C  00A7               	movwf	CC2500_InitPATable@temp
  9382                           
  9383                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9384  1D7D  0827               	movf	CC2500_InitPATable@temp,w
  9385  1D7E  00A6               	movwf	??_CC2500_InitPATable
  9386  1D7F  0826               	movf	??_CC2500_InitPATable,w
  9387  1D80  00A3               	movwf	CC2500_WriteREG@value
  9388  1D81  303E               	movlw	62
  9389  1D82  319E  26B0  319D   	fcall	_CC2500_WriteREG
  9390  1D85  3001               	movlw	1
  9391  1D86  0020               	movlb	0	; select bank0
  9392  1D87  00A6               	movwf	??_CC2500_InitPATable
  9393  1D88  0826               	movf	??_CC2500_InitPATable,w
  9394  1D89  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9395  1D8A  2D6E               	goto	L5
  9396  1D8B                     __end_of_CC2500_InitPATable:	
  9397                           
  9398                           	psect	text45
  9399  1EB0                     __ptext45:	
  9400 ;; *************** function _CC2500_WriteREG *****************
  9401 ;; Defined at:
  9402 ;;		line 258 in file "../src/CC2500_B1.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  w_addr          1    wreg     unsigned char 
  9405 ;;  value           1    3[BANK0 ] unsigned char 
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        3 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    6
  9424 ;; This function calls:
  9425 ;;		_CC2500_WriteByte
  9426 ;;		_RF_Timeout_Counter
  9427 ;;		_setRF_TimeoutCleared
  9428 ;; This function is called by:
  9429 ;;		_CC2500_InitSetREG
  9430 ;;		_CC2500_InitPATable
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function _CC2500_WriteREG
  9436  1EB0                     _CC2500_WriteREG:	
  9437                           
  9438                           ;incstack = 0
  9439                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9440                           ;CC2500_WriteREG@w_addr stored from wreg
  9441  1EB0  0020               	movlb	0	; select bank0
  9442  1EB1  00A5               	movwf	CC2500_WriteREG@w_addr
  9443                           
  9444                           ;CC2500_B1.c: 259: RC4 = 0;
  9445  1EB2  120E               	bcf	14,4	;volatile
  9446                           
  9447                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9448  1EB3  0825               	movf	CC2500_WriteREG@w_addr,w
  9449  1EB4  00A4               	movwf	??_CC2500_WriteREG
  9450  1EB5  0824               	movf	??_CC2500_WriteREG,w
  9451  1EB6  0021               	movlb	1	; select bank1
  9452  1EB7  00D4               	movwf	_SPI0Buffer^(0+128)
  9453                           
  9454                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9455  1EB8  2EBC               	goto	l6853
  9456  1EB9                     l6851:	
  9457                           
  9458                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9459  1EB9  319B  2394  319E   	fcall	_RF_Timeout_Counter
  9460  1EBC                     l6853:	
  9461  1EBC  0020               	movlb	0	; select bank0
  9462  1EBD  1D0E               	btfss	14,2	;volatile
  9463  1EBE  2EC2               	goto	l6857
  9464  1EBF  0021               	movlb	1	; select bank1
  9465  1EC0  1F21               	btfss	(_RF1^(0+128)+1),6
  9466  1EC1  2EB9               	goto	l6851
  9467  1EC2                     l6857:	
  9468                           
  9469                           ;CC2500_B1.c: 263: };
  9470                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9471  1EC2  3199  2141  319E   	fcall	_setRF_TimeoutCleared
  9472                           
  9473                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9474  1EC5  319C  2475  319E   	fcall	_CC2500_WriteByte
  9475                           
  9476                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9477  1EC8  0020               	movlb	0	; select bank0
  9478  1EC9  0823               	movf	CC2500_WriteREG@value,w
  9479  1ECA  00A4               	movwf	??_CC2500_WriteREG
  9480  1ECB  0824               	movf	??_CC2500_WriteREG,w
  9481  1ECC  0021               	movlb	1	; select bank1
  9482  1ECD  00D4               	movwf	_SPI0Buffer^(0+128)
  9483                           
  9484                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9485  1ECE  319C  2475         	fcall	_CC2500_WriteByte
  9486                           
  9487                           ;CC2500_B1.c: 269: RC4 = 1;
  9488  1ED0  0020               	movlb	0	; select bank0
  9489  1ED1  160E               	bsf	14,4	;volatile
  9490  1ED2  0008               	return
  9491  1ED3                     __end_of_CC2500_WriteREG:	
  9492                           
  9493                           	psect	text46
  9494  1A44                     __ptext46:	
  9495 ;; *************** function _CC2500_FrequencyCabr *****************
  9496 ;; Defined at:
  9497 ;;		line 208 in file "../src/CC2500_B1.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;		None
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;Total ram usage:        0 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    7
  9518 ;; This function calls:
  9519 ;;		_CC2500_WriteCommand
  9520 ;;		_DelayTime_1us
  9521 ;; This function is called by:
  9522 ;;		_CC2500_PowerOnInitial
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _CC2500_FrequencyCabr
  9528  1A44                     _CC2500_FrequencyCabr:	
  9529                           
  9530                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9531                           
  9532                           ;incstack = 0
  9533                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9534  1A44  3033               	movlw	51
  9535  1A45  319C  24A8  319A   	fcall	_CC2500_WriteCommand
  9536                           
  9537                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9538  1A48  30E8               	movlw	232
  9539  1A49  0020               	movlb	0	; select bank0
  9540  1A4A  00A1               	movwf	DelayTime_1us@count
  9541  1A4B  3003               	movlw	3
  9542  1A4C  00A2               	movwf	DelayTime_1us@count+1
  9543  1A4D  319E  26F8         	fcall	_DelayTime_1us
  9544  1A4F  0008               	return
  9545  1A50                     __end_of_CC2500_FrequencyCabr:	
  9546                           
  9547                           	psect	text47
  9548  1EF8                     __ptext47:	
  9549 ;; *************** function _DelayTime_1us *****************
  9550 ;; Defined at:
  9551 ;;		line 327 in file "../src/CC2500_B1.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  count           2    1[BANK0 ] int 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;  j               2    5[BANK0 ] unsigned int 
  9556 ;;  i               2    3[BANK0 ] unsigned int 
  9557 ;; Return value:  Size  Location     Type
  9558 ;;		None               void
  9559 ;; Registers used:
  9560 ;;		wreg, status,2
  9561 ;; Tracked objects:
  9562 ;;		On entry : 0/0
  9563 ;;		On exit  : 0/0
  9564 ;;		Unchanged: 0/0
  9565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9566 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;Total ram usage:        6 bytes
  9571 ;; Hardware stack levels used:    1
  9572 ;; Hardware stack levels required when called:    5
  9573 ;; This function calls:
  9574 ;;		Nothing
  9575 ;; This function is called by:
  9576 ;;		_CC2500_PowerRST
  9577 ;;		_CC2500_FrequencyCabr
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           
  9582                           ;psect for function _DelayTime_1us
  9583  1EF8                     _DelayTime_1us:	
  9584                           
  9585                           ;CC2500_B1.c: 328: unsigned int i, j;
  9586                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9587                           
  9588                           ;incstack = 0
  9589                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9590  1EF8  3001               	movlw	1
  9591  1EF9  0020               	movlb	0	; select bank0
  9592  1EFA  00A3               	movwf	DelayTime_1us@i
  9593  1EFB  3000               	movlw	0
  9594  1EFC  00A4               	movwf	DelayTime_1us@i+1
  9595  1EFD                     l371:	
  9596  1EFD  0822               	movf	DelayTime_1us@count+1,w
  9597  1EFE  0224               	subwf	DelayTime_1us@i+1,w
  9598  1EFF  1D03               	skipz
  9599  1F00  2F03               	goto	u6185
  9600  1F01  0821               	movf	DelayTime_1us@count,w
  9601  1F02  0223               	subwf	DelayTime_1us@i,w
  9602  1F03                     u6185:	
  9603  1F03  1803               	btfsc	3,0
  9604  1F04  0008               	return
  9605                           
  9606                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9607  1F05  01A5               	clrf	DelayTime_1us@j
  9608  1F06  01A6               	clrf	DelayTime_1us@j+1
  9609  1F07  3000               	movlw	0
  9610  1F08  0226               	subwf	DelayTime_1us@j+1,w
  9611  1F09  3002               	movlw	2
  9612  1F0A  1903               	skipnz
  9613  1F0B  0225               	subwf	DelayTime_1us@j,w
  9614  1F0C  1803               	btfsc	3,0
  9615  1F0D  2F19               	goto	l6845
  9616  1F0E                     l6843:	
  9617  1F0E  3001               	movlw	1
  9618  1F0F  07A5               	addwf	DelayTime_1us@j,f
  9619  1F10  3000               	movlw	0
  9620  1F11  3DA6               	addwfc	DelayTime_1us@j+1,f
  9621  1F12  3000               	movlw	0
  9622  1F13  0226               	subwf	DelayTime_1us@j+1,w
  9623  1F14  3002               	movlw	2
  9624  1F15  1903               	skipnz
  9625  1F16  0225               	subwf	DelayTime_1us@j,w
  9626  1F17  1C03               	skipc
  9627  1F18  2F0E               	goto	l6843
  9628  1F19                     l6845:	
  9629  1F19  3001               	movlw	1
  9630  1F1A  07A3               	addwf	DelayTime_1us@i,f
  9631  1F1B  3000               	movlw	0
  9632  1F1C  3DA4               	addwfc	DelayTime_1us@i+1,f
  9633  1F1D  2EFD               	goto	l371
  9634  1F1E                     __end_of_DelayTime_1us:	
  9635                           
  9636                           	psect	text48
  9637  1949                     __ptext48:	
  9638 ;; *************** function _CC2500_ClearTXFIFO *****************
  9639 ;; Defined at:
  9640 ;;		line 194 in file "../src/CC2500_B1.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;		None
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;		None
  9645 ;; Return value:  Size  Location     Type
  9646 ;;		None               void
  9647 ;; Registers used:
  9648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;Total ram usage:        0 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    7
  9661 ;; This function calls:
  9662 ;;		_CC2500_WriteCommand
  9663 ;; This function is called by:
  9664 ;;		_CC2500_PowerOnInitial
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           
  9669                           ;psect for function _CC2500_ClearTXFIFO
  9670  1949                     _CC2500_ClearTXFIFO:	
  9671                           
  9672                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9676  1949  303B               	movlw	59
  9677  194A  319C  24A8         	fcall	_CC2500_WriteCommand
  9678  194C  0008               	return
  9679  194D                     __end_of_CC2500_ClearTXFIFO:	
  9680                           
  9681                           	psect	text49
  9682  1945                     __ptext49:	
  9683 ;; *************** function _CC2500_ClearRXFIFO *****************
  9684 ;; Defined at:
  9685 ;;		line 201 in file "../src/CC2500_B1.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;		None               void
  9692 ;; Registers used:
  9693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    7
  9706 ;; This function calls:
  9707 ;;		_CC2500_WriteCommand
  9708 ;; This function is called by:
  9709 ;;		_CC2500_PowerOnInitial
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _CC2500_ClearRXFIFO
  9715  1945                     _CC2500_ClearRXFIFO:	
  9716                           
  9717                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9718                           
  9719                           ;incstack = 0
  9720                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9721  1945  303A               	movlw	58
  9722  1946  319C  24A8         	fcall	_CC2500_WriteCommand
  9723  1948  0008               	return
  9724  1949                     __end_of_CC2500_ClearRXFIFO:	
  9725                           
  9726                           	psect	text50
  9727  1CA8                     __ptext50:	
  9728 ;; *************** function _CC2500_WriteCommand *****************
  9729 ;; Defined at:
  9730 ;;		line 292 in file "../src/CC2500_B1.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  command         1    wreg     unsigned char 
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  command         1    4[BANK0 ] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;		None               void
  9737 ;; Registers used:
  9738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;Total ram usage:        2 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    6
  9751 ;; This function calls:
  9752 ;;		_CC2500_WriteByte
  9753 ;;		_RF_Timeout_Counter
  9754 ;;		_setRF_TimeoutCleared
  9755 ;; This function is called by:
  9756 ;;		_CC2500_TxData
  9757 ;;		_CC2500_RxData
  9758 ;;		_CC2500_ClearTXFIFO
  9759 ;;		_CC2500_ClearRXFIFO
  9760 ;;		_CC2500_FrequencyCabr
  9761 ;;		_CC2500_SIDLEMode
  9762 ;;		_setRF_Main
  9763 ;;		_RF_RxDisable
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _CC2500_WriteCommand
  9769  1CA8                     _CC2500_WriteCommand:	
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9773                           ;CC2500_WriteCommand@command stored from wreg
  9774  1CA8  0020               	movlb	0	; select bank0
  9775  1CA9  00A4               	movwf	CC2500_WriteCommand@command
  9776                           
  9777                           ;CC2500_B1.c: 293: RC4 = 0;
  9778  1CAA  120E               	bcf	14,4	;volatile
  9779                           
  9780                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9781  1CAB  0824               	movf	CC2500_WriteCommand@command,w
  9782  1CAC  00A3               	movwf	??_CC2500_WriteCommand
  9783  1CAD  0823               	movf	??_CC2500_WriteCommand,w
  9784  1CAE  0021               	movlb	1	; select bank1
  9785  1CAF  00D4               	movwf	_SPI0Buffer^(0+128)
  9786                           
  9787                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9788  1CB0  2CB4               	goto	l6807
  9789  1CB1                     l6805:	
  9790                           
  9791                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9792  1CB1  319B  2394  319C   	fcall	_RF_Timeout_Counter
  9793  1CB4                     l6807:	
  9794  1CB4  0020               	movlb	0	; select bank0
  9795  1CB5  1D0E               	btfss	14,2	;volatile
  9796  1CB6  2CBA               	goto	l6811
  9797  1CB7  0021               	movlb	1	; select bank1
  9798  1CB8  1F21               	btfss	(_RF1^(0+128)+1),6
  9799  1CB9  2CB1               	goto	l6805
  9800  1CBA                     l6811:	
  9801                           
  9802                           ;CC2500_B1.c: 298: };
  9803                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9804  1CBA  3199  2141  319C   	fcall	_setRF_TimeoutCleared
  9805                           
  9806                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9807  1CBD  319C  2475         	fcall	_CC2500_WriteByte
  9808                           
  9809                           ;CC2500_B1.c: 302: RC4 = 1;
  9810  1CBF  0020               	movlb	0	; select bank0
  9811  1CC0  160E               	bsf	14,4	;volatile
  9812  1CC1  0008               	return
  9813  1CC2                     __end_of_CC2500_WriteCommand:	
  9814                           
  9815                           	psect	text51
  9816  1941                     __ptext51:	
  9817 ;; *************** function _setRF_TimeoutCleared *****************
  9818 ;; Defined at:
  9819 ;;		line 149 in file "../src/RF_Control_B1.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;		None
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;		None
  9824 ;; Return value:  Size  Location     Type
  9825 ;;		None               void
  9826 ;; Registers used:
  9827 ;;		status,2
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;Total ram usage:        0 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    5
  9840 ;; This function calls:
  9841 ;;		Nothing
  9842 ;; This function is called by:
  9843 ;;		_CC2500_TxData
  9844 ;;		_CC2500_RxData
  9845 ;;		_CC2500_PowerRST
  9846 ;;		_CC2500_WriteREG
  9847 ;;		_CC2500_WriteCommand
  9848 ;;		_CC2500_ReadStatus
  9849 ;;		_CC2500_ReadREG
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _setRF_TimeoutCleared
  9855  1941                     _setRF_TimeoutCleared:	
  9856                           
  9857                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9861  1941  0021               	movlb	1	; select bank1
  9862  1942  01AC               	clrf	(_RF1^(0+128)+12)
  9863  1943  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9864  1944  0008               	return
  9865  1945                     __end_of_setRF_TimeoutCleared:	
  9866                           
  9867                           	psect	text52
  9868  1B94                     __ptext52:	
  9869 ;; *************** function _RF_Timeout_Counter *****************
  9870 ;; Defined at:
  9871 ;;		line 141 in file "../src/RF_Control_B1.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;		None
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;		None               void
  9878 ;; Registers used:
  9879 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;Total ram usage:        0 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    5
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_CC2500_TxData
  9896 ;;		_CC2500_RxData
  9897 ;;		_CC2500_PowerRST
  9898 ;;		_CC2500_WriteREG
  9899 ;;		_CC2500_WriteCommand
  9900 ;;		_CC2500_ReadStatus
  9901 ;;		_CC2500_ReadREG
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _RF_Timeout_Counter
  9907  1B94                     _RF_Timeout_Counter:	
  9908                           
  9909                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9913  1B94  3001               	movlw	1
  9914  1B95  0021               	movlb	1	; select bank1
  9915  1B96  07AC               	addwf	(_RF1^(0+128)+12),f
  9916  1B97  3000               	movlw	0
  9917  1B98  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9918                           
  9919                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9920  1B99  300C               	movlw	12
  9921  1B9A  3EA0               	addlw	_RF1& (0+255)
  9922  1B9B  0086               	movwf	6
  9923  1B9C  0187               	clrf	7
  9924  1B9D  3F40               	moviw [0]fsr1
  9925  1B9E  3AA8               	xorlw	168
  9926  1B9F  1D03               	skipz
  9927  1BA0  2BA3               	goto	u5825
  9928  1BA1  3F41               	moviw [1]fsr1
  9929  1BA2  3A61               	xorlw	97
  9930  1BA3                     u5825:	
  9931  1BA3  1D03               	skipz
  9932  1BA4  0008               	return
  9933                           
  9934                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9935  1BA5  01AC               	clrf	(_RF1^(0+128)+12)
  9936  1BA6  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9937                           
  9938                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9939  1BA7  1721               	bsf	(_RF1^(0+128)+1),6
  9940  1BA8  0008               	return
  9941  1BA9                     __end_of_RF_Timeout_Counter:	
  9942                           
  9943                           	psect	text53
  9944  1C75                     __ptext53:	
  9945 ;; *************** function _CC2500_WriteByte *****************
  9946 ;; Defined at:
  9947 ;;		line 226 in file "../src/CC2500_B1.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;		None
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9952 ;; Return value:  Size  Location     Type
  9953 ;;		None               void
  9954 ;; Registers used:
  9955 ;;		wreg, status,2, status,0
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;Total ram usage:        2 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    5
  9968 ;; This function calls:
  9969 ;;		Nothing
  9970 ;; This function is called by:
  9971 ;;		_CC2500_TxData
  9972 ;;		_CC2500_RxData
  9973 ;;		_CC2500_PowerRST
  9974 ;;		_CC2500_WriteREG
  9975 ;;		_CC2500_WriteCommand
  9976 ;;		_CC2500_ReadStatus
  9977 ;;		_CC2500_ReadREG
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _CC2500_WriteByte
  9983  1C75                     _CC2500_WriteByte:	
  9984                           
  9985                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9986                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9990  1C75  0020               	movlb	0	; select bank0
  9991  1C76  01A2               	clrf	CC2500_WriteByte@loop_a
  9992  1C77                     L6:	
  9993  1C77  3008               	movlw	8
  9994  1C78  0222               	subwf	CC2500_WriteByte@loop_a,w
  9995  1C79  1803               	btfsc	3,0
  9996  1C7A  0008               	return
  9997                           
  9998                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9999  1C7B  0021               	movlb	1	; select bank1
 10000  1C7C  1FD4               	btfss	_SPI0Buffer^(0+128),7
 10001  1C7D  2C81               	goto	l327
 10002                           
 10003                           ;CC2500_B1.c: 230: RC0 = 1;
 10004  1C7E  0020               	movlb	0	; select bank0
 10005  1C7F  140E               	bsf	14,0	;volatile
 10006  1C80  2C83               	goto	l328
 10007  1C81                     l327:	
 10008                           
 10009                           ;CC2500_B1.c: 231: else
 10010                           ;CC2500_B1.c: 232: RC0 = 0;
 10011  1C81  0020               	movlb	0	; select bank0
 10012  1C82  100E               	bcf	14,0	;volatile
 10013  1C83                     l328:	
 10014                           
 10015                           ;CC2500_B1.c: 233: RC1 = 1;
 10016  1C83  148E               	bsf	14,1	;volatile
 10017                           
 10018                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10019  1C84  1003               	clrc
 10020  1C85  0021               	movlb	1	; select bank1
 10021  1C86  0DD4               	rlf	_SPI0Buffer^(0+128),f
 10022                           
 10023                           ;CC2500_B1.c: 235: RC1 = 0;
 10024  1C87  0020               	movlb	0	; select bank0
 10025  1C88  108E               	bcf	14,1	;volatile
 10026  1C89  3001               	movlw	1
 10027  1C8A  00A1               	movwf	??_CC2500_WriteByte
 10028  1C8B  0821               	movf	??_CC2500_WriteByte,w
 10029  1C8C  07A2               	addwf	CC2500_WriteByte@loop_a,f
 10030  1C8D  2C77               	goto	L6
 10031  1C8E                     __end_of_CC2500_WriteByte:	
 10032                           
 10033                           	psect	text54
 10034  1931                     __ptext54:	
 10035 ;; *************** function _RF_Initialization *****************
 10036 ;; Defined at:
 10037 ;;		line 9 in file "../src/RF_Control_B1.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;		None
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;		None
 10042 ;; Return value:  Size  Location     Type
 10043 ;;		None               void
 10044 ;; Registers used:
 10045 ;;		wreg, status,2, status,0, pclath, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;Total ram usage:        0 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    6
 10058 ;; This function calls:
 10059 ;;		_setRF_Initialization
 10060 ;; This function is called by:
 10061 ;;		_main
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function _RF_Initialization
 10067  1931                     _RF_Initialization:	
 10068                           
 10069                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10070                           
 10071                           ;incstack = 0
 10072                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10073  1931  3199  21DA         	fcall	_setRF_Initialization
 10074  1933  0008               	return
 10075  1934                     __end_of_RF_Initialization:	
 10076                           
 10077                           	psect	text55
 10078  19DA                     __ptext55:	
 10079 ;; *************** function _setRF_Initialization *****************
 10080 ;; Defined at:
 10081 ;;		line 17 in file "../src/RF_Control_B1.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;		None
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;		None
 10086 ;; Return value:  Size  Location     Type
 10087 ;;		None               void
 10088 ;; Registers used:
 10089 ;;		wreg
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;Total ram usage:        1 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    5
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_RF_Initialization
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           
 10110                           ;psect for function _setRF_Initialization
 10111  19DA                     _setRF_Initialization:	
 10112                           
 10113                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in _setRF_Initialization: [wreg]
 10117  19DA  3015               	movlw	21
 10118  19DB  0020               	movlb	0	; select bank0
 10119  19DC  00A1               	movwf	??_setRF_Initialization
 10120  19DD  0821               	movf	??_setRF_Initialization,w
 10121  19DE  0021               	movlb	1	; select bank1
 10122  19DF  00D7               	movwf	_Tx_Length^(0+128)
 10123                           
 10124                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10125  19E0  30C8               	movlw	200
 10126  19E1  00A7               	movwf	(_RF1^(0+128)+7)
 10127  19E2  3000               	movlw	0
 10128  19E3  00A8               	movwf	(_RF1^(0+128)+8)
 10129  19E4  0008               	return
 10130  19E5                     __end_of_setRF_Initialization:	
 10131                           
 10132                           	psect	text56
 10133  1AE9                     __ptext56:	
 10134 ;; *************** function _Mcu_Initialization *****************
 10135 ;; Defined at:
 10136 ;;		line 30 in file "../src/MCU_B1.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;		None
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;		None
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0, pclath, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;Total ram usage:        0 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    6
 10157 ;; This function calls:
 10158 ;;		_ADC_Set
 10159 ;;		_Fosc_Set
 10160 ;;		_IOC_Set
 10161 ;;		_IO_Set
 10162 ;;		_TMR1_Set
 10163 ;;		_WDT_Set
 10164 ;; This function is called by:
 10165 ;;		_main
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           
 10170                           ;psect for function _Mcu_Initialization
 10171  1AE9                     _Mcu_Initialization:	
 10172                           
 10173                           ;MCU_B1.c: 32: Fosc_Set();
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10177  1AE9  3199  213D  319A   	fcall	_Fosc_Set
 10178                           
 10179                           ;MCU_B1.c: 34: IO_Set();
 10180  1AEC  319C  24C2  319A   	fcall	_IO_Set
 10181                           
 10182                           ;MCU_B1.c: 36: ;;
 10183                           ;MCU_B1.c: 38: TMR1_Set();
 10184  1AEF  319A  2238  319A   	fcall	_TMR1_Set
 10185                           
 10186                           ;MCU_B1.c: 40: ADC_Set();
 10187  1AF2  3199  2168  319A   	fcall	_ADC_Set
 10188                           
 10189                           ;MCU_B1.c: 42: ;;
 10190                           ;MCU_B1.c: 44: ;;
 10191                           ;MCU_B1.c: 46: IOC_Set();
 10192  1AF5  3199  21C4  319A   	fcall	_IOC_Set
 10193                           
 10194                           ;MCU_B1.c: 48: ;;
 10195                           ;MCU_B1.c: 50: ;;
 10196                           ;MCU_B1.c: 52: WDT_Set();
 10197  1AF8  3199  21CF         	fcall	_WDT_Set
 10198  1AFA  0008               	return
 10199  1AFB                     __end_of_Mcu_Initialization:	
 10200                           
 10201                           	psect	text57
 10202  19CF                     __ptext57:	
 10203 ;; *************** function _WDT_Set *****************
 10204 ;; Defined at:
 10205 ;;		line 1089 in file "../src/MCU_B1.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;		None
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;		None
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;Total ram usage:        1 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    5
 10226 ;; This function calls:
 10227 ;;		Nothing
 10228 ;; This function is called by:
 10229 ;;		_Mcu_Initialization
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _WDT_Set
 10235  19CF                     _WDT_Set:	
 10236                           
 10237                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _WDT_Set: [wreg]
 10241  19CF  3017               	movlw	23
 10242  19D0  0021               	movlb	1	; select bank1
 10243  19D1  0097               	movwf	23	;volatile
 10244                           
 10245                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10246  19D2  1449               	bsf	_WDT^(0+128),0
 10247                           
 10248                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10249  19D3  300A               	movlw	10
 10250  19D4  0020               	movlb	0	; select bank0
 10251  19D5  00A1               	movwf	??_WDT_Set
 10252  19D6  0821               	movf	??_WDT_Set,w
 10253  19D7  0021               	movlb	1	; select bank1
 10254  19D8  00CA               	movwf	(_WDT^(0+128)+1)
 10255  19D9  0008               	return
 10256  19DA                     __end_of_WDT_Set:	
 10257                           
 10258                           	psect	text58
 10259  1A38                     __ptext58:	
 10260 ;; *************** function _TMR1_Set *****************
 10261 ;; Defined at:
 10262 ;;		line 226 in file "../src/MCU_B1.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;		None               void
 10269 ;; Registers used:
 10270 ;;		wreg
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    5
 10283 ;; This function calls:
 10284 ;;		Nothing
 10285 ;; This function is called by:
 10286 ;;		_Mcu_Initialization
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _TMR1_Set
 10292  1A38                     _TMR1_Set:	
 10293                           
 10294                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _TMR1_Set: [wreg]
 10298  1A38  3041               	movlw	65
 10299  1A39  0020               	movlb	0	; select bank0
 10300  1A3A  0098               	movwf	24	;volatile
 10301                           
 10302                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10303  1A3B  30FA               	movlw	250
 10304  1A3C  0097               	movwf	23	;volatile
 10305                           
 10306                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10307  1A3D  3038               	movlw	56
 10308  1A3E  0096               	movwf	22	;volatile
 10309                           
 10310                           ;MCU_B1.c: 230: TMR1IE = 1;
 10311  1A3F  0021               	movlb	1	; select bank1
 10312  1A40  1411               	bsf	17,0	;volatile
 10313                           
 10314                           ;MCU_B1.c: 231: PEIE = 1;
 10315  1A41  170B               	bsf	11,6	;volatile
 10316                           
 10317                           ;MCU_B1.c: 232: GIE = 1;
 10318  1A42  178B               	bsf	11,7	;volatile
 10319  1A43  0008               	return
 10320  1A44                     __end_of_TMR1_Set:	
 10321                           
 10322                           	psect	text59
 10323  1CC2                     __ptext59:	
 10324 ;; *************** function _IO_Set *****************
 10325 ;; Defined at:
 10326 ;;		line 60 in file "../src/MCU_B1.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;		None               void
 10333 ;; Registers used:
 10334 ;;		wreg, status,2
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_Mcu_Initialization
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _IO_Set
 10356  1CC2                     _IO_Set:	
 10357                           
 10358                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _IO_Set: [wreg+status,2]
 10362  1CC2  3077               	movlw	119
 10363  1CC3  0021               	movlb	1	; select bank1
 10364  1CC4  008C               	movwf	12	;volatile
 10365                           
 10366                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10367  1CC5  3007               	movlw	7
 10368  1CC6  008D               	movwf	13	;volatile
 10369                           
 10370                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10371  1CC7  300C               	movlw	12
 10372  1CC8  008E               	movwf	14	;volatile
 10373                           
 10374                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10375  1CC9  0022               	movlb	2	; select bank2
 10376  1CCA  018C               	clrf	12	;volatile
 10377                           
 10378                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10379  1CCB  3002               	movlw	2
 10380  1CCC  008D               	movwf	13	;volatile
 10381                           
 10382                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10383  1CCD  018E               	clrf	14	;volatile
 10384                           
 10385                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10386  1CCE  3022               	movlw	34
 10387  1CCF  0023               	movlb	3	; select bank3
 10388  1CD0  008C               	movwf	12	;volatile
 10389                           
 10390                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10391  1CD1  018D               	clrf	13	;volatile
 10392                           
 10393                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10394  1CD2  018E               	clrf	14	;volatile
 10395                           
 10396                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10397  1CD3  3077               	movlw	119
 10398  1CD4  0020               	movlb	0	; select bank0
 10399  1CD5  008C               	movwf	12	;volatile
 10400                           
 10401                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10402  1CD6  3007               	movlw	7
 10403  1CD7  008D               	movwf	13	;volatile
 10404                           
 10405                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10406  1CD8  300C               	movlw	12
 10407  1CD9  008E               	movwf	14	;volatile
 10408                           
 10409                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10410  1CDA  0024               	movlb	4	; select bank4
 10411  1CDB  018D               	clrf	13	;volatile
 10412  1CDC  0008               	return
 10413  1CDD                     __end_of_IO_Set:	
 10414                           
 10415                           	psect	text60
 10416  19C4                     __ptext60:	
 10417 ;; *************** function _IOC_Set *****************
 10418 ;; Defined at:
 10419 ;;		line 379 in file "../src/MCU_B1.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, status,2
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;Total ram usage:        0 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    5
 10440 ;; This function calls:
 10441 ;;		Nothing
 10442 ;; This function is called by:
 10443 ;;		_Mcu_Initialization
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _IOC_Set
 10449  19C4                     _IOC_Set:	
 10450                           
 10451                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10452                           
 10453                           ;incstack = 0
 10454                           ; Regs used in _IOC_Set: [wreg+status,2]
 10455  19C4  3004               	movlw	4
 10456  19C5  0027               	movlb	7	; select bank7
 10457  19C6  0094               	movwf	20	;volatile
 10458                           
 10459                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10460  19C7  3004               	movlw	4
 10461  19C8  0095               	movwf	21	;volatile
 10462                           
 10463                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10464  19C9  0196               	clrf	22	;volatile
 10465                           
 10466                           ;MCU_B1.c: 386: IOCIE = 1;
 10467  19CA  158B               	bsf	11,3	;volatile
 10468                           
 10469                           ;MCU_B1.c: 387: IOCIF = 0;
 10470  19CB  100B               	bcf	11,0	;volatile
 10471                           
 10472                           ;MCU_B1.c: 388: PEIE = 1;
 10473  19CC  170B               	bsf	11,6	;volatile
 10474                           
 10475                           ;MCU_B1.c: 389: GIE = 1;
 10476  19CD  178B               	bsf	11,7	;volatile
 10477  19CE  0008               	return
 10478  19CF                     __end_of_IOC_Set:	
 10479                           
 10480                           	psect	text61
 10481  193D                     __ptext61:	
 10482 ;; *************** function _Fosc_Set *****************
 10483 ;; Defined at:
 10484 ;;		line 56 in file "../src/MCU_B1.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;		None
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;		None
 10489 ;; Return value:  Size  Location     Type
 10490 ;;		None               void
 10491 ;; Registers used:
 10492 ;;		wreg
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:        0 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    5
 10505 ;; This function calls:
 10506 ;;		Nothing
 10507 ;; This function is called by:
 10508 ;;		_Mcu_Initialization
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           
 10513                           ;psect for function _Fosc_Set
 10514  193D                     _Fosc_Set:	
 10515                           
 10516                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in _Fosc_Set: [wreg]
 10520  193D  3078               	movlw	120
 10521  193E  0021               	movlb	1	; select bank1
 10522  193F  0099               	movwf	25	;volatile
 10523  1940  0008               	return
 10524  1941                     __end_of_Fosc_Set:	
 10525                           
 10526                           	psect	text62
 10527  1968                     __ptext62:	
 10528 ;; *************** function _ADC_Set *****************
 10529 ;; Defined at:
 10530 ;;		line 425 in file "../src/MCU_B1.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;		None               void
 10537 ;; Registers used:
 10538 ;;		wreg
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    5
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_Mcu_Initialization
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _ADC_Set
 10560  1968                     _ADC_Set:	
 10561                           
 10562                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _ADC_Set: [wreg]
 10566  1968  30F3               	movlw	243
 10567  1969  0021               	movlb	1	; select bank1
 10568  196A  009E               	movwf	30	;volatile
 10569                           
 10570                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10571  196B  30C1               	movlw	193
 10572  196C  0022               	movlb	2	; select bank2
 10573  196D  0097               	movwf	23	;volatile
 10574  196E  0008               	return
 10575  196F                     __end_of_ADC_Set:	
 10576                           
 10577                           	psect	text63
 10578  0052                     __ptext63:	
 10579 ;; *************** function _Load_Main *****************
 10580 ;; Defined at:
 10581 ;;		line 39 in file "../src/OverLoad_B1.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;		None
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  i               2   17[BANK0 ] int 
 10586 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10587 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10588 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10589 ;;  error           1   11[BANK0 ] unsigned char 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;		None               void
 10592 ;; Registers used:
 10593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:       10 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    6
 10606 ;; This function calls:
 10607 ;;		___lwdiv
 10608 ;;		___wmul
 10609 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10610 ;;		_getDimmer_LoadGO
 10611 ;;		_getDimmer_Load_Status
 10612 ;;		_getMain_All_Error_Status
 10613 ;;		_getMain_All_LightsStatus
 10614 ;;		_getMain_Lights_Count
 10615 ;;		_setLoad_AH_AL_Restore
 10616 ;; This function is called by:
 10617 ;;		_main
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           
 10622                           ;psect for function _Load_Main
 10623  0052                     _Load_Main:	
 10624                           
 10625                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10629  0052  3000               	movlw	0
 10630  0053  3190  205A  3180   	fcall	_getMain_All_Error_Status
 10631  0056  0020               	movlb	0	; select bank0
 10632  0057  00A9               	movwf	??_Load_Main
 10633  0058  0829               	movf	??_Load_Main,w
 10634  0059  00AB               	movwf	Load_Main@error
 10635                           
 10636                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10637  005A  01AF               	clrf	Load_Main@Load_RunStatus
 10638  005B  01AE               	clrf	Load_Main@ErrorCountValue
 10639  005C  01B0               	clrf	Load_Main@LightsCount
 10640                           
 10641                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10642  005D  0022               	movlb	2	; select bank2
 10643  005E  1C40               	btfss	_Load^(0+256),0
 10644  005F  29FE               	goto	l1827
 10645                           
 10646                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10647  0060  319B  2320  3180   	fcall	_getMain_All_LightsStatus
 10648  0063  3800               	iorlw	0
 10649  0064  1D03               	skipz
 10650  0065  2868               	goto	l9825
 10651                           
 10652                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10653  0066  0022               	movlb	2	; select bank2
 10654  0067  2889               	goto	l9843
 10655  0068                     l9825:	
 10656                           ;OverLoad_B1.c: 46: } else {
 10657                           
 10658                           
 10659                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10660  0068  0020               	movlb	0	; select bank0
 10661  0069  08AB               	movf	Load_Main@error,f
 10662  006A  1D03               	skipz
 10663  006B  2886               	goto	l1830
 10664  006C  319E  264C  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10665  006F  3800               	iorlw	0
 10666  0070  1D03               	skipz
 10667  0071  2886               	goto	l1830
 10668                           
 10669                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10670  0072  0022               	movlb	2	; select bank2
 10671  0073  14C0               	bsf	_Load^(0+256),1
 10672                           
 10673                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10674  0074  3199  2187  3180   	fcall	_getDimmer_LoadGO
 10675  0077  3A01               	xorlw	1
 10676  0078  1D03               	skipz
 10677  0079  2881               	goto	l1831
 10678                           
 10679                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10680  007A  0022               	movlb	2	; select bank2
 10681  007B  1DC0               	btfss	_Load^(0+256),3
 10682  007C  1BC0               	btfsc	_Load^(0+256),7
 10683  007D  288A               	goto	l1829
 10684                           
 10685                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10686  007E  15C0               	bsf	_Load^(0+256),3
 10687                           
 10688                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10689  007F  01E5               	clrf	(_Load^(0+256)+37)
 10690                           
 10691                           ;OverLoad_B1.c: 56: }
 10692                           ;OverLoad_B1.c: 57: } else {
 10693  0080  288A               	goto	l1829
 10694  0081                     l1831:	
 10695                           
 10696                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10697  0081  0022               	movlb	2	; select bank2
 10698  0082  1FC0               	btfss	_Load^(0+256),7
 10699  0083  288A               	goto	l1829
 10700                           
 10701                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10702  0084  13C0               	bcf	_Load^(0+256),7
 10703                           
 10704                           ;OverLoad_B1.c: 60: }
 10705                           ;OverLoad_B1.c: 61: }
 10706                           ;OverLoad_B1.c: 62: } else {
 10707  0085  288A               	goto	l1829
 10708  0086                     l1830:	
 10709                           
 10710                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10711  0086  0022               	movlb	2	; select bank2
 10712  0087  1CC0               	btfss	_Load^(0+256),1
 10713  0088  288A               	goto	l1829
 10714  0089                     l9843:	
 10715                           
 10716                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10717  0089  10C0               	bcf	_Load^(0+256),1
 10718  008A                     l1829:	
 10719                           
 10720                           ;OverLoad_B1.c: 65: }
 10721                           ;OverLoad_B1.c: 66: }
 10722                           ;OverLoad_B1.c: 88: }
 10723                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10724  008A  1CC0               	btfss	_Load^(0+256),1
 10725  008B  29DA               	goto	l1837
 10726                           
 10727                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10728  008C  1540               	bsf	_Load^(0+256),2
 10729                           
 10730                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10731  008D  1E40               	btfss	_Load^(0+256),4
 10732  008E  29D8               	goto	l1838
 10733                           
 10734                           ;OverLoad_B1.c: 95: Load.Time++;
 10735  008F  3001               	movlw	1
 10736  0090  07C1               	addwf	(_Load^(0+256)+1),f
 10737  0091  3000               	movlw	0
 10738  0092  3DC2               	addwfc	((_Load+1)^(0+256)+1),f
 10739                           
 10740                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10741  0093  3000               	movlw	0
 10742  0094  0242               	subwf	((_Load+1)^(0+256)+1),w
 10743  0095  3002               	movlw	2
 10744  0096  1903               	skipnz
 10745  0097  0241               	subwf	(_Load^(0+256)+1),w
 10746  0098  1C03               	skipc
 10747  0099  0008               	return
 10748                           
 10749                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10750  009A  01C1               	clrf	(_Load^(0+256)+1)
 10751  009B  01C2               	clrf	((_Load+1)^(0+256)+1)
 10752                           
 10753                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10754  009C  1240               	bcf	_Load^(0+256),4
 10755                           
 10756                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10757  009D  3001               	movlw	1
 10758  009E  0020               	movlb	0	; select bank0
 10759  009F  00B1               	movwf	Load_Main@i
 10760  00A0  3000               	movlw	0
 10761  00A1  00B2               	movwf	Load_Main@i+1
 10762  00A2  0832               	movf	Load_Main@i+1,w
 10763  00A3  3A80               	xorlw	128
 10764  00A4  00A9               	movwf	??_Load_Main
 10765  00A5  3080               	movlw	128
 10766  00A6  0229               	subwf	??_Load_Main,w
 10767  00A7  1D03               	skipz
 10768  00A8  28AB               	goto	u11465
 10769  00A9  3004               	movlw	4
 10770  00AA  0231               	subwf	Load_Main@i,w
 10771  00AB                     u11465:	
 10772  00AB  1803               	btfsc	3,0
 10773  00AC  28DF               	goto	l9865
 10774  00AD                     l9859:	
 10775                           
 10776                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10777  00AD  0020               	movlb	0	; select bank0
 10778  00AE  3531               	lslf	Load_Main@i,w
 10779  00AF  3E4B               	addlw	(_Load+11)& (0+255)
 10780  00B0  0086               	movwf	6
 10781  00B1  3001               	movlw	1	; select bank2/3
 10782  00B2  0087               	movwf	7
 10783  00B3  3F40               	moviw [0]fsr1
 10784  00B4  00A9               	movwf	??_Load_Main
 10785  00B5  3F41               	moviw [1]fsr1
 10786  00B6  00AA               	movwf	??_Load_Main+1
 10787  00B7  0829               	movf	??_Load_Main,w
 10788  00B8  0022               	movlb	2	; select bank2
 10789  00B9  07C5               	addwf	(_Load^(0+256)+5),f
 10790  00BA  0020               	movlb	0	; select bank0
 10791  00BB  082A               	movf	??_Load_Main+1,w
 10792  00BC  0022               	movlb	2	; select bank2
 10793  00BD  3DC6               	addwfc	((_Load+1)^(0+256)+5),f
 10794                           
 10795                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10796  00BE  0020               	movlb	0	; select bank0
 10797  00BF  3531               	lslf	Load_Main@i,w
 10798  00C0  3E55               	addlw	(_Load+21)& (0+255)
 10799  00C1  0086               	movwf	6
 10800  00C2  3001               	movlw	1	; select bank2/3
 10801  00C3  0087               	movwf	7
 10802  00C4  3F40               	moviw [0]fsr1
 10803  00C5  00A9               	movwf	??_Load_Main
 10804  00C6  3F41               	moviw [1]fsr1
 10805  00C7  00AA               	movwf	??_Load_Main+1
 10806  00C8  0829               	movf	??_Load_Main,w
 10807  00C9  0022               	movlb	2	; select bank2
 10808  00CA  07C7               	addwf	(_Load^(0+256)+7),f
 10809  00CB  0020               	movlb	0	; select bank0
 10810  00CC  082A               	movf	??_Load_Main+1,w
 10811  00CD  0022               	movlb	2	; select bank2
 10812  00CE  3DC8               	addwfc	((_Load+1)^(0+256)+7),f
 10813  00CF  3001               	movlw	1
 10814  00D0  0020               	movlb	0	; select bank0
 10815  00D1  07B1               	addwf	Load_Main@i,f
 10816  00D2  3000               	movlw	0
 10817  00D3  3DB2               	addwfc	Load_Main@i+1,f
 10818  00D4  0832               	movf	Load_Main@i+1,w
 10819  00D5  3A80               	xorlw	128
 10820  00D6  00A9               	movwf	??_Load_Main
 10821  00D7  3080               	movlw	128
 10822  00D8  0229               	subwf	??_Load_Main,w
 10823  00D9  1D03               	skipz
 10824  00DA  28DD               	goto	u11475
 10825  00DB  3004               	movlw	4
 10826  00DC  0231               	subwf	Load_Main@i,w
 10827  00DD                     u11475:	
 10828  00DD  1C03               	skipc
 10829  00DE  28AD               	goto	l9859
 10830  00DF                     l9865:	
 10831                           
 10832                           ;OverLoad_B1.c: 103: }
 10833                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10834  00DF  3003               	movlw	3
 10835  00E0  0020               	movlb	0	; select bank0
 10836  00E1  00A1               	movwf	___lwdiv@divisor
 10837  00E2  3000               	movlw	0
 10838  00E3  00A2               	movwf	___lwdiv@divisor+1
 10839  00E4  0022               	movlb	2	; select bank2
 10840  00E5  0846               	movf	((_Load+1)^(0+256)+5),w
 10841  00E6  0020               	movlb	0	; select bank0
 10842  00E7  01A4               	clrf	___lwdiv@dividend+1
 10843  00E8  07A4               	addwf	___lwdiv@dividend+1,f
 10844  00E9  0022               	movlb	2	; select bank2
 10845  00EA  0845               	movf	(_Load^(0+256)+5),w
 10846  00EB  0020               	movlb	0	; select bank0
 10847  00EC  01A3               	clrf	___lwdiv@dividend
 10848  00ED  07A3               	addwf	___lwdiv@dividend,f
 10849  00EE  3190  20F7  3180   	fcall	___lwdiv
 10850  00F1  0020               	movlb	0	; select bank0
 10851  00F2  0822               	movf	?___lwdiv+1,w
 10852  00F3  0022               	movlb	2	; select bank2
 10853  00F4  01C6               	clrf	((_Load+1)^(0+256)+5)
 10854  00F5  07C6               	addwf	((_Load+1)^(0+256)+5),f
 10855  00F6  0020               	movlb	0	; select bank0
 10856  00F7  0821               	movf	?___lwdiv,w
 10857  00F8  0022               	movlb	2	; select bank2
 10858  00F9  01C5               	clrf	(_Load^(0+256)+5)
 10859  00FA  07C5               	addwf	(_Load^(0+256)+5),f
 10860                           
 10861                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10862  00FB  3003               	movlw	3
 10863  00FC  0020               	movlb	0	; select bank0
 10864  00FD  00A1               	movwf	___lwdiv@divisor
 10865  00FE  3000               	movlw	0
 10866  00FF  00A2               	movwf	___lwdiv@divisor+1
 10867  0100  0022               	movlb	2	; select bank2
 10868  0101  0848               	movf	((_Load+1)^(0+256)+7),w
 10869  0102  0020               	movlb	0	; select bank0
 10870  0103  01A4               	clrf	___lwdiv@dividend+1
 10871  0104  07A4               	addwf	___lwdiv@dividend+1,f
 10872  0105  0022               	movlb	2	; select bank2
 10873  0106  0847               	movf	(_Load^(0+256)+7),w
 10874  0107  0020               	movlb	0	; select bank0
 10875  0108  01A3               	clrf	___lwdiv@dividend
 10876  0109  07A3               	addwf	___lwdiv@dividend,f
 10877  010A  3190  20F7  3180   	fcall	___lwdiv
 10878  010D  0020               	movlb	0	; select bank0
 10879  010E  0822               	movf	?___lwdiv+1,w
 10880  010F  0022               	movlb	2	; select bank2
 10881  0110  01C8               	clrf	((_Load+1)^(0+256)+7)
 10882  0111  07C8               	addwf	((_Load+1)^(0+256)+7),f
 10883  0112  0020               	movlb	0	; select bank0
 10884  0113  0821               	movf	?___lwdiv,w
 10885  0114  0022               	movlb	2	; select bank2
 10886  0115  01C7               	clrf	(_Load^(0+256)+7)
 10887  0116  07C7               	addwf	(_Load^(0+256)+7),f
 10888                           
 10889                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10890  0117  319C  24F8  3180   	fcall	_setLoad_AH_AL_Restore
 10891                           
 10892                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10893  011A  0022               	movlb	2	; select bank2
 10894  011B  0848               	movf	((_Load+1)^(0+256)+7),w
 10895  011C  0246               	subwf	((_Load+1)^(0+256)+5),w
 10896  011D  1D03               	skipz
 10897  011E  2921               	goto	u11485
 10898  011F  0847               	movf	(_Load^(0+256)+7),w
 10899  0120  0245               	subwf	(_Load^(0+256)+5),w
 10900  0121                     u11485:	
 10901  0121  1C03               	skipc
 10902  0122  0008               	return
 10903                           
 10904                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10905  0123  3005               	movlw	5
 10906  0124  3E40               	addlw	_Load& (0+255)
 10907  0125  0086               	movwf	6
 10908  0126  3001               	movlw	1	; select bank2/3
 10909  0127  0087               	movwf	7
 10910  0128  0947               	comf	(_Load^(0+256)+7),w
 10911  0129  0020               	movlb	0	; select bank0
 10912  012A  00A9               	movwf	??_Load_Main
 10913  012B  0022               	movlb	2	; select bank2
 10914  012C  0948               	comf	((_Load+1)^(0+256)+7),w
 10915  012D  0020               	movlb	0	; select bank0
 10916  012E  00AA               	movwf	??_Load_Main+1
 10917  012F  0AA9               	incf	??_Load_Main,f
 10918  0130  1903               	skipnz
 10919  0131  0AAA               	incf	??_Load_Main+1,f
 10920  0132  3F40               	moviw [0]fsr1
 10921  0133  0729               	addwf	??_Load_Main,w
 10922  0134  0022               	movlb	2	; select bank2
 10923  0135  00DF               	movwf	(_Load^(0+256)+31)
 10924  0136  3F41               	moviw [1]fsr1
 10925  0137  0020               	movlb	0	; select bank0
 10926  0138  3D2A               	addwfc	??_Load_Main+1,w
 10927  0139  0022               	movlb	2	; select bank2
 10928  013A  00E0               	movwf	(_Load^(0+256)+32)
 10929                           
 10930                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10931  013B  01C5               	clrf	(_Load^(0+256)+5)
 10932  013C  01C6               	clrf	((_Load+1)^(0+256)+5)
 10933                           
 10934                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10935  013D  01C7               	clrf	(_Load^(0+256)+7)
 10936  013E  01C8               	clrf	((_Load+1)^(0+256)+7)
 10937                           
 10938                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10939  013F  1DC0               	btfss	_Load^(0+256),3
 10940  0140  299A               	goto	l9905
 10941                           
 10942                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10943  0141  3002               	movlw	2
 10944  0142  0265               	subwf	(_Load^(0+256)+37),w
 10945  0143  1803               	skipnc
 10946  0144  299A               	goto	l9905
 10947                           
 10948                           ;OverLoad_B1.c: 115: Load.Count++;
 10949  0145  3001               	movlw	1
 10950  0146  0020               	movlb	0	; select bank0
 10951  0147  00A9               	movwf	??_Load_Main
 10952  0148  0829               	movf	??_Load_Main,w
 10953  0149  0022               	movlb	2	; select bank2
 10954  014A  07E5               	addwf	(_Load^(0+256)+37),f
 10955                           
 10956                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10957  014B  3199  218F  3180   	fcall	_getDimmer_Load_Status
 10958  014E  0020               	movlb	0	; select bank0
 10959  014F  00A9               	movwf	??_Load_Main
 10960  0150  0829               	movf	??_Load_Main,w
 10961  0151  00AF               	movwf	Load_Main@Load_RunStatus
 10962                           
 10963                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10964  0152  319A  22D7  3180   	fcall	_getMain_Lights_Count
 10965  0155  0020               	movlb	0	; select bank0
 10966  0156  00A9               	movwf	??_Load_Main
 10967  0157  0829               	movf	??_Load_Main,w
 10968  0158  00B0               	movwf	Load_Main@LightsCount
 10969                           
 10970                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10971  0159  0022               	movlb	2	; select bank2
 10972  015A  0865               	movf	(_Load^(0+256)+37),w
 10973  015B  3A01               	xorlw	1
 10974  015C  1D03               	skipz
 10975  015D  2962               	goto	l9891
 10976                           
 10977                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*50);
 10978  015E  30E8               	movlw	232
 10979  015F  00E3               	movwf	(_Load^(0+256)+35)
 10980  0160  3003               	movlw	3
 10981  0161  296F               	goto	L7
 10982  0162                     l9891:	
 10983                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10984                           
 10985  0162  0865               	movf	(_Load^(0+256)+37),w
 10986  0163  3A02               	xorlw	2
 10987  0164  1D03               	skipz
 10988  0165  299A               	goto	l9905
 10989                           
 10990                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10991  0166  0020               	movlb	0	; select bank0
 10992  0167  0830               	movf	Load_Main@LightsCount,w
 10993  0168  3A01               	xorlw	1
 10994  0169  1D03               	skipz
 10995  016A  2971               	goto	l9897
 10996                           
 10997                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*50);
 10998  016B  3037               	movlw	55
 10999  016C  0022               	movlb	2	; select bank2
 11000  016D  00E3               	movwf	(_Load^(0+256)+35)
 11001  016E  3000               	movlw	0
 11002  016F                     L7:	
 11003  016F  00E4               	movwf	(_Load^(0+256)+36)
 11004                           
 11005                           ;OverLoad_B1.c: 130: } else {
 11006  0170  299A               	goto	l9905
 11007  0171                     l9897:	
 11008                           
 11009                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 11010  0171  0020               	movlb	0	; select bank0
 11011  0172  08AF               	movf	Load_Main@Load_RunStatus,f
 11012  0173  1D03               	skipz
 11013  0174  298E               	goto	l9901
 11014                           
 11015                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*50) * LightsCount;
 11016  0175  0830               	movf	Load_Main@LightsCount,w
 11017  0176  00A9               	movwf	??_Load_Main
 11018  0177  01AA               	clrf	??_Load_Main+1
 11019  0178  0829               	movf	??_Load_Main,w
 11020  0179  00A1               	movwf	___wmul@multiplier
 11021  017A  082A               	movf	??_Load_Main+1,w
 11022  017B  00A2               	movwf	___wmul@multiplier+1
 11023  017C  3037               	movlw	55
 11024  017D  00A3               	movwf	___wmul@multiplicand
 11025  017E  3000               	movlw	0
 11026  017F  00A4               	movwf	___wmul@multiplicand+1
 11027  0180  319D  254E  3180   	fcall	___wmul
 11028  0183  0020               	movlb	0	; select bank0
 11029  0184  0822               	movf	?___wmul+1,w
 11030  0185  0022               	movlb	2	; select bank2
 11031  0186  01E4               	clrf	((_Load+1)^(0+256)+35)
 11032  0187  07E4               	addwf	((_Load+1)^(0+256)+35),f
 11033  0188  0020               	movlb	0	; select bank0
 11034  0189  0821               	movf	?___wmul,w
 11035  018A  0022               	movlb	2	; select bank2
 11036  018B  01E3               	clrf	(_Load^(0+256)+35)
 11037  018C  07E3               	addwf	(_Load^(0+256)+35),f
 11038                           
 11039                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 11040  018D  299A               	goto	l9905
 11041  018E                     l9901:	
 11042  018E  0020               	movlb	0	; select bank0
 11043  018F  082F               	movf	Load_Main@Load_RunStatus,w
 11044  0190  3A01               	xorlw	1
 11045  0191  1D03               	skipz
 11046  0192  299A               	goto	l9905
 11047                           
 11048                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 11049  0193  0022               	movlb	2	; select bank2
 11050  0194  0849               	movf	(_Load^(0+256)+9),w
 11051  0195  3E37               	addlw	55
 11052  0196  00E3               	movwf	(_Load^(0+256)+35)
 11053  0197  3000               	movlw	0
 11054  0198  3D4A               	addwfc	((_Load+1)^(0+256)+9),w
 11055  0199  00E4               	movwf	((_Load+1)^(0+256)+35)
 11056  019A                     l9905:	
 11057                           
 11058                           ;OverLoad_B1.c: 135: }
 11059                           ;OverLoad_B1.c: 136: }
 11060                           ;OverLoad_B1.c: 137: }
 11061                           ;OverLoad_B1.c: 138: }
 11062                           ;OverLoad_B1.c: 139: }
 11063                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 11064  019A  0022               	movlb	2	; select bank2
 11065  019B  0864               	movf	((_Load+1)^(0+256)+35),w
 11066  019C  0260               	subwf	((_Load+1)^(0+256)+31),w
 11067  019D  1D03               	skipz
 11068  019E  29A1               	goto	u11565
 11069  019F  0863               	movf	(_Load^(0+256)+35),w
 11070  01A0  025F               	subwf	(_Load^(0+256)+31),w
 11071  01A1                     u11565:	
 11072  01A1  1C03               	skipc
 11073  01A2  29C0               	goto	l9921
 11074                           
 11075                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11076  01A3  0020               	movlb	0	; select bank0
 11077  01A4  0830               	movf	Load_Main@LightsCount,w
 11078  01A5  3A01               	xorlw	1
 11079  01A6  1903               	skipnz
 11080  01A7  29AA               	goto	l9911
 11081  01A8  3003               	movlw	3
 11082  01A9  29AB               	goto	L8
 11083  01AA                     l9911:	
 11084  01AA  3002               	movlw	2
 11085  01AB                     L8:	
 11086  01AB  00AC               	movwf	_Load_Main$4111
 11087  01AC  3000               	movlw	0
 11088  01AD  00AD               	movwf	_Load_Main$4111+1
 11089  01AE  082C               	movf	_Load_Main$4111,w
 11090  01AF  00A9               	movwf	??_Load_Main
 11091  01B0  0829               	movf	??_Load_Main,w
 11092  01B1  00AE               	movwf	Load_Main@ErrorCountValue
 11093                           
 11094                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11095  01B2  3001               	movlw	1
 11096  01B3  00A9               	movwf	??_Load_Main
 11097  01B4  0829               	movf	??_Load_Main,w
 11098  01B5  0022               	movlb	2	; select bank2
 11099  01B6  07E6               	addwf	(_Load^(0+256)+38),f
 11100                           
 11101                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11102  01B7  0866               	movf	(_Load^(0+256)+38),w
 11103  01B8  0020               	movlb	0	; select bank0
 11104  01B9  022E               	subwf	Load_Main@ErrorCountValue,w
 11105  01BA  1803               	skipnc
 11106  01BB  0008               	return
 11107                           
 11108                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11109  01BC  0022               	movlb	2	; select bank2
 11110  01BD  01E6               	clrf	(_Load^(0+256)+38)
 11111                           
 11112                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11113  01BE  16C0               	bsf	_Load^(0+256),5
 11114                           
 11115                           ;OverLoad_B1.c: 168: }
 11116                           ;OverLoad_B1.c: 169: } else {
 11117  01BF  0008               	return
 11118  01C0                     l9921:	
 11119                           
 11120                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11121  01C0  01E6               	clrf	(_Load^(0+256)+38)
 11122                           
 11123                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11124  01C1  1DC0               	btfss	_Load^(0+256),3
 11125  01C2  0008               	return
 11126                           
 11127                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11128  01C3  3001               	movlw	1
 11129  01C4  0020               	movlb	0	; select bank0
 11130  01C5  00A9               	movwf	??_Load_Main
 11131  01C6  0829               	movf	??_Load_Main,w
 11132  01C7  0022               	movlb	2	; select bank2
 11133  01C8  07E7               	addwf	(_Load^(0+256)+39),f
 11134                           
 11135                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11136  01C9  3003               	movlw	3
 11137  01CA  0267               	subwf	(_Load^(0+256)+39),w
 11138  01CB  1C03               	skipc
 11139  01CC  0008               	return
 11140                           
 11141                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11142  01CD  01E7               	clrf	(_Load^(0+256)+39)
 11143                           
 11144                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11145  01CE  17C0               	bsf	_Load^(0+256),7
 11146                           
 11147                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11148  01CF  11C0               	bcf	_Load^(0+256),3
 11149                           
 11150                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11151  01D0  01E5               	clrf	(_Load^(0+256)+37)
 11152                           
 11153                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11154  01D1  0860               	movf	((_Load+1)^(0+256)+31),w
 11155  01D2  01CA               	clrf	((_Load+1)^(0+256)+9)
 11156  01D3  07CA               	addwf	((_Load+1)^(0+256)+9),f
 11157  01D4  085F               	movf	(_Load^(0+256)+31),w
 11158  01D5  01C9               	clrf	(_Load^(0+256)+9)
 11159  01D6  07C9               	addwf	(_Load^(0+256)+9),f
 11160                           
 11161                           ;OverLoad_B1.c: 182: }
 11162                           ;OverLoad_B1.c: 183: }
 11163                           ;OverLoad_B1.c: 206: }
 11164                           ;OverLoad_B1.c: 207: }
 11165                           ;OverLoad_B1.c: 208: }
 11166                           ;OverLoad_B1.c: 209: } else {
 11167  01D7  0008               	return
 11168  01D8                     l1838:	
 11169                           
 11170                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11171  01D8  1640               	bsf	_Load^(0+256),4
 11172                           
 11173                           ;OverLoad_B1.c: 211: }
 11174                           ;OverLoad_B1.c: 212: } else {
 11175  01D9  0008               	return
 11176  01DA                     l1837:	
 11177                           
 11178                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11179  01DA  1D40               	btfss	_Load^(0+256),2
 11180  01DB  29ED               	goto	l9957
 11181                           
 11182                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11183  01DC  1140               	bcf	_Load^(0+256),2
 11184                           
 11185                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11186  01DD  1240               	bcf	_Load^(0+256),4
 11187                           
 11188                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11189  01DE  01C1               	clrf	(_Load^(0+256)+1)
 11190  01DF  01C2               	clrf	((_Load+1)^(0+256)+1)
 11191                           
 11192                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11193  01E0  319C  24F8  3180   	fcall	_setLoad_AH_AL_Restore
 11194                           
 11195                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11196  01E3  0022               	movlb	2	; select bank2
 11197  01E4  01E6               	clrf	(_Load^(0+256)+38)
 11198                           
 11199                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11200  01E5  01E7               	clrf	(_Load^(0+256)+39)
 11201                           
 11202                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11203  01E6  01C5               	clrf	(_Load^(0+256)+5)
 11204  01E7  01C6               	clrf	((_Load+1)^(0+256)+5)
 11205                           
 11206                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11207  01E8  01C7               	clrf	(_Load^(0+256)+7)
 11208  01E9  01C8               	clrf	((_Load+1)^(0+256)+7)
 11209                           
 11210                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11211  01EA  11C0               	bcf	_Load^(0+256),3
 11212                           
 11213                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11214  01EB  01E5               	clrf	(_Load^(0+256)+37)
 11215                           
 11216                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11217  01EC  13C0               	bcf	_Load^(0+256),7
 11218  01ED                     l9957:	
 11219                           
 11220                           ;OverLoad_B1.c: 255: }
 11221                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11222  01ED  1EC0               	btfss	_Load^(0+256),5
 11223  01EE  0008               	return
 11224                           
 11225                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11226  01EF  3001               	movlw	1
 11227  01F0  07C3               	addwf	(_Load^(0+256)+3),f
 11228  01F1  3000               	movlw	0
 11229  01F2  3DC4               	addwfc	((_Load+1)^(0+256)+3),f
 11230                           
 11231                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11232  01F3  3001               	movlw	1
 11233  01F4  0244               	subwf	((_Load+1)^(0+256)+3),w
 11234  01F5  30F4               	movlw	244
 11235  01F6  1903               	skipnz
 11236  01F7  0243               	subwf	(_Load^(0+256)+3),w
 11237  01F8  1C03               	skipc
 11238  01F9  0008               	return
 11239                           
 11240                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11241  01FA  01C3               	clrf	(_Load^(0+256)+3)
 11242  01FB  01C4               	clrf	((_Load+1)^(0+256)+3)
 11243                           
 11244                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11245  01FC  12C0               	bcf	_Load^(0+256),5
 11246                           
 11247                           ;OverLoad_B1.c: 261: }
 11248                           ;OverLoad_B1.c: 262: }
 11249                           ;OverLoad_B1.c: 263: }
 11250                           ;OverLoad_B1.c: 264: } else {
 11251  01FD  0008               	return
 11252  01FE                     l1827:	
 11253                           
 11254                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11255  01FE  1C20               	btfss	_myMain^(0+256),0
 11256  01FF  0008               	return
 11257                           
 11258                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11259  0200  1440               	bsf	_Load^(0+256),0
 11260  0201  0008               	return
 11261  0202                     __end_of_Load_Main:	
 11262                           
 11263                           	psect	text64
 11264  1AD7                     __ptext64:	
 11265 ;; *************** function _getMain_Lights_Count *****************
 11266 ;; Defined at:
 11267 ;;		line 459 in file "../src/Main_B1.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;		None
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  status2         1    3[BANK0 ] unsigned char 
 11272 ;;  status1         1    2[BANK0 ] unsigned char 
 11273 ;;  count           1    1[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      unsigned char 
 11276 ;; Registers used:
 11277 ;;		wreg, status,2, status,0
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        3 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    5
 11290 ;; This function calls:
 11291 ;;		Nothing
 11292 ;; This function is called by:
 11293 ;;		_Load_Main
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           
 11298                           ;psect for function _getMain_Lights_Count
 11299  1AD7                     _getMain_Lights_Count:	
 11300                           
 11301                           ;Main_B1.c: 460: char count = 0;
 11302                           
 11303                           ;incstack = 0
 11304                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11305  1AD7  0020               	movlb	0	; select bank0
 11306  1AD8  01A1               	clrf	getMain_Lights_Count@count
 11307                           
 11308                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11309  1AD9  3000               	movlw	0
 11310  1ADA  0021               	movlb	1	; select bank1
 11311  1ADB  19AE               	btfsc	_DimmerIntr1^(0+128),3
 11312  1ADC  3001               	movlw	1
 11313  1ADD  0020               	movlb	0	; select bank0
 11314  1ADE  00A2               	movwf	getMain_Lights_Count@status1
 11315                           
 11316                           ;Main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11317  1ADF  3000               	movlw	0
 11318  1AE0  0021               	movlb	1	; select bank1
 11319  1AE1  19BA               	btfsc	_DimmerIntr2^(0+128),3
 11320  1AE2  3001               	movlw	1
 11321  1AE3  0020               	movlb	0	; select bank0
 11322  1AE4  00A3               	movwf	getMain_Lights_Count@status2
 11323                           
 11324                           ;Main_B1.c: 490: return count = (status1 + status2);
 11325  1AE5  0822               	movf	getMain_Lights_Count@status1,w
 11326  1AE6  0723               	addwf	getMain_Lights_Count@status2,w
 11327  1AE7  00A1               	movwf	getMain_Lights_Count@count
 11328  1AE8  0008               	return
 11329  1AE9                     __end_of_getMain_Lights_Count:	
 11330                           
 11331                           	psect	text65
 11332  198F                     __ptext65:	
 11333 ;; *************** function _getDimmer_Load_Status *****************
 11334 ;; Defined at:
 11335 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;		None
 11338 ;; Auto vars:     Size  Location     Type
 11339 ;;  status          1    1[BANK0 ] unsigned char 
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  1    wreg      unsigned char 
 11342 ;; Registers used:
 11343 ;;		wreg, status,2
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;Total ram usage:        1 bytes
 11354 ;; Hardware stack levels used:    1
 11355 ;; Hardware stack levels required when called:    5
 11356 ;; This function calls:
 11357 ;;		Nothing
 11358 ;; This function is called by:
 11359 ;;		_Load_Main
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           
 11364                           ;psect for function _getDimmer_Load_Status
 11365  198F                     _getDimmer_Load_Status:	
 11366                           
 11367                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11368                           
 11369                           ;incstack = 0
 11370                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11371  198F  3000               	movlw	0
 11372  1990  0022               	movlb	2	; select bank2
 11373  1991  1939               	btfsc	_Dimmer^(0+256),2
 11374  1992  3001               	movlw	1
 11375  1993  0020               	movlb	0	; select bank0
 11376  1994  00A1               	movwf	getDimmer_Load_Status@status
 11377                           
 11378                           ;Dimmer_B1.c: 1086: return status;
 11379  1995  0821               	movf	getDimmer_Load_Status@status,w
 11380  1996  0008               	return
 11381  1997                     __end_of_getDimmer_Load_Status:	
 11382                           
 11383                           	psect	text66
 11384  1987                     __ptext66:	
 11385 ;; *************** function _getDimmer_LoadGO *****************
 11386 ;; Defined at:
 11387 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11388 ;; Parameters:    Size  Location     Type
 11389 ;;		None
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11392 ;; Return value:  Size  Location     Type
 11393 ;;                  1    wreg      unsigned char 
 11394 ;; Registers used:
 11395 ;;		wreg, status,2
 11396 ;; Tracked objects:
 11397 ;;		On entry : 0/0
 11398 ;;		On exit  : 0/0
 11399 ;;		Unchanged: 0/0
 11400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;Total ram usage:        1 bytes
 11406 ;; Hardware stack levels used:    1
 11407 ;; Hardware stack levels required when called:    5
 11408 ;; This function calls:
 11409 ;;		Nothing
 11410 ;; This function is called by:
 11411 ;;		_Load_Main
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           
 11416                           ;psect for function _getDimmer_LoadGO
 11417  1987                     _getDimmer_LoadGO:	
 11418                           
 11419                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11420                           
 11421                           ;incstack = 0
 11422                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11423  1987  3000               	movlw	0
 11424  1988  0022               	movlb	2	; select bank2
 11425  1989  18B9               	btfsc	_Dimmer^(0+256),1
 11426  198A  3001               	movlw	1
 11427  198B  0020               	movlb	0	; select bank0
 11428  198C  00A1               	movwf	getDimmer_LoadGO@loadgo
 11429                           
 11430                           ;Dimmer_B1.c: 1080: return loadgo;
 11431  198D  0821               	movf	getDimmer_LoadGO@loadgo,w
 11432  198E  0008               	return
 11433  198F                     __end_of_getDimmer_LoadGO:	
 11434                           
 11435                           	psect	text67
 11436  1E4C                     __ptext67:	
 11437 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11438 ;; Defined at:
 11439 ;;		line 242 in file "../src/Dimmer_B1.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  status          1    4[BANK0 ] unsigned char 
 11444 ;; Return value:  Size  Location     Type
 11445 ;;                  1    wreg      unsigned char 
 11446 ;; Registers used:
 11447 ;;		wreg, status,2, status,0
 11448 ;; Tracked objects:
 11449 ;;		On entry : 0/0
 11450 ;;		On exit  : 0/0
 11451 ;;		Unchanged: 0/0
 11452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;Total ram usage:        4 bytes
 11458 ;; Hardware stack levels used:    1
 11459 ;; Hardware stack levels required when called:    5
 11460 ;; This function calls:
 11461 ;;		Nothing
 11462 ;; This function is called by:
 11463 ;;		_Load_Main
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           
 11468                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11469  1E4C                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11470                           
 11471                           ;Dimmer_B1.c: 243: char status = 0;
 11472                           
 11473                           ;incstack = 0
 11474                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11475  1E4C  0020               	movlb	0	; select bank0
 11476  1E4D  01A4               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11477                           
 11478                           ;Dimmer_B1.c: 250: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11479  1E4E  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2268
 11480  1E4F  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2268,f
 11481  1E50  0021               	movlb	1	; select bank1
 11482  1E51  1E2E               	btfss	_DimmerIntr1^(0+128),4
 11483  1E52  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 11484  1E53  2E56               	goto	l7745
 11485  1E54  0020               	movlb	0	; select bank0
 11486  1E55  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2268
 11487  1E56                     l7745:	
 11488  1E56  0020               	movlb	0	; select bank0
 11489  1E57  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2268,w
 11490  1E58  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11491  1E59  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11492  1E5A  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11493                           
 11494                           ;Dimmer_B1.c: 258: if (status == 0) {
 11495  1E5B  08A4               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11496  1E5C  1D03               	skipz
 11497  1E5D  2E6B               	goto	l7757
 11498                           
 11499                           ;Dimmer_B1.c: 264: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11500  1E5E  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2269
 11501  1E5F  0AA3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2269,f
 11502  1E60  0021               	movlb	1	; select bank1
 11503  1E61  1F2E               	btfss	_DimmerIntr1^(0+128),6
 11504  1E62  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 11505  1E63  2E66               	goto	l7755
 11506  1E64  0020               	movlb	0	; select bank0
 11507  1E65  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2269
 11508  1E66                     l7755:	
 11509  1E66  0020               	movlb	0	; select bank0
 11510  1E67  0823               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2269,w
 11511  1E68  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11512  1E69  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11513  1E6A  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11514  1E6B                     l7757:	
 11515                           
 11516                           ;Dimmer_B1.c: 270: }
 11517                           ;Dimmer_B1.c: 272: return status;
 11518  1E6B  0824               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11519  1E6C  0008               	return
 11520  1E6D                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11521                           
 11522                           	psect	text68
 11523  1D4E                     __ptext68:	
 11524 ;; *************** function ___wmul *****************
 11525 ;; Defined at:
 11526 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11529 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;  product         2    5[BANK0 ] unsigned int 
 11532 ;; Return value:  Size  Location     Type
 11533 ;;                  2    1[BANK0 ] unsigned int 
 11534 ;; Registers used:
 11535 ;;		wreg, status,2, status,0
 11536 ;; Tracked objects:
 11537 ;;		On entry : 0/0
 11538 ;;		On exit  : 0/0
 11539 ;;		Unchanged: 0/0
 11540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;Total ram usage:        6 bytes
 11546 ;; Hardware stack levels used:    1
 11547 ;; Hardware stack levels required when called:    5
 11548 ;; This function calls:
 11549 ;;		Nothing
 11550 ;; This function is called by:
 11551 ;;		_Load_Main
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           
 11556                           ;psect for function ___wmul
 11557  1D4E                     ___wmul:	
 11558                           
 11559                           ;incstack = 0
 11560                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11561  1D4E  0020               	movlb	0	; select bank0
 11562  1D4F  01A5               	clrf	___wmul@product
 11563  1D50  01A6               	clrf	___wmul@product+1
 11564  1D51                     l8377:	
 11565  1D51  1C21               	btfss	___wmul@multiplier,0
 11566  1D52  2D57               	goto	l2996
 11567  1D53  0823               	movf	___wmul@multiplicand,w
 11568  1D54  07A5               	addwf	___wmul@product,f
 11569  1D55  0824               	movf	___wmul@multiplicand+1,w
 11570  1D56  3DA6               	addwfc	___wmul@product+1,f
 11571  1D57                     l2996:	
 11572  1D57  3001               	movlw	1
 11573  1D58                     u8825:	
 11574  1D58  35A3               	lslf	___wmul@multiplicand,f
 11575  1D59  0DA4               	rlf	___wmul@multiplicand+1,f
 11576  1D5A  0B89               	decfsz	9,f
 11577  1D5B  2D58               	goto	u8825
 11578  1D5C  3001               	movlw	1
 11579  1D5D                     u8835:	
 11580  1D5D  36A2               	lsrf	___wmul@multiplier+1,f
 11581  1D5E  0CA1               	rrf	___wmul@multiplier,f
 11582  1D5F  0B89               	decfsz	9,f
 11583  1D60  2D5D               	goto	u8835
 11584  1D61  0822               	movf	___wmul@multiplier+1,w
 11585  1D62  0421               	iorwf	___wmul@multiplier,w
 11586  1D63  1D03               	skipz
 11587  1D64  2D51               	goto	l8377
 11588  1D65  0826               	movf	___wmul@product+1,w
 11589  1D66  01A2               	clrf	?___wmul+1
 11590  1D67  07A2               	addwf	?___wmul+1,f
 11591  1D68  0825               	movf	___wmul@product,w
 11592  1D69  01A1               	clrf	?___wmul
 11593  1D6A  07A1               	addwf	?___wmul,f
 11594  1D6B  0008               	return
 11595  1D6C                     __end_of___wmul:	
 11596                           
 11597                           	psect	text69
 11598  10F7                     __ptext69:	
 11599 ;; *************** function ___lwdiv *****************
 11600 ;; Defined at:
 11601 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;  divisor         2    1[BANK0 ] unsigned int 
 11604 ;;  dividend        2    3[BANK0 ] unsigned int 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  quotient        2    6[BANK0 ] unsigned int 
 11607 ;;  counter         1    8[BANK0 ] unsigned char 
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  2    1[BANK0 ] unsigned int 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;Total ram usage:        8 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    5
 11624 ;; This function calls:
 11625 ;;		Nothing
 11626 ;; This function is called by:
 11627 ;;		_Load_Main
 11628 ;;		_setRF_Main
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           
 11633                           ;psect for function ___lwdiv
 11634  10F7                     ___lwdiv:	
 11635                           
 11636                           ;incstack = 0
 11637                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11638  10F7  0020               	movlb	0	; select bank0
 11639  10F8  01A6               	clrf	___lwdiv@quotient
 11640  10F9  01A7               	clrf	___lwdiv@quotient+1
 11641  10FA  0822               	movf	___lwdiv@divisor+1,w
 11642  10FB  0421               	iorwf	___lwdiv@divisor,w
 11643  10FC  1903               	skipnz
 11644  10FD  2927               	goto	l7705
 11645  10FE  01A8               	clrf	___lwdiv@counter
 11646  10FF  0AA8               	incf	___lwdiv@counter,f
 11647  1100                     l7693:	
 11648  1100  1BA2               	btfsc	___lwdiv@divisor+1,7
 11649  1101  290C               	goto	l7695
 11650  1102  3001               	movlw	1
 11651  1103                     u7495:	
 11652  1103  35A1               	lslf	___lwdiv@divisor,f
 11653  1104  0DA2               	rlf	___lwdiv@divisor+1,f
 11654  1105  0B89               	decfsz	9,f
 11655  1106  2903               	goto	u7495
 11656  1107  3001               	movlw	1
 11657  1108  00A5               	movwf	??___lwdiv
 11658  1109  0825               	movf	??___lwdiv,w
 11659  110A  07A8               	addwf	___lwdiv@counter,f
 11660  110B  2900               	goto	l7693
 11661  110C                     l7695:	
 11662  110C  3001               	movlw	1
 11663  110D                     u7515:	
 11664  110D  35A6               	lslf	___lwdiv@quotient,f
 11665  110E  0DA7               	rlf	___lwdiv@quotient+1,f
 11666  110F  0B89               	decfsz	9,f
 11667  1110  290D               	goto	u7515
 11668  1111  0822               	movf	___lwdiv@divisor+1,w
 11669  1112  0224               	subwf	___lwdiv@dividend+1,w
 11670  1113  1D03               	skipz
 11671  1114  2917               	goto	u7525
 11672  1115  0821               	movf	___lwdiv@divisor,w
 11673  1116  0223               	subwf	___lwdiv@dividend,w
 11674  1117                     u7525:	
 11675  1117  1C03               	skipc
 11676  1118  291E               	goto	l7701
 11677  1119  0821               	movf	___lwdiv@divisor,w
 11678  111A  02A3               	subwf	___lwdiv@dividend,f
 11679  111B  0822               	movf	___lwdiv@divisor+1,w
 11680  111C  3BA4               	subwfb	___lwdiv@dividend+1,f
 11681  111D  1426               	bsf	___lwdiv@quotient,0
 11682  111E                     l7701:	
 11683  111E  3001               	movlw	1
 11684  111F                     u7535:	
 11685  111F  36A2               	lsrf	___lwdiv@divisor+1,f
 11686  1120  0CA1               	rrf	___lwdiv@divisor,f
 11687  1121  0B89               	decfsz	9,f
 11688  1122  291F               	goto	u7535
 11689  1123  3001               	movlw	1
 11690  1124  02A8               	subwf	___lwdiv@counter,f
 11691  1125  1D03               	btfss	3,2
 11692  1126  290C               	goto	l7695
 11693  1127                     l7705:	
 11694  1127  0827               	movf	___lwdiv@quotient+1,w
 11695  1128  01A2               	clrf	?___lwdiv+1
 11696  1129  07A2               	addwf	?___lwdiv+1,f
 11697  112A  0826               	movf	___lwdiv@quotient,w
 11698  112B  01A1               	clrf	?___lwdiv
 11699  112C  07A1               	addwf	?___lwdiv,f
 11700  112D  0008               	return
 11701  112E                     __end_of___lwdiv:	
 11702                           
 11703                           	psect	text70
 11704  192E                     __ptext70:	
 11705 ;; *************** function _Load_Initialization *****************
 11706 ;; Defined at:
 11707 ;;		line 9 in file "../src/OverLoad_B1.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;		None               void
 11714 ;; Registers used:
 11715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        0 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    6
 11728 ;; This function calls:
 11729 ;;		_setLoad_AH_AL_Restore
 11730 ;; This function is called by:
 11731 ;;		_main
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           
 11736                           ;psect for function _Load_Initialization
 11737  192E                     _Load_Initialization:	
 11738                           
 11739                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11740                           
 11741                           ;incstack = 0
 11742                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11743  192E  319C  24F8         	fcall	_setLoad_AH_AL_Restore
 11744  1930  0008               	return
 11745  1931                     __end_of_Load_Initialization:	
 11746                           
 11747                           	psect	text71
 11748  1CF8                     __ptext71:	
 11749 ;; *************** function _setLoad_AH_AL_Restore *****************
 11750 ;; Defined at:
 11751 ;;		line 292 in file "../src/OverLoad_B1.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;  i               1    2[BANK0 ] unsigned char 
 11756 ;; Return value:  Size  Location     Type
 11757 ;;		None               void
 11758 ;; Registers used:
 11759 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;Total ram usage:        2 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; Hardware stack levels required when called:    5
 11772 ;; This function calls:
 11773 ;;		Nothing
 11774 ;; This function is called by:
 11775 ;;		_Load_Initialization
 11776 ;;		_Load_Main
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           
 11781                           ;psect for function _setLoad_AH_AL_Restore
 11782  1CF8                     _setLoad_AH_AL_Restore:	
 11783                           
 11784                           ;OverLoad_B1.c: 293: char i;
 11785                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11789  1CF8  0020               	movlb	0	; select bank0
 11790  1CF9  01A2               	clrf	setLoad_AH_AL_Restore@i
 11791  1CFA                     L9:	
 11792  1CFA  3005               	movlw	5
 11793  1CFB  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11794  1CFC  1803               	btfsc	3,0
 11795  1CFD  0008               	return
 11796                           
 11797                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11798  1CFE  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11799  1CFF  3E4B               	addlw	(_Load+11)& (0+255)
 11800  1D00  0086               	movwf	6
 11801  1D01  3001               	movlw	1	; select bank2/3
 11802  1D02  0087               	movwf	7
 11803  1D03  3000               	movlw	0
 11804  1D04  3FC0               	movwi [0]fsr1
 11805  1D05  3FC1               	movwi [1]fsr1
 11806                           
 11807                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11808  1D06  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11809  1D07  3E55               	addlw	(_Load+21)& (0+255)
 11810  1D08  0086               	movwf	6
 11811  1D09  3001               	movlw	1	; select bank2/3
 11812  1D0A  0087               	movwf	7
 11813  1D0B  30FF               	movlw	255
 11814  1D0C  3FC0               	movwi [0]fsr1
 11815  1D0D  30FF               	movlw	255
 11816  1D0E  3FC1               	movwi [1]fsr1
 11817  1D0F  3001               	movlw	1
 11818  1D10  00A1               	movwf	??_setLoad_AH_AL_Restore
 11819  1D11  0821               	movf	??_setLoad_AH_AL_Restore,w
 11820  1D12  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11821  1D13  2CFA               	goto	L9
 11822  1D14                     __end_of_setLoad_AH_AL_Restore:	
 11823                           
 11824                           	psect	text72
 11825  1A2C                     __ptext72:	
 11826 ;; *************** function _LED_Main *****************
 11827 ;; Defined at:
 11828 ;;		line 47 in file "../src/LED_B1.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;		None
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;		None               void
 11835 ;; Registers used:
 11836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;Total ram usage:        0 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:    7
 11849 ;; This function calls:
 11850 ;;		_setLED_Main
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function _LED_Main
 11858  1A2C                     _LED_Main:	
 11859                           
 11860                           ;LED_B1.c: 58: setLED_Main(1);
 11861                           
 11862                           ;incstack = 0
 11863                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11864  1A2C  3001               	movlw	1
 11865  1A2D  3192  229C  319A   	fcall	_setLED_Main
 11866                           
 11867                           ;LED_B1.c: 61: setLED_Main(2);
 11868  1A30  3002               	movlw	2
 11869  1A31  3192  229C  319A   	fcall	_setLED_Main
 11870                           
 11871                           ;LED_B1.c: 67: setLED_Main(99);
 11872  1A34  3063               	movlw	99
 11873  1A35  3192  229C         	fcall	_setLED_Main
 11874  1A37  0008               	return
 11875  1A38                     __end_of_LED_Main:	
 11876                           
 11877                           	psect	text73
 11878  129C                     __ptext73:	
 11879 ;; *************** function _setLED_Main *****************
 11880 ;; Defined at:
 11881 ;;		line 229 in file "../src/LED_B1.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  led             1    wreg     unsigned char 
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;  led             1    5[BANK0 ] unsigned char 
 11886 ;; Return value:  Size  Location     Type
 11887 ;;		None               void
 11888 ;; Registers used:
 11889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;Total ram usage:        3 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    6
 11902 ;; This function calls:
 11903 ;;		_LedPointSelect
 11904 ;; This function is called by:
 11905 ;;		_LED_Main
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           
 11910                           ;psect for function _setLED_Main
 11911  129C                     _setLED_Main:	
 11912                           
 11913                           ;incstack = 0
 11914                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11915                           ;setLED_Main@led stored from wreg
 11916  129C  0020               	movlb	0	; select bank0
 11917  129D  00A5               	movwf	setLED_Main@led
 11918                           
 11919                           ;LED_B1.c: 230: LedPointSelect(led);
 11920  129E  0825               	movf	setLED_Main@led,w
 11921  129F  319D  25AA  3192   	fcall	_LedPointSelect
 11922                           
 11923                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11924  12A2  0021               	movlb	1	; select bank1
 11925  12A3  0850               	movf	_LED^(0+128),w
 11926  12A4  0086               	movwf	6
 11927  12A5  3001               	movlw	1	; select bank2/3
 11928  12A6  0087               	movwf	7
 11929  12A7  1C81               	btfss	1,1
 11930  12A8  0008               	return
 11931                           
 11932                           ;LED_B1.c: 232: LED->Time++;
 11933  12A9  0A50               	incf	_LED^(0+128),w
 11934  12AA  0086               	movwf	6
 11935  12AB  3001               	movlw	1	; select bank2/3
 11936  12AC  0087               	movwf	7
 11937  12AD  3001               	movlw	1
 11938  12AE  0781               	addwf	1,f
 11939  12AF  3141               	addfsr 1,1
 11940  12B0  1803               	skipnc
 11941  12B1  0A81               	incf	1,f
 11942                           
 11943                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11944  12B2  0A50               	incf	_LED^(0+128),w
 11945  12B3  0086               	movwf	6
 11946  12B4  3001               	movlw	1	; select bank2/3
 11947  12B5  0087               	movwf	7
 11948  12B6  3F40               	moviw [0]fsr1
 11949  12B7  0020               	movlb	0	; select bank0
 11950  12B8  00A3               	movwf	??_setLED_Main
 11951  12B9  3F41               	moviw [1]fsr1
 11952  12BA  00A4               	movwf	??_setLED_Main+1
 11953  12BB  3000               	movlw	0
 11954  12BC  0224               	subwf	??_setLED_Main+1,w
 11955  12BD  3019               	movlw	25
 11956  12BE  1903               	skipnz
 11957  12BF  0223               	subwf	??_setLED_Main,w
 11958  12C0  1C03               	skipc
 11959  12C1  0008               	return
 11960                           
 11961                           ;LED_B1.c: 234: LED->Time = 0;
 11962  12C2  0021               	movlb	1	; select bank1
 11963  12C3  0A50               	incf	_LED^(0+128),w
 11964  12C4  0086               	movwf	6
 11965  12C5  3001               	movlw	1	; select bank2/3
 11966  12C6  0087               	movwf	7
 11967  12C7  3000               	movlw	0
 11968  12C8  3FC0               	movwi [0]fsr1
 11969  12C9  3FC1               	movwi [1]fsr1
 11970                           
 11971                           ;LED_B1.c: 237: if (led == 1) {
 11972  12CA  0020               	movlb	0	; select bank0
 11973  12CB  0825               	movf	setLED_Main@led,w
 11974  12CC  3A01               	xorlw	1
 11975                           
 11976                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11977  12CD  3008               	movlw	8
 11978  12CE  1903               	btfsc	3,2
 11979  12CF  068C               	xorwf	12,f
 11980                           
 11981                           ;LED_B1.c: 239: }
 11982                           ;LED_B1.c: 242: if (led == 2) {
 11983  12D0  0825               	movf	setLED_Main@led,w
 11984  12D1  3A02               	xorlw	2
 11985  12D2  1D03               	skipz
 11986  12D3  2AD6               	goto	l1153
 11987                           
 11988                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11989  12D4  3080               	movlw	128
 11990  12D5  068E               	xorwf	14,f
 11991  12D6                     l1153:	
 11992                           
 11993                           ;LED_B1.c: 244: }
 11994                           ;LED_B1.c: 252: if (led == 99) {
 11995  12D6  0825               	movf	setLED_Main@led,w
 11996  12D7  3A63               	xorlw	99
 11997  12D8  1D03               	skipz
 11998  12D9  0008               	return
 11999                           
 12000                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12001  12DA  3020               	movlw	32
 12002  12DB  068D               	xorwf	13,f
 12003  12DC  0008               	return
 12004  12DD                     __end_of_setLED_Main:	
 12005                           
 12006                           	psect	text74
 12007  1A20                     __ptext74:	
 12008 ;; *************** function _LED_Initialization *****************
 12009 ;; Defined at:
 12010 ;;		line 31 in file "../src/LED_B1.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;		None
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;		None
 12015 ;; Return value:  Size  Location     Type
 12016 ;;		None               void
 12017 ;; Registers used:
 12018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;Total ram usage:        0 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    8
 12031 ;; This function calls:
 12032 ;;		_setLED_Initialization
 12033 ;; This function is called by:
 12034 ;;		_main
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           
 12039                           ;psect for function _LED_Initialization
 12040  1A20                     _LED_Initialization:	
 12041                           
 12042                           ;LED_B1.c: 33: setLED_Initialization(1);
 12043                           
 12044                           ;incstack = 0
 12045                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12046  1A20  3001               	movlw	1
 12047  1A21  319A  22C5  319A   	fcall	_setLED_Initialization
 12048                           
 12049                           ;LED_B1.c: 36: setLED_Initialization(2);
 12050  1A24  3002               	movlw	2
 12051  1A25  319A  22C5  319A   	fcall	_setLED_Initialization
 12052                           
 12053                           ;LED_B1.c: 42: setLED_Initialization(99);
 12054  1A28  3063               	movlw	99
 12055  1A29  319A  22C5         	fcall	_setLED_Initialization
 12056  1A2B  0008               	return
 12057  1A2C                     __end_of_LED_Initialization:	
 12058                           
 12059                           	psect	text75
 12060  1AC5                     __ptext75:	
 12061 ;; *************** function _setLED_Initialization *****************
 12062 ;; Defined at:
 12063 ;;		line 74 in file "../src/LED_B1.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  led             1    wreg     unsigned char 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;  led             1    5[BANK0 ] unsigned char 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;		None               void
 12070 ;; Registers used:
 12071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;Total ram usage:        1 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    7
 12084 ;; This function calls:
 12085 ;;		_LedPointSelect
 12086 ;;		_setLED
 12087 ;; This function is called by:
 12088 ;;		_LED_Initialization
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           
 12093                           ;psect for function _setLED_Initialization
 12094  1AC5                     _setLED_Initialization:	
 12095                           
 12096                           ;incstack = 0
 12097                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12098                           ;setLED_Initialization@led stored from wreg
 12099  1AC5  0020               	movlb	0	; select bank0
 12100  1AC6  00A5               	movwf	setLED_Initialization@led
 12101                           
 12102                           ;LED_B1.c: 75: LedPointSelect(led);
 12103  1AC7  0825               	movf	setLED_Initialization@led,w
 12104  1AC8  319D  25AA  319A   	fcall	_LedPointSelect
 12105                           
 12106                           ;LED_B1.c: 76: LED->Enable = 1;
 12107  1ACB  0021               	movlb	1	; select bank1
 12108  1ACC  0850               	movf	_LED^(0+128),w
 12109  1ACD  0086               	movwf	6
 12110  1ACE  3001               	movlw	1	; select bank2/3
 12111  1ACF  0087               	movwf	7
 12112  1AD0  1401               	bsf	1,0
 12113                           
 12114                           ;LED_B1.c: 77: setLED(led, 0);
 12115  1AD1  0020               	movlb	0	; select bank0
 12116  1AD2  01A3               	clrf	setLED@command
 12117  1AD3  0825               	movf	setLED_Initialization@led,w
 12118  1AD4  3194  2451         	fcall	_setLED
 12119  1AD6  0008               	return
 12120  1AD7                     __end_of_setLED_Initialization:	
 12121                           
 12122                           	psect	text76
 12123  10C1                     __ptext76:	
 12124 ;; *************** function _Flash_Memory_Main *****************
 12125 ;; Defined at:
 12126 ;;		line 971 in file "../src/MCU_B1.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;		None
 12129 ;; Auto vars:     Size  Location     Type
 12130 ;;		None
 12131 ;; Return value:  Size  Location     Type
 12132 ;;		None               void
 12133 ;; Registers used:
 12134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12135 ;; Tracked objects:
 12136 ;;		On entry : 0/0
 12137 ;;		On exit  : 0/0
 12138 ;;		Unchanged: 0/0
 12139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12143 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;Total ram usage:        1 bytes
 12145 ;; Hardware stack levels used:    1
 12146 ;; Hardware stack levels required when called:    8
 12147 ;; This function calls:
 12148 ;;		_Flash_Memory_Modify
 12149 ;;		_getMain_All_LightsStatus
 12150 ;; This function is called by:
 12151 ;;		_main
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           
 12156                           ;psect for function _Flash_Memory_Main
 12157  10C1                     _Flash_Memory_Main:	
 12158                           
 12159                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12163  10C1  0024               	movlb	4	; select bank4
 12164  10C2  1C44               	btfss	(_Memory^(0+512)+36),0
 12165  10C3  0008               	return
 12166                           
 12167                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 12168  10C4  319B  2320  3190   	fcall	_getMain_All_LightsStatus
 12169  10C7  3A00               	xorlw	0
 12170  10C8  3000               	movlw	0
 12171  10C9  1903               	skipnz
 12172  10CA  3001               	movlw	1
 12173  10CB  0020               	movlb	0	; select bank0
 12174  10CC  00A7               	movwf	??_Flash_Memory_Main
 12175  10CD  0DA7               	rlf	??_Flash_Memory_Main,f
 12176  10CE  0024               	movlb	4	; select bank4
 12177  10CF  0844               	movf	(_Memory^(0+512)+36),w
 12178  10D0  0020               	movlb	0	; select bank0
 12179  10D1  0627               	xorwf	??_Flash_Memory_Main,w
 12180  10D2  39FD               	andlw	-3
 12181  10D3  0627               	xorwf	??_Flash_Memory_Main,w
 12182  10D4  0024               	movlb	4	; select bank4
 12183  10D5  00C4               	movwf	(_Memory^(0+512)+36)
 12184                           
 12185                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 12186  10D6  1CC4               	btfss	(_Memory^(0+512)+36),1
 12187  10D7  28F1               	goto	l1425
 12188                           
 12189                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 12190  10D8  15C4               	bsf	(_Memory^(0+512)+36),3
 12191                           
 12192                           ;MCU_B1.c: 976: Memory.Time++;
 12193  10D9  3001               	movlw	1
 12194  10DA  07C2               	addwf	(_Memory^(0+512)+34),f
 12195  10DB  3000               	movlw	0
 12196  10DC  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12197                           
 12198                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 12199  10DD  3022               	movlw	34
 12200  10DE  3E20               	addlw	_Memory& (0+255)
 12201  10DF  0086               	movwf	6
 12202  10E0  3002               	movlw	2	; select bank4/5
 12203  10E1  0087               	movwf	7
 12204  10E2  3F40               	moviw [0]fsr1
 12205  10E3  3A0A               	xorlw	10
 12206  10E4  1D03               	skipz
 12207  10E5  28E8               	goto	u11275
 12208  10E6  3F41               	moviw [1]fsr1
 12209  10E7  3A00               	xorlw	0
 12210  10E8                     u11275:	
 12211  10E8  1D03               	skipz
 12212  10E9  0008               	return
 12213                           
 12214                           ;MCU_B1.c: 978: Memory.Time = 0;
 12215  10EA  01C2               	clrf	(_Memory^(0+512)+34)
 12216  10EB  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12217                           
 12218                           ;MCU_B1.c: 979: Memory.Modify = 0;
 12219  10EC  1044               	bcf	(_Memory^(0+512)+36),0
 12220                           
 12221                           ;MCU_B1.c: 980: Memory.GO = 0;
 12222  10ED  10C4               	bcf	(_Memory^(0+512)+36),1
 12223                           
 12224                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 12225  10EE  3193  23FF         	fcall	_Flash_Memory_Modify
 12226                           
 12227                           ;MCU_B1.c: 982: }
 12228                           ;MCU_B1.c: 983: } else {
 12229  10F0  0008               	return
 12230  10F1                     l1425:	
 12231                           
 12232                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 12233  10F1  1DC4               	btfss	(_Memory^(0+512)+36),3
 12234  10F2  0008               	return
 12235                           
 12236                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 12237  10F3  11C4               	bcf	(_Memory^(0+512)+36),3
 12238                           
 12239                           ;MCU_B1.c: 986: Memory.Time = 0;
 12240  10F4  01C2               	clrf	(_Memory^(0+512)+34)
 12241  10F5  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12242  10F6  0008               	return
 12243  10F7                     __end_of_Flash_Memory_Main:	
 12244                           
 12245                           	psect	text77
 12246  13FF                     __ptext77:	
 12247 ;; *************** function _Flash_Memory_Modify *****************
 12248 ;; Defined at:
 12249 ;;		line 1044 in file "../src/MCU_B1.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;		None
 12252 ;; Auto vars:     Size  Location     Type
 12253 ;;  i               1    6[BANK0 ] unsigned char 
 12254 ;; Return value:  Size  Location     Type
 12255 ;;		None               void
 12256 ;; Registers used:
 12257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12258 ;; Tracked objects:
 12259 ;;		On entry : 0/0
 12260 ;;		On exit  : 0/0
 12261 ;;		Unchanged: 0/0
 12262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;Total ram usage:        2 bytes
 12268 ;; Hardware stack levels used:    1
 12269 ;; Hardware stack levels required when called:    7
 12270 ;; This function calls:
 12271 ;;		_Flash_Memory_Erasing
 12272 ;;		_Flash_Memory_Read
 12273 ;;		_Flash_Memory_Write
 12274 ;;		_setMemory_Data
 12275 ;; This function is called by:
 12276 ;;		_Flash_Memory_Main
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           
 12281                           ;psect for function _Flash_Memory_Modify
 12282  13FF                     _Flash_Memory_Modify:	
 12283                           
 12284                           ;MCU_B1.c: 1045: char i = 0;
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12288  13FF  0020               	movlb	0	; select bank0
 12289  1400  01A6               	clrf	Flash_Memory_Modify@i
 12290                           
 12291                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12292  1401  01A6               	clrf	Flash_Memory_Modify@i
 12293  1402  3020               	movlw	32
 12294  1403  0226               	subwf	Flash_Memory_Modify@i,w
 12295  1404  1803               	btfsc	3,0
 12296  1405  2C1B               	goto	l8085
 12297  1406                     l8079:	
 12298                           
 12299                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12300  1406  0826               	movf	Flash_Memory_Modify@i,w
 12301  1407  319C  248E  3193   	fcall	_Flash_Memory_Read
 12302  140A  0020               	movlb	0	; select bank0
 12303  140B  00A5               	movwf	??_Flash_Memory_Modify
 12304  140C  0826               	movf	Flash_Memory_Modify@i,w
 12305  140D  3E20               	addlw	_Memory& (0+255)
 12306  140E  0086               	movwf	6
 12307  140F  3002               	movlw	2	; select bank4/5
 12308  1410  0087               	movwf	7
 12309  1411  0825               	movf	??_Flash_Memory_Modify,w
 12310  1412  0081               	movwf	1
 12311  1413  3001               	movlw	1
 12312  1414  00A5               	movwf	??_Flash_Memory_Modify
 12313  1415  0825               	movf	??_Flash_Memory_Modify,w
 12314  1416  07A6               	addwf	Flash_Memory_Modify@i,f
 12315  1417  3020               	movlw	32
 12316  1418  0226               	subwf	Flash_Memory_Modify@i,w
 12317  1419  1C03               	skipc
 12318  141A  2C06               	goto	l8079
 12319  141B                     l8085:	
 12320                           
 12321                           ;MCU_B1.c: 1048: }
 12322                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12323  141B  0021               	movlb	1	; select bank1
 12324  141C  086D               	movf	_product^(0+128),w
 12325  141D  0086               	movwf	6
 12326  141E  3002               	movlw	2	; select bank4/5
 12327  141F  0087               	movwf	7
 12328  1420  3002               	movlw	2	; select bank4/5
 12329  1421  3F4C               	moviw [12]fsr1
 12330  1422  0020               	movlb	0	; select bank0
 12331  1423  00A1               	movwf	setMemory_Data@data
 12332  1424  3000               	movlw	0
 12333  1425  319A  2208  3193   	fcall	_setMemory_Data
 12334                           
 12335                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12336  1428  0021               	movlb	1	; select bank1
 12337  1429  086D               	movf	_product^(0+128),w
 12338  142A  0086               	movwf	6
 12339  142B  3002               	movlw	2	; select bank4/5
 12340  142C  0087               	movwf	7
 12341  142D  3002               	movlw	2	; select bank4/5
 12342  142E  3F4D               	moviw [13]fsr1
 12343  142F  0020               	movlb	0	; select bank0
 12344  1430  00A1               	movwf	setMemory_Data@data
 12345  1431  3001               	movlw	1
 12346  1432  319A  2208  3193   	fcall	_setMemory_Data
 12347                           
 12348                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12349  1435  0021               	movlb	1	; select bank1
 12350  1436  086D               	movf	_product^(0+128),w
 12351  1437  0086               	movwf	6
 12352  1438  3002               	movlw	2	; select bank4/5
 12353  1439  0087               	movwf	7
 12354  143A  3002               	movlw	2	; select bank4/5
 12355  143B  3F4E               	moviw [14]fsr1
 12356  143C  0020               	movlb	0	; select bank0
 12357  143D  00A1               	movwf	setMemory_Data@data
 12358  143E  3002               	movlw	2
 12359  143F  319A  2208  3193   	fcall	_setMemory_Data
 12360                           
 12361                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12362  1442  0024               	movlb	4	; select bank4
 12363  1443  1D44               	btfss	(_Memory^(0+512)+36),2
 12364  1444  2C49               	goto	l1448
 12365                           
 12366                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12367  1445  1144               	bcf	(_Memory^(0+512)+36),2
 12368                           
 12369                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12370  1446  0022               	movlb	2	; select bank2
 12371  1447  11A0               	bcf	_myMain^(0+256),3
 12372                           
 12373                           ;MCU_B1.c: 1060: myMain.First = 0;
 12374  1448  12A0               	bcf	_myMain^(0+256),5
 12375  1449                     l1448:	
 12376                           
 12377                           ;MCU_B1.c: 1062: }
 12378                           ;MCU_B1.c: 1063: GIE = 0;
 12379  1449  138B               	bcf	11,7	;volatile
 12380                           
 12381                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12382  144A  319A  2214  3193   	fcall	_Flash_Memory_Erasing
 12383                           
 12384                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12385  144D  319F  27D1         	fcall	_Flash_Memory_Write
 12386                           
 12387                           ;MCU_B1.c: 1066: GIE = 1;
 12388  144F  178B               	bsf	11,7	;volatile
 12389  1450  0008               	return
 12390  1451                     __end_of_Flash_Memory_Modify:	
 12391                           
 12392                           	psect	text78
 12393  1A14                     __ptext78:	
 12394 ;; *************** function _Flash_Memory_Erasing *****************
 12395 ;; Defined at:
 12396 ;;		line 1033 in file "../src/MCU_B1.c"
 12397 ;; Parameters:    Size  Location     Type
 12398 ;;		None
 12399 ;; Auto vars:     Size  Location     Type
 12400 ;;		None
 12401 ;; Return value:  Size  Location     Type
 12402 ;;		None               void
 12403 ;; Registers used:
 12404 ;;		wreg, status,2, status,0, pclath, cstack
 12405 ;; Tracked objects:
 12406 ;;		On entry : 0/0
 12407 ;;		On exit  : 0/0
 12408 ;;		Unchanged: 0/0
 12409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;Total ram usage:        0 bytes
 12415 ;; Hardware stack levels used:    1
 12416 ;; Hardware stack levels required when called:    6
 12417 ;; This function calls:
 12418 ;;		_Flash_Memory_Unlock
 12419 ;; This function is called by:
 12420 ;;		_Flash_Memory_Modify
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           
 12425                           ;psect for function _Flash_Memory_Erasing
 12426  1A14                     _Flash_Memory_Erasing:	
 12427                           
 12428                           ;MCU_B1.c: 1034: CFGS = 0;
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12432  1A14  0023               	movlb	3	; select bank3
 12433  1A15  1315               	bcf	21,6	;volatile
 12434                           
 12435                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12436  1A16  3030               	movlw	48
 12437  1A17  0092               	movwf	18	;volatile
 12438                           
 12439                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12440  1A18  0191               	clrf	17	;volatile
 12441                           
 12442                           ;MCU_B1.c: 1037: FREE = 1;
 12443  1A19  1615               	bsf	21,4	;volatile
 12444                           
 12445                           ;MCU_B1.c: 1038: WREN = 1;
 12446  1A1A  1515               	bsf	21,2	;volatile
 12447                           
 12448                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12449  1A1B  3199  21B0         	fcall	_Flash_Memory_Unlock
 12450                           
 12451                           ;MCU_B1.c: 1040: WREN = 0;
 12452  1A1D  0023               	movlb	3	; select bank3
 12453  1A1E  1115               	bcf	21,2	;volatile
 12454  1A1F  0008               	return
 12455  1A20                     __end_of_Flash_Memory_Erasing:	
 12456                           
 12457                           	psect	text79
 12458  047E                     __ptext79:	
 12459 ;; *************** function _Flash_Memory_Initialization *****************
 12460 ;; Defined at:
 12461 ;;		line 930 in file "../src/MCU_B1.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;		None
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  i               1   68[BANK0 ] unsigned char 
 12466 ;; Return value:  Size  Location     Type
 12467 ;;		None               void
 12468 ;; Registers used:
 12469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;Total ram usage:        2 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    8
 12482 ;; This function calls:
 12483 ;;		_Flash_Memory_Read
 12484 ;;		_Flash_Memory_Write
 12485 ;;		_getDimmerLights_ValueToPercent
 12486 ;;		_setMemory_Data
 12487 ;; This function is called by:
 12488 ;;		_main
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           
 12493                           ;psect for function _Flash_Memory_Initialization
 12494  047E                     _Flash_Memory_Initialization:	
 12495                           
 12496                           ;MCU_B1.c: 931: char i = 0;
 12497                           
 12498                           ;incstack = 0
 12499                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12500  047E  0020               	movlb	0	; select bank0
 12501  047F  01E4               	clrf	Flash_Memory_Initialization@i
 12502                           
 12503                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12504  0480  301F               	movlw	31
 12505  0481  319C  248E  3184   	fcall	_Flash_Memory_Read
 12506  0484  3AAA               	xorlw	170
 12507  0485  1D03               	skipz
 12508  0486  2CFD               	goto	l8479
 12509                           
 12510                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12511  0487  3000               	movlw	0
 12512  0488  319C  248E  3184   	fcall	_Flash_Memory_Read
 12513  048B  0020               	movlb	0	; select bank0
 12514  048C  00E3               	movwf	??_Flash_Memory_Initialization
 12515  048D  0021               	movlb	1	; select bank1
 12516  048E  086D               	movf	_product^(0+128),w
 12517  048F  3E0C               	addlw	12
 12518  0490  0086               	movwf	6
 12519  0491  3002               	movlw	2	; select bank4/5
 12520  0492  0087               	movwf	7
 12521  0493  0020               	movlb	0	; select bank0
 12522  0494  0863               	movf	??_Flash_Memory_Initialization,w
 12523  0495  0081               	movwf	1
 12524                           
 12525                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12526  0496  3001               	movlw	1
 12527  0497  319C  248E  3184   	fcall	_Flash_Memory_Read
 12528  049A  0020               	movlb	0	; select bank0
 12529  049B  00E3               	movwf	??_Flash_Memory_Initialization
 12530  049C  0021               	movlb	1	; select bank1
 12531  049D  086D               	movf	_product^(0+128),w
 12532  049E  3E0D               	addlw	13
 12533  049F  0086               	movwf	6
 12534  04A0  3002               	movlw	2	; select bank4/5
 12535  04A1  0087               	movwf	7
 12536  04A2  0020               	movlb	0	; select bank0
 12537  04A3  0863               	movf	??_Flash_Memory_Initialization,w
 12538  04A4  0081               	movwf	1
 12539                           
 12540                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12541  04A5  3002               	movlw	2
 12542  04A6  319C  248E  3184   	fcall	_Flash_Memory_Read
 12543  04A9  0020               	movlb	0	; select bank0
 12544  04AA  00E3               	movwf	??_Flash_Memory_Initialization
 12545  04AB  0021               	movlb	1	; select bank1
 12546  04AC  086D               	movf	_product^(0+128),w
 12547  04AD  3E0E               	addlw	14
 12548  04AE  0086               	movwf	6
 12549  04AF  3002               	movlw	2	; select bank4/5
 12550  04B0  0087               	movwf	7
 12551  04B1  0020               	movlb	0	; select bank0
 12552  04B2  0863               	movf	??_Flash_Memory_Initialization,w
 12553  04B3  0081               	movwf	1
 12554                           
 12555                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(60*0.65)));
 12556  04B4  3027               	movlw	39
 12557  04B5  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12558  04B8  0020               	movlb	0	; select bank0
 12559  04B9  00E3               	movwf	??_Flash_Memory_Initialization
 12560  04BA  0863               	movf	??_Flash_Memory_Initialization,w
 12561  04BB  00E4               	movwf	Flash_Memory_Initialization@i
 12562                           
 12563                           ;MCU_B1.c: 942: product->Data[21] = i;
 12564  04BC  0864               	movf	Flash_Memory_Initialization@i,w
 12565  04BD  00E3               	movwf	??_Flash_Memory_Initialization
 12566  04BE  0021               	movlb	1	; select bank1
 12567  04BF  086D               	movf	_product^(0+128),w
 12568  04C0  3E15               	addlw	21
 12569  04C1  0086               	movwf	6
 12570  04C2  3002               	movlw	2	; select bank4/5
 12571  04C3  0087               	movwf	7
 12572  04C4  0020               	movlb	0	; select bank0
 12573  04C5  0863               	movf	??_Flash_Memory_Initialization,w
 12574  04C6  0081               	movwf	1
 12575                           
 12576                           ;MCU_B1.c: 943: product->Data[22] = i;
 12577  04C7  0864               	movf	Flash_Memory_Initialization@i,w
 12578  04C8  00E3               	movwf	??_Flash_Memory_Initialization
 12579  04C9  0021               	movlb	1	; select bank1
 12580  04CA  086D               	movf	_product^(0+128),w
 12581  04CB  3E16               	addlw	22
 12582  04CC  0086               	movwf	6
 12583  04CD  3002               	movlw	2	; select bank4/5
 12584  04CE  0087               	movwf	7
 12585  04CF  0020               	movlb	0	; select bank0
 12586  04D0  0863               	movf	??_Flash_Memory_Initialization,w
 12587  04D1  0081               	movwf	1
 12588                           
 12589                           ;MCU_B1.c: 944: product->Data[23] = i;
 12590  04D2  0864               	movf	Flash_Memory_Initialization@i,w
 12591  04D3  00E3               	movwf	??_Flash_Memory_Initialization
 12592  04D4  0021               	movlb	1	; select bank1
 12593  04D5  086D               	movf	_product^(0+128),w
 12594  04D6  3E17               	addlw	23
 12595  04D7  0086               	movwf	6
 12596  04D8  3002               	movlw	2	; select bank4/5
 12597  04D9  0087               	movwf	7
 12598  04DA  0020               	movlb	0	; select bank0
 12599  04DB  0863               	movf	??_Flash_Memory_Initialization,w
 12600  04DC  0081               	movwf	1
 12601                           
 12602                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12603  04DD  0021               	movlb	1	; select bank1
 12604  04DE  086D               	movf	_product^(0+128),w
 12605  04DF  3E0C               	addlw	12
 12606  04E0  0086               	movwf	6
 12607  04E1  3002               	movlw	2	; select bank4/5
 12608  04E2  0087               	movwf	7
 12609  04E3  0801               	movf	1,w
 12610  04E4  3AFF               	xorlw	255
 12611  04E5  1D03               	skipz
 12612  04E6  0008               	return
 12613  04E7  086D               	movf	_product^(0+128),w
 12614  04E8  3E0D               	addlw	13
 12615  04E9  0086               	movwf	6
 12616  04EA  3002               	movlw	2	; select bank4/5
 12617  04EB  0087               	movwf	7
 12618  04EC  0801               	movf	1,w
 12619  04ED  3AFF               	xorlw	255
 12620  04EE  1D03               	skipz
 12621  04EF  0008               	return
 12622  04F0  086D               	movf	_product^(0+128),w
 12623  04F1  3E0E               	addlw	14
 12624  04F2  0086               	movwf	6
 12625  04F3  3002               	movlw	2	; select bank4/5
 12626  04F4  0087               	movwf	7
 12627  04F5  0801               	movf	1,w
 12628  04F6  3AFF               	xorlw	255
 12629  04F7  1D03               	skipz
 12630  04F8  0008               	return
 12631                           
 12632                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12633  04F9  0022               	movlb	2	; select bank2
 12634  04FA  15A0               	bsf	_myMain^(0+256),3
 12635                           
 12636                           ;MCU_B1.c: 948: myMain.First = 1;
 12637  04FB  16A0               	bsf	_myMain^(0+256),5
 12638                           
 12639                           ;MCU_B1.c: 949: }
 12640                           ;MCU_B1.c: 950: } else {
 12641  04FC  0008               	return
 12642  04FD                     l8479:	
 12643                           
 12644                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(60*0.65)));
 12645  04FD  3027               	movlw	39
 12646  04FE  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12647  0501  0020               	movlb	0	; select bank0
 12648  0502  00E3               	movwf	??_Flash_Memory_Initialization
 12649  0503  0863               	movf	??_Flash_Memory_Initialization,w
 12650  0504  00E4               	movwf	Flash_Memory_Initialization@i
 12651                           
 12652                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12653  0505  30FF               	movlw	255
 12654  0506  00E3               	movwf	??_Flash_Memory_Initialization
 12655  0507  0863               	movf	??_Flash_Memory_Initialization,w
 12656  0508  00A1               	movwf	setMemory_Data@data
 12657  0509  3000               	movlw	0
 12658  050A  319A  2208  3184   	fcall	_setMemory_Data
 12659                           
 12660                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12661  050D  30FF               	movlw	255
 12662  050E  0020               	movlb	0	; select bank0
 12663  050F  00E3               	movwf	??_Flash_Memory_Initialization
 12664  0510  0863               	movf	??_Flash_Memory_Initialization,w
 12665  0511  00A1               	movwf	setMemory_Data@data
 12666  0512  3001               	movlw	1
 12667  0513  319A  2208  3184   	fcall	_setMemory_Data
 12668                           
 12669                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12670  0516  30FF               	movlw	255
 12671  0517  0020               	movlb	0	; select bank0
 12672  0518  00E3               	movwf	??_Flash_Memory_Initialization
 12673  0519  0863               	movf	??_Flash_Memory_Initialization,w
 12674  051A  00A1               	movwf	setMemory_Data@data
 12675  051B  3002               	movlw	2
 12676  051C  319A  2208  3184   	fcall	_setMemory_Data
 12677                           
 12678                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12679  051F  30FF               	movlw	255
 12680  0520  0020               	movlb	0	; select bank0
 12681  0521  00E3               	movwf	??_Flash_Memory_Initialization
 12682  0522  0863               	movf	??_Flash_Memory_Initialization,w
 12683  0523  00A1               	movwf	setMemory_Data@data
 12684  0524  3003               	movlw	3
 12685  0525  319A  2208  3184   	fcall	_setMemory_Data
 12686                           
 12687                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12688  0528  30FF               	movlw	255
 12689  0529  0020               	movlb	0	; select bank0
 12690  052A  00E3               	movwf	??_Flash_Memory_Initialization
 12691  052B  0863               	movf	??_Flash_Memory_Initialization,w
 12692  052C  00A1               	movwf	setMemory_Data@data
 12693  052D  3004               	movlw	4
 12694  052E  319A  2208  3184   	fcall	_setMemory_Data
 12695                           
 12696                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12697  0531  30FF               	movlw	255
 12698  0532  0020               	movlb	0	; select bank0
 12699  0533  00E3               	movwf	??_Flash_Memory_Initialization
 12700  0534  0863               	movf	??_Flash_Memory_Initialization,w
 12701  0535  00A1               	movwf	setMemory_Data@data
 12702  0536  3005               	movlw	5
 12703  0537  319A  2208  3184   	fcall	_setMemory_Data
 12704                           
 12705                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12706  053A  30AA               	movlw	170
 12707  053B  0020               	movlb	0	; select bank0
 12708  053C  00E3               	movwf	??_Flash_Memory_Initialization
 12709  053D  0863               	movf	??_Flash_Memory_Initialization,w
 12710  053E  00A1               	movwf	setMemory_Data@data
 12711  053F  301F               	movlw	31
 12712  0540  319A  2208  3184   	fcall	_setMemory_Data
 12713                           
 12714                           ;MCU_B1.c: 959: product->Data[21] = i;
 12715  0543  0020               	movlb	0	; select bank0
 12716  0544  0864               	movf	Flash_Memory_Initialization@i,w
 12717  0545  00E3               	movwf	??_Flash_Memory_Initialization
 12718  0546  0021               	movlb	1	; select bank1
 12719  0547  086D               	movf	_product^(0+128),w
 12720  0548  3E15               	addlw	21
 12721  0549  0086               	movwf	6
 12722  054A  3002               	movlw	2	; select bank4/5
 12723  054B  0087               	movwf	7
 12724  054C  0020               	movlb	0	; select bank0
 12725  054D  0863               	movf	??_Flash_Memory_Initialization,w
 12726  054E  0081               	movwf	1
 12727                           
 12728                           ;MCU_B1.c: 960: product->Data[22] = i;
 12729  054F  0864               	movf	Flash_Memory_Initialization@i,w
 12730  0550  00E3               	movwf	??_Flash_Memory_Initialization
 12731  0551  0021               	movlb	1	; select bank1
 12732  0552  086D               	movf	_product^(0+128),w
 12733  0553  3E16               	addlw	22
 12734  0554  0086               	movwf	6
 12735  0555  3002               	movlw	2	; select bank4/5
 12736  0556  0087               	movwf	7
 12737  0557  0020               	movlb	0	; select bank0
 12738  0558  0863               	movf	??_Flash_Memory_Initialization,w
 12739  0559  0081               	movwf	1
 12740                           
 12741                           ;MCU_B1.c: 961: product->Data[23] = i;
 12742  055A  0864               	movf	Flash_Memory_Initialization@i,w
 12743  055B  00E3               	movwf	??_Flash_Memory_Initialization
 12744  055C  0021               	movlb	1	; select bank1
 12745  055D  086D               	movf	_product^(0+128),w
 12746  055E  3E17               	addlw	23
 12747  055F  0086               	movwf	6
 12748  0560  3002               	movlw	2	; select bank4/5
 12749  0561  0087               	movwf	7
 12750  0562  0020               	movlb	0	; select bank0
 12751  0563  0863               	movf	??_Flash_Memory_Initialization,w
 12752  0564  0081               	movwf	1
 12753                           
 12754                           ;MCU_B1.c: 962: GIE = 0;
 12755  0565  138B               	bcf	11,7	;volatile
 12756                           
 12757                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12758  0566  319F  27D1         	fcall	_Flash_Memory_Write
 12759                           
 12760                           ;MCU_B1.c: 964: GIE = 1;
 12761  0568  178B               	bsf	11,7	;volatile
 12762                           
 12763                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12764  0569  0022               	movlb	2	; select bank2
 12765  056A  15A0               	bsf	_myMain^(0+256),3
 12766                           
 12767                           ;MCU_B1.c: 966: myMain.First = 1;
 12768  056B  16A0               	bsf	_myMain^(0+256),5
 12769  056C  0008               	return
 12770  056D                     __end_of_Flash_Memory_Initialization:	
 12771                           
 12772                           	psect	text80
 12773  1A08                     __ptext80:	
 12774 ;; *************** function _setMemory_Data *****************
 12775 ;; Defined at:
 12776 ;;		line 1081 in file "../src/MCU_B1.c"
 12777 ;; Parameters:    Size  Location     Type
 12778 ;;  address         1    wreg     unsigned char 
 12779 ;;  data            1    1[BANK0 ] unsigned char 
 12780 ;; Auto vars:     Size  Location     Type
 12781 ;;  address         1    3[BANK0 ] unsigned char 
 12782 ;; Return value:  Size  Location     Type
 12783 ;;		None               void
 12784 ;; Registers used:
 12785 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12786 ;; Tracked objects:
 12787 ;;		On entry : 0/0
 12788 ;;		On exit  : 0/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12791 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;Total ram usage:        3 bytes
 12796 ;; Hardware stack levels used:    1
 12797 ;; Hardware stack levels required when called:    5
 12798 ;; This function calls:
 12799 ;;		Nothing
 12800 ;; This function is called by:
 12801 ;;		_Flash_Memory_Initialization
 12802 ;;		_Flash_Memory_Modify
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806                           
 12807                           ;psect for function _setMemory_Data
 12808  1A08                     _setMemory_Data:	
 12809                           
 12810                           ;incstack = 0
 12811                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12812                           ;setMemory_Data@address stored from wreg
 12813  1A08  0020               	movlb	0	; select bank0
 12814  1A09  00A3               	movwf	setMemory_Data@address
 12815                           
 12816                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12817  1A0A  0821               	movf	setMemory_Data@data,w
 12818  1A0B  00A2               	movwf	??_setMemory_Data
 12819  1A0C  0823               	movf	setMemory_Data@address,w
 12820  1A0D  3E20               	addlw	_Memory& (0+255)
 12821  1A0E  0086               	movwf	6
 12822  1A0F  3002               	movlw	2	; select bank4/5
 12823  1A10  0087               	movwf	7
 12824  1A11  0822               	movf	??_setMemory_Data,w
 12825  1A12  0081               	movwf	1
 12826  1A13  0008               	return
 12827  1A14                     __end_of_setMemory_Data:	
 12828                           
 12829                           	psect	text81
 12830  1FD1                     __ptext81:	
 12831 ;; *************** function _Flash_Memory_Write *****************
 12832 ;; Defined at:
 12833 ;;		line 1014 in file "../src/MCU_B1.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;  i               1    2[BANK0 ] unsigned char 
 12838 ;; Return value:  Size  Location     Type
 12839 ;;		None               void
 12840 ;; Registers used:
 12841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;Total ram usage:        2 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    6
 12854 ;; This function calls:
 12855 ;;		_Flash_Memory_Unlock
 12856 ;; This function is called by:
 12857 ;;		_Flash_Memory_Initialization
 12858 ;;		_Flash_Memory_Modify
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           
 12863                           ;psect for function _Flash_Memory_Write
 12864  1FD1                     _Flash_Memory_Write:	
 12865                           
 12866                           ;MCU_B1.c: 1015: char i = 0;
 12867                           
 12868                           ;incstack = 0
 12869                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12870  1FD1  0020               	movlb	0	; select bank0
 12871  1FD2  01A2               	clrf	Flash_Memory_Write@i
 12872                           
 12873                           ;MCU_B1.c: 1016: CFGS = 0;
 12874  1FD3  0023               	movlb	3	; select bank3
 12875  1FD4  1315               	bcf	21,6	;volatile
 12876                           
 12877                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12878  1FD5  3030               	movlw	48
 12879  1FD6  0092               	movwf	18	;volatile
 12880                           
 12881                           ;MCU_B1.c: 1018: PMDATH = 0;
 12882  1FD7  0194               	clrf	20	;volatile
 12883                           
 12884                           ;MCU_B1.c: 1019: FREE = 0;
 12885  1FD8  1215               	bcf	21,4	;volatile
 12886                           
 12887                           ;MCU_B1.c: 1020: LWLO = 1;
 12888  1FD9  1695               	bsf	21,5	;volatile
 12889                           
 12890                           ;MCU_B1.c: 1021: WREN = 1;
 12891  1FDA  1515               	bsf	21,2	;volatile
 12892                           
 12893                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12894  1FDB  0020               	movlb	0	; select bank0
 12895  1FDC  01A2               	clrf	Flash_Memory_Write@i
 12896  1FDD  3020               	movlw	32
 12897  1FDE  0222               	subwf	Flash_Memory_Write@i,w
 12898  1FDF  1803               	btfsc	3,0
 12899  1FE0  2FF9               	goto	l1439
 12900  1FE1                     l7549:	
 12901                           
 12902                           ;MCU_B1.c: 1023: PMADRL = i;
 12903  1FE1  0822               	movf	Flash_Memory_Write@i,w
 12904  1FE2  0023               	movlb	3	; select bank3
 12905  1FE3  0091               	movwf	17	;volatile
 12906                           
 12907                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12908  1FE4  0020               	movlb	0	; select bank0
 12909  1FE5  0822               	movf	Flash_Memory_Write@i,w
 12910  1FE6  3E20               	addlw	_Memory& (0+255)
 12911  1FE7  0086               	movwf	6
 12912  1FE8  3002               	movlw	2	; select bank4/5
 12913  1FE9  0087               	movwf	7
 12914  1FEA  0801               	movf	1,w
 12915  1FEB  0023               	movlb	3	; select bank3
 12916  1FEC  0093               	movwf	19	;volatile
 12917                           
 12918                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12919  1FED  3199  21B0  319F   	fcall	_Flash_Memory_Unlock
 12920  1FF0  3001               	movlw	1
 12921  1FF1  0020               	movlb	0	; select bank0
 12922  1FF2  00A1               	movwf	??_Flash_Memory_Write
 12923  1FF3  0821               	movf	??_Flash_Memory_Write,w
 12924  1FF4  07A2               	addwf	Flash_Memory_Write@i,f
 12925  1FF5  3020               	movlw	32
 12926  1FF6  0222               	subwf	Flash_Memory_Write@i,w
 12927  1FF7  1C03               	skipc
 12928  1FF8  2FE1               	goto	l7549
 12929  1FF9                     l1439:	
 12930                           
 12931                           ;MCU_B1.c: 1026: }
 12932                           ;MCU_B1.c: 1027: LWLO = 0;
 12933  1FF9  0023               	movlb	3	; select bank3
 12934  1FFA  1295               	bcf	21,5	;volatile
 12935                           
 12936                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12937  1FFB  3199  21B0         	fcall	_Flash_Memory_Unlock
 12938                           
 12939                           ;MCU_B1.c: 1029: WREN = 0;
 12940  1FFD  0023               	movlb	3	; select bank3
 12941  1FFE  1115               	bcf	21,2	;volatile
 12942  1FFF  0008               	return
 12943  2000                     __end_of_Flash_Memory_Write:	
 12944                           
 12945                           	psect	text82
 12946  19B0                     __ptext82:	
 12947 ;; *************** function _Flash_Memory_Unlock *****************
 12948 ;; Defined at:
 12949 ;;		line 993 in file "../src/MCU_B1.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;		None
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;		None               void
 12956 ;; Registers used:
 12957 ;;		wreg
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;Total ram usage:        0 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    5
 12970 ;; This function calls:
 12971 ;;		Nothing
 12972 ;; This function is called by:
 12973 ;;		_Flash_Memory_Write
 12974 ;;		_Flash_Memory_Erasing
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978                           
 12979                           ;psect for function _Flash_Memory_Unlock
 12980  19B0                     _Flash_Memory_Unlock:	
 12981                           
 12982                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12983                           
 12984                           ;incstack = 0
 12985                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12986  19B0  3055               	movlw	85
 12987  19B1  0023               	movlb	3	; select bank3
 12988  19B2  0096               	movwf	22	;volatile
 12989                           
 12990                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12991  19B3  30AA               	movlw	170
 12992  19B4  0096               	movwf	22	;volatile
 12993                           
 12994                           ;MCU_B1.c: 996: WR = 1;
 12995  19B5  1495               	bsf	21,1	;volatile
 12996                           
 12997                           ;MCU_B1.c: 997: __nop();
 12998  19B6  0000               	nop
 12999                           
 13000                           ;MCU_B1.c: 998: __nop();
 13001  19B7  0000               	nop
 13002  19B8  0008               	return
 13003  19B9                     __end_of_Flash_Memory_Unlock:	
 13004                           
 13005                           	psect	text83
 13006  1C8E                     __ptext83:	
 13007 ;; *************** function _Flash_Memory_Read *****************
 13008 ;; Defined at:
 13009 ;;		line 1002 in file "../src/MCU_B1.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  address         1    wreg     unsigned char 
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;  address         1    3[BANK0 ] unsigned char 
 13014 ;;  ret             1    4[BANK0 ] unsigned char 
 13015 ;;  i               1    2[BANK0 ] unsigned char 
 13016 ;; Return value:  Size  Location     Type
 13017 ;;                  1    wreg      unsigned char 
 13018 ;; Registers used:
 13019 ;;		wreg, status,2
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;Total ram usage:        4 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    5
 13032 ;; This function calls:
 13033 ;;		Nothing
 13034 ;; This function is called by:
 13035 ;;		_Flash_Memory_Initialization
 13036 ;;		_Flash_Memory_Modify
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function _Flash_Memory_Read
 13042  1C8E                     _Flash_Memory_Read:	
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13046                           ;Flash_Memory_Read@address stored from wreg
 13047  1C8E  0020               	movlb	0	; select bank0
 13048  1C8F  00A3               	movwf	Flash_Memory_Read@address
 13049                           
 13050                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 13051  1C90  01A2               	clrf	Flash_Memory_Read@i
 13052  1C91  01A4               	clrf	Flash_Memory_Read@ret
 13053                           
 13054                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 13055  1C92  3030               	movlw	48
 13056  1C93  0023               	movlb	3	; select bank3
 13057  1C94  0092               	movwf	18	;volatile
 13058                           
 13059                           ;MCU_B1.c: 1005: PMADRL = address;
 13060  1C95  0020               	movlb	0	; select bank0
 13061  1C96  0823               	movf	Flash_Memory_Read@address,w
 13062  1C97  0023               	movlb	3	; select bank3
 13063  1C98  0091               	movwf	17	;volatile
 13064                           
 13065                           ;MCU_B1.c: 1006: CFGS = 0;
 13066  1C99  1315               	bcf	21,6	;volatile
 13067                           
 13068                           ;MCU_B1.c: 1007: RD = 1;
 13069  1C9A  1415               	bsf	21,0	;volatile
 13070                           
 13071                           ;MCU_B1.c: 1008: i = PMDATH;
 13072  1C9B  0814               	movf	20,w	;volatile
 13073  1C9C  0020               	movlb	0	; select bank0
 13074  1C9D  00A1               	movwf	??_Flash_Memory_Read
 13075  1C9E  0821               	movf	??_Flash_Memory_Read,w
 13076  1C9F  00A2               	movwf	Flash_Memory_Read@i
 13077                           
 13078                           ;MCU_B1.c: 1009: ret = PMDATL;
 13079  1CA0  0023               	movlb	3	; select bank3
 13080  1CA1  0813               	movf	19,w	;volatile
 13081  1CA2  0020               	movlb	0	; select bank0
 13082  1CA3  00A1               	movwf	??_Flash_Memory_Read
 13083  1CA4  0821               	movf	??_Flash_Memory_Read,w
 13084  1CA5  00A4               	movwf	Flash_Memory_Read@ret
 13085                           
 13086                           ;MCU_B1.c: 1010: return ret;
 13087  1CA6  0824               	movf	Flash_Memory_Read@ret,w
 13088  1CA7  0008               	return
 13089  1CA8                     __end_of_Flash_Memory_Read:	
 13090                           
 13091                           	psect	text84
 13092  0644                     __ptext84:	
 13093 ;; *************** function _Exception_Main *****************
 13094 ;; Defined at:
 13095 ;;		line 499 in file "../src/Main_B1.c"
 13096 ;; Parameters:    Size  Location     Type
 13097 ;;		None
 13098 ;; Auto vars:     Size  Location     Type
 13099 ;;  i               2   19[BANK0 ] int 
 13100 ;;  i               2   17[BANK0 ] int 
 13101 ;;  error           1   22[BANK0 ] unsigned char 
 13102 ;;  lights          1   21[BANK0 ] unsigned char 
 13103 ;;  count           1   16[BANK0 ] unsigned char 
 13104 ;;  status          1   15[BANK0 ] unsigned char 
 13105 ;; Return value:  Size  Location     Type
 13106 ;;		None               void
 13107 ;; Registers used:
 13108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13109 ;; Tracked objects:
 13110 ;;		On entry : 0/0
 13111 ;;		On exit  : 0/0
 13112 ;;		Unchanged: 0/0
 13113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;Total ram usage:        9 bytes
 13119 ;; Hardware stack levels used:    1
 13120 ;; Hardware stack levels required when called:    7
 13121 ;; This function calls:
 13122 ;;		_getDimmerLights_Line
 13123 ;;		_getDimmerLights_Status
 13124 ;;		_getMain_All_Error_Status
 13125 ;;		_getMain_All_LightsStatus
 13126 ;;		_setBuz
 13127 ;;		_setDimmerLights_SwOff
 13128 ;;		_setLED
 13129 ;; This function is called by:
 13130 ;;		_main
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           
 13135                           ;psect for function _Exception_Main
 13136  0644                     _Exception_Main:	
 13137                           
 13138                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13139                           
 13140                           ;incstack = 0
 13141                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13142  0644  3000               	movlw	0
 13143  0645  3190  205A  3186   	fcall	_getMain_All_Error_Status
 13144  0648  0020               	movlb	0	; select bank0
 13145  0649  00AE               	movwf	??_Exception_Main
 13146  064A  082E               	movf	??_Exception_Main,w
 13147  064B  00B6               	movwf	Exception_Main@error
 13148                           
 13149                           ;Main_B1.c: 501: char lights = 0, count = 2;
 13150  064C  01B5               	clrf	Exception_Main@lights
 13151  064D  3002               	movlw	2
 13152  064E  00AE               	movwf	??_Exception_Main
 13153  064F  082E               	movf	??_Exception_Main,w
 13154  0650  00B0               	movwf	Exception_Main@count
 13155                           
 13156                           ;Main_B1.c: 502: char status = 0;
 13157  0651  01AF               	clrf	Exception_Main@status
 13158                           
 13159                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13160  0652  0022               	movlb	2	; select bank2
 13161  0653  1DAA               	btfss	(_myMain^(0+256)+10),3
 13162  0654  2E64               	goto	l9987
 13163                           
 13164                           ;Main_B1.c: 505: if (error == 0) {
 13165  0655  0020               	movlb	0	; select bank0
 13166  0656  08B6               	movf	Exception_Main@error,f
 13167  0657  1D03               	skipz
 13168  0658  0008               	return
 13169                           
 13170                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13171  0659  0022               	movlb	2	; select bank2
 13172  065A  11AA               	bcf	(_myMain^(0+256)+10),3
 13173                           
 13174                           ;Main_B1.c: 511: setLED(error, 110);
 13175  065B  306E               	movlw	110
 13176  065C  0020               	movlb	0	; select bank0
 13177  065D  00AE               	movwf	??_Exception_Main
 13178  065E  082E               	movf	??_Exception_Main,w
 13179  065F  00A3               	movwf	setLED@command
 13180  0660  0836               	movf	Exception_Main@error,w
 13181  0661  3194  2451         	fcall	_setLED
 13182                           
 13183                           ;Main_B1.c: 522: }
 13184                           ;Main_B1.c: 523: } else {
 13185  0663  0008               	return
 13186  0664                     l9987:	
 13187                           
 13188                           ;Main_B1.c: 524: if (error != 0) {
 13189  0664  0020               	movlb	0	; select bank0
 13190  0665  0836               	movf	Exception_Main@error,w
 13191  0666  1903               	btfsc	3,2
 13192  0667  0008               	return
 13193                           
 13194                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13195  0668  0022               	movlb	2	; select bank2
 13196  0669  15AA               	bsf	(_myMain^(0+256)+10),3
 13197                           
 13198                           ;Main_B1.c: 529: setLED(error, 111);
 13199  066A  306F               	movlw	111
 13200  066B  0020               	movlb	0	; select bank0
 13201  066C  00AE               	movwf	??_Exception_Main
 13202  066D  082E               	movf	??_Exception_Main,w
 13203  066E  00A3               	movwf	setLED@command
 13204  066F  0836               	movf	Exception_Main@error,w
 13205  0670  3194  2451  3186   	fcall	_setLED
 13206                           
 13207                           ;Main_B1.c: 538: switch (error) {
 13208  0673  2F10               	goto	l10035
 13209  0674                     l9993:	
 13210                           ;Main_B1.c: 539: case 2:
 13211                           
 13212                           
 13213                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13214  0674  319B  2320  3186   	fcall	_getMain_All_LightsStatus
 13215  0677  3A01               	xorlw	1
 13216  0678  1D03               	skipz
 13217  0679  2E83               	goto	l9997
 13218                           
 13219                           ;Main_B1.c: 547: setBuz(10, 300);
 13220  067A  302C               	movlw	44
 13221  067B  0020               	movlb	0	; select bank0
 13222  067C  00AA               	movwf	setBuz@time
 13223  067D  3001               	movlw	1
 13224  067E  00AB               	movwf	setBuz@time+1
 13225  067F  300A               	movlw	10
 13226  0680  3194  24F8  3186   	fcall	_setBuz
 13227  0683                     l9997:	
 13228                           
 13229                           ;Main_B1.c: 548: }
 13230                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13231  0683  0020               	movlb	0	; select bank0
 13232  0684  01B1               	clrf	Exception_Main@i
 13233  0685  01B2               	clrf	Exception_Main@i+1
 13234  0686                     l10007:	
 13235  0686  0832               	movf	Exception_Main@i+1,w
 13236  0687  3A80               	xorlw	128
 13237  0688  00AE               	movwf	??_Exception_Main
 13238  0689  3080               	movlw	128
 13239  068A  022E               	subwf	??_Exception_Main,w
 13240  068B  1D03               	skipz
 13241  068C  2E8F               	goto	u11705
 13242  068D  0830               	movf	Exception_Main@count,w
 13243  068E  0231               	subwf	Exception_Main@i,w
 13244  068F                     u11705:	
 13245  068F  1803               	btfsc	3,0
 13246  0690  2EB1               	goto	u11700
 13247                           
 13248                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13249  0691  0020               	movlb	0	; select bank0
 13250  0692  0831               	movf	Exception_Main@i,w
 13251  0693  3E01               	addlw	1
 13252  0694  319A  225D  3186   	fcall	_getDimmerLights_Status
 13253  0697  3A01               	xorlw	1
 13254  0698  1D03               	skipz
 13255  0699  2EAB               	goto	l10005
 13256                           
 13257                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13258  069A  0021               	movlb	1	; select bank1
 13259  069B  084F               	movf	_DimmerLights^(0+128),w
 13260  069C  0086               	movwf	6
 13261  069D  3001               	movlw	1	; select bank2/3
 13262  069E  0087               	movwf	7
 13263  069F  1401               	bsf	1,0
 13264                           
 13265                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13266  06A0  0A4F               	incf	_DimmerLights^(0+128),w
 13267  06A1  0086               	movwf	6
 13268  06A2  3001               	movlw	1	; select bank2/3
 13269  06A3  0087               	movwf	7
 13270  06A4  1001               	bcf	1,0
 13271                           
 13272                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13273  06A5  0020               	movlb	0	; select bank0
 13274  06A6  0831               	movf	Exception_Main@i,w
 13275  06A7  3E01               	addlw	1
 13276  06A8  3191  212E  3186   	fcall	_setDimmerLights_SwOff
 13277  06AB                     l10005:	
 13278  06AB  3001               	movlw	1
 13279  06AC  0020               	movlb	0	; select bank0
 13280  06AD  07B1               	addwf	Exception_Main@i,f
 13281  06AE  3000               	movlw	0
 13282  06AF  3DB2               	addwfc	Exception_Main@i+1,f
 13283  06B0  2E86               	goto	l10007
 13284  06B1                     u11700:	
 13285  06B1  0020               	movlb	0	; select bank0
 13286  06B2  0008               	return
 13287  06B3                     l10009:	
 13288                           ;Main_B1.c: 561: case 3:
 13289                           
 13290                           ;Main_B1.c: 556: }
 13291                           ;Main_B1.c: 557: }
 13292                           ;Main_B1.c: 560: break;
 13293                           
 13294                           
 13295                           ;Main_B1.c: 563: setBuz(5, 300);
 13296  06B3  302C               	movlw	44
 13297  06B4  0020               	movlb	0	; select bank0
 13298  06B5  00AA               	movwf	setBuz@time
 13299  06B6  3001               	movlw	1
 13300  06B7  00AB               	movwf	setBuz@time+1
 13301  06B8  3005               	movlw	5
 13302  06B9  3194  24F8  3186   	fcall	_setBuz
 13303                           
 13304                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13305  06BC  319B  236C  3186   	fcall	_getDimmerLights_Line
 13306  06BF  0020               	movlb	0	; select bank0
 13307  06C0  00AE               	movwf	??_Exception_Main
 13308  06C1  082E               	movf	??_Exception_Main,w
 13309  06C2  00B5               	movwf	Exception_Main@lights
 13310                           
 13311                           ;Main_B1.c: 565: if (lights == 0) {
 13312  06C3  08B5               	movf	Exception_Main@lights,f
 13313  06C4  1D03               	skipz
 13314  06C5  2EF5               	goto	l10027
 13315                           
 13316                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13317  06C6  01B3               	clrf	Exception_Main@i_3748
 13318  06C7  01B4               	clrf	Exception_Main@i_3748+1
 13319  06C8                     l10025:	
 13320  06C8  0834               	movf	Exception_Main@i_3748+1,w
 13321  06C9  3A80               	xorlw	128
 13322  06CA  00AE               	movwf	??_Exception_Main
 13323  06CB  3080               	movlw	128
 13324  06CC  022E               	subwf	??_Exception_Main,w
 13325  06CD  1D03               	skipz
 13326  06CE  2ED1               	goto	u11735
 13327  06CF  0830               	movf	Exception_Main@count,w
 13328  06D0  0233               	subwf	Exception_Main@i_3748,w
 13329  06D1                     u11735:	
 13330  06D1  1803               	btfsc	3,0
 13331  06D2  2EF3               	goto	u11730
 13332                           
 13333                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13334  06D3  0020               	movlb	0	; select bank0
 13335  06D4  0833               	movf	Exception_Main@i_3748,w
 13336  06D5  3E01               	addlw	1
 13337  06D6  319A  225D  3186   	fcall	_getDimmerLights_Status
 13338  06D9  3A01               	xorlw	1
 13339  06DA  1D03               	skipz
 13340  06DB  2EED               	goto	l10023
 13341                           
 13342                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13343  06DC  0021               	movlb	1	; select bank1
 13344  06DD  084F               	movf	_DimmerLights^(0+128),w
 13345  06DE  0086               	movwf	6
 13346  06DF  3001               	movlw	1	; select bank2/3
 13347  06E0  0087               	movwf	7
 13348  06E1  1401               	bsf	1,0
 13349                           
 13350                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13351  06E2  0A4F               	incf	_DimmerLights^(0+128),w
 13352  06E3  0086               	movwf	6
 13353  06E4  3001               	movlw	1	; select bank2/3
 13354  06E5  0087               	movwf	7
 13355  06E6  1001               	bcf	1,0
 13356                           
 13357                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13358  06E7  0020               	movlb	0	; select bank0
 13359  06E8  0833               	movf	Exception_Main@i_3748,w
 13360  06E9  3E01               	addlw	1
 13361  06EA  3191  212E  3186   	fcall	_setDimmerLights_SwOff
 13362  06ED                     l10023:	
 13363  06ED  3001               	movlw	1
 13364  06EE  0020               	movlb	0	; select bank0
 13365  06EF  07B3               	addwf	Exception_Main@i_3748,f
 13366  06F0  3000               	movlw	0
 13367  06F1  3DB4               	addwfc	Exception_Main@i_3748+1,f
 13368  06F2  2EC8               	goto	l10025
 13369  06F3                     u11730:	
 13370  06F3  0020               	movlb	0	; select bank0
 13371  06F4  0008               	return
 13372  06F5                     l10027:	
 13373                           ;Main_B1.c: 573: }
 13374                           ;Main_B1.c: 574: }
 13375                           ;Main_B1.c: 575: } else {
 13376                           
 13377                           
 13378                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13379  06F5  0020               	movlb	0	; select bank0
 13380  06F6  0835               	movf	Exception_Main@lights,w
 13381  06F7  319A  225D  3186   	fcall	_getDimmerLights_Status
 13382  06FA  3A01               	xorlw	1
 13383  06FB  1903               	btfsc	3,2
 13384  06FC  2EFF               	goto	l10029
 13385  06FD  0020               	movlb	0	; select bank0
 13386  06FE  0008               	return
 13387  06FF                     l10029:	
 13388                           
 13389                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13390  06FF  0021               	movlb	1	; select bank1
 13391  0700  084F               	movf	_DimmerLights^(0+128),w
 13392  0701  0086               	movwf	6
 13393  0702  3001               	movlw	1	; select bank2/3
 13394  0703  0087               	movwf	7
 13395  0704  1401               	bsf	1,0
 13396                           
 13397                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13398  0705  0A4F               	incf	_DimmerLights^(0+128),w
 13399  0706  0086               	movwf	6
 13400  0707  3001               	movlw	1	; select bank2/3
 13401  0708  0087               	movwf	7
 13402  0709  1001               	bcf	1,0
 13403                           
 13404                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13405  070A  0020               	movlb	0	; select bank0
 13406  070B  0835               	movf	Exception_Main@lights,w
 13407  070C  3191  212E         	fcall	_setDimmerLights_SwOff
 13408  070E  0020               	movlb	0	; select bank0
 13409  070F  0008               	return
 13410  0710                     l10035:	
 13411                           ;Main_B1.c: 586: }
 13412                           
 13413                           ;Main_B1.c: 582: }
 13414                           ;Main_B1.c: 583: }
 13415                           ;Main_B1.c: 585: break;
 13416                           
 13417  0710  0020               	movlb	0	; select bank0
 13418  0711  0836               	movf	Exception_Main@error,w
 13419                           
 13420                           ; Switch size 1, requested type "space"
 13421                           ; Number of cases is 2, Range of values is 2 to 3
 13422                           ; switch strategies available:
 13423                           ; Name         Instructions Cycles
 13424                           ; simple_byte            7     4 (average)
 13425                           ; direct_byte           13     9 (fixed)
 13426                           ; jumptable            263     9 (fixed)
 13427                           ;	Chosen strategy is simple_byte
 13428  0712  3A02               	xorlw	2	; case 2
 13429  0713  1903               	skipnz
 13430  0714  2E74               	goto	l9993
 13431  0715  3A01               	xorlw	1	; case 3
 13432  0716  1903               	skipnz
 13433  0717  2EB3               	goto	l10009
 13434  0718  2F1A               	goto	l1693
 13435  0719  0008               	return
 13436  071A                     l1693:	
 13437  071A  0008               	return
 13438  071B                     __end_of_Exception_Main:	
 13439                           
 13440                           	psect	text85
 13441  1B6C                     __ptext85:	
 13442 ;; *************** function _getDimmerLights_Line *****************
 13443 ;; Defined at:
 13444 ;;		line 978 in file "../src/Dimmer_B1.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;		None
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;  line            1    2[BANK0 ] unsigned char 
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  1    wreg      unsigned char 
 13451 ;; Registers used:
 13452 ;;		wreg, status,2
 13453 ;; Tracked objects:
 13454 ;;		On entry : 0/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;Total ram usage:        2 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; Hardware stack levels required when called:    5
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		_Exception_Main
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function _getDimmerLights_Line
 13474  1B6C                     _getDimmerLights_Line:	
 13475                           
 13476                           ;Dimmer_B1.c: 979: char line = 0;
 13477                           
 13478                           ;incstack = 0
 13479                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13480  1B6C  0020               	movlb	0	; select bank0
 13481  1B6D  01A2               	clrf	getDimmerLights_Line@line
 13482                           
 13483                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13484  1B6E  0022               	movlb	2	; select bank2
 13485  1B6F  1CE9               	btfss	(_DimmerLights1^(0+256)+1),1
 13486  1B70  2B75               	goto	l910
 13487                           
 13488                           ;Dimmer_B1.c: 982: line = 1;
 13489  1B71  0020               	movlb	0	; select bank0
 13490  1B72  01A2               	clrf	getDimmerLights_Line@line
 13491  1B73  0AA2               	incf	getDimmerLights_Line@line,f
 13492                           
 13493                           ;Dimmer_B1.c: 983: }
 13494  1B74  2B7D               	goto	l911
 13495  1B75                     l910:	
 13496                           
 13497                           ;Dimmer_B1.c: 986: else if (DimmerLights2.Line == 1) {
 13498  1B75  0023               	movlb	3	; select bank3
 13499  1B76  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13500  1B77  2B7D               	goto	l911
 13501                           
 13502                           ;Dimmer_B1.c: 987: line = 2;
 13503  1B78  3002               	movlw	2
 13504  1B79  0020               	movlb	0	; select bank0
 13505  1B7A  00A1               	movwf	??_getDimmerLights_Line
 13506  1B7B  0821               	movf	??_getDimmerLights_Line,w
 13507  1B7C  00A2               	movwf	getDimmerLights_Line@line
 13508  1B7D                     l911:	
 13509                           
 13510                           ;Dimmer_B1.c: 988: }
 13511                           ;Dimmer_B1.c: 995: return line;
 13512  1B7D  0020               	movlb	0	; select bank0
 13513  1B7E  0822               	movf	getDimmerLights_Line@line,w
 13514  1B7F  0008               	return
 13515  1B80                     __end_of_getDimmerLights_Line:	
 13516                           
 13517                           	psect	text86
 13518  1DCA                     __ptext86:	
 13519 ;; *************** function _DimmerLights_Main *****************
 13520 ;; Defined at:
 13521 ;;		line 736 in file "../src/Dimmer_B1.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;		None
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;		None
 13526 ;; Return value:  Size  Location     Type
 13527 ;;		None               void
 13528 ;; Registers used:
 13529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;Total ram usage:        0 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:   10
 13542 ;; This function calls:
 13543 ;;		_getLoad_OK
 13544 ;;		_getMain_All_Error_Status
 13545 ;;		_getMain_All_LightsStatus
 13546 ;;		_setDimmerLights_Main
 13547 ;; This function is called by:
 13548 ;;		_main
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552                           
 13553                           ;psect for function _DimmerLights_Main
 13554  1DCA                     _DimmerLights_Main:	
 13555                           
 13556                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13557                           
 13558                           ;incstack = 0
 13559                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13560  1DCA  0022               	movlb	2	; select bank2
 13561  1DCB  1CB9               	btfss	_Dimmer^(0+256),1
 13562  1DCC  2DE2               	goto	l9753
 13563                           
 13564                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13565  1DCD  3199  217F  319D   	fcall	_getLoad_OK
 13566  1DD0  3A01               	xorlw	1
 13567  1DD1  1903               	skipnz
 13568  1DD2  2DE0               	goto	l852
 13569  1DD3  3000               	movlw	0
 13570  1DD4  3190  205A  319D   	fcall	_getMain_All_Error_Status
 13571  1DD7  3800               	iorlw	0
 13572  1DD8  1D03               	skipz
 13573  1DD9  2DE0               	goto	l852
 13574  1DDA  319B  2320  319D   	fcall	_getMain_All_LightsStatus
 13575  1DDD  3800               	iorlw	0
 13576  1DDE  1D03               	skipz
 13577  1DDF  2DE2               	goto	l9753
 13578  1DE0                     l852:	
 13579                           
 13580                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13581  1DE0  0022               	movlb	2	; select bank2
 13582  1DE1  10B9               	bcf	_Dimmer^(0+256),1
 13583  1DE2                     l9753:	
 13584                           
 13585                           ;Dimmer_B1.c: 742: }
 13586                           ;Dimmer_B1.c: 743: }
 13587                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13588  1DE2  3001               	movlw	1
 13589  1DE3  3197  2798  319D   	fcall	_setDimmerLights_Main
 13590                           
 13591                           ;Dimmer_B1.c: 751: setDimmerLights_Main(2);
 13592  1DE6  3002               	movlw	2
 13593  1DE7  3197  2798         	fcall	_setDimmerLights_Main
 13594  1DE9  0008               	return
 13595  1DEA                     __end_of_DimmerLights_Main:	
 13596                           
 13597                           	psect	text87
 13598  1798                     __ptext87:	
 13599 ;; *************** function _setDimmerLights_Main *****************
 13600 ;; Defined at:
 13601 ;;		line 765 in file "../src/Dimmer_B1.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;  lights          1    wreg     unsigned char 
 13604 ;; Auto vars:     Size  Location     Type
 13605 ;;  lights          1    4[BANK1 ] unsigned char 
 13606 ;; Return value:  Size  Location     Type
 13607 ;;		None               void
 13608 ;; Registers used:
 13609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13610 ;; Tracked objects:
 13611 ;;		On entry : 0/0
 13612 ;;		On exit  : 0/0
 13613 ;;		Unchanged: 0/0
 13614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;Total ram usage:        1 bytes
 13620 ;; Hardware stack levels used:    1
 13621 ;; Hardware stack levels required when called:    9
 13622 ;; This function calls:
 13623 ;;		_DimmerLights_SelectPointer
 13624 ;;		_getDimmerLights_Allow_Condition
 13625 ;;		_getMain_All_LightsStatus
 13626 ;;		_setDimmerLights_Dimming
 13627 ;;		_setDimmerLights_OnOff
 13628 ;; This function is called by:
 13629 ;;		_DimmerLights_Main
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function _setDimmerLights_Main
 13635  1798                     _setDimmerLights_Main:	
 13636                           
 13637                           ;incstack = 0
 13638                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13639                           ;setDimmerLights_Main@lights stored from wreg
 13640  1798  0021               	movlb	1	; select bank1
 13641  1799  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13642                           
 13643                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13644  179A  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13645  179B  319C  2400  3197   	fcall	_DimmerLights_SelectPointer
 13646                           
 13647                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13648  179E  0021               	movlb	1	; select bank1
 13649  179F  084F               	movf	_DimmerLights^(0+128),w
 13650  17A0  0086               	movwf	6
 13651  17A1  3001               	movlw	1	; select bank2/3
 13652  17A2  0087               	movwf	7
 13653  17A3  1C81               	btfss	1,1
 13654  17A4  2FC4               	goto	l9491
 13655                           
 13656                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13657  17A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13658  17A6  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13659  17A9  3800               	iorlw	0
 13660  17AA  1D03               	skipz
 13661  17AB  0008               	return
 13662                           
 13663                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13664  17AC  0021               	movlb	1	; select bank1
 13665  17AD  084F               	movf	_DimmerLights^(0+128),w
 13666  17AE  0086               	movwf	6
 13667  17AF  3001               	movlw	1	; select bank2/3
 13668  17B0  0087               	movwf	7
 13669  17B1  1081               	bcf	1,1
 13670                           
 13671                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13672  17B2  084F               	movf	_DimmerLights^(0+128),w
 13673  17B3  0086               	movwf	6
 13674  17B4  3001               	movlw	1	; select bank2/3
 13675  17B5  0087               	movwf	7
 13676  17B6  1D01               	btfss	1,2
 13677  17B7  2FBE               	goto	l9489
 13678                           
 13679                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13680  17B8  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13681  17B9  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13682  17BA  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13683  17BB  3187  271B         	fcall	_setDimmerLights_OnOff
 13684                           
 13685                           ;Dimmer_B1.c: 773: } else {
 13686  17BD  0008               	return
 13687  17BE                     l9489:	
 13688                           
 13689                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13690  17BE  0021               	movlb	1	; select bank1
 13691  17BF  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13692  17C0  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13693  17C1  3187  271B         	fcall	_setDimmerLights_OnOff
 13694                           
 13695                           ;Dimmer_B1.c: 775: }
 13696                           ;Dimmer_B1.c: 776: }
 13697                           ;Dimmer_B1.c: 777: } else {
 13698  17C3  0008               	return
 13699  17C4                     l9491:	
 13700                           
 13701                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13702  17C4  319B  2320  3197   	fcall	_getMain_All_LightsStatus
 13703  17C7  3A01               	xorlw	1
 13704  17C8  1D03               	skipz
 13705  17C9  2FF3               	goto	l9503
 13706                           
 13707                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13708  17CA  0021               	movlb	1	; select bank1
 13709  17CB  084F               	movf	_DimmerLights^(0+128),w
 13710  17CC  0086               	movwf	6
 13711  17CD  3001               	movlw	1	; select bank2/3
 13712  17CE  0087               	movwf	7
 13713  17CF  1E01               	btfss	1,4
 13714  17D0  0008               	return
 13715                           
 13716                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13717  17D1  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13718  17D2  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13719  17D5  3800               	iorlw	0
 13720  17D6  1D03               	skipz
 13721  17D7  0008               	return
 13722                           
 13723                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13724  17D8  0021               	movlb	1	; select bank1
 13725  17D9  084F               	movf	_DimmerLights^(0+128),w
 13726  17DA  0086               	movwf	6
 13727  17DB  3001               	movlw	1	; select bank2/3
 13728  17DC  0087               	movwf	7
 13729  17DD  1201               	bcf	1,4
 13730                           
 13731                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13732  17DE  084F               	movf	_DimmerLights^(0+128),w
 13733  17DF  0086               	movwf	6
 13734  17E0  3001               	movlw	1	; select bank2/3
 13735  17E1  0087               	movwf	7
 13736  17E2  1E81               	btfss	1,5
 13737  17E3  2FEC               	goto	l9501
 13738                           
 13739                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13740  17E4  0020               	movlb	0	; select bank0
 13741  17E5  01EB               	clrf	setDimmerLights_Dimming@status
 13742  17E6  0AEB               	incf	setDimmerLights_Dimming@status,f
 13743  17E7  0021               	movlb	1	; select bank1
 13744  17E8  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13745  17E9  3193  23AE         	fcall	_setDimmerLights_Dimming
 13746                           
 13747                           ;Dimmer_B1.c: 784: } else {
 13748  17EB  0008               	return
 13749  17EC                     l9501:	
 13750                           
 13751                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13752  17EC  0020               	movlb	0	; select bank0
 13753  17ED  01EB               	clrf	setDimmerLights_Dimming@status
 13754  17EE  0021               	movlb	1	; select bank1
 13755  17EF  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13756  17F0  3193  23AE         	fcall	_setDimmerLights_Dimming
 13757                           
 13758                           ;Dimmer_B1.c: 786: }
 13759                           ;Dimmer_B1.c: 787: }
 13760                           ;Dimmer_B1.c: 788: }
 13761                           ;Dimmer_B1.c: 789: } else {
 13762  17F2  0008               	return
 13763  17F3                     l9503:	
 13764                           
 13765                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13766  17F3  0021               	movlb	1	; select bank1
 13767  17F4  084F               	movf	_DimmerLights^(0+128),w
 13768  17F5  0086               	movwf	6
 13769  17F6  3001               	movlw	1	; select bank2/3
 13770  17F7  0087               	movwf	7
 13771  17F8  1E01               	btfss	1,4
 13772  17F9  0008               	return
 13773                           
 13774                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13775  17FA  084F               	movf	_DimmerLights^(0+128),w
 13776  17FB  0086               	movwf	6
 13777  17FC  3001               	movlw	1	; select bank2/3
 13778  17FD  0087               	movwf	7
 13779  17FE  1201               	bcf	1,4
 13780  17FF  0008               	return
 13781  1800                     __end_of_setDimmerLights_Main:	
 13782                           
 13783                           	psect	text88
 13784  071B                     __ptext88:	
 13785 ;; *************** function _setDimmerLights_OnOff *****************
 13786 ;; Defined at:
 13787 ;;		line 799 in file "../src/Dimmer_B1.c"
 13788 ;; Parameters:    Size  Location     Type
 13789 ;;  lights          1    wreg     unsigned char 
 13790 ;;  command         1    0[BANK1 ] unsigned char 
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;  lights          1    3[BANK1 ] unsigned char 
 13793 ;; Return value:  Size  Location     Type
 13794 ;;		None               void
 13795 ;; Registers used:
 13796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13802 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;Total ram usage:        4 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    8
 13809 ;; This function calls:
 13810 ;;		_getCmd_Status
 13811 ;;		_getDelayOff_GO
 13812 ;;		_getDimmerLights_PercentToValue
 13813 ;;		_getDimmerLights_ValueToPercent
 13814 ;;		_getMain_All_LightsStatus
 13815 ;;		_setCmd_Status
 13816 ;;		_setDelayOff_GO
 13817 ;;		_setDimmerIntr_ControlStatus
 13818 ;;		_setDimmerIntr_DimmingValue
 13819 ;;		_setDimmerIntr_Dimming_RF
 13820 ;;		_setDimmerIntr_MaxmumValue
 13821 ;;		_setDimmerLights_Line
 13822 ;;		_setLED
 13823 ;;		_setProductData
 13824 ;;		_setRF_DimmerLights
 13825 ;;		_setTxData
 13826 ;; This function is called by:
 13827 ;;		_setDimmerLights_Main
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           
 13832                           ;psect for function _setDimmerLights_OnOff
 13833  071B                     _setDimmerLights_OnOff:	
 13834                           
 13835                           ;incstack = 0
 13836                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13837                           ;setDimmerLights_OnOff@lights stored from wreg
 13838  071B  0021               	movlb	1	; select bank1
 13839  071C  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13840                           
 13841                           ;Dimmer_B1.c: 801: if (command == 1) {
 13842  071D  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13843  071E  3A01               	xorlw	1
 13844  071F  1D03               	skipz
 13845  0720  2F88               	goto	l9363
 13846                           
 13847                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13848  0721  0020               	movlb	0	; select bank0
 13849  0722  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13850  0723  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13851  0724  0021               	movlb	1	; select bank1
 13852  0725  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13853  0726  319F  2773  3187   	fcall	_setDimmerIntr_ControlStatus
 13854                           
 13855                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13856  0729  0022               	movlb	2	; select bank2
 13857  072A  1539               	bsf	_Dimmer^(0+256),2
 13858                           
 13859                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13860  072B  0021               	movlb	1	; select bank1
 13861  072C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13862  072D  319D  2514  3187   	fcall	_setDimmerLights_Line
 13863                           
 13864                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13865  0730  0020               	movlb	0	; select bank0
 13866  0731  01A3               	clrf	setLED@command
 13867  0732  0021               	movlb	1	; select bank1
 13868  0733  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13869  0734  3194  2451  3187   	fcall	_setLED
 13870                           
 13871                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(60*0.65)));
 13872  0737  3027               	movlw	39
 13873  0738  0021               	movlb	1	; select bank1
 13874  0739  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13875  073A  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13876  073B  0020               	movlb	0	; select bank0
 13877  073C  00A1               	movwf	setDimmerIntr_DimmingValue@value
 13878  073D  0021               	movlb	1	; select bank1
 13879  073E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13880  073F  319C  242E  3187   	fcall	_setDimmerIntr_DimmingValue
 13881                           
 13882                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13883  0742  0021               	movlb	1	; select bank1
 13884  0743  0A4F               	incf	_DimmerLights^(0+128),w
 13885  0744  0086               	movwf	6
 13886  0745  3001               	movlw	1	; select bank2/3
 13887  0746  0087               	movwf	7
 13888  0747  1F01               	btfss	1,6
 13889  0748  2F6D               	goto	l9359
 13890                           
 13891                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13892  0749  0A4F               	incf	_DimmerLights^(0+128),w
 13893  074A  0086               	movwf	6
 13894  074B  3001               	movlw	1	; select bank2/3
 13895  074C  0087               	movwf	7
 13896  074D  1301               	bcf	1,6
 13897                           
 13898                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13899  074E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13900  074F  3E14               	addlw	20
 13901  0750  076D               	addwf	_product^(0+128),w
 13902  0751  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13903  0752  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13904  0753  0086               	movwf	6
 13905  0754  3002               	movlw	2	; select bank4/5
 13906  0755  0087               	movwf	7
 13907  0756  0801               	movf	1,w
 13908  0757  3197  2733  3187   	fcall	_getDimmerLights_PercentToValue
 13909  075A  0021               	movlb	1	; select bank1
 13910  075B  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13911  075C  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13912  075D  0020               	movlb	0	; select bank0
 13913  075E  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13914  075F  0021               	movlb	1	; select bank1
 13915  0760  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13916  0761  319C  2417  3187   	fcall	_setDimmerIntr_MaxmumValue
 13917                           
 13918                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13919  0764  0020               	movlb	0	; select bank0
 13920  0765  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13921  0766  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13922  0767  0021               	movlb	1	; select bank1
 13923  0768  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13924  0769  319F  27A2  3187   	fcall	_setDimmerIntr_Dimming_RF
 13925                           
 13926                           ;Dimmer_B1.c: 824: } else {
 13927  076C  2FC0               	goto	l9381
 13928  076D                     l9359:	
 13929                           
 13930                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(60*0.65)));
 13931  076D  3027               	movlw	39
 13932  076E  0021               	movlb	1	; select bank1
 13933  076F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13934  0770  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13935  0771  0020               	movlb	0	; select bank0
 13936  0772  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13937  0773  0021               	movlb	1	; select bank1
 13938  0774  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13939  0775  319C  2417  3187   	fcall	_setDimmerIntr_MaxmumValue
 13940                           
 13941                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          60*0.65))));
 13942  0778  3027               	movlw	39
 13943  0779  3196  2669  3187   	fcall	_getDimmerLights_ValueToPercent
 13944  077C  0021               	movlb	1	; select bank1
 13945  077D  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13946  077E  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13947  077F  0020               	movlb	0	; select bank0
 13948  0780  00E3               	movwf	setProductData@value
 13949  0781  0021               	movlb	1	; select bank1
 13950  0782  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13951  0783  3E14               	addlw	20
 13952  0784  3199  21FC  3187   	fcall	_setProductData
 13953                           
 13954                           ;Dimmer_B1.c: 827: }
 13955                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13956  0787  2FC0               	goto	l9381
 13957  0788                     l9363:	
 13958  0788  0021               	movlb	1	; select bank1
 13959  0789  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13960  078A  1D03               	skipz
 13961  078B  2FC0               	goto	l9381
 13962                           
 13963                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13964  078C  0020               	movlb	0	; select bank0
 13965  078D  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13966  078E  0021               	movlb	1	; select bank1
 13967  078F  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13968  0790  319F  2773  3187   	fcall	_setDimmerIntr_ControlStatus
 13969                           
 13970                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13971  0793  0022               	movlb	2	; select bank2
 13972  0794  1139               	bcf	_Dimmer^(0+256),2
 13973                           
 13974                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13975  0795  3000               	movlw	0
 13976  0796  319D  2514  3187   	fcall	_setDimmerLights_Line
 13977                           
 13978                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13979  0799  0021               	movlb	1	; select bank1
 13980  079A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13981  079B  319A  226E  3187   	fcall	_getDelayOff_GO
 13982  079E  3A01               	xorlw	1
 13983  079F  1D03               	skipz
 13984  07A0  2FA9               	goto	l876
 13985                           
 13986                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13987  07A1  0020               	movlb	0	; select bank0
 13988  07A2  01E6               	clrf	setDelayOff_GO@command
 13989  07A3  01E7               	clrf	setDelayOff_GO@value
 13990  07A4  0021               	movlb	1	; select bank1
 13991  07A5  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13992  07A6  318C  241D  3187   	fcall	_setDelayOff_GO
 13993  07A9                     l876:	
 13994                           
 13995                           ;Dimmer_B1.c: 840: }
 13996                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13997  07A9  0020               	movlb	0	; select bank0
 13998  07AA  01A3               	clrf	setLED@command
 13999  07AB  0AA3               	incf	setLED@command,f
 14000  07AC  0021               	movlb	1	; select bank1
 14001  07AD  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14002  07AE  3194  2451  3187   	fcall	_setLED
 14003                           
 14004                           ;Dimmer_B1.c: 850: if (lights == 1) {
 14005  07B1  0021               	movlb	1	; select bank1
 14006  07B2  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14007  07B3  3A01               	xorlw	1
 14008  07B4  1D03               	skipz
 14009  07B5  2FB9               	goto	l9377
 14010                           
 14011                           ;Dimmer_B1.c: 851: RA7 = 0;
 14012  07B6  0020               	movlb	0	; select bank0
 14013  07B7  138C               	bcf	12,7	;volatile
 14014                           
 14015                           ;Dimmer_B1.c: 853: }
 14016  07B8  2FC0               	goto	l9381
 14017  07B9                     l9377:	
 14018                           
 14019                           ;Dimmer_B1.c: 856: else if (lights == 2) {
 14020  07B9  0021               	movlb	1	; select bank1
 14021  07BA  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14022  07BB  3A02               	xorlw	2
 14023  07BC  1D03               	skipz
 14024  07BD  2FC0               	goto	l9381
 14025                           
 14026                           ;Dimmer_B1.c: 857: RB4 = 0;
 14027  07BE  0020               	movlb	0	; select bank0
 14028  07BF  120D               	bcf	13,4	;volatile
 14029  07C0                     l9381:	
 14030                           
 14031                           ;Dimmer_B1.c: 858: }
 14032                           ;Dimmer_B1.c: 864: }
 14033                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 14034  07C0  0021               	movlb	1	; select bank1
 14035  07C1  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 14036  07C2  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 14037  07C3  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 14038  07C4  0020               	movlb	0	; select bank0
 14039  07C5  00E6               	movwf	setRF_DimmerLights@on
 14040  07C6  0021               	movlb	1	; select bank1
 14041  07C7  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14042  07C8  3196  26CE  3187   	fcall	_setRF_DimmerLights
 14043                           
 14044                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 14045  07CB  3001               	movlw	1
 14046  07CC  319A  22A1  3187   	fcall	_getCmd_Status
 14047  07CF  3A01               	xorlw	1
 14048  07D0  1D03               	skipz
 14049  07D1  2FED               	goto	l9395
 14050                           
 14051                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 14052  07D2  319B  2320  3187   	fcall	_getMain_All_LightsStatus
 14053  07D5  3800               	iorlw	0
 14054  07D6  1D03               	skipz
 14055  07D7  0008               	return
 14056                           
 14057                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 14058  07D8  0020               	movlb	0	; select bank0
 14059  07D9  01A1               	clrf	setCmd_Status@cmd
 14060  07DA  3001               	movlw	1
 14061  07DB  319C  245C  3187   	fcall	_setCmd_Status
 14062                           
 14063                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 14064  07DE  0020               	movlb	0	; select bank0
 14065  07DF  01E3               	clrf	setProductData@value
 14066  07E0  300B               	movlw	11
 14067  07E1  3199  21FC  3187   	fcall	_setProductData
 14068                           
 14069                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 14070  07E4  0020               	movlb	0	; select bank0
 14071  07E5  01E3               	clrf	setProductData@value
 14072  07E6  3011               	movlw	17
 14073  07E7  3199  21FC  3187   	fcall	_setProductData
 14074                           
 14075                           ;Dimmer_B1.c: 874: setTxData();
 14076  07EA  318F  2745         	fcall	_setTxData
 14077                           
 14078                           ;Dimmer_B1.c: 875: }
 14079                           ;Dimmer_B1.c: 876: } else {
 14080  07EC  0008               	return
 14081  07ED                     l9395:	
 14082                           
 14083                           ;Dimmer_B1.c: 877: setTxData();
 14084  07ED  318F  2745         	fcall	_setTxData
 14085  07EF  0008               	return
 14086  07F0                     __end_of_setDimmerLights_OnOff:	
 14087                           
 14088                           	psect	text89
 14089  1451                     __ptext89:	
 14090 ;; *************** function _setLED *****************
 14091 ;; Defined at:
 14092 ;;		line 81 in file "../src/LED_B1.c"
 14093 ;; Parameters:    Size  Location     Type
 14094 ;;  led             1    wreg     unsigned char 
 14095 ;;  command         1    3[BANK0 ] unsigned char 
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;  led             1    4[BANK0 ] unsigned char 
 14098 ;; Return value:  Size  Location     Type
 14099 ;;		None               void
 14100 ;; Registers used:
 14101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14102 ;; Tracked objects:
 14103 ;;		On entry : 0/0
 14104 ;;		On exit  : 0/0
 14105 ;;		Unchanged: 0/0
 14106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14107 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;Total ram usage:        2 bytes
 14112 ;; Hardware stack levels used:    1
 14113 ;; Hardware stack levels required when called:    6
 14114 ;; This function calls:
 14115 ;;		_LedPointSelect
 14116 ;; This function is called by:
 14117 ;;		_setDimmerLights_OnOff
 14118 ;;		_setLED_Initialization
 14119 ;;		_Exception_Main
 14120 ;;		_setSw_Initialization
 14121 ;; This function uses a non-reentrant model
 14122 ;;
 14123                           
 14124                           
 14125                           ;psect for function _setLED
 14126  1451                     _setLED:	
 14127                           
 14128                           ;incstack = 0
 14129                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14130                           ;setLED@led stored from wreg
 14131  1451  0020               	movlb	0	; select bank0
 14132  1452  00A4               	movwf	setLED@led
 14133                           
 14134                           ;LED_B1.c: 82: LedPointSelect(led);
 14135  1453  0824               	movf	setLED@led,w
 14136  1454  319D  25AA  3194   	fcall	_LedPointSelect
 14137                           
 14138                           ;LED_B1.c: 83: if (command == 0) {
 14139  1457  0020               	movlb	0	; select bank0
 14140  1458  08A3               	movf	setLED@command,f
 14141  1459  1D03               	skipz
 14142  145A  2C68               	goto	l7135
 14143                           
 14144                           ;LED_B1.c: 85: if (led == 1) {
 14145  145B  0824               	movf	setLED@led,w
 14146  145C  3A01               	xorlw	1
 14147  145D  1D03               	skipz
 14148  145E  2C60               	goto	l7127
 14149                           
 14150                           ;LED_B1.c: 89: RA3 = 1;
 14151  145F  158C               	bsf	12,3	;volatile
 14152  1460                     l7127:	
 14153                           
 14154                           ;LED_B1.c: 91: }
 14155                           ;LED_B1.c: 94: if (led == 2) {
 14156  1460  0824               	movf	setLED@led,w
 14157  1461  3A02               	xorlw	2
 14158  1462  1903               	btfsc	3,2
 14159                           
 14160                           ;LED_B1.c: 98: RC7 = 1;
 14161  1463  178E               	bsf	14,7	;volatile
 14162                           
 14163                           ;LED_B1.c: 100: }
 14164                           ;LED_B1.c: 112: if (led == 99) {
 14165  1464  0824               	movf	setLED@led,w
 14166  1465  3A63               	xorlw	99
 14167  1466  1903               	btfsc	3,2
 14168                           
 14169                           ;LED_B1.c: 116: RB5 = 1;
 14170  1467  168D               	bsf	13,5	;volatile
 14171  1468                     l7135:	
 14172                           
 14173                           ;LED_B1.c: 118: }
 14174                           ;LED_B1.c: 120: }
 14175                           ;LED_B1.c: 121: if (command == 1) {
 14176  1468  0823               	movf	setLED@command,w
 14177  1469  3A01               	xorlw	1
 14178  146A  1D03               	skipz
 14179  146B  2C79               	goto	l7149
 14180                           
 14181                           ;LED_B1.c: 123: if (led == 1) {
 14182  146C  0824               	movf	setLED@led,w
 14183  146D  3A01               	xorlw	1
 14184  146E  1D03               	skipz
 14185  146F  2C71               	goto	l7141
 14186                           
 14187                           ;LED_B1.c: 127: RA3 = 0;
 14188  1470  118C               	bcf	12,3	;volatile
 14189  1471                     l7141:	
 14190                           
 14191                           ;LED_B1.c: 129: }
 14192                           ;LED_B1.c: 132: if (led == 2) {
 14193  1471  0824               	movf	setLED@led,w
 14194  1472  3A02               	xorlw	2
 14195  1473  1903               	btfsc	3,2
 14196                           
 14197                           ;LED_B1.c: 136: RC7 = 0;
 14198  1474  138E               	bcf	14,7	;volatile
 14199                           
 14200                           ;LED_B1.c: 138: }
 14201                           ;LED_B1.c: 150: if (led == 99) {
 14202  1475  0824               	movf	setLED@led,w
 14203  1476  3A63               	xorlw	99
 14204  1477  1903               	btfsc	3,2
 14205                           
 14206                           ;LED_B1.c: 154: RB5 = 0;
 14207  1478  128D               	bcf	13,5	;volatile
 14208  1479                     l7149:	
 14209                           
 14210                           ;LED_B1.c: 156: }
 14211                           ;LED_B1.c: 158: }
 14212                           ;LED_B1.c: 159: if (command == 10) {
 14213  1479  0823               	movf	setLED@command,w
 14214  147A  3A0A               	xorlw	10
 14215  147B  1D03               	skipz
 14216  147C  2C99               	goto	l7165
 14217                           
 14218                           ;LED_B1.c: 160: LED->GO = 0;
 14219  147D  0021               	movlb	1	; select bank1
 14220  147E  0850               	movf	_LED^(0+128),w
 14221  147F  0086               	movwf	6
 14222  1480  3001               	movlw	1	; select bank2/3
 14223  1481  0087               	movwf	7
 14224  1482  1081               	bcf	1,1
 14225                           
 14226                           ;LED_B1.c: 161: LED->Time = 0;
 14227  1483  0A50               	incf	_LED^(0+128),w
 14228  1484  0086               	movwf	6
 14229  1485  3001               	movlw	1	; select bank2/3
 14230  1486  0087               	movwf	7
 14231  1487  3000               	movlw	0
 14232  1488  3FC0               	movwi [0]fsr1
 14233  1489  3FC1               	movwi [1]fsr1
 14234                           
 14235                           ;LED_B1.c: 163: if (led == 1) {
 14236  148A  0020               	movlb	0	; select bank0
 14237  148B  0824               	movf	setLED@led,w
 14238  148C  3A01               	xorlw	1
 14239  148D  1D03               	skipz
 14240  148E  2C91               	goto	l7157
 14241                           
 14242                           ;LED_B1.c: 167: RA3 = 1;
 14243  148F  158C               	bsf	12,3	;volatile
 14244                           
 14245                           ;LED_B1.c: 169: }
 14246  1490  2C95               	goto	l7161
 14247  1491                     l7157:	
 14248                           
 14249                           ;LED_B1.c: 172: else if (led == 2) {
 14250  1491  0824               	movf	setLED@led,w
 14251  1492  3A02               	xorlw	2
 14252  1493  1903               	btfsc	3,2
 14253                           
 14254                           ;LED_B1.c: 176: RC7 = 1;
 14255  1494  178E               	bsf	14,7	;volatile
 14256  1495                     l7161:	
 14257                           
 14258                           ;LED_B1.c: 178: }
 14259                           ;LED_B1.c: 190: if (led == 99) {
 14260  1495  0824               	movf	setLED@led,w
 14261  1496  3A63               	xorlw	99
 14262  1497  1903               	btfsc	3,2
 14263                           
 14264                           ;LED_B1.c: 194: RB5 = 1;
 14265  1498  168D               	bsf	13,5	;volatile
 14266  1499                     l7165:	
 14267                           
 14268                           ;LED_B1.c: 196: }
 14269                           ;LED_B1.c: 198: }
 14270                           ;LED_B1.c: 199: if (command == 11) {
 14271  1499  0823               	movf	setLED@command,w
 14272  149A  3A0B               	xorlw	11
 14273  149B  1D03               	skipz
 14274  149C  0008               	return
 14275                           
 14276                           ;LED_B1.c: 200: LED->GO = 1;
 14277  149D  0021               	movlb	1	; select bank1
 14278  149E  0850               	movf	_LED^(0+128),w
 14279  149F  0086               	movwf	6
 14280  14A0  3001               	movlw	1	; select bank2/3
 14281  14A1  0087               	movwf	7
 14282  14A2  1481               	bsf	1,1
 14283  14A3  0008               	return
 14284  14A4                     __end_of_setLED:	
 14285                           
 14286                           	psect	text90
 14287  1DAA                     __ptext90:	
 14288 ;; *************** function _LedPointSelect *****************
 14289 ;; Defined at:
 14290 ;;		line 7 in file "../src/LED_B1.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;  led             1    wreg     unsigned char 
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;  led             1    2[BANK0 ] unsigned char 
 14295 ;; Return value:  Size  Location     Type
 14296 ;;		None               void
 14297 ;; Registers used:
 14298 ;;		wreg
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;Total ram usage:        2 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    5
 14311 ;; This function calls:
 14312 ;;		Nothing
 14313 ;; This function is called by:
 14314 ;;		_setLED_Initialization
 14315 ;;		_setLED
 14316 ;;		_setLED_Main
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           
 14321                           ;psect for function _LedPointSelect
 14322  1DAA                     _LedPointSelect:	
 14323                           
 14324                           ;incstack = 0
 14325                           ; Regs used in _LedPointSelect: [wreg]
 14326                           ;LedPointSelect@led stored from wreg
 14327  1DAA  0020               	movlb	0	; select bank0
 14328  1DAB  00A2               	movwf	LedPointSelect@led
 14329                           
 14330                           ;LED_B1.c: 9: if (led == 1) {
 14331  1DAC  0822               	movf	LedPointSelect@led,w
 14332  1DAD  3A01               	xorlw	1
 14333  1DAE  1D03               	skipz
 14334  1DAF  2DB5               	goto	l1118
 14335                           
 14336                           ;LED_B1.c: 10: LED = &VarLED1;
 14337  1DB0  30E6               	movlw	_VarLED1& (0+255)
 14338  1DB1  00A1               	movwf	??_LedPointSelect
 14339  1DB2  0821               	movf	??_LedPointSelect,w
 14340  1DB3  0021               	movlb	1	; select bank1
 14341  1DB4  00D0               	movwf	_LED^(0+128)
 14342  1DB5                     l1118:	
 14343                           
 14344                           ;LED_B1.c: 11: }
 14345                           ;LED_B1.c: 14: if (led == 2) {
 14346  1DB5  0020               	movlb	0	; select bank0
 14347  1DB6  0822               	movf	LedPointSelect@led,w
 14348  1DB7  3A02               	xorlw	2
 14349  1DB8  1D03               	skipz
 14350  1DB9  2DBF               	goto	l1119
 14351                           
 14352                           ;LED_B1.c: 15: LED = &VarLED2;
 14353  1DBA  30EA               	movlw	_VarLED2& (0+255)
 14354  1DBB  00A1               	movwf	??_LedPointSelect
 14355  1DBC  0821               	movf	??_LedPointSelect,w
 14356  1DBD  0021               	movlb	1	; select bank1
 14357  1DBE  00D0               	movwf	_LED^(0+128)
 14358  1DBF                     l1119:	
 14359                           
 14360                           ;LED_B1.c: 16: }
 14361                           ;LED_B1.c: 24: if (led == 99) {
 14362  1DBF  0020               	movlb	0	; select bank0
 14363  1DC0  0822               	movf	LedPointSelect@led,w
 14364  1DC1  3A63               	xorlw	99
 14365  1DC2  1D03               	skipz
 14366  1DC3  0008               	return
 14367                           
 14368                           ;LED_B1.c: 25: LED = &VarErrLED;
 14369  1DC4  30E2               	movlw	_VarErrLED& (0+255)
 14370  1DC5  00A1               	movwf	??_LedPointSelect
 14371  1DC6  0821               	movf	??_LedPointSelect,w
 14372  1DC7  0021               	movlb	1	; select bank1
 14373  1DC8  00D0               	movwf	_LED^(0+128)
 14374  1DC9  0008               	return
 14375  1DCA                     __end_of_LedPointSelect:	
 14376                           
 14377                           	psect	text91
 14378  1FA2                     __ptext91:	
 14379 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14380 ;; Defined at:
 14381 ;;		line 184 in file "../src/Dimmer_B1.c"
 14382 ;; Parameters:    Size  Location     Type
 14383 ;;  lights          1    wreg     unsigned char 
 14384 ;;  command         1    1[BANK0 ] unsigned char 
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;  lights          1    3[BANK0 ] unsigned char 
 14387 ;; Return value:  Size  Location     Type
 14388 ;;		None               void
 14389 ;; Registers used:
 14390 ;;		wreg, status,2, status,0
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 0/0
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14396 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;Total ram usage:        3 bytes
 14401 ;; Hardware stack levels used:    1
 14402 ;; Hardware stack levels required when called:    5
 14403 ;; This function calls:
 14404 ;;		Nothing
 14405 ;; This function is called by:
 14406 ;;		_setDimmerLights_OnOff
 14407 ;;		_setRFSW_AdjControl
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           
 14412                           ;psect for function _setDimmerIntr_Dimming_RF
 14413  1FA2                     _setDimmerIntr_Dimming_RF:	
 14414                           
 14415                           ;incstack = 0
 14416                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14417                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14418  1FA2  0020               	movlb	0	; select bank0
 14419  1FA3  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14420                           
 14421                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14422  1FA4  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14423  1FA5  3A01               	xorlw	1
 14424  1FA6  1D03               	skipz
 14425  1FA7  2FBA               	goto	l6719
 14426                           
 14427                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14428  1FA8  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14429  1FA9  3A01               	xorlw	1
 14430  1FAA  3000               	movlw	0
 14431  1FAB  1903               	skipnz
 14432  1FAC  3001               	movlw	1
 14433  1FAD  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14434  1FAE  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14435  1FAF  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14436  1FB0  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14437  1FB1  0021               	movlb	1	; select bank1
 14438  1FB2  082E               	movf	_DimmerIntr1^(0+128),w
 14439  1FB3  0020               	movlb	0	; select bank0
 14440  1FB4  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14441  1FB5  39BF               	andlw	-65
 14442  1FB6  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14443  1FB7  0021               	movlb	1	; select bank1
 14444  1FB8  00AE               	movwf	_DimmerIntr1^(0+128)
 14445                           
 14446                           ;Dimmer_B1.c: 188: }
 14447  1FB9  0008               	return
 14448  1FBA                     l6719:	
 14449                           
 14450                           ;Dimmer_B1.c: 191: else if (lights == 2) {
 14451  1FBA  0020               	movlb	0	; select bank0
 14452  1FBB  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14453  1FBC  3A02               	xorlw	2
 14454  1FBD  1D03               	skipz
 14455  1FBE  0008               	return
 14456                           
 14457                           ;Dimmer_B1.c: 192: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14458  1FBF  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14459  1FC0  3A01               	xorlw	1
 14460  1FC1  3000               	movlw	0
 14461  1FC2  1903               	skipnz
 14462  1FC3  3001               	movlw	1
 14463  1FC4  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14464  1FC5  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14465  1FC6  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14466  1FC7  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14467  1FC8  0021               	movlb	1	; select bank1
 14468  1FC9  083A               	movf	_DimmerIntr2^(0+128),w
 14469  1FCA  0020               	movlb	0	; select bank0
 14470  1FCB  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14471  1FCC  39BF               	andlw	-65
 14472  1FCD  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14473  1FCE  0021               	movlb	1	; select bank1
 14474  1FCF  00BA               	movwf	_DimmerIntr2^(0+128)
 14475  1FD0  0008               	return
 14476  1FD1                     __end_of_setDimmerIntr_Dimming_RF:	
 14477                           
 14478                           	psect	text92
 14479  1C2E                     __ptext92:	
 14480 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14481 ;; Defined at:
 14482 ;;		line 49 in file "../src/Dimmer_B1.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;  lights          1    wreg     unsigned char 
 14485 ;;  value           1    1[BANK0 ] unsigned char 
 14486 ;; Auto vars:     Size  Location     Type
 14487 ;;  lights          1    3[BANK0 ] unsigned char 
 14488 ;; Return value:  Size  Location     Type
 14489 ;;		None               void
 14490 ;; Registers used:
 14491 ;;		wreg
 14492 ;; Tracked objects:
 14493 ;;		On entry : 0/0
 14494 ;;		On exit  : 0/0
 14495 ;;		Unchanged: 0/0
 14496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14497 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;Total ram usage:        3 bytes
 14502 ;; Hardware stack levels used:    1
 14503 ;; Hardware stack levels required when called:    5
 14504 ;; This function calls:
 14505 ;;		Nothing
 14506 ;; This function is called by:
 14507 ;;		_setDimmerLights_OnOff
 14508 ;; This function uses a non-reentrant model
 14509 ;;
 14510                           
 14511                           
 14512                           ;psect for function _setDimmerIntr_DimmingValue
 14513  1C2E                     _setDimmerIntr_DimmingValue:	
 14514                           
 14515                           ;incstack = 0
 14516                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14517                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14518  1C2E  0020               	movlb	0	; select bank0
 14519  1C2F  00A3               	movwf	setDimmerIntr_DimmingValue@lights
 14520                           
 14521                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14522  1C30  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14523  1C31  3A01               	xorlw	1
 14524  1C32  1D03               	skipz
 14525  1C33  2C3A               	goto	l7051
 14526                           
 14527                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14528  1C34  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14529  1C35  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14530  1C36  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14531  1C37  0021               	movlb	1	; select bank1
 14532  1C38  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 14533                           
 14534                           ;Dimmer_B1.c: 53: }
 14535  1C39  0008               	return
 14536  1C3A                     l7051:	
 14537                           
 14538                           ;Dimmer_B1.c: 56: else if (lights == 2) {
 14539  1C3A  0020               	movlb	0	; select bank0
 14540  1C3B  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14541  1C3C  3A02               	xorlw	2
 14542  1C3D  1D03               	skipz
 14543  1C3E  0008               	return
 14544                           
 14545                           ;Dimmer_B1.c: 57: DimmerIntr2.DimmingValue = value;
 14546  1C3F  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14547  1C40  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14548  1C41  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14549  1C42  0021               	movlb	1	; select bank1
 14550  1C43  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 14551  1C44  0008               	return
 14552  1C45                     __end_of_setDimmerIntr_DimmingValue:	
 14553                           
 14554                           	psect	text93
 14555  1F73                     __ptext93:	
 14556 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14557 ;; Defined at:
 14558 ;;		line 31 in file "../src/Dimmer_B1.c"
 14559 ;; Parameters:    Size  Location     Type
 14560 ;;  lights          1    wreg     unsigned char 
 14561 ;;  command         1    1[BANK0 ] unsigned char 
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;  lights          1    3[BANK0 ] unsigned char 
 14564 ;; Return value:  Size  Location     Type
 14565 ;;		None               void
 14566 ;; Registers used:
 14567 ;;		wreg, status,2, status,0
 14568 ;; Tracked objects:
 14569 ;;		On entry : 0/0
 14570 ;;		On exit  : 0/0
 14571 ;;		Unchanged: 0/0
 14572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14573 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;Total ram usage:        3 bytes
 14578 ;; Hardware stack levels used:    1
 14579 ;; Hardware stack levels required when called:    5
 14580 ;; This function calls:
 14581 ;;		Nothing
 14582 ;; This function is called by:
 14583 ;;		_setDimmerLights_OnOff
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           
 14588                           ;psect for function _setDimmerIntr_ControlStatus
 14589  1F73                     _setDimmerIntr_ControlStatus:	
 14590                           
 14591                           ;incstack = 0
 14592                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14593                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14594  1F73  0020               	movlb	0	; select bank0
 14595  1F74  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14596                           
 14597                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14598  1F75  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14599  1F76  3A01               	xorlw	1
 14600  1F77  1D03               	skipz
 14601  1F78  2F8B               	goto	l7043
 14602                           
 14603                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14604  1F79  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14605  1F7A  3A01               	xorlw	1
 14606  1F7B  3000               	movlw	0
 14607  1F7C  1903               	skipnz
 14608  1F7D  3001               	movlw	1
 14609  1F7E  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14610  1F7F  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14611  1F80  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14612  1F81  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14613  1F82  0021               	movlb	1	; select bank1
 14614  1F83  082E               	movf	_DimmerIntr1^(0+128),w
 14615  1F84  0020               	movlb	0	; select bank0
 14616  1F85  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14617  1F86  39F7               	andlw	-9
 14618  1F87  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14619  1F88  0021               	movlb	1	; select bank1
 14620  1F89  00AE               	movwf	_DimmerIntr1^(0+128)
 14621                           
 14622                           ;Dimmer_B1.c: 35: }
 14623  1F8A  0008               	return
 14624  1F8B                     l7043:	
 14625                           
 14626                           ;Dimmer_B1.c: 38: else if (lights == 2) {
 14627  1F8B  0020               	movlb	0	; select bank0
 14628  1F8C  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14629  1F8D  3A02               	xorlw	2
 14630  1F8E  1D03               	skipz
 14631  1F8F  0008               	return
 14632                           
 14633                           ;Dimmer_B1.c: 39: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14634  1F90  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14635  1F91  3A01               	xorlw	1
 14636  1F92  3000               	movlw	0
 14637  1F93  1903               	skipnz
 14638  1F94  3001               	movlw	1
 14639  1F95  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14640  1F96  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14641  1F97  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14642  1F98  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14643  1F99  0021               	movlb	1	; select bank1
 14644  1F9A  083A               	movf	_DimmerIntr2^(0+128),w
 14645  1F9B  0020               	movlb	0	; select bank0
 14646  1F9C  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14647  1F9D  39F7               	andlw	-9
 14648  1F9E  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14649  1F9F  0021               	movlb	1	; select bank1
 14650  1FA0  00BA               	movwf	_DimmerIntr2^(0+128)
 14651  1FA1  0008               	return
 14652  1FA2                     __end_of_setDimmerIntr_ControlStatus:	
 14653                           
 14654                           	psect	text94
 14655  0C1D                     __ptext94:	
 14656 ;; *************** function _setDelayOff_GO *****************
 14657 ;; Defined at:
 14658 ;;		line 87 in file "../src/DelayOff_B1.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  sw              1    wreg     unsigned char 
 14661 ;;  command         1   70[BANK0 ] unsigned char 
 14662 ;;  value           1   71[BANK0 ] unsigned char 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;  sw              1   77[BANK0 ] unsigned char 
 14665 ;;  k               1   76[BANK0 ] unsigned char 
 14666 ;;  j               1   75[BANK0 ] unsigned char 
 14667 ;;  i               1   74[BANK0 ] unsigned char 
 14668 ;; Return value:  Size  Location     Type
 14669 ;;		None               void
 14670 ;; Registers used:
 14671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14672 ;; Tracked objects:
 14673 ;;		On entry : 0/0
 14674 ;;		On exit  : 0/0
 14675 ;;		Unchanged: 0/0
 14676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14677 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;Total ram usage:        8 bytes
 14682 ;; Hardware stack levels used:    1
 14683 ;; Hardware stack levels required when called:    6
 14684 ;; This function calls:
 14685 ;;		_DelayOffPointSelect
 14686 ;;		___bmul
 14687 ;;		_setProductData
 14688 ;; This function is called by:
 14689 ;;		_setDimmerLights_OnOff
 14690 ;;		_setRFSW_Control
 14691 ;; This function uses a non-reentrant model
 14692 ;;
 14693                           
 14694                           
 14695                           ;psect for function _setDelayOff_GO
 14696  0C1D                     _setDelayOff_GO:	
 14697                           
 14698                           ;incstack = 0
 14699                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14700                           ;setDelayOff_GO@sw stored from wreg
 14701  0C1D  0020               	movlb	0	; select bank0
 14702  0C1E  00ED               	movwf	setDelayOff_GO@sw
 14703                           
 14704                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14705  0C1F  086D               	movf	setDelayOff_GO@sw,w
 14706  0C20  319B  23E9  318C   	fcall	_DelayOffPointSelect
 14707                           
 14708                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14709  0C23  0020               	movlb	0	; select bank0
 14710  0C24  0866               	movf	setDelayOff_GO@command,w
 14711  0C25  3A01               	xorlw	1
 14712  0C26  3000               	movlw	0
 14713  0C27  1903               	skipnz
 14714  0C28  3001               	movlw	1
 14715  0C29  00E8               	movwf	??_setDelayOff_GO
 14716  0C2A  0021               	movlb	1	; select bank1
 14717  0C2B  084D               	movf	_DelayOff^(0+128),w
 14718  0C2C  0086               	movwf	6
 14719  0C2D  3001               	movlw	1	; select bank2/3
 14720  0C2E  0087               	movwf	7
 14721  0C2F  0020               	movlb	0	; select bank0
 14722  0C30  0DE8               	rlf	??_setDelayOff_GO,f
 14723  0C31  0801               	movf	1,w
 14724  0C32  0668               	xorwf	??_setDelayOff_GO,w
 14725  0C33  39FD               	andlw	-3
 14726  0C34  0668               	xorwf	??_setDelayOff_GO,w
 14727  0C35  0081               	movwf	1
 14728                           
 14729                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14730  0C36  0021               	movlb	1	; select bank1
 14731  0C37  084D               	movf	_DelayOff^(0+128),w
 14732  0C38  3E02               	addlw	2
 14733  0C39  0086               	movwf	6
 14734  0C3A  3001               	movlw	1	; select bank2/3
 14735  0C3B  0087               	movwf	7
 14736  0C3C  3000               	movlw	0
 14737  0C3D  3FC0               	movwi [0]fsr1
 14738  0C3E  3FC1               	movwi [1]fsr1
 14739                           
 14740                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14741  0C3F  084D               	movf	_DelayOff^(0+128),w
 14742  0C40  3E04               	addlw	4
 14743  0C41  0086               	movwf	6
 14744  0C42  3001               	movlw	1	; select bank2/3
 14745  0C43  0087               	movwf	7
 14746  0C44  0181               	clrf	1
 14747                           
 14748                           ;DelayOff_B1.c: 94: if (command == 1) {
 14749  0C45  0020               	movlb	0	; select bank0
 14750  0C46  0866               	movf	setDelayOff_GO@command,w
 14751  0C47  3A01               	xorlw	1
 14752  0C48  1D03               	skipz
 14753  0C49  2C9F               	goto	l9205
 14754                           
 14755                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14756  0C4A  3005               	movlw	5
 14757  0C4B  00E8               	movwf	??_setDelayOff_GO
 14758  0C4C  0868               	movf	??_setDelayOff_GO,w
 14759  0C4D  00EA               	movwf	setDelayOff_GO@i
 14760  0C4E  01EB               	clrf	setDelayOff_GO@j
 14761  0C4F  01EC               	clrf	setDelayOff_GO@k
 14762                           
 14763                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14764  0C50  300F               	movlw	15
 14765  0C51  0567               	andwf	setDelayOff_GO@value,w
 14766  0C52  00E8               	movwf	??_setDelayOff_GO
 14767  0C53  0868               	movf	??_setDelayOff_GO,w
 14768  0C54  3A05               	xorlw	5
 14769  0C55  1903               	skipnz
 14770  0C56  2C5B               	goto	l9191
 14771  0C57  0867               	movf	setDelayOff_GO@value,w
 14772  0C58  390F               	andlw	15
 14773  0C59  1D03               	btfss	3,2
 14774  0C5A  2C8B               	goto	l9201
 14775  0C5B                     l9191:	
 14776  0C5B  3031               	movlw	49
 14777  0C5C  0267               	subwf	setDelayOff_GO@value,w
 14778  0C5D  1803               	skipnc
 14779  0C5E  2C8B               	goto	l9201
 14780                           
 14781                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14782  0C5F  0867               	movf	setDelayOff_GO@value,w
 14783  0C60  390F               	andlw	15
 14784  0C61  00E8               	movwf	??_setDelayOff_GO
 14785  0C62  0868               	movf	??_setDelayOff_GO,w
 14786  0C63  00EB               	movwf	setDelayOff_GO@j
 14787                           
 14788                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14789  0C64  0867               	movf	setDelayOff_GO@value,w
 14790  0C65  00E8               	movwf	??_setDelayOff_GO
 14791  0C66  3004               	movlw	4
 14792  0C67                     u10185:	
 14793  0C67  36E8               	lsrf	??_setDelayOff_GO,f
 14794  0C68  0B89               	decfsz	9,f
 14795  0C69  2C67               	goto	u10185
 14796  0C6A  0868               	movf	??_setDelayOff_GO,w
 14797  0C6B  390F               	andlw	15
 14798  0C6C  00E9               	movwf	??_setDelayOff_GO+1
 14799  0C6D  0869               	movf	??_setDelayOff_GO+1,w
 14800  0C6E  00EC               	movwf	setDelayOff_GO@k
 14801                           
 14802                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14803  0C6F  300A               	movlw	10
 14804  0C70  00E8               	movwf	??_setDelayOff_GO
 14805  0C71  0868               	movf	??_setDelayOff_GO,w
 14806  0C72  00A1               	movwf	___bmul@multiplicand
 14807  0C73  086C               	movf	setDelayOff_GO@k,w
 14808  0C74  319A  22B3  318C   	fcall	___bmul
 14809  0C77  0020               	movlb	0	; select bank0
 14810  0C78  076B               	addwf	setDelayOff_GO@j,w
 14811  0C79  00E9               	movwf	??_setDelayOff_GO+1
 14812  0C7A  0021               	movlb	1	; select bank1
 14813  0C7B  0A4D               	incf	_DelayOff^(0+128),w
 14814  0C7C  0086               	movwf	6
 14815  0C7D  3001               	movlw	1	; select bank2/3
 14816  0C7E  0087               	movwf	7
 14817  0C7F  0020               	movlb	0	; select bank0
 14818  0C80  0869               	movf	??_setDelayOff_GO+1,w
 14819  0C81  0081               	movwf	1
 14820                           
 14821                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14822  0C82  0867               	movf	setDelayOff_GO@value,w
 14823  0C83  00E8               	movwf	??_setDelayOff_GO
 14824  0C84  0868               	movf	??_setDelayOff_GO,w
 14825  0C85  00E3               	movwf	setProductData@value
 14826  0C86  086D               	movf	setDelayOff_GO@sw,w
 14827  0C87  3E1A               	addlw	26
 14828  0C88  3199  21FC         	fcall	_setProductData
 14829                           
 14830                           ;DelayOff_B1.c: 103: } else {
 14831  0C8A  0008               	return
 14832  0C8B                     l9201:	
 14833                           
 14834                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14835  0C8B  3005               	movlw	5
 14836  0C8C  0020               	movlb	0	; select bank0
 14837  0C8D  00E8               	movwf	??_setDelayOff_GO
 14838  0C8E  0021               	movlb	1	; select bank1
 14839  0C8F  0A4D               	incf	_DelayOff^(0+128),w
 14840  0C90  0086               	movwf	6
 14841  0C91  3001               	movlw	1	; select bank2/3
 14842  0C92  0087               	movwf	7
 14843  0C93  0020               	movlb	0	; select bank0
 14844  0C94  0868               	movf	??_setDelayOff_GO,w
 14845  0C95  0081               	movwf	1
 14846                           
 14847                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14848  0C96  3005               	movlw	5
 14849  0C97  00E8               	movwf	??_setDelayOff_GO
 14850  0C98  0868               	movf	??_setDelayOff_GO,w
 14851  0C99  00E3               	movwf	setProductData@value
 14852  0C9A  086D               	movf	setDelayOff_GO@sw,w
 14853  0C9B  3E1A               	addlw	26
 14854  0C9C  3199  21FC         	fcall	_setProductData
 14855                           
 14856                           ;DelayOff_B1.c: 106: }
 14857                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14858  0C9E  0008               	return
 14859  0C9F                     l9205:	
 14860  0C9F  0020               	movlb	0	; select bank0
 14861  0CA0  08E6               	movf	setDelayOff_GO@command,f
 14862  0CA1  1D03               	skipz
 14863  0CA2  0008               	return
 14864                           
 14865                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14866  0CA3  01E3               	clrf	setProductData@value
 14867  0CA4  086D               	movf	setDelayOff_GO@sw,w
 14868  0CA5  3E1A               	addlw	26
 14869  0CA6  3199  21FC         	fcall	_setProductData
 14870  0CA8  0008               	return
 14871  0CA9                     __end_of_setDelayOff_GO:	
 14872                           
 14873                           	psect	text95
 14874  1AB3                     __ptext95:	
 14875 ;; *************** function ___bmul *****************
 14876 ;; Defined at:
 14877 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14878 ;; Parameters:    Size  Location     Type
 14879 ;;  multiplier      1    wreg     unsigned char 
 14880 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14883 ;;  product         1    3[BANK0 ] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  1    wreg      unsigned char 
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;Total ram usage:        4 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    5
 14900 ;; This function calls:
 14901 ;;		Nothing
 14902 ;; This function is called by:
 14903 ;;		_setDelayOff_GO
 14904 ;;		_DelayTimejudge
 14905 ;; This function uses a non-reentrant model
 14906 ;;
 14907                           
 14908                           
 14909                           ;psect for function ___bmul
 14910  1AB3                     ___bmul:	
 14911                           
 14912                           ;incstack = 0
 14913                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14914                           ;___bmul@multiplier stored from wreg
 14915  1AB3  0020               	movlb	0	; select bank0
 14916  1AB4  00A4               	movwf	___bmul@multiplier
 14917  1AB5  01A3               	clrf	___bmul@product
 14918  1AB6                     l6345:	
 14919  1AB6  1C24               	btfss	___bmul@multiplier,0
 14920  1AB7  2ABC               	goto	l6349
 14921  1AB8  0821               	movf	___bmul@multiplicand,w
 14922  1AB9  00A2               	movwf	??___bmul
 14923  1ABA  0822               	movf	??___bmul,w
 14924  1ABB  07A3               	addwf	___bmul@product,f
 14925  1ABC                     l6349:	
 14926  1ABC  1003               	clrc
 14927  1ABD  0DA1               	rlf	___bmul@multiplicand,f
 14928  1ABE  1003               	clrc
 14929  1ABF  0CA4               	rrf	___bmul@multiplier,f
 14930  1AC0  08A4               	movf	___bmul@multiplier,f
 14931  1AC1  1D03               	skipz
 14932  1AC2  2AB6               	goto	l6345
 14933  1AC3  0823               	movf	___bmul@product,w
 14934  1AC4  0008               	return
 14935  1AC5                     __end_of___bmul:	
 14936                           
 14937                           	psect	text96
 14938  1C5C                     __ptext96:	
 14939 ;; *************** function _setCmd_Status *****************
 14940 ;; Defined at:
 14941 ;;		line 651 in file "../src/Main_B1.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  number          1    wreg     unsigned char 
 14944 ;;  cmd             1    1[BANK0 ] unsigned char 
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;  number          1    3[BANK0 ] unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;		None               void
 14949 ;; Registers used:
 14950 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;Total ram usage:        3 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    5
 14963 ;; This function calls:
 14964 ;;		Nothing
 14965 ;; This function is called by:
 14966 ;;		_setDimmerLights_OnOff
 14967 ;;		_setControl_Lights_Table
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           
 14972                           ;psect for function _setCmd_Status
 14973  1C5C                     _setCmd_Status:	
 14974                           
 14975                           ;incstack = 0
 14976                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14977                           ;setCmd_Status@number stored from wreg
 14978  1C5C  0020               	movlb	0	; select bank0
 14979  1C5D  00A3               	movwf	setCmd_Status@number
 14980                           
 14981                           ;Main_B1.c: 652: switch (number) {
 14982  1C5E  2C6E               	goto	l6883
 14983  1C5F                     l6879:	
 14984                           ;Main_B1.c: 653: case 1:
 14985                           
 14986                           
 14987                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14988  1C5F  0821               	movf	setCmd_Status@cmd,w
 14989  1C60  3A01               	xorlw	1
 14990  1C61  3000               	movlw	0
 14991  1C62  1903               	skipnz
 14992  1C63  3001               	movlw	1
 14993  1C64  00A2               	movwf	??_setCmd_Status
 14994  1C65  0021               	movlb	1	; select bank1
 14995  1C66  084C               	movf	_Cmd^(0+128),w
 14996  1C67  0020               	movlb	0	; select bank0
 14997  1C68  0622               	xorwf	??_setCmd_Status,w
 14998  1C69  39FE               	andlw	-2
 14999  1C6A  0622               	xorwf	??_setCmd_Status,w
 15000  1C6B  0021               	movlb	1	; select bank1
 15001  1C6C  00CC               	movwf	_Cmd^(0+128)
 15002                           
 15003                           ;Main_B1.c: 656: }
 15004                           
 15005                           ;Main_B1.c: 655: break;
 15006  1C6D  0008               	return
 15007  1C6E                     l6883:	
 15008  1C6E  0020               	movlb	0	; select bank0
 15009  1C6F  0823               	movf	setCmd_Status@number,w
 15010                           
 15011                           ; Switch size 1, requested type "space"
 15012                           ; Number of cases is 1, Range of values is 1 to 1
 15013                           ; switch strategies available:
 15014                           ; Name         Instructions Cycles
 15015                           ; simple_byte            4     3 (average)
 15016                           ; direct_byte           11     9 (fixed)
 15017                           ; jumptable            263     9 (fixed)
 15018                           ;	Chosen strategy is simple_byte
 15019  1C70  3A01               	xorlw	1	; case 1
 15020  1C71  1903               	skipnz
 15021  1C72  2C5F               	goto	l6879
 15022  1C73  2C74               	goto	l1702
 15023  1C74                     l1702:	
 15024  1C74  0008               	return
 15025  1C75                     __end_of_setCmd_Status:	
 15026                           
 15027                           	psect	text97
 15028  1B20                     __ptext97:	
 15029 ;; *************** function _getMain_All_LightsStatus *****************
 15030 ;; Defined at:
 15031 ;;		line 373 in file "../src/Main_B1.c"
 15032 ;; Parameters:    Size  Location     Type
 15033 ;;		None
 15034 ;; Auto vars:     Size  Location     Type
 15035 ;;  status          1    1[BANK0 ] unsigned char 
 15036 ;; Return value:  Size  Location     Type
 15037 ;;                  1    wreg      unsigned char 
 15038 ;; Registers used:
 15039 ;;		wreg, status,2, status,0
 15040 ;; Tracked objects:
 15041 ;;		On entry : 0/0
 15042 ;;		On exit  : 0/0
 15043 ;;		Unchanged: 0/0
 15044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;Total ram usage:        1 bytes
 15050 ;; Hardware stack levels used:    1
 15051 ;; Hardware stack levels required when called:    5
 15052 ;; This function calls:
 15053 ;;		Nothing
 15054 ;; This function is called by:
 15055 ;;		_DimmerLights_Main
 15056 ;;		_setDimmerLights_Main
 15057 ;;		_setDimmerLights_OnOff
 15058 ;;		_Flash_Memory_Main
 15059 ;;		_Exception_Main
 15060 ;;		_Load_Main
 15061 ;;		_setTemp_Main
 15062 ;;		_setControl_Lights_Table
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           
 15067                           ;psect for function _getMain_All_LightsStatus
 15068  1B20                     _getMain_All_LightsStatus:	
 15069                           
 15070                           ;Main_B1.c: 374: char status = 0;
 15071                           
 15072                           ;incstack = 0
 15073                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15074  1B20  0020               	movlb	0	; select bank0
 15075  1B21  01A1               	clrf	getMain_All_LightsStatus@status
 15076                           
 15077                           ;Main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15078  1B22  3000               	movlw	0
 15079  1B23  0022               	movlb	2	; select bank2
 15080  1B24  1869               	btfsc	(_DimmerLights1^(0+256)+1),0
 15081  1B25  3001               	movlw	1
 15082  1B26  0020               	movlb	0	; select bank0
 15083  1B27  00A1               	movwf	getMain_All_LightsStatus@status
 15084                           
 15085                           ;Main_B1.c: 394: if (status == 0) {
 15086  1B28  08A1               	movf	getMain_All_LightsStatus@status,f
 15087  1B29  1D03               	skipz
 15088  1B2A  2B31               	goto	l9231
 15089                           
 15090                           ;Main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15091  1B2B  3000               	movlw	0
 15092  1B2C  0023               	movlb	3	; select bank3
 15093  1B2D  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15094  1B2E  3001               	movlw	1
 15095  1B2F  0020               	movlb	0	; select bank0
 15096  1B30  00A1               	movwf	getMain_All_LightsStatus@status
 15097  1B31                     l9231:	
 15098                           
 15099                           ;Main_B1.c: 396: }
 15100                           ;Main_B1.c: 420: return status;
 15101  1B31  0821               	movf	getMain_All_LightsStatus@status,w
 15102  1B32  0008               	return
 15103  1B33                     __end_of_getMain_All_LightsStatus:	
 15104                           
 15105                           	psect	text98
 15106  1733                     __ptext98:	
 15107 ;; *************** function _getDimmerLights_PercentToValue *****************
 15108 ;; Defined at:
 15109 ;;		line 1039 in file "../src/Dimmer_B1.c"
 15110 ;; Parameters:    Size  Location     Type
 15111 ;;  value           1    wreg     unsigned char 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  value           1   63[BANK0 ] unsigned char 
 15114 ;;  i               3   64[BANK0 ] float 
 15115 ;; Return value:  Size  Location     Type
 15116 ;;                  1    wreg      unsigned char 
 15117 ;; Registers used:
 15118 ;;		wreg, status,2, status,0, pclath, cstack
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : 0/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;Total ram usage:        6 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; Hardware stack levels required when called:    7
 15131 ;; This function calls:
 15132 ;;		___awtoft
 15133 ;;		___ftadd
 15134 ;;		___ftdiv
 15135 ;;		___ftmul
 15136 ;;		___ftneg
 15137 ;;		___fttol
 15138 ;; This function is called by:
 15139 ;;		_setDimmerLights_OnOff
 15140 ;;		_setRFSW_AdjControl
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _getDimmerLights_PercentToValue
 15146  1733                     _getDimmerLights_PercentToValue:	
 15147                           
 15148                           ;incstack = 0
 15149                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 15150                           ;getDimmerLights_PercentToValue@value stored from wreg
 15151  1733  0020               	movlb	0	; select bank0
 15152  1734  00DF               	movwf	getDimmerLights_PercentToValue@value
 15153                           
 15154                           ;Dimmer_B1.c: 1047: float i = ((char)(60*0.65)) - ((char)(10*0.65));
 15155  1735  3000               	movlw	0
 15156  1736  00E0               	movwf	getDimmerLights_PercentToValue@i
 15157  1737  3004               	movlw	4
 15158  1738  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15159  1739  3042               	movlw	66
 15160  173A  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15161                           
 15162                           ;Dimmer_B1.c: 1048: i /= 100;
 15163  173B  3000               	movlw	0
 15164  173C  00AF               	movwf	___ftdiv@f2
 15165  173D  30C8               	movlw	200
 15166  173E  00B0               	movwf	___ftdiv@f2+1
 15167  173F  3042               	movlw	66
 15168  1740  00B1               	movwf	___ftdiv@f2+2
 15169  1741  0860               	movf	getDimmerLights_PercentToValue@i,w
 15170  1742  00B2               	movwf	___ftdiv@f1
 15171  1743  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15172  1744  00B3               	movwf	___ftdiv@f1+1
 15173  1745  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15174  1746  00B4               	movwf	___ftdiv@f1+2
 15175  1747  318D  2538  3197   	fcall	___ftdiv
 15176  174A  0020               	movlb	0	; select bank0
 15177  174B  082F               	movf	?___ftdiv,w
 15178  174C  00E0               	movwf	getDimmerLights_PercentToValue@i
 15179  174D  0830               	movf	?___ftdiv+1,w
 15180  174E  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15181  174F  0831               	movf	?___ftdiv+2,w
 15182  1750  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15183                           
 15184                           ;Dimmer_B1.c: 1050: return (char) (((char)(60*0.65)) - ((100 - value) * i));
 15185  1751  085F               	movf	getDimmerLights_PercentToValue@value,w
 15186  1752  00DD               	movwf	??_getDimmerLights_PercentToValue
 15187  1753  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 15188  1754  09DD               	comf	??_getDimmerLights_PercentToValue,f
 15189  1755  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 15190  1756  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 15191  1757  1903               	skipnz
 15192  1758  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 15193  1759  085D               	movf	??_getDimmerLights_PercentToValue,w
 15194  175A  3E64               	addlw	100
 15195  175B  00A9               	movwf	___awtoft@c
 15196  175C  3000               	movlw	0
 15197  175D  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 15198  175E  00AA               	movwf	___awtoft@c+1
 15199  175F  319E  268E  3197   	fcall	___awtoft
 15200  1762  0020               	movlb	0	; select bank0
 15201  1763  0829               	movf	?___awtoft,w
 15202  1764  00B2               	movwf	___ftmul@f2
 15203  1765  082A               	movf	?___awtoft+1,w
 15204  1766  00B3               	movwf	___ftmul@f2+1
 15205  1767  082B               	movf	?___awtoft+2,w
 15206  1768  00B4               	movwf	___ftmul@f2+2
 15207  1769  0860               	movf	getDimmerLights_PercentToValue@i,w
 15208  176A  00AF               	movwf	___ftmul@f1
 15209  176B  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15210  176C  00B0               	movwf	___ftmul@f1+1
 15211  176D  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15212  176E  00B1               	movwf	___ftmul@f1+2
 15213  176F  318E  2691  3197   	fcall	___ftmul
 15214  1772  0020               	movlb	0	; select bank0
 15215  1773  082F               	movf	?___ftmul,w
 15216  1774  00BF               	movwf	___ftneg@f1
 15217  1775  0830               	movf	?___ftmul+1,w
 15218  1776  00C0               	movwf	___ftneg@f1+1
 15219  1777  0831               	movf	?___ftmul+2,w
 15220  1778  00C1               	movwf	___ftneg@f1+2
 15221  1779  3199  21A7  3197   	fcall	___ftneg
 15222  177C  0020               	movlb	0	; select bank0
 15223  177D  083F               	movf	?___ftneg,w
 15224  177E  00C5               	movwf	___ftadd@f2
 15225  177F  0840               	movf	?___ftneg+1,w
 15226  1780  00C6               	movwf	___ftadd@f2+1
 15227  1781  0841               	movf	?___ftneg+2,w
 15228  1782  00C7               	movwf	___ftadd@f2+2
 15229  1783  3000               	movlw	0
 15230  1784  00C2               	movwf	___ftadd@f1
 15231  1785  301C               	movlw	28
 15232  1786  00C3               	movwf	___ftadd@f1+1
 15233  1787  3042               	movlw	66
 15234  1788  00C4               	movwf	___ftadd@f1+2
 15235  1789  3183  2388  3197   	fcall	___ftadd
 15236  178C  0020               	movlb	0	; select bank0
 15237  178D  0842               	movf	?___ftadd,w
 15238  178E  00CF               	movwf	___fttol@f1
 15239  178F  0843               	movf	?___ftadd+1,w
 15240  1790  00D0               	movwf	___fttol@f1+1
 15241  1791  0844               	movf	?___ftadd+2,w
 15242  1792  00D1               	movwf	___fttol@f1+2
 15243  1793  318B  2396         	fcall	___fttol
 15244  1795  0020               	movlb	0	; select bank0
 15245  1796  084F               	movf	?___fttol,w
 15246  1797  0008               	return
 15247  1798                     __end_of_getDimmerLights_PercentToValue:	
 15248                           
 15249                           	psect	text99
 15250  0E91                     __ptext99:	
 15251 ;; *************** function ___ftmul *****************
 15252 ;; Defined at:
 15253 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  f1              3   15[BANK0 ] float 
 15256 ;;  f2              3   18[BANK0 ] float 
 15257 ;; Auto vars:     Size  Location     Type
 15258 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 15259 ;;  sign            1   30[BANK0 ] unsigned char 
 15260 ;;  cntr            1   29[BANK0 ] unsigned char 
 15261 ;;  exp             1   25[BANK0 ] unsigned char 
 15262 ;; Return value:  Size  Location     Type
 15263 ;;                  3   15[BANK0 ] float 
 15264 ;; Registers used:
 15265 ;;		wreg, status,2, status,0, pclath, cstack
 15266 ;; Tracked objects:
 15267 ;;		On entry : 0/0
 15268 ;;		On exit  : 0/0
 15269 ;;		Unchanged: 0/0
 15270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15271 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;Total ram usage:       16 bytes
 15276 ;; Hardware stack levels used:    1
 15277 ;; Hardware stack levels required when called:    6
 15278 ;; This function calls:
 15279 ;;		___ftpack
 15280 ;; This function is called by:
 15281 ;;		_getDimmerLights_PercentToValue
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function ___ftmul
 15287  0E91                     ___ftmul:	
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15291  0E91  0020               	movlb	0	; select bank0
 15292  0E92  082F               	movf	___ftmul@f1,w
 15293  0E93  00B5               	movwf	??___ftmul
 15294  0E94  0830               	movf	___ftmul@f1+1,w
 15295  0E95  00B6               	movwf	??___ftmul+1
 15296  0E96  0831               	movf	___ftmul@f1+2,w
 15297  0E97  00B7               	movwf	??___ftmul+2
 15298  0E98  1003               	clrc
 15299  0E99  0D36               	rlf	??___ftmul+1,w
 15300  0E9A  0D37               	rlf	??___ftmul+2,w
 15301  0E9B  00B8               	movwf	??___ftmul+3
 15302  0E9C  0838               	movf	??___ftmul+3,w
 15303  0E9D  00B9               	movwf	___ftmul@exp
 15304  0E9E  08B9               	movf	___ftmul@exp,f
 15305  0E9F  1D03               	skipz
 15306  0EA0  2EA8               	goto	l6491
 15307  0EA1  3000               	movlw	0
 15308  0EA2  00AF               	movwf	?___ftmul
 15309  0EA3  3000               	movlw	0
 15310  0EA4  00B0               	movwf	?___ftmul+1
 15311  0EA5  3000               	movlw	0
 15312  0EA6  00B1               	movwf	?___ftmul+2
 15313  0EA7  0008               	return
 15314  0EA8                     l6491:	
 15315  0EA8  0832               	movf	___ftmul@f2,w
 15316  0EA9  00B5               	movwf	??___ftmul
 15317  0EAA  0833               	movf	___ftmul@f2+1,w
 15318  0EAB  00B6               	movwf	??___ftmul+1
 15319  0EAC  0834               	movf	___ftmul@f2+2,w
 15320  0EAD  00B7               	movwf	??___ftmul+2
 15321  0EAE  1003               	clrc
 15322  0EAF  0D36               	rlf	??___ftmul+1,w
 15323  0EB0  0D37               	rlf	??___ftmul+2,w
 15324  0EB1  00B8               	movwf	??___ftmul+3
 15325  0EB2  0838               	movf	??___ftmul+3,w
 15326  0EB3  00BE               	movwf	___ftmul@sign
 15327  0EB4  08BE               	movf	___ftmul@sign,f
 15328  0EB5  1D03               	skipz
 15329  0EB6  2EBE               	goto	l6497
 15330  0EB7  3000               	movlw	0
 15331  0EB8  00AF               	movwf	?___ftmul
 15332  0EB9  3000               	movlw	0
 15333  0EBA  00B0               	movwf	?___ftmul+1
 15334  0EBB  3000               	movlw	0
 15335  0EBC  00B1               	movwf	?___ftmul+2
 15336  0EBD  0008               	return
 15337  0EBE                     l6497:	
 15338  0EBE  083E               	movf	___ftmul@sign,w
 15339  0EBF  3E7B               	addlw	123
 15340  0EC0  00B5               	movwf	??___ftmul
 15341  0EC1  0835               	movf	??___ftmul,w
 15342  0EC2  07B9               	addwf	___ftmul@exp,f
 15343  0EC3  082F               	movf	___ftmul@f1,w
 15344  0EC4  00B5               	movwf	??___ftmul
 15345  0EC5  0830               	movf	___ftmul@f1+1,w
 15346  0EC6  00B6               	movwf	??___ftmul+1
 15347  0EC7  0831               	movf	___ftmul@f1+2,w
 15348  0EC8  00B7               	movwf	??___ftmul+2
 15349  0EC9  3010               	movlw	16
 15350  0ECA                     u5615:	
 15351  0ECA  36B7               	lsrf	??___ftmul+2,f
 15352  0ECB  0CB6               	rrf	??___ftmul+1,f
 15353  0ECC  0CB5               	rrf	??___ftmul,f
 15354  0ECD  0B89               	decfsz	9,f
 15355  0ECE  2ECA               	goto	u5615
 15356  0ECF  0835               	movf	??___ftmul,w
 15357  0ED0  00B8               	movwf	??___ftmul+3
 15358  0ED1  0838               	movf	??___ftmul+3,w
 15359  0ED2  00BE               	movwf	___ftmul@sign
 15360  0ED3  0832               	movf	___ftmul@f2,w
 15361  0ED4  00B5               	movwf	??___ftmul
 15362  0ED5  0833               	movf	___ftmul@f2+1,w
 15363  0ED6  00B6               	movwf	??___ftmul+1
 15364  0ED7  0834               	movf	___ftmul@f2+2,w
 15365  0ED8  00B7               	movwf	??___ftmul+2
 15366  0ED9  3010               	movlw	16
 15367  0EDA                     u5625:	
 15368  0EDA  36B7               	lsrf	??___ftmul+2,f
 15369  0EDB  0CB6               	rrf	??___ftmul+1,f
 15370  0EDC  0CB5               	rrf	??___ftmul,f
 15371  0EDD  0B89               	decfsz	9,f
 15372  0EDE  2EDA               	goto	u5625
 15373  0EDF  0835               	movf	??___ftmul,w
 15374  0EE0  00B8               	movwf	??___ftmul+3
 15375  0EE1  0838               	movf	??___ftmul+3,w
 15376  0EE2  06BE               	xorwf	___ftmul@sign,f
 15377  0EE3  3080               	movlw	128
 15378  0EE4  00B5               	movwf	??___ftmul
 15379  0EE5  0835               	movf	??___ftmul,w
 15380  0EE6  05BE               	andwf	___ftmul@sign,f
 15381  0EE7  17B0               	bsf	___ftmul@f1+1,7
 15382  0EE8  17B3               	bsf	___ftmul@f2+1,7
 15383  0EE9  30FF               	movlw	255
 15384  0EEA  05B2               	andwf	___ftmul@f2,f
 15385  0EEB  30FF               	movlw	255
 15386  0EEC  05B3               	andwf	___ftmul@f2+1,f
 15387  0EED  3000               	movlw	0
 15388  0EEE  05B4               	andwf	___ftmul@f2+2,f
 15389  0EEF  3000               	movlw	0
 15390  0EF0  00BA               	movwf	___ftmul@f3_as_product
 15391  0EF1  3000               	movlw	0
 15392  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 15393  0EF3  3000               	movlw	0
 15394  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 15395  0EF5  3007               	movlw	7
 15396  0EF6  00B5               	movwf	??___ftmul
 15397  0EF7  0835               	movf	??___ftmul,w
 15398  0EF8  00BD               	movwf	___ftmul@cntr
 15399  0EF9                     l6509:	
 15400  0EF9  1C2F               	btfss	___ftmul@f1,0
 15401  0EFA  2F01               	goto	l6513
 15402  0EFB  0832               	movf	___ftmul@f2,w
 15403  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 15404  0EFD  0833               	movf	___ftmul@f2+1,w
 15405  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15406  0EFF  0834               	movf	___ftmul@f2+2,w
 15407  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15408  0F01                     l6513:	
 15409  0F01  3001               	movlw	1
 15410  0F02                     u5645:	
 15411  0F02  36B1               	lsrf	___ftmul@f1+2,f
 15412  0F03  0CB0               	rrf	___ftmul@f1+1,f
 15413  0F04  0CAF               	rrf	___ftmul@f1,f
 15414  0F05  0B89               	decfsz	9,f
 15415  0F06  2F02               	goto	u5645
 15416  0F07  3001               	movlw	1
 15417  0F08                     u5655:	
 15418  0F08  35B2               	lslf	___ftmul@f2,f
 15419  0F09  0DB3               	rlf	___ftmul@f2+1,f
 15420  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 15421  0F0B  0B89               	decfsz	9,f
 15422  0F0C  2F08               	goto	u5655
 15423  0F0D  3001               	movlw	1
 15424  0F0E  02BD               	subwf	___ftmul@cntr,f
 15425  0F0F  1D03               	btfss	3,2
 15426  0F10  2EF9               	goto	l6509
 15427  0F11  3009               	movlw	9
 15428  0F12  00B5               	movwf	??___ftmul
 15429  0F13  0835               	movf	??___ftmul,w
 15430  0F14  00BD               	movwf	___ftmul@cntr
 15431  0F15                     l6521:	
 15432  0F15  1C2F               	btfss	___ftmul@f1,0
 15433  0F16  2F1D               	goto	l6525
 15434  0F17  0832               	movf	___ftmul@f2,w
 15435  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 15436  0F19  0833               	movf	___ftmul@f2+1,w
 15437  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15438  0F1B  0834               	movf	___ftmul@f2+2,w
 15439  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15440  0F1D                     l6525:	
 15441  0F1D  3001               	movlw	1
 15442  0F1E                     u5685:	
 15443  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 15444  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 15445  0F20  0CAF               	rrf	___ftmul@f1,f
 15446  0F21  0B89               	decfsz	9,f
 15447  0F22  2F1E               	goto	u5685
 15448  0F23  3001               	movlw	1
 15449  0F24                     u5695:	
 15450  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15451  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15452  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15453  0F27  0B89               	decfsz	9,f
 15454  0F28  2F24               	goto	u5695
 15455  0F29  3001               	movlw	1
 15456  0F2A  02BD               	subwf	___ftmul@cntr,f
 15457  0F2B  1D03               	btfss	3,2
 15458  0F2C  2F15               	goto	l6521
 15459  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15460  0F2E  00A1               	movwf	___ftpack@arg
 15461  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15462  0F30  00A2               	movwf	___ftpack@arg+1
 15463  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15464  0F32  00A3               	movwf	___ftpack@arg+2
 15465  0F33  0839               	movf	___ftmul@exp,w
 15466  0F34  00B5               	movwf	??___ftmul
 15467  0F35  0835               	movf	??___ftmul,w
 15468  0F36  00A4               	movwf	___ftpack@exp
 15469  0F37  083E               	movf	___ftmul@sign,w
 15470  0F38  00B6               	movwf	??___ftmul+1
 15471  0F39  0836               	movf	??___ftmul+1,w
 15472  0F3A  00A5               	movwf	___ftpack@sign
 15473  0F3B  3196  2608         	fcall	___ftpack
 15474  0F3D  0020               	movlb	0	; select bank0
 15475  0F3E  0821               	movf	?___ftpack,w
 15476  0F3F  00AF               	movwf	?___ftmul
 15477  0F40  0822               	movf	?___ftpack+1,w
 15478  0F41  00B0               	movwf	?___ftmul+1
 15479  0F42  0823               	movf	?___ftpack+2,w
 15480  0F43  00B1               	movwf	?___ftmul+2
 15481  0F44  0008               	return
 15482  0F45                     __end_of___ftmul:	
 15483                           
 15484                           	psect	text100
 15485  1A6E                     __ptext100:	
 15486 ;; *************** function _getDelayOff_GO *****************
 15487 ;; Defined at:
 15488 ;;		line 114 in file "../src/DelayOff_B1.c"
 15489 ;; Parameters:    Size  Location     Type
 15490 ;;  sw              1    wreg     unsigned char 
 15491 ;; Auto vars:     Size  Location     Type
 15492 ;;  sw              1    3[BANK0 ] unsigned char 
 15493 ;;  go              1    4[BANK0 ] unsigned char 
 15494 ;; Return value:  Size  Location     Type
 15495 ;;                  1    wreg      unsigned char 
 15496 ;; Registers used:
 15497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15498 ;; Tracked objects:
 15499 ;;		On entry : 0/0
 15500 ;;		On exit  : 0/0
 15501 ;;		Unchanged: 0/0
 15502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;Total ram usage:        2 bytes
 15508 ;; Hardware stack levels used:    1
 15509 ;; Hardware stack levels required when called:    6
 15510 ;; This function calls:
 15511 ;;		_DelayOffPointSelect
 15512 ;; This function is called by:
 15513 ;;		_setDimmerLights_OnOff
 15514 ;; This function uses a non-reentrant model
 15515 ;;
 15516                           
 15517                           
 15518                           ;psect for function _getDelayOff_GO
 15519  1A6E                     _getDelayOff_GO:	
 15520                           
 15521                           ;incstack = 0
 15522                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15523                           ;getDelayOff_GO@sw stored from wreg
 15524  1A6E  0020               	movlb	0	; select bank0
 15525  1A6F  00A3               	movwf	getDelayOff_GO@sw
 15526                           
 15527                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15528  1A70  0823               	movf	getDelayOff_GO@sw,w
 15529  1A71  319B  23E9         	fcall	_DelayOffPointSelect
 15530                           
 15531                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15532  1A73  0021               	movlb	1	; select bank1
 15533  1A74  084D               	movf	_DelayOff^(0+128),w
 15534  1A75  0086               	movwf	6
 15535  1A76  3001               	movlw	1	; select bank2/3
 15536  1A77  0087               	movwf	7
 15537  1A78  3000               	movlw	0
 15538  1A79  1881               	btfsc	1,1
 15539  1A7A  3001               	movlw	1
 15540  1A7B  0020               	movlb	0	; select bank0
 15541  1A7C  00A4               	movwf	getDelayOff_GO@go
 15542                           
 15543                           ;DelayOff_B1.c: 117: return go;
 15544  1A7D  0824               	movf	getDelayOff_GO@go,w
 15545  1A7E  0008               	return
 15546  1A7F                     __end_of_getDelayOff_GO:	
 15547                           
 15548                           	psect	text101
 15549  1AA1                     __ptext101:	
 15550 ;; *************** function _getCmd_Status *****************
 15551 ;; Defined at:
 15552 ;;		line 659 in file "../src/Main_B1.c"
 15553 ;; Parameters:    Size  Location     Type
 15554 ;;  number          1    wreg     unsigned char 
 15555 ;; Auto vars:     Size  Location     Type
 15556 ;;  number          1    1[BANK0 ] unsigned char 
 15557 ;;  cmd             1    2[BANK0 ] unsigned char 
 15558 ;; Return value:  Size  Location     Type
 15559 ;;                  1    wreg      unsigned char 
 15560 ;; Registers used:
 15561 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15562 ;; Tracked objects:
 15563 ;;		On entry : 0/0
 15564 ;;		On exit  : 0/0
 15565 ;;		Unchanged: 0/0
 15566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;Total ram usage:        2 bytes
 15572 ;; Hardware stack levels used:    1
 15573 ;; Hardware stack levels required when called:    5
 15574 ;; This function calls:
 15575 ;;		Nothing
 15576 ;; This function is called by:
 15577 ;;		_setDimmerLights_OnOff
 15578 ;; This function uses a non-reentrant model
 15579 ;;
 15580                           
 15581                           
 15582                           ;psect for function _getCmd_Status
 15583  1AA1                     _getCmd_Status:	
 15584                           
 15585                           ;incstack = 0
 15586                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15587                           ;getCmd_Status@number stored from wreg
 15588  1AA1  0020               	movlb	0	; select bank0
 15589  1AA2  00A1               	movwf	getCmd_Status@number
 15590                           
 15591                           ;Main_B1.c: 660: char cmd = 0;
 15592  1AA3  01A2               	clrf	getCmd_Status@cmd
 15593                           
 15594                           ;Main_B1.c: 661: switch (number) {
 15595  1AA4  2AAC               	goto	l7183
 15596  1AA5                     l7179:	
 15597                           ;Main_B1.c: 662: case 1:
 15598                           
 15599                           
 15600                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15601  1AA5  3000               	movlw	0
 15602  1AA6  0021               	movlb	1	; select bank1
 15603  1AA7  184C               	btfsc	_Cmd^(0+128),0
 15604  1AA8  3001               	movlw	1
 15605  1AA9  0020               	movlb	0	; select bank0
 15606  1AAA  00A2               	movwf	getCmd_Status@cmd
 15607                           
 15608                           ;Main_B1.c: 665: }
 15609                           
 15610                           ;Main_B1.c: 664: break;
 15611  1AAB  2AB1               	goto	l7185
 15612  1AAC                     l7183:	
 15613  1AAC  0821               	movf	getCmd_Status@number,w
 15614                           
 15615                           ; Switch size 1, requested type "space"
 15616                           ; Number of cases is 1, Range of values is 1 to 1
 15617                           ; switch strategies available:
 15618                           ; Name         Instructions Cycles
 15619                           ; simple_byte            4     3 (average)
 15620                           ; direct_byte           11     9 (fixed)
 15621                           ; jumptable            263     9 (fixed)
 15622                           ;	Chosen strategy is simple_byte
 15623  1AAD  3A01               	xorlw	1	; case 1
 15624  1AAE  1903               	skipnz
 15625  1AAF  2AA5               	goto	l7179
 15626  1AB0  2AB1               	goto	l7185
 15627  1AB1                     l7185:	
 15628                           
 15629                           ;Main_B1.c: 666: return cmd;
 15630  1AB1  0822               	movf	getCmd_Status@cmd,w
 15631  1AB2  0008               	return
 15632  1AB3                     __end_of_getCmd_Status:	
 15633                           
 15634                           	psect	text102
 15635  13AE                     __ptext102:	
 15636 ;; *************** function _setDimmerLights_Dimming *****************
 15637 ;; Defined at:
 15638 ;;		line 883 in file "../src/Dimmer_B1.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  lights          1    wreg     unsigned char 
 15641 ;;  status          1   75[BANK0 ] unsigned char 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  lights          1   77[BANK0 ] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;		None               void
 15646 ;; Registers used:
 15647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15653 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15657 ;;Total ram usage:        3 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    8
 15660 ;; This function calls:
 15661 ;;		_getDimmerIntr_DimmingValue
 15662 ;;		_getDimmerLights_ValueToPercent
 15663 ;;		_setBuz
 15664 ;;		_setDimmerIntr_Dimming_Sw
 15665 ;;		_setDimmerIntr_MaxmumValue
 15666 ;;		_setDimmerLights_Line
 15667 ;;		_setProductData
 15668 ;;		_setRF_DimmerLights
 15669 ;;		_setRF_TransceiveGO
 15670 ;;		_setTxData
 15671 ;; This function is called by:
 15672 ;;		_setDimmerLights_Main
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           
 15677                           ;psect for function _setDimmerLights_Dimming
 15678  13AE                     _setDimmerLights_Dimming:	
 15679                           
 15680                           ;incstack = 0
 15681                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15682                           ;setDimmerLights_Dimming@lights stored from wreg
 15683  13AE  0020               	movlb	0	; select bank0
 15684  13AF  00ED               	movwf	setDimmerLights_Dimming@lights
 15685                           
 15686                           ;Dimmer_B1.c: 884: if (status == 1) {
 15687  13B0  086B               	movf	setDimmerLights_Dimming@status,w
 15688  13B1  3A01               	xorlw	1
 15689  13B2  1D03               	skipz
 15690  13B3  2BC7               	goto	l9401
 15691                           
 15692                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15693  13B4  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15694  13B5  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15695  13B6  086D               	movf	setDimmerLights_Dimming@lights,w
 15696  13B7  319F  2748  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15697                           
 15698                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15699  13BA  3000               	movlw	0
 15700  13BB  319B  230D  3193   	fcall	_setRF_TransceiveGO
 15701                           
 15702                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15703  13BE  3064               	movlw	100
 15704  13BF  0020               	movlb	0	; select bank0
 15705  13C0  00AA               	movwf	setBuz@time
 15706  13C1  3000               	movlw	0
 15707  13C2  00AB               	movwf	setBuz@time+1
 15708  13C3  3001               	movlw	1
 15709  13C4  3194  24F8         	fcall	_setBuz
 15710                           
 15711                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15712  13C6  0008               	return
 15713  13C7                     l9401:	
 15714  13C7  0020               	movlb	0	; select bank0
 15715  13C8  08EB               	movf	setDimmerLights_Dimming@status,f
 15716  13C9  1D03               	skipz
 15717  13CA  0008               	return
 15718                           
 15719                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15720  13CB  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15721  13CC  086D               	movf	setDimmerLights_Dimming@lights,w
 15722  13CD  319F  2748  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15723                           
 15724                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15725  13D0  0022               	movlb	2	; select bank2
 15726  13D1  1139               	bcf	_Dimmer^(0+256),2
 15727                           
 15728                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15729  13D2  0020               	movlb	0	; select bank0
 15730  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15731  13D4  319D  2514  3193   	fcall	_setDimmerLights_Line
 15732                           
 15733                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15734  13D7  0020               	movlb	0	; select bank0
 15735  13D8  086D               	movf	setDimmerLights_Dimming@lights,w
 15736  13D9  319B  23D3  3193   	fcall	_getDimmerIntr_DimmingValue
 15737  13DC  0020               	movlb	0	; select bank0
 15738  13DD  00EC               	movwf	??_setDimmerLights_Dimming
 15739  13DE  086C               	movf	??_setDimmerLights_Dimming,w
 15740  13DF  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15741  13E0  086D               	movf	setDimmerLights_Dimming@lights,w
 15742  13E1  319C  2417  3193   	fcall	_setDimmerIntr_MaxmumValue
 15743                           
 15744                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15745  13E4  0020               	movlb	0	; select bank0
 15746  13E5  086D               	movf	setDimmerLights_Dimming@lights,w
 15747  13E6  319B  23D3  3193   	fcall	_getDimmerIntr_DimmingValue
 15748  13E9  3196  2669  3193   	fcall	_getDimmerLights_ValueToPercent
 15749  13EC  0020               	movlb	0	; select bank0
 15750  13ED  00EC               	movwf	??_setDimmerLights_Dimming
 15751  13EE  086C               	movf	??_setDimmerLights_Dimming,w
 15752  13EF  00E3               	movwf	setProductData@value
 15753  13F0  086D               	movf	setDimmerLights_Dimming@lights,w
 15754  13F1  3E14               	addlw	20
 15755  13F2  3199  21FC  3193   	fcall	_setProductData
 15756                           
 15757                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15758  13F5  0020               	movlb	0	; select bank0
 15759  13F6  01E6               	clrf	setRF_DimmerLights@on
 15760  13F7  0AE6               	incf	setRF_DimmerLights@on,f
 15761  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15762  13F9  3196  26CE  3193   	fcall	_setRF_DimmerLights
 15763                           
 15764                           ;Dimmer_B1.c: 911: setTxData();
 15765  13FC  318F  2745         	fcall	_setTxData
 15766  13FE  0008               	return
 15767  13FF                     __end_of_setDimmerLights_Dimming:	
 15768                           
 15769                           	psect	text103
 15770  0F45                     __ptext103:	
 15771 ;; *************** function _setTxData *****************
 15772 ;; Defined at:
 15773 ;;		line 183 in file "../src/RF_Control_B1.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;		None
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;  i               1    0        unsigned char 
 15778 ;; Return value:  Size  Location     Type
 15779 ;;		None               void
 15780 ;; Registers used:
 15781 ;;		wreg, fsr1l, fsr1h, status,2
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;Total ram usage:        1 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    5
 15794 ;; This function calls:
 15795 ;;		Nothing
 15796 ;; This function is called by:
 15797 ;;		_setDimmerLights_OnOff
 15798 ;;		_setDimmerLights_Dimming
 15799 ;;		_getRxData
 15800 ;;		_setControl_Lights_Table
 15801 ;;		_setRFSW_Control
 15802 ;;		_setRFSW_AdjControl
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           
 15807                           ;psect for function _setTxData
 15808  0F45                     _setTxData:	
 15809                           
 15810                           ;RF_Control_B1.c: 184: char i;
 15811                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15812                           
 15813                           ;incstack = 0
 15814                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15815  0F45  0021               	movlb	1	; select bank1
 15816  0F46  1C20               	btfss	_RF1^(0+128),0
 15817  0F47  0008               	return
 15818                           
 15819                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15820  0F48  1520               	bsf	_RF1^(0+128),2
 15821                           
 15822                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15823  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15824  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15825                           
 15826                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15827  0F4B  3063               	movlw	99
 15828  0F4C  0020               	movlb	0	; select bank0
 15829  0F4D  00A1               	movwf	??_setTxData
 15830  0F4E  0821               	movf	??_setTxData,w
 15831  0F4F  0023               	movlb	3	; select bank3
 15832  0F50  00A0               	movwf	_RF_Data^(0+384)
 15833                           
 15834                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15835  0F51  3002               	movlw	2
 15836  0F52  0020               	movlb	0	; select bank0
 15837  0F53  00A1               	movwf	??_setTxData
 15838  0F54  0821               	movf	??_setTxData,w
 15839  0F55  0023               	movlb	3	; select bank3
 15840  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15841                           
 15842                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15843  0F57  0021               	movlb	1	; select bank1
 15844  0F58  086D               	movf	_product^(0+128),w
 15845  0F59  0086               	movwf	6
 15846  0F5A  3002               	movlw	2	; select bank4/5
 15847  0F5B  0087               	movwf	7
 15848  0F5C  3002               	movlw	2	; select bank4/5
 15849  0F5D  3F42               	moviw [2]fsr1
 15850  0F5E  0023               	movlb	3	; select bank3
 15851  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15852                           
 15853                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15854  0F60  0021               	movlb	1	; select bank1
 15855  0F61  086D               	movf	_product^(0+128),w
 15856  0F62  0086               	movwf	6
 15857  0F63  3002               	movlw	2	; select bank4/5
 15858  0F64  0087               	movwf	7
 15859  0F65  3002               	movlw	2	; select bank4/5
 15860  0F66  3F43               	moviw [3]fsr1
 15861  0F67  0023               	movlb	3	; select bank3
 15862  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15863                           
 15864                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15865  0F69  0021               	movlb	1	; select bank1
 15866  0F6A  086D               	movf	_product^(0+128),w
 15867  0F6B  0086               	movwf	6
 15868  0F6C  3002               	movlw	2	; select bank4/5
 15869  0F6D  0087               	movwf	7
 15870  0F6E  3002               	movlw	2	; select bank4/5
 15871  0F6F  3F44               	moviw [4]fsr1
 15872  0F70  0023               	movlb	3	; select bank3
 15873  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15874                           
 15875                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15876  0F72  0021               	movlb	1	; select bank1
 15877  0F73  086D               	movf	_product^(0+128),w
 15878  0F74  0086               	movwf	6
 15879  0F75  3002               	movlw	2	; select bank4/5
 15880  0F76  0087               	movwf	7
 15881  0F77  3002               	movlw	2	; select bank4/5
 15882  0F78  3F45               	moviw [5]fsr1
 15883  0F79  0023               	movlb	3	; select bank3
 15884  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15885                           
 15886                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15887  0F7B  0021               	movlb	1	; select bank1
 15888  0F7C  086D               	movf	_product^(0+128),w
 15889  0F7D  0086               	movwf	6
 15890  0F7E  3002               	movlw	2	; select bank4/5
 15891  0F7F  0087               	movwf	7
 15892  0F80  3002               	movlw	2	; select bank4/5
 15893  0F81  3F46               	moviw [6]fsr1
 15894  0F82  0023               	movlb	3	; select bank3
 15895  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15896                           
 15897                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15898  0F84  0021               	movlb	1	; select bank1
 15899  0F85  086D               	movf	_product^(0+128),w
 15900  0F86  0086               	movwf	6
 15901  0F87  3002               	movlw	2	; select bank4/5
 15902  0F88  0087               	movwf	7
 15903  0F89  3002               	movlw	2	; select bank4/5
 15904  0F8A  3F47               	moviw [7]fsr1
 15905  0F8B  0023               	movlb	3	; select bank3
 15906  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15907                           
 15908                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15909  0F8D  0021               	movlb	1	; select bank1
 15910  0F8E  086D               	movf	_product^(0+128),w
 15911  0F8F  0086               	movwf	6
 15912  0F90  3002               	movlw	2	; select bank4/5
 15913  0F91  0087               	movwf	7
 15914  0F92  3002               	movlw	2	; select bank4/5
 15915  0F93  3F48               	moviw [8]fsr1
 15916  0F94  0023               	movlb	3	; select bank3
 15917  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15918                           
 15919                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15920  0F96  0021               	movlb	1	; select bank1
 15921  0F97  086D               	movf	_product^(0+128),w
 15922  0F98  0086               	movwf	6
 15923  0F99  3002               	movlw	2	; select bank4/5
 15924  0F9A  0087               	movwf	7
 15925  0F9B  3002               	movlw	2	; select bank4/5
 15926  0F9C  3F49               	moviw [9]fsr1
 15927  0F9D  0023               	movlb	3	; select bank3
 15928  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15929                           
 15930                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15931  0F9F  0021               	movlb	1	; select bank1
 15932  0FA0  086D               	movf	_product^(0+128),w
 15933  0FA1  0086               	movwf	6
 15934  0FA2  3002               	movlw	2	; select bank4/5
 15935  0FA3  0087               	movwf	7
 15936  0FA4  3002               	movlw	2	; select bank4/5
 15937  0FA5  3F4A               	moviw [10]fsr1
 15938  0FA6  0023               	movlb	3	; select bank3
 15939  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15940                           
 15941                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15942  0FA8  0021               	movlb	1	; select bank1
 15943  0FA9  086D               	movf	_product^(0+128),w
 15944  0FAA  0086               	movwf	6
 15945  0FAB  3002               	movlw	2	; select bank4/5
 15946  0FAC  0087               	movwf	7
 15947  0FAD  3002               	movlw	2	; select bank4/5
 15948  0FAE  3F4B               	moviw [11]fsr1
 15949  0FAF  0023               	movlb	3	; select bank3
 15950  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15951                           
 15952                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15953  0FB1  0021               	movlb	1	; select bank1
 15954  0FB2  086D               	movf	_product^(0+128),w
 15955  0FB3  0086               	movwf	6
 15956  0FB4  3002               	movlw	2	; select bank4/5
 15957  0FB5  0087               	movwf	7
 15958  0FB6  3002               	movlw	2	; select bank4/5
 15959  0FB7  3F4C               	moviw [12]fsr1
 15960  0FB8  0023               	movlb	3	; select bank3
 15961  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15962                           
 15963                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15964  0FBA  0021               	movlb	1	; select bank1
 15965  0FBB  086D               	movf	_product^(0+128),w
 15966  0FBC  0086               	movwf	6
 15967  0FBD  3002               	movlw	2	; select bank4/5
 15968  0FBE  0087               	movwf	7
 15969  0FBF  3002               	movlw	2	; select bank4/5
 15970  0FC0  3F4D               	moviw [13]fsr1
 15971  0FC1  0023               	movlb	3	; select bank3
 15972  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15973                           
 15974                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15975  0FC3  0021               	movlb	1	; select bank1
 15976  0FC4  086D               	movf	_product^(0+128),w
 15977  0FC5  0086               	movwf	6
 15978  0FC6  3002               	movlw	2	; select bank4/5
 15979  0FC7  0087               	movwf	7
 15980  0FC8  3002               	movlw	2	; select bank4/5
 15981  0FC9  3F4E               	moviw [14]fsr1
 15982  0FCA  0023               	movlb	3	; select bank3
 15983  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15984                           
 15985                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15986  0FCC  0021               	movlb	1	; select bank1
 15987  0FCD  086D               	movf	_product^(0+128),w
 15988  0FCE  0086               	movwf	6
 15989  0FCF  3002               	movlw	2	; select bank4/5
 15990  0FD0  0087               	movwf	7
 15991  0FD1  3002               	movlw	2	; select bank4/5
 15992  0FD2  3F4F               	moviw [15]fsr1
 15993  0FD3  0023               	movlb	3	; select bank3
 15994  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15995                           
 15996                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15997  0FD5  0021               	movlb	1	; select bank1
 15998  0FD6  086D               	movf	_product^(0+128),w
 15999  0FD7  0086               	movwf	6
 16000  0FD8  3002               	movlw	2	; select bank4/5
 16001  0FD9  0087               	movwf	7
 16002  0FDA  3002               	movlw	2	; select bank4/5
 16003  0FDB  3F50               	moviw [16]fsr1
 16004  0FDC  0023               	movlb	3	; select bank3
 16005  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 16006                           
 16007                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16008  0FDE  0021               	movlb	1	; select bank1
 16009  0FDF  086D               	movf	_product^(0+128),w
 16010  0FE0  0086               	movwf	6
 16011  0FE1  3002               	movlw	2	; select bank4/5
 16012  0FE2  0087               	movwf	7
 16013  0FE3  3002               	movlw	2	; select bank4/5
 16014  0FE4  3F51               	moviw [17]fsr1
 16015  0FE5  0023               	movlb	3	; select bank3
 16016  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 16017                           
 16018                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16019  0FE7  0021               	movlb	1	; select bank1
 16020  0FE8  086D               	movf	_product^(0+128),w
 16021  0FE9  0086               	movwf	6
 16022  0FEA  3002               	movlw	2	; select bank4/5
 16023  0FEB  0087               	movwf	7
 16024  0FEC  3002               	movlw	2	; select bank4/5
 16025  0FED  3F52               	moviw [18]fsr1
 16026  0FEE  0023               	movlb	3	; select bank3
 16027  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 16028                           
 16029                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16030  0FF0  0021               	movlb	1	; select bank1
 16031  0FF1  086D               	movf	_product^(0+128),w
 16032  0FF2  0086               	movwf	6
 16033  0FF3  3002               	movlw	2	; select bank4/5
 16034  0FF4  0087               	movwf	7
 16035  0FF5  3002               	movlw	2	; select bank4/5
 16036  0FF6  3F53               	moviw [19]fsr1
 16037  0FF7  0023               	movlb	3	; select bank3
 16038  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 16039                           
 16040                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16041  0FF9  30D2               	movlw	210
 16042  0FFA  0020               	movlb	0	; select bank0
 16043  0FFB  00A1               	movwf	??_setTxData
 16044  0FFC  0821               	movf	??_setTxData,w
 16045  0FFD  0023               	movlb	3	; select bank3
 16046  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 16047  0FFF  0008               	return
 16048  1000                     __end_of_setTxData:	
 16049                           
 16050                           	psect	text104
 16051  1B0D                     __ptext104:	
 16052 ;; *************** function _setRF_TransceiveGO *****************
 16053 ;; Defined at:
 16054 ;;		line 461 in file "../src/RF_Control_B1.c"
 16055 ;; Parameters:    Size  Location     Type
 16056 ;;  command         1    wreg     unsigned char 
 16057 ;; Auto vars:     Size  Location     Type
 16058 ;;  command         1    2[BANK0 ] unsigned char 
 16059 ;; Return value:  Size  Location     Type
 16060 ;;		None               void
 16061 ;; Registers used:
 16062 ;;		wreg, status,2, status,0
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16072 ;;Total ram usage:        2 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:    5
 16075 ;; This function calls:
 16076 ;;		Nothing
 16077 ;; This function is called by:
 16078 ;;		_setDimmerLights_Dimming
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           
 16083                           ;psect for function _setRF_TransceiveGO
 16084  1B0D                     _setRF_TransceiveGO:	
 16085                           
 16086                           ;incstack = 0
 16087                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16088                           ;setRF_TransceiveGO@command stored from wreg
 16089  1B0D  0020               	movlb	0	; select bank0
 16090  1B0E  00A2               	movwf	setRF_TransceiveGO@command
 16091                           
 16092                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16093  1B0F  0822               	movf	setRF_TransceiveGO@command,w
 16094  1B10  3A01               	xorlw	1
 16095  1B11  3000               	movlw	0
 16096  1B12  1903               	skipnz
 16097  1B13  3001               	movlw	1
 16098  1B14  00A1               	movwf	??_setRF_TransceiveGO
 16099  1B15  0DA1               	rlf	??_setRF_TransceiveGO,f
 16100  1B16  0DA1               	rlf	??_setRF_TransceiveGO,f
 16101  1B17  0021               	movlb	1	; select bank1
 16102  1B18  0820               	movf	_RF1^(0+128),w
 16103  1B19  0020               	movlb	0	; select bank0
 16104  1B1A  0621               	xorwf	??_setRF_TransceiveGO,w
 16105  1B1B  39FB               	andlw	-5
 16106  1B1C  0621               	xorwf	??_setRF_TransceiveGO,w
 16107  1B1D  0021               	movlb	1	; select bank1
 16108  1B1E  00A0               	movwf	_RF1^(0+128)
 16109  1B1F  0008               	return
 16110  1B20                     __end_of_setRF_TransceiveGO:	
 16111                           
 16112                           	psect	text105
 16113  16CE                     __ptext105:	
 16114 ;; *************** function _setRF_DimmerLights *****************
 16115 ;; Defined at:
 16116 ;;		line 446 in file "../src/RF_Control_B1.c"
 16117 ;; Parameters:    Size  Location     Type
 16118 ;;  lights          1    wreg     unsigned char 
 16119 ;;  on              1   70[BANK0 ] unsigned char 
 16120 ;; Auto vars:     Size  Location     Type
 16121 ;;  lights          1   74[BANK0 ] unsigned char 
 16122 ;;  status          1   73[BANK0 ] unsigned char 
 16123 ;; Return value:  Size  Location     Type
 16124 ;;		None               void
 16125 ;; Registers used:
 16126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16127 ;; Tracked objects:
 16128 ;;		On entry : 0/0
 16129 ;;		On exit  : 0/0
 16130 ;;		Unchanged: 0/0
 16131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16132 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;Total ram usage:        5 bytes
 16137 ;; Hardware stack levels used:    1
 16138 ;; Hardware stack levels required when called:    6
 16139 ;; This function calls:
 16140 ;;		_setProductData
 16141 ;; This function is called by:
 16142 ;;		_setDimmerLights_OnOff
 16143 ;;		_setDimmerLights_Dimming
 16144 ;;		_setRFSW_Control
 16145 ;; This function uses a non-reentrant model
 16146 ;;
 16147                           
 16148                           
 16149                           ;psect for function _setRF_DimmerLights
 16150  16CE                     _setRF_DimmerLights:	
 16151                           
 16152                           ;incstack = 0
 16153                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16154                           ;setRF_DimmerLights@lights stored from wreg
 16155  16CE  0020               	movlb	0	; select bank0
 16156  16CF  00EA               	movwf	setRF_DimmerLights@lights
 16157                           
 16158                           ;RF_Control_B1.c: 447: char status = 1;
 16159  16D0  01E9               	clrf	setRF_DimmerLights@status
 16160  16D1  0AE9               	incf	setRF_DimmerLights@status,f
 16161                           
 16162                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 16163  16D2  086A               	movf	setRF_DimmerLights@lights,w
 16164  16D3  3EFF               	addlw	-1
 16165  16D4  0A89               	incf	9,f
 16166  16D5  2ED8               	goto	u10200
 16167  16D6                     u10205:	
 16168  16D6  1003               	clrc
 16169  16D7  0DE9               	rlf	setRF_DimmerLights@status,f
 16170  16D8                     u10200:	
 16171  16D8  3EFF               	addlw	-1
 16172  16D9  1D03               	skipz
 16173  16DA  2ED6               	goto	u10205
 16174                           
 16175                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 16176  16DB  086A               	movf	setRF_DimmerLights@lights,w
 16177  16DC  00E7               	movwf	??_setRF_DimmerLights
 16178  16DD  0867               	movf	??_setRF_DimmerLights,w
 16179  16DE  00E3               	movwf	setProductData@value
 16180  16DF  300B               	movlw	11
 16181  16E0  3199  21FC  3196   	fcall	_setProductData
 16182                           
 16183                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 16184  16E3  0020               	movlb	0	; select bank0
 16185  16E4  086A               	movf	setRF_DimmerLights@lights,w
 16186  16E5  3E1A               	addlw	26
 16187  16E6  0021               	movlb	1	; select bank1
 16188  16E7  076D               	addwf	_product^(0+128),w
 16189  16E8  0020               	movlb	0	; select bank0
 16190  16E9  00E7               	movwf	??_setRF_DimmerLights
 16191  16EA  0867               	movf	??_setRF_DimmerLights,w
 16192  16EB  0086               	movwf	6
 16193  16EC  3002               	movlw	2	; select bank4/5
 16194  16ED  0087               	movwf	7
 16195  16EE  0801               	movf	1,w
 16196  16EF  00E8               	movwf	??_setRF_DimmerLights+1
 16197  16F0  0868               	movf	??_setRF_DimmerLights+1,w
 16198  16F1  00E3               	movwf	setProductData@value
 16199  16F2  3011               	movlw	17
 16200  16F3  3199  21FC  3196   	fcall	_setProductData
 16201                           
 16202                           ;RF_Control_B1.c: 451: if (on == 1) {
 16203  16F6  0020               	movlb	0	; select bank0
 16204  16F7  0866               	movf	setRF_DimmerLights@on,w
 16205  16F8  3A01               	xorlw	1
 16206  16F9  1D03               	skipz
 16207  16FA  2F1D               	goto	l9221
 16208                           
 16209                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 16210  16FB  086A               	movf	setRF_DimmerLights@lights,w
 16211  16FC  3E14               	addlw	20
 16212  16FD  0021               	movlb	1	; select bank1
 16213  16FE  076D               	addwf	_product^(0+128),w
 16214  16FF  0020               	movlb	0	; select bank0
 16215  1700  00E7               	movwf	??_setRF_DimmerLights
 16216  1701  0867               	movf	??_setRF_DimmerLights,w
 16217  1702  0086               	movwf	6
 16218  1703  3002               	movlw	2	; select bank4/5
 16219  1704  0087               	movwf	7
 16220  1705  0801               	movf	1,w
 16221  1706  00E8               	movwf	??_setRF_DimmerLights+1
 16222  1707  0868               	movf	??_setRF_DimmerLights+1,w
 16223  1708  00E3               	movwf	setProductData@value
 16224  1709  3009               	movlw	9
 16225  170A  3199  21FC  3196   	fcall	_setProductData
 16226                           
 16227                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 16228  170D  0021               	movlb	1	; select bank1
 16229  170E  086D               	movf	_product^(0+128),w
 16230  170F  3E0F               	addlw	15
 16231  1710  0086               	movwf	6
 16232  1711  3002               	movlw	2	; select bank4/5
 16233  1712  0087               	movwf	7
 16234  1713  0801               	movf	1,w
 16235  1714  0020               	movlb	0	; select bank0
 16236  1715  0469               	iorwf	setRF_DimmerLights@status,w
 16237  1716  00E7               	movwf	??_setRF_DimmerLights
 16238  1717  0867               	movf	??_setRF_DimmerLights,w
 16239  1718  00E3               	movwf	setProductData@value
 16240  1719  300F               	movlw	15
 16241  171A  3199  21FC         	fcall	_setProductData
 16242                           
 16243                           ;RF_Control_B1.c: 454: } else {
 16244  171C  0008               	return
 16245  171D                     l9221:	
 16246                           
 16247                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 16248  171D  0020               	movlb	0	; select bank0
 16249  171E  01E3               	clrf	setProductData@value
 16250  171F  3009               	movlw	9
 16251  1720  3199  21FC  3196   	fcall	_setProductData
 16252                           
 16253                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 16254  1723  0021               	movlb	1	; select bank1
 16255  1724  086D               	movf	_product^(0+128),w
 16256  1725  3E0F               	addlw	15
 16257  1726  0086               	movwf	6
 16258  1727  3002               	movlw	2	; select bank4/5
 16259  1728  0087               	movwf	7
 16260  1729  0020               	movlb	0	; select bank0
 16261  172A  0969               	comf	setRF_DimmerLights@status,w
 16262  172B  0501               	andwf	1,w
 16263  172C  00E7               	movwf	??_setRF_DimmerLights
 16264  172D  0867               	movf	??_setRF_DimmerLights,w
 16265  172E  00E3               	movwf	setProductData@value
 16266  172F  300F               	movlw	15
 16267  1730  3199  21FC         	fcall	_setProductData
 16268  1732  0008               	return
 16269  1733                     __end_of_setRF_DimmerLights:	
 16270                           
 16271                           	psect	text106
 16272  1D14                     __ptext106:	
 16273 ;; *************** function _setDimmerLights_Line *****************
 16274 ;; Defined at:
 16275 ;;		line 955 in file "../src/Dimmer_B1.c"
 16276 ;; Parameters:    Size  Location     Type
 16277 ;;  lights          1    wreg     unsigned char 
 16278 ;; Auto vars:     Size  Location     Type
 16279 ;;  lights          1    1[BANK0 ] unsigned char 
 16280 ;; Return value:  Size  Location     Type
 16281 ;;		None               void
 16282 ;; Registers used:
 16283 ;;		wreg
 16284 ;; Tracked objects:
 16285 ;;		On entry : 0/0
 16286 ;;		On exit  : 0/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        1 bytes
 16294 ;; Hardware stack levels used:    1
 16295 ;; Hardware stack levels required when called:    5
 16296 ;; This function calls:
 16297 ;;		Nothing
 16298 ;; This function is called by:
 16299 ;;		_setDimmerLights_OnOff
 16300 ;;		_setDimmerLights_Dimming
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           
 16305                           ;psect for function _setDimmerLights_Line
 16306  1D14                     _setDimmerLights_Line:	
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in _setDimmerLights_Line: [wreg]
 16310                           ;setDimmerLights_Line@lights stored from wreg
 16311  1D14  0020               	movlb	0	; select bank0
 16312  1D15  00A1               	movwf	setDimmerLights_Line@lights
 16313                           
 16314                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 16315  1D16  0022               	movlb	2	; select bank2
 16316  1D17  14B9               	bsf	_Dimmer^(0+256),1
 16317                           
 16318                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 16319  1D18  10E9               	bcf	(_DimmerLights1^(0+256)+1),1
 16320                           
 16321                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 16322  1D19  0020               	movlb	0	; select bank0
 16323  1D1A  0821               	movf	setDimmerLights_Line@lights,w
 16324  1D1B  3A01               	xorlw	1
 16325  1D1C  1D03               	skipz
 16326  1D1D  2D23               	goto	l905
 16327  1D1E  0821               	movf	setDimmerLights_Line@lights,w
 16328  1D1F  1903               	btfsc	3,2
 16329  1D20  2D23               	goto	l905
 16330                           
 16331                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 16332  1D21  0022               	movlb	2	; select bank2
 16333  1D22  14E9               	bsf	(_DimmerLights1^(0+256)+1),1
 16334  1D23                     l905:	
 16335                           
 16336                           ;Dimmer_B1.c: 961: }
 16337                           ;Dimmer_B1.c: 964: DimmerLights2.Line = 0;
 16338  1D23  0023               	movlb	3	; select bank3
 16339  1D24  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 16340                           
 16341                           ;Dimmer_B1.c: 965: if (lights == 2 && lights != 0) {
 16342  1D25  0020               	movlb	0	; select bank0
 16343  1D26  0821               	movf	setDimmerLights_Line@lights,w
 16344  1D27  3A02               	xorlw	2
 16345  1D28  1D03               	skipz
 16346  1D29  0008               	return
 16347  1D2A  0821               	movf	setDimmerLights_Line@lights,w
 16348  1D2B  1903               	btfsc	3,2
 16349  1D2C  0008               	return
 16350                           
 16351                           ;Dimmer_B1.c: 966: DimmerLights2.Line = 1;
 16352  1D2D  0023               	movlb	3	; select bank3
 16353  1D2E  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16354  1D2F  0020               	movlb	0	; select bank0
 16355  1D30  0008               	return
 16356  1D31                     __end_of_setDimmerLights_Line:	
 16357                           
 16358                           	psect	text107
 16359  1C17                     __ptext107:	
 16360 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16361 ;; Defined at:
 16362 ;;		line 89 in file "../src/Dimmer_B1.c"
 16363 ;; Parameters:    Size  Location     Type
 16364 ;;  lights          1    wreg     unsigned char 
 16365 ;;  value           1   67[BANK0 ] unsigned char 
 16366 ;; Auto vars:     Size  Location     Type
 16367 ;;  lights          1   69[BANK0 ] unsigned char 
 16368 ;; Return value:  Size  Location     Type
 16369 ;;		None               void
 16370 ;; Registers used:
 16371 ;;		wreg
 16372 ;; Tracked objects:
 16373 ;;		On entry : 0/0
 16374 ;;		On exit  : 0/0
 16375 ;;		Unchanged: 0/0
 16376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16377 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;Total ram usage:        3 bytes
 16382 ;; Hardware stack levels used:    1
 16383 ;; Hardware stack levels required when called:    5
 16384 ;; This function calls:
 16385 ;;		Nothing
 16386 ;; This function is called by:
 16387 ;;		_setDimmerLights_OnOff
 16388 ;;		_setDimmerLights_Dimming
 16389 ;;		_setRFSW_AdjControl
 16390 ;; This function uses a non-reentrant model
 16391 ;;
 16392                           
 16393                           
 16394                           ;psect for function _setDimmerIntr_MaxmumValue
 16395  1C17                     _setDimmerIntr_MaxmumValue:	
 16396                           
 16397                           ;incstack = 0
 16398                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16399                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16400  1C17  0020               	movlb	0	; select bank0
 16401  1C18  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 16402                           
 16403                           ;Dimmer_B1.c: 91: if (lights == 1) {
 16404  1C19  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16405  1C1A  3A01               	xorlw	1
 16406  1C1B  1D03               	skipz
 16407  1C1C  2C23               	goto	l6711
 16408                           
 16409                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 16410  1C1D  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16411  1C1E  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16412  1C1F  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16413  1C20  0021               	movlb	1	; select bank1
 16414  1C21  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 16415                           
 16416                           ;Dimmer_B1.c: 93: }
 16417  1C22  0008               	return
 16418  1C23                     l6711:	
 16419                           
 16420                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 16421  1C23  0020               	movlb	0	; select bank0
 16422  1C24  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16423  1C25  3A02               	xorlw	2
 16424  1C26  1D03               	skipz
 16425  1C27  0008               	return
 16426                           
 16427                           ;Dimmer_B1.c: 97: DimmerIntr2.MaxmumValue = value;
 16428  1C28  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16429  1C29  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16430  1C2A  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16431  1C2B  0021               	movlb	1	; select bank1
 16432  1C2C  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 16433  1C2D  0008               	return
 16434  1C2E                     __end_of_setDimmerIntr_MaxmumValue:	
 16435                           
 16436                           	psect	text108
 16437  1F48                     __ptext108:	
 16438 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16439 ;; Defined at:
 16440 ;;		line 166 in file "../src/Dimmer_B1.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  lights          1    wreg     unsigned char 
 16443 ;;  command         1    1[BANK0 ] unsigned char 
 16444 ;; Auto vars:     Size  Location     Type
 16445 ;;  lights          1    3[BANK0 ] unsigned char 
 16446 ;; Return value:  Size  Location     Type
 16447 ;;		None               void
 16448 ;; Registers used:
 16449 ;;		wreg, status,2, status,0
 16450 ;; Tracked objects:
 16451 ;;		On entry : 0/0
 16452 ;;		On exit  : 0/0
 16453 ;;		Unchanged: 0/0
 16454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16455 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;Total ram usage:        3 bytes
 16460 ;; Hardware stack levels used:    1
 16461 ;; Hardware stack levels required when called:    5
 16462 ;; This function calls:
 16463 ;;		Nothing
 16464 ;; This function is called by:
 16465 ;;		_setDimmerLights_Dimming
 16466 ;; This function uses a non-reentrant model
 16467 ;;
 16468                           
 16469                           
 16470                           ;psect for function _setDimmerIntr_Dimming_Sw
 16471  1F48                     _setDimmerIntr_Dimming_Sw:	
 16472                           
 16473                           ;incstack = 0
 16474                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16475                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16476  1F48  0020               	movlb	0	; select bank0
 16477  1F49  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 16478                           
 16479                           ;Dimmer_B1.c: 168: if (lights == 1) {
 16480  1F4A  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16481  1F4B  3A01               	xorlw	1
 16482  1F4C  1D03               	skipz
 16483  1F4D  2F5E               	goto	l7071
 16484                           
 16485                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16486  1F4E  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16487  1F4F  3A01               	xorlw	1
 16488  1F50  3000               	movlw	0
 16489  1F51  1903               	skipnz
 16490  1F52  3001               	movlw	1
 16491  1F53  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16492  1F54  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16493  1F55  0021               	movlb	1	; select bank1
 16494  1F56  082E               	movf	_DimmerIntr1^(0+128),w
 16495  1F57  0020               	movlb	0	; select bank0
 16496  1F58  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16497  1F59  39EF               	andlw	-17
 16498  1F5A  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16499  1F5B  0021               	movlb	1	; select bank1
 16500  1F5C  00AE               	movwf	_DimmerIntr1^(0+128)
 16501                           
 16502                           ;Dimmer_B1.c: 170: }
 16503  1F5D  0008               	return
 16504  1F5E                     l7071:	
 16505                           
 16506                           ;Dimmer_B1.c: 173: else if (lights == 2) {
 16507  1F5E  0020               	movlb	0	; select bank0
 16508  1F5F  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16509  1F60  3A02               	xorlw	2
 16510  1F61  1D03               	skipz
 16511  1F62  0008               	return
 16512                           
 16513                           ;Dimmer_B1.c: 174: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16514  1F63  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16515  1F64  3A01               	xorlw	1
 16516  1F65  3000               	movlw	0
 16517  1F66  1903               	skipnz
 16518  1F67  3001               	movlw	1
 16519  1F68  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16520  1F69  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16521  1F6A  0021               	movlb	1	; select bank1
 16522  1F6B  083A               	movf	_DimmerIntr2^(0+128),w
 16523  1F6C  0020               	movlb	0	; select bank0
 16524  1F6D  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16525  1F6E  39EF               	andlw	-17
 16526  1F6F  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16527  1F70  0021               	movlb	1	; select bank1
 16528  1F71  00BA               	movwf	_DimmerIntr2^(0+128)
 16529  1F72  0008               	return
 16530  1F73                     __end_of_setDimmerIntr_Dimming_Sw:	
 16531                           
 16532                           	psect	text109
 16533  1669                     __ptext109:	
 16534 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16535 ;; Defined at:
 16536 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16537 ;; Parameters:    Size  Location     Type
 16538 ;;  value           1    wreg     unsigned char 
 16539 ;; Auto vars:     Size  Location     Type
 16540 ;;  value           1   63[BANK0 ] unsigned char 
 16541 ;;  i               3   64[BANK0 ] float 
 16542 ;; Return value:  Size  Location     Type
 16543 ;;                  1    wreg      unsigned char 
 16544 ;; Registers used:
 16545 ;;		wreg, status,2, status,0, pclath, cstack
 16546 ;; Tracked objects:
 16547 ;;		On entry : 0/0
 16548 ;;		On exit  : 0/0
 16549 ;;		Unchanged: 0/0
 16550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;Total ram usage:        6 bytes
 16556 ;; Hardware stack levels used:    1
 16557 ;; Hardware stack levels required when called:    7
 16558 ;; This function calls:
 16559 ;;		___awtoft
 16560 ;;		___ftadd
 16561 ;;		___ftdiv
 16562 ;;		___ftneg
 16563 ;;		___fttol
 16564 ;; This function is called by:
 16565 ;;		_setDimmerLights_OnOff
 16566 ;;		_setDimmerLights_Dimming
 16567 ;;		_Flash_Memory_Initialization
 16568 ;; This function uses a non-reentrant model
 16569 ;;
 16570                           
 16571                           
 16572                           ;psect for function _getDimmerLights_ValueToPercent
 16573  1669                     _getDimmerLights_ValueToPercent:	
 16574                           
 16575                           ;incstack = 0
 16576                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16577                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16578  1669  0020               	movlb	0	; select bank0
 16579  166A  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16580                           
 16581                           ;Dimmer_B1.c: 1063: float i = ((char)(60*0.65)) - ((char)(10*0.65));
 16582  166B  3000               	movlw	0
 16583  166C  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16584  166D  3004               	movlw	4
 16585  166E  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16586  166F  3042               	movlw	66
 16587  1670  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16588                           
 16589                           ;Dimmer_B1.c: 1064: i /= 100;
 16590  1671  3000               	movlw	0
 16591  1672  00AF               	movwf	___ftdiv@f2
 16592  1673  30C8               	movlw	200
 16593  1674  00B0               	movwf	___ftdiv@f2+1
 16594  1675  3042               	movlw	66
 16595  1676  00B1               	movwf	___ftdiv@f2+2
 16596  1677  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16597  1678  00B2               	movwf	___ftdiv@f1
 16598  1679  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16599  167A  00B3               	movwf	___ftdiv@f1+1
 16600  167B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16601  167C  00B4               	movwf	___ftdiv@f1+2
 16602  167D  318D  2538  3196   	fcall	___ftdiv
 16603  1680  0020               	movlb	0	; select bank0
 16604  1681  082F               	movf	?___ftdiv,w
 16605  1682  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16606  1683  0830               	movf	?___ftdiv+1,w
 16607  1684  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16608  1685  0831               	movf	?___ftdiv+2,w
 16609  1686  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16610                           
 16611                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(60*0.65)) - value) / i));
 16612  1687  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16613  1688  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16614  1689  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16615  168A  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16616  168B  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16617  168C  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16618  168D  1903               	skipnz
 16619  168E  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16620  168F  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16621  1690  3E27               	addlw	39
 16622  1691  00A9               	movwf	___awtoft@c
 16623  1692  3000               	movlw	0
 16624  1693  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16625  1694  00AA               	movwf	___awtoft@c+1
 16626  1695  319E  268E  3196   	fcall	___awtoft
 16627  1698  0020               	movlb	0	; select bank0
 16628  1699  0829               	movf	?___awtoft,w
 16629  169A  00B2               	movwf	___ftdiv@f1
 16630  169B  082A               	movf	?___awtoft+1,w
 16631  169C  00B3               	movwf	___ftdiv@f1+1
 16632  169D  082B               	movf	?___awtoft+2,w
 16633  169E  00B4               	movwf	___ftdiv@f1+2
 16634  169F  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16635  16A0  00AF               	movwf	___ftdiv@f2
 16636  16A1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16637  16A2  00B0               	movwf	___ftdiv@f2+1
 16638  16A3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16639  16A4  00B1               	movwf	___ftdiv@f2+2
 16640  16A5  318D  2538  3196   	fcall	___ftdiv
 16641  16A8  0020               	movlb	0	; select bank0
 16642  16A9  082F               	movf	?___ftdiv,w
 16643  16AA  00BF               	movwf	___ftneg@f1
 16644  16AB  0830               	movf	?___ftdiv+1,w
 16645  16AC  00C0               	movwf	___ftneg@f1+1
 16646  16AD  0831               	movf	?___ftdiv+2,w
 16647  16AE  00C1               	movwf	___ftneg@f1+2
 16648  16AF  3199  21A7  3196   	fcall	___ftneg
 16649  16B2  0020               	movlb	0	; select bank0
 16650  16B3  083F               	movf	?___ftneg,w
 16651  16B4  00C5               	movwf	___ftadd@f2
 16652  16B5  0840               	movf	?___ftneg+1,w
 16653  16B6  00C6               	movwf	___ftadd@f2+1
 16654  16B7  0841               	movf	?___ftneg+2,w
 16655  16B8  00C7               	movwf	___ftadd@f2+2
 16656  16B9  3000               	movlw	0
 16657  16BA  00C2               	movwf	___ftadd@f1
 16658  16BB  30C8               	movlw	200
 16659  16BC  00C3               	movwf	___ftadd@f1+1
 16660  16BD  3042               	movlw	66
 16661  16BE  00C4               	movwf	___ftadd@f1+2
 16662  16BF  3183  2388  3196   	fcall	___ftadd
 16663  16C2  0020               	movlb	0	; select bank0
 16664  16C3  0842               	movf	?___ftadd,w
 16665  16C4  00CF               	movwf	___fttol@f1
 16666  16C5  0843               	movf	?___ftadd+1,w
 16667  16C6  00D0               	movwf	___fttol@f1+1
 16668  16C7  0844               	movf	?___ftadd+2,w
 16669  16C8  00D1               	movwf	___fttol@f1+2
 16670  16C9  318B  2396         	fcall	___fttol
 16671  16CB  0020               	movlb	0	; select bank0
 16672  16CC  084F               	movf	?___fttol,w
 16673  16CD  0008               	return
 16674  16CE                     __end_of_getDimmerLights_ValueToPercent:	
 16675                           
 16676                           	psect	text110
 16677  0B96                     __ptext110:	
 16678 ;; *************** function ___fttol *****************
 16679 ;; Defined at:
 16680 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16681 ;; Parameters:    Size  Location     Type
 16682 ;;  f1              3   47[BANK0 ] float 
 16683 ;; Auto vars:     Size  Location     Type
 16684 ;;  lval            4   56[BANK0 ] unsigned long 
 16685 ;;  exp1            1   60[BANK0 ] unsigned char 
 16686 ;;  sign1           1   55[BANK0 ] unsigned char 
 16687 ;; Return value:  Size  Location     Type
 16688 ;;                  4   47[BANK0 ] long 
 16689 ;; Registers used:
 16690 ;;		wreg, status,2, status,0
 16691 ;; Tracked objects:
 16692 ;;		On entry : 0/0
 16693 ;;		On exit  : 0/0
 16694 ;;		Unchanged: 0/0
 16695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;Total ram usage:       14 bytes
 16701 ;; Hardware stack levels used:    1
 16702 ;; Hardware stack levels required when called:    5
 16703 ;; This function calls:
 16704 ;;		Nothing
 16705 ;; This function is called by:
 16706 ;;		_getDimmerLights_PercentToValue
 16707 ;;		_getDimmerLights_ValueToPercent
 16708 ;; This function uses a non-reentrant model
 16709 ;;
 16710                           
 16711                           
 16712                           ;psect for function ___fttol
 16713  0B96                     ___fttol:	
 16714                           
 16715                           ;incstack = 0
 16716                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16717  0B96  0020               	movlb	0	; select bank0
 16718  0B97  084F               	movf	___fttol@f1,w
 16719  0B98  00D3               	movwf	??___fttol
 16720  0B99  0850               	movf	___fttol@f1+1,w
 16721  0B9A  00D4               	movwf	??___fttol+1
 16722  0B9B  0851               	movf	___fttol@f1+2,w
 16723  0B9C  00D5               	movwf	??___fttol+2
 16724  0B9D  1003               	clrc
 16725  0B9E  0D54               	rlf	??___fttol+1,w
 16726  0B9F  0D55               	rlf	??___fttol+2,w
 16727  0BA0  00D6               	movwf	??___fttol+3
 16728  0BA1  0856               	movf	??___fttol+3,w
 16729  0BA2  00DC               	movwf	___fttol@exp1
 16730  0BA3  08DC               	movf	___fttol@exp1,f
 16731  0BA4  1D03               	skipz
 16732  0BA5  2BAF               	goto	l6549
 16733  0BA6  3000               	movlw	0
 16734  0BA7  00D2               	movwf	?___fttol+3
 16735  0BA8  3000               	movlw	0
 16736  0BA9  00D1               	movwf	?___fttol+2
 16737  0BAA  3000               	movlw	0
 16738  0BAB  00D0               	movwf	?___fttol+1
 16739  0BAC  3000               	movlw	0
 16740  0BAD  00CF               	movwf	?___fttol
 16741  0BAE  0008               	return
 16742  0BAF                     l6549:	
 16743  0BAF  084F               	movf	___fttol@f1,w
 16744  0BB0  00D3               	movwf	??___fttol
 16745  0BB1  0850               	movf	___fttol@f1+1,w
 16746  0BB2  00D4               	movwf	??___fttol+1
 16747  0BB3  0851               	movf	___fttol@f1+2,w
 16748  0BB4  00D5               	movwf	??___fttol+2
 16749  0BB5  3017               	movlw	23
 16750  0BB6                     u5735:	
 16751  0BB6  36D5               	lsrf	??___fttol+2,f
 16752  0BB7  0CD4               	rrf	??___fttol+1,f
 16753  0BB8  0CD3               	rrf	??___fttol,f
 16754  0BB9  0B89               	decfsz	9,f
 16755  0BBA  2BB6               	goto	u5735
 16756  0BBB  0853               	movf	??___fttol,w
 16757  0BBC  00D6               	movwf	??___fttol+3
 16758  0BBD  0856               	movf	??___fttol+3,w
 16759  0BBE  00D7               	movwf	___fttol@sign1
 16760  0BBF  17D0               	bsf	___fttol@f1+1,7
 16761  0BC0  30FF               	movlw	255
 16762  0BC1  05CF               	andwf	___fttol@f1,f
 16763  0BC2  30FF               	movlw	255
 16764  0BC3  05D0               	andwf	___fttol@f1+1,f
 16765  0BC4  3000               	movlw	0
 16766  0BC5  05D1               	andwf	___fttol@f1+2,f
 16767  0BC6  084F               	movf	___fttol@f1,w
 16768  0BC7  00D8               	movwf	___fttol@lval
 16769  0BC8  0850               	movf	___fttol@f1+1,w
 16770  0BC9  00D9               	movwf	___fttol@lval+1
 16771  0BCA  0851               	movf	___fttol@f1+2,w
 16772  0BCB  00DA               	movwf	___fttol@lval+2
 16773  0BCC  01DB               	clrf	___fttol@lval+3
 16774  0BCD  308E               	movlw	142
 16775  0BCE  02DC               	subwf	___fttol@exp1,f
 16776  0BCF  1FDC               	btfss	___fttol@exp1,7
 16777  0BD0  2BED               	goto	l6569
 16778  0BD1  085C               	movf	___fttol@exp1,w
 16779  0BD2  3A80               	xorlw	128
 16780  0BD3  3E8F               	addlw	143
 16781  0BD4  1803               	skipnc
 16782  0BD5  2BDF               	goto	l6567
 16783  0BD6  3000               	movlw	0
 16784  0BD7  00D2               	movwf	?___fttol+3
 16785  0BD8  3000               	movlw	0
 16786  0BD9  00D1               	movwf	?___fttol+2
 16787  0BDA  3000               	movlw	0
 16788  0BDB  00D0               	movwf	?___fttol+1
 16789  0BDC  3000               	movlw	0
 16790  0BDD  00CF               	movwf	?___fttol
 16791  0BDE  0008               	return
 16792  0BDF                     l6567:	
 16793  0BDF  3001               	movlw	1
 16794  0BE0                     u5765:	
 16795  0BE0  36DB               	lsrf	___fttol@lval+3,f
 16796  0BE1  0CDA               	rrf	___fttol@lval+2,f
 16797  0BE2  0CD9               	rrf	___fttol@lval+1,f
 16798  0BE3  0CD8               	rrf	___fttol@lval,f
 16799  0BE4  0B89               	decfsz	9,f
 16800  0BE5  2BE0               	goto	u5765
 16801  0BE6  3001               	movlw	1
 16802  0BE7  00D3               	movwf	??___fttol
 16803  0BE8  0853               	movf	??___fttol,w
 16804  0BE9  07DC               	addwf	___fttol@exp1,f
 16805  0BEA  1903               	btfsc	3,2
 16806  0BEB  2C06               	goto	l6579
 16807  0BEC  2BDF               	goto	l6567
 16808  0BED                     l6569:	
 16809  0BED  3018               	movlw	24
 16810  0BEE  025C               	subwf	___fttol@exp1,w
 16811  0BEF  1C03               	skipc
 16812  0BF0  2C03               	goto	l6577
 16813  0BF1  3000               	movlw	0
 16814  0BF2  00D2               	movwf	?___fttol+3
 16815  0BF3  3000               	movlw	0
 16816  0BF4  00D1               	movwf	?___fttol+2
 16817  0BF5  3000               	movlw	0
 16818  0BF6  00D0               	movwf	?___fttol+1
 16819  0BF7  3000               	movlw	0
 16820  0BF8  00CF               	movwf	?___fttol
 16821  0BF9  0008               	return
 16822  0BFA                     l6575:	
 16823  0BFA  3001               	movlw	1
 16824  0BFB                     u5795:	
 16825  0BFB  35D8               	lslf	___fttol@lval,f
 16826  0BFC  0DD9               	rlf	___fttol@lval+1,f
 16827  0BFD  0DDA               	rlf	___fttol@lval+2,f
 16828  0BFE  0DDB               	rlf	___fttol@lval+3,f
 16829  0BFF  0B89               	decfsz	9,f
 16830  0C00  2BFB               	goto	u5795
 16831  0C01  3001               	movlw	1
 16832  0C02  02DC               	subwf	___fttol@exp1,f
 16833  0C03                     l6577:	
 16834  0C03  08DC               	movf	___fttol@exp1,f
 16835  0C04  1D03               	skipz
 16836  0C05  2BFA               	goto	l6575
 16837  0C06                     l6579:	
 16838  0C06  0857               	movf	___fttol@sign1,w
 16839  0C07  1903               	btfsc	3,2
 16840  0C08  2C14               	goto	l6583
 16841  0C09  09D8               	comf	___fttol@lval,f
 16842  0C0A  09D9               	comf	___fttol@lval+1,f
 16843  0C0B  09DA               	comf	___fttol@lval+2,f
 16844  0C0C  09DB               	comf	___fttol@lval+3,f
 16845  0C0D  0AD8               	incf	___fttol@lval,f
 16846  0C0E  1903               	skipnz
 16847  0C0F  0AD9               	incf	___fttol@lval+1,f
 16848  0C10  1903               	skipnz
 16849  0C11  0ADA               	incf	___fttol@lval+2,f
 16850  0C12  1903               	skipnz
 16851  0C13  0ADB               	incf	___fttol@lval+3,f
 16852  0C14                     l6583:	
 16853  0C14  085B               	movf	___fttol@lval+3,w
 16854  0C15  00D2               	movwf	?___fttol+3
 16855  0C16  085A               	movf	___fttol@lval+2,w
 16856  0C17  00D1               	movwf	?___fttol+2
 16857  0C18  0859               	movf	___fttol@lval+1,w
 16858  0C19  00D0               	movwf	?___fttol+1
 16859  0C1A  0858               	movf	___fttol@lval,w
 16860  0C1B  00CF               	movwf	?___fttol
 16861  0C1C  0008               	return
 16862  0C1D                     __end_of___fttol:	
 16863                           
 16864                           	psect	text111
 16865  19A7                     __ptext111:	
 16866 ;; *************** function ___ftneg *****************
 16867 ;; Defined at:
 16868 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16869 ;; Parameters:    Size  Location     Type
 16870 ;;  f1              3   31[BANK0 ] float 
 16871 ;; Auto vars:     Size  Location     Type
 16872 ;;		None
 16873 ;; Return value:  Size  Location     Type
 16874 ;;                  3   31[BANK0 ] float 
 16875 ;; Registers used:
 16876 ;;		wreg
 16877 ;; Tracked objects:
 16878 ;;		On entry : 0/0
 16879 ;;		On exit  : 0/0
 16880 ;;		Unchanged: 0/0
 16881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16882 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;Total ram usage:        3 bytes
 16887 ;; Hardware stack levels used:    1
 16888 ;; Hardware stack levels required when called:    5
 16889 ;; This function calls:
 16890 ;;		Nothing
 16891 ;; This function is called by:
 16892 ;;		_getDimmerLights_PercentToValue
 16893 ;;		_getDimmerLights_ValueToPercent
 16894 ;; This function uses a non-reentrant model
 16895 ;;
 16896                           
 16897                           
 16898                           ;psect for function ___ftneg
 16899  19A7                     ___ftneg:	
 16900                           
 16901                           ;incstack = 0
 16902                           ; Regs used in ___ftneg: [wreg]
 16903  19A7  0020               	movlb	0	; select bank0
 16904  19A8  0841               	movf	___ftneg@f1+2,w
 16905  19A9  0440               	iorwf	___ftneg@f1+1,w
 16906  19AA  043F               	iorwf	___ftneg@f1,w
 16907  19AB  1903               	skipnz
 16908  19AC  0008               	return
 16909  19AD  3080               	movlw	128
 16910  19AE  06C1               	xorwf	___ftneg@f1+2,f
 16911  19AF  0008               	return
 16912  19B0                     __end_of___ftneg:	
 16913                           
 16914                           	psect	text112
 16915  0D38                     __ptext112:	
 16916 ;; *************** function ___ftdiv *****************
 16917 ;; Defined at:
 16918 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16919 ;; Parameters:    Size  Location     Type
 16920 ;;  f2              3   15[BANK0 ] float 
 16921 ;;  f1              3   18[BANK0 ] float 
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;  f3              3   26[BANK0 ] float 
 16924 ;;  sign            1   30[BANK0 ] unsigned char 
 16925 ;;  exp             1   29[BANK0 ] unsigned char 
 16926 ;;  cntr            1   25[BANK0 ] unsigned char 
 16927 ;; Return value:  Size  Location     Type
 16928 ;;                  3   15[BANK0 ] float 
 16929 ;; Registers used:
 16930 ;;		wreg, status,2, status,0, pclath, cstack
 16931 ;; Tracked objects:
 16932 ;;		On entry : 0/0
 16933 ;;		On exit  : 0/0
 16934 ;;		Unchanged: 0/0
 16935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16936 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;Total ram usage:       16 bytes
 16941 ;; Hardware stack levels used:    1
 16942 ;; Hardware stack levels required when called:    6
 16943 ;; This function calls:
 16944 ;;		___ftpack
 16945 ;; This function is called by:
 16946 ;;		_getDimmerLights_PercentToValue
 16947 ;;		_getDimmerLights_ValueToPercent
 16948 ;; This function uses a non-reentrant model
 16949 ;;
 16950                           
 16951                           
 16952                           ;psect for function ___ftdiv
 16953  0D38                     ___ftdiv:	
 16954                           
 16955                           ;incstack = 0
 16956                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16957  0D38  0020               	movlb	0	; select bank0
 16958  0D39  0832               	movf	___ftdiv@f1,w
 16959  0D3A  00B5               	movwf	??___ftdiv
 16960  0D3B  0833               	movf	___ftdiv@f1+1,w
 16961  0D3C  00B6               	movwf	??___ftdiv+1
 16962  0D3D  0834               	movf	___ftdiv@f1+2,w
 16963  0D3E  00B7               	movwf	??___ftdiv+2
 16964  0D3F  1003               	clrc
 16965  0D40  0D36               	rlf	??___ftdiv+1,w
 16966  0D41  0D37               	rlf	??___ftdiv+2,w
 16967  0D42  00B8               	movwf	??___ftdiv+3
 16968  0D43  0838               	movf	??___ftdiv+3,w
 16969  0D44  00BD               	movwf	___ftdiv@exp
 16970  0D45  08BD               	movf	___ftdiv@exp,f
 16971  0D46  1D03               	skipz
 16972  0D47  2D4F               	goto	l6449
 16973  0D48  3000               	movlw	0
 16974  0D49  00AF               	movwf	?___ftdiv
 16975  0D4A  3000               	movlw	0
 16976  0D4B  00B0               	movwf	?___ftdiv+1
 16977  0D4C  3000               	movlw	0
 16978  0D4D  00B1               	movwf	?___ftdiv+2
 16979  0D4E  0008               	return
 16980  0D4F                     l6449:	
 16981  0D4F  082F               	movf	___ftdiv@f2,w
 16982  0D50  00B5               	movwf	??___ftdiv
 16983  0D51  0830               	movf	___ftdiv@f2+1,w
 16984  0D52  00B6               	movwf	??___ftdiv+1
 16985  0D53  0831               	movf	___ftdiv@f2+2,w
 16986  0D54  00B7               	movwf	??___ftdiv+2
 16987  0D55  1003               	clrc
 16988  0D56  0D36               	rlf	??___ftdiv+1,w
 16989  0D57  0D37               	rlf	??___ftdiv+2,w
 16990  0D58  00B8               	movwf	??___ftdiv+3
 16991  0D59  0838               	movf	??___ftdiv+3,w
 16992  0D5A  00BE               	movwf	___ftdiv@sign
 16993  0D5B  08BE               	movf	___ftdiv@sign,f
 16994  0D5C  1D03               	skipz
 16995  0D5D  2D65               	goto	l6455
 16996  0D5E  3000               	movlw	0
 16997  0D5F  00AF               	movwf	?___ftdiv
 16998  0D60  3000               	movlw	0
 16999  0D61  00B0               	movwf	?___ftdiv+1
 17000  0D62  3000               	movlw	0
 17001  0D63  00B1               	movwf	?___ftdiv+2
 17002  0D64  0008               	return
 17003  0D65                     l6455:	
 17004  0D65  3000               	movlw	0
 17005  0D66  00BA               	movwf	___ftdiv@f3
 17006  0D67  3000               	movlw	0
 17007  0D68  00BB               	movwf	___ftdiv@f3+1
 17008  0D69  3000               	movlw	0
 17009  0D6A  00BC               	movwf	___ftdiv@f3+2
 17010  0D6B  3089               	movlw	137
 17011  0D6C  073E               	addwf	___ftdiv@sign,w
 17012  0D6D  00B5               	movwf	??___ftdiv
 17013  0D6E  0835               	movf	??___ftdiv,w
 17014  0D6F  02BD               	subwf	___ftdiv@exp,f
 17015  0D70  0832               	movf	___ftdiv@f1,w
 17016  0D71  00B5               	movwf	??___ftdiv
 17017  0D72  0833               	movf	___ftdiv@f1+1,w
 17018  0D73  00B6               	movwf	??___ftdiv+1
 17019  0D74  0834               	movf	___ftdiv@f1+2,w
 17020  0D75  00B7               	movwf	??___ftdiv+2
 17021  0D76  3010               	movlw	16
 17022  0D77                     u5535:	
 17023  0D77  36B7               	lsrf	??___ftdiv+2,f
 17024  0D78  0CB6               	rrf	??___ftdiv+1,f
 17025  0D79  0CB5               	rrf	??___ftdiv,f
 17026  0D7A  0B89               	decfsz	9,f
 17027  0D7B  2D77               	goto	u5535
 17028  0D7C  0835               	movf	??___ftdiv,w
 17029  0D7D  00B8               	movwf	??___ftdiv+3
 17030  0D7E  0838               	movf	??___ftdiv+3,w
 17031  0D7F  00BE               	movwf	___ftdiv@sign
 17032  0D80  082F               	movf	___ftdiv@f2,w
 17033  0D81  00B5               	movwf	??___ftdiv
 17034  0D82  0830               	movf	___ftdiv@f2+1,w
 17035  0D83  00B6               	movwf	??___ftdiv+1
 17036  0D84  0831               	movf	___ftdiv@f2+2,w
 17037  0D85  00B7               	movwf	??___ftdiv+2
 17038  0D86  3010               	movlw	16
 17039  0D87                     u5545:	
 17040  0D87  36B7               	lsrf	??___ftdiv+2,f
 17041  0D88  0CB6               	rrf	??___ftdiv+1,f
 17042  0D89  0CB5               	rrf	??___ftdiv,f
 17043  0D8A  0B89               	decfsz	9,f
 17044  0D8B  2D87               	goto	u5545
 17045  0D8C  0835               	movf	??___ftdiv,w
 17046  0D8D  00B8               	movwf	??___ftdiv+3
 17047  0D8E  0838               	movf	??___ftdiv+3,w
 17048  0D8F  06BE               	xorwf	___ftdiv@sign,f
 17049  0D90  3080               	movlw	128
 17050  0D91  00B5               	movwf	??___ftdiv
 17051  0D92  0835               	movf	??___ftdiv,w
 17052  0D93  05BE               	andwf	___ftdiv@sign,f
 17053  0D94  17B3               	bsf	___ftdiv@f1+1,7
 17054  0D95  30FF               	movlw	255
 17055  0D96  05B2               	andwf	___ftdiv@f1,f
 17056  0D97  30FF               	movlw	255
 17057  0D98  05B3               	andwf	___ftdiv@f1+1,f
 17058  0D99  3000               	movlw	0
 17059  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 17060  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 17061  0D9C  30FF               	movlw	255
 17062  0D9D  05AF               	andwf	___ftdiv@f2,f
 17063  0D9E  30FF               	movlw	255
 17064  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 17065  0DA0  3000               	movlw	0
 17066  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 17067  0DA2  3018               	movlw	24
 17068  0DA3  00B5               	movwf	??___ftdiv
 17069  0DA4  0835               	movf	??___ftdiv,w
 17070  0DA5  00B9               	movwf	___ftdiv@cntr
 17071  0DA6                     l6469:	
 17072  0DA6  3001               	movlw	1
 17073  0DA7                     u5555:	
 17074  0DA7  35BA               	lslf	___ftdiv@f3,f
 17075  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 17076  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 17077  0DAA  0B89               	decfsz	9,f
 17078  0DAB  2DA7               	goto	u5555
 17079  0DAC  0831               	movf	___ftdiv@f2+2,w
 17080  0DAD  0234               	subwf	___ftdiv@f1+2,w
 17081  0DAE  1D03               	skipz
 17082  0DAF  2DB6               	goto	u5565
 17083  0DB0  0830               	movf	___ftdiv@f2+1,w
 17084  0DB1  0233               	subwf	___ftdiv@f1+1,w
 17085  0DB2  1D03               	skipz
 17086  0DB3  2DB6               	goto	u5565
 17087  0DB4  082F               	movf	___ftdiv@f2,w
 17088  0DB5  0232               	subwf	___ftdiv@f1,w
 17089  0DB6                     u5565:	
 17090  0DB6  1C03               	skipc
 17091  0DB7  2DBF               	goto	l6477
 17092  0DB8  082F               	movf	___ftdiv@f2,w
 17093  0DB9  02B2               	subwf	___ftdiv@f1,f
 17094  0DBA  0830               	movf	___ftdiv@f2+1,w
 17095  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 17096  0DBC  0831               	movf	___ftdiv@f2+2,w
 17097  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 17098  0DBE  143A               	bsf	___ftdiv@f3,0
 17099  0DBF                     l6477:	
 17100  0DBF  3001               	movlw	1
 17101  0DC0                     u5575:	
 17102  0DC0  35B2               	lslf	___ftdiv@f1,f
 17103  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 17104  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 17105  0DC3  0B89               	decfsz	9,f
 17106  0DC4  2DC0               	goto	u5575
 17107  0DC5  3001               	movlw	1
 17108  0DC6  02B9               	subwf	___ftdiv@cntr,f
 17109  0DC7  1D03               	btfss	3,2
 17110  0DC8  2DA6               	goto	l6469
 17111  0DC9  083A               	movf	___ftdiv@f3,w
 17112  0DCA  00A1               	movwf	___ftpack@arg
 17113  0DCB  083B               	movf	___ftdiv@f3+1,w
 17114  0DCC  00A2               	movwf	___ftpack@arg+1
 17115  0DCD  083C               	movf	___ftdiv@f3+2,w
 17116  0DCE  00A3               	movwf	___ftpack@arg+2
 17117  0DCF  083D               	movf	___ftdiv@exp,w
 17118  0DD0  00B5               	movwf	??___ftdiv
 17119  0DD1  0835               	movf	??___ftdiv,w
 17120  0DD2  00A4               	movwf	___ftpack@exp
 17121  0DD3  083E               	movf	___ftdiv@sign,w
 17122  0DD4  00B6               	movwf	??___ftdiv+1
 17123  0DD5  0836               	movf	??___ftdiv+1,w
 17124  0DD6  00A5               	movwf	___ftpack@sign
 17125  0DD7  3196  2608         	fcall	___ftpack
 17126  0DD9  0020               	movlb	0	; select bank0
 17127  0DDA  0821               	movf	?___ftpack,w
 17128  0DDB  00AF               	movwf	?___ftdiv
 17129  0DDC  0822               	movf	?___ftpack+1,w
 17130  0DDD  00B0               	movwf	?___ftdiv+1
 17131  0DDE  0823               	movf	?___ftpack+2,w
 17132  0DDF  00B1               	movwf	?___ftdiv+2
 17133  0DE0  0008               	return
 17134  0DE1                     __end_of___ftdiv:	
 17135                           
 17136                           	psect	text113
 17137  0388                     __ptext113:	
 17138 ;; *************** function ___ftadd *****************
 17139 ;; Defined at:
 17140 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17141 ;; Parameters:    Size  Location     Type
 17142 ;;  f1              3   34[BANK0 ] float 
 17143 ;;  f2              3   37[BANK0 ] float 
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  exp1            1   46[BANK0 ] unsigned char 
 17146 ;;  exp2            1   45[BANK0 ] unsigned char 
 17147 ;;  sign            1   44[BANK0 ] unsigned char 
 17148 ;; Return value:  Size  Location     Type
 17149 ;;                  3   34[BANK0 ] float 
 17150 ;; Registers used:
 17151 ;;		wreg, status,2, status,0, pclath, cstack
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17157 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;Total ram usage:       13 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; Hardware stack levels required when called:    6
 17164 ;; This function calls:
 17165 ;;		___ftpack
 17166 ;; This function is called by:
 17167 ;;		_getDimmerLights_PercentToValue
 17168 ;;		_getDimmerLights_ValueToPercent
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           
 17173                           ;psect for function ___ftadd
 17174  0388                     ___ftadd:	
 17175                           
 17176                           ;incstack = 0
 17177                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17178  0388  0020               	movlb	0	; select bank0
 17179  0389  0842               	movf	___ftadd@f1,w
 17180  038A  00C8               	movwf	??___ftadd
 17181  038B  0843               	movf	___ftadd@f1+1,w
 17182  038C  00C9               	movwf	??___ftadd+1
 17183  038D  0844               	movf	___ftadd@f1+2,w
 17184  038E  00CA               	movwf	??___ftadd+2
 17185  038F  1003               	clrc
 17186  0390  0D49               	rlf	??___ftadd+1,w
 17187  0391  0D4A               	rlf	??___ftadd+2,w
 17188  0392  00CB               	movwf	??___ftadd+3
 17189  0393  084B               	movf	??___ftadd+3,w
 17190  0394  00CE               	movwf	___ftadd@exp1
 17191  0395  0845               	movf	___ftadd@f2,w
 17192  0396  00C8               	movwf	??___ftadd
 17193  0397  0846               	movf	___ftadd@f2+1,w
 17194  0398  00C9               	movwf	??___ftadd+1
 17195  0399  0847               	movf	___ftadd@f2+2,w
 17196  039A  00CA               	movwf	??___ftadd+2
 17197  039B  1003               	clrc
 17198  039C  0D49               	rlf	??___ftadd+1,w
 17199  039D  0D4A               	rlf	??___ftadd+2,w
 17200  039E  00CB               	movwf	??___ftadd+3
 17201  039F  084B               	movf	??___ftadd+3,w
 17202  03A0  00CD               	movwf	___ftadd@exp2
 17203  03A1  084E               	movf	___ftadd@exp1,w
 17204  03A2  1903               	btfsc	3,2
 17205  03A3  2BB0               	goto	l6379
 17206  03A4  084D               	movf	___ftadd@exp2,w
 17207  03A5  024E               	subwf	___ftadd@exp1,w
 17208  03A6  1803               	skipnc
 17209  03A7  2BB7               	goto	l6383
 17210  03A8  034E               	decf	___ftadd@exp1,w
 17211  03A9  3AFF               	xorlw	255
 17212  03AA  074D               	addwf	___ftadd@exp2,w
 17213  03AB  00C8               	movwf	??___ftadd
 17214  03AC  3019               	movlw	25
 17215  03AD  0248               	subwf	??___ftadd,w
 17216  03AE  1C03               	skipc
 17217  03AF  2BB7               	goto	l6383
 17218  03B0                     l6379:	
 17219  03B0  0845               	movf	___ftadd@f2,w
 17220  03B1  00C2               	movwf	?___ftadd
 17221  03B2  0846               	movf	___ftadd@f2+1,w
 17222  03B3  00C3               	movwf	?___ftadd+1
 17223  03B4  0847               	movf	___ftadd@f2+2,w
 17224  03B5  00C4               	movwf	?___ftadd+2
 17225  03B6  0008               	return
 17226  03B7                     l6383:	
 17227  03B7  084D               	movf	___ftadd@exp2,w
 17228  03B8  1903               	btfsc	3,2
 17229  03B9  0008               	return
 17230  03BA  084E               	movf	___ftadd@exp1,w
 17231  03BB  024D               	subwf	___ftadd@exp2,w
 17232  03BC  1803               	skipnc
 17233  03BD  2BC6               	goto	l6389
 17234  03BE  034D               	decf	___ftadd@exp2,w
 17235  03BF  3AFF               	xorlw	255
 17236  03C0  074E               	addwf	___ftadd@exp1,w
 17237  03C1  00C8               	movwf	??___ftadd
 17238  03C2  3019               	movlw	25
 17239  03C3  0248               	subwf	??___ftadd,w
 17240  03C4  1803               	btfsc	3,0
 17241  03C5  0008               	return
 17242  03C6                     l6389:	
 17243  03C6  3006               	movlw	6
 17244  03C7  00C8               	movwf	??___ftadd
 17245  03C8  0848               	movf	??___ftadd,w
 17246  03C9  00CC               	movwf	___ftadd@sign
 17247  03CA  1BC4               	btfsc	___ftadd@f1+2,7
 17248  03CB  17CC               	bsf	___ftadd@sign,7
 17249  03CC  1BC7               	btfsc	___ftadd@f2+2,7
 17250  03CD  174C               	bsf	___ftadd@sign,6
 17251  03CE  17C3               	bsf	___ftadd@f1+1,7
 17252  03CF  30FF               	movlw	255
 17253  03D0  05C2               	andwf	___ftadd@f1,f
 17254  03D1  30FF               	movlw	255
 17255  03D2  05C3               	andwf	___ftadd@f1+1,f
 17256  03D3  3000               	movlw	0
 17257  03D4  05C4               	andwf	___ftadd@f1+2,f
 17258  03D5  17C6               	bsf	___ftadd@f2+1,7
 17259  03D6  30FF               	movlw	255
 17260  03D7  05C5               	andwf	___ftadd@f2,f
 17261  03D8  30FF               	movlw	255
 17262  03D9  05C6               	andwf	___ftadd@f2+1,f
 17263  03DA  3000               	movlw	0
 17264  03DB  05C7               	andwf	___ftadd@f2+2,f
 17265  03DC  084D               	movf	___ftadd@exp2,w
 17266  03DD  024E               	subwf	___ftadd@exp1,w
 17267  03DE  1803               	skipnc
 17268  03DF  2C02               	goto	l6411
 17269  03E0                     l6401:	
 17270  03E0  3001               	movlw	1
 17271  03E1                     u5375:	
 17272  03E1  35C5               	lslf	___ftadd@f2,f
 17273  03E2  0DC6               	rlf	___ftadd@f2+1,f
 17274  03E3  0DC7               	rlf	___ftadd@f2+2,f
 17275  03E4  0B89               	decfsz	9,f
 17276  03E5  2BE1               	goto	u5375
 17277  03E6  3001               	movlw	1
 17278  03E7  02CD               	subwf	___ftadd@exp2,f
 17279  03E8  084D               	movf	___ftadd@exp2,w
 17280  03E9  064E               	xorwf	___ftadd@exp1,w
 17281  03EA  1903               	skipnz
 17282  03EB  2BFD               	goto	l6409
 17283  03EC  3001               	movlw	1
 17284  03ED  02CC               	subwf	___ftadd@sign,f
 17285  03EE  084C               	movf	___ftadd@sign,w
 17286  03EF  3907               	andlw	7
 17287  03F0  1903               	btfsc	3,2
 17288  03F1  2BFD               	goto	l6409
 17289  03F2  2BE0               	goto	l6401
 17290  03F3                     l6407:	
 17291  03F3  3001               	movlw	1
 17292  03F4                     u5405:	
 17293  03F4  36C4               	lsrf	___ftadd@f1+2,f
 17294  03F5  0CC3               	rrf	___ftadd@f1+1,f
 17295  03F6  0CC2               	rrf	___ftadd@f1,f
 17296  03F7  0B89               	decfsz	9,f
 17297  03F8  2BF4               	goto	u5405
 17298  03F9  3001               	movlw	1
 17299  03FA  00C8               	movwf	??___ftadd
 17300  03FB  0848               	movf	??___ftadd,w
 17301  03FC  07CE               	addwf	___ftadd@exp1,f
 17302  03FD                     l6409:	
 17303  03FD  084E               	movf	___ftadd@exp1,w
 17304  03FE  064D               	xorwf	___ftadd@exp2,w
 17305  03FF  1903               	btfsc	3,2
 17306  0400  2C27               	goto	l3186
 17307  0401  2BF3               	goto	l6407
 17308  0402                     l6411:	
 17309  0402  084E               	movf	___ftadd@exp1,w
 17310  0403  024D               	subwf	___ftadd@exp2,w
 17311  0404  1803               	skipnc
 17312  0405  2C27               	goto	l3186
 17313  0406                     l6413:	
 17314  0406  3001               	movlw	1
 17315  0407                     u5435:	
 17316  0407  35C2               	lslf	___ftadd@f1,f
 17317  0408  0DC3               	rlf	___ftadd@f1+1,f
 17318  0409  0DC4               	rlf	___ftadd@f1+2,f
 17319  040A  0B89               	decfsz	9,f
 17320  040B  2C07               	goto	u5435
 17321  040C  3001               	movlw	1
 17322  040D  02CE               	subwf	___ftadd@exp1,f
 17323  040E  084D               	movf	___ftadd@exp2,w
 17324  040F  064E               	xorwf	___ftadd@exp1,w
 17325  0410  1903               	skipnz
 17326  0411  2C23               	goto	l6421
 17327  0412  3001               	movlw	1
 17328  0413  02CC               	subwf	___ftadd@sign,f
 17329  0414  084C               	movf	___ftadd@sign,w
 17330  0415  3907               	andlw	7
 17331  0416  1903               	btfsc	3,2
 17332  0417  2C23               	goto	l6421
 17333  0418  2C06               	goto	l6413
 17334  0419                     l6419:	
 17335  0419  3001               	movlw	1
 17336  041A                     u5465:	
 17337  041A  36C7               	lsrf	___ftadd@f2+2,f
 17338  041B  0CC6               	rrf	___ftadd@f2+1,f
 17339  041C  0CC5               	rrf	___ftadd@f2,f
 17340  041D  0B89               	decfsz	9,f
 17341  041E  2C1A               	goto	u5465
 17342  041F  3001               	movlw	1
 17343  0420  00C8               	movwf	??___ftadd
 17344  0421  0848               	movf	??___ftadd,w
 17345  0422  07CD               	addwf	___ftadd@exp2,f
 17346  0423                     l6421:	
 17347  0423  084E               	movf	___ftadd@exp1,w
 17348  0424  064D               	xorwf	___ftadd@exp2,w
 17349  0425  1D03               	skipz
 17350  0426  2C19               	goto	l6419
 17351  0427                     l3186:	
 17352  0427  1FCC               	btfss	___ftadd@sign,7
 17353  0428  2C39               	goto	l6425
 17354  0429  30FF               	movlw	255
 17355  042A  06C2               	xorwf	___ftadd@f1,f
 17356  042B  30FF               	movlw	255
 17357  042C  06C3               	xorwf	___ftadd@f1+1,f
 17358  042D  30FF               	movlw	255
 17359  042E  06C4               	xorwf	___ftadd@f1+2,f
 17360  042F  3001               	movlw	1
 17361  0430  07C2               	addwf	___ftadd@f1,f
 17362  0431  3000               	movlw	0
 17363  0432  1803               	skipnc
 17364  0433  3001               	movlw	1
 17365  0434  07C3               	addwf	___ftadd@f1+1,f
 17366  0435  3000               	movlw	0
 17367  0436  1803               	skipnc
 17368  0437  3001               	movlw	1
 17369  0438  07C4               	addwf	___ftadd@f1+2,f
 17370  0439                     l6425:	
 17371  0439  1F4C               	btfss	___ftadd@sign,6
 17372  043A  2C4B               	goto	l6429
 17373  043B  30FF               	movlw	255
 17374  043C  06C5               	xorwf	___ftadd@f2,f
 17375  043D  30FF               	movlw	255
 17376  043E  06C6               	xorwf	___ftadd@f2+1,f
 17377  043F  30FF               	movlw	255
 17378  0440  06C7               	xorwf	___ftadd@f2+2,f
 17379  0441  3001               	movlw	1
 17380  0442  07C5               	addwf	___ftadd@f2,f
 17381  0443  3000               	movlw	0
 17382  0444  1803               	skipnc
 17383  0445  3001               	movlw	1
 17384  0446  07C6               	addwf	___ftadd@f2+1,f
 17385  0447  3000               	movlw	0
 17386  0448  1803               	skipnc
 17387  0449  3001               	movlw	1
 17388  044A  07C7               	addwf	___ftadd@f2+2,f
 17389  044B                     l6429:	
 17390  044B  01CC               	clrf	___ftadd@sign
 17391  044C  0842               	movf	___ftadd@f1,w
 17392  044D  07C5               	addwf	___ftadd@f2,f
 17393  044E  0843               	movf	___ftadd@f1+1,w
 17394  044F  3DC6               	addwfc	___ftadd@f2+1,f
 17395  0450  0844               	movf	___ftadd@f1+2,w
 17396  0451  3DC7               	addwfc	___ftadd@f2+2,f
 17397  0452  1FC7               	btfss	___ftadd@f2+2,7
 17398  0453  2C66               	goto	l6439
 17399  0454  30FF               	movlw	255
 17400  0455  06C5               	xorwf	___ftadd@f2,f
 17401  0456  30FF               	movlw	255
 17402  0457  06C6               	xorwf	___ftadd@f2+1,f
 17403  0458  30FF               	movlw	255
 17404  0459  06C7               	xorwf	___ftadd@f2+2,f
 17405  045A  3001               	movlw	1
 17406  045B  07C5               	addwf	___ftadd@f2,f
 17407  045C  3000               	movlw	0
 17408  045D  1803               	skipnc
 17409  045E  3001               	movlw	1
 17410  045F  07C6               	addwf	___ftadd@f2+1,f
 17411  0460  3000               	movlw	0
 17412  0461  1803               	skipnc
 17413  0462  3001               	movlw	1
 17414  0463  07C7               	addwf	___ftadd@f2+2,f
 17415  0464  01CC               	clrf	___ftadd@sign
 17416  0465  0ACC               	incf	___ftadd@sign,f
 17417  0466                     l6439:	
 17418  0466  0845               	movf	___ftadd@f2,w
 17419  0467  00A1               	movwf	___ftpack@arg
 17420  0468  0846               	movf	___ftadd@f2+1,w
 17421  0469  00A2               	movwf	___ftpack@arg+1
 17422  046A  0847               	movf	___ftadd@f2+2,w
 17423  046B  00A3               	movwf	___ftpack@arg+2
 17424  046C  084E               	movf	___ftadd@exp1,w
 17425  046D  00C8               	movwf	??___ftadd
 17426  046E  0848               	movf	??___ftadd,w
 17427  046F  00A4               	movwf	___ftpack@exp
 17428  0470  084C               	movf	___ftadd@sign,w
 17429  0471  00C9               	movwf	??___ftadd+1
 17430  0472  0849               	movf	??___ftadd+1,w
 17431  0473  00A5               	movwf	___ftpack@sign
 17432  0474  3196  2608         	fcall	___ftpack
 17433  0476  0020               	movlb	0	; select bank0
 17434  0477  0821               	movf	?___ftpack,w
 17435  0478  00C2               	movwf	?___ftadd
 17436  0479  0822               	movf	?___ftpack+1,w
 17437  047A  00C3               	movwf	?___ftadd+1
 17438  047B  0823               	movf	?___ftpack+2,w
 17439  047C  00C4               	movwf	?___ftadd+2
 17440  047D  0008               	return
 17441  047E                     __end_of___ftadd:	
 17442                           
 17443                           	psect	text114
 17444  1E8E                     __ptext114:	
 17445 ;; *************** function ___awtoft *****************
 17446 ;; Defined at:
 17447 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;  c               2    9[BANK0 ] int 
 17450 ;; Auto vars:     Size  Location     Type
 17451 ;;  sign            1   14[BANK0 ] unsigned char 
 17452 ;; Return value:  Size  Location     Type
 17453 ;;                  3    9[BANK0 ] float 
 17454 ;; Registers used:
 17455 ;;		wreg, status,2, status,0, pclath, cstack
 17456 ;; Tracked objects:
 17457 ;;		On entry : 0/0
 17458 ;;		On exit  : 0/0
 17459 ;;		Unchanged: 0/0
 17460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17461 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;Total ram usage:        6 bytes
 17466 ;; Hardware stack levels used:    1
 17467 ;; Hardware stack levels required when called:    6
 17468 ;; This function calls:
 17469 ;;		___ftpack
 17470 ;; This function is called by:
 17471 ;;		_getDimmerLights_PercentToValue
 17472 ;;		_getDimmerLights_ValueToPercent
 17473 ;; This function uses a non-reentrant model
 17474 ;;
 17475                           
 17476                           
 17477                           ;psect for function ___awtoft
 17478  1E8E                     ___awtoft:	
 17479                           
 17480                           ;incstack = 0
 17481                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17482  1E8E  0020               	movlb	0	; select bank0
 17483  1E8F  01AE               	clrf	___awtoft@sign
 17484  1E90  1FAA               	btfss	___awtoft@c+1,7
 17485  1E91  2E99               	goto	l6367
 17486  1E92  09A9               	comf	___awtoft@c,f
 17487  1E93  09AA               	comf	___awtoft@c+1,f
 17488  1E94  0AA9               	incf	___awtoft@c,f
 17489  1E95  1903               	skipnz
 17490  1E96  0AAA               	incf	___awtoft@c+1,f
 17491  1E97  01AE               	clrf	___awtoft@sign
 17492  1E98  0AAE               	incf	___awtoft@sign,f
 17493  1E99                     l6367:	
 17494  1E99  0829               	movf	___awtoft@c,w
 17495  1E9A  00A1               	movwf	___ftpack@arg
 17496  1E9B  082A               	movf	___awtoft@c+1,w
 17497  1E9C  00A2               	movwf	___ftpack@arg+1
 17498  1E9D  01A3               	clrf	___ftpack@arg+2
 17499  1E9E  308E               	movlw	142
 17500  1E9F  00AC               	movwf	??___awtoft
 17501  1EA0  082C               	movf	??___awtoft,w
 17502  1EA1  00A4               	movwf	___ftpack@exp
 17503  1EA2  082E               	movf	___awtoft@sign,w
 17504  1EA3  00AD               	movwf	??___awtoft+1
 17505  1EA4  082D               	movf	??___awtoft+1,w
 17506  1EA5  00A5               	movwf	___ftpack@sign
 17507  1EA6  3196  2608         	fcall	___ftpack
 17508  1EA8  0020               	movlb	0	; select bank0
 17509  1EA9  0821               	movf	?___ftpack,w
 17510  1EAA  00A9               	movwf	?___awtoft
 17511  1EAB  0822               	movf	?___ftpack+1,w
 17512  1EAC  00AA               	movwf	?___awtoft+1
 17513  1EAD  0823               	movf	?___ftpack+2,w
 17514  1EAE  00AB               	movwf	?___awtoft+2
 17515  1EAF  0008               	return
 17516  1EB0                     __end_of___awtoft:	
 17517                           
 17518                           	psect	text115
 17519  1608                     __ptext115:	
 17520 ;; *************** function ___ftpack *****************
 17521 ;; Defined at:
 17522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17523 ;; Parameters:    Size  Location     Type
 17524 ;;  arg             3    1[BANK0 ] unsigned um
 17525 ;;  exp             1    4[BANK0 ] unsigned char 
 17526 ;;  sign            1    5[BANK0 ] unsigned char 
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;		None
 17529 ;; Return value:  Size  Location     Type
 17530 ;;                  3    1[BANK0 ] float 
 17531 ;; Registers used:
 17532 ;;		wreg, status,2, status,0
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17538 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;Total ram usage:        8 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    5
 17545 ;; This function calls:
 17546 ;;		Nothing
 17547 ;; This function is called by:
 17548 ;;		___awtoft
 17549 ;;		___ftadd
 17550 ;;		___ftdiv
 17551 ;;		___ftmul
 17552 ;; This function uses a non-reentrant model
 17553 ;;
 17554                           
 17555                           
 17556                           ;psect for function ___ftpack
 17557  1608                     ___ftpack:	
 17558                           
 17559                           ;incstack = 0
 17560                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17561  1608  0020               	movlb	0	; select bank0
 17562  1609  0824               	movf	___ftpack@exp,w
 17563  160A  1903               	btfsc	3,2
 17564  160B  2E11               	goto	l6227
 17565  160C  0823               	movf	___ftpack@arg+2,w
 17566  160D  0422               	iorwf	___ftpack@arg+1,w
 17567  160E  0421               	iorwf	___ftpack@arg,w
 17568  160F  1D03               	skipz
 17569  1610  2E22               	goto	l6233
 17570  1611                     l6227:	
 17571  1611  3000               	movlw	0
 17572  1612  00A1               	movwf	?___ftpack
 17573  1613  3000               	movlw	0
 17574  1614  00A2               	movwf	?___ftpack+1
 17575  1615  3000               	movlw	0
 17576  1616  00A3               	movwf	?___ftpack+2
 17577  1617  0008               	return
 17578  1618                     l6231:	
 17579  1618  3001               	movlw	1
 17580  1619  00A6               	movwf	??___ftpack
 17581  161A  0826               	movf	??___ftpack,w
 17582  161B  07A4               	addwf	___ftpack@exp,f
 17583  161C  3001               	movlw	1
 17584  161D                     u4985:	
 17585  161D  36A3               	lsrf	___ftpack@arg+2,f
 17586  161E  0CA2               	rrf	___ftpack@arg+1,f
 17587  161F  0CA1               	rrf	___ftpack@arg,f
 17588  1620  0B89               	decfsz	9,f
 17589  1621  2E1D               	goto	u4985
 17590  1622                     l6233:	
 17591  1622  30FE               	movlw	254
 17592  1623  0523               	andwf	___ftpack@arg+2,w
 17593  1624  1903               	btfsc	3,2
 17594  1625  2E3B               	goto	l3157
 17595  1626  2E18               	goto	l6231
 17596  1627                     l6235:	
 17597  1627  3001               	movlw	1
 17598  1628  00A6               	movwf	??___ftpack
 17599  1629  0826               	movf	??___ftpack,w
 17600  162A  07A4               	addwf	___ftpack@exp,f
 17601  162B  3001               	movlw	1
 17602  162C  07A1               	addwf	___ftpack@arg,f
 17603  162D  3000               	movlw	0
 17604  162E  1803               	skipnc
 17605  162F  3001               	movlw	1
 17606  1630  07A2               	addwf	___ftpack@arg+1,f
 17607  1631  3000               	movlw	0
 17608  1632  1803               	skipnc
 17609  1633  3001               	movlw	1
 17610  1634  07A3               	addwf	___ftpack@arg+2,f
 17611  1635  3001               	movlw	1
 17612  1636                     u5005:	
 17613  1636  36A3               	lsrf	___ftpack@arg+2,f
 17614  1637  0CA2               	rrf	___ftpack@arg+1,f
 17615  1638  0CA1               	rrf	___ftpack@arg,f
 17616  1639  0B89               	decfsz	9,f
 17617  163A  2E36               	goto	u5005
 17618  163B                     l3157:	
 17619  163B  30FF               	movlw	255
 17620  163C  0523               	andwf	___ftpack@arg+2,w
 17621  163D  1903               	btfsc	3,2
 17622  163E  2E48               	goto	l6243
 17623  163F  2E27               	goto	l6235
 17624  1640                     l6241:	
 17625  1640  3001               	movlw	1
 17626  1641  02A4               	subwf	___ftpack@exp,f
 17627  1642  3001               	movlw	1
 17628  1643                     u5025:	
 17629  1643  35A1               	lslf	___ftpack@arg,f
 17630  1644  0DA2               	rlf	___ftpack@arg+1,f
 17631  1645  0DA3               	rlf	___ftpack@arg+2,f
 17632  1646  0B89               	decfsz	9,f
 17633  1647  2E43               	goto	u5025
 17634  1648                     l6243:	
 17635  1648  1FA2               	btfss	___ftpack@arg+1,7
 17636  1649  2E40               	goto	l6241
 17637  164A  1824               	btfsc	___ftpack@exp,0
 17638  164B  2E52               	goto	l3163
 17639  164C  30FF               	movlw	255
 17640  164D  05A1               	andwf	___ftpack@arg,f
 17641  164E  307F               	movlw	127
 17642  164F  05A2               	andwf	___ftpack@arg+1,f
 17643  1650  30FF               	movlw	255
 17644  1651  05A3               	andwf	___ftpack@arg+2,f
 17645  1652                     l3163:	
 17646  1652  1003               	clrc
 17647  1653  0CA4               	rrf	___ftpack@exp,f
 17648  1654  0824               	movf	___ftpack@exp,w
 17649  1655  00A6               	movwf	??___ftpack
 17650  1656  01A7               	clrf	??___ftpack+1
 17651  1657  01A8               	clrf	??___ftpack+2
 17652  1658  3010               	movlw	16
 17653  1659                     u5055:	
 17654  1659  35A6               	lslf	??___ftpack,f
 17655  165A  0DA7               	rlf	??___ftpack+1,f
 17656  165B  0DA8               	rlf	??___ftpack+2,f
 17657  165C  0B89               	decfsz	9,f
 17658  165D  2E59               	goto	u5055
 17659  165E  0826               	movf	??___ftpack,w
 17660  165F  04A1               	iorwf	___ftpack@arg,f
 17661  1660  0827               	movf	??___ftpack+1,w
 17662  1661  04A2               	iorwf	___ftpack@arg+1,f
 17663  1662  0828               	movf	??___ftpack+2,w
 17664  1663  04A3               	iorwf	___ftpack@arg+2,f
 17665  1664  0825               	movf	___ftpack@sign,w
 17666  1665  1903               	btfsc	3,2
 17667  1666  0008               	return
 17668  1667  17A3               	bsf	___ftpack@arg+2,7
 17669  1668  0008               	return
 17670  1669                     __end_of___ftpack:	
 17671                           
 17672                           	psect	text116
 17673  1BD3                     __ptext116:	
 17674 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17675 ;; Defined at:
 17676 ;;		line 67 in file "../src/Dimmer_B1.c"
 17677 ;; Parameters:    Size  Location     Type
 17678 ;;  lights          1    wreg     unsigned char 
 17679 ;; Auto vars:     Size  Location     Type
 17680 ;;  lights          1    3[BANK0 ] unsigned char 
 17681 ;;  value           1    2[BANK0 ] unsigned char 
 17682 ;; Return value:  Size  Location     Type
 17683 ;;                  1    wreg      unsigned char 
 17684 ;; Registers used:
 17685 ;;		wreg, status,2
 17686 ;; Tracked objects:
 17687 ;;		On entry : 0/0
 17688 ;;		On exit  : 0/0
 17689 ;;		Unchanged: 0/0
 17690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;Total ram usage:        3 bytes
 17696 ;; Hardware stack levels used:    1
 17697 ;; Hardware stack levels required when called:    5
 17698 ;; This function calls:
 17699 ;;		Nothing
 17700 ;; This function is called by:
 17701 ;;		_setDimmerLights_Dimming
 17702 ;; This function uses a non-reentrant model
 17703 ;;
 17704                           
 17705                           
 17706                           ;psect for function _getDimmerIntr_DimmingValue
 17707  1BD3                     _getDimmerIntr_DimmingValue:	
 17708                           
 17709                           ;incstack = 0
 17710                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17711                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17712  1BD3  0020               	movlb	0	; select bank0
 17713  1BD4  00A3               	movwf	getDimmerIntr_DimmingValue@lights
 17714                           
 17715                           ;Dimmer_B1.c: 68: char value = 0;
 17716  1BD5  01A2               	clrf	getDimmerIntr_DimmingValue@value
 17717                           
 17718                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17719  1BD6  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17720  1BD7  3A01               	xorlw	1
 17721  1BD8  1D03               	skipz
 17722  1BD9  2BDD               	goto	l7061
 17723                           
 17724                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17725  1BDA  0021               	movlb	1	; select bank1
 17726  1BDB  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 17727  1BDC  2BE3               	goto	L10
 17728  1BDD                     l7061:	
 17729                           ;Dimmer_B1.c: 72: }
 17730                           
 17731                           
 17732                           ;Dimmer_B1.c: 75: else if (lights == 2) {
 17733  1BDD  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17734  1BDE  3A02               	xorlw	2
 17735  1BDF  1D03               	skipz
 17736  1BE0  2BE7               	goto	l752
 17737                           
 17738                           ;Dimmer_B1.c: 76: value = DimmerIntr2.DimmingValue;
 17739  1BE1  0021               	movlb	1	; select bank1
 17740  1BE2  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 17741  1BE3                     L10:	
 17742  1BE3  0020               	movlb	0	; select bank0
 17743  1BE4  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17744  1BE5  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17745  1BE6  00A2               	movwf	getDimmerIntr_DimmingValue@value
 17746  1BE7                     l752:	
 17747                           
 17748                           ;Dimmer_B1.c: 77: }
 17749                           ;Dimmer_B1.c: 84: return value;
 17750  1BE7  0822               	movf	getDimmerIntr_DimmingValue@value,w
 17751  1BE8  0008               	return
 17752  1BE9                     __end_of_getDimmerIntr_DimmingValue:	
 17753                           
 17754                           	psect	text117
 17755  121E                     __ptext117:	
 17756 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17757 ;; Defined at:
 17758 ;;		line 916 in file "../src/Dimmer_B1.c"
 17759 ;; Parameters:    Size  Location     Type
 17760 ;;  lights          1    wreg     unsigned char 
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  lights          1    6[BANK0 ] unsigned char 
 17763 ;;  allow           1    7[BANK0 ] unsigned char 
 17764 ;; Return value:  Size  Location     Type
 17765 ;;                  1    wreg      unsigned char 
 17766 ;; Registers used:
 17767 ;;		wreg, status,2, status,0, pclath, cstack
 17768 ;; Tracked objects:
 17769 ;;		On entry : 0/0
 17770 ;;		On exit  : 0/0
 17771 ;;		Unchanged: 0/0
 17772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;Total ram usage:        6 bytes
 17778 ;; Hardware stack levels used:    1
 17779 ;; Hardware stack levels required when called:    6
 17780 ;; This function calls:
 17781 ;;		_getLoad_OK
 17782 ;; This function is called by:
 17783 ;;		_setDimmerLights_Main
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           
 17788                           ;psect for function _getDimmerLights_Allow_Condition
 17789  121E                     _getDimmerLights_Allow_Condition:	
 17790                           
 17791                           ;incstack = 0
 17792                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17793                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17794  121E  0020               	movlb	0	; select bank0
 17795  121F  00A6               	movwf	getDimmerLights_Allow_Condition@lights
 17796                           
 17797                           ;Dimmer_B1.c: 917: char allow = 0;
 17798  1220  01A7               	clrf	getDimmerLights_Allow_Condition@allow
 17799                           
 17800                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17801  1221  01A3               	clrf	_getDimmerLights_Allow_Condition$2375
 17802  1222  0AA3               	incf	_getDimmerLights_Allow_Condition$2375,f
 17803  1223  3199  217F  3192   	fcall	_getLoad_OK
 17804  1226  3800               	iorlw	0
 17805  1227  1D03               	skipz
 17806  1228  2A2E               	goto	l7391
 17807  1229  0022               	movlb	2	; select bank2
 17808  122A  18B9               	btfsc	_Dimmer^(0+256),1
 17809  122B  2A2E               	goto	l7391
 17810  122C  0020               	movlb	0	; select bank0
 17811  122D  01A3               	clrf	_getDimmerLights_Allow_Condition$2375
 17812  122E                     l7391:	
 17813  122E  0020               	movlb	0	; select bank0
 17814  122F  0823               	movf	_getDimmerLights_Allow_Condition$2375,w
 17815  1230  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17816  1231  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17817  1232  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17818                           
 17819                           ;Dimmer_B1.c: 927: if (allow == 0) {
 17820  1233  08A7               	movf	getDimmerLights_Allow_Condition@allow,f
 17821  1234  1D03               	skipz
 17822  1235  2A5A               	goto	l7415
 17823                           
 17824                           ;Dimmer_B1.c: 928: if (lights == 1) {
 17825  1236  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17826  1237  3A01               	xorlw	1
 17827  1238  1D03               	skipz
 17828  1239  2A47               	goto	l7405
 17829                           
 17830                           ;Dimmer_B1.c: 929: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17831  123A  01A4               	clrf	_getDimmerLights_Allow_Condition$2376
 17832  123B  0AA4               	incf	_getDimmerLights_Allow_Condition$2376,f
 17833  123C  0023               	movlb	3	; select bank3
 17834  123D  1A50               	btfsc	_DimmerLights2^(0+384),4
 17835  123E  2A44               	goto	l7403
 17836  123F  0021               	movlb	1	; select bank1
 17837  1240  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 17838  1241  2A44               	goto	l7403
 17839  1242  0020               	movlb	0	; select bank0
 17840  1243  01A4               	clrf	_getDimmerLights_Allow_Condition$2376
 17841  1244                     l7403:	
 17842  1244  0020               	movlb	0	; select bank0
 17843  1245  0824               	movf	_getDimmerLights_Allow_Condition$2376,w
 17844  1246  2A57               	goto	L11
 17845  1247                     l7405:	
 17846                           ;Dimmer_B1.c: 930: } else if (lights == 2) {
 17847                           
 17848  1247  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17849  1248  3A02               	xorlw	2
 17850  1249  1D03               	skipz
 17851  124A  2A5A               	goto	l7415
 17852                           
 17853                           ;Dimmer_B1.c: 931: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17854  124B  01A5               	clrf	_getDimmerLights_Allow_Condition$2377
 17855  124C  0AA5               	incf	_getDimmerLights_Allow_Condition$2377,f
 17856  124D  0022               	movlb	2	; select bank2
 17857  124E  1A68               	btfsc	_DimmerLights1^(0+256),4
 17858  124F  2A55               	goto	l7413
 17859  1250  0021               	movlb	1	; select bank1
 17860  1251  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 17861  1252  2A55               	goto	l7413
 17862  1253  0020               	movlb	0	; select bank0
 17863  1254  01A5               	clrf	_getDimmerLights_Allow_Condition$2377
 17864  1255                     l7413:	
 17865  1255  0020               	movlb	0	; select bank0
 17866  1256  0825               	movf	_getDimmerLights_Allow_Condition$2377,w
 17867  1257                     L11:	
 17868  1257  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17869  1258  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17870  1259  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17871  125A                     l7415:	
 17872                           
 17873                           ;Dimmer_B1.c: 932: }
 17874                           ;Dimmer_B1.c: 933: }
 17875                           ;Dimmer_B1.c: 950: return allow;
 17876  125A  0827               	movf	getDimmerLights_Allow_Condition@allow,w
 17877  125B  0008               	return
 17878  125C                     __end_of_getDimmerLights_Allow_Condition:	
 17879                           
 17880                           	psect	text118
 17881  197F                     __ptext118:	
 17882 ;; *************** function _getLoad_OK *****************
 17883 ;; Defined at:
 17884 ;;		line 272 in file "../src/OverLoad_B1.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;		None
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;  ok              1    1[BANK0 ] unsigned char 
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  1    wreg      unsigned char 
 17891 ;; Registers used:
 17892 ;;		wreg, status,2
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;Total ram usage:        1 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    5
 17905 ;; This function calls:
 17906 ;;		Nothing
 17907 ;; This function is called by:
 17908 ;;		_DimmerLights_Main
 17909 ;;		_getDimmerLights_Allow_Condition
 17910 ;; This function uses a non-reentrant model
 17911 ;;
 17912                           
 17913                           
 17914                           ;psect for function _getLoad_OK
 17915  197F                     _getLoad_OK:	
 17916                           
 17917                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17918                           
 17919                           ;incstack = 0
 17920                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17921  197F  3000               	movlw	0
 17922  1980  0022               	movlb	2	; select bank2
 17923  1981  1BC0               	btfsc	_Load^(0+256),7
 17924  1982  3001               	movlw	1
 17925  1983  0020               	movlb	0	; select bank0
 17926  1984  00A1               	movwf	getLoad_OK@ok
 17927                           
 17928                           ;OverLoad_B1.c: 274: return ok;
 17929  1985  0821               	movf	getLoad_OK@ok,w
 17930  1986  0008               	return
 17931  1987                     __end_of_getLoad_OK:	
 17932                           
 17933                           	psect	text119
 17934  105A                     __ptext119:	
 17935 ;; *************** function _getMain_All_Error_Status *****************
 17936 ;; Defined at:
 17937 ;;		line 424 in file "../src/Main_B1.c"
 17938 ;; Parameters:    Size  Location     Type
 17939 ;;  command         1    wreg     unsigned char 
 17940 ;; Auto vars:     Size  Location     Type
 17941 ;;  command         1    6[BANK0 ] unsigned char 
 17942 ;;  status          1    7[BANK0 ] unsigned char 
 17943 ;; Return value:  Size  Location     Type
 17944 ;;                  1    wreg      unsigned char 
 17945 ;; Registers used:
 17946 ;;		wreg, status,2, status,0
 17947 ;; Tracked objects:
 17948 ;;		On entry : 0/0
 17949 ;;		On exit  : 0/0
 17950 ;;		Unchanged: 0/0
 17951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17953 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;Total ram usage:        7 bytes
 17957 ;; Hardware stack levels used:    1
 17958 ;; Hardware stack levels required when called:    5
 17959 ;; This function calls:
 17960 ;;		Nothing
 17961 ;; This function is called by:
 17962 ;;		_DimmerLights_Main
 17963 ;;		_Exception_Main
 17964 ;;		_Load_Main
 17965 ;;		_setTemp_Main
 17966 ;;		_getRxData
 17967 ;;		_setSw_Main
 17968 ;; This function uses a non-reentrant model
 17969 ;;
 17970                           
 17971                           
 17972                           ;psect for function _getMain_All_Error_Status
 17973  105A                     _getMain_All_Error_Status:	
 17974                           
 17975                           ;incstack = 0
 17976                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17977                           ;getMain_All_Error_Status@command stored from wreg
 17978  105A  0020               	movlb	0	; select bank0
 17979  105B  00A6               	movwf	getMain_All_Error_Status@command
 17980                           
 17981                           ;Main_B1.c: 425: char status = 0;
 17982  105C  01A7               	clrf	getMain_All_Error_Status@status
 17983                           
 17984                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17985  105D  08A7               	movf	getMain_All_Error_Status@status,f
 17986  105E  1D03               	skipz
 17987  105F  2874               	goto	l9291
 17988  1060  0826               	movf	getMain_All_Error_Status@command,w
 17989  1061  3A02               	xorlw	2
 17990  1062  1903               	skipnz
 17991  1063  2874               	goto	l9291
 17992                           
 17993                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17994  1064  0021               	movlb	1	; select bank1
 17995  1065  18DB               	btfsc	_Temp^(0+128),1
 17996  1066  286B               	goto	l9289
 17997  1067  0020               	movlb	0	; select bank0
 17998  1068  01A2               	clrf	_getMain_All_Error_Status$3735
 17999  1069  01A3               	clrf	_getMain_All_Error_Status$3735+1
 18000  106A  2870               	goto	l1661
 18001  106B                     l9289:	
 18002  106B  3002               	movlw	2
 18003  106C  0020               	movlb	0	; select bank0
 18004  106D  00A2               	movwf	_getMain_All_Error_Status$3735
 18005  106E  3000               	movlw	0
 18006  106F  00A3               	movwf	_getMain_All_Error_Status$3735+1
 18007  1070                     l1661:	
 18008  1070  0822               	movf	_getMain_All_Error_Status$3735,w
 18009  1071  00A1               	movwf	??_getMain_All_Error_Status
 18010  1072  0821               	movf	??_getMain_All_Error_Status,w
 18011  1073  00A7               	movwf	getMain_All_Error_Status@status
 18012  1074                     l9291:	
 18013                           
 18014                           ;Main_B1.c: 438: }
 18015                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 18016  1074  08A7               	movf	getMain_All_Error_Status@status,f
 18017  1075  1D03               	skipz
 18018  1076  288B               	goto	l1662
 18019  1077  0826               	movf	getMain_All_Error_Status@command,w
 18020  1078  3A03               	xorlw	3
 18021  1079  1903               	skipnz
 18022  107A  288B               	goto	l1662
 18023                           
 18024                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 18025  107B  0022               	movlb	2	; select bank2
 18026  107C  1AC0               	btfsc	_Load^(0+256),5
 18027  107D  2882               	goto	l9299
 18028  107E  0020               	movlb	0	; select bank0
 18029  107F  01A4               	clrf	_getMain_All_Error_Status$3736
 18030  1080  01A5               	clrf	_getMain_All_Error_Status$3736+1
 18031  1081  2887               	goto	l1666
 18032  1082                     l9299:	
 18033  1082  3003               	movlw	3
 18034  1083  0020               	movlb	0	; select bank0
 18035  1084  00A4               	movwf	_getMain_All_Error_Status$3736
 18036  1085  3000               	movlw	0
 18037  1086  00A5               	movwf	_getMain_All_Error_Status$3736+1
 18038  1087                     l1666:	
 18039  1087  0824               	movf	_getMain_All_Error_Status$3736,w
 18040  1088  00A1               	movwf	??_getMain_All_Error_Status
 18041  1089  0821               	movf	??_getMain_All_Error_Status,w
 18042  108A  00A7               	movwf	getMain_All_Error_Status@status
 18043  108B                     l1662:	
 18044                           
 18045                           ;Main_B1.c: 445: }
 18046                           ;Main_B1.c: 455: return status;
 18047  108B  0827               	movf	getMain_All_Error_Status@status,w
 18048  108C  0008               	return
 18049  108D                     __end_of_getMain_All_Error_Status:	
 18050                           
 18051                           	psect	text120
 18052  19B9                     __ptext120:	
 18053 ;; *************** function _DimmerLights_Initialization *****************
 18054 ;; Defined at:
 18055 ;;		line 597 in file "../src/Dimmer_B1.c"
 18056 ;; Parameters:    Size  Location     Type
 18057 ;;		None
 18058 ;; Auto vars:     Size  Location     Type
 18059 ;;		None
 18060 ;; Return value:  Size  Location     Type
 18061 ;;		None               void
 18062 ;; Registers used:
 18063 ;;		wreg, status,2, status,0, pclath, cstack
 18064 ;; Tracked objects:
 18065 ;;		On entry : 0/0
 18066 ;;		On exit  : 0/0
 18067 ;;		Unchanged: 0/0
 18068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18073 ;;Total ram usage:        0 bytes
 18074 ;; Hardware stack levels used:    1
 18075 ;; Hardware stack levels required when called:    6
 18076 ;; This function calls:
 18077 ;;		_DimmerIntr_Initialization
 18078 ;;		_setDimmerLights_Initialization
 18079 ;; This function is called by:
 18080 ;;		_main
 18081 ;; This function uses a non-reentrant model
 18082 ;;
 18083                           
 18084                           
 18085                           ;psect for function _DimmerLights_Initialization
 18086  19B9                     _DimmerLights_Initialization:	
 18087                           
 18088                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 18089                           
 18090                           ;incstack = 0
 18091                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18092  19B9  3001               	movlw	1
 18093  19BA  3190  2000  3199   	fcall	_setDimmerLights_Initialization
 18094                           
 18095                           ;Dimmer_B1.c: 603: setDimmerLights_Initialization(2);
 18096  19BD  3002               	movlw	2
 18097  19BE  3190  2000  3199   	fcall	_setDimmerLights_Initialization
 18098                           
 18099                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 18100  19C1  3190  2029         	fcall	_DimmerIntr_Initialization
 18101  19C3  0008               	return
 18102  19C4                     __end_of_DimmerLights_Initialization:	
 18103                           
 18104                           	psect	text121
 18105  1000                     __ptext121:	
 18106 ;; *************** function _setDimmerLights_Initialization *****************
 18107 ;; Defined at:
 18108 ;;		line 613 in file "../src/Dimmer_B1.c"
 18109 ;; Parameters:    Size  Location     Type
 18110 ;;  lights          1    wreg     unsigned char 
 18111 ;; Auto vars:     Size  Location     Type
 18112 ;;  lights          1    0[COMMON] unsigned char 
 18113 ;; Return value:  Size  Location     Type
 18114 ;;		None               void
 18115 ;; Registers used:
 18116 ;;		wreg
 18117 ;; Tracked objects:
 18118 ;;		On entry : 0/0
 18119 ;;		On exit  : 0/0
 18120 ;;		Unchanged: 0/0
 18121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18126 ;;Total ram usage:        0 bytes
 18127 ;; Hardware stack levels used:    1
 18128 ;; Hardware stack levels required when called:    5
 18129 ;; This function calls:
 18130 ;;		Nothing
 18131 ;; This function is called by:
 18132 ;;		_DimmerLights_Initialization
 18133 ;; This function uses a non-reentrant model
 18134 ;;
 18135                           
 18136                           
 18137                           ;psect for function _setDimmerLights_Initialization
 18138  1000                     _setDimmerLights_Initialization:	
 18139                           
 18140                           ;incstack = 0
 18141                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 18142  1000  0008               	return
 18143  1001                     __end_of_setDimmerLights_Initialization:	
 18144                           
 18145                           	psect	text122
 18146  1029                     __ptext122:	
 18147 ;; *************** function _DimmerIntr_Initialization *****************
 18148 ;; Defined at:
 18149 ;;		line 7 in file "../src/Dimmer_B1.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;		None
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;		None
 18154 ;; Return value:  Size  Location     Type
 18155 ;;		None               void
 18156 ;; Registers used:
 18157 ;;		wreg
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;Total ram usage:        1 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    5
 18170 ;; This function calls:
 18171 ;;		Nothing
 18172 ;; This function is called by:
 18173 ;;		_DimmerLights_Initialization
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _DimmerIntr_Initialization
 18179  1029                     _DimmerIntr_Initialization:	
 18180                           
 18181                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 18182                           
 18183                           ;incstack = 0
 18184                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 18185  1029  3007               	movlw	7
 18186  102A  0020               	movlb	0	; select bank0
 18187  102B  00A1               	movwf	??_DimmerIntr_Initialization
 18188  102C  0821               	movf	??_DimmerIntr_Initialization,w
 18189  102D  0021               	movlb	1	; select bank1
 18190  102E  00B2               	movwf	(_DimmerIntr1^(0+128)+4)
 18191                           
 18192                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(60*0.65));
 18193  102F  3027               	movlw	39
 18194  1030  0020               	movlb	0	; select bank0
 18195  1031  00A1               	movwf	??_DimmerIntr_Initialization
 18196  1032  0821               	movf	??_DimmerIntr_Initialization,w
 18197  1033  0021               	movlb	1	; select bank1
 18198  1034  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 18199                           
 18200                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.65));
 18201  1035  3006               	movlw	6
 18202  1036  0020               	movlb	0	; select bank0
 18203  1037  00A1               	movwf	??_DimmerIntr_Initialization
 18204  1038  0821               	movf	??_DimmerIntr_Initialization,w
 18205  1039  0021               	movlb	1	; select bank1
 18206  103A  00B5               	movwf	(_DimmerIntr1^(0+128)+7)
 18207                           
 18208                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(60*0.65));
 18209  103B  3027               	movlw	39
 18210  103C  0020               	movlb	0	; select bank0
 18211  103D  00A1               	movwf	??_DimmerIntr_Initialization
 18212  103E  0821               	movf	??_DimmerIntr_Initialization,w
 18213  103F  0021               	movlb	1	; select bank1
 18214  1040  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 18215                           
 18216                           ;Dimmer_B1.c: 16: DimmerIntr2.TuneTimeValue = 7;
 18217  1041  3007               	movlw	7
 18218  1042  0020               	movlb	0	; select bank0
 18219  1043  00A1               	movwf	??_DimmerIntr_Initialization
 18220  1044  0821               	movf	??_DimmerIntr_Initialization,w
 18221  1045  0021               	movlb	1	; select bank1
 18222  1046  00BE               	movwf	(_DimmerIntr2^(0+128)+4)
 18223                           
 18224                           ;Dimmer_B1.c: 17: DimmerIntr2.MaxmumValue = ((char)(60*0.65));
 18225  1047  3027               	movlw	39
 18226  1048  0020               	movlb	0	; select bank0
 18227  1049  00A1               	movwf	??_DimmerIntr_Initialization
 18228  104A  0821               	movf	??_DimmerIntr_Initialization,w
 18229  104B  0021               	movlb	1	; select bank1
 18230  104C  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 18231                           
 18232                           ;Dimmer_B1.c: 18: DimmerIntr2.MinimumValue = ((char)(10*0.65));
 18233  104D  3006               	movlw	6
 18234  104E  0020               	movlb	0	; select bank0
 18235  104F  00A1               	movwf	??_DimmerIntr_Initialization
 18236  1050  0821               	movf	??_DimmerIntr_Initialization,w
 18237  1051  0021               	movlb	1	; select bank1
 18238  1052  00C1               	movwf	(_DimmerIntr2^(0+128)+7)
 18239                           
 18240                           ;Dimmer_B1.c: 19: DimmerIntr2.DimmingValue = ((char)(60*0.65));
 18241  1053  3027               	movlw	39
 18242  1054  0020               	movlb	0	; select bank0
 18243  1055  00A1               	movwf	??_DimmerIntr_Initialization
 18244  1056  0821               	movf	??_DimmerIntr_Initialization,w
 18245  1057  0021               	movlb	1	; select bank1
 18246  1058  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 18247  1059  0008               	return
 18248  105A                     __end_of_DimmerIntr_Initialization:	
 18249                           
 18250                           	psect	text123
 18251  1977                     __ptext123:	
 18252 ;; *************** function _DelayOff_Main *****************
 18253 ;; Defined at:
 18254 ;;		line 41 in file "../src/DelayOff_B1.c"
 18255 ;; Parameters:    Size  Location     Type
 18256 ;;		None
 18257 ;; Auto vars:     Size  Location     Type
 18258 ;;		None
 18259 ;; Return value:  Size  Location     Type
 18260 ;;		None               void
 18261 ;; Registers used:
 18262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18263 ;; Tracked objects:
 18264 ;;		On entry : 0/0
 18265 ;;		On exit  : 0/0
 18266 ;;		Unchanged: 0/0
 18267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18272 ;;Total ram usage:        0 bytes
 18273 ;; Hardware stack levels used:    1
 18274 ;; Hardware stack levels required when called:    9
 18275 ;; This function calls:
 18276 ;;		_DlyOff_Main
 18277 ;; This function is called by:
 18278 ;;		_main
 18279 ;; This function uses a non-reentrant model
 18280 ;;
 18281                           
 18282                           
 18283                           ;psect for function _DelayOff_Main
 18284  1977                     _DelayOff_Main:	
 18285                           
 18286                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18287                           
 18288                           ;incstack = 0
 18289                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18290  1977  3001               	movlw	1
 18291  1978  3189  21C3  3199   	fcall	_DlyOff_Main
 18292                           
 18293                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18294  197B  3002               	movlw	2
 18295  197C  3189  21C3         	fcall	_DlyOff_Main
 18296  197E  0008               	return
 18297  197F                     __end_of_DelayOff_Main:	
 18298                           
 18299                           	psect	text124
 18300  09C3                     __ptext124:	
 18301 ;; *************** function _DlyOff_Main *****************
 18302 ;; Defined at:
 18303 ;;		line 61 in file "../src/DelayOff_B1.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;  sw              1    wreg     unsigned char 
 18306 ;; Auto vars:     Size  Location     Type
 18307 ;;  sw              1   72[BANK0 ] unsigned char 
 18308 ;; Return value:  Size  Location     Type
 18309 ;;		None               void
 18310 ;; Registers used:
 18311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18312 ;; Tracked objects:
 18313 ;;		On entry : 0/0
 18314 ;;		On exit  : 0/0
 18315 ;;		Unchanged: 0/0
 18316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;Total ram usage:        3 bytes
 18322 ;; Hardware stack levels used:    1
 18323 ;; Hardware stack levels required when called:    8
 18324 ;; This function calls:
 18325 ;;		_DelayOffPointSelect
 18326 ;;		_getDimmerLights_Status
 18327 ;;		_setDimmerLights_SwOff
 18328 ;;		_setDimmerLights_SwOn
 18329 ;;		_setProductData
 18330 ;; This function is called by:
 18331 ;;		_DelayOff_Main
 18332 ;; This function uses a non-reentrant model
 18333 ;;
 18334                           
 18335                           
 18336                           ;psect for function _DlyOff_Main
 18337  09C3                     _DlyOff_Main:	
 18338                           
 18339                           ;incstack = 0
 18340                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18341                           ;DlyOff_Main@sw stored from wreg
 18342  09C3  0020               	movlb	0	; select bank0
 18343  09C4  00E8               	movwf	DlyOff_Main@sw
 18344                           
 18345                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18346  09C5  0868               	movf	DlyOff_Main@sw,w
 18347  09C6  319B  23E9  3189   	fcall	_DelayOffPointSelect
 18348                           
 18349                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18350  09C9  0021               	movlb	1	; select bank1
 18351  09CA  084D               	movf	_DelayOff^(0+128),w
 18352  09CB  0086               	movwf	6
 18353  09CC  3001               	movlw	1	; select bank2/3
 18354  09CD  0087               	movwf	7
 18355  09CE  1C81               	btfss	1,1
 18356  09CF  0008               	return
 18357                           
 18358                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18359  09D0  084D               	movf	_DelayOff^(0+128),w
 18360  09D1  3E02               	addlw	2
 18361  09D2  0086               	movwf	6
 18362  09D3  3001               	movlw	1	; select bank2/3
 18363  09D4  0087               	movwf	7
 18364  09D5  3001               	movlw	1
 18365  09D6  0781               	addwf	1,f
 18366  09D7  3141               	addfsr 1,1
 18367  09D8  1803               	skipnc
 18368  09D9  0A81               	incf	1,f
 18369                           
 18370                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18371  09DA  084D               	movf	_DelayOff^(0+128),w
 18372  09DB  3E02               	addlw	2
 18373  09DC  0086               	movwf	6
 18374  09DD  3001               	movlw	1	; select bank2/3
 18375  09DE  0087               	movwf	7
 18376  09DF  3F40               	moviw [0]fsr1
 18377  09E0  0020               	movlb	0	; select bank0
 18378  09E1  00E6               	movwf	??_DlyOff_Main
 18379  09E2  3F41               	moviw [1]fsr1
 18380  09E3  00E7               	movwf	??_DlyOff_Main+1
 18381  09E4  300B               	movlw	11
 18382  09E5  0267               	subwf	??_DlyOff_Main+1,w
 18383  09E6  30B8               	movlw	184
 18384  09E7  1903               	skipnz
 18385  09E8  0266               	subwf	??_DlyOff_Main,w
 18386  09E9  1C03               	skipc
 18387  09EA  0008               	return
 18388                           
 18389                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18390  09EB  0021               	movlb	1	; select bank1
 18391  09EC  084D               	movf	_DelayOff^(0+128),w
 18392  09ED  3E02               	addlw	2
 18393  09EE  0086               	movwf	6
 18394  09EF  3001               	movlw	1	; select bank2/3
 18395  09F0  0087               	movwf	7
 18396  09F1  3000               	movlw	0
 18397  09F2  3FC0               	movwi [0]fsr1
 18398  09F3  3FC1               	movwi [1]fsr1
 18399                           
 18400                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18401  09F4  3001               	movlw	1
 18402  09F5  0020               	movlb	0	; select bank0
 18403  09F6  00E6               	movwf	??_DlyOff_Main
 18404  09F7  0021               	movlb	1	; select bank1
 18405  09F8  084D               	movf	_DelayOff^(0+128),w
 18406  09F9  3E04               	addlw	4
 18407  09FA  0086               	movwf	6
 18408  09FB  3001               	movlw	1	; select bank2/3
 18409  09FC  0087               	movwf	7
 18410  09FD  0020               	movlb	0	; select bank0
 18411  09FE  0866               	movf	??_DlyOff_Main,w
 18412  09FF  0781               	addwf	1,f
 18413                           
 18414                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18415  0A00  0021               	movlb	1	; select bank1
 18416  0A01  084D               	movf	_DelayOff^(0+128),w
 18417  0A02  3E04               	addlw	4
 18418  0A03  0086               	movwf	6
 18419  0A04  3001               	movlw	1	; select bank2/3
 18420  0A05  0087               	movwf	7
 18421  0A06  0A4D               	incf	_DelayOff^(0+128),w
 18422  0A07  0084               	movwf	4
 18423  0A08  3001               	movlw	1	; select bank2/3
 18424  0A09  0085               	movwf	5
 18425  0A0A  0800               	movf	0,w
 18426  0A0B  0201               	subwf	1,w
 18427  0A0C  1C03               	skipc
 18428  0A0D  0008               	return
 18429                           
 18430                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18431  0A0E  084D               	movf	_DelayOff^(0+128),w
 18432  0A0F  3E04               	addlw	4
 18433  0A10  0086               	movwf	6
 18434  0A11  3001               	movlw	1	; select bank2/3
 18435  0A12  0087               	movwf	7
 18436  0A13  0181               	clrf	1
 18437                           
 18438                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18439  0A14  084D               	movf	_DelayOff^(0+128),w
 18440  0A15  0086               	movwf	6
 18441  0A16  3001               	movlw	1	; select bank2/3
 18442  0A17  0087               	movwf	7
 18443  0A18  1081               	bcf	1,1
 18444                           
 18445                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18446  0A19  0020               	movlb	0	; select bank0
 18447  0A1A  0868               	movf	DlyOff_Main@sw,w
 18448  0A1B  319A  225D  3189   	fcall	_getDimmerLights_Status
 18449  0A1E  3A01               	xorlw	1
 18450  0A1F  1D03               	skipz
 18451  0A20  2A2B               	goto	l581
 18452                           
 18453                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18454  0A21  0020               	movlb	0	; select bank0
 18455  0A22  0868               	movf	DlyOff_Main@sw,w
 18456  0A23  3195  25AC  3189   	fcall	_setDimmerLights_SwOn
 18457                           
 18458                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18459  0A26  0020               	movlb	0	; select bank0
 18460  0A27  0868               	movf	DlyOff_Main@sw,w
 18461  0A28  3191  212E  3189   	fcall	_setDimmerLights_SwOff
 18462  0A2B                     l581:	
 18463                           
 18464                           ;DelayOff_B1.c: 78: }
 18465                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18466  0A2B  0020               	movlb	0	; select bank0
 18467  0A2C  01E3               	clrf	setProductData@value
 18468  0A2D  0868               	movf	DlyOff_Main@sw,w
 18469  0A2E  3E1A               	addlw	26
 18470  0A2F  3199  21FC         	fcall	_setProductData
 18471  0A31  0008               	return
 18472  0A32                     __end_of_DlyOff_Main:	
 18473                           
 18474                           	psect	text125
 18475  19FC                     __ptext125:	
 18476 ;; *************** function _setProductData *****************
 18477 ;; Defined at:
 18478 ;;		line 645 in file "../src/Main_B1.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;  address         1    wreg     unsigned char 
 18481 ;;  value           1   67[BANK0 ] unsigned char 
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;  address         1   69[BANK0 ] unsigned char 
 18484 ;; Return value:  Size  Location     Type
 18485 ;;		None               void
 18486 ;; Registers used:
 18487 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18493 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;Total ram usage:        3 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    5
 18500 ;; This function calls:
 18501 ;;		Nothing
 18502 ;; This function is called by:
 18503 ;;		_DlyOff_Main
 18504 ;;		_setDelayOff_GO
 18505 ;;		_setDimmerLights_OnOff
 18506 ;;		_setDimmerLights_Dimming
 18507 ;;		_setTemp_Main
 18508 ;;		_setLog_Code
 18509 ;;		_setControl_Lights_Table
 18510 ;;		_setRFSW_AdjControl
 18511 ;;		_setRF_DimmerLights
 18512 ;; This function uses a non-reentrant model
 18513 ;;
 18514                           
 18515                           
 18516                           ;psect for function _setProductData
 18517  19FC                     _setProductData:	
 18518                           
 18519                           ;incstack = 0
 18520                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18521                           ;setProductData@address stored from wreg
 18522  19FC  0020               	movlb	0	; select bank0
 18523  19FD  00E5               	movwf	setProductData@address
 18524                           
 18525                           ;Main_B1.c: 646: _product.Data[address] = value;
 18526  19FE  0863               	movf	setProductData@value,w
 18527  19FF  00E4               	movwf	??_setProductData
 18528  1A00  0865               	movf	setProductData@address,w
 18529  1A01  3E45               	addlw	__product& (0+255)
 18530  1A02  0086               	movwf	6
 18531  1A03  3002               	movlw	2	; select bank4/5
 18532  1A04  0087               	movwf	7
 18533  1A05  0864               	movf	??_setProductData,w
 18534  1A06  0081               	movwf	1
 18535  1A07  0008               	return
 18536  1A08                     __end_of_setProductData:	
 18537                           
 18538                           	psect	text126
 18539  15AC                     __ptext126:	
 18540 ;; *************** function _setDimmerLights_SwOn *****************
 18541 ;; Defined at:
 18542 ;;		line 653 in file "../src/Dimmer_B1.c"
 18543 ;; Parameters:    Size  Location     Type
 18544 ;;  sw              1    wreg     unsigned char 
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;  sw              1   18[BANK0 ] unsigned char 
 18547 ;;  idle            1   17[BANK0 ] unsigned char 
 18548 ;; Return value:  Size  Location     Type
 18549 ;;		None               void
 18550 ;; Registers used:
 18551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18560 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18561 ;;Total ram usage:        5 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    7
 18564 ;; This function calls:
 18565 ;;		_DimmerLights_SelectPointer
 18566 ;;		_setBuz
 18567 ;; This function is called by:
 18568 ;;		_DlyOff_Main
 18569 ;;		_setControl_Lights_Table
 18570 ;;		_setRFSW_Control
 18571 ;;		_setRFSW_AdjControl
 18572 ;;		_setSw_Main
 18573 ;; This function uses a non-reentrant model
 18574 ;;
 18575                           
 18576                           
 18577                           ;psect for function _setDimmerLights_SwOn
 18578  15AC                     _setDimmerLights_SwOn:	
 18579                           
 18580                           ;incstack = 0
 18581                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18582                           ;setDimmerLights_SwOn@sw stored from wreg
 18583  15AC  0020               	movlb	0	; select bank0
 18584  15AD  00B2               	movwf	setDimmerLights_SwOn@sw
 18585                           
 18586                           ;Dimmer_B1.c: 654: char idle = 0;
 18587  15AE  01B1               	clrf	setDimmerLights_SwOn@idle
 18588                           
 18589                           ;Dimmer_B1.c: 656: if (idle == 0) {
 18590  15AF  08B1               	movf	setDimmerLights_SwOn@idle,f
 18591  15B0  1D03               	skipz
 18592  15B1  2DD6               	goto	l9159
 18593                           
 18594                           ;Dimmer_B1.c: 657: if (sw == 1) {
 18595  15B2  0832               	movf	setDimmerLights_SwOn@sw,w
 18596  15B3  3A01               	xorlw	1
 18597  15B4  1D03               	skipz
 18598  15B5  2DC3               	goto	l9149
 18599                           
 18600                           ;Dimmer_B1.c: 658: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18601  15B6  01AF               	clrf	_setDimmerLights_SwOn$2314
 18602  15B7  0AAF               	incf	_setDimmerLights_SwOn$2314,f
 18603  15B8  0023               	movlb	3	; select bank3
 18604  15B9  1A50               	btfsc	_DimmerLights2^(0+384),4
 18605  15BA  2DC0               	goto	l9147
 18606  15BB  0021               	movlb	1	; select bank1
 18607  15BC  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 18608  15BD  2DC0               	goto	l9147
 18609  15BE  0020               	movlb	0	; select bank0
 18610  15BF  01AF               	clrf	_setDimmerLights_SwOn$2314
 18611  15C0                     l9147:	
 18612  15C0  0020               	movlb	0	; select bank0
 18613  15C1  082F               	movf	_setDimmerLights_SwOn$2314,w
 18614  15C2  2DD3               	goto	L12
 18615  15C3                     l9149:	
 18616                           ;Dimmer_B1.c: 659: } else if (sw == 2) {
 18617                           
 18618  15C3  0832               	movf	setDimmerLights_SwOn@sw,w
 18619  15C4  3A02               	xorlw	2
 18620  15C5  1D03               	skipz
 18621  15C6  2DD6               	goto	l9159
 18622                           
 18623                           ;Dimmer_B1.c: 660: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18624  15C7  01B0               	clrf	_setDimmerLights_SwOn$2323
 18625  15C8  0AB0               	incf	_setDimmerLights_SwOn$2323,f
 18626  15C9  0022               	movlb	2	; select bank2
 18627  15CA  1A68               	btfsc	_DimmerLights1^(0+256),4
 18628  15CB  2DD1               	goto	l9157
 18629  15CC  0021               	movlb	1	; select bank1
 18630  15CD  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 18631  15CE  2DD1               	goto	l9157
 18632  15CF  0020               	movlb	0	; select bank0
 18633  15D0  01B0               	clrf	_setDimmerLights_SwOn$2323
 18634  15D1                     l9157:	
 18635  15D1  0020               	movlb	0	; select bank0
 18636  15D2  0830               	movf	_setDimmerLights_SwOn$2323,w
 18637  15D3                     L12:	
 18638  15D3  00AE               	movwf	??_setDimmerLights_SwOn
 18639  15D4  082E               	movf	??_setDimmerLights_SwOn,w
 18640  15D5  00B1               	movwf	setDimmerLights_SwOn@idle
 18641  15D6                     l9159:	
 18642                           
 18643                           ;Dimmer_B1.c: 661: }
 18644                           ;Dimmer_B1.c: 662: }
 18645                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 18646  15D6  0832               	movf	setDimmerLights_SwOn@sw,w
 18647  15D7  319C  2400  3195   	fcall	_DimmerLights_SelectPointer
 18648                           
 18649                           ;Dimmer_B1.c: 680: if (idle == 0) {
 18650  15DA  0020               	movlb	0	; select bank0
 18651  15DB  08B1               	movf	setDimmerLights_SwOn@idle,f
 18652  15DC  1D03               	skipz
 18653  15DD  0008               	return
 18654                           
 18655                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 18656  15DE  0021               	movlb	1	; select bank1
 18657  15DF  084F               	movf	_DimmerLights^(0+128),w
 18658  15E0  0086               	movwf	6
 18659  15E1  3001               	movlw	1	; select bank2/3
 18660  15E2  0087               	movwf	7
 18661  15E3  1401               	bsf	1,0
 18662                           
 18663                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18664  15E4  0A4F               	incf	_DimmerLights^(0+128),w
 18665  15E5  0086               	movwf	6
 18666  15E6  3001               	movlw	1	; select bank2/3
 18667  15E7  0087               	movwf	7
 18668  15E8  1801               	btfsc	1,0
 18669  15E9  2DFA               	goto	l9167
 18670                           
 18671                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18672  15EA  0A4F               	incf	_DimmerLights^(0+128),w
 18673  15EB  0086               	movwf	6
 18674  15EC  3001               	movlw	1	; select bank2/3
 18675  15ED  0087               	movwf	7
 18676  15EE  1401               	bsf	1,0
 18677                           
 18678                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18679  15EF  084F               	movf	_DimmerLights^(0+128),w
 18680  15F0  0086               	movwf	6
 18681  15F1  3001               	movlw	1	; select bank2/3
 18682  15F2  0087               	movwf	7
 18683  15F3  1481               	bsf	1,1
 18684                           
 18685                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18686  15F4  084F               	movf	_DimmerLights^(0+128),w
 18687  15F5  0086               	movwf	6
 18688  15F6  3001               	movlw	1	; select bank2/3
 18689  15F7  0087               	movwf	7
 18690  15F8  1501               	bsf	1,2
 18691                           
 18692                           ;Dimmer_B1.c: 686: } else {
 18693  15F9  2DFF               	goto	l9169
 18694  15FA                     l9167:	
 18695                           
 18696                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18697  15FA  0A4F               	incf	_DimmerLights^(0+128),w
 18698  15FB  0086               	movwf	6
 18699  15FC  3001               	movlw	1	; select bank2/3
 18700  15FD  0087               	movwf	7
 18701  15FE  1001               	bcf	1,0
 18702  15FF                     l9169:	
 18703                           
 18704                           ;Dimmer_B1.c: 688: }
 18705                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18706  15FF  3064               	movlw	100
 18707  1600  0020               	movlb	0	; select bank0
 18708  1601  00AA               	movwf	setBuz@time
 18709  1602  3000               	movlw	0
 18710  1603  00AB               	movwf	setBuz@time+1
 18711  1604  3001               	movlw	1
 18712  1605  3194  24F8         	fcall	_setBuz
 18713  1607  0008               	return
 18714  1608                     __end_of_setDimmerLights_SwOn:	
 18715                           
 18716                           	psect	text127
 18717  14F8                     __ptext127:	
 18718 ;; *************** function _setBuz *****************
 18719 ;; Defined at:
 18720 ;;		line 22 in file "../src/Buzzer_B1.c"
 18721 ;; Parameters:    Size  Location     Type
 18722 ;;  count           1    wreg     unsigned char 
 18723 ;;  time            2   10[BANK0 ] int 
 18724 ;; Auto vars:     Size  Location     Type
 18725 ;;  count           1   13[BANK0 ] unsigned char 
 18726 ;; Return value:  Size  Location     Type
 18727 ;;		None               void
 18728 ;; Registers used:
 18729 ;;		wreg, status,2, status,0, pclath, cstack
 18730 ;; Tracked objects:
 18731 ;;		On entry : 0/0
 18732 ;;		On exit  : 0/0
 18733 ;;		Unchanged: 0/0
 18734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18735 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18739 ;;Total ram usage:        4 bytes
 18740 ;; Hardware stack levels used:    1
 18741 ;; Hardware stack levels required when called:    6
 18742 ;; This function calls:
 18743 ;;		___awdiv
 18744 ;; This function is called by:
 18745 ;;		_setDimmerLights_SwOn
 18746 ;;		_setDimmerLights_Dimming
 18747 ;;		_my_MainTimer
 18748 ;;		_Exception_Main
 18749 ;;		_setTemp_Main
 18750 ;;		_setLog_Code
 18751 ;;		_setRFSW_Control
 18752 ;;		_setSw_Main
 18753 ;; This function uses a non-reentrant model
 18754 ;;
 18755                           
 18756                           
 18757                           ;psect for function _setBuz
 18758  14F8                     _setBuz:	
 18759                           
 18760                           ;incstack = 0
 18761                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18762                           ;setBuz@count stored from wreg
 18763  14F8  0020               	movlb	0	; select bank0
 18764  14F9  00AD               	movwf	setBuz@count
 18765                           
 18766                           ;Buzzer_B1.c: 23: time /= 20;
 18767  14FA  3014               	movlw	20
 18768  14FB  00A1               	movwf	___awdiv@divisor
 18769  14FC  3000               	movlw	0
 18770  14FD  00A2               	movwf	___awdiv@divisor+1
 18771  14FE  082B               	movf	setBuz@time+1,w
 18772  14FF  01A4               	clrf	___awdiv@dividend+1
 18773  1500  07A4               	addwf	___awdiv@dividend+1,f
 18774  1501  082A               	movf	setBuz@time,w
 18775  1502  01A3               	clrf	___awdiv@dividend
 18776  1503  07A3               	addwf	___awdiv@dividend,f
 18777  1504  3194  24A4  3194   	fcall	___awdiv
 18778  1507  0020               	movlb	0	; select bank0
 18779  1508  0822               	movf	?___awdiv+1,w
 18780  1509  01AB               	clrf	setBuz@time+1
 18781  150A  07AB               	addwf	setBuz@time+1,f
 18782  150B  0821               	movf	?___awdiv,w
 18783  150C  01AA               	clrf	setBuz@time
 18784  150D  07AA               	addwf	setBuz@time,f
 18785                           
 18786                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18787  150E  0022               	movlb	2	; select bank2
 18788  150F  1C2D               	btfss	_Buz1^(0+256),0
 18789  1510  0008               	return
 18790                           
 18791                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18792  1511  18AD               	btfsc	_Buz1^(0+256),1
 18793  1512  2D29               	goto	l98
 18794                           
 18795                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18796  1513  14AD               	bsf	_Buz1^(0+256),1
 18797                           
 18798                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18799  1514  01AE               	clrf	(_Buz1^(0+256)+1)
 18800  1515  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 18801                           
 18802                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18803  1516  0020               	movlb	0	; select bank0
 18804  1517  082D               	movf	setBuz@count,w
 18805  1518  00AC               	movwf	??_setBuz
 18806  1519  082C               	movf	??_setBuz,w
 18807  151A  0022               	movlb	2	; select bank2
 18808  151B  00B0               	movwf	(_Buz1^(0+256)+3)
 18809                           
 18810                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18811  151C  0020               	movlb	0	; select bank0
 18812  151D  082B               	movf	setBuz@time+1,w
 18813  151E  0022               	movlb	2	; select bank2
 18814  151F  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 18815  1520  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 18816  1521  0020               	movlb	0	; select bank0
 18817  1522  082A               	movf	setBuz@time,w
 18818  1523  0022               	movlb	2	; select bank2
 18819  1524  01B3               	clrf	(_Buz1^(0+256)+6)
 18820  1525  07B3               	addwf	(_Buz1^(0+256)+6),f
 18821                           
 18822                           ;Buzzer_B1.c: 30: RB3 = 1;
 18823  1526  0020               	movlb	0	; select bank0
 18824  1527  158D               	bsf	13,3	;volatile
 18825                           
 18826                           ;Buzzer_B1.c: 31: } else {
 18827  1528  0008               	return
 18828  1529                     l98:	
 18829                           
 18830                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18831  1529  19AD               	btfsc	_Buz1^(0+256),3
 18832  152A  2D3D               	goto	l100
 18833                           
 18834                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18835  152B  15AD               	bsf	_Buz1^(0+256),3
 18836                           
 18837                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18838  152C  0020               	movlb	0	; select bank0
 18839  152D  082D               	movf	setBuz@count,w
 18840  152E  00AC               	movwf	??_setBuz
 18841  152F  082C               	movf	??_setBuz,w
 18842  1530  0022               	movlb	2	; select bank2
 18843  1531  00B1               	movwf	(_Buz1^(0+256)+4)
 18844                           
 18845                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18846  1532  0020               	movlb	0	; select bank0
 18847  1533  082B               	movf	setBuz@time+1,w
 18848  1534  0022               	movlb	2	; select bank2
 18849  1535  01B6               	clrf	((_Buz1+1)^(0+256)+8)
 18850  1536  07B6               	addwf	((_Buz1+1)^(0+256)+8),f
 18851  1537  0020               	movlb	0	; select bank0
 18852  1538  082A               	movf	setBuz@time,w
 18853  1539  0022               	movlb	2	; select bank2
 18854  153A  01B5               	clrf	(_Buz1^(0+256)+8)
 18855  153B  07B5               	addwf	(_Buz1^(0+256)+8),f
 18856                           
 18857                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18858  153C  0008               	return
 18859  153D                     l100:	
 18860  153D  1A2D               	btfsc	_Buz1^(0+256),4
 18861  153E  0008               	return
 18862                           
 18863                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18864  153F  162D               	bsf	_Buz1^(0+256),4
 18865                           
 18866                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18867  1540  0020               	movlb	0	; select bank0
 18868  1541  082D               	movf	setBuz@count,w
 18869  1542  00AC               	movwf	??_setBuz
 18870  1543  082C               	movf	??_setBuz,w
 18871  1544  0022               	movlb	2	; select bank2
 18872  1545  00B2               	movwf	(_Buz1^(0+256)+5)
 18873                           
 18874                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18875  1546  0020               	movlb	0	; select bank0
 18876  1547  082B               	movf	setBuz@time+1,w
 18877  1548  0022               	movlb	2	; select bank2
 18878  1549  01B8               	clrf	((_Buz1+1)^(0+256)+10)
 18879  154A  07B8               	addwf	((_Buz1+1)^(0+256)+10),f
 18880  154B  0020               	movlb	0	; select bank0
 18881  154C  082A               	movf	setBuz@time,w
 18882  154D  0022               	movlb	2	; select bank2
 18883  154E  01B7               	clrf	(_Buz1^(0+256)+10)
 18884  154F  07B7               	addwf	(_Buz1^(0+256)+10),f
 18885  1550  0008               	return
 18886  1551                     __end_of_setBuz:	
 18887                           
 18888                           	psect	text128
 18889  14A4                     __ptext128:	
 18890 ;; *************** function ___awdiv *****************
 18891 ;; Defined at:
 18892 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18893 ;; Parameters:    Size  Location     Type
 18894 ;;  divisor         2    1[BANK0 ] int 
 18895 ;;  dividend        2    3[BANK0 ] int 
 18896 ;; Auto vars:     Size  Location     Type
 18897 ;;  quotient        2    8[BANK0 ] int 
 18898 ;;  sign            1    7[BANK0 ] unsigned char 
 18899 ;;  counter         1    6[BANK0 ] unsigned char 
 18900 ;; Return value:  Size  Location     Type
 18901 ;;                  2    1[BANK0 ] int 
 18902 ;; Registers used:
 18903 ;;		wreg, status,2, status,0
 18904 ;; Tracked objects:
 18905 ;;		On entry : 0/0
 18906 ;;		On exit  : 0/0
 18907 ;;		Unchanged: 0/0
 18908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18909 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;Total ram usage:        9 bytes
 18914 ;; Hardware stack levels used:    1
 18915 ;; Hardware stack levels required when called:    5
 18916 ;; This function calls:
 18917 ;;		Nothing
 18918 ;; This function is called by:
 18919 ;;		_setBuz
 18920 ;; This function uses a non-reentrant model
 18921 ;;
 18922                           
 18923                           
 18924                           ;psect for function ___awdiv
 18925  14A4                     ___awdiv:	
 18926                           
 18927                           ;incstack = 0
 18928                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18929  14A4  0020               	movlb	0	; select bank0
 18930  14A5  01A7               	clrf	___awdiv@sign
 18931  14A6  1FA2               	btfss	___awdiv@divisor+1,7
 18932  14A7  2CAF               	goto	l9069
 18933  14A8  09A1               	comf	___awdiv@divisor,f
 18934  14A9  09A2               	comf	___awdiv@divisor+1,f
 18935  14AA  0AA1               	incf	___awdiv@divisor,f
 18936  14AB  1903               	skipnz
 18937  14AC  0AA2               	incf	___awdiv@divisor+1,f
 18938  14AD  01A7               	clrf	___awdiv@sign
 18939  14AE  0AA7               	incf	___awdiv@sign,f
 18940  14AF                     l9069:	
 18941  14AF  1FA4               	btfss	___awdiv@dividend+1,7
 18942  14B0  2CBA               	goto	l9075
 18943  14B1  09A3               	comf	___awdiv@dividend,f
 18944  14B2  09A4               	comf	___awdiv@dividend+1,f
 18945  14B3  0AA3               	incf	___awdiv@dividend,f
 18946  14B4  1903               	skipnz
 18947  14B5  0AA4               	incf	___awdiv@dividend+1,f
 18948  14B6  3001               	movlw	1
 18949  14B7  00A5               	movwf	??___awdiv
 18950  14B8  0825               	movf	??___awdiv,w
 18951  14B9  06A7               	xorwf	___awdiv@sign,f
 18952  14BA                     l9075:	
 18953  14BA  01A8               	clrf	___awdiv@quotient
 18954  14BB  01A9               	clrf	___awdiv@quotient+1
 18955  14BC  0822               	movf	___awdiv@divisor+1,w
 18956  14BD  0421               	iorwf	___awdiv@divisor,w
 18957  14BE  1903               	skipnz
 18958  14BF  2CE9               	goto	l9097
 18959  14C0  01A6               	clrf	___awdiv@counter
 18960  14C1  0AA6               	incf	___awdiv@counter,f
 18961  14C2                     l9085:	
 18962  14C2  1BA2               	btfsc	___awdiv@divisor+1,7
 18963  14C3  2CCE               	goto	l9087
 18964  14C4  3001               	movlw	1
 18965  14C5                     u9945:	
 18966  14C5  35A1               	lslf	___awdiv@divisor,f
 18967  14C6  0DA2               	rlf	___awdiv@divisor+1,f
 18968  14C7  0B89               	decfsz	9,f
 18969  14C8  2CC5               	goto	u9945
 18970  14C9  3001               	movlw	1
 18971  14CA  00A5               	movwf	??___awdiv
 18972  14CB  0825               	movf	??___awdiv,w
 18973  14CC  07A6               	addwf	___awdiv@counter,f
 18974  14CD  2CC2               	goto	l9085
 18975  14CE                     l9087:	
 18976  14CE  3001               	movlw	1
 18977  14CF                     u9965:	
 18978  14CF  35A8               	lslf	___awdiv@quotient,f
 18979  14D0  0DA9               	rlf	___awdiv@quotient+1,f
 18980  14D1  0B89               	decfsz	9,f
 18981  14D2  2CCF               	goto	u9965
 18982  14D3  0822               	movf	___awdiv@divisor+1,w
 18983  14D4  0224               	subwf	___awdiv@dividend+1,w
 18984  14D5  1D03               	skipz
 18985  14D6  2CD9               	goto	u9975
 18986  14D7  0821               	movf	___awdiv@divisor,w
 18987  14D8  0223               	subwf	___awdiv@dividend,w
 18988  14D9                     u9975:	
 18989  14D9  1C03               	skipc
 18990  14DA  2CE0               	goto	l9093
 18991  14DB  0821               	movf	___awdiv@divisor,w
 18992  14DC  02A3               	subwf	___awdiv@dividend,f
 18993  14DD  0822               	movf	___awdiv@divisor+1,w
 18994  14DE  3BA4               	subwfb	___awdiv@dividend+1,f
 18995  14DF  1428               	bsf	___awdiv@quotient,0
 18996  14E0                     l9093:	
 18997  14E0  3001               	movlw	1
 18998  14E1                     u9985:	
 18999  14E1  36A2               	lsrf	___awdiv@divisor+1,f
 19000  14E2  0CA1               	rrf	___awdiv@divisor,f
 19001  14E3  0B89               	decfsz	9,f
 19002  14E4  2CE1               	goto	u9985
 19003  14E5  3001               	movlw	1
 19004  14E6  02A6               	subwf	___awdiv@counter,f
 19005  14E7  1D03               	btfss	3,2
 19006  14E8  2CCE               	goto	l9087
 19007  14E9                     l9097:	
 19008  14E9  0827               	movf	___awdiv@sign,w
 19009  14EA  1903               	btfsc	3,2
 19010  14EB  2CF1               	goto	l9101
 19011  14EC  09A8               	comf	___awdiv@quotient,f
 19012  14ED  09A9               	comf	___awdiv@quotient+1,f
 19013  14EE  0AA8               	incf	___awdiv@quotient,f
 19014  14EF  1903               	skipnz
 19015  14F0  0AA9               	incf	___awdiv@quotient+1,f
 19016  14F1                     l9101:	
 19017  14F1  0829               	movf	___awdiv@quotient+1,w
 19018  14F2  01A2               	clrf	?___awdiv+1
 19019  14F3  07A2               	addwf	?___awdiv+1,f
 19020  14F4  0828               	movf	___awdiv@quotient,w
 19021  14F5  01A1               	clrf	?___awdiv
 19022  14F6  07A1               	addwf	?___awdiv,f
 19023  14F7  0008               	return
 19024  14F8                     __end_of___awdiv:	
 19025                           
 19026                           	psect	text129
 19027  112E                     __ptext129:	
 19028 ;; *************** function _setDimmerLights_SwOff *****************
 19029 ;; Defined at:
 19030 ;;		line 694 in file "../src/Dimmer_B1.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;  sw              1    wreg     unsigned char 
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;  sw              1    3[BANK0 ] unsigned char 
 19035 ;; Return value:  Size  Location     Type
 19036 ;;		None               void
 19037 ;; Registers used:
 19038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19048 ;;Total ram usage:        1 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; Hardware stack levels required when called:    6
 19051 ;; This function calls:
 19052 ;;		_DimmerLights_SelectPointer
 19053 ;; This function is called by:
 19054 ;;		_DlyOff_Main
 19055 ;;		_Exception_Main
 19056 ;;		_setControl_Lights_Table
 19057 ;;		_setRFSW_Control
 19058 ;;		_setRFSW_AdjControl
 19059 ;;		_setSw_Main
 19060 ;; This function uses a non-reentrant model
 19061 ;;
 19062                           
 19063                           
 19064                           ;psect for function _setDimmerLights_SwOff
 19065  112E                     _setDimmerLights_SwOff:	
 19066                           
 19067                           ;incstack = 0
 19068                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19069                           ;setDimmerLights_SwOff@sw stored from wreg
 19070  112E  0020               	movlb	0	; select bank0
 19071  112F  00A3               	movwf	setDimmerLights_SwOff@sw
 19072                           
 19073                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 19074  1130  0823               	movf	setDimmerLights_SwOff@sw,w
 19075  1131  319C  2400  3191   	fcall	_DimmerLights_SelectPointer
 19076                           
 19077                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 19078  1134  0021               	movlb	1	; select bank1
 19079  1135  084F               	movf	_DimmerLights^(0+128),w
 19080  1136  0086               	movwf	6
 19081  1137  3001               	movlw	1	; select bank2/3
 19082  1138  0087               	movwf	7
 19083  1139  1C01               	btfss	1,0
 19084  113A  0008               	return
 19085                           
 19086                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 19087  113B  084F               	movf	_DimmerLights^(0+128),w
 19088  113C  0086               	movwf	6
 19089  113D  3001               	movlw	1	; select bank2/3
 19090  113E  0087               	movwf	7
 19091  113F  1001               	bcf	1,0
 19092                           
 19093                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 19094  1140  0A4F               	incf	_DimmerLights^(0+128),w
 19095  1141  0086               	movwf	6
 19096  1142  3001               	movlw	1	; select bank2/3
 19097  1143  0087               	movwf	7
 19098  1144  1C01               	btfss	1,0
 19099  1145  295C               	goto	l6667
 19100                           
 19101                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 19102  1146  084F               	movf	_DimmerLights^(0+128),w
 19103  1147  0086               	movwf	6
 19104  1148  3001               	movlw	1	; select bank2/3
 19105  1149  0087               	movwf	7
 19106  114A  1D81               	btfss	1,3
 19107  114B  0008               	return
 19108                           
 19109                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 19110  114C  084F               	movf	_DimmerLights^(0+128),w
 19111  114D  0086               	movwf	6
 19112  114E  3001               	movlw	1	; select bank2/3
 19113  114F  0087               	movwf	7
 19114  1150  1181               	bcf	1,3
 19115                           
 19116                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 19117  1151  084F               	movf	_DimmerLights^(0+128),w
 19118  1152  0086               	movwf	6
 19119  1153  3001               	movlw	1	; select bank2/3
 19120  1154  0087               	movwf	7
 19121  1155  1601               	bsf	1,4
 19122                           
 19123                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 19124  1156  084F               	movf	_DimmerLights^(0+128),w
 19125  1157  0086               	movwf	6
 19126  1158  3001               	movlw	1	; select bank2/3
 19127  1159  0087               	movwf	7
 19128  115A  1281               	bcf	1,5
 19129                           
 19130                           ;Dimmer_B1.c: 705: }
 19131                           ;Dimmer_B1.c: 706: } else {
 19132  115B  0008               	return
 19133  115C                     l6667:	
 19134                           
 19135                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 19136  115C  084F               	movf	_DimmerLights^(0+128),w
 19137  115D  0086               	movwf	6
 19138  115E  3001               	movlw	1	; select bank2/3
 19139  115F  0087               	movwf	7
 19140  1160  1481               	bsf	1,1
 19141                           
 19142                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 19143  1161  084F               	movf	_DimmerLights^(0+128),w
 19144  1162  0086               	movwf	6
 19145  1163  3001               	movlw	1	; select bank2/3
 19146  1164  0087               	movwf	7
 19147  1165  1101               	bcf	1,2
 19148  1166  0008               	return
 19149  1167                     __end_of_setDimmerLights_SwOff:	
 19150                           
 19151                           	psect	text130
 19152  1A5D                     __ptext130:	
 19153 ;; *************** function _getDimmerLights_Status *****************
 19154 ;; Defined at:
 19155 ;;		line 1006 in file "../src/Dimmer_B1.c"
 19156 ;; Parameters:    Size  Location     Type
 19157 ;;  lights          1    wreg     unsigned char 
 19158 ;; Auto vars:     Size  Location     Type
 19159 ;;  lights          1    3[BANK0 ] unsigned char 
 19160 ;;  status          1    4[BANK0 ] unsigned char 
 19161 ;; Return value:  Size  Location     Type
 19162 ;;                  1    wreg      unsigned char 
 19163 ;; Registers used:
 19164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19165 ;; Tracked objects:
 19166 ;;		On entry : 0/0
 19167 ;;		On exit  : 0/0
 19168 ;;		Unchanged: 0/0
 19169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19174 ;;Total ram usage:        2 bytes
 19175 ;; Hardware stack levels used:    1
 19176 ;; Hardware stack levels required when called:    6
 19177 ;; This function calls:
 19178 ;;		_DimmerLights_SelectPointer
 19179 ;; This function is called by:
 19180 ;;		_DlyOff_Main
 19181 ;;		_Exception_Main
 19182 ;;		_setControl_Lights_Table
 19183 ;;		_setRFSW_Control
 19184 ;;		_setRFSW_AdjControl
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           
 19189                           ;psect for function _getDimmerLights_Status
 19190  1A5D                     _getDimmerLights_Status:	
 19191                           
 19192                           ;incstack = 0
 19193                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19194                           ;getDimmerLights_Status@lights stored from wreg
 19195  1A5D  0020               	movlb	0	; select bank0
 19196  1A5E  00A3               	movwf	getDimmerLights_Status@lights
 19197                           
 19198                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 19199  1A5F  0823               	movf	getDimmerLights_Status@lights,w
 19200  1A60  319C  2400         	fcall	_DimmerLights_SelectPointer
 19201                           
 19202                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 19203  1A62  0021               	movlb	1	; select bank1
 19204  1A63  0A4F               	incf	_DimmerLights^(0+128),w
 19205  1A64  0086               	movwf	6
 19206  1A65  3001               	movlw	1	; select bank2/3
 19207  1A66  0087               	movwf	7
 19208  1A67  3000               	movlw	0
 19209  1A68  1801               	btfsc	1,0
 19210  1A69  3001               	movlw	1
 19211  1A6A  0020               	movlb	0	; select bank0
 19212  1A6B  00A4               	movwf	getDimmerLights_Status@status
 19213                           
 19214                           ;Dimmer_B1.c: 1009: return status;
 19215  1A6C  0824               	movf	getDimmerLights_Status@status,w
 19216  1A6D  0008               	return
 19217  1A6E                     __end_of_getDimmerLights_Status:	
 19218                           
 19219                           	psect	text131
 19220  1C00                     __ptext131:	
 19221 ;; *************** function _DimmerLights_SelectPointer *****************
 19222 ;; Defined at:
 19223 ;;		line 576 in file "../src/Dimmer_B1.c"
 19224 ;; Parameters:    Size  Location     Type
 19225 ;;  lights          1    wreg     unsigned char 
 19226 ;; Auto vars:     Size  Location     Type
 19227 ;;  lights          1    2[BANK0 ] unsigned char 
 19228 ;; Return value:  Size  Location     Type
 19229 ;;		None               void
 19230 ;; Registers used:
 19231 ;;		wreg
 19232 ;; Tracked objects:
 19233 ;;		On entry : 0/0
 19234 ;;		On exit  : 0/0
 19235 ;;		Unchanged: 0/0
 19236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19241 ;;Total ram usage:        2 bytes
 19242 ;; Hardware stack levels used:    1
 19243 ;; Hardware stack levels required when called:    5
 19244 ;; This function calls:
 19245 ;;		Nothing
 19246 ;; This function is called by:
 19247 ;;		_setDimmerLights_SwOn
 19248 ;;		_setDimmerLights_SwOff
 19249 ;;		_setDimmerLights_DimmingOn
 19250 ;;		_setDimmerLights_Main
 19251 ;;		_getDimmerLights_Status
 19252 ;;		_setDimmerLights_DimmingRun
 19253 ;;		_setDimmerLights_Status
 19254 ;; This function uses a non-reentrant model
 19255 ;;
 19256                           
 19257                           
 19258                           ;psect for function _DimmerLights_SelectPointer
 19259  1C00                     _DimmerLights_SelectPointer:	
 19260                           
 19261                           ;incstack = 0
 19262                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19263                           ;DimmerLights_SelectPointer@lights stored from wreg
 19264  1C00  0020               	movlb	0	; select bank0
 19265  1C01  00A2               	movwf	DimmerLights_SelectPointer@lights
 19266                           
 19267                           ;Dimmer_B1.c: 578: if (lights == 1) {
 19268  1C02  0822               	movf	DimmerLights_SelectPointer@lights,w
 19269  1C03  3A01               	xorlw	1
 19270  1C04  1D03               	skipz
 19271  1C05  2C0C               	goto	l6339
 19272                           
 19273                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 19274  1C06  3068               	movlw	_DimmerLights1& (0+255)
 19275  1C07  00A1               	movwf	??_DimmerLights_SelectPointer
 19276  1C08  0821               	movf	??_DimmerLights_SelectPointer,w
 19277  1C09  0021               	movlb	1	; select bank1
 19278  1C0A  00CF               	movwf	_DimmerLights^(0+128)
 19279                           
 19280                           ;Dimmer_B1.c: 580: }
 19281  1C0B  0008               	return
 19282  1C0C                     l6339:	
 19283                           
 19284                           ;Dimmer_B1.c: 583: else if (lights == 2) {
 19285  1C0C  0020               	movlb	0	; select bank0
 19286  1C0D  0822               	movf	DimmerLights_SelectPointer@lights,w
 19287  1C0E  3A02               	xorlw	2
 19288  1C0F  1D03               	skipz
 19289  1C10  0008               	return
 19290                           
 19291                           ;Dimmer_B1.c: 584: DimmerLights = &DimmerLights2;
 19292  1C11  30D0               	movlw	_DimmerLights2& (0+255)
 19293  1C12  00A1               	movwf	??_DimmerLights_SelectPointer
 19294  1C13  0821               	movf	??_DimmerLights_SelectPointer,w
 19295  1C14  0021               	movlb	1	; select bank1
 19296  1C15  00CF               	movwf	_DimmerLights^(0+128)
 19297  1C16  0008               	return
 19298  1C17                     __end_of_DimmerLights_SelectPointer:	
 19299                           
 19300                           	psect	text132
 19301  196F                     __ptext132:	
 19302 ;; *************** function _DelayOff_Initialization *****************
 19303 ;; Defined at:
 19304 ;;		line 26 in file "../src/DelayOff_B1.c"
 19305 ;; Parameters:    Size  Location     Type
 19306 ;;		None
 19307 ;; Auto vars:     Size  Location     Type
 19308 ;;		None
 19309 ;; Return value:  Size  Location     Type
 19310 ;;		None               void
 19311 ;; Registers used:
 19312 ;;		wreg, status,2, status,0, pclath, cstack
 19313 ;; Tracked objects:
 19314 ;;		On entry : 0/0
 19315 ;;		On exit  : 0/0
 19316 ;;		Unchanged: 0/0
 19317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;Total ram usage:        0 bytes
 19323 ;; Hardware stack levels used:    1
 19324 ;; Hardware stack levels required when called:    7
 19325 ;; This function calls:
 19326 ;;		_DlyOff_Initialization
 19327 ;; This function is called by:
 19328 ;;		_main
 19329 ;; This function uses a non-reentrant model
 19330 ;;
 19331                           
 19332                           
 19333                           ;psect for function _DelayOff_Initialization
 19334  196F                     _DelayOff_Initialization:	
 19335                           
 19336                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19337                           
 19338                           ;incstack = 0
 19339                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19340  196F  3001               	movlw	1
 19341  1970  3199  2156  3199   	fcall	_DlyOff_Initialization
 19342                           
 19343                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19344  1973  3002               	movlw	2
 19345  1974  3199  2156         	fcall	_DlyOff_Initialization
 19346  1976  0008               	return
 19347  1977                     __end_of_DelayOff_Initialization:	
 19348                           
 19349                           	psect	text133
 19350  1956                     __ptext133:	
 19351 ;; *************** function _DlyOff_Initialization *****************
 19352 ;; Defined at:
 19353 ;;		line 56 in file "../src/DelayOff_B1.c"
 19354 ;; Parameters:    Size  Location     Type
 19355 ;;  sw              1    wreg     unsigned char 
 19356 ;; Auto vars:     Size  Location     Type
 19357 ;;  sw              1    3[BANK0 ] unsigned char 
 19358 ;; Return value:  Size  Location     Type
 19359 ;;		None               void
 19360 ;; Registers used:
 19361 ;;		wreg, status,2, status,0, pclath, cstack
 19362 ;; Tracked objects:
 19363 ;;		On entry : 0/0
 19364 ;;		On exit  : 0/0
 19365 ;;		Unchanged: 0/0
 19366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;Total ram usage:        1 bytes
 19372 ;; Hardware stack levels used:    1
 19373 ;; Hardware stack levels required when called:    6
 19374 ;; This function calls:
 19375 ;;		_DelayOffPointSelect
 19376 ;; This function is called by:
 19377 ;;		_DelayOff_Initialization
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381                           
 19382                           ;psect for function _DlyOff_Initialization
 19383  1956                     _DlyOff_Initialization:	
 19384                           
 19385                           ;incstack = 0
 19386                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19387                           ;DlyOff_Initialization@sw stored from wreg
 19388  1956  0020               	movlb	0	; select bank0
 19389  1957  00A3               	movwf	DlyOff_Initialization@sw
 19390                           
 19391                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19392  1958  0823               	movf	DlyOff_Initialization@sw,w
 19393  1959  319B  23E9         	fcall	_DelayOffPointSelect
 19394  195B  0008               	return
 19395  195C                     __end_of_DlyOff_Initialization:	
 19396                           
 19397                           	psect	text134
 19398  1BE9                     __ptext134:	
 19399 ;; *************** function _DelayOffPointSelect *****************
 19400 ;; Defined at:
 19401 ;;		line 7 in file "../src/DelayOff_B1.c"
 19402 ;; Parameters:    Size  Location     Type
 19403 ;;  sw              1    wreg     unsigned char 
 19404 ;; Auto vars:     Size  Location     Type
 19405 ;;  sw              1    2[BANK0 ] unsigned char 
 19406 ;; Return value:  Size  Location     Type
 19407 ;;		None               void
 19408 ;; Registers used:
 19409 ;;		wreg
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;Total ram usage:        2 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    5
 19422 ;; This function calls:
 19423 ;;		Nothing
 19424 ;; This function is called by:
 19425 ;;		_DlyOff_Initialization
 19426 ;;		_DlyOff_Main
 19427 ;;		_setDelayOff_GO
 19428 ;;		_getDelayOff_GO
 19429 ;; This function uses a non-reentrant model
 19430 ;;
 19431                           
 19432                           
 19433                           ;psect for function _DelayOffPointSelect
 19434  1BE9                     _DelayOffPointSelect:	
 19435                           
 19436                           ;incstack = 0
 19437                           ; Regs used in _DelayOffPointSelect: [wreg]
 19438                           ;DelayOffPointSelect@sw stored from wreg
 19439  1BE9  0020               	movlb	0	; select bank0
 19440  1BEA  00A2               	movwf	DelayOffPointSelect@sw
 19441                           
 19442                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19443  1BEB  0822               	movf	DelayOffPointSelect@sw,w
 19444  1BEC  3A01               	xorlw	1
 19445  1BED  1D03               	skipz
 19446  1BEE  2BF5               	goto	l6329
 19447                           
 19448                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19449  1BEF  30D8               	movlw	_DlySw1& (0+255)
 19450  1BF0  00A1               	movwf	??_DelayOffPointSelect
 19451  1BF1  0821               	movf	??_DelayOffPointSelect,w
 19452  1BF2  0021               	movlb	1	; select bank1
 19453  1BF3  00CD               	movwf	_DelayOff^(0+128)
 19454                           
 19455                           ;DelayOff_B1.c: 11: }
 19456  1BF4  0008               	return
 19457  1BF5                     l6329:	
 19458                           
 19459                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19460  1BF5  0020               	movlb	0	; select bank0
 19461  1BF6  0822               	movf	DelayOffPointSelect@sw,w
 19462  1BF7  3A02               	xorlw	2
 19463  1BF8  1D03               	skipz
 19464  1BF9  0008               	return
 19465                           
 19466                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19467  1BFA  30DD               	movlw	_DlySw2& (0+255)
 19468  1BFB  00A1               	movwf	??_DelayOffPointSelect
 19469  1BFC  0821               	movf	??_DelayOffPointSelect,w
 19470  1BFD  0021               	movlb	1	; select bank1
 19471  1BFE  00CD               	movwf	_DelayOff^(0+128)
 19472  1BFF  0008               	return
 19473  1C00                     __end_of_DelayOffPointSelect:	
 19474                           
 19475                           	psect	text135
 19476  1364                     __ptext135:	
 19477 ;; *************** function _Buzzer_Main *****************
 19478 ;; Defined at:
 19479 ;;		line 46 in file "../src/Buzzer_B1.c"
 19480 ;; Parameters:    Size  Location     Type
 19481 ;;		None
 19482 ;; Auto vars:     Size  Location     Type
 19483 ;;		None
 19484 ;; Return value:  Size  Location     Type
 19485 ;;		None               void
 19486 ;; Registers used:
 19487 ;;		wreg, status,2, status,0
 19488 ;; Tracked objects:
 19489 ;;		On entry : 0/0
 19490 ;;		On exit  : 0/0
 19491 ;;		Unchanged: 0/0
 19492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19497 ;;Total ram usage:        1 bytes
 19498 ;; Hardware stack levels used:    1
 19499 ;; Hardware stack levels required when called:    5
 19500 ;; This function calls:
 19501 ;;		Nothing
 19502 ;; This function is called by:
 19503 ;;		_main
 19504 ;; This function uses a non-reentrant model
 19505 ;;
 19506                           
 19507                           
 19508                           ;psect for function _Buzzer_Main
 19509  1364                     _Buzzer_Main:	
 19510                           
 19511                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19512                           
 19513                           ;incstack = 0
 19514                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19515  1364  0022               	movlb	2	; select bank2
 19516  1365  1CAD               	btfss	_Buz1^(0+256),1
 19517  1366  0008               	return
 19518                           
 19519                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19520  1367  3001               	movlw	1
 19521  1368  07AE               	addwf	(_Buz1^(0+256)+1),f
 19522  1369  3000               	movlw	0
 19523  136A  3DAF               	addwfc	((_Buz1+1)^(0+256)+1),f
 19524                           
 19525                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19526  136B  0834               	movf	((_Buz1+1)^(0+256)+6),w
 19527  136C  022F               	subwf	((_Buz1+1)^(0+256)+1),w
 19528  136D  1D03               	skipz
 19529  136E  2B71               	goto	u8865
 19530  136F  0833               	movf	(_Buz1^(0+256)+6),w
 19531  1370  022E               	subwf	(_Buz1^(0+256)+1),w
 19532  1371                     u8865:	
 19533  1371  1C03               	skipc
 19534  1372  0008               	return
 19535                           
 19536                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19537  1373  01AE               	clrf	(_Buz1^(0+256)+1)
 19538  1374  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 19539                           
 19540                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19541  1375  12AD               	bcf	_Buz1^(0+256),5
 19542  1376  0020               	movlb	0	; select bank0
 19543  1377  1D8D               	btfss	13,3	;volatile
 19544  1378  2B7B               	goto	l8397
 19545  1379  0022               	movlb	2	; select bank2
 19546  137A  16AD               	bsf	_Buz1^(0+256),5
 19547  137B                     l8397:	
 19548                           
 19549                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19550  137B  0022               	movlb	2	; select bank2
 19551  137C  1AAD               	btfsc	_Buz1^(0+256),5
 19552  137D  2BA7               	goto	l108
 19553                           
 19554                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19555  137E  08B0               	movf	(_Buz1^(0+256)+3),f
 19556  137F  1D03               	skipz
 19557  1380  2BA3               	goto	l109
 19558                           
 19559                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19560  1381  1DAD               	btfss	_Buz1^(0+256),3
 19561  1382  2B91               	goto	l110
 19562                           
 19563                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19564  1383  11AD               	bcf	_Buz1^(0+256),3
 19565                           
 19566                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19567  1384  0831               	movf	(_Buz1^(0+256)+4),w
 19568  1385  0020               	movlb	0	; select bank0
 19569  1386  00A1               	movwf	??_Buzzer_Main
 19570  1387  0821               	movf	??_Buzzer_Main,w
 19571  1388  0022               	movlb	2	; select bank2
 19572  1389  00B0               	movwf	(_Buz1^(0+256)+3)
 19573                           
 19574                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19575  138A  0836               	movf	((_Buz1+1)^(0+256)+8),w
 19576  138B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19577  138C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19578  138D  0835               	movf	(_Buz1^(0+256)+8),w
 19579  138E  01B3               	clrf	(_Buz1^(0+256)+6)
 19580  138F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19581                           
 19582                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19583  1390  0008               	return
 19584  1391                     l110:	
 19585  1391  1E2D               	btfss	_Buz1^(0+256),4
 19586  1392  2BA1               	goto	l112
 19587                           
 19588                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19589  1393  122D               	bcf	_Buz1^(0+256),4
 19590                           
 19591                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19592  1394  0832               	movf	(_Buz1^(0+256)+5),w
 19593  1395  0020               	movlb	0	; select bank0
 19594  1396  00A1               	movwf	??_Buzzer_Main
 19595  1397  0821               	movf	??_Buzzer_Main,w
 19596  1398  0022               	movlb	2	; select bank2
 19597  1399  00B0               	movwf	(_Buz1^(0+256)+3)
 19598                           
 19599                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19600  139A  0838               	movf	((_Buz1+1)^(0+256)+10),w
 19601  139B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19602  139C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19603  139D  0837               	movf	(_Buz1^(0+256)+10),w
 19604  139E  01B3               	clrf	(_Buz1^(0+256)+6)
 19605  139F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19606                           
 19607                           ;Buzzer_B1.c: 62: } else {
 19608  13A0  0008               	return
 19609  13A1                     l112:	
 19610                           
 19611                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19612  13A1  10AD               	bcf	_Buz1^(0+256),1
 19613                           
 19614                           ;Buzzer_B1.c: 64: }
 19615                           ;Buzzer_B1.c: 65: } else {
 19616  13A2  0008               	return
 19617  13A3                     l109:	
 19618                           
 19619                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19620  13A3  16AD               	bsf	_Buz1^(0+256),5
 19621                           
 19622                           ;Buzzer_B1.c: 68: RB3 = 1;
 19623  13A4  0020               	movlb	0	; select bank0
 19624  13A5  158D               	bsf	13,3	;volatile
 19625                           
 19626                           ;Buzzer_B1.c: 69: }
 19627                           ;Buzzer_B1.c: 70: } else {
 19628  13A6  0008               	return
 19629  13A7                     l108:	
 19630                           
 19631                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19632  13A7  12AD               	bcf	_Buz1^(0+256),5
 19633                           
 19634                           ;Buzzer_B1.c: 73: RB3 = 0;
 19635  13A8  0020               	movlb	0	; select bank0
 19636  13A9  118D               	bcf	13,3	;volatile
 19637                           
 19638                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19639  13AA  3001               	movlw	1
 19640  13AB  0022               	movlb	2	; select bank2
 19641  13AC  02B0               	subwf	(_Buz1^(0+256)+3),f
 19642  13AD  0008               	return
 19643  13AE                     __end_of_Buzzer_Main:	
 19644                           
 19645                           	psect	text136
 19646  192B                     __ptext136:	
 19647 ;; *************** function _Buzzer_Initialization *****************
 19648 ;; Defined at:
 19649 ;;		line 11 in file "../src/Buzzer_B1.c"
 19650 ;; Parameters:    Size  Location     Type
 19651 ;;		None
 19652 ;; Auto vars:     Size  Location     Type
 19653 ;;		None
 19654 ;; Return value:  Size  Location     Type
 19655 ;;		None               void
 19656 ;; Registers used:
 19657 ;;		None
 19658 ;; Tracked objects:
 19659 ;;		On entry : 0/0
 19660 ;;		On exit  : 0/0
 19661 ;;		Unchanged: 0/0
 19662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;Total ram usage:        0 bytes
 19668 ;; Hardware stack levels used:    1
 19669 ;; Hardware stack levels required when called:    5
 19670 ;; This function calls:
 19671 ;;		Nothing
 19672 ;; This function is called by:
 19673 ;;		_main
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           
 19678                           ;psect for function _Buzzer_Initialization
 19679  192B                     _Buzzer_Initialization:	
 19680                           
 19681                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19682                           
 19683                           ;incstack = 0
 19684                           ; Regs used in _Buzzer_Initialization: []
 19685  192B  0022               	movlb	2	; select bank2
 19686  192C  142D               	bsf	_Buz1^(0+256),0
 19687  192D  0008               	return
 19688  192E                     __end_of_Buzzer_Initialization:	
 19689                           
 19690                           	psect	intentry
 19691  0004                     __pintentry:	
 19692 ;; *************** function _ISR *****************
 19693 ;; Defined at:
 19694 ;;		line 116 in file "../src/MCU_B1.c"
 19695 ;; Parameters:    Size  Location     Type
 19696 ;;		None
 19697 ;; Auto vars:     Size  Location     Type
 19698 ;;		None
 19699 ;; Return value:  Size  Location     Type
 19700 ;;		None               void
 19701 ;; Registers used:
 19702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19703 ;; Tracked objects:
 19704 ;;		On entry : 0/0
 19705 ;;		On exit  : 0/0
 19706 ;;		Unchanged: 0/0
 19707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19711 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19712 ;;Total ram usage:        1 bytes
 19713 ;; Hardware stack levels used:    1
 19714 ;; Hardware stack levels required when called:    4
 19715 ;; This function calls:
 19716 ;;		_IOC_ISR
 19717 ;;		_TMR1_ISR
 19718 ;; This function is called by:
 19719 ;;		Interrupt level 1
 19720 ;; This function uses a non-reentrant model
 19721 ;;
 19722                           
 19723  0004                     _ISR:	
 19724                           
 19725                           ;incstack = 0
 19726                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19727  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19728  0005  3180               	pagesel	$
 19729  0006  0020               	movlb	0	; select bank0
 19730  0007  087F               	movf	127,w
 19731  0008  00A0               	movwf	??_ISR
 19732                           
 19733                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19734  0009  0021               	movlb	1	; select bank1
 19735  000A  1C11               	btfss	17,0	;volatile
 19736  000B  2813               	goto	i1l1387
 19737  000C  0020               	movlb	0	; select bank0
 19738  000D  1C11               	btfss	17,0	;volatile
 19739  000E  2813               	goto	i1l1387
 19740                           
 19741                           ;MCU_B1.c: 126: TMR1_ISR();
 19742  000F  319E  262B  3180   	fcall	_TMR1_ISR
 19743                           
 19744                           ;MCU_B1.c: 127: }
 19745  0012  281B               	goto	i1l1390
 19746  0013                     i1l1387:	
 19747                           
 19748                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19749  0013  198B               	btfsc	11,3	;volatile
 19750  0014  1C0B               	btfss	11,0	;volatile
 19751  0015  281B               	goto	i1l1390
 19752  0016  0027               	movlb	7	; select bank7
 19753  0017  1D16               	btfss	22,2	;volatile
 19754  0018  281B               	goto	i1l1390
 19755                           
 19756                           ;MCU_B1.c: 139: IOC_ISR();
 19757  0019  3199  21F0         	fcall	_IOC_ISR
 19758  001B                     i1l1390:	
 19759                           ;MCU_B1.c: 140: }
 19760                           ;MCU_B1.c: 148: return;
 19761                           
 19762  001B  0020               	movlb	0	; select bank0
 19763  001C  0820               	movf	??_ISR,w
 19764  001D  00FF               	movwf	127
 19765  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19766  001F  0009               	retfie
 19767  0020                     __end_of_ISR:	
 19768                           
 19769                           	psect	text138
 19770  1E2B                     __ptext138:	
 19771 ;; *************** function _TMR1_ISR *****************
 19772 ;; Defined at:
 19773 ;;		line 236 in file "../src/MCU_B1.c"
 19774 ;; Parameters:    Size  Location     Type
 19775 ;;		None
 19776 ;; Auto vars:     Size  Location     Type
 19777 ;;		None
 19778 ;; Return value:  Size  Location     Type
 19779 ;;		None               void
 19780 ;; Registers used:
 19781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19782 ;; Tracked objects:
 19783 ;;		On entry : 0/0
 19784 ;;		On exit  : 0/0
 19785 ;;		Unchanged: 0/0
 19786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19791 ;;Total ram usage:        0 bytes
 19792 ;; Hardware stack levels used:    1
 19793 ;; Hardware stack levels required when called:    1
 19794 ;; This function calls:
 19795 ;;		_DimmerLights_TMR_1
 19796 ;;		_DimmerLights_TMR_2
 19797 ;; This function is called by:
 19798 ;;		_ISR
 19799 ;; This function uses a non-reentrant model
 19800 ;;
 19801                           
 19802                           
 19803                           ;psect for function _TMR1_ISR
 19804  1E2B                     _TMR1_ISR:	
 19805                           
 19806                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19807                           
 19808                           ;incstack = 0
 19809                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19810  1E2B  30FA               	movlw	250
 19811  1E2C  0020               	movlb	0	; select bank0
 19812  1E2D  0097               	movwf	23	;volatile
 19813                           
 19814                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19815  1E2E  3038               	movlw	56
 19816  1E2F  0096               	movwf	22	;volatile
 19817                           
 19818                           ;MCU_B1.c: 240: TMR1IF = 0;
 19819  1E30  1011               	bcf	17,0	;volatile
 19820                           
 19821                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19822  1E31  3188  2016  319E   	fcall	_DimmerLights_TMR_1
 19823                           
 19824                           ;MCU_B1.c: 262: DimmerLights_TMR_2();
 19825  1E34  3188  207F  319E   	fcall	_DimmerLights_TMR_2
 19826                           
 19827                           ;MCU_B1.c: 271: Timer1.Count++;
 19828  1E37  3001               	movlw	1
 19829  1E38  0021               	movlb	1	; select bank1
 19830  1E39  07C7               	addwf	(_Timer1^(0+128)+1),f
 19831  1E3A  3000               	movlw	0
 19832  1E3B  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19833                           
 19834                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19835  1E3C  3001               	movlw	1
 19836  1E3D  3EC6               	addlw	_Timer1& (0+255)
 19837  1E3E  0086               	movwf	6
 19838  1E3F  0187               	clrf	7
 19839  1E40  3F40               	moviw [0]fsr1
 19840  1E41  3AC8               	xorlw	200
 19841  1E42  1D03               	skipz
 19842  1E43  2E46               	goto	u896_25
 19843  1E44  3F41               	moviw [1]fsr1
 19844  1E45  3A00               	xorlw	0
 19845  1E46                     u896_25:	
 19846  1E46  1D03               	skipz
 19847  1E47  0008               	return
 19848                           
 19849                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19850  1E48  01C7               	clrf	(_Timer1^(0+128)+1)
 19851  1E49  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19852                           
 19853                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19854  1E4A  1446               	bsf	_Timer1^(0+128),0
 19855  1E4B  0008               	return
 19856  1E4C                     __end_of_TMR1_ISR:	
 19857                           
 19858                           	psect	text139
 19859  087F                     __ptext139:	
 19860 ;; *************** function _DimmerLights_TMR_2 *****************
 19861 ;; Defined at:
 19862 ;;		line 1492 in file "../src/Dimmer_B1.c"
 19863 ;; Parameters:    Size  Location     Type
 19864 ;;		None
 19865 ;; Auto vars:     Size  Location     Type
 19866 ;;  count           1    1[COMMON] unsigned char 
 19867 ;; Return value:  Size  Location     Type
 19868 ;;		None               void
 19869 ;; Registers used:
 19870 ;;		wreg, status,2, status,0
 19871 ;; Tracked objects:
 19872 ;;		On entry : 0/0
 19873 ;;		On exit  : 0/0
 19874 ;;		Unchanged: 0/0
 19875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19880 ;;Total ram usage:        2 bytes
 19881 ;; Hardware stack levels used:    1
 19882 ;; This function calls:
 19883 ;;		Nothing
 19884 ;; This function is called by:
 19885 ;;		_TMR1_ISR
 19886 ;; This function uses a non-reentrant model
 19887 ;;
 19888                           
 19889                           
 19890                           ;psect for function _DimmerLights_TMR_2
 19891  087F                     _DimmerLights_TMR_2:	
 19892                           
 19893                           ;Dimmer_B1.c: 1493: char count = 65;
 19894                           
 19895                           ;incstack = 0
 19896                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 19897  087F  3041               	movlw	65
 19898  0880  00F0               	movwf	??_DimmerLights_TMR_2
 19899  0881  0870               	movf	??_DimmerLights_TMR_2,w
 19900  0882  00F1               	movwf	DimmerLights_TMR_2@count
 19901                           
 19902                           ;Dimmer_B1.c: 1505: if (DimmerIntr2.Start == 1) {
 19903  0883  0021               	movlb	1	; select bank1
 19904  0884  1D3A               	btfss	_DimmerIntr2^(0+128),2
 19905  0885  2890               	goto	i1l7911
 19906                           
 19907                           ;Dimmer_B1.c: 1506: DimmerIntr2.Count++;
 19908  0886  3001               	movlw	1
 19909  0887  00F0               	movwf	??_DimmerLights_TMR_2
 19910  0888  0870               	movf	??_DimmerLights_TMR_2,w
 19911  0889  07BC               	addwf	(_DimmerIntr2^(0+128)+2),f
 19912                           
 19913                           ;Dimmer_B1.c: 1507: if (DimmerIntr2.Count >= count) {
 19914  088A  0871               	movf	DimmerLights_TMR_2@count,w
 19915  088B  023C               	subwf	(_DimmerIntr2^(0+128)+2),w
 19916  088C  1C03               	skipc
 19917  088D  2890               	goto	i1l7911
 19918                           
 19919                           ;Dimmer_B1.c: 1508: DimmerIntr2.Count = 0;
 19920  088E  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 19921                           
 19922                           ;Dimmer_B1.c: 1509: DimmerIntr2.Start = 0;
 19923  088F  113A               	bcf	_DimmerIntr2^(0+128),2
 19924  0890                     i1l7911:	
 19925                           
 19926                           ;Dimmer_B1.c: 1510: }
 19927                           ;Dimmer_B1.c: 1511: }
 19928                           ;Dimmer_B1.c: 1515: if (DimmerIntr2.Count == 5) {
 19929  0890  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19930  0891  3A05               	xorlw	5
 19931  0892  1903               	btfsc	3,2
 19932                           
 19933                           ;Dimmer_B1.c: 1518: if (DimmerIntr2.ControlStatus == 1) {
 19934  0893  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19935  0894  2897               	goto	i1l7917
 19936                           
 19937                           ;Dimmer_B1.c: 1519: RB4 = 1;
 19938  0895  0020               	movlb	0	; select bank0
 19939  0896  160D               	bsf	13,4	;volatile
 19940  0897                     i1l7917:	
 19941                           
 19942                           ;Dimmer_B1.c: 1521: }
 19943                           ;Dimmer_B1.c: 1522: }
 19944                           ;Dimmer_B1.c: 1526: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 19945  0897  0021               	movlb	1	; select bank1
 19946  0898  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19947  0899  0643               	xorwf	(_DimmerIntr2^(0+128)+9),w
 19948  089A  1903               	btfsc	3,2
 19949                           
 19950                           ;Dimmer_B1.c: 1529: if (DimmerIntr2.ControlStatus == 1) {
 19951  089B  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19952  089C  289F               	goto	i1l7923
 19953                           
 19954                           ;Dimmer_B1.c: 1530: RB4 = 0;
 19955  089D  0020               	movlb	0	; select bank0
 19956  089E  120D               	bcf	13,4	;volatile
 19957  089F                     i1l7923:	
 19958                           
 19959                           ;Dimmer_B1.c: 1531: }
 19960                           ;Dimmer_B1.c: 1532: }
 19961                           ;Dimmer_B1.c: 1536: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 19962  089F  0021               	movlb	1	; select bank1
 19963  08A0  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19964  08A1  0644               	xorwf	(_DimmerIntr2^(0+128)+10),w
 19965  08A2  1903               	btfsc	3,2
 19966                           
 19967                           ;Dimmer_B1.c: 1539: if (DimmerIntr2.ControlStatus == 1) {
 19968  08A3  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19969  08A4  28A7               	goto	i1l7929
 19970                           
 19971                           ;Dimmer_B1.c: 1540: RB4 = 1;
 19972  08A5  0020               	movlb	0	; select bank0
 19973  08A6  160D               	bsf	13,4	;volatile
 19974  08A7                     i1l7929:	
 19975                           
 19976                           ;Dimmer_B1.c: 1541: }
 19977                           ;Dimmer_B1.c: 1542: }
 19978                           ;Dimmer_B1.c: 1559: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 19979  08A7  0021               	movlb	1	; select bank1
 19980  08A8  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19981  08A9  0645               	xorwf	(_DimmerIntr2^(0+128)+11),w
 19982  08AA  1903               	btfsc	3,2
 19983                           
 19984                           ;Dimmer_B1.c: 1561: if (DimmerIntr2.ControlStatus == 1) {
 19985  08AB  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19986  08AC  28AF               	goto	i1l992
 19987                           
 19988                           ;Dimmer_B1.c: 1562: RB4 = 0;
 19989  08AD  0020               	movlb	0	; select bank0
 19990  08AE  120D               	bcf	13,4	;volatile
 19991  08AF                     i1l992:	
 19992                           
 19993                           ;Dimmer_B1.c: 1563: }
 19994                           ;Dimmer_B1.c: 1564: }
 19995                           ;Dimmer_B1.c: 1577: if (DimmerIntr2.Tune == 1) {
 19996  08AF  0021               	movlb	1	; select bank1
 19997  08B0  1CBA               	btfss	_DimmerIntr2^(0+128),1
 19998  08B1  0008               	return
 19999                           
 20000                           ;Dimmer_B1.c: 1578: DimmerIntr2.Tune = 0;
 20001  08B2  10BA               	bcf	_DimmerIntr2^(0+128),1
 20002                           
 20003                           ;Dimmer_B1.c: 1579: DimmerIntr2.TuneTime++;
 20004  08B3  3001               	movlw	1
 20005  08B4  00F0               	movwf	??_DimmerLights_TMR_2
 20006  08B5  0870               	movf	??_DimmerLights_TMR_2,w
 20007  08B6  07BD               	addwf	(_DimmerIntr2^(0+128)+3),f
 20008                           
 20009                           ;Dimmer_B1.c: 1580: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20010  08B7  083E               	movf	(_DimmerIntr2^(0+128)+4),w
 20011  08B8  023D               	subwf	(_DimmerIntr2^(0+128)+3),w
 20012  08B9  1C03               	skipc
 20013  08BA  0008               	return
 20014                           
 20015                           ;Dimmer_B1.c: 1581: DimmerIntr2.TuneTime = 0;
 20016  08BB  01BD               	clrf	(_DimmerIntr2^(0+128)+3)
 20017                           
 20018                           ;Dimmer_B1.c: 1582: if (DimmerIntr2.Dimming_Sw == 1) {
 20019  08BC  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20020  08BD  28D4               	goto	i1l996
 20021                           
 20022                           ;Dimmer_B1.c: 1583: if (DimmerIntr2.Dimming_Status == 0) {
 20023  08BE  1ABA               	btfsc	_DimmerIntr2^(0+128),5
 20024  08BF  28CB               	goto	i1l7951
 20025                           
 20026                           ;Dimmer_B1.c: 1584: if (DimmerIntr2.DimmingValue < ((char)(60*0.65))) {
 20027  08C0  3027               	movlw	39
 20028  08C1  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20029  08C2  1803               	skipnc
 20030  08C3  28C9               	goto	i1l998
 20031                           
 20032                           ;Dimmer_B1.c: 1585: DimmerIntr2.DimmingValue++;
 20033  08C4  3001               	movlw	1
 20034  08C5  00F0               	movwf	??_DimmerLights_TMR_2
 20035  08C6  0870               	movf	??_DimmerLights_TMR_2,w
 20036  08C7  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20037                           
 20038                           ;Dimmer_B1.c: 1586: } else {
 20039  08C8  0008               	return
 20040  08C9                     i1l998:	
 20041                           
 20042                           ;Dimmer_B1.c: 1587: DimmerIntr2.Dimming_Status = 1;
 20043  08C9  16BA               	bsf	_DimmerIntr2^(0+128),5
 20044                           
 20045                           ;Dimmer_B1.c: 1588: }
 20046                           ;Dimmer_B1.c: 1589: } else {
 20047  08CA  0008               	return
 20048  08CB                     i1l7951:	
 20049                           
 20050                           ;Dimmer_B1.c: 1590: if (DimmerIntr2.DimmingValue > ((char)(10*0.65))) {
 20051  08CB  3007               	movlw	7
 20052  08CC  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20053  08CD  1C03               	skipc
 20054  08CE  28D2               	goto	i1l1001
 20055                           
 20056                           ;Dimmer_B1.c: 1591: DimmerIntr2.DimmingValue--;
 20057  08CF  3001               	movlw	1
 20058  08D0  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20059                           
 20060                           ;Dimmer_B1.c: 1592: } else {
 20061  08D1  0008               	return
 20062  08D2                     i1l1001:	
 20063                           
 20064                           ;Dimmer_B1.c: 1593: DimmerIntr2.Dimming_Status = 0;
 20065  08D2  12BA               	bcf	_DimmerIntr2^(0+128),5
 20066                           
 20067                           ;Dimmer_B1.c: 1594: }
 20068                           ;Dimmer_B1.c: 1595: }
 20069                           ;Dimmer_B1.c: 1596: } else if (DimmerIntr2.Dimming_RF == 1) {
 20070  08D3  0008               	return
 20071  08D4                     i1l996:	
 20072  08D4  1F3A               	btfss	_DimmerIntr2^(0+128),6
 20073  08D5  0008               	return
 20074                           
 20075                           ;Dimmer_B1.c: 1597: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20076  08D6  0840               	movf	(_DimmerIntr2^(0+128)+6),w
 20077  08D7  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20078  08D8  1803               	skipnc
 20079  08D9  28DF               	goto	i1l7959
 20080                           
 20081                           ;Dimmer_B1.c: 1598: DimmerIntr2.DimmingValue++;
 20082  08DA  3001               	movlw	1
 20083  08DB  00F0               	movwf	??_DimmerLights_TMR_2
 20084  08DC  0870               	movf	??_DimmerLights_TMR_2,w
 20085  08DD  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20086                           
 20087                           ;Dimmer_B1.c: 1599: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20088  08DE  0008               	return
 20089  08DF                     i1l7959:	
 20090  08DF  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20091  08E0  0240               	subwf	(_DimmerIntr2^(0+128)+6),w
 20092  08E1  1803               	skipnc
 20093  08E2  28E6               	goto	i1l1007
 20094                           
 20095                           ;Dimmer_B1.c: 1600: DimmerIntr2.DimmingValue--;
 20096  08E3  3001               	movlw	1
 20097  08E4  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20098                           
 20099                           ;Dimmer_B1.c: 1601: } else {
 20100  08E5  0008               	return
 20101  08E6                     i1l1007:	
 20102                           
 20103                           ;Dimmer_B1.c: 1602: DimmerIntr2.Dimming_RF = 0;
 20104  08E6  133A               	bcf	_DimmerIntr2^(0+128),6
 20105  08E7  0008               	return
 20106  08E8                     __end_of_DimmerLights_TMR_2:	
 20107                           
 20108                           	psect	text140
 20109  0816                     __ptext140:	
 20110 ;; *************** function _DimmerLights_TMR_1 *****************
 20111 ;; Defined at:
 20112 ;;		line 1313 in file "../src/Dimmer_B1.c"
 20113 ;; Parameters:    Size  Location     Type
 20114 ;;		None
 20115 ;; Auto vars:     Size  Location     Type
 20116 ;;  count           1    1[COMMON] unsigned char 
 20117 ;; Return value:  Size  Location     Type
 20118 ;;		None               void
 20119 ;; Registers used:
 20120 ;;		wreg, status,2, status,0
 20121 ;; Tracked objects:
 20122 ;;		On entry : 0/0
 20123 ;;		On exit  : 0/0
 20124 ;;		Unchanged: 0/0
 20125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20130 ;;Total ram usage:        2 bytes
 20131 ;; Hardware stack levels used:    1
 20132 ;; This function calls:
 20133 ;;		Nothing
 20134 ;; This function is called by:
 20135 ;;		_TMR1_ISR
 20136 ;; This function uses a non-reentrant model
 20137 ;;
 20138                           
 20139                           
 20140                           ;psect for function _DimmerLights_TMR_1
 20141  0816                     _DimmerLights_TMR_1:	
 20142                           
 20143                           ;Dimmer_B1.c: 1314: char count = 65;
 20144                           
 20145                           ;incstack = 0
 20146                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20147  0816  3041               	movlw	65
 20148  0817  00F0               	movwf	??_DimmerLights_TMR_1
 20149  0818  0870               	movf	??_DimmerLights_TMR_1,w
 20150  0819  00F1               	movwf	DimmerLights_TMR_1@count
 20151                           
 20152                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 20153  081A  0021               	movlb	1	; select bank1
 20154  081B  1D2E               	btfss	_DimmerIntr1^(0+128),2
 20155  081C  2827               	goto	i1l7823
 20156                           
 20157                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 20158  081D  3001               	movlw	1
 20159  081E  00F0               	movwf	??_DimmerLights_TMR_1
 20160  081F  0870               	movf	??_DimmerLights_TMR_1,w
 20161  0820  07B0               	addwf	(_DimmerIntr1^(0+128)+2),f
 20162                           
 20163                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 20164  0821  0871               	movf	DimmerLights_TMR_1@count,w
 20165  0822  0230               	subwf	(_DimmerIntr1^(0+128)+2),w
 20166  0823  1C03               	skipc
 20167  0824  2827               	goto	i1l7823
 20168                           
 20169                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 20170  0825  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20171                           
 20172                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 20173  0826  112E               	bcf	_DimmerIntr1^(0+128),2
 20174  0827                     i1l7823:	
 20175                           
 20176                           ;Dimmer_B1.c: 1333: }
 20177                           ;Dimmer_B1.c: 1334: }
 20178                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count == 5) {
 20179  0827  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20180  0828  3A05               	xorlw	5
 20181  0829  1903               	btfsc	3,2
 20182                           
 20183                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 20184  082A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20185  082B  282E               	goto	i1l7829
 20186                           
 20187                           ;Dimmer_B1.c: 1342: RA7 = 1;
 20188  082C  0020               	movlb	0	; select bank0
 20189  082D  178C               	bsf	12,7	;volatile
 20190  082E                     i1l7829:	
 20191                           
 20192                           ;Dimmer_B1.c: 1344: }
 20193                           ;Dimmer_B1.c: 1345: }
 20194                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20195  082E  0021               	movlb	1	; select bank1
 20196  082F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20197  0830  0637               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20198  0831  1903               	btfsc	3,2
 20199                           
 20200                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 20201  0832  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20202  0833  2836               	goto	i1l7835
 20203                           
 20204                           ;Dimmer_B1.c: 1353: RA7 = 0;
 20205  0834  0020               	movlb	0	; select bank0
 20206  0835  138C               	bcf	12,7	;volatile
 20207  0836                     i1l7835:	
 20208                           
 20209                           ;Dimmer_B1.c: 1355: }
 20210                           ;Dimmer_B1.c: 1356: }
 20211                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20212  0836  0021               	movlb	1	; select bank1
 20213  0837  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20214  0838  0638               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20215  0839  1903               	btfsc	3,2
 20216                           
 20217                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 20218  083A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20219  083B  283E               	goto	i1l7841
 20220                           
 20221                           ;Dimmer_B1.c: 1364: RA7 = 1;
 20222  083C  0020               	movlb	0	; select bank0
 20223  083D  178C               	bsf	12,7	;volatile
 20224  083E                     i1l7841:	
 20225                           
 20226                           ;Dimmer_B1.c: 1366: }
 20227                           ;Dimmer_B1.c: 1367: }
 20228                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20229  083E  0021               	movlb	1	; select bank1
 20230  083F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20231  0840  0639               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20232  0841  1903               	btfsc	3,2
 20233                           
 20234                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 20235  0842  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20236  0843  2846               	goto	i1l956
 20237                           
 20238                           ;Dimmer_B1.c: 1387: RA7 = 0;
 20239  0844  0020               	movlb	0	; select bank0
 20240  0845  138C               	bcf	12,7	;volatile
 20241  0846                     i1l956:	
 20242                           
 20243                           ;Dimmer_B1.c: 1389: }
 20244                           ;Dimmer_B1.c: 1390: }
 20245                           ;Dimmer_B1.c: 1393: if (DimmerIntr1.Tune == 1) {
 20246  0846  0021               	movlb	1	; select bank1
 20247  0847  1CAE               	btfss	_DimmerIntr1^(0+128),1
 20248  0848  0008               	return
 20249                           
 20250                           ;Dimmer_B1.c: 1394: DimmerIntr1.Tune = 0;
 20251  0849  10AE               	bcf	_DimmerIntr1^(0+128),1
 20252                           
 20253                           ;Dimmer_B1.c: 1395: DimmerIntr1.TuneTime++;
 20254  084A  3001               	movlw	1
 20255  084B  00F0               	movwf	??_DimmerLights_TMR_1
 20256  084C  0870               	movf	??_DimmerLights_TMR_1,w
 20257  084D  07B1               	addwf	(_DimmerIntr1^(0+128)+3),f
 20258                           
 20259                           ;Dimmer_B1.c: 1396: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20260  084E  0832               	movf	(_DimmerIntr1^(0+128)+4),w
 20261  084F  0231               	subwf	(_DimmerIntr1^(0+128)+3),w
 20262  0850  1C03               	skipc
 20263  0851  0008               	return
 20264                           
 20265                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime = 0;
 20266  0852  01B1               	clrf	(_DimmerIntr1^(0+128)+3)
 20267                           
 20268                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.Dimming_Sw == 1) {
 20269  0853  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20270  0854  286B               	goto	i1l960
 20271                           
 20272                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Status == 0) {
 20273  0855  1AAE               	btfsc	_DimmerIntr1^(0+128),5
 20274  0856  2862               	goto	i1l7863
 20275                           
 20276                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.DimmingValue < ((char)(60*0.65))) {
 20277  0857  3027               	movlw	39
 20278  0858  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20279  0859  1803               	skipnc
 20280  085A  2860               	goto	i1l962
 20281                           
 20282                           ;Dimmer_B1.c: 1401: DimmerIntr1.DimmingValue++;
 20283  085B  3001               	movlw	1
 20284  085C  00F0               	movwf	??_DimmerLights_TMR_1
 20285  085D  0870               	movf	??_DimmerLights_TMR_1,w
 20286  085E  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20287                           
 20288                           ;Dimmer_B1.c: 1402: } else {
 20289  085F  0008               	return
 20290  0860                     i1l962:	
 20291                           
 20292                           ;Dimmer_B1.c: 1403: DimmerIntr1.Dimming_Status = 1;
 20293  0860  16AE               	bsf	_DimmerIntr1^(0+128),5
 20294                           
 20295                           ;Dimmer_B1.c: 1404: }
 20296                           ;Dimmer_B1.c: 1405: } else {
 20297  0861  0008               	return
 20298  0862                     i1l7863:	
 20299                           
 20300                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.DimmingValue > ((char)(10*0.65))) {
 20301  0862  3007               	movlw	7
 20302  0863  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20303  0864  1C03               	skipc
 20304  0865  2869               	goto	i1l965
 20305                           
 20306                           ;Dimmer_B1.c: 1407: DimmerIntr1.DimmingValue--;
 20307  0866  3001               	movlw	1
 20308  0867  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20309                           
 20310                           ;Dimmer_B1.c: 1408: } else {
 20311  0868  0008               	return
 20312  0869                     i1l965:	
 20313                           
 20314                           ;Dimmer_B1.c: 1409: DimmerIntr1.Dimming_Status = 0;
 20315  0869  12AE               	bcf	_DimmerIntr1^(0+128),5
 20316                           
 20317                           ;Dimmer_B1.c: 1410: }
 20318                           ;Dimmer_B1.c: 1411: }
 20319                           ;Dimmer_B1.c: 1412: } else if (DimmerIntr1.Dimming_RF == 1) {
 20320  086A  0008               	return
 20321  086B                     i1l960:	
 20322  086B  1F2E               	btfss	_DimmerIntr1^(0+128),6
 20323  086C  0008               	return
 20324                           
 20325                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20326  086D  0834               	movf	(_DimmerIntr1^(0+128)+6),w
 20327  086E  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20328  086F  1803               	skipnc
 20329  0870  2876               	goto	i1l7871
 20330                           
 20331                           ;Dimmer_B1.c: 1414: DimmerIntr1.DimmingValue++;
 20332  0871  3001               	movlw	1
 20333  0872  00F0               	movwf	??_DimmerLights_TMR_1
 20334  0873  0870               	movf	??_DimmerLights_TMR_1,w
 20335  0874  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20336                           
 20337                           ;Dimmer_B1.c: 1415: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20338  0875  0008               	return
 20339  0876                     i1l7871:	
 20340  0876  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20341  0877  0234               	subwf	(_DimmerIntr1^(0+128)+6),w
 20342  0878  1803               	skipnc
 20343  0879  287D               	goto	i1l971
 20344                           
 20345                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue--;
 20346  087A  3001               	movlw	1
 20347  087B  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20348                           
 20349                           ;Dimmer_B1.c: 1417: } else {
 20350  087C  0008               	return
 20351  087D                     i1l971:	
 20352                           
 20353                           ;Dimmer_B1.c: 1418: DimmerIntr1.Dimming_RF = 0;
 20354  087D  132E               	bcf	_DimmerIntr1^(0+128),6
 20355  087E  0008               	return
 20356  087F                     __end_of_DimmerLights_TMR_1:	
 20357                           
 20358                           	psect	text141
 20359  19F0                     __ptext141:	
 20360 ;; *************** function _IOC_ISR *****************
 20361 ;; Defined at:
 20362 ;;		line 394 in file "../src/MCU_B1.c"
 20363 ;; Parameters:    Size  Location     Type
 20364 ;;		None
 20365 ;; Auto vars:     Size  Location     Type
 20366 ;;		None
 20367 ;; Return value:  Size  Location     Type
 20368 ;;		None               void
 20369 ;; Registers used:
 20370 ;;		wreg, status,2, status,0, pclath, cstack
 20371 ;; Tracked objects:
 20372 ;;		On entry : 0/0
 20373 ;;		On exit  : 0/0
 20374 ;;		Unchanged: 0/0
 20375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20380 ;;Total ram usage:        0 bytes
 20381 ;; Hardware stack levels used:    1
 20382 ;; Hardware stack levels required when called:    3
 20383 ;; This function calls:
 20384 ;;		_DimmerLights_IOC_1
 20385 ;;		_DimmerLights_IOC_2
 20386 ;; This function is called by:
 20387 ;;		_ISR
 20388 ;; This function uses a non-reentrant model
 20389 ;;
 20390                           
 20391                           
 20392                           ;psect for function _IOC_ISR
 20393  19F0                     _IOC_ISR:	
 20394                           
 20395                           ;MCU_B1.c: 395: IOCBF2 = 0;
 20396                           
 20397                           ;incstack = 0
 20398                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20399  19F0  0027               	movlb	7	; select bank7
 20400  19F1  1116               	bcf	22,2	;volatile
 20401                           
 20402                           ;MCU_B1.c: 396: IOCIF = 0;
 20403  19F2  100B               	bcf	11,0	;volatile
 20404                           
 20405                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 20406  19F3  0022               	movlb	2	; select bank2
 20407  19F4  1C20               	btfss	_myMain^(0+256),0
 20408  19F5  0008               	return
 20409                           
 20410                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 20411  19F6  3191  2167  3199   	fcall	_DimmerLights_IOC_1
 20412                           
 20413                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 20414  19F9  3191  21A4         	fcall	_DimmerLights_IOC_2
 20415  19FB  0008               	return
 20416  19FC                     __end_of_IOC_ISR:	
 20417                           
 20418                           	psect	text142
 20419  11A4                     __ptext142:	
 20420 ;; *************** function _DimmerLights_IOC_2 *****************
 20421 ;; Defined at:
 20422 ;;		line 1609 in file "../src/Dimmer_B1.c"
 20423 ;; Parameters:    Size  Location     Type
 20424 ;;		None
 20425 ;; Auto vars:     Size  Location     Type
 20426 ;;  dimming         1   13[COMMON] unsigned char 
 20427 ;;  count           1   12[COMMON] unsigned char 
 20428 ;; Return value:  Size  Location     Type
 20429 ;;		None               void
 20430 ;; Registers used:
 20431 ;;		wreg, status,2, status,0, pclath, cstack
 20432 ;; Tracked objects:
 20433 ;;		On entry : 0/0
 20434 ;;		On exit  : 0/0
 20435 ;;		Unchanged: 0/0
 20436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20441 ;;Total ram usage:        4 bytes
 20442 ;; Hardware stack levels used:    1
 20443 ;; Hardware stack levels required when called:    2
 20444 ;; This function calls:
 20445 ;;		_Division
 20446 ;; This function is called by:
 20447 ;;		_IOC_ISR
 20448 ;; This function uses a non-reentrant model
 20449 ;;
 20450                           
 20451                           
 20452                           ;psect for function _DimmerLights_IOC_2
 20453  11A4                     _DimmerLights_IOC_2:	
 20454                           
 20455                           ;Dimmer_B1.c: 1625: if (DimmerIntr2.Start == 0) {
 20456                           
 20457                           ;incstack = 0
 20458                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20459  11A4  0021               	movlb	1	; select bank1
 20460  11A5  193A               	btfsc	_DimmerIntr2^(0+128),2
 20461  11A6  0008               	return
 20462                           
 20463                           ;Dimmer_B1.c: 1626: if (RB2 != DimmerIntr2.Status) {
 20464  11A7  0E3B               	swapf	(_DimmerIntr2^(0+128)+1),w
 20465  11A8  0C89               	rrf	9,f
 20466  11A9  3901               	andlw	1
 20467  11AA  00FA               	movwf	??_DimmerLights_IOC_2
 20468  11AB  3000               	movlw	0
 20469  11AC  0020               	movlb	0	; select bank0
 20470  11AD  190D               	btfsc	13,2	;volatile
 20471  11AE  3001               	movlw	1
 20472  11AF  067A               	xorwf	??_DimmerLights_IOC_2,w
 20473  11B0  1903               	skipnz
 20474  11B1  0008               	return
 20475                           
 20476                           ;Dimmer_B1.c: 1627: DimmerIntr2.Start = 1;
 20477  11B2  0021               	movlb	1	; select bank1
 20478  11B3  153A               	bsf	_DimmerIntr2^(0+128),2
 20479                           
 20480                           ;Dimmer_B1.c: 1628: DimmerIntr2.Count = 0;
 20481  11B4  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 20482                           
 20483                           ;Dimmer_B1.c: 1629: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20484  11B5  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20485  11B6  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 20486                           
 20487                           ;Dimmer_B1.c: 1630: DimmerIntr2.Tune = 1;
 20488  11B7  14BA               	bsf	_DimmerIntr2^(0+128),1
 20489                           
 20490                           ;Dimmer_B1.c: 1631: }
 20491                           ;Dimmer_B1.c: 1632: char count = 65;
 20492  11B8  3041               	movlw	65
 20493  11B9  00FA               	movwf	??_DimmerLights_IOC_2
 20494  11BA  087A               	movf	??_DimmerLights_IOC_2,w
 20495  11BB  00FC               	movwf	DimmerLights_IOC_2@count
 20496                           
 20497                           ;Dimmer_B1.c: 1633: char dimming = Division(DimmerIntr2.DimmingValue, 2);
 20498  11BC  3002               	movlw	2
 20499  11BD  00FA               	movwf	??_DimmerLights_IOC_2
 20500  11BE  087A               	movf	??_DimmerLights_IOC_2,w
 20501  11BF  00F5               	movwf	Division@num
 20502  11C0  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20503  11C1  319A  2250  3191   	fcall	_Division
 20504  11C4  00FB               	movwf	??_DimmerLights_IOC_2+1
 20505  11C5  087B               	movf	??_DimmerLights_IOC_2+1,w
 20506  11C6  00FD               	movwf	DimmerLights_IOC_2@dimming
 20507                           
 20508                           ;Dimmer_B1.c: 1634: DimmerIntr2.TuneValue2 = 5 + dimming;
 20509  11C7  087D               	movf	DimmerLights_IOC_2@dimming,w
 20510  11C8  3E05               	addlw	5
 20511  11C9  00FA               	movwf	??_DimmerLights_IOC_2
 20512  11CA  087A               	movf	??_DimmerLights_IOC_2,w
 20513  11CB  0021               	movlb	1	; select bank1
 20514  11CC  00C3               	movwf	(_DimmerIntr2^(0+128)+9)
 20515                           
 20516                           ;Dimmer_B1.c: 1635: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr2.DimmingValue);
 20517  11CD  033F               	decf	(_DimmerIntr2^(0+128)+5),w
 20518  11CE  3AFF               	xorlw	255
 20519  11CF  0743               	addwf	(_DimmerIntr2^(0+128)+9),w
 20520  11D0  077C               	addwf	DimmerLights_IOC_2@count,w
 20521  11D1  3EF6               	addlw	246
 20522  11D2  00FA               	movwf	??_DimmerLights_IOC_2
 20523  11D3  087A               	movf	??_DimmerLights_IOC_2,w
 20524  11D4  00C4               	movwf	(_DimmerIntr2^(0+128)+10)
 20525                           
 20526                           ;Dimmer_B1.c: 1636: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + dimming;
 20527  11D5  0844               	movf	(_DimmerIntr2^(0+128)+10),w
 20528  11D6  077D               	addwf	DimmerLights_IOC_2@dimming,w
 20529  11D7  00FA               	movwf	??_DimmerLights_IOC_2
 20530  11D8  087A               	movf	??_DimmerLights_IOC_2,w
 20531  11D9  00C5               	movwf	(_DimmerIntr2^(0+128)+11)
 20532                           
 20533                           ;Dimmer_B1.c: 1646: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20534  11DA  12BB               	bcf	(_DimmerIntr2^(0+128)+1),5
 20535  11DB  0020               	movlb	0	; select bank0
 20536  11DC  1D0D               	btfss	13,2	;volatile
 20537  11DD  0008               	return
 20538  11DE  0021               	movlb	1	; select bank1
 20539  11DF  16BB               	bsf	(_DimmerIntr2^(0+128)+1),5
 20540  11E0  0008               	return
 20541  11E1                     __end_of_DimmerLights_IOC_2:	
 20542                           
 20543                           	psect	text143
 20544  1167                     __ptext143:	
 20545 ;; *************** function _DimmerLights_IOC_1 *****************
 20546 ;; Defined at:
 20547 ;;		line 1425 in file "../src/Dimmer_B1.c"
 20548 ;; Parameters:    Size  Location     Type
 20549 ;;		None
 20550 ;; Auto vars:     Size  Location     Type
 20551 ;;  dimming         1   13[COMMON] unsigned char 
 20552 ;;  count           1   12[COMMON] unsigned char 
 20553 ;; Return value:  Size  Location     Type
 20554 ;;		None               void
 20555 ;; Registers used:
 20556 ;;		wreg, status,2, status,0, pclath, cstack
 20557 ;; Tracked objects:
 20558 ;;		On entry : 0/0
 20559 ;;		On exit  : 0/0
 20560 ;;		Unchanged: 0/0
 20561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20563 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20564 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20565 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20566 ;;Total ram usage:        4 bytes
 20567 ;; Hardware stack levels used:    1
 20568 ;; Hardware stack levels required when called:    2
 20569 ;; This function calls:
 20570 ;;		_Division
 20571 ;; This function is called by:
 20572 ;;		_IOC_ISR
 20573 ;; This function uses a non-reentrant model
 20574 ;;
 20575                           
 20576                           
 20577                           ;psect for function _DimmerLights_IOC_1
 20578  1167                     _DimmerLights_IOC_1:	
 20579                           
 20580                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Start == 0) {
 20581                           
 20582                           ;incstack = 0
 20583                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20584  1167  0021               	movlb	1	; select bank1
 20585  1168  192E               	btfsc	_DimmerIntr1^(0+128),2
 20586  1169  0008               	return
 20587                           
 20588                           ;Dimmer_B1.c: 1440: if (RB2 != DimmerIntr1.Status) {
 20589  116A  0E2F               	swapf	(_DimmerIntr1^(0+128)+1),w
 20590  116B  0C89               	rrf	9,f
 20591  116C  3901               	andlw	1
 20592  116D  00FA               	movwf	??_DimmerLights_IOC_1
 20593  116E  3000               	movlw	0
 20594  116F  0020               	movlb	0	; select bank0
 20595  1170  190D               	btfsc	13,2	;volatile
 20596  1171  3001               	movlw	1
 20597  1172  067A               	xorwf	??_DimmerLights_IOC_1,w
 20598  1173  1903               	skipnz
 20599  1174  0008               	return
 20600                           
 20601                           ;Dimmer_B1.c: 1441: DimmerIntr1.Start = 1;
 20602  1175  0021               	movlb	1	; select bank1
 20603  1176  152E               	bsf	_DimmerIntr1^(0+128),2
 20604                           
 20605                           ;Dimmer_B1.c: 1442: DimmerIntr1.Count = 0;
 20606  1177  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20607                           
 20608                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20609  1178  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20610  1179  1B2E               	btfsc	_DimmerIntr1^(0+128),6
 20611                           
 20612                           ;Dimmer_B1.c: 1444: DimmerIntr1.Tune = 1;
 20613  117A  14AE               	bsf	_DimmerIntr1^(0+128),1
 20614                           
 20615                           ;Dimmer_B1.c: 1445: }
 20616                           ;Dimmer_B1.c: 1446: char count = 65;
 20617  117B  3041               	movlw	65
 20618  117C  00FA               	movwf	??_DimmerLights_IOC_1
 20619  117D  087A               	movf	??_DimmerLights_IOC_1,w
 20620  117E  00FC               	movwf	DimmerLights_IOC_1@count
 20621                           
 20622                           ;Dimmer_B1.c: 1447: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 20623  117F  3002               	movlw	2
 20624  1180  00FA               	movwf	??_DimmerLights_IOC_1
 20625  1181  087A               	movf	??_DimmerLights_IOC_1,w
 20626  1182  00F5               	movwf	Division@num
 20627  1183  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20628  1184  319A  2250  3191   	fcall	_Division
 20629  1187  00FB               	movwf	??_DimmerLights_IOC_1+1
 20630  1188  087B               	movf	??_DimmerLights_IOC_1+1,w
 20631  1189  00FD               	movwf	DimmerLights_IOC_1@dimming
 20632                           
 20633                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneValue2 = 5 + dimming;
 20634  118A  087D               	movf	DimmerLights_IOC_1@dimming,w
 20635  118B  3E05               	addlw	5
 20636  118C  00FA               	movwf	??_DimmerLights_IOC_1
 20637  118D  087A               	movf	??_DimmerLights_IOC_1,w
 20638  118E  0021               	movlb	1	; select bank1
 20639  118F  00B7               	movwf	(_DimmerIntr1^(0+128)+9)
 20640                           
 20641                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr1.DimmingValue);
 20642  1190  0333               	decf	(_DimmerIntr1^(0+128)+5),w
 20643  1191  3AFF               	xorlw	255
 20644  1192  0737               	addwf	(_DimmerIntr1^(0+128)+9),w
 20645  1193  077C               	addwf	DimmerLights_IOC_1@count,w
 20646  1194  3EF6               	addlw	246
 20647  1195  00FA               	movwf	??_DimmerLights_IOC_1
 20648  1196  087A               	movf	??_DimmerLights_IOC_1,w
 20649  1197  00B8               	movwf	(_DimmerIntr1^(0+128)+10)
 20650                           
 20651                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 20652  1198  0838               	movf	(_DimmerIntr1^(0+128)+10),w
 20653  1199  077D               	addwf	DimmerLights_IOC_1@dimming,w
 20654  119A  00FA               	movwf	??_DimmerLights_IOC_1
 20655  119B  087A               	movf	??_DimmerLights_IOC_1,w
 20656  119C  00B9               	movwf	(_DimmerIntr1^(0+128)+11)
 20657                           
 20658                           ;Dimmer_B1.c: 1459: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20659  119D  12AF               	bcf	(_DimmerIntr1^(0+128)+1),5
 20660  119E  0020               	movlb	0	; select bank0
 20661  119F  1D0D               	btfss	13,2	;volatile
 20662  11A0  0008               	return
 20663  11A1  0021               	movlb	1	; select bank1
 20664  11A2  16AF               	bsf	(_DimmerIntr1^(0+128)+1),5
 20665  11A3  0008               	return
 20666  11A4                     __end_of_DimmerLights_IOC_1:	
 20667                           
 20668                           	psect	text144
 20669  1A50                     __ptext144:	
 20670 ;; *************** function _Division *****************
 20671 ;; Defined at:
 20672 ;;		line 1308 in file "../src/Dimmer_B1.c"
 20673 ;; Parameters:    Size  Location     Type
 20674 ;;  value           1    wreg     unsigned char 
 20675 ;;  num             1    5[COMMON] unsigned char 
 20676 ;; Auto vars:     Size  Location     Type
 20677 ;;  value           1    8[COMMON] unsigned char 
 20678 ;;  result          1    9[COMMON] unsigned char 
 20679 ;; Return value:  Size  Location     Type
 20680 ;;                  1    wreg      unsigned char 
 20681 ;; Registers used:
 20682 ;;		wreg, status,2, status,0, pclath, cstack
 20683 ;; Tracked objects:
 20684 ;;		On entry : 0/0
 20685 ;;		On exit  : 0/0
 20686 ;;		Unchanged: 0/0
 20687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20688 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20691 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20692 ;;Total ram usage:        5 bytes
 20693 ;; Hardware stack levels used:    1
 20694 ;; Hardware stack levels required when called:    1
 20695 ;; This function calls:
 20696 ;;		___lbdiv
 20697 ;; This function is called by:
 20698 ;;		_DimmerLights_IOC_1
 20699 ;;		_DimmerLights_IOC_2
 20700 ;; This function uses a non-reentrant model
 20701 ;;
 20702                           
 20703                           
 20704                           ;psect for function _Division
 20705  1A50                     _Division:	
 20706                           
 20707                           ;incstack = 0
 20708                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20709                           ;Division@value stored from wreg
 20710  1A50  00F8               	movwf	Division@value
 20711                           
 20712                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 20713  1A51  0875               	movf	Division@num,w
 20714  1A52  00F6               	movwf	??_Division
 20715  1A53  0876               	movf	??_Division,w
 20716  1A54  00F0               	movwf	___lbdiv@divisor
 20717  1A55  0878               	movf	Division@value,w
 20718  1A56  319E  260A         	fcall	___lbdiv
 20719  1A58  00F7               	movwf	??_Division+1
 20720  1A59  0877               	movf	??_Division+1,w
 20721  1A5A  00F9               	movwf	Division@result
 20722                           
 20723                           ;Dimmer_B1.c: 1310: return result;
 20724  1A5B  0879               	movf	Division@result,w
 20725  1A5C  0008               	return
 20726  1A5D                     __end_of_Division:	
 20727                           
 20728                           	psect	text145
 20729  1E0A                     __ptext145:	
 20730 ;; *************** function ___lbdiv *****************
 20731 ;; Defined at:
 20732 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20733 ;; Parameters:    Size  Location     Type
 20734 ;;  dividend        1    wreg     unsigned char 
 20735 ;;  divisor         1    0[COMMON] unsigned char 
 20736 ;; Auto vars:     Size  Location     Type
 20737 ;;  dividend        1    2[COMMON] unsigned char 
 20738 ;;  quotient        1    4[COMMON] unsigned char 
 20739 ;;  counter         1    3[COMMON] unsigned char 
 20740 ;; Return value:  Size  Location     Type
 20741 ;;                  1    wreg      unsigned char 
 20742 ;; Registers used:
 20743 ;;		wreg, status,2, status,0
 20744 ;; Tracked objects:
 20745 ;;		On entry : 0/0
 20746 ;;		On exit  : 0/0
 20747 ;;		Unchanged: 0/0
 20748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20749 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20750 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20752 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20753 ;;Total ram usage:        5 bytes
 20754 ;; Hardware stack levels used:    1
 20755 ;; This function calls:
 20756 ;;		Nothing
 20757 ;; This function is called by:
 20758 ;;		_Division
 20759 ;; This function uses a non-reentrant model
 20760 ;;
 20761                           
 20762                           
 20763                           ;psect for function ___lbdiv
 20764  1E0A                     ___lbdiv:	
 20765                           
 20766                           ;incstack = 0
 20767                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 20768                           ;___lbdiv@dividend stored from wreg
 20769  1E0A  00F2               	movwf	___lbdiv@dividend
 20770  1E0B  01F4               	clrf	___lbdiv@quotient
 20771  1E0C  0870               	movf	___lbdiv@divisor,w
 20772  1E0D  1903               	btfsc	3,2
 20773  1E0E  2E29               	goto	i1l7259
 20774  1E0F  01F3               	clrf	___lbdiv@counter
 20775  1E10  0AF3               	incf	___lbdiv@counter,f
 20776  1E11                     i1l7247:	
 20777  1E11  1BF0               	btfsc	___lbdiv@divisor,7
 20778  1E12  2E1A               	goto	i1l7249
 20779  1E13  1003               	clrc
 20780  1E14  0DF0               	rlf	___lbdiv@divisor,f
 20781  1E15  3001               	movlw	1
 20782  1E16  00F1               	movwf	??___lbdiv
 20783  1E17  0871               	movf	??___lbdiv,w
 20784  1E18  07F3               	addwf	___lbdiv@counter,f
 20785  1E19  2E11               	goto	i1l7247
 20786  1E1A                     i1l7249:	
 20787  1E1A  1003               	clrc
 20788  1E1B  0DF4               	rlf	___lbdiv@quotient,f
 20789  1E1C  0870               	movf	___lbdiv@divisor,w
 20790  1E1D  0272               	subwf	___lbdiv@dividend,w
 20791  1E1E  1C03               	skipc
 20792  1E1F  2E24               	goto	L13
 20793  1E20  0870               	movf	___lbdiv@divisor,w
 20794  1E21  02F2               	subwf	___lbdiv@dividend,f
 20795  1E22  1474               	bsf	___lbdiv@quotient,0
 20796  1E23  1003               	clrc
 20797  1E24                     L13:	
 20798  1E24  0CF0               	rrf	___lbdiv@divisor,f
 20799  1E25  3001               	movlw	1
 20800  1E26  02F3               	subwf	___lbdiv@counter,f
 20801  1E27  1D03               	btfss	3,2
 20802  1E28  2E1A               	goto	i1l7249
 20803  1E29                     i1l7259:	
 20804  1E29  0874               	movf	___lbdiv@quotient,w
 20805  1E2A  0008               	return
 20806  1E2B                     __end_of___lbdiv:	
 20807  007E                     btemp	set	126	;btemp
 20808  007E                     pic14e$flags	set	126
 20809  007E                     wtemp	set	126
 20810  007E                     wtemp0	set	126
 20811  0080                     wtemp1	set	128
 20812  0082                     wtemp2	set	130
 20813  0084                     wtemp3	set	132
 20814  0086                     wtemp4	set	134
 20815  0088                     wtemp5	set	136
 20816  007F                     wtemp6	set	127
 20817  007E                     ttemp	set	126
 20818  007E                     ttemp0	set	126
 20819  0081                     ttemp1	set	129
 20820  0084                     ttemp2	set	132
 20821  0087                     ttemp3	set	135
 20822  007F                     ttemp4	set	127
 20823  007E                     ltemp	set	126
 20824  007E                     ltemp0	set	126
 20825  0082                     ltemp1	set	130
 20826  0086                     ltemp2	set	134
 20827  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      80
    BANK3            80      0      78
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  157677
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5642
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5642
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4608
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4608
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              1 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   49455
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   49455
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45736
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5139
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40325
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12564
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21936
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2315
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1235
                                              7 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3729
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   64841
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   64509
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   41896
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4496
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   22094
                                             75 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3821
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              2 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5731
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5731
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3286
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                             14 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0    1174
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      46
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0    1128
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Jan 31 10:51:26 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C75  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l98 1529                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1ED3                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1B6C                    __end_of_setDelayOff_GO 0CA9  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1798  
                    _setDimmerLights_Line 1D14                              ___ftadd@sign 004C  
                                     l100 153D                                       l110 1391  
                                     l112 13A1                                       l108 13A7  
                                     l109 13A3                      _setDimmerLights_SwOn 15AC  
                                     l327 1C81                                       l328 1C83  
                                     l371 1EFD                                       l283 09B7  
                                     l259 092C                                       l581 0A2B  
                                     l910 1B75                                       l911 1B7D  
                                     l752 1BE7                                       l905 1D23  
                                     l852 1DE0                                       l876 07A9  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D0                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C9  
                                     _Cmd 00CC              getDimmerLights_Status@lights 0023  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0022                ??_setDimmerIntr_Dimming_Sw 0022  
         setDimmerIntr_Dimming_RF@command 0021                  __end_of_CC2500_WriteByte 1C8E  
                   _Buzzer_Initialization 192B                           __end_of_ADC_Set 196F  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0024       __end_of_setDimmerIntr_ControlStatus 1FA2  
             _setDimmerIntr_ControlStatus 1F73                         ??_getSw_KeyStatus 0021  
                                    ?_ISR 0070                              ___ftdiv@cntr 0039  
                         __end_of_IOC_ISR 19FC                     _setDimmerLights_OnOff 071B  
        setDimmerLights_DimmingRun@lights 0025                                Load_Main@i 0031  
                            ___ftdiv@sign 003E                                      l2001 0E8B  
                                    l2012 0E83                                      l1118 1DB5  
                                    l1119 1DBF                                      l2007 0E00  
                                    l1153 12D6                            _Load_Main$4111 002C  
                                    l1425 10F1                                      l1702 1C74  
                                    l2414 0AA2                                      l1439 1FF9  
                                    l1448 1449                                      l3163 1652  
                                    l2436 0CBF                                      l1661 1070  
                                    l3157 163B                           __end_of_IOC_Set 19CF  
                                    l2445 0D37                                      l2429 10BD  
                                    l2373 058D                                      l1637 121C  
                                    l1662 108B                                      l1830 0086  
                                    l2374 05DE                                      l1831 0081  
                                    l2369 063E                                      l1666 1087  
                                    l3186 0427                                      l1827 01FE  
                                    l1693 071A                                      l1837 01DA  
                                    l1829 008A                                      l1838 01D8  
                                    l2399 07F5                                      l2766 1BC5  
                                    l2790 024A                                      l6231 1618  
                                    l6241 1640                                      l6233 1622  
                                    l6401 03E0                                      l6243 1648  
                                    l6235 1627                                      l6227 1611  
                                    l6411 0402                                      l7043 1F8B  
                                    l7051 1C3A                                      l2788 037E  
                                    l7061 1BDD                                      l6421 0423  
                                    l6413 0406                                      l7141 1471  
                                    l6407 03F3                                      l7071 1F5E  
                                    l7127 1460                                      l7135 1468  
                                    l7311 0948                                      l7303 093B  
                                    l6329 1BF5                                      l6425 0439  
                                    l6409 03FD                                      l6521 0F15  
                                    l6513 0F01                                      l6345 1AB6  
                                    l7161 1495                                      l7305 093F  
                                    l6339 1C0C                                      l7403 1244  
                                    l6419 0419                                      l7331 096B  
                                    l7307 0942                                      l2996 1D57  
                   _setDimmerLights_SwOff 112E                                      l9101 14F1  
                                    l7413 1255                                      l7405 1247  
                                    l6429 044B                                      l6525 0F1D  
                                    l6509 0EF9                                      l6349 1ABC  
                                    l7157 1491                                      l7165 1499  
                                    l7149 1479                                      l8061 1E78  
                                    l7415 125A                                      l6367 1E99  
                                    l6439 0466                                      l6383 03B7  
                                    l6455 0D65                                      l6711 1C23  
                                    l7183 1AAC                                      l7351 0983  
                                    l7335 0971                                      l8063 1E7B  
                                    l6449 0D4F                                      l7185 1AB1  
                                    l9201 0C8B                                      l7353 099C  
                                    l7329 0968                                      l7273 08F8  
                                    l6379 03B0                                      l7179 1AA5  
                                    l6491 0EA8                                      l6811 1CBA  
                                    l7275 08FB                                      l8067 1E81  
                                    l6389 03C6                                      l6477 0DBF  
                                    l6469 0DA6                                      l6549 0BAF  
                                    l9221 171D                                      l9205 0C9F  
                                    l8085 141B                                      l7701 111E  
                                    l6805 1CB1                                      l7293 0913  
                                    l7391 122E                                      l6583 0C14  
                                    l6575 0BFA                                      l6567 0BDF  
                                    l9231 1B31                                      l6719 1FBA  
                                    l8079 1406                                      l6807 1CB4  
                                    l6831 1D47                                      l7279 0901  
                                    l6577 0C03                                      l6569 0BED  
                                    l9401 13C7                                      l6497 0EBE  
                                    l7705 1127                                      l7297 0932  
                                    l6667 115C                                      l9075 14BA  
                                    l9147 15C0                                      l6579 0C06  
                                    l6843 1F0E                                      l6851 1EB9  
                                    l7299 0935                                      l9331 0D16  
                                    l9323 0CCE                                      l9315 0CAA  
                                    l8283 1BD0                                      l8611 128C  
                                    l9093 14E0                                      l9085 14C2  
                                    l9069 14AF                                      l9157 15D1  
                                    l9149 15C3                                      l9501 17EC  
                                    l7549 1FE1                                      l6845 1F19  
                                    l6853 1EBC                                      l6829 1D41  
                                    l9261 0B2D                                      l9333 0D1A  
                                    l9325 0CD5                                      l9421 0A48  
                                    l7653 1C51                                      l9087 14CE  
                                    l9167 15FA                                      l9159 15D6  
                                    l9191 0C5B                                      l9503 17F3  
                                    l6943 1EDD                                      l9335 0D1E  
                                    l9327 0CF0                                      l8279 1BCA  
                                    l9097 14E9                                      l9169 15FF  
                                    l8377 1D51                                      l7745 1E56  
                                    l6857 1EC2                                      l6945 1EE0  
                                    l7593 1A9B                                      l9265 0B32  
                                    l9249 1313                                      l9329 0D12  
                                    l9433 0A60                                      l9521 0E02  
                                    l9291 1074                                      l6883 1C6E  
                                    l9363 0788                                      l7755 1E66  
                                    l6971 1345                                      l9275 0B82  
                                    l9339 0D22                                      l7667 1D98  
                                    l8397 137B                                      l9381 07C0  
                                    l7693 1100                                      l7757 1E6B  
                                    l6981 1355                                      l6973 1348  
                                    l6949 1EE6                                      l9437 0A69  
                                    l9605 05D9                                      l7677 1DA4  
                                    l7669 1D9A                     _myMain_Initialization 1B59  
                                    l6879 1C5F                                      l9359 076D  
                                    l8479 04FD                                      l7695 110C  
                                    l6983 1358                                      l7679 1DA8  
                                    l9527 0E11                                      l8575 0AE2  
                                    l8567 0AC3                                      l9289 106B  
                                    l9377 07B9                                      l6977 134E  
                                    l9449 0A7E                                      l9633 061F  
                                    l9705 02F2                                      l9529 0E14  
                                    l9299 1082                                      l9395 07ED  
                                    l9491 17C4                                      l6987 135E  
                                    l9619 05ED                                      l9715 0326  
                                    l9571 0E70                                      l8595 0B11  
                                    l8579 0AEA                                      l9901 018E  
                                    l9557 0E58                                      l9911 01AA  
                                    l9647 0637                                      l9559 0E5A  
                                    l9489 17BE                                      l9753 1DE2  
                                    l9921 01C0                                      l9905 019A  
                                    l9825 0068                                      l9681 027D  
                                    l9665 0234                                      l9569 0E6F  
                                    _CFGS 0CAE                                      l9843 0089  
                                    l9691 02B2                              __CFG_WDTE$ON 0000  
                                    l9865 00DF                                      l9793 11FB  
                                    l9891 0162                                      l9859 00AD  
                                    l9957 01ED                                      l9993 0674  
                                    l9897 0171                                      l9987 0664  
                                    l9997 0683                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5005 1636  
                                    u5025 1643                                      u5055 1659  
                                    _PEIE 005E                                      u5405 03F4  
                                    u5435 0407                                      u5375 03E1  
                                    u5535 0D77                                      u5615 0ECA  
                                    u5465 041A                                      u5545 0D87  
                                    u5625 0EDA                                      u6185 1F03  
                                    u5555 0DA7                                      u7155 0810  
                                    u5565 0DB6                                      u5645 0F02  
                                    u5575 0DC0                                      u5735 0BB6  
                                    u5655 0F08                                      u5825 1BA3  
                                    u9105 0AD2                                      u7515 110D  
                                    u5765 0BE0                                      u5685 0F1E  
                                    u7525 1117                                      u9205 1280  
                                    u5695 0F24                                      u7535 111F  
                                    u4985 161D                                      u5795 0BFB  
                                    u9155 0B01                                      u7495 1103  
                                    u8825 1D58                                      u8835 1D5D  
                                    u8865 1371                                      _LWLO 0CAD  
                                    u9945 14C5                                      u9965 14CF  
                                    u9975 14D9                                      u9985 14E1  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1CF8  
              _setDimmerLights_DimmingRun 1CDD                                      _Buz1 012D  
                                    _Load 0140                                      _Temp 00DB  
                                    _main 1551                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 0A32                           __end_of_RF_Main 1937  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 19DA                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B96                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2375 0023  
    _getDimmerLights_Allow_Condition$2376 0024      _getDimmerLights_Allow_Condition$2377 0025  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 125C  
__size_of_getDimmerLights_Allow_Condition 003E         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 121E  
                  _getDimmerLights_Status 1A5D                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1A38                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                                     l10005 06AB  
                                   l10023 06ED                                     l10007 0686  
                                   l10025 06C8                                     l10009 06B3  
                                   l10027 06F5                                     l10035 0710  
                                   l10029 06FF                                     l10061 1580  
                                   l10057 1575                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0265  
                         __end_of___awdiv 14F8                           __end_of___lbdiv 1E2B  
                         __end_of___ftadd 047E                           __end_of___ftdiv 0DE1  
                         __end_of___ftneg 19B0                                     u10200 16D8  
                                   u10205 16D6                                     u11015 060E  
                         __end_of___ftmul 0F45                                     u10185 0C67  
                         ___awdiv@divisor 0021                                     u11325 1214  
                                   _T1CON 0018                                     u11275 10E8  
                                   u11700 06B1                           __end_of___fttol 0C1D  
                                   u11705 068F                                     u11465 00AB  
                                   u11730 06F3                                     u11475 00DD  
                                   u11565 01A1                                     u11485 0121  
                                   u11735 06D1                                     u10875 0E40  
                                   u10895 0E60                                     u10985 05B1  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 112E  
                                   i1l960 086B                                     i1l962 0860  
                                   i1l971 087D                                     i1l956 0846  
                                   i1l965 0869                                     i1l992 08AF  
                                   i1l996 08D4                                     i1l998 08C9  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 0816                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 16CE   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1669                                     _Light 00D1  
                        __end_of_TMR1_ISR 1E4C                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1A44  
                                   _getAD 1E6D                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1B0D  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1AE9  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1AD7  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 16CE                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E5               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0021               ??_setDimmerLights_DimmingOn 0023  
                      ??_CC2500_SIDLEMode 0025                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1A5D                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 15AC                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1941            getMain_All_LightsStatus@status 0021  
                      ??_setMemory_Modify 0021              setDimmerLights_OnOff@command 00E5  
                          _Exception_Main 0644                          ?_CC2500_WriteREG 0023  
                               ??_ADC_Set 0021                      _setSw_Initialization 1997  
                                  ??_main 006E                             ___fttol@sign1 0057  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0021  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 0CA9  
                          _setMemory_Data 1A08                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 13AE  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00AE                               _DimmerIntr2 00BA  
                _getMain_All_LightsStatus 1B20                  __size_of_setRFSW_Control 0043  
                      _RF_Timeout_Counter 1B94                   ??_Switch_Initialization 0026  
                  ?_setDimmerLights_OnOff 00E5                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0021                         ??_getRF_KeyStatus 0021  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09C3  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0023                     _getDimmer_Load_Status 198F  
                               ??_WDT_Set 0021                          __end_of___awtoft 1EB0  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1669  
                _getMain_All_Error_Status 105A                                    _IOCBF2 1CB2  
                                  i1l1001 08D2                                    i1l1007 08E6  
                                  i1l1390 001B                                    i1l1387 0013  
                                  i1l7247 1E11                                    i1l7249 1E1A  
                                  i1l7259 1E29                                    i1l7823 0827  
                                  i1l7911 0890                                    i1l7841 083E  
                                  i1l7835 0836                                    i1l7923 089F  
                                  i1l7829 082E                                    i1l7917 0897  
                                  i1l7871 0876                                    i1l7863 0862  
                                  i1l7951 08CB                                    i1l7929 08A7  
                                  i1l7959 08DF                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0027                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1CC2  
                                  _WDTCON 0097                                    u896_25 1E46  
                      DelayTime_1us@count 0021                      Exception_Main@i_3748 0033  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0064  
           __end_of_CC2500_PowerOnInitial 1BBE                                    _Dimmer 0139  
                                  _DlySw1 01D8                                    _DlySw2 01DD  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1AB3  
              __end_of_Mcu_Initialization 1AFB                       __end_of_Buzzer_Main 13AE  
                                  _Memory 0220                                    _Timer1 00C6  
                                  ___bmul 1AB3                    __end_of_Exception_Main 071B  
                    Exception_Main@lights 0035                                    ___wmul 1D4E  
                               ??___awdiv 0025                                 ??___lbdiv 0071  
                               ??___ftadd 0048              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0035                                 ??___ftneg 0042  
                               ??___ftmul 0035                                 ??___fttol 0053  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0021  
                               ??___lwdiv 0025                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0021                                    _r_data 00D9  
                    Exception_Main@status 002F   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E6D  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021         ??_getAll_DimmerIntr_Dimming_Sw_RF 0021  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E4C  
                                  _s_data 00DA                    ??_setDimmerLights_SwOn 002E  
                                  _setLED 1451                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0021                    __end_of_setMemory_Data 1A14  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0028  
                                  _setBuz 14F8                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0030               __end_of_Load_Initialization 1931  
        ??_setDimmerLights_Initialization 0021           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1FD1                   DimmerLights_TMR_1@count 0071  
        __end_of_setDimmerIntr_Dimming_Sw 1F73                   DimmerLights_TMR_2@count 0071  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 1001  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1B59               getMain_Lights_Count@status1 0022  
             getMain_Lights_Count@status2 0023               __size_of_DimmerLights_IOC_1 003D  
             __size_of_DimmerLights_IOC_2 003D                     __end_of_SwPointSelect 1C5C  
             __size_of_DimmerLights_TMR_1 0069               __size_of_DimmerLights_TMR_2 0069  
            __size_of_Flash_Memory_Modify 0052                   __size_of_LedPointSelect 0020  
         setDimmerIntr_Dimming_Sw@command 0021                        setTemp_Main@TempGO 00E6  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0022  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1BBE  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0026  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004E  
         getDimmerIntr_DimmingValue@value 0022           setDimmerIntr_DimmingValue@value 0021  
                               ?_LED_Main 0070                                ___ftadd@f1 0042  
                              ___ftadd@f2 0045                      _getRF_KeyStatus$5521 0023  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2314 002F  
               _setDimmerLights_SwOn$2323 0030                                ___ftdiv@f1 0032  
                              ___ftdiv@f2 002F                                ___ftdiv@f3 003A  
                              ___ftneg@f1 003F                                ___awtoft@c 0029  
                     ___bmul@multiplicand 0021              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002F                                ___ftmul@f2 0032  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004F  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1DEA                             __end_of_getAD 1E8E  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0022                 setMemory_LoopSave@command 0022  
                      _LED_Initialization 1A20                           _getSw_KeyStatus 1D8B  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0022  
                         ?_setMemory_Data 0021          ??_getDimmerLights_PercentToValue 005D  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006C  
           ??_Flash_Memory_Initialization 0063                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1AD7                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0202         setDimmerIntr_ControlStatus@lights 0023  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1C17  
              __end_of_set_TimeoutCleared 1956           setDimmerIntr_MaxmumValue@lights 0065  
                      __size_of_getRxData 0072                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 19FC  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0024                       _Temp_Initialization 1937  
                      ??_CC2500_WriteByte 0021                                 ?_Division 0075  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1364  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 193D                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 196F  
                           ??_Switch_Main 0036                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00CF                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0024                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1551  
                          _getDelayOff_GO 1A6E                       _CC2500_WriteCommand 1CA8  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 105A  
           ??_DimmerLights_Initialization 0022                                   ?___wmul 0021  
                              ??_TMR1_ISR 0072                             ?_setTemp_Main 0070  
                              _getLoad_AD 0AA4                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 197F                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1968  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 125C  
      __end_of_DimmerLights_SelectPointer 1C17                _DimmerLights_SelectPointer 1C00  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 19E5  
                      _setRFSW_AdjControl 0B16                    __end_of_setProductData 1A08  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 19F0  
                                 _IOC_Set 19C4                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0026  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 10C1  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1C8E  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1934                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 19CF           __end_of_setControl_Lights_Table 0D38  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 13FF                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 1A50  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 1A90                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1A7F  
                                 _VarLED1 01E6                                   _VarLED2 01EA  
          __end_of_getDimmerLights_Status 1A6E                         __end_of_getRxData 0AA4  
                 __end_of_getSw_KeyStatus 1DAA                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 14A4  
                                 ___lbdiv 1E0A                                   ___ftadd 0388  
                                 ___ftdiv 0D38                                   ___ftneg 19A7  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0B96                       __end_of_Switch_Main 19F0  
                                 ___lwdiv 10F7                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1A90  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 11E1  
                                 __ptext2 1B59                                   __ptext3 125C  
                                 __ptext4 0AA4                                   __ptext5 1E6D  
                                 __ptext6 1AFB                                   __ptext7 0002  
                                 __ptext8 193A                                   __ptext9 0DE1  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 10F7  
               __end_of_Flash_Memory_Read 1CA8                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 056D                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 1977                         _DimmerLights_Main 1DCA  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 195C  
              __end_of_CC2500_ClearRXFIFO 1949                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 194D                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1DAA                           getTemp_AD@ADRES 0027  
                     _DelayOffPointSelect 1BE9                                   clrloop0 1963  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 19A7  
                    end_of_initialization 004E                 ??_DelayOff_Initialization 0024  
                       _CC2500_InitSetREG 1F1E                             _DelayTime_1us 1EF8  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 2000  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 195C  
              __end_of_setRF_TransceiveGO 1B20                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006E                      Flash_Memory_Read@ret 0024  
                                 initloop 195D                                _setSw_Main 0202  
                   CC2500_ReadByte@loop_b 0022                    setDimmerLights_SwOn@sw 0032  
                       _CC2500_ReadStatus 1ED3                      Flash_Memory_Modify@i 0026  
                   _setLED_Initialization 1AC5                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0025                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0955  
                           _CC2500_TxData 08E8                       ??_CC2500_InitSetREG 0026  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 13FF                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0021  
                            __pstringtext 1800                             _setCmd_Status 1C5C  
                     _Flash_Memory_Unlock 19B0                       ??_CC2500_ReadStatus 0023  
                 CC2500_InitSetREG@loop_c 0029                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0025  
                 setTemp_Main@DangerValue 00E9                    setSw_Initialization@sw 0025  
               __end_of_DimmerLights_Main 1DEA                        _Mcu_Initialization 1AE9  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1945  
                    __end_of_my_MainTimer 121E                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1DCA  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002E  
        getDimmerIntr_DimmingValue@lights 0023          setDimmerIntr_DimmingValue@lights 0023  
               __end_of_CC2500_InitSetREG 1F48                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0021                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1EF8  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0023  
         getMain_All_Error_Status@command 0026                               ___ftdiv@exp 003D  
       __end_of_setDimmerLights_DimmingOn 1029                          ??_Exception_Main 002E  
                          __end_of_IO_Set 1CDD                      _setRF_Initialization 19DA  
                      _setMemory_LoopSave 1B46                               _Switch_Main 19E5  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1AA1                          ??_setMemory_Data 0022  
                             ___ftmul@exp 0039                     _CC2500_PowerOnInitial 1BA9  
             ??_DimmerIntr_Initialization 0021                      ??_Mcu_Initialization 0022  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1AC5  
     __size_of_getDimmerIntr_DimmingValue 0016                 DimmerLights_IOC_2@dimming 007D  
                    setRF_DimmerLights@on 0066                            __end_of___wmul 1D6C  
                       getSw_KeyStatus@sw 0025               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0021             __size_of_getDimmerLights_Line 0014  
        DimmerLights_SelectPointer@lights 0022                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0068                            __end_of_setLED 14A4  
                           __pbitbssBANK0 0370             __size_of_setDimmerLights_Line 001D  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 1551  
              __end_of_DimmerLights_IOC_1 11A4                __end_of_DimmerLights_IOC_2 11E1  
                    _CC2500_FrequencyCabr 1A44                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 12DD  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 087F  
              __end_of_DimmerLights_TMR_2 08E8                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0052  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1987                     ??_Flash_Memory_Modify 0025  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0021  
              __end_of_CC2500_InitPATable 1D8B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0021                     ??_Flash_Memory_Unlock 0021  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0025  
  __end_of_getDimmerLights_PercentToValue 1798   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 1733                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005F  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1951  
       __end_of_setDimmerIntr_MaxmumValue 1C2E                                  ??_IO_Set 0021  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 01E2  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 193A  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0021  
                               _Rx_Length 00D3                     setProductData@address 0065  
                     Exception_Main@count 0030                       Exception_Main@error 0036  
                                ??___bmul 0022                                  ??___wmul 0025  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 1B33  
                               _Tx_Length 00D7                               __pdataBANK4 0245  
                                ??_setLED 0024                                  ?_ADC_Set 0070  
                                ??_setBuz 002C                           ??_DelayOff_Main 0069  
                       ??_CC2500_ReadByte 0021               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 108D                          _CC2500_SIDLEMode 194D  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0021  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0023  
                           ??_setLED_Main 0023                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002F  
                               ___latbits 0003                          _setMemory_Modify 1B33  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0022  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0021  
               _DimmerIntr_Initialization 1029                           ??_DelayTime_1us 0023  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0068  
                       ??_CC2500_PowerRST 0027                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0022  
                            ??_TouchPower 0021                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0063  
             setDimmerLights_DimmingOn@sw 0023                         ??_CC2500_WriteREG 0024  
                           ??_setRF_Learn 0021                             _DimmerLights1 0168  
                           _DimmerLights2 01D0                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 1D14  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1941  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0031  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D7  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1AA1                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1A7F                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 056D               _Flash_Memory_Initialization 047E  
                                ?___awdiv 0021                                 __ptext100 1A6E  
                               __ptext101 1AA1                                  ?___lbdiv 0070  
                               __ptext110 0B96                                 __ptext102 13AE  
                               __ptext111 19A7                                 __ptext103 0F45  
                               __ptext120 19B9                                 __ptext112 0D38  
                               __ptext104 1B0D                                 __ptext121 1000  
                               __ptext113 0388                                 __ptext105 16CE  
                               __ptext130 1A5D                                 __ptext122 1029  
                               __ptext114 1E8E                                 __ptext106 1D14  
                               __ptext131 1C00                                 __ptext123 1977  
                               __ptext115 1608                                 __ptext107 1C17  
                               __ptext140 0816                                 __ptext132 196F  
                               __ptext124 09C3                                 __ptext116 1BD3  
                               __ptext108 1F48                                 __ptext141 19F0  
                               __ptext133 1956                                 __ptext125 19FC  
                               __ptext117 121E                                 __ptext109 1669  
                                ?___ftadd 0042                                 __ptext142 11A4  
                               __ptext134 1BE9                                 __ptext126 15AC  
                               __ptext118 197F                                 __ptext143 1167  
                               __ptext135 1364                                 __ptext127 14F8  
                               __ptext119 105A                                 __ptext144 1A50  
                               __ptext136 192B                                 __ptext128 14A4  
                               __ptext145 1E0A                                 __ptext129 112E  
                               __ptext138 1E2B                                 __ptext139 087F  
                               _getRxData 0A32                                  ?___ftdiv 002F  
                                ?___ftneg 003F                                  ?___ftmul 002F  
                                ?___fttol 004F                     __size_of_my_MainTimer 003D  
                                ?___lwdiv 0021                   __end_of_setRFSW_Control 1320  
                        ??_setProductData 0064             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 192E  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0022  
                      __end_of_TouchPower 1BD3                       __size_of_setSw_Main 0186  
            CC2500_ReadStatus@status_addr 0024        __end_of_getDimmerIntr_DimmingValue 1BE9  
            ??_setDimmerIntr_DimmingValue 0022                _getDimmerIntr_DimmingValue 1BD3  
                  CC2500_WriteByte@loop_a 0022            __size_of_setDimmerLights_OnOff 00D5  
                               _r_address 00D8             __end_of_setDimmerLights_OnOff 07F0  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1167              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1B6C                            __size_of_getAD 0021  
                        ___lwdiv@quotient 0026                             _SwPointSelect 1C45  
                     __end_of_setLED_Main 12DD                          ??_getDelayOff_GO 0023  
                  ??_setRF_Initialization 0021               __end_of_Temp_Initialization 193A  
                       _CC2500_rfSettings 182F                            ___wmul@product 0025  
                                _LED_Main 1A2C                           SwPointSelect@sw 0022  
                               clear_ram0 1962                  CC2500_InitPATable@loop_d 0028  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 11E1  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 19C4  
             _DimmerLights_Initialization 19B9                        _CC2500_ClearRXFIFO 1945  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1949  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1B94                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 002F               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 1FD1  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1E2B                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 1A38                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1B0D  
                                _RF_Count 013E                      __end_of_RF_RxDisable 07FF  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1CC2  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1AFB  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0024  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CD                              setSw_Main@sw 0035  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1A20                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 10C1                     _DlyOff_Initialization 1956  
       __size_of_getMain_All_LightsStatus 0013                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 1A50                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1FA2  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1F48  
                                _Fosc_Set 193D                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 0B16  
                      __end_of_getLoad_OK 1987                     _Switch_Initialization 199F  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 129C                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1C75  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 0017  
                    ??_setRF_TransceiveGO 0021              Flash_Memory_Initialization@i 0064  
                                _SwDetect 00D6                               ??_Temp_Main 0067  
                        getCmd_Status@cmd 0022                          setCmd_Status@cmd 0021  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$3735 0022  
           _getMain_All_Error_Status$3736 0024                  __end_of_getDimmer_LoadGO 198F  
                     _Load_Initialization 192E          ??_getDimmerLights_ValueToPercent 005D  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0024  
                            _setTemp_Main 0DE1                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0031                                  ___awtoft 1E8E  
                        ??_LedPointSelect 0021                                  ___ftpack 1608  
           __size_of_getMain_Lights_Count 0012                    getDimmer_LoadGO@loadgo 0021  
                       getTemp_AD@channel 0026                              ??_setRF_Main 00EA  
                    CC2500_WriteREG@value 0023                               _setLED_Main 129C  
              __end_of_setRF_DimmerLights 1733            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0024  
                        getDelayOff_GO@sw 0023             __end_of_getDimmer_Load_Status 1997  
                        setDelayOff_GO@sw 006D                           ___lwdiv@divisor 0021  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0028  
                                __ptext10 1937                                  __ptext11 07FF  
                                __ptext20 0800                                  __ptext12 19E5  
                                __ptext21 199F                                  __ptext13 0202  
                                __ptext30 0B16                                  __ptext22 1997  
                                __ptext14 1B80                                  __ptext31 1B33  
                                __ptext23 1934                                  __ptext15 1001  
                                __ptext40 1BA9                                  __ptext32 1CDD  
                                __ptext24 056D                                  __ptext16 1D8B  
                                __ptext41 194D                                  __ptext33 1A90  
                                __ptext25 0A32                                  __ptext17 1C45  
                                __ptext50 1CA8                                  __ptext42 1320  
                                __ptext34 1A7F                                  __ptext26 108D  
                                __ptext18 1BBE                                  __ptext51 1941  
                                __ptext43 1F1E                                  __ptext35 07F0  
                                __ptext27 1B46                                  __ptext19 1951  
                                __ptext60 19C4                                  __ptext52 1B94  
                                __ptext44 1D6C                                  __ptext36 08E8  
                                __ptext28 0CA9                                  __ptext61 193D  
                                __ptext53 1C75                                  __ptext45 1EB0  
                                __ptext37 0955                                  __ptext29 12DD  
                                __ptext70 192E                                  __ptext62 1968  
                                __ptext54 1931                                  __ptext46 1A44  
                                __ptext38 1ED3                                  __ptext71 1CF8  
                                __ptext63 0052                                  __ptext55 19DA  
                                __ptext47 1EF8                                  __ptext39 1D31  
                                __ptext80 1A08                                  __ptext72 1A2C  
                                __ptext64 1AD7                                  __ptext56 1AE9  
                                __ptext48 1949                                  __ptext81 1FD1  
                                __ptext73 129C                                  __ptext65 198F  
                                __ptext57 19CF                                  __ptext49 1945  
                                __ptext90 1DAA                                  __ptext82 19B0  
                                __ptext74 1A20                                  __ptext66 1987  
                                __ptext58 1A38                                  __ptext91 1FA2  
                                __ptext83 1C8E                                  __ptext75 1AC5  
                                __ptext67 1E4C                                  __ptext59 1CC2  
                                __ptext92 1C2E                                  __ptext84 0644  
                                __ptext76 10C1                                  __ptext68 1D4E  
                                __ptext93 1F73                                  __ptext85 1B6C  
                                __ptext77 13FF                                  __ptext69 10F7  
                                __ptext94 0C1D                                  __ptext86 1DCA  
                                __ptext78 1A14                                  __ptext95 1AB3  
                                __ptext87 1798                                  __ptext79 047E  
                                __ptext96 1C5C                                  __ptext88 071B  
                                __ptext97 1B20                                  __ptext89 1451  
                                __ptext98 1733                                  __ptext99 0E91  
                                __product 0245                   ??_setLED_Initialization 0025  
                ??_getDimmerLights_Status 0023              __end_of_getDimmerLights_Line 1B80  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D31  
                      _DimmerLights_IOC_1 1167                        _DimmerLights_IOC_2 11A4  
            __end_of_setDimmerLights_SwOn 1608                              ??_setSw_Main 0033  
                  ??_setRF_TimeoutCleared 0021              ??_setDimmerLights_DimmingRun 0024  
                           setLED@command 0023                             __size_of_main 005B  
                             _setRF_Learn 1B80        __size_of_DimmerIntr_Initialization 0031  
                         ??_getCmd_Status 0021                        _DimmerLights_TMR_1 0816  
                      _DimmerLights_TMR_2 087F                  __end_of_CC2500_SIDLEMode 1951  
              setDimmerLights_Main@lights 00E9               __end_of_DelayOffPointSelect 1C00  
              CC2500_WriteCommand@command 0024                           _CC2500_ReadByte 1D31  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1D6C  
                __end_of_setMemory_Modify 1B46      _getAll_DimmerIntr_Dimming_Sw_RF$2268 0022  
    _getAll_DimmerIntr_Dimming_Sw_RF$2269 0023                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 0644  
                             ??_getBuz_GO 0023                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E8  
                            getLoad_OK@ok 0021                __end_of_RF_Timeout_Counter 1BA9  
                                main@argc 0265                                  main@argv 0267  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6570 0023  
                    _getSw_KeyStatus$6569 0022       getDimmerLights_ValueToPercent@value 005F  
                         _CC2500_PowerRST 1320                  __size_of_getSw_KeyStatus 001F  
      __end_of_setDimmerIntr_DimmingValue 1C45                _setDimmerIntr_DimmingValue 1C2E  
             __end_of_Flash_Memory_Modify 1451                               _setLog_Code 108D  
             __end_of_Flash_Memory_Unlock 19B9                           ??_SwPointSelect 0021  
                         _CC2500_WriteREG 1EB0                        __end_of_setSw_Main 0388  
                   ??_Load_Initialization 0023                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 0060  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0371  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0021  
              setDimmerLights_Line@lights 0021                   setDimmerLights_SwOff@sw 0023  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0026                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 006A                           setDelayOff_GO@j 006B  
                         setDelayOff_GO@k 006C                   ??_CC2500_PowerOnInitial 002A  
                   setTemp_Main@SafeValue 00E7    __end_of_setDimmerLights_Initialization 1001  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1000  
              ?_setDimmerIntr_MaxmumValue 0063                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0021                    CC2500_InitPATable@temp 0027  
                         getLoad_AD@ADRES 002A                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1931                               getLoad_AD@i 002C  
                             getLoad_AD@j 0029                               getLoad_AD@k 0028  
                    _Flash_Memory_Erasing 1A14                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D4                   __size_of_Exception_Main 00D7  
                           Division@value 0078           __end_of_DelayOff_Initialization 1977  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 197F  
                     ??_RF_Initialization 0022                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C1D               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 008F          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0021      __size_of_Flash_Memory_Initialization 00EF  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0066  
                   setMemory_Data@address 0023                     __end_of_DelayTime_1us 1F1E  
                 __end_of_CC2500_ReadByte 1D4E              __end_of_setSw_Initialization 199F  
                         _Timeout_Counter 0800           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 0060                              _RF_RxDisable 07F0  
              __end_of_LED_Initialization 1A2C            __end_of_setTemp_Initialization 0800  
                             Division@num 0075                   setMemory_Modify@command 0022  
                 DimmerLights_IOC_1@count 007C                   DimmerLights_IOC_2@count 007C  
               __end_of_RF_Initialization 1934                     __end_of_CC2500_RxData 09C3  
                   __end_of_CC2500_TxData 0955                     _setLoad_AH_AL_Restore 1CF8  
                 __end_of_CC2500_PowerRST 1364  
