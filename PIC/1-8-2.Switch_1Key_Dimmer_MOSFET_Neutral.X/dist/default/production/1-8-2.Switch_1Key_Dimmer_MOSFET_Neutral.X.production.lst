

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 20 15:56:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1069                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1069  3463               	retlw	99
  2163  106A  3402               	retlw	2
  2164  106B  3400               	retlw	0
  2165  106C  3400               	retlw	0
  2166  106D  3400               	retlw	0
  2167  106E  3400               	retlw	0
  2168  106F  3400               	retlw	0
  2169  1070  3400               	retlw	0
  2170  1071  3400               	retlw	0
  2171  1072  3400               	retlw	0
  2172  1073  3400               	retlw	0
  2173  1074  3400               	retlw	0
  2174  1075  34FF               	retlw	255
  2175  1076  34FF               	retlw	255
  2176  1077  34FF               	retlw	255
  2177  1078  3400               	retlw	0
  2178  1079  3400               	retlw	0
  2179  107A  3400               	retlw	0
  2180  107B  3400               	retlw	0
  2181  107C  3400               	retlw	0
  2182  107D  3400               	retlw	0
  2183  107E  3400               	retlw	0
  2184  107F  3400               	retlw	0
  2185  1080  3400               	retlw	0
  2186  1081  3400               	retlw	0
  2187  1082  3400               	retlw	0
  2188  1083  3400               	retlw	0
  2189  1084  3400               	retlw	0
  2190  1085  3400               	retlw	0
  2191  1086  3400               	retlw	0
  2192  1087  3400               	retlw	0
  2193  1088  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  020D                     _WPUB	set	525
  2365  1069                     _WPUB1	set	4201
  2366  106A                     _WPUB2	set	4202
  2367  0396                     _IOCBF	set	918
  2368  0395                     _IOCBN	set	917
  2369  0394                     _IOCBP	set	916
  2370  1CB2                     _IOCBF2	set	7346
  2371                           
  2372                           ; #config settings
  2373  0000                     
  2374                           	psect	cinit
  2375  0015                     start_initialization:	
  2376  0015                     __initialization:	
  2377                           
  2378                           ; Clear objects allocated to BITCOMMON
  2379  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2380                           
  2381                           ; Clear objects allocated to COMMON
  2382  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2383  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2384  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK0
  2387  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  001A  30A0               	movlw	low __pbssBANK1
  2391  001B  0084               	movwf	4
  2392  001C  3000               	movlw	high __pbssBANK1
  2393  001D  0085               	movwf	5
  2394  001E  3049               	movlw	73
  2395  001F  319C  2460  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  0022  3020               	movlw	low __pbssBANK2
  2399  0023  0084               	movwf	4
  2400  0024  3001               	movlw	high __pbssBANK2
  2401  0025  0085               	movwf	5
  2402  0026  304D               	movlw	77
  2403  0027  319C  2460  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  002A  30A0               	movlw	low __pbssBANK3
  2407  002B  0084               	movwf	4
  2408  002C  3001               	movlw	high __pbssBANK3
  2409  002D  0085               	movwf	5
  2410  002E  304C               	movlw	76
  2411  002F  319C  2460  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Initialize objects allocated to BANK4
  2414  0032  3069               	movlw	low __pidataBANK4
  2415  0033  0084               	movwf	4
  2416  0034  3090               	movlw	(high __pidataBANK4)| (0+128)
  2417  0035  0085               	movwf	5
  2418  0036  3020               	movlw	low __pdataBANK4
  2419  0037  0086               	movwf	6
  2420  0038  3002               	movlw	high __pdataBANK4
  2421  0039  0087               	movwf	7
  2422  003A  3020               	movlw	32
  2423  003B  319C  245A         	fcall	init_ram
  2424  003D                     end_of_initialization:	
  2425                           ;End of C runtime variable initialization code
  2426                           
  2427  003D                     __end_of__initialization:	
  2428  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2429  003E  0020               	movlb	0
  2430  003F  3188  289E         	ljmp	_main	;jump to C main() function
  2431                           
  2432                           	psect	bitbssCOMMON
  2433  03C0                     __pbitbssCOMMON:	
  2434  03C0                     _Receive_OK:	
  2435  03C0                     	ds	1
  2436  03C1                     _Transceive_OK:	
  2437  03C1                     	ds	1
  2438                           
  2439                           	psect	bssCOMMON
  2440  0075                     __pbssCOMMON:	
  2441  0075                     _DelayOff:	
  2442  0075                     	ds	1
  2443  0076                     _DimmerLightsIntr:	
  2444  0076                     	ds	1
  2445  0077                     _Sw:	
  2446  0077                     	ds	1
  2447                           
  2448                           	psect	bssBANK0
  2449  006F                     __pbssBANK0:	
  2450  006F                     _DimmerLights:	
  2451  006F                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _myMain:	
  2456  00A0                     	ds	14
  2457  00AE                     _Buz1:	
  2458  00AE                     	ds	12
  2459  00BA                     _RF1:	
  2460  00BA                     	ds	12
  2461  00C6                     _Dimmer:	
  2462  00C6                     	ds	3
  2463  00C9                     _WDT:	
  2464  00C9                     	ds	2
  2465  00CB                     _CRC:	
  2466  00CB                     	ds	1
  2467  00CC                     _DimmerLights11:	
  2468  00CC                     	ds	1
  2469  00CD                     _DimmerLightsIntrIOC:	
  2470  00CD                     	ds	1
  2471  00CE                     _LED:	
  2472  00CE                     	ds	1
  2473  00CF                     _RSSI:	
  2474  00CF                     	ds	1
  2475  00D0                     _Rx_Length:	
  2476  00D0                     	ds	1
  2477  00D1                     _SPI0Buffer:	
  2478  00D1                     	ds	1
  2479  00D2                     _SwDetect:	
  2480  00D2                     	ds	1
  2481  00D3                     _Tx_Length:	
  2482  00D3                     	ds	1
  2483  00D4                     _r_address:	
  2484  00D4                     	ds	1
  2485  00D5                     _r_data:	
  2486  00D5                     	ds	1
  2487  00D6                     _s_data:	
  2488  00D6                     	ds	1
  2489  00D7                     _Temp:	
  2490  00D7                     	ds	18
  2491                           
  2492                           	psect	bssBANK2
  2493  0120                     __pbssBANK2:	
  2494  0120                     _Timer1:	
  2495  0120                     	ds	3
  2496  0123                     _RF_Count:	
  2497  0123                     	ds	2
  2498  0125                     _Load:	
  2499  0125                     	ds	46
  2500  0153                     _DimmerLights1:	
  2501  0153                     	ds	17
  2502  0164                     _DlySw1:	
  2503  0164                     	ds	5
  2504  0169                     _VarErrLED:	
  2505  0169                     	ds	4
  2506                           
  2507                           	psect	bssBANK3
  2508  01A0                     __pbssBANK3:	
  2509  01A0                     _RF_Data:	
  2510  01A0                     	ds	30
  2511  01BE                     _Memory:	
  2512  01BE                     	ds	37
  2513  01E3                     _Sw1:	
  2514  01E3                     	ds	9
  2515                           
  2516                           	psect	dataBANK4
  2517  0220                     __pdataBANK4:	
  2518  0220                     __product:	
  2519  0220                     	ds	32
  2520                           
  2521                           	psect	clrtext
  2522  1C60                     clear_ram0:	
  2523                           ;	Called with FSR0 containing the base address, and
  2524                           ;	WREG with the size to clear
  2525                           
  2526  1C60  0064               	clrwdt	;clear the watchdog before getting into this loop
  2527  1C61                     clrloop0:	
  2528  1C61  0180               	clrf	0	;clear RAM location pointed to by FSR
  2529  1C62  3101               	addfsr 0,1
  2530  1C63  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2531  1C64  2C61               	goto	clrloop0	;have we reached the end yet?
  2532  1C65  3400               	retlw	0	;all done for this memory range, return
  2533                           
  2534                           	psect	inittext
  2535  1C5A                     init_ram:	
  2536  1C5A  00FE               	movwf	126
  2537  1C5B                     initloop:	
  2538  1C5B  0012               	moviw fsr0++
  2539  1C5C  001E               	movwi fsr1++
  2540  1C5D  0BFE               	decfsz	126,f
  2541  1C5E  2C5B               	goto	initloop
  2542  1C5F  3400               	retlw	0
  2543                           
  2544                           	psect	cstackBANK3
  2545  01EC                     __pcstackBANK3:	
  2546  01EC                     ?_main:	
  2547  01EC                     main@argc:	
  2548                           ; 2 bytes @ 0x0
  2549                           
  2550                           
  2551                           ; 2 bytes @ 0x0
  2552  01EC                     	ds	2
  2553  01EE                     main@argv:	
  2554                           
  2555                           ; 2 bytes @ 0x2
  2556  01EE                     	ds	2
  2557                           
  2558                           	psect	cstackBANK2
  2559  016D                     __pcstackBANK2:	
  2560  016D                     setRF_Main@loop_f:	
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  016D                     	ds	1
  2564  016E                     setRF_Main@Receive_OK:	
  2565                           
  2566                           ; 1 bytes @ 0x1
  2567  016E                     	ds	1
  2568  016F                     setRF_Main@error:	
  2569                           
  2570                           ; 1 bytes @ 0x2
  2571  016F                     	ds	1
  2572                           
  2573                           	psect	cstackBANK1
  2574  00E9                     __pcstackBANK1:	
  2575  00E9                     setDimmerLights_ErrorClose@count:	
  2576  00E9                     Exception_Main@count:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579                           
  2580                           ; 1 bytes @ 0x0
  2581  00E9                     	ds	1
  2582  00EA                     setDimmerLights_ErrorClose@lights:	
  2583  00EA                     Exception_Main@error:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586                           
  2587                           ; 1 bytes @ 0x1
  2588  00EA                     	ds	1
  2589  00EB                     setDimmerLights_ErrorClose@i:	
  2590  00EB                     Exception_Main@i:	
  2591                           ; 2 bytes @ 0x2
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x2
  2595  00EB                     	ds	2
  2596  00ED                     getRxData@error:	
  2597  00ED                     Exception_Main@i_3436:	
  2598                           ; 1 bytes @ 0x4
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x4
  2602  00ED                     	ds	2
  2603  00EF                     Exception_Main@lights:	
  2604                           
  2605                           ; 1 bytes @ 0x6
  2606  00EF                     	ds	1
  2607                           
  2608                           	psect	cstackCOMMON
  2609  0070                     __pcstackCOMMON:	
  2610  0070                     ?_Timeout_Counter:	
  2611  0070                     ?_set_TimeoutCleared:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_WriteByte:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteCommand:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ReadStatus:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadByte:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_PowerRST:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_InitSetREG:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitPATable:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_ClearTXFIFO:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearRXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_FrequencyCabr:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_SIDLEMode:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DlyOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_ErrorClose:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Line:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setTxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setLED_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Fosc_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IO_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_ADC_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IOC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_WDT_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_IOC_ISR:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_TMR1_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Flash_Memory_Write:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Flash_Memory_Modify:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_WDT_Clearing:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_myMain_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Temp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Load_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Switch_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getLoad_AD:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_my_MainTimer:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Switch_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Exception_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLoad_AH_AL_Restore:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_RxDisable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_DimmerValue:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_TxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_RxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_PowerOnInitial:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOffPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntrIOCPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ??_DimmerIntrIOCPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntrPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ??_DimmerIntrPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_IntrControl:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerLightsPointSelect:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setDimmerLights_SwOn:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_SwOff:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_AdjOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setDimmerLights_AdjRF:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LedPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LED_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Mcu_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_ISR:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setDimmerReClock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_Modify:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_DelayTimejudge:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Allow_Condition:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getLoad_OK:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_All_Error_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_LightsStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_setPercentValue:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getPercentValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_Flash_Memory_Read:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getRF_KeyStatus:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getSw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDelayOff_GO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadGO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerLights_Line:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerLights_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerLights_AdjSw:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmer_Load_Status:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getMain_Lights_Count:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     getDimmerLights_Allow_Condition@lights:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getSw_KeyStatus@sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x0
  2958  0070                     	ds	1
  2959  0071                     DimmerIntrIOCPointSelect@lights:	
  2960  0071                     DimmerIntrPointSelect@lights:	
  2961                           ; 1 bytes @ 0x1
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x1
  2965  0071                     	ds	1
  2966  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2967  0072                     ??_setDimmerLights_IntrControl:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973                           
  2974                           ; 1 bytes @ 0x2
  2975  0072                     	ds	1
  2976  0073                     ??_IOC_ISR:	
  2977  0073                     ??_setDimmerReClock:	
  2978                           ; 0 bytes @ 0x3
  2979                           
  2980  0073                     setDimmerLights_IntrControl@lights:	
  2981                           ; 0 bytes @ 0x3
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x3
  2985  0073                     	ds	1
  2986  0074                     ??_TMR1_ISR:	
  2987  0074                     ??_ISR:	
  2988                           ; 0 bytes @ 0x4
  2989                           
  2990                           
  2991                           ; 0 bytes @ 0x4
  2992  0074                     	ds	1
  2993                           
  2994                           	psect	cstackBANK0
  2995  0020                     __pcstackBANK0:	
  2996  0020                     ??_Timeout_Counter:	
  2997  0020                     ??_set_TimeoutCleared:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_CC2500_WriteByte:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_CC2500_ReadByte:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?_DelayTime_1us:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_getLoad_OK:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_getMain_All_Error_Status:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getMain_LightsStatus:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_setDimmerLights_Line:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_setTxData:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_Fosc_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_IO_Set:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_TMR1_Set:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_ADC_Set:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_IOC_Set:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_WDT_Set:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Flash_Memory_Read:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ?_setMemory_Data:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Flash_Memory_Write:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_WDT_Clearing:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_myMain_Initialization:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Temp_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setLoad_AH_AL_Restore:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setTemp_Initialization:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setRF_Initialization:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_getRF_KeyStatus:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getSw_KeyStatus:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Buzzer_Initialization:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_Buzzer_Main:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_DelayOffPointSelect:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_DimmerLightsPointSelect:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getDimmer_LoadGO:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getDimmerLights_Line:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_getDimmer_Load_Status:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_LedPointSelect:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Flash_Memory_Unlock:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Erasing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setMemory_Modify:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setMemory_LoopSave:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_WDT_Main:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_getMain_Lights_Count:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setRF_Learn:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_TouchPower:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_SwPointSelect:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ?___bmul:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?_getBuz_GO:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ?_getAD:	
  3133                           ; 2 bytes @ 0x0
  3134                           
  3135  0020                     ?___wmul:	
  3136                           ; 2 bytes @ 0x0
  3137                           
  3138  0020                     ?___awdiv:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141  0020                     ?___lwdiv:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144  0020                     ?___ftpack:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147  0020                     getDimmer_LoadGO@loadgo:	
  3148                           ; 3 bytes @ 0x0
  3149                           
  3150  0020                     setDimmerLights_Line@lights:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     getDimmerLights_Line@line:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     getDimmer_Load_Status@status:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     getAD@adcon1:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     setMemory_Data@data:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0020                     getMain_LightsStatus@status:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     getMain_Lights_Count@count:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getLoad_OK@ok:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ___bmul@multiplicand:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     DelayTime_1us@count:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     ___wmul@multiplier:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     ___awdiv@divisor:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     ___lwdiv@divisor:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___ftpack@arg:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192                           
  3193                           ; 3 bytes @ 0x0
  3194  0020                     	ds	1
  3195  0021                     ??_getDimmerLights_Allow_Condition:	
  3196  0021                     ??_setMemory_Data:	
  3197                           ; 0 bytes @ 0x1
  3198                           
  3199  0021                     ??_RF_Initialization:	
  3200                           ; 0 bytes @ 0x1
  3201                           
  3202  0021                     ??_Mcu_Initialization:	
  3203                           ; 0 bytes @ 0x1
  3204                           
  3205  0021                     ??___bmul:	
  3206                           ; 0 bytes @ 0x1
  3207                           
  3208  0021                     CC2500_WriteByte@loop_a:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     CC2500_ReadByte@loop_b:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     DelayOffPointSelect@sw:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     DimmerLightsPointSelect@lights:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0021                     LedPointSelect@led:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     Flash_Memory_Read@i:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     Flash_Memory_Write@i:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     setMemory_Modify@command:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     setMemory_LoopSave@command:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     getMain_Lights_Count@status1:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     setLoad_AH_AL_Restore@i:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     setRF_Learn@command:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     getRF_KeyStatus@key:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     SwPointSelect@sw:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     getSw_KeyStatus@status:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     _getMain_All_Error_Status$3422:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x1
  3258  0021                     	ds	1
  3259  0022                     ??_CC2500_WriteCommand:	
  3260  0022                     ??_CC2500_ReadStatus:	
  3261                           ; 0 bytes @ 0x2
  3262                           
  3263  0022                     ??_DelayTime_1us:	
  3264                           ; 0 bytes @ 0x2
  3265                           
  3266  0022                     ?_CC2500_WriteREG:	
  3267                           ; 0 bytes @ 0x2
  3268                           
  3269  0022                     ??_DlyOff_Initialization:	
  3270                           ; 0 bytes @ 0x2
  3271                           
  3272  0022                     ??_setDimmerLights_Initialization:	
  3273                           ; 0 bytes @ 0x2
  3274                           
  3275  0022                     ?_setLED:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     ??_setLED_Main:	
  3279                           ; 0 bytes @ 0x2
  3280                           
  3281  0022                     ??_Load_Initialization:	
  3282                           ; 0 bytes @ 0x2
  3283                           
  3284  0022                     ??_getBuz_GO:	
  3285                           ; 0 bytes @ 0x2
  3286                           
  3287  0022                     ??_getDelayOff_GO:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ??_getDimmerLights_Status:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_getAll_DimmerLights_AdjSw:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     CC2500_WriteREG@value:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     DlyOff_Initialization@sw:	
  3300                           ; 1 bytes @ 0x2
  3301                           
  3302  0022                     getDelayOff_GO@sw:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     getDimmerLights_Allow_Condition@allow:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     getDimmerLights_Status@lights:	
  3309                           ; 1 bytes @ 0x2
  3310                           
  3311  0022                     setLED@command:	
  3312                           ; 1 bytes @ 0x2
  3313                           
  3314  0022                     Flash_Memory_Read@address:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     setMemory_Data@address:	
  3318                           ; 1 bytes @ 0x2
  3319                           
  3320  0022                     _getRF_KeyStatus$5046:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     _getSw_KeyStatus$6012:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     ___bmul@product:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     DelayTime_1us@i:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     ___wmul@multiplicand:	
  3333                           ; 2 bytes @ 0x2
  3334                           
  3335  0022                     ___awdiv@dividend:	
  3336                           ; 2 bytes @ 0x2
  3337                           
  3338  0022                     ___lwdiv@dividend:	
  3339                           ; 2 bytes @ 0x2
  3340                           
  3341                           
  3342                           ; 2 bytes @ 0x2
  3343  0022                     	ds	1
  3344  0023                     ??_CC2500_WriteREG:	
  3345  0023                     ??_setLED:	
  3346                           ; 0 bytes @ 0x3
  3347                           
  3348  0023                     ??_DelayOff_Initialization:	
  3349                           ; 0 bytes @ 0x3
  3350                           
  3351  0023                     ??_getAD:	
  3352                           ; 0 bytes @ 0x3
  3353                           
  3354  0023                     CC2500_WriteCommand@command:	
  3355                           ; 0 bytes @ 0x3
  3356                           
  3357  0023                     CC2500_ReadStatus@status_addr:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0023                     getDelayOff_GO@go:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363  0023                     setDimmerLights_Initialization@lights:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     _getDimmerLights_Allow_Condition$2172:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     getDimmerLights_Status@status:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372  0023                     getAll_DimmerLights_AdjSw@count:	
  3373                           ; 1 bytes @ 0x3
  3374                           
  3375  0023                     setLED@led:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     getAD@adcon0:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     Flash_Memory_Read@ret:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     ___bmul@multiplier:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     ___ftpack@exp:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0023                     _getMain_All_Error_Status$3423:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x3
  3395  0023                     	ds	1
  3396  0024                     ??_CC2500_ClearTXFIFO:	
  3397  0024                     ??_CC2500_ClearRXFIFO:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ??_CC2500_SIDLEMode:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??_DelayTimejudge:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_setLED_Initialization:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_Flash_Memory_Modify:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_getLoad_AD:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??_getTemp_AD:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??_RF_RxDisable:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_setSw_Initialization:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_CC2500_TxData:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_CC2500_RxData:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_DimmerLights_Initialization:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??_setDimmerLights_AdjOn:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??___wmul:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??___awdiv:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     ??___lwdiv:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     CC2500_WriteREG@w_addr:	
  3446                           ; 0 bytes @ 0x4
  3447                           
  3448  0024                     setDimmerLights_AdjOn@sw:	
  3449                           ; 1 bytes @ 0x4
  3450                           
  3451  0024                     setLED_Initialization@led:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0024                     setLED_Main@led:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0024                     setSw_Initialization@sw:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0024                     ___ftpack@sign:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0024                     getBuz_GO@i:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0024                     DelayTime_1us@j:	
  3467                           ; 2 bytes @ 0x4
  3468                           
  3469  0024                     getAll_DimmerLights_AdjSw@i:	
  3470                           ; 2 bytes @ 0x4
  3471                           
  3472  0024                     ___wmul@product:	
  3473                           ; 2 bytes @ 0x4
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x4
  3477  0024                     	ds	1
  3478  0025                     ??_CC2500_InitSetREG:	
  3479  0025                     ??_CC2500_InitPATable:	
  3480                           ; 0 bytes @ 0x5
  3481                           
  3482  0025                     ??_Switch_Initialization:	
  3483                           ; 0 bytes @ 0x5
  3484                           
  3485  0025                     ??___ftpack:	
  3486                           ; 0 bytes @ 0x5
  3487                           
  3488  0025                     ??_LED_Initialization:	
  3489                           ; 0 bytes @ 0x5
  3490                           
  3491  0025                     ??_LED_Main:	
  3492                           ; 0 bytes @ 0x5
  3493                           
  3494  0025                     CC2500_TxData@loop_e:	
  3495                           ; 0 bytes @ 0x5
  3496                           
  3497  0025                     CC2500_RxData@loop_f:	
  3498                           ; 1 bytes @ 0x5
  3499                           
  3500  0025                     Flash_Memory_Modify@i:	
  3501                           ; 1 bytes @ 0x5
  3502                           
  3503  0025                     getMain_All_Error_Status@command:	
  3504                           ; 1 bytes @ 0x5
  3505                           
  3506  0025                     getTemp_AD@channel:	
  3507                           ; 1 bytes @ 0x5
  3508                           
  3509  0025                     ___awdiv@counter:	
  3510                           ; 1 bytes @ 0x5
  3511                           
  3512  0025                     ___lwdiv@counter:	
  3513                           ; 1 bytes @ 0x5
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x5
  3517  0025                     	ds	1
  3518  0026                     ??_CC2500_PowerRST:	
  3519  0026                     ??_CC2500_FrequencyCabr:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0026                     ??_Flash_Memory_Main:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0026                     CC2500_InitSetREG@temp1:	
  3526                           ; 0 bytes @ 0x6
  3527                           
  3528  0026                     CC2500_InitPATable@temp:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0026                     DelayTimejudge@i:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0026                     getMain_All_Error_Status@status:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0026                     getLoad_AD@channel:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0026                     ___awdiv@sign:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0026                     ___lwdiv@quotient:	
  3547                           ; 1 bytes @ 0x6
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0x6
  3551  0026                     	ds	1
  3552  0027                     CC2500_InitSetREG@temp2:	
  3553  0027                     CC2500_InitPATable@loop_d:	
  3554                           ; 1 bytes @ 0x7
  3555                           
  3556  0027                     DelayTimejudge@j:	
  3557                           ; 1 bytes @ 0x7
  3558                           
  3559  0027                     getLoad_AD@k:	
  3560                           ; 1 bytes @ 0x7
  3561                           
  3562  0027                     ___awdiv@quotient:	
  3563                           ; 1 bytes @ 0x7
  3564                           
  3565                           
  3566                           ; 2 bytes @ 0x7
  3567  0027                     	ds	1
  3568  0028                     ??_Load_Main:	
  3569  0028                     ?___awtoft:	
  3570                           ; 0 bytes @ 0x8
  3571                           
  3572  0028                     CC2500_InitSetREG@loop_c:	
  3573                           ; 3 bytes @ 0x8
  3574                           
  3575  0028                     DelayTimejudge@k:	
  3576                           ; 1 bytes @ 0x8
  3577                           
  3578  0028                     getLoad_AD@j:	
  3579                           ; 1 bytes @ 0x8
  3580                           
  3581  0028                     ___awtoft@c:	
  3582                           ; 1 bytes @ 0x8
  3583                           
  3584                           
  3585                           ; 2 bytes @ 0x8
  3586  0028                     	ds	1
  3587  0029                     ?_setBuz:	
  3588  0029                     ??_CC2500_PowerOnInitial:	
  3589                           ; 0 bytes @ 0x9
  3590                           
  3591  0029                     DelayTimejudge@value:	
  3592                           ; 0 bytes @ 0x9
  3593                           
  3594  0029                     getLoad_AD@i:	
  3595                           ; 1 bytes @ 0x9
  3596                           
  3597  0029                     setBuz@time:	
  3598                           ; 1 bytes @ 0x9
  3599                           
  3600                           
  3601                           ; 2 bytes @ 0x9
  3602  0029                     	ds	1
  3603  002A                     Load_Main@error:	
  3604                           
  3605                           ; 1 bytes @ 0xA
  3606  002A                     	ds	1
  3607  002B                     ??_setBuz:	
  3608  002B                     ??___awtoft:	
  3609                           ; 0 bytes @ 0xB
  3610                           
  3611  002B                     Load_Main@Load_Status:	
  3612                           ; 0 bytes @ 0xB
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0xB
  3616  002B                     	ds	1
  3617  002C                     setBuz@count:	
  3618  002C                     Load_Main@i:	
  3619                           ; 1 bytes @ 0xC
  3620                           
  3621                           
  3622                           ; 2 bytes @ 0xC
  3623  002C                     	ds	1
  3624  002D                     ??_my_MainTimer:	
  3625  002D                     ??_setDimmerLights_SwOn:	
  3626                           ; 0 bytes @ 0xD
  3627                           
  3628  002D                     setDimmerLights_SwOn@sw:	
  3629                           ; 0 bytes @ 0xD
  3630                           
  3631  002D                     ___awtoft@sign:	
  3632                           ; 1 bytes @ 0xD
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0xD
  3636  002D                     	ds	1
  3637  002E                     ?___ftdiv:	
  3638  002E                     ?___ftmul:	
  3639                           ; 3 bytes @ 0xE
  3640                           
  3641  002E                     setDimmerLights_SwOn@idle:	
  3642                           ; 3 bytes @ 0xE
  3643                           
  3644  002E                     ___ftdiv@f2:	
  3645                           ; 1 bytes @ 0xE
  3646                           
  3647  002E                     ___ftmul@f1:	
  3648                           ; 3 bytes @ 0xE
  3649                           
  3650                           
  3651                           ; 3 bytes @ 0xE
  3652  002E                     	ds	3
  3653  0031                     ___ftdiv@f1:	
  3654  0031                     ___ftmul@f2:	
  3655                           ; 3 bytes @ 0x11
  3656                           
  3657                           
  3658                           ; 3 bytes @ 0x11
  3659  0031                     	ds	3
  3660  0034                     ??___ftdiv:	
  3661  0034                     ??___ftmul:	
  3662                           ; 0 bytes @ 0x14
  3663                           
  3664                           
  3665                           ; 0 bytes @ 0x14
  3666  0034                     	ds	4
  3667  0038                     ___ftdiv@cntr:	
  3668  0038                     ___ftmul@exp:	
  3669                           ; 1 bytes @ 0x18
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x18
  3673  0038                     	ds	1
  3674  0039                     ___ftdiv@f3:	
  3675  0039                     ___ftmul@f3_as_product:	
  3676                           ; 3 bytes @ 0x19
  3677                           
  3678                           
  3679                           ; 3 bytes @ 0x19
  3680  0039                     	ds	3
  3681  003C                     ___ftdiv@exp:	
  3682  003C                     ___ftmul@cntr:	
  3683                           ; 1 bytes @ 0x1C
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x1C
  3687  003C                     	ds	1
  3688  003D                     ___ftdiv@sign:	
  3689  003D                     ___ftmul@sign:	
  3690                           ; 1 bytes @ 0x1D
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x1D
  3694  003D                     	ds	1
  3695  003E                     ?___ftneg:	
  3696  003E                     ___ftneg@f1:	
  3697                           ; 3 bytes @ 0x1E
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x1E
  3701  003E                     	ds	3
  3702  0041                     ??___ftneg:	
  3703  0041                     ?___ftadd:	
  3704                           ; 0 bytes @ 0x21
  3705                           
  3706  0041                     ___ftadd@f1:	
  3707                           ; 3 bytes @ 0x21
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x21
  3711  0041                     	ds	3
  3712  0044                     ___ftadd@f2:	
  3713                           
  3714                           ; 3 bytes @ 0x24
  3715  0044                     	ds	3
  3716  0047                     ??___ftadd:	
  3717                           
  3718                           ; 0 bytes @ 0x27
  3719  0047                     	ds	4
  3720  004B                     ___ftadd@sign:	
  3721                           
  3722                           ; 1 bytes @ 0x2B
  3723  004B                     	ds	1
  3724  004C                     ___ftadd@exp2:	
  3725                           
  3726                           ; 1 bytes @ 0x2C
  3727  004C                     	ds	1
  3728  004D                     ___ftadd@exp1:	
  3729                           
  3730                           ; 1 bytes @ 0x2D
  3731  004D                     	ds	1
  3732  004E                     ?___fttol:	
  3733  004E                     ___fttol@f1:	
  3734                           ; 4 bytes @ 0x2E
  3735                           
  3736                           
  3737                           ; 3 bytes @ 0x2E
  3738  004E                     	ds	4
  3739  0052                     ??___fttol:	
  3740                           
  3741                           ; 0 bytes @ 0x32
  3742  0052                     	ds	4
  3743  0056                     ___fttol@sign1:	
  3744                           
  3745                           ; 1 bytes @ 0x36
  3746  0056                     	ds	1
  3747  0057                     ___fttol@lval:	
  3748                           
  3749                           ; 4 bytes @ 0x37
  3750  0057                     	ds	4
  3751  005B                     ___fttol@exp1:	
  3752                           
  3753                           ; 1 bytes @ 0x3B
  3754  005B                     	ds	1
  3755  005C                     ??_setPercentValue:	
  3756  005C                     ??_getPercentValue:	
  3757                           ; 0 bytes @ 0x3C
  3758                           
  3759                           
  3760                           ; 0 bytes @ 0x3C
  3761  005C                     	ds	2
  3762  005E                     getPercentValue@value:	
  3763  005E                     setPercentValue@value:	
  3764                           ; 1 bytes @ 0x3E
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3E
  3768  005E                     	ds	1
  3769  005F                     getPercentValue@i:	
  3770  005F                     setPercentValue@i:	
  3771                           ; 3 bytes @ 0x3F
  3772                           
  3773                           
  3774                           ; 3 bytes @ 0x3F
  3775  005F                     	ds	3
  3776  0062                     ?_setProductData:	
  3777  0062                     ??_setDimmerLights_AdjRF:	
  3778                           ; 0 bytes @ 0x42
  3779                           
  3780  0062                     ??_Flash_Memory_Initialization:	
  3781                           ; 0 bytes @ 0x42
  3782                           
  3783  0062                     setProductData@value:	
  3784                           ; 0 bytes @ 0x42
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x42
  3788  0062                     	ds	1
  3789  0063                     ??_setProductData:	
  3790  0063                     setDimmerLights_AdjRF@lights:	
  3791                           ; 0 bytes @ 0x43
  3792                           
  3793  0063                     Flash_Memory_Initialization@i:	
  3794                           ; 1 bytes @ 0x43
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x43
  3798  0063                     	ds	2
  3799  0065                     setProductData@address:	
  3800                           
  3801                           ; 1 bytes @ 0x45
  3802  0065                     	ds	1
  3803  0066                     ?_setRF_DimmerLights:	
  3804  0066                     ??_setTemp_Main:	
  3805                           ; 0 bytes @ 0x46
  3806                           
  3807  0066                     ??_setLog_Code:	
  3808                           ; 0 bytes @ 0x46
  3809                           
  3810  0066                     ??_setRF_DimmerValue:	
  3811                           ; 0 bytes @ 0x46
  3812                           
  3813  0066                     ?_setDelayOff_GO:	
  3814                           ; 0 bytes @ 0x46
  3815                           
  3816  0066                     setDelayOff_GO@command:	
  3817                           ; 0 bytes @ 0x46
  3818                           
  3819  0066                     setRF_DimmerLights@on:	
  3820                           ; 1 bytes @ 0x46
  3821                           
  3822                           
  3823                           ; 1 bytes @ 0x46
  3824  0066                     	ds	1
  3825  0067                     ??_setRF_DimmerLights:	
  3826  0067                     setDelayOff_GO@value:	
  3827                           ; 0 bytes @ 0x47
  3828                           
  3829  0067                     setRF_DimmerValue@lights:	
  3830                           ; 1 bytes @ 0x47
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x47
  3834  0067                     	ds	1
  3835  0068                     ??_setRFSW_AdjControl:	
  3836  0068                     ??_setDelayOff_GO:	
  3837                           ; 0 bytes @ 0x48
  3838                           
  3839  0068                     setTemp_Main@error:	
  3840                           ; 0 bytes @ 0x48
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x48
  3844  0068                     	ds	1
  3845  0069                     ??_Temp_Main:	
  3846  0069                     setDelayOff_GO@sw:	
  3847                           ; 0 bytes @ 0x49
  3848                           
  3849  0069                     setRF_DimmerLights@status:	
  3850                           ; 1 bytes @ 0x49
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x49
  3854  0069                     	ds	1
  3855  006A                     ??_setDimmerLights_SwOff:	
  3856  006A                     setDimmerLights_SwOff@sw:	
  3857                           ; 0 bytes @ 0x4A
  3858                           
  3859  006A                     setRFSW_AdjControl@status:	
  3860                           ; 1 bytes @ 0x4A
  3861                           
  3862  006A                     setRF_DimmerLights@lights:	
  3863                           ; 1 bytes @ 0x4A
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x4A
  3867  006A                     	ds	1
  3868  006B                     ??_setDimmerLights_ErrorClose:	
  3869  006B                     ?_setDimmerLights:	
  3870                           ; 0 bytes @ 0x4B
  3871                           
  3872  006B                     ?_setDimmerLights_Adj:	
  3873                           ; 0 bytes @ 0x4B
  3874                           
  3875  006B                     ??_Exception_Main:	
  3876                           ; 0 bytes @ 0x4B
  3877                           
  3878  006B                     ??_setRFSW_Control:	
  3879                           ; 0 bytes @ 0x4B
  3880                           
  3881  006B                     ??_setSw_Main:	
  3882                           ; 0 bytes @ 0x4B
  3883                           
  3884  006B                     setDimmerLights@status:	
  3885                           ; 0 bytes @ 0x4B
  3886                           
  3887  006B                     setDimmerLights_Adj@status:	
  3888                           ; 1 bytes @ 0x4B
  3889                           
  3890  006B                     setRFSW_AdjControl@sw:	
  3891                           ; 1 bytes @ 0x4B
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x4B
  3895  006B                     	ds	1
  3896  006C                     ??_DlyOff_Main:	
  3897  006C                     ??_setDimmerLights:	
  3898                           ; 0 bytes @ 0x4C
  3899                           
  3900  006C                     ??_setDimmerLights_Adj:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  006C                     setRFSW_Control@status:	
  3904                           ; 0 bytes @ 0x4C
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x4C
  3908  006C                     	ds	1
  3909  006D                     setDimmerLights@lights:	
  3910  006D                     setDimmerLights_Adj@lights:	
  3911                           ; 1 bytes @ 0x4D
  3912                           
  3913  006D                     setRFSW_Control@sw:	
  3914                           ; 1 bytes @ 0x4D
  3915                           
  3916  006D                     setSw_Main@sw:	
  3917                           ; 1 bytes @ 0x4D
  3918                           
  3919                           
  3920                           ; 1 bytes @ 0x4D
  3921  006D                     	ds	1
  3922  006E                     ??_setDimmerLights_Main:	
  3923  006E                     ??_Switch_Main:	
  3924                           ; 0 bytes @ 0x4E
  3925                           
  3926  006E                     ??_getRxData:	
  3927                           ; 0 bytes @ 0x4E
  3928                           
  3929  006E                     ??_setControl_Lights_Table:	
  3930                           ; 0 bytes @ 0x4E
  3931                           
  3932  006E                     DlyOff_Main@sw:	
  3933                           ; 0 bytes @ 0x4E
  3934                           
  3935  006E                     setDimmerLights_Main@lights:	
  3936                           ; 1 bytes @ 0x4E
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x4E
  3940  006E                     	ds	1
  3941  006F                     ??_RF_Main:	
  3942  006F                     ??_setRF_Main:	
  3943                           ; 0 bytes @ 0x4F
  3944                           
  3945  006F                     ??_DelayOff_Main:	
  3946                           ; 0 bytes @ 0x4F
  3947                           
  3948  006F                     ??_DimmerLights_Main:	
  3949                           ; 0 bytes @ 0x4F
  3950                           
  3951  006F                     ??_main:	
  3952                           ; 0 bytes @ 0x4F
  3953                           
  3954                           
  3955                           	psect	maintext
  3956  089E                     __pmaintext:	
  3957                           ; 0 bytes @ 0x4F
  3958 ;;
  3959 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3960 ;;
  3961 ;; *************** function _main *****************
  3962 ;; Defined at:
  3963 ;;		line 7 in file "../src/Main_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  argc            2    0[BANK3 ] int 
  3966 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2    0[BANK3 ] int 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 17F/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3978 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels required when called:   15
  3984 ;; This function calls:
  3985 ;;		_Buzzer_Initialization
  3986 ;;		_Buzzer_Main
  3987 ;;		_CC2500_PowerOnInitial
  3988 ;;		_DelayOff_Initialization
  3989 ;;		_DelayOff_Main
  3990 ;;		_DimmerLights_Initialization
  3991 ;;		_DimmerLights_Main
  3992 ;;		_Exception_Main
  3993 ;;		_Flash_Memory_Initialization
  3994 ;;		_Flash_Memory_Main
  3995 ;;		_LED_Initialization
  3996 ;;		_LED_Main
  3997 ;;		_Load_Initialization
  3998 ;;		_Load_Main
  3999 ;;		_Mcu_Initialization
  4000 ;;		_RF_Initialization
  4001 ;;		_RF_Main
  4002 ;;		_Switch_Initialization
  4003 ;;		_Switch_Main
  4004 ;;		_Temp_Initialization
  4005 ;;		_Temp_Main
  4006 ;;		_WDT_Main
  4007 ;;		_getLoad_AD
  4008 ;;		_getTemp_AD
  4009 ;;		_myMain_Initialization
  4010 ;;		_my_MainTimer
  4011 ;; This function is called by:
  4012 ;;		Startup code after reset
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _main
  4018  089E                     _main:	
  4019                           
  4020                           ;Main_B1.c: 8: myMain_Initialization();
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024  089E  319D  258A  3188   	fcall	_myMain_Initialization
  4025                           
  4026                           ;Main_B1.c: 9: Mcu_Initialization();
  4027  08A1  319E  2621  3188   	fcall	_Mcu_Initialization
  4028                           
  4029                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4030  08A4  3185  254C  3188   	fcall	_Flash_Memory_Initialization
  4031                           
  4032                           ;Main_B1.c: 11: LED_Initialization();
  4033  08A7  319C  2447  3188   	fcall	_LED_Initialization
  4034                           
  4035                           ;Main_B1.c: 12: Buzzer_Initialization();
  4036  08AA  319C  2420  3188   	fcall	_Buzzer_Initialization
  4037                           
  4038                           ;Main_B1.c: 14: ;;
  4039                           ;Main_B1.c: 15: Temp_Initialization();
  4040  08AD  319C  242C  3188   	fcall	_Temp_Initialization
  4041                           
  4042                           ;Main_B1.c: 16: Load_Initialization();
  4043  08B0  319C  2423  3188   	fcall	_Load_Initialization
  4044                           
  4045                           ;Main_B1.c: 17: ;;
  4046                           ;Main_B1.c: 18: DelayOff_Initialization();
  4047  08B3  319C  243F  3188   	fcall	_DelayOff_Initialization
  4048                           
  4049                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4050  08B6  319C  24AA  3188   	fcall	_DimmerLights_Initialization
  4051                           
  4052                           ;Main_B1.c: 21: ;;
  4053                           ;Main_B1.c: 22: ;;
  4054                           ;Main_B1.c: 23: ;;
  4055                           ;Main_B1.c: 24: Switch_Initialization();
  4056  08B9  319C  2497  3188   	fcall	_Switch_Initialization
  4057                           
  4058                           ;Main_B1.c: 25: RF_Initialization();
  4059  08BC  319C  2426  3188   	fcall	_RF_Initialization
  4060                           
  4061                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4062  08BF  319E  26A7  3188   	fcall	_CC2500_PowerOnInitial
  4063  08C2                     l10208:	
  4064                           ;Main_B1.c: 27: ;;
  4065                           ;Main_B1.c: 28: ;;
  4066                           ;Main_B1.c: 30: while (1) {
  4067                           
  4068                           
  4069                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4070  08C2  0021               	movlb	1	; select bank1
  4071  08C3  1C20               	btfss	_myMain^(0+128),0
  4072  08C4  28CD               	goto	l10212
  4073                           
  4074                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4075  08C5  3005               	movlw	5
  4076  08C6  318D  2508  3188   	fcall	_getLoad_AD
  4077                           
  4078                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4079  08C9  3009               	movlw	9
  4080  08CA  3188  2007  3188   	fcall	_getTemp_AD
  4081  08CD                     l10212:	
  4082                           
  4083                           ;Main_B1.c: 57: }
  4084                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4085  08CD  0022               	movlb	2	; select bank2
  4086  08CE  1C20               	btfss	_Timer1^(0+256),0
  4087  08CF  28C2               	goto	l10208
  4088                           
  4089                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4090  08D0  1020               	bcf	_Timer1^(0+256),0
  4091                           
  4092                           ;Main_B1.c: 96: my_MainTimer();
  4093  08D1  3194  2456  3188   	fcall	_my_MainTimer
  4094                           
  4095                           ;Main_B1.c: 97: WDT_Main();
  4096  08D4  319E  2633  3188   	fcall	_WDT_Main
  4097                           
  4098                           ;Main_B1.c: 98: ;;
  4099                           ;Main_B1.c: 99: ;;
  4100                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4101  08D7  0021               	movlb	1	; select bank1
  4102  08D8  1C20               	btfss	_myMain^(0+128),0
  4103  08D9  28C2               	goto	l10208
  4104                           
  4105                           ;Main_B1.c: 101: Flash_Memory_Main();
  4106  08DA  3193  230B  3188   	fcall	_Flash_Memory_Main
  4107                           
  4108                           ;Main_B1.c: 103: LED_Main();
  4109  08DD  319C  244B  3188   	fcall	_LED_Main
  4110                           
  4111                           ;Main_B1.c: 104: Buzzer_Main();
  4112  08E0  3194  24D0  3188   	fcall	_Buzzer_Main
  4113                           
  4114                           ;Main_B1.c: 106: ;;
  4115                           ;Main_B1.c: 107: Temp_Main();
  4116  08E3  3190  2066  3188   	fcall	_Temp_Main
  4117                           
  4118                           ;Main_B1.c: 108: Load_Main();
  4119  08E6  3180  2041  3188   	fcall	_Load_Main
  4120                           
  4121                           ;Main_B1.c: 109: ;;
  4122                           ;Main_B1.c: 111: ;;
  4123                           ;Main_B1.c: 112: DimmerLights_Main();
  4124  08E9  319F  274E  3188   	fcall	_DimmerLights_Main
  4125                           
  4126                           ;Main_B1.c: 113: Switch_Main();
  4127  08EC  3188  2000  3188   	fcall	_Switch_Main
  4128                           
  4129                           ;Main_B1.c: 114: ;;
  4130                           ;Main_B1.c: 115: ;;
  4131                           ;Main_B1.c: 117: RF_Main();
  4132  08EF  319C  2429  3188   	fcall	_RF_Main
  4133                           
  4134                           ;Main_B1.c: 118: DelayOff_Main();
  4135  08F2  319C  2443  3188   	fcall	_DelayOff_Main
  4136                           
  4137                           ;Main_B1.c: 119: ;;
  4138                           ;Main_B1.c: 120: ;;
  4139                           ;Main_B1.c: 121: Exception_Main();
  4140  08F5  3186  2628  3188   	fcall	_Exception_Main
  4141  08F8  28C2               	goto	l10208
  4142  08F9                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  1456                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 185 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  1456                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  1456  0021               	movlb	1	; select bank1
  4191  1457  1820               	btfsc	_myMain^(0+128),0
  4192  1458  2C70               	goto	l9916
  4193                           
  4194                           ;Main_B1.c: 189: myMain.PowerCount++;
  4195  1459  3001               	movlw	1
  4196  145A  0020               	movlb	0	; select bank0
  4197  145B  00AD               	movwf	??_my_MainTimer
  4198  145C  082D               	movf	??_my_MainTimer,w
  4199  145D  0021               	movlb	1	; select bank1
  4200  145E  07A1               	addwf	(_myMain^(0+128)+1),f
  4201                           
  4202                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4203  145F  0821               	movf	(_myMain^(0+128)+1),w
  4204  1460  3A96               	xorlw	150
  4205  1461  1D03               	skipz
  4206  1462  0008               	return
  4207                           
  4208                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4209  1463  01A1               	clrf	(_myMain^(0+128)+1)
  4210                           
  4211                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4212  1464  1420               	bsf	_myMain^(0+128),0
  4213                           
  4214                           ;Main_B1.c: 197: setBuz(3, 50);
  4215  1465  3032               	movlw	50
  4216  1466  0020               	movlb	0	; select bank0
  4217  1467  00A9               	movwf	setBuz@time
  4218  1468  3000               	movlw	0
  4219  1469  00AA               	movwf	setBuz@time+1
  4220  146A  3003               	movlw	3
  4221  146B  3197  27A7         	fcall	_setBuz
  4222                           
  4223                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4224  146D  0021               	movlb	1	; select bank1
  4225  146E  1620               	bsf	_myMain^(0+128),4
  4226                           
  4227                           ;Main_B1.c: 207: }
  4228                           ;Main_B1.c: 208: } else {
  4229  146F  0008               	return
  4230  1470                     l9916:	
  4231                           
  4232                           ;Main_B1.c: 209: myMain.PowerCount++;
  4233  1470  3001               	movlw	1
  4234  1471  0020               	movlb	0	; select bank0
  4235  1472  00AD               	movwf	??_my_MainTimer
  4236  1473  082D               	movf	??_my_MainTimer,w
  4237  1474  0021               	movlb	1	; select bank1
  4238  1475  07A1               	addwf	(_myMain^(0+128)+1),f
  4239                           
  4240                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4241  1476  0821               	movf	(_myMain^(0+128)+1),w
  4242  1477  3A64               	xorlw	100
  4243  1478  1903               	btfsc	3,2
  4244                           
  4245                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4246  1479  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 226: }
  4249                           ;Main_B1.c: 228: myMain.Count1++;
  4250  147A  3001               	movlw	1
  4251  147B  07A4               	addwf	(_myMain^(0+128)+4),f
  4252  147C  3000               	movlw	0
  4253  147D  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4254                           
  4255                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4256  147E  3004               	movlw	4
  4257  147F  3EA0               	addlw	_myMain& (0+255)
  4258  1480  0086               	movwf	6
  4259  1481  0187               	clrf	7
  4260  1482  3F40               	moviw [0]fsr1
  4261  1483  3A64               	xorlw	100
  4262  1484  1D03               	skipz
  4263  1485  2C88               	goto	u11255
  4264  1486  3F41               	moviw [1]fsr1
  4265  1487  3A00               	xorlw	0
  4266  1488                     u11255:	
  4267  1488  1D03               	skipz
  4268  1489  0008               	return
  4269                           
  4270                           ;Main_B1.c: 230: {
  4271                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4272  148A  01A4               	clrf	(_myMain^(0+128)+4)
  4273  148B  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4274                           
  4275                           ;Main_B1.c: 243: if (myMain.Flag) {
  4276  148C  1CA0               	btfss	_myMain^(0+128),1
  4277  148D  2C90               	goto	l1394
  4278                           
  4279                           ;Main_B1.c: 244: myMain.Flag = 0;
  4280  148E  10A0               	bcf	_myMain^(0+128),1
  4281                           
  4282                           ;Main_B1.c: 253: } else {
  4283  148F  0008               	return
  4284  1490                     l1394:	
  4285                           
  4286                           ;Main_B1.c: 254: myMain.Flag = 1;
  4287  1490  14A0               	bsf	_myMain^(0+128),1
  4288  1491  0008               	return
  4289  1492                     __end_of_my_MainTimer:	
  4290                           
  4291                           	psect	text2
  4292  1D8A                     __ptext2:	
  4293 ;; *************** function _myMain_Initialization *****************
  4294 ;; Defined at:
  4295 ;;		line 170 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _myMain_Initialization
  4325  1D8A                     _myMain_Initialization:	
  4326                           
  4327                           ;Main_B1.c: 173: product = &_product;
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4331  1D8A  3020               	movlw	__product& (0+255)
  4332  1D8B  0020               	movlb	0	; select bank0
  4333  1D8C  00A0               	movwf	??_myMain_Initialization
  4334  1D8D  0820               	movf	??_myMain_Initialization,w
  4335  1D8E  00F9               	movwf	_product
  4336                           
  4337                           ;Main_B1.c: 174: product->Data[20] = 209;
  4338  1D8F  30D1               	movlw	209
  4339  1D90  00A0               	movwf	??_myMain_Initialization
  4340  1D91  0879               	movf	_product,w
  4341  1D92  3E14               	addlw	20
  4342  1D93  0086               	movwf	6
  4343  1D94  3002               	movlw	2	; select bank4/5
  4344  1D95  0087               	movwf	7
  4345  1D96  0820               	movf	??_myMain_Initialization,w
  4346  1D97  0081               	movwf	1
  4347  1D98  0008               	return
  4348  1D99                     __end_of_myMain_Initialization:	
  4349                           
  4350                           	psect	text3
  4351  0807                     __ptext3:	
  4352 ;; *************** function _getTemp_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    5[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;Total ram usage:        2 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		_getAD
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _getTemp_AD
  4384  0807                     _getTemp_AD:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4388                           ;getTemp_AD@channel stored from wreg
  4389  0807  0020               	movlb	0	; select bank0
  4390  0808  00A5               	movwf	getTemp_AD@channel
  4391                           
  4392                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4393  0809  0021               	movlb	1	; select bank1
  4394  080A  1D57               	btfss	_Temp^(0+128),2
  4395  080B  0008               	return
  4396                           
  4397                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4398  080C  30F0               	movlw	240
  4399  080D  0020               	movlb	0	; select bank0
  4400  080E  00A4               	movwf	??_getTemp_AD
  4401  080F  0824               	movf	??_getTemp_AD,w
  4402  0810  00A0               	movwf	getAD@adcon1
  4403  0811  0825               	movf	getTemp_AD@channel,w
  4404  0812  319F  27E0  3188   	fcall	_getAD
  4405  0815  0020               	movlb	0	; select bank0
  4406  0816  0821               	movf	?_getAD+1,w
  4407  0817  0021               	movlb	1	; select bank1
  4408  0818  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4409  0819  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4410  081A  0020               	movlb	0	; select bank0
  4411  081B  0820               	movf	?_getAD,w
  4412  081C  0021               	movlb	1	; select bank1
  4413  081D  01E3               	clrf	(_Temp^(0+128)+12)
  4414  081E  07E3               	addwf	(_Temp^(0+128)+12),f
  4415                           
  4416                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4417  081F  300C               	movlw	12
  4418  0820  3ED7               	addlw	_Temp& (0+255)
  4419  0821  0086               	movwf	6
  4420  0822  0187               	clrf	7
  4421  0823  0016               	moviw fsr1++
  4422  0824  0401               	iorwf	1,w
  4423  0825  1903               	skipnz
  4424  0826  0008               	return
  4425                           
  4426                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4427  0827  0864               	movf	((_Temp+1)^(0+128)+12),w
  4428  0828  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4429  0829  1D03               	skipz
  4430  082A  282D               	goto	u11205
  4431  082B  0863               	movf	(_Temp^(0+128)+12),w
  4432  082C  025F               	subwf	(_Temp^(0+128)+8),w
  4433  082D                     u11205:	
  4434  082D  1803               	skipnc
  4435  082E  2836               	goto	l9898
  4436                           
  4437                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4438  082F  0864               	movf	((_Temp+1)^(0+128)+12),w
  4439  0830  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4440  0831  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4441  0832  0863               	movf	(_Temp^(0+128)+12),w
  4442  0833  01DF               	clrf	(_Temp^(0+128)+8)
  4443  0834  07DF               	addwf	(_Temp^(0+128)+8),f
  4444                           
  4445                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4446  0835  0008               	return
  4447  0836                     l9898:	
  4448  0836  0864               	movf	((_Temp+1)^(0+128)+12),w
  4449  0837  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4450  0838  1D03               	skipz
  4451  0839  283C               	goto	u11215
  4452  083A  0863               	movf	(_Temp^(0+128)+12),w
  4453  083B  0261               	subwf	(_Temp^(0+128)+10),w
  4454  083C                     u11215:	
  4455  083C  1803               	skipnc
  4456  083D  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4459  083E  0864               	movf	((_Temp+1)^(0+128)+12),w
  4460  083F  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4461  0840  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4462  0841  0863               	movf	(_Temp^(0+128)+12),w
  4463  0842  01E1               	clrf	(_Temp^(0+128)+10)
  4464  0843  07E1               	addwf	(_Temp^(0+128)+10),f
  4465  0844  0008               	return
  4466  0845                     __end_of_getTemp_AD:	
  4467                           
  4468                           	psect	text4
  4469  0D08                     __ptext4:	
  4470 ;; *************** function _getLoad_AD *****************
  4471 ;; Defined at:
  4472 ;;		line 15 in file "../src/OverLoad_B1.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  channel         1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  channel         1    6[BANK0 ] unsigned char 
  4477 ;;  i               1    9[BANK0 ] unsigned char 
  4478 ;;  j               1    8[BANK0 ] unsigned char 
  4479 ;;  k               1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_getAD
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _getLoad_AD
  4505  0D08                     _getLoad_AD:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;getLoad_AD@channel stored from wreg
  4510  0D08  0020               	movlb	0	; select bank0
  4511  0D09  00A6               	movwf	getLoad_AD@channel
  4512                           
  4513                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4514  0D0A  01A9               	clrf	getLoad_AD@i
  4515  0D0B  01A8               	clrf	getLoad_AD@j
  4516  0D0C  01A7               	clrf	getLoad_AD@k
  4517                           
  4518                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4519  0D0D  0022               	movlb	2	; select bank2
  4520  0D0E  1E25               	btfss	_Load^(0+256),4
  4521  0D0F  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4524  0D10  30F3               	movlw	243
  4525  0D11  0020               	movlb	0	; select bank0
  4526  0D12  00A4               	movwf	??_getLoad_AD
  4527  0D13  0824               	movf	??_getLoad_AD,w
  4528  0D14  00A0               	movwf	getAD@adcon1
  4529  0D15  0826               	movf	getLoad_AD@channel,w
  4530  0D16  319F  27E0  318D   	fcall	_getAD
  4531  0D19  0020               	movlb	0	; select bank0
  4532  0D1A  0821               	movf	?_getAD+1,w
  4533  0D1B  0022               	movlb	2	; select bank2
  4534  0D1C  01C7               	clrf	((_Load+1)^(0+256)+33)
  4535  0D1D  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4536  0D1E  0020               	movlb	0	; select bank0
  4537  0D1F  0820               	movf	?_getAD,w
  4538  0D20  0022               	movlb	2	; select bank2
  4539  0D21  01C6               	clrf	(_Load^(0+256)+33)
  4540  0D22  07C6               	addwf	(_Load^(0+256)+33),f
  4541                           
  4542                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4543  0D23  0020               	movlb	0	; select bank0
  4544  0D24  01A9               	clrf	getLoad_AD@i
  4545  0D25  3004               	movlw	4
  4546  0D26  0229               	subwf	getLoad_AD@i,w
  4547  0D27  1803               	btfsc	3,0
  4548  0D28  2D56               	goto	l9868
  4549  0D29                     l9856:	
  4550                           
  4551                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4552  0D29  3529               	lslf	getLoad_AD@i,w
  4553  0D2A  3E30               	addlw	(_Load+11)& (0+255)
  4554  0D2B  0086               	movwf	6
  4555  0D2C  3001               	movlw	1	; select bank2/3
  4556  0D2D  0087               	movwf	7
  4557  0D2E  3F40               	moviw [0]fsr1
  4558  0D2F  00A4               	movwf	??_getLoad_AD
  4559  0D30  3F41               	moviw [1]fsr1
  4560  0D31  00A5               	movwf	??_getLoad_AD+1
  4561  0D32  0022               	movlb	2	; select bank2
  4562  0D33  0847               	movf	((_Load+1)^(0+256)+33),w
  4563  0D34  0020               	movlb	0	; select bank0
  4564  0D35  0225               	subwf	??_getLoad_AD+1,w
  4565  0D36  1D03               	skipz
  4566  0D37  2D3C               	goto	u11105
  4567  0D38  0022               	movlb	2	; select bank2
  4568  0D39  0846               	movf	(_Load^(0+256)+33),w
  4569  0D3A  0020               	movlb	0	; select bank0
  4570  0D3B  0224               	subwf	??_getLoad_AD,w
  4571  0D3C                     u11105:	
  4572  0D3C  1803               	skipnc
  4573  0D3D  2D4E               	goto	l9864
  4574  0D3E  08A8               	movf	getLoad_AD@j,f
  4575  0D3F  1D03               	skipz
  4576  0D40  2D4E               	goto	l9864
  4577                           
  4578                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4579  0D41  3529               	lslf	getLoad_AD@i,w
  4580  0D42  3E30               	addlw	(_Load+11)& (0+255)
  4581  0D43  0086               	movwf	6
  4582  0D44  3001               	movlw	1	; select bank2/3
  4583  0D45  0087               	movwf	7
  4584  0D46  0022               	movlb	2	; select bank2
  4585  0D47  0846               	movf	(_Load^(0+256)+33),w
  4586  0D48  3FC0               	movwi [0]fsr1
  4587  0D49  0847               	movf	((_Load+1)^(0+256)+33),w
  4588  0D4A  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;OverLoad_B1.c: 24: j = 1;
  4591  0D4B  0020               	movlb	0	; select bank0
  4592  0D4C  01A8               	clrf	getLoad_AD@j
  4593  0D4D  0AA8               	incf	getLoad_AD@j,f
  4594  0D4E                     l9864:	
  4595  0D4E  3001               	movlw	1
  4596  0D4F  00A4               	movwf	??_getLoad_AD
  4597  0D50  0824               	movf	??_getLoad_AD,w
  4598  0D51  07A9               	addwf	getLoad_AD@i,f
  4599  0D52  3004               	movlw	4
  4600  0D53  0229               	subwf	getLoad_AD@i,w
  4601  0D54  1C03               	skipc
  4602  0D55  2D29               	goto	l9856
  4603  0D56                     l9868:	
  4604                           
  4605                           ;OverLoad_B1.c: 25: }
  4606                           ;OverLoad_B1.c: 26: }
  4607                           ;OverLoad_B1.c: 27: if (j == 0) {
  4608  0D56  08A8               	movf	getLoad_AD@j,f
  4609  0D57  1D03               	skipz
  4610  0D58  0008               	return
  4611                           
  4612                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4613  0D59  01A9               	clrf	getLoad_AD@i
  4614  0D5A                     L1:	
  4615  0D5A  3004               	movlw	4
  4616  0D5B  0229               	subwf	getLoad_AD@i,w
  4617  0D5C  1803               	btfsc	3,0
  4618  0D5D  0008               	return
  4619                           
  4620                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4621  0D5E  3529               	lslf	getLoad_AD@i,w
  4622  0D5F  3E3A               	addlw	(_Load+21)& (0+255)
  4623  0D60  0086               	movwf	6
  4624  0D61  3001               	movlw	1	; select bank2/3
  4625  0D62  0087               	movwf	7
  4626  0D63  3F40               	moviw [0]fsr1
  4627  0D64  00A4               	movwf	??_getLoad_AD
  4628  0D65  3F41               	moviw [1]fsr1
  4629  0D66  00A5               	movwf	??_getLoad_AD+1
  4630  0D67  0825               	movf	??_getLoad_AD+1,w
  4631  0D68  0022               	movlb	2	; select bank2
  4632  0D69  0247               	subwf	((_Load+1)^(0+256)+33),w
  4633  0D6A  1D03               	skipz
  4634  0D6B  2D70               	goto	u11155
  4635  0D6C  0020               	movlb	0	; select bank0
  4636  0D6D  0824               	movf	??_getLoad_AD,w
  4637  0D6E  0022               	movlb	2	; select bank2
  4638  0D6F  0246               	subwf	(_Load^(0+256)+33),w
  4639  0D70                     u11155:	
  4640  0D70  1803               	skipnc
  4641  0D71  2D83               	goto	l9884
  4642  0D72  0020               	movlb	0	; select bank0
  4643  0D73  08A7               	movf	getLoad_AD@k,f
  4644  0D74  1D03               	skipz
  4645  0D75  2D83               	goto	l9884
  4646                           
  4647                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4648  0D76  3529               	lslf	getLoad_AD@i,w
  4649  0D77  3E3A               	addlw	(_Load+21)& (0+255)
  4650  0D78  0086               	movwf	6
  4651  0D79  3001               	movlw	1	; select bank2/3
  4652  0D7A  0087               	movwf	7
  4653  0D7B  0022               	movlb	2	; select bank2
  4654  0D7C  0846               	movf	(_Load^(0+256)+33),w
  4655  0D7D  3FC0               	movwi [0]fsr1
  4656  0D7E  0847               	movf	((_Load+1)^(0+256)+33),w
  4657  0D7F  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;OverLoad_B1.c: 31: k = 1;
  4660  0D80  0020               	movlb	0	; select bank0
  4661  0D81  01A7               	clrf	getLoad_AD@k
  4662  0D82  0AA7               	incf	getLoad_AD@k,f
  4663  0D83                     l9884:	
  4664  0D83  3001               	movlw	1
  4665  0D84  0020               	movlb	0	; select bank0
  4666  0D85  00A4               	movwf	??_getLoad_AD
  4667  0D86  0824               	movf	??_getLoad_AD,w
  4668  0D87  07A9               	addwf	getLoad_AD@i,f
  4669  0D88  2D5A               	goto	L1
  4670  0D89                     __end_of_getLoad_AD:	
  4671                           
  4672                           	psect	text5
  4673  1FE0                     __ptext5:	
  4674 ;; *************** function _getAD *****************
  4675 ;; Defined at:
  4676 ;;		line 454 in file "../src/MCU_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  adcon0          1    wreg     unsigned char 
  4679 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[BANK0 ] int 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_Timeout_Counter
  4700 ;;		_set_TimeoutCleared
  4701 ;; This function is called by:
  4702 ;;		_getLoad_AD
  4703 ;;		_getTemp_AD
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getAD
  4709  1FE0                     _getAD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getAD@adcon0 stored from wreg
  4714  1FE0  0020               	movlb	0	; select bank0
  4715  1FE1  00A3               	movwf	getAD@adcon0
  4716                           
  4717                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4718  1FE2  0823               	movf	getAD@adcon0,w
  4719  1FE3  0021               	movlb	1	; select bank1
  4720  1FE4  009D               	movwf	29	;volatile
  4721                           
  4722                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4723  1FE5  0020               	movlb	0	; select bank0
  4724  1FE6  0820               	movf	getAD@adcon1,w
  4725  1FE7  0021               	movlb	1	; select bank1
  4726  1FE8  009E               	movwf	30	;volatile
  4727                           
  4728                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4729  1FE9  149D               	bsf	29,1	;volatile
  4730                           
  4731                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4732  1FEA  2FEE               	goto	l9358
  4733  1FEB                     l9356:	
  4734                           
  4735                           ;MCU_B1.c: 459: Timeout_Counter();
  4736  1FEB  319E  2692  319F   	fcall	_Timeout_Counter
  4737  1FEE                     l9358:	
  4738  1FEE  0021               	movlb	1	; select bank1
  4739  1FEF  1C9D               	btfss	29,1	;volatile
  4740  1FF0  2FF3               	goto	l9362
  4741  1FF1  1D2B               	btfss	(_myMain^(0+128)+11),2
  4742  1FF2  2FEB               	goto	l9356
  4743  1FF3                     l9362:	
  4744                           
  4745                           ;MCU_B1.c: 460: };
  4746                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4747  1FF3  319C  244F         	fcall	_set_TimeoutCleared
  4748                           
  4749                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4750  1FF5  0021               	movlb	1	; select bank1
  4751  1FF6  081C               	movf	28,w	;volatile
  4752  1FF7  0020               	movlb	0	; select bank0
  4753  1FF8  01A1               	clrf	?_getAD+1
  4754  1FF9  07A1               	addwf	?_getAD+1,f
  4755  1FFA  0021               	movlb	1	; select bank1
  4756  1FFB  081B               	movf	27,w	;volatile
  4757  1FFC  0020               	movlb	0	; select bank0
  4758  1FFD  01A0               	clrf	?_getAD
  4759  1FFE  07A0               	addwf	?_getAD,f
  4760  1FFF  0008               	return
  4761  2000                     __end_of_getAD:	
  4762                           
  4763                           	psect	text6
  4764  1E33                     __ptext6:	
  4765 ;; *************** function _WDT_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 1098 in file "../src/MCU_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        1 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_WDT_Clearing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _WDT_Main
  4797  1E33                     _WDT_Main:	
  4798                           
  4799                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4803  1E33  0021               	movlb	1	; select bank1
  4804  1E34  1C49               	btfss	_WDT^(0+128),0
  4805  1E35  0008               	return
  4806                           
  4807                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4808  1E36  3001               	movlw	1
  4809  1E37  02CA               	subwf	(_WDT^(0+128)+1),f
  4810  1E38  084A               	movf	(_WDT^(0+128)+1),w
  4811  1E39  3AFF               	xorlw	255
  4812  1E3A  1903               	skipnz
  4813  1E3B  0008               	return
  4814                           
  4815                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4816  1E3C  3064               	movlw	100
  4817  1E3D  0020               	movlb	0	; select bank0
  4818  1E3E  00A0               	movwf	??_WDT_Main
  4819  1E3F  0820               	movf	??_WDT_Main,w
  4820  1E40  0021               	movlb	1	; select bank1
  4821  1E41  00CA               	movwf	(_WDT^(0+128)+1)
  4822                           
  4823                           ;MCU_B1.c: 1102: WDT_Clearing();
  4824  1E42  3180  2002         	fcall	_WDT_Clearing
  4825  1E44  0008               	return
  4826  1E45                     __end_of_WDT_Main:	
  4827                           
  4828                           	psect	text7
  4829  0002                     __ptext7:	
  4830 ;; *************** function _WDT_Clearing *****************
  4831 ;; Defined at:
  4832 ;;		line 1108 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		None
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_WDT_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Clearing
  4862  0002                     _WDT_Clearing:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _WDT_Clearing: []
  4866  0002  0064               	clrwdt	;# 
  4867  0003  0008               	return
  4868  0004                     __end_of_WDT_Clearing:	
  4869                           
  4870                           	psect	text8
  4871  1066                     __ptext8:	
  4872 ;; *************** function _Temp_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    8
  4895 ;; This function calls:
  4896 ;;		_setTemp_Main
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Temp_Main
  4904  1066                     _Temp_Main:	
  4905                           
  4906                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  1066  318F  2750         	fcall	_setTemp_Main
  4911  1068  0008               	return
  4912  1069                     __end_of_Temp_Main:	
  4913                           
  4914                           	psect	text9
  4915  0F50                     __ptext9:	
  4916 ;; *************** function _setTemp_Main *****************
  4917 ;; Defined at:
  4918 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  error           1   72[BANK0 ] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		_getMain_All_Error_Status
  4941 ;;		_setBuz
  4942 ;;		_setProductData
  4943 ;; This function is called by:
  4944 ;;		_Temp_Main
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _setTemp_Main
  4950  0F50                     _setTemp_Main:	
  4951                           
  4952                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4956  0F50  3000               	movlw	0
  4957  0F51  3192  2270  318F   	fcall	_getMain_All_Error_Status
  4958  0F54  0020               	movlb	0	; select bank0
  4959  0F55  00E6               	movwf	??_setTemp_Main
  4960  0F56  0866               	movf	??_setTemp_Main,w
  4961  0F57  00E8               	movwf	setTemp_Main@error
  4962                           
  4963                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4964  0F58  0021               	movlb	1	; select bank1
  4965  0F59  1C57               	btfss	_Temp^(0+128),0
  4966  0F5A  2FFC               	goto	l1719
  4967                           
  4968                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4969  0F5B  1957               	btfsc	_Temp^(0+128),2
  4970  0F5C  2F6C               	goto	l9424
  4971                           
  4972                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4973  0F5D  3001               	movlw	1
  4974  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4975  0F5F  3000               	movlw	0
  4976  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4977                           
  4978                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4979  0F61  3001               	movlw	1
  4980  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4981  0F63  30F4               	movlw	244
  4982  0F64  1903               	skipnz
  4983  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4984  0F66  1C03               	skipc
  4985  0F67  0008               	return
  4986                           
  4987                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4988  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4989  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4990                           
  4991                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4992  0F6A  1557               	bsf	_Temp^(0+128),2
  4993                           
  4994                           ;OverTemperature_B1.c: 70: }
  4995                           ;OverTemperature_B1.c: 71: } else {
  4996  0F6B  0008               	return
  4997  0F6C                     l9424:	
  4998                           
  4999                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5000  0F6C  3001               	movlw	1
  5001  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5002  0F6E  3000               	movlw	0
  5003  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5004                           
  5005                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5006  0F70  3000               	movlw	0
  5007  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5008  0F72  3005               	movlw	5
  5009  0F73  1903               	skipnz
  5010  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5011  0F75  1C03               	skipc
  5012  0F76  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5015  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5016  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5017                           
  5018                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5019  0F79  3008               	movlw	8
  5020  0F7A  3ED7               	addlw	_Temp& (0+255)
  5021  0F7B  0086               	movwf	6
  5022  0F7C  0187               	clrf	7
  5023  0F7D  0016               	moviw fsr1++
  5024  0F7E  0401               	iorwf	1,w
  5025  0F7F  1903               	skipnz
  5026  0F80  2FF6               	goto	l1724
  5027  0F81  300A               	movlw	10
  5028  0F82  3ED7               	addlw	_Temp& (0+255)
  5029  0F83  0086               	movwf	6
  5030  0F84  0187               	clrf	7
  5031  0F85  0016               	moviw fsr1++
  5032  0F86  0401               	iorwf	1,w
  5033  0F87  1903               	skipnz
  5034  0F88  2FF6               	goto	l1724
  5035                           
  5036                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5037  0F89  1157               	bcf	_Temp^(0+128),2
  5038                           
  5039                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5040  0F8A  300A               	movlw	10
  5041  0F8B  3ED7               	addlw	_Temp& (0+255)
  5042  0F8C  0086               	movwf	6
  5043  0F8D  0187               	clrf	7
  5044  0F8E  3008               	movlw	8
  5045  0F8F  3ED7               	addlw	_Temp& (0+255)
  5046  0F90  0084               	movwf	4
  5047  0F91  0185               	clrf	5
  5048  0F92  3F40               	moviw [0]fsr1
  5049  0F93  0700               	addwf	0,w
  5050  0F94  0020               	movlb	0	; select bank0
  5051  0F95  00E6               	movwf	??_setTemp_Main
  5052  0F96  3101               	addfsr 0,1
  5053  0F97  3F41               	moviw [1]fsr1
  5054  0F98  3D00               	addwfc	0,w
  5055  0F99  00E7               	movwf	??_setTemp_Main+1
  5056  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5057  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5058  0F9C  0866               	movf	??_setTemp_Main,w
  5059  0F9D  0021               	movlb	1	; select bank1
  5060  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5061  0F9F  0020               	movlb	0	; select bank0
  5062  0FA0  0867               	movf	??_setTemp_Main+1,w
  5063  0FA1  0021               	movlb	1	; select bank1
  5064  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5065                           
  5066                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5067  0FA3  3090               	movlw	144
  5068  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5069  0FA5  3001               	movlw	1
  5070  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5071                           
  5072                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5073  0FA7  3059               	movlw	89
  5074  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5075  0FA9  3001               	movlw	1
  5076  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5077                           
  5078                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5079  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5080  0FAC  2FCD               	goto	l9456
  5081                           
  5082                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5083  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5084  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5085  0FAF  1D03               	skipz
  5086  0FB0  2FB3               	goto	u10345
  5087  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5088  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5089  0FB3                     u10345:	
  5090  0FB3  1C03               	skipc
  5091  0FB4  2FCB               	goto	l9454
  5092                           
  5093                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5094  0FB5  3001               	movlw	1
  5095  0FB6  0020               	movlb	0	; select bank0
  5096  0FB7  00E6               	movwf	??_setTemp_Main
  5097  0FB8  0866               	movf	??_setTemp_Main,w
  5098  0FB9  0021               	movlb	1	; select bank1
  5099  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5100                           
  5101                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5102  0FBB  3003               	movlw	3
  5103  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5104  0FBD  1C03               	skipc
  5105  0FBE  2FE3               	goto	l9468
  5106                           
  5107                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5108  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5109                           
  5110                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5111  0FC0  10D7               	bcf	_Temp^(0+128),1
  5112                           
  5113                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5114  0FC1  3064               	movlw	100
  5115  0FC2  0020               	movlb	0	; select bank0
  5116  0FC3  00A9               	movwf	setBuz@time
  5117  0FC4  3000               	movlw	0
  5118  0FC5  00AA               	movwf	setBuz@time+1
  5119  0FC6  3002               	movlw	2
  5120  0FC7  3197  27A7  318F   	fcall	_setBuz
  5121                           
  5122                           ;OverTemperature_B1.c: 103: }
  5123                           ;OverTemperature_B1.c: 104: } else {
  5124  0FCA  2FE3               	goto	l9468
  5125  0FCB                     l9454:	
  5126                           
  5127                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5128  0FCB  0021               	movlb	1	; select bank1
  5129  0FCC  2FE2               	goto	l9466
  5130  0FCD                     l9456:	
  5131                           ;OverTemperature_B1.c: 106: }
  5132                           ;OverTemperature_B1.c: 107: } else {
  5133                           
  5134                           
  5135                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5136  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5137  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5138  0FCF  1D03               	skipz
  5139  0FD0  2FD3               	goto	u10365
  5140  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5141  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5142  0FD3                     u10365:	
  5143  0FD3  1C03               	skipc
  5144  0FD4  2FE2               	goto	l9466
  5145                           
  5146                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5147  0FD5  3001               	movlw	1
  5148  0FD6  0020               	movlb	0	; select bank0
  5149  0FD7  00E6               	movwf	??_setTemp_Main
  5150  0FD8  0866               	movf	??_setTemp_Main,w
  5151  0FD9  0021               	movlb	1	; select bank1
  5152  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5153                           
  5154                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5155  0FDB  3003               	movlw	3
  5156  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5157  0FDD  1C03               	skipc
  5158  0FDE  2FE3               	goto	l9468
  5159                           
  5160                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5161  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5162                           
  5163                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5164  0FE0  14D7               	bsf	_Temp^(0+128),1
  5165                           
  5166                           ;OverTemperature_B1.c: 113: }
  5167                           ;OverTemperature_B1.c: 114: } else {
  5168  0FE1  2FE3               	goto	l9468
  5169  0FE2                     l9466:	
  5170                           
  5171                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5172  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5173  0FE3                     l9468:	
  5174                           
  5175                           ;OverTemperature_B1.c: 116: }
  5176                           ;OverTemperature_B1.c: 117: }
  5177                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5178  0FE3  0021               	movlb	1	; select bank1
  5179  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FE5  0020               	movlb	0	; select bank0
  5181  0FE6  00E6               	movwf	??_setTemp_Main
  5182  0FE7  0866               	movf	??_setTemp_Main,w
  5183  0FE8  00E2               	movwf	setProductData@value
  5184  0FE9  3018               	movlw	24
  5185  0FEA  319D  255F  318F   	fcall	_setProductData
  5186                           
  5187                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5188  0FED  0021               	movlb	1	; select bank1
  5189  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5190  0FEF  0020               	movlb	0	; select bank0
  5191  0FF0  00E6               	movwf	??_setTemp_Main
  5192  0FF1  0866               	movf	??_setTemp_Main,w
  5193  0FF2  00E2               	movwf	setProductData@value
  5194  0FF3  3019               	movlw	25
  5195  0FF4  319D  255F         	fcall	_setProductData
  5196  0FF6                     l1724:	
  5197                           
  5198                           ;OverTemperature_B1.c: 135: }
  5199                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5200  0FF6  0021               	movlb	1	; select bank1
  5201  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5202  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5203                           
  5204                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5205  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5206  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5207                           
  5208                           ;OverTemperature_B1.c: 138: }
  5209                           ;OverTemperature_B1.c: 139: }
  5210                           ;OverTemperature_B1.c: 141: } else {
  5211  0FFB  0008               	return
  5212  0FFC                     l1719:	
  5213                           
  5214                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5215  0FFC  1C20               	btfss	_myMain^(0+128),0
  5216  0FFD  0008               	return
  5217                           
  5218                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5219  0FFE  1457               	bsf	_Temp^(0+128),0
  5220  0FFF  0008               	return
  5221  1000                     __end_of_setTemp_Main:	
  5222                           
  5223                           	psect	text10
  5224  1C2C                     __ptext10:	
  5225 ;; *************** function _Temp_Initialization *****************
  5226 ;; Defined at:
  5227 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    6
  5248 ;; This function calls:
  5249 ;;		_setTemp_Initialization
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _Temp_Initialization
  5257  1C2C                     _Temp_Initialization:	
  5258                           
  5259                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5263  1C2C  319C  241F         	fcall	_setTemp_Initialization
  5264  1C2E  0008               	return
  5265  1C2F                     __end_of_Temp_Initialization:	
  5266                           
  5267                           	psect	text11
  5268  1C1F                     __ptext11:	
  5269 ;; *************** function _setTemp_Initialization *****************
  5270 ;; Defined at:
  5271 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		None
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    5
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_Temp_Initialization
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _setTemp_Initialization
  5301  1C1F                     _setTemp_Initialization:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _setTemp_Initialization: []
  5305  1C1F  0008               	return
  5306  1C20                     __end_of_setTemp_Initialization:	
  5307                           
  5308                           	psect	text12
  5309  0800                     __ptext12:	
  5310 ;; *************** function _Switch_Main *****************
  5311 ;; Defined at:
  5312 ;;		line 72 in file "../src/Switch_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   10
  5333 ;; This function calls:
  5334 ;;		_TouchPower
  5335 ;;		_setSw_Main
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _Switch_Main
  5343  0800                     _Switch_Main:	
  5344                           
  5345                           ;Switch_B1.c: 75: setSw_Main(1);
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5349  0800  3001               	movlw	1
  5350  0801  3181  21ED  3188   	fcall	_setSw_Main
  5351                           
  5352                           ;Switch_B1.c: 87: TouchPower();
  5353  0804  319E  26BC         	fcall	_TouchPower
  5354  0806  0008               	return
  5355  0807                     __end_of_Switch_Main:	
  5356                           
  5357                           	psect	text13
  5358  01ED                     __ptext13:	
  5359 ;; *************** function _setSw_Main *****************
  5360 ;; Defined at:
  5361 ;;		line 121 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1   77[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        3 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    9
  5382 ;; This function calls:
  5383 ;;		_SwPointSelect
  5384 ;;		_getMain_All_Error_Status
  5385 ;;		_getSw_KeyStatus
  5386 ;;		_setBuz
  5387 ;;		_setDimmerLights_AdjOn
  5388 ;;		_setDimmerLights_SwOff
  5389 ;;		_setDimmerLights_SwOn
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  01ED                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  01ED  0020               	movlb	0	; select bank0
  5404  01EE  00ED               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5407  01EF  086D               	movf	setSw_Main@sw,w
  5408  01F0  319D  2500  3181   	fcall	_SwPointSelect
  5409                           
  5410                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5411  01F3  0877               	movf	_Sw,w
  5412  01F4  0086               	movwf	6
  5413  01F5  3001               	movlw	1	; select bank2/3
  5414  01F6  0087               	movwf	7
  5415  01F7  1C01               	btfss	1,0
  5416  01F8  2B53               	goto	l2412
  5417                           
  5418                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5419  01F9  3000               	movlw	0
  5420  01FA  3192  2270  3181   	fcall	_getMain_All_Error_Status
  5421  01FD  3800               	iorlw	0
  5422  01FE  1D03               	skipz
  5423  01FF  2A1B               	goto	l9568
  5424                           
  5425                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5426  0200  0A77               	incf	_Sw,w
  5427  0201  0086               	movwf	6
  5428  0202  3001               	movlw	1	; select bank2/3
  5429  0203  0087               	movwf	7
  5430  0204  1081               	bcf	1,1
  5431                           
  5432                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5433  0205  0020               	movlb	0	; select bank0
  5434  0206  086D               	movf	setSw_Main@sw,w
  5435  0207  319D  25EC  3181   	fcall	_getSw_KeyStatus
  5436  020A  3A01               	xorlw	1
  5437  020B  3000               	movlw	0
  5438  020C  1903               	skipnz
  5439  020D  3001               	movlw	1
  5440  020E  0020               	movlb	0	; select bank0
  5441  020F  00EB               	movwf	??_setSw_Main
  5442  0210  0877               	movf	_Sw,w
  5443  0211  0086               	movwf	6
  5444  0212  3001               	movlw	1	; select bank2/3
  5445  0213  0087               	movwf	7
  5446  0214  0DEB               	rlf	??_setSw_Main,f
  5447  0215  0801               	movf	1,w
  5448  0216  066B               	xorwf	??_setSw_Main,w
  5449  0217  39FD               	andlw	-3
  5450  0218  066B               	xorwf	??_setSw_Main,w
  5451  0219  0081               	movwf	1
  5452                           
  5453                           ;Switch_B1.c: 128: } else {
  5454  021A  2A30               	goto	l2414
  5455  021B                     l9568:	
  5456                           
  5457                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5458  021B  0A77               	incf	_Sw,w
  5459  021C  0086               	movwf	6
  5460  021D  3001               	movlw	1	; select bank2/3
  5461  021E  0087               	movwf	7
  5462  021F  1881               	btfsc	1,1
  5463  0220  2A30               	goto	l2414
  5464                           
  5465                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5466  0221  0A77               	incf	_Sw,w
  5467  0222  0086               	movwf	6
  5468  0223  3001               	movlw	1	; select bank2/3
  5469  0224  0087               	movwf	7
  5470  0225  1481               	bsf	1,1
  5471                           
  5472                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5473  0226  0877               	movf	_Sw,w
  5474  0227  0086               	movwf	6
  5475  0228  3001               	movlw	1	; select bank2/3
  5476  0229  0087               	movwf	7
  5477  022A  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5480  022B  0877               	movf	_Sw,w
  5481  022C  0086               	movwf	6
  5482  022D  3001               	movlw	1	; select bank2/3
  5483  022E  0087               	movwf	7
  5484  022F  1501               	bsf	1,2
  5485  0230                     l2414:	
  5486                           
  5487                           ;Switch_B1.c: 134: }
  5488                           ;Switch_B1.c: 135: }
  5489                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5490  0230  0877               	movf	_Sw,w
  5491  0231  0086               	movwf	6
  5492  0232  3001               	movlw	1	; select bank2/3
  5493  0233  0087               	movwf	7
  5494  0234  1C81               	btfss	1,1
  5495  0235  2B00               	goto	l9618
  5496                           
  5497                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5498  0236  0877               	movf	_Sw,w
  5499  0237  0086               	movwf	6
  5500  0238  3001               	movlw	1	; select bank2/3
  5501  0239  0087               	movwf	7
  5502  023A  1901               	btfsc	1,2
  5503  023B  2A5E               	goto	l9584
  5504                           
  5505                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5506  023C  3001               	movlw	1
  5507  023D  0020               	movlb	0	; select bank0
  5508  023E  00EB               	movwf	??_setSw_Main
  5509  023F  0877               	movf	_Sw,w
  5510  0240  3E02               	addlw	2
  5511  0241  0086               	movwf	6
  5512  0242  3001               	movlw	1	; select bank2/3
  5513  0243  0087               	movwf	7
  5514  0244  086B               	movf	??_setSw_Main,w
  5515  0245  0781               	addwf	1,f
  5516                           
  5517                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5518  0246  0877               	movf	_Sw,w
  5519  0247  3E02               	addlw	2
  5520  0248  0086               	movwf	6
  5521  0249  3001               	movlw	1	; select bank2/3
  5522  024A  0087               	movwf	7
  5523  024B  3005               	movlw	5
  5524  024C  0201               	subwf	1,w
  5525  024D  1C03               	skipc
  5526  024E  0008               	return
  5527                           
  5528                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5529  024F  0877               	movf	_Sw,w
  5530  0250  3E02               	addlw	2
  5531  0251  0086               	movwf	6
  5532  0252  3001               	movlw	1	; select bank2/3
  5533  0253  0087               	movwf	7
  5534  0254  0181               	clrf	1
  5535                           
  5536                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5537  0255  0877               	movf	_Sw,w
  5538  0256  0086               	movwf	6
  5539  0257  3001               	movlw	1	; select bank2/3
  5540  0258  0087               	movwf	7
  5541  0259  1501               	bsf	1,2
  5542                           
  5543                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5544  025A  086D               	movf	setSw_Main@sw,w
  5545  025B  3194  241D         	fcall	_setDimmerLights_SwOn
  5546                           
  5547                           ;Switch_B1.c: 148: }
  5548                           ;Switch_B1.c: 149: } else {
  5549  025D  0008               	return
  5550  025E                     l9584:	
  5551                           
  5552                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5553  025E  0877               	movf	_Sw,w
  5554  025F  0086               	movwf	6
  5555  0260  3001               	movlw	1	; select bank2/3
  5556  0261  0087               	movwf	7
  5557  0262  1981               	btfsc	1,3
  5558  0263  2A90               	goto	l9594
  5559                           
  5560                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5561  0264  0877               	movf	_Sw,w
  5562  0265  3E03               	addlw	3
  5563  0266  0086               	movwf	6
  5564  0267  3001               	movlw	1	; select bank2/3
  5565  0268  0087               	movwf	7
  5566  0269  3001               	movlw	1
  5567  026A  0781               	addwf	1,f
  5568  026B  3141               	addfsr 1,1
  5569  026C  1803               	skipnc
  5570  026D  0A81               	incf	1,f
  5571                           
  5572                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5573  026E  0877               	movf	_Sw,w
  5574  026F  3E03               	addlw	3
  5575  0270  0086               	movwf	6
  5576  0271  3001               	movlw	1	; select bank2/3
  5577  0272  0087               	movwf	7
  5578  0273  3F40               	moviw [0]fsr1
  5579  0274  0020               	movlb	0	; select bank0
  5580  0275  00EB               	movwf	??_setSw_Main
  5581  0276  3F41               	moviw [1]fsr1
  5582  0277  00EC               	movwf	??_setSw_Main+1
  5583  0278  3000               	movlw	0
  5584  0279  026C               	subwf	??_setSw_Main+1,w
  5585  027A  3096               	movlw	150
  5586  027B  1903               	skipnz
  5587  027C  026B               	subwf	??_setSw_Main,w
  5588  027D  1C03               	skipc
  5589  027E  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5592  027F  0877               	movf	_Sw,w
  5593  0280  3E03               	addlw	3
  5594  0281  0086               	movwf	6
  5595  0282  3001               	movlw	1	; select bank2/3
  5596  0283  0087               	movwf	7
  5597  0284  3000               	movlw	0
  5598  0285  3FC0               	movwi [0]fsr1
  5599  0286  3FC1               	movwi [1]fsr1
  5600                           
  5601                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5602  0287  0877               	movf	_Sw,w
  5603  0288  0086               	movwf	6
  5604  0289  3001               	movlw	1	; select bank2/3
  5605  028A  0087               	movwf	7
  5606  028B  1581               	bsf	1,3
  5607                           
  5608                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5609  028C  086D               	movf	setSw_Main@sw,w
  5610  028D  3193  2377         	fcall	_setDimmerLights_AdjOn
  5611                           
  5612                           ;Switch_B1.c: 160: }
  5613                           ;Switch_B1.c: 161: } else {
  5614  028F  0008               	return
  5615  0290                     l9594:	
  5616                           
  5617                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5618  0290  0877               	movf	_Sw,w
  5619  0291  0086               	movwf	6
  5620  0292  3001               	movlw	1	; select bank2/3
  5621  0293  0087               	movwf	7
  5622  0294  1A01               	btfsc	1,4
  5623  0295  2ACE               	goto	l9608
  5624                           
  5625                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5626  0296  0877               	movf	_Sw,w
  5627  0297  3E05               	addlw	5
  5628  0298  0086               	movwf	6
  5629  0299  3001               	movlw	1	; select bank2/3
  5630  029A  0087               	movwf	7
  5631  029B  3001               	movlw	1
  5632  029C  0781               	addwf	1,f
  5633  029D  3141               	addfsr 1,1
  5634  029E  1803               	skipnc
  5635  029F  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5638  02A0  0877               	movf	_Sw,w
  5639  02A1  3E05               	addlw	5
  5640  02A2  0086               	movwf	6
  5641  02A3  3001               	movlw	1	; select bank2/3
  5642  02A4  0087               	movwf	7
  5643  02A5  3F40               	moviw [0]fsr1
  5644  02A6  0020               	movlb	0	; select bank0
  5645  02A7  00EB               	movwf	??_setSw_Main
  5646  02A8  3F41               	moviw [1]fsr1
  5647  02A9  00EC               	movwf	??_setSw_Main+1
  5648  02AA  3000               	movlw	0
  5649  02AB  026C               	subwf	??_setSw_Main+1,w
  5650  02AC  3096               	movlw	150
  5651  02AD  1903               	skipnz
  5652  02AE  026B               	subwf	??_setSw_Main,w
  5653  02AF  1C03               	skipc
  5654  02B0  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5657  02B1  0877               	movf	_Sw,w
  5658  02B2  3E05               	addlw	5
  5659  02B3  0086               	movwf	6
  5660  02B4  3001               	movlw	1	; select bank2/3
  5661  02B5  0087               	movwf	7
  5662  02B6  3000               	movlw	0
  5663  02B7  3FC0               	movwi [0]fsr1
  5664  02B8  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5667  02B9  0877               	movf	_Sw,w
  5668  02BA  0086               	movwf	6
  5669  02BB  3001               	movlw	1	; select bank2/3
  5670  02BC  0087               	movwf	7
  5671  02BD  1601               	bsf	1,4
  5672                           
  5673                           ;Switch_B1.c: 169: setRF_Learn(1);
  5674  02BE  3001               	movlw	1
  5675  02BF  319E  267E  3181   	fcall	_setRF_Learn
  5676                           
  5677                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5678  02C2  0021               	movlb	1	; select bank1
  5679  02C3  1EA0               	btfss	_myMain^(0+128),5
  5680  02C4  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 172: setBuz(2, 100);
  5683  02C5  3064               	movlw	100
  5684  02C6  0020               	movlb	0	; select bank0
  5685  02C7  00A9               	movwf	setBuz@time
  5686  02C8  3000               	movlw	0
  5687  02C9  00AA               	movwf	setBuz@time+1
  5688  02CA  3002               	movlw	2
  5689  02CB  3197  27A7         	fcall	_setBuz
  5690                           
  5691                           ;Switch_B1.c: 173: }
  5692                           ;Switch_B1.c: 175: }
  5693                           ;Switch_B1.c: 176: } else {
  5694  02CD  0008               	return
  5695  02CE                     l9608:	
  5696                           
  5697                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5698  02CE  0877               	movf	_Sw,w
  5699  02CF  0086               	movwf	6
  5700  02D0  3001               	movlw	1	; select bank2/3
  5701  02D1  0087               	movwf	7
  5702  02D2  1A81               	btfsc	1,5
  5703  02D3  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5706  02D4  0877               	movf	_Sw,w
  5707  02D5  3E07               	addlw	7
  5708  02D6  0086               	movwf	6
  5709  02D7  3001               	movlw	1	; select bank2/3
  5710  02D8  0087               	movwf	7
  5711  02D9  3001               	movlw	1
  5712  02DA  0781               	addwf	1,f
  5713  02DB  3141               	addfsr 1,1
  5714  02DC  1803               	skipnc
  5715  02DD  0A81               	incf	1,f
  5716                           
  5717                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5718  02DE  0877               	movf	_Sw,w
  5719  02DF  3E07               	addlw	7
  5720  02E0  0086               	movwf	6
  5721  02E1  3001               	movlw	1	; select bank2/3
  5722  02E2  0087               	movwf	7
  5723  02E3  3F40               	moviw [0]fsr1
  5724  02E4  0020               	movlb	0	; select bank0
  5725  02E5  00EB               	movwf	??_setSw_Main
  5726  02E6  3F41               	moviw [1]fsr1
  5727  02E7  00EC               	movwf	??_setSw_Main+1
  5728  02E8  3001               	movlw	1
  5729  02E9  026C               	subwf	??_setSw_Main+1,w
  5730  02EA  302C               	movlw	44
  5731  02EB  1903               	skipnz
  5732  02EC  026B               	subwf	??_setSw_Main,w
  5733  02ED  1C03               	skipc
  5734  02EE  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5737  02EF  0877               	movf	_Sw,w
  5738  02F0  3E07               	addlw	7
  5739  02F1  0086               	movwf	6
  5740  02F2  3001               	movlw	1	; select bank2/3
  5741  02F3  0087               	movwf	7
  5742  02F4  3000               	movlw	0
  5743  02F5  3FC0               	movwi [0]fsr1
  5744  02F6  3FC1               	movwi [1]fsr1
  5745                           
  5746                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5747  02F7  0877               	movf	_Sw,w
  5748  02F8  0086               	movwf	6
  5749  02F9  3001               	movlw	1	; select bank2/3
  5750  02FA  0087               	movwf	7
  5751  02FB  1681               	bsf	1,5
  5752                           
  5753                           ;Switch_B1.c: 184: setRF_Learn(0);
  5754  02FC  3000               	movlw	0
  5755  02FD  319E  267E         	fcall	_setRF_Learn
  5756                           
  5757                           ;Switch_B1.c: 187: }
  5758                           ;Switch_B1.c: 188: }
  5759                           ;Switch_B1.c: 189: }
  5760                           ;Switch_B1.c: 190: }
  5761                           ;Switch_B1.c: 191: }
  5762                           ;Switch_B1.c: 192: } else {
  5763  02FF  0008               	return
  5764  0300                     l9618:	
  5765                           
  5766                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5767  0300  0877               	movf	_Sw,w
  5768  0301  0086               	movwf	6
  5769  0302  3001               	movlw	1	; select bank2/3
  5770  0303  0087               	movwf	7
  5771  0304  1D01               	btfss	1,2
  5772  0305  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5775  0306  3001               	movlw	1
  5776  0307  0020               	movlb	0	; select bank0
  5777  0308  00EB               	movwf	??_setSw_Main
  5778  0309  0877               	movf	_Sw,w
  5779  030A  3E02               	addlw	2
  5780  030B  0086               	movwf	6
  5781  030C  3001               	movlw	1	; select bank2/3
  5782  030D  0087               	movwf	7
  5783  030E  086B               	movf	??_setSw_Main,w
  5784  030F  0781               	addwf	1,f
  5785                           
  5786                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5787  0310  0877               	movf	_Sw,w
  5788  0311  3E02               	addlw	2
  5789  0312  0086               	movwf	6
  5790  0313  3001               	movlw	1	; select bank2/3
  5791  0314  0087               	movwf	7
  5792  0315  3005               	movlw	5
  5793  0316  0201               	subwf	1,w
  5794  0317  1C03               	skipc
  5795  0318  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5798  0319  0877               	movf	_Sw,w
  5799  031A  3E02               	addlw	2
  5800  031B  0086               	movwf	6
  5801  031C  3001               	movlw	1	; select bank2/3
  5802  031D  0087               	movwf	7
  5803  031E  0181               	clrf	1
  5804                           
  5805                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5806  031F  0877               	movf	_Sw,w
  5807  0320  0086               	movwf	6
  5808  0321  3001               	movlw	1	; select bank2/3
  5809  0322  0087               	movwf	7
  5810  0323  1101               	bcf	1,2
  5811                           
  5812                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5813  0324  0877               	movf	_Sw,w
  5814  0325  3E03               	addlw	3
  5815  0326  0086               	movwf	6
  5816  0327  3001               	movlw	1	; select bank2/3
  5817  0328  0087               	movwf	7
  5818  0329  3000               	movlw	0
  5819  032A  3FC0               	movwi [0]fsr1
  5820  032B  3FC1               	movwi [1]fsr1
  5821                           
  5822                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5823  032C  0877               	movf	_Sw,w
  5824  032D  0086               	movwf	6
  5825  032E  3001               	movlw	1	; select bank2/3
  5826  032F  0087               	movwf	7
  5827  0330  1181               	bcf	1,3
  5828                           
  5829                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5830  0331  0877               	movf	_Sw,w
  5831  0332  3E05               	addlw	5
  5832  0333  0086               	movwf	6
  5833  0334  3001               	movlw	1	; select bank2/3
  5834  0335  0087               	movwf	7
  5835  0336  3000               	movlw	0
  5836  0337  3FC0               	movwi [0]fsr1
  5837  0338  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5840  0339  0877               	movf	_Sw,w
  5841  033A  0086               	movwf	6
  5842  033B  3001               	movlw	1	; select bank2/3
  5843  033C  0087               	movwf	7
  5844  033D  1201               	bcf	1,4
  5845                           
  5846                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5847  033E  0877               	movf	_Sw,w
  5848  033F  3E07               	addlw	7
  5849  0340  0086               	movwf	6
  5850  0341  3001               	movlw	1	; select bank2/3
  5851  0342  0087               	movwf	7
  5852  0343  3000               	movlw	0
  5853  0344  3FC0               	movwi [0]fsr1
  5854  0345  3FC1               	movwi [1]fsr1
  5855                           
  5856                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5857  0346  0877               	movf	_Sw,w
  5858  0347  0086               	movwf	6
  5859  0348  3001               	movlw	1	; select bank2/3
  5860  0349  0087               	movwf	7
  5861  034A  1281               	bcf	1,5
  5862                           
  5863                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5864  034B  086D               	movf	setSw_Main@sw,w
  5865  034C  3195  2568  3181   	fcall	_setDimmerLights_SwOff
  5866                           
  5867                           ;Switch_B1.c: 209: setRF_Learn(0);
  5868  034F  3000               	movlw	0
  5869  0350  319E  267E         	fcall	_setRF_Learn
  5870                           
  5871                           ;Switch_B1.c: 211: }
  5872                           ;Switch_B1.c: 212: }
  5873                           ;Switch_B1.c: 213: }
  5874                           ;Switch_B1.c: 214: } else {
  5875  0352  0008               	return
  5876  0353                     l2412:	
  5877                           
  5878                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5879  0353  0021               	movlb	1	; select bank1
  5880  0354  1C20               	btfss	_myMain^(0+128),0
  5881  0355  0008               	return
  5882                           
  5883                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5884  0356  0877               	movf	_Sw,w
  5885  0357  0086               	movwf	6
  5886  0358  3001               	movlw	1	; select bank2/3
  5887  0359  0087               	movwf	7
  5888  035A  1401               	bsf	1,0
  5889  035B  0008               	return
  5890  035C                     __end_of_setSw_Main:	
  5891                           
  5892                           	psect	text14
  5893  1E7E                     __ptext14:	
  5894 ;; *************** function _setRF_Learn *****************
  5895 ;; Defined at:
  5896 ;;		line 23 in file "../src/RF_Control_B1.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  command         1    wreg     unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  command         1    1[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		Nothing
  5919 ;; This function is called by:
  5920 ;;		_setSw_Main
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _setRF_Learn
  5926  1E7E                     _setRF_Learn:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5930                           ;setRF_Learn@command stored from wreg
  5931  1E7E  0020               	movlb	0	; select bank0
  5932  1E7F  00A1               	movwf	setRF_Learn@command
  5933                           
  5934                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5935  1E80  0821               	movf	setRF_Learn@command,w
  5936  1E81  3A01               	xorlw	1
  5937  1E82  3000               	movlw	0
  5938  1E83  1903               	skipnz
  5939  1E84  3001               	movlw	1
  5940  1E85  00A0               	movwf	??_setRF_Learn
  5941  1E86  0EA0               	swapf	??_setRF_Learn,f
  5942  1E87  0DA0               	rlf	??_setRF_Learn,f
  5943  1E88  0DA0               	rlf	??_setRF_Learn,f
  5944  1E89  0021               	movlb	1	; select bank1
  5945  1E8A  083A               	movf	_RF1^(0+128),w
  5946  1E8B  0020               	movlb	0	; select bank0
  5947  1E8C  0620               	xorwf	??_setRF_Learn,w
  5948  1E8D  39BF               	andlw	-65
  5949  1E8E  0620               	xorwf	??_setRF_Learn,w
  5950  1E8F  0021               	movlb	1	; select bank1
  5951  1E90  00BA               	movwf	_RF1^(0+128)
  5952  1E91  0008               	return
  5953  1E92                     __end_of_setRF_Learn:	
  5954                           
  5955                           	psect	text15
  5956  1377                     __ptext15:	
  5957 ;; *************** function _setDimmerLights_AdjOn *****************
  5958 ;; Defined at:
  5959 ;;		line 477 in file "../src/Dimmer_B1.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  sw              1    wreg     unsigned char 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  sw              1    4[BANK0 ] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;		None               void
  5966 ;; Registers used:
  5967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;Total ram usage:        1 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    7
  5980 ;; This function calls:
  5981 ;;		_DimmerLightsPointSelect
  5982 ;;		_getDimmerLights_Allow_Condition
  5983 ;; This function is called by:
  5984 ;;		_setSw_Main
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           
  5989                           ;psect for function _setDimmerLights_AdjOn
  5990  1377                     _setDimmerLights_AdjOn:	
  5991                           
  5992                           ;incstack = 0
  5993                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5994                           ;setDimmerLights_AdjOn@sw stored from wreg
  5995  1377  0020               	movlb	0	; select bank0
  5996  1378  00A4               	movwf	setDimmerLights_AdjOn@sw
  5997                           
  5998                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  5999  1379  0824               	movf	setDimmerLights_AdjOn@sw,w
  6000  137A  319C  24D4  3193   	fcall	_DimmerLightsPointSelect
  6001                           
  6002                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6003  137D  0020               	movlb	0	; select bank0
  6004  137E  086F               	movf	_DimmerLights,w
  6005  137F  3E0A               	addlw	10
  6006  1380  0086               	movwf	6
  6007  1381  3001               	movlw	1	; select bank2/3
  6008  1382  0087               	movwf	7
  6009  1383  1881               	btfsc	1,1
  6010  1384  0008               	return
  6011  1385  0824               	movf	setDimmerLights_AdjOn@sw,w
  6012  1386  319E  26D1  3193   	fcall	_getDimmerLights_Allow_Condition
  6013  1389  3800               	iorlw	0
  6014  138A  1D03               	skipz
  6015  138B  0008               	return
  6016                           
  6017                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6018  138C  0020               	movlb	0	; select bank0
  6019  138D  086F               	movf	_DimmerLights,w
  6020  138E  3E0B               	addlw	11
  6021  138F  0086               	movwf	6
  6022  1390  3001               	movlw	1	; select bank2/3
  6023  1391  0087               	movwf	7
  6024  1392  1C81               	btfss	1,1
  6025  1393  0008               	return
  6026                           
  6027                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6028  1394  086F               	movf	_DimmerLights,w
  6029  1395  3E0B               	addlw	11
  6030  1396  0086               	movwf	6
  6031  1397  3001               	movlw	1	; select bank2/3
  6032  1398  0087               	movwf	7
  6033  1399  1501               	bsf	1,2
  6034                           
  6035                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6036  139A  086F               	movf	_DimmerLights,w
  6037  139B  3E02               	addlw	2
  6038  139C  0086               	movwf	6
  6039  139D  3001               	movlw	1	; select bank2/3
  6040  139E  0087               	movwf	7
  6041  139F  1481               	bsf	1,1
  6042                           
  6043                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6044  13A0  086F               	movf	_DimmerLights,w
  6045  13A1  3E0A               	addlw	10
  6046  13A2  0086               	movwf	6
  6047  13A3  3001               	movlw	1	; select bank2/3
  6048  13A4  0087               	movwf	7
  6049  13A5  1581               	bsf	1,3
  6050                           
  6051                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6052  13A6  086F               	movf	_DimmerLights,w
  6053  13A7  3E0A               	addlw	10
  6054  13A8  0086               	movwf	6
  6055  13A9  3001               	movlw	1	; select bank2/3
  6056  13AA  0087               	movwf	7
  6057  13AB  1501               	bsf	1,2
  6058  13AC  0008               	return
  6059  13AD                     __end_of_setDimmerLights_AdjOn:	
  6060                           
  6061                           	psect	text16
  6062  1DEC                     __ptext16:	
  6063 ;; *************** function _getSw_KeyStatus *****************
  6064 ;; Defined at:
  6065 ;;		line 222 in file "../src/Switch_B1.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  sw              1    wreg     unsigned char 
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  sw              1    0[COMMON] unsigned char 
  6070 ;;  status          1    1[BANK0 ] unsigned char 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      unsigned char 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;Total ram usage:        3 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    5
  6087 ;; This function calls:
  6088 ;;		Nothing
  6089 ;; This function is called by:
  6090 ;;		_setSw_Main
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           
  6095                           ;psect for function _getSw_KeyStatus
  6096  1DEC                     _getSw_KeyStatus:	
  6097                           
  6098                           ;Switch_B1.c: 223: char status = 0;
  6099                           
  6100                           ;incstack = 0
  6101                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6102  1DEC  0020               	movlb	0	; select bank0
  6103  1DED  01A1               	clrf	getSw_KeyStatus@status
  6104                           
  6105                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6106  1DEE  01A2               	clrf	_getSw_KeyStatus$6012
  6107  1DEF  0AA2               	incf	_getSw_KeyStatus$6012,f
  6108  1DF0  1F0C               	btfss	12,6	;volatile
  6109  1DF1  1A0C               	btfsc	12,4	;volatile
  6110  1DF2  2DF7               	goto	l9104
  6111  1DF3  1C0C               	btfss	12,0	;volatile
  6112  1DF4  1B8C               	btfsc	12,7	;volatile
  6113  1DF5  2DF7               	goto	l9104
  6114  1DF6  01A2               	clrf	_getSw_KeyStatus$6012
  6115  1DF7                     l9104:	
  6116  1DF7  0822               	movf	_getSw_KeyStatus$6012,w
  6117  1DF8  00A0               	movwf	??_getSw_KeyStatus
  6118  1DF9  0820               	movf	??_getSw_KeyStatus,w
  6119  1DFA  00A1               	movwf	getSw_KeyStatus@status
  6120                           
  6121                           ;Switch_B1.c: 246: return status;
  6122  1DFB  0821               	movf	getSw_KeyStatus@status,w
  6123  1DFC  0008               	return
  6124  1DFD                     __end_of_getSw_KeyStatus:	
  6125                           
  6126                           	psect	text17
  6127  1D00                     __ptext17:	
  6128 ;; *************** function _SwPointSelect *****************
  6129 ;; Defined at:
  6130 ;;		line 25 in file "../src/Switch_B1.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  sw              1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  sw              1    1[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;Total ram usage:        2 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    5
  6151 ;; This function calls:
  6152 ;;		Nothing
  6153 ;; This function is called by:
  6154 ;;		_setSw_Main
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _SwPointSelect
  6160  1D00                     _SwPointSelect:	
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in _SwPointSelect: [wreg]
  6164                           ;SwPointSelect@sw stored from wreg
  6165  1D00  0020               	movlb	0	; select bank0
  6166  1D01  00A1               	movwf	SwPointSelect@sw
  6167                           
  6168                           ;Switch_B1.c: 28: if (sw == 1) {
  6169  1D02  0821               	movf	SwPointSelect@sw,w
  6170  1D03  3A01               	xorlw	1
  6171  1D04  1D03               	skipz
  6172  1D05  0008               	return
  6173                           
  6174                           ;Switch_B1.c: 29: Sw = &Sw1;
  6175  1D06  30E3               	movlw	_Sw1& (0+255)
  6176  1D07  00A0               	movwf	??_SwPointSelect
  6177  1D08  0820               	movf	??_SwPointSelect,w
  6178  1D09  00F7               	movwf	_Sw
  6179  1D0A  0008               	return
  6180  1D0B                     __end_of_SwPointSelect:	
  6181                           
  6182                           	psect	text18
  6183  1C97                     __ptext18:	
  6184 ;; *************** function _Switch_Initialization *****************
  6185 ;; Defined at:
  6186 ;;		line 46 in file "../src/Switch_B1.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;		None
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;		None
  6191 ;; Return value:  Size  Location     Type
  6192 ;;		None               void
  6193 ;; Registers used:
  6194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;Total ram usage:        0 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    8
  6207 ;; This function calls:
  6208 ;;		_TouchPower
  6209 ;;		_setSw_Initialization
  6210 ;; This function is called by:
  6211 ;;		_main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _Switch_Initialization
  6217  1C97                     _Switch_Initialization:	
  6218                           
  6219                           ;Switch_B1.c: 47: TouchPower();
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6223  1C97  319E  26BC  319C   	fcall	_TouchPower
  6224                           
  6225                           ;Switch_B1.c: 49: WPUB1 = 0;
  6226  1C9A  0024               	movlb	4	; select bank4
  6227  1C9B  108D               	bcf	13,1	;volatile
  6228                           
  6229                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6230  1C9C  3001               	movlw	1
  6231  1C9D  319D  25A9         	fcall	_setSw_Initialization
  6232  1C9F  0008               	return
  6233  1CA0                     __end_of_Switch_Initialization:	
  6234                           
  6235                           	psect	text19
  6236  1DA9                     __ptext19:	
  6237 ;; *************** function _setSw_Initialization *****************
  6238 ;; Defined at:
  6239 ;;		line 93 in file "../src/Switch_B1.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  sw              1    wreg     unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  sw              1    4[BANK0 ] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        1 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    7
  6260 ;; This function calls:
  6261 ;;		_setLED
  6262 ;; This function is called by:
  6263 ;;		_Switch_Initialization
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function _setSw_Initialization
  6269  1DA9                     _setSw_Initialization:	
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6273                           ;setSw_Initialization@sw stored from wreg
  6274  1DA9  0020               	movlb	0	; select bank0
  6275  1DAA  00A4               	movwf	setSw_Initialization@sw
  6276                           
  6277                           ;Switch_B1.c: 94: setLED(sw, 1);
  6278  1DAB  01A2               	clrf	setLED@command
  6279  1DAC  0AA2               	incf	setLED@command,f
  6280  1DAD  0824               	movf	setSw_Initialization@sw,w
  6281  1DAE  3193  23E4  319D   	fcall	_setLED
  6282                           
  6283                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6284  1DB1  0020               	movlb	0	; select bank0
  6285  1DB2  01A2               	clrf	setLED@command
  6286  1DB3  0AA2               	incf	setLED@command,f
  6287  1DB4  0824               	movf	setSw_Initialization@sw,w
  6288  1DB5  3E01               	addlw	1
  6289  1DB6  3193  23E4         	fcall	_setLED
  6290  1DB8  0008               	return
  6291  1DB9                     __end_of_setSw_Initialization:	
  6292                           
  6293                           	psect	text20
  6294  1EBC                     __ptext20:	
  6295 ;; *************** function _TouchPower *****************
  6296 ;; Defined at:
  6297 ;;		line 10 in file "../src/Switch_B1.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;		None               void
  6304 ;; Registers used:
  6305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;Total ram usage:        0 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    6
  6318 ;; This function calls:
  6319 ;;		_Timeout_Counter
  6320 ;;		_set_TimeoutCleared
  6321 ;; This function is called by:
  6322 ;;		_Switch_Initialization
  6323 ;;		_Switch_Main
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _TouchPower
  6329  1EBC                     _TouchPower:	
  6330                           
  6331                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6335  1EBC  0021               	movlb	1	; select bank1
  6336  1EBD  1C20               	btfss	_myMain^(0+128),0
  6337  1EBE  0008               	return
  6338                           
  6339                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6340  1EBF  0020               	movlb	0	; select bank0
  6341  1EC0  180D               	btfsc	13,0	;volatile
  6342  1EC1  0008               	return
  6343  1EC2  2EC8               	goto	l9550
  6344  1EC3                     l2392:	
  6345                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6346                           
  6347                           
  6348                           ;Switch_B1.c: 14: RB0 = 1;
  6349  1EC3  0020               	movlb	0	; select bank0
  6350  1EC4  140D               	bsf	13,0	;volatile
  6351                           
  6352                           ;Switch_B1.c: 15: Timeout_Counter();
  6353  1EC5  319E  2692  319E   	fcall	_Timeout_Counter
  6354  1EC8                     l9550:	
  6355  1EC8  0020               	movlb	0	; select bank0
  6356  1EC9  180D               	btfsc	13,0	;volatile
  6357  1ECA  2ECE               	goto	l9554
  6358  1ECB  0021               	movlb	1	; select bank1
  6359  1ECC  1D2B               	btfss	(_myMain^(0+128)+11),2
  6360  1ECD  2EC3               	goto	l2392
  6361  1ECE                     l9554:	
  6362                           
  6363                           ;Switch_B1.c: 16: }
  6364                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6365  1ECE  319C  244F         	fcall	_set_TimeoutCleared
  6366  1ED0  0008               	return
  6367  1ED1                     __end_of_TouchPower:	
  6368                           
  6369                           	psect	text21
  6370  1C29                     __ptext21:	
  6371 ;; *************** function _RF_Main *****************
  6372 ;; Defined at:
  6373 ;;		line 16 in file "../src/RF_Control_B1.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;		None               void
  6380 ;; Registers used:
  6381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:   14
  6394 ;; This function calls:
  6395 ;;		_setRF_Main
  6396 ;; This function is called by:
  6397 ;;		_main
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           
  6402                           ;psect for function _RF_Main
  6403  1C29                     _RF_Main:	
  6404                           
  6405                           ;RF_Control_B1.c: 18: setRF_Main();
  6406                           
  6407                           ;incstack = 0
  6408                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6409  1C29  318C  248B         	fcall	_setRF_Main
  6410  1C2B  0008               	return
  6411  1C2C                     __end_of_RF_Main:	
  6412                           
  6413                           	psect	text22
  6414  0C8B                     __ptext22:	
  6415 ;; *************** function _setRF_Main *****************
  6416 ;; Defined at:
  6417 ;;		line 52 in file "../src/RF_Control_B1.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  error           1    2[BANK2 ] unsigned char 
  6422 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6423 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;		None               void
  6426 ;; Registers used:
  6427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;Total ram usage:        3 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:   13
  6440 ;; This function calls:
  6441 ;;		_CC2500_RxData
  6442 ;;		_CC2500_TxData
  6443 ;;		_CC2500_WriteCommand
  6444 ;;		_RF_RxDisable
  6445 ;;		_getBuz_GO
  6446 ;;		_getMain_All_Error_Status
  6447 ;;		_getRF_KeyStatus
  6448 ;;		_getRxData
  6449 ;; This function is called by:
  6450 ;;		_RF_Main
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _setRF_Main
  6456  0C8B                     _setRF_Main:	
  6457                           
  6458                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6459                           
  6460                           ;incstack = 0
  6461                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6462  0C8B  0022               	movlb	2	; select bank2
  6463  0C8C  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6464  0C8D  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6465  0C8E  01EF               	clrf	setRF_Main@error^(0+256)
  6466                           
  6467                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6468  0C8F  0021               	movlb	1	; select bank1
  6469  0C90  1C3A               	btfss	_RF1^(0+128),0
  6470  0C91  2D04               	goto	l2037
  6471                           
  6472                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6473  0C92  319D  25CA  318C   	fcall	_getBuz_GO
  6474  0C95  0020               	movlb	0	; select bank0
  6475  0C96  0821               	movf	?_getBuz_GO+1,w
  6476  0C97  0420               	iorwf	?_getBuz_GO,w
  6477  0C98  1D03               	skipz
  6478  0C99  0008               	return
  6479                           
  6480                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6481  0C9A  3000               	movlw	0
  6482  0C9B  3192  2270  318C   	fcall	_getMain_All_Error_Status
  6483  0C9E  3800               	iorlw	0
  6484  0C9F  1D03               	skipz
  6485  0CA0  2CB1               	goto	l9494
  6486                           
  6487                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6488  0CA1  319D  25DB  318C   	fcall	_getRF_KeyStatus
  6489  0CA4  3A01               	xorlw	1
  6490  0CA5  1D03               	skipz
  6491  0CA6  2CB1               	goto	l9494
  6492  0CA7  0021               	movlb	1	; select bank1
  6493  0CA8  1B3A               	btfsc	_RF1^(0+128),6
  6494  0CA9  2CB1               	goto	l9494
  6495                           
  6496                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6497  0CAA  01BC               	clrf	(_RF1^(0+128)+2)
  6498  0CAB  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6499                           
  6500                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6501  0CAC  14BB               	bsf	(_RF1^(0+128)+1),1
  6502                           
  6503                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6504  0CAD  3005               	movlw	5
  6505  0CAE  00C1               	movwf	(_RF1^(0+128)+7)
  6506  0CAF  3000               	movlw	0
  6507  0CB0  00C2               	movwf	(_RF1^(0+128)+8)
  6508  0CB1                     l9494:	
  6509                           
  6510                           ;RF_Control_B1.c: 74: }
  6511                           ;RF_Control_B1.c: 84: }
  6512                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6513  0CB1  0021               	movlb	1	; select bank1
  6514  0CB2  1B3A               	btfsc	_RF1^(0+128),6
  6515  0CB3  2CCA               	goto	l2041
  6516                           
  6517                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6518  0CB4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6519  0CB5  2CD0               	goto	l9510
  6520                           
  6521                           ;RF_Control_B1.c: 88: RF1.Count++;
  6522  0CB6  3001               	movlw	1
  6523  0CB7  07BC               	addwf	(_RF1^(0+128)+2),f
  6524  0CB8  3000               	movlw	0
  6525  0CB9  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6526                           
  6527                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6528  0CBA  3002               	movlw	2
  6529  0CBB  3EBA               	addlw	_RF1& (0+255)
  6530  0CBC  0086               	movwf	6
  6531  0CBD  0187               	clrf	7
  6532  0CBE  3F40               	moviw [0]fsr1
  6533  0CBF  0641               	xorwf	(_RF1^(0+128)+7),w
  6534  0CC0  1D03               	skipz
  6535  0CC1  2CC4               	goto	u10465
  6536  0CC2  3F41               	moviw [1]fsr1
  6537  0CC3  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6538  0CC4                     u10465:	
  6539  0CC4  1D03               	skipz
  6540  0CC5  2CD0               	goto	l9510
  6541                           
  6542                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6543  0CC6  01BC               	clrf	(_RF1^(0+128)+2)
  6544  0CC7  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6545                           
  6546                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6547  0CC8  10BB               	bcf	(_RF1^(0+128)+1),1
  6548                           
  6549                           ;RF_Control_B1.c: 92: }
  6550                           ;RF_Control_B1.c: 93: }
  6551                           ;RF_Control_B1.c: 94: } else {
  6552  0CC9  2CD0               	goto	l9510
  6553  0CCA                     l2041:	
  6554                           
  6555                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6556  0CCA  113A               	bcf	_RF1^(0+128),2
  6557                           
  6558                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6559  0CCB  1CBB               	btfss	(_RF1^(0+128)+1),1
  6560  0CCC  2CD0               	goto	l9510
  6561                           
  6562                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6563  0CCD  10BB               	bcf	(_RF1^(0+128)+1),1
  6564                           
  6565                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6566  0CCE  01BC               	clrf	(_RF1^(0+128)+2)
  6567  0CCF  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6568  0CD0                     l9510:	
  6569                           
  6570                           ;RF_Control_B1.c: 99: }
  6571                           ;RF_Control_B1.c: 100: }
  6572                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6573  0CD0  18BB               	btfsc	(_RF1^(0+128)+1),1
  6574  0CD1  0008               	return
  6575                           
  6576                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6577  0CD2  1D3A               	btfss	_RF1^(0+128),2
  6578  0CD3  2CE0               	goto	l2047
  6579                           
  6580                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6581  0CD4  113A               	bcf	_RF1^(0+128),2
  6582                           
  6583                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6584  0CD5  14BB               	bsf	(_RF1^(0+128)+1),1
  6585                           
  6586                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6587  0CD6  3005               	movlw	5
  6588  0CD7  00C1               	movwf	(_RF1^(0+128)+7)
  6589  0CD8  3000               	movlw	0
  6590  0CD9  00C2               	movwf	(_RF1^(0+128)+8)
  6591                           
  6592                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6593  0CDA  319E  2645  318C   	fcall	_RF_RxDisable
  6594                           
  6595                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6596  0CDD  318A  2274         	fcall	_CC2500_TxData
  6597                           
  6598                           ;RF_Control_B1.c: 110: } else {
  6599  0CDF  0008               	return
  6600  0CE0                     l2047:	
  6601                           
  6602                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6603  0CE0  1DBA               	btfss	_RF1^(0+128),3
  6604  0CE1  2CF5               	goto	l2049
  6605                           
  6606                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6607  0CE2  1FBA               	btfss	_RF1^(0+128),7
  6608  0CE3  2CE6               	goto	l9526
  6609  0CE4  1F3A               	btfss	_RF1^(0+128),6
  6610  0CE5  0008               	return
  6611  0CE6                     l9526:	
  6612                           
  6613                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6614  0CE6  318B  23A2  318C   	fcall	_CC2500_RxData
  6615                           
  6616                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6617  0CE9  0021               	movlb	1	; select bank1
  6618  0CEA  1CBA               	btfss	_RF1^(0+128),1
  6619  0CEB  0008               	return
  6620                           
  6621                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6622  0CEC  10BA               	bcf	_RF1^(0+128),1
  6623                           
  6624                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6625  0CED  14BB               	bsf	(_RF1^(0+128)+1),1
  6626                           
  6627                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6628  0CEE  3005               	movlw	5
  6629  0CEF  00C1               	movwf	(_RF1^(0+128)+7)
  6630  0CF0  3000               	movlw	0
  6631  0CF1  00C2               	movwf	(_RF1^(0+128)+8)
  6632                           
  6633                           ;RF_Control_B1.c: 127: getRxData();
  6634  0CF2  318C  2411         	fcall	_getRxData
  6635                           
  6636                           ;RF_Control_B1.c: 129: }
  6637                           ;RF_Control_B1.c: 130: }
  6638                           ;RF_Control_B1.c: 131: } else {
  6639  0CF4  0008               	return
  6640  0CF5                     l2049:	
  6641                           
  6642                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6643  0CF5  18BA               	btfsc	_RF1^(0+128),1
  6644  0CF6  0008               	return
  6645                           
  6646                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6647  0CF7  15BA               	bsf	_RF1^(0+128),3
  6648                           
  6649                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6650  0CF8  3036               	movlw	54
  6651  0CF9  319F  2700  318C   	fcall	_CC2500_WriteCommand
  6652                           
  6653                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6654  0CFC  303A               	movlw	58
  6655  0CFD  319F  2700  318C   	fcall	_CC2500_WriteCommand
  6656                           
  6657                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6658  0D00  3034               	movlw	52
  6659  0D01  319F  2700         	fcall	_CC2500_WriteCommand
  6660                           
  6661                           ;RF_Control_B1.c: 140: }
  6662                           ;RF_Control_B1.c: 142: }
  6663                           ;RF_Control_B1.c: 143: }
  6664                           ;RF_Control_B1.c: 144: }
  6665                           ;RF_Control_B1.c: 145: }
  6666                           ;RF_Control_B1.c: 146: } else {
  6667  0D03  0008               	return
  6668  0D04                     l2037:	
  6669                           
  6670                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6671  0D04  1C20               	btfss	_myMain^(0+128),0
  6672  0D05  0008               	return
  6673                           
  6674                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6675  0D06  143A               	bsf	_RF1^(0+128),0
  6676  0D07  0008               	return
  6677  0D08                     __end_of_setRF_Main:	
  6678                           
  6679                           	psect	text23
  6680  0C11                     __ptext23:	
  6681 ;; *************** function _getRxData *****************
  6682 ;; Defined at:
  6683 ;;		line 240 in file "../src/RF_Control_B1.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  error           1    4[BANK1 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        2 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:   12
  6704 ;; This function calls:
  6705 ;;		_getMain_All_Error_Status
  6706 ;;		_setControl_Lights_Table
  6707 ;;		_setLog_Code
  6708 ;;		_setTxData
  6709 ;; This function is called by:
  6710 ;;		_setRF_Main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function _getRxData
  6716  0C11                     _getRxData:	
  6717                           
  6718                           ;RF_Control_B1.c: 241: char error = getMain_All_Error_Status(0);
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6722  0C11  3000               	movlw	0
  6723  0C12  3192  2270  318C   	fcall	_getMain_All_Error_Status
  6724  0C15  0020               	movlb	0	; select bank0
  6725  0C16  00EE               	movwf	??_getRxData
  6726  0C17  086E               	movf	??_getRxData,w
  6727  0C18  0021               	movlb	1	; select bank1
  6728  0C19  00ED               	movwf	getRxData@error^(0+128)
  6729                           
  6730                           ;RF_Control_B1.c: 242: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6731  0C1A  0023               	movlb	3	; select bank3
  6732  0C1B  0820               	movf	_RF_Data^(0+384),w
  6733  0C1C  3AAA               	xorlw	170
  6734  0C1D  1D03               	skipz
  6735  0C1E  2C30               	goto	l9044
  6736  0C1F  0821               	movf	(_RF_Data^(0+384)+1),w
  6737  0C20  3A01               	xorlw	1
  6738  0C21  1D03               	skipz
  6739  0C22  2C30               	goto	l9044
  6740                           
  6741                           ;RF_Control_B1.c: 244: product->Data[2] = 0x55;
  6742  0C23  3055               	movlw	85
  6743  0C24  0020               	movlb	0	; select bank0
  6744  0C25  00EE               	movwf	??_getRxData
  6745  0C26  0879               	movf	_product,w
  6746  0C27  3E02               	addlw	2
  6747  0C28  0086               	movwf	6
  6748  0C29  3002               	movlw	2	; select bank4/5
  6749  0C2A  0087               	movwf	7
  6750  0C2B  086E               	movf	??_getRxData,w
  6751  0C2C  0081               	movwf	1
  6752                           
  6753                           ;RF_Control_B1.c: 245: setTxData();
  6754  0C2D  318E  2610         	fcall	_setTxData
  6755                           
  6756                           ;RF_Control_B1.c: 251: } else {
  6757  0C2F  0008               	return
  6758  0C30                     l9044:	
  6759                           
  6760                           ;RF_Control_B1.c: 253: if (error == 0) {
  6761  0C30  0021               	movlb	1	; select bank1
  6762  0C31  08ED               	movf	getRxData@error^(0+128),f
  6763  0C32  1D03               	skipz
  6764  0C33  0008               	return
  6765                           
  6766                           ;RF_Control_B1.c: 254: if (RF1.Learn == 1) {
  6767  0C34  1F3A               	btfss	_RF1^(0+128),6
  6768  0C35  2C41               	goto	l9054
  6769                           
  6770                           ;RF_Control_B1.c: 255: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6771  0C36  0023               	movlb	3	; select bank3
  6772  0C37  08A0               	movf	_RF_Data^(0+384),f
  6773  0C38  1D03               	skipz
  6774  0C39  0008               	return
  6775  0C3A  0821               	movf	(_RF_Data^(0+384)+1),w
  6776  0C3B  3A64               	xorlw	100
  6777  0C3C  1D03               	skipz
  6778  0C3D  0008               	return
  6779                           
  6780                           ;RF_Control_B1.c: 256: setLog_Code();
  6781  0C3E  3192  22D7         	fcall	_setLog_Code
  6782                           
  6783                           ;RF_Control_B1.c: 257: }
  6784                           ;RF_Control_B1.c: 258: } else {
  6785  0C40  0008               	return
  6786  0C41                     l9054:	
  6787                           
  6788                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6789  0C41  0023               	movlb	3	; select bank3
  6790  0C42  08A0               	movf	_RF_Data^(0+384),f
  6791  0C43  1D03               	skipz
  6792  0C44  2C76               	goto	l9074
  6793  0C45  0821               	movf	(_RF_Data^(0+384)+1),w
  6794  0C46  3A02               	xorlw	2
  6795  0C47  1D03               	skipz
  6796  0C48  2C76               	goto	l9074
  6797                           
  6798                           ;RF_Control_B1.c: 261: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6799  0C49  082C               	movf	(_RF_Data^(0+384)+12),w
  6800  0C4A  3AFF               	xorlw	255
  6801  0C4B  1D03               	skipz
  6802  0C4C  2C57               	goto	l9066
  6803  0C4D  082D               	movf	(_RF_Data^(0+384)+13),w
  6804  0C4E  3AFF               	xorlw	255
  6805  0C4F  1D03               	skipz
  6806  0C50  2C57               	goto	l9066
  6807  0C51  082E               	movf	(_RF_Data^(0+384)+14),w
  6808  0C52  3AFF               	xorlw	255
  6809  0C53  1D03               	skipz
  6810  0C54  2C57               	goto	l9066
  6811                           
  6812                           ;RF_Control_B1.c: 262: __nop();
  6813  0C55  0000               	nop
  6814                           
  6815                           ;RF_Control_B1.c: 263: } else {
  6816  0C56  0008               	return
  6817  0C57                     l9066:	
  6818                           
  6819                           ;RF_Control_B1.c: 264: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6820  0C57  0879               	movf	_product,w
  6821  0C58  3E0C               	addlw	12
  6822  0C59  0086               	movwf	6
  6823  0C5A  3002               	movlw	2	; select bank4/5
  6824  0C5B  0087               	movwf	7
  6825  0C5C  0023               	movlb	3	; select bank3
  6826  0C5D  082C               	movf	(_RF_Data^(0+384)+12),w
  6827  0C5E  0601               	xorwf	1,w
  6828  0C5F  1D03               	skipz
  6829  0C60  0008               	return
  6830  0C61  0879               	movf	_product,w
  6831  0C62  3E0D               	addlw	13
  6832  0C63  0086               	movwf	6
  6833  0C64  3002               	movlw	2	; select bank4/5
  6834  0C65  0087               	movwf	7
  6835  0C66  082D               	movf	(_RF_Data^(0+384)+13),w
  6836  0C67  0601               	xorwf	1,w
  6837  0C68  1D03               	skipz
  6838  0C69  0008               	return
  6839  0C6A  0879               	movf	_product,w
  6840  0C6B  3E0E               	addlw	14
  6841  0C6C  0086               	movwf	6
  6842  0C6D  3002               	movlw	2	; select bank4/5
  6843  0C6E  0087               	movwf	7
  6844  0C6F  082E               	movf	(_RF_Data^(0+384)+14),w
  6845  0C70  0601               	xorwf	1,w
  6846  0C71  1D03               	skipz
  6847  0C72  0008               	return
  6848                           
  6849                           ;RF_Control_B1.c: 265: setControl_Lights_Table();
  6850  0C73  3189  21B4         	fcall	_setControl_Lights_Table
  6851                           
  6852                           ;RF_Control_B1.c: 266: }
  6853                           ;RF_Control_B1.c: 267: }
  6854                           ;RF_Control_B1.c: 268: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6855  0C75  0008               	return
  6856  0C76                     l9074:	
  6857  0C76  0023               	movlb	3	; select bank3
  6858  0C77  0820               	movf	_RF_Data^(0+384),w
  6859  0C78  3AFF               	xorlw	255
  6860  0C79  1D03               	skipz
  6861  0C7A  2C81               	goto	l9080
  6862  0C7B  0821               	movf	(_RF_Data^(0+384)+1),w
  6863  0C7C  3A02               	xorlw	2
  6864  0C7D  1D03               	skipz
  6865  0C7E  2C81               	goto	l9080
  6866                           
  6867                           ;RF_Control_B1.c: 269: __nop();
  6868  0C7F  0000               	nop
  6869                           
  6870                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6871  0C80  0008               	return
  6872  0C81                     l9080:	
  6873  0C81  0023               	movlb	3	; select bank3
  6874  0C82  08A0               	movf	_RF_Data^(0+384),f
  6875  0C83  1D03               	skipz
  6876  0C84  0008               	return
  6877  0C85  0821               	movf	(_RF_Data^(0+384)+1),w
  6878  0C86  3A65               	xorlw	101
  6879  0C87  1D03               	skipz
  6880  0C88  0008               	return
  6881                           
  6882                           ;RF_Control_B1.c: 271: __nop();
  6883  0C89  0000               	nop
  6884                           
  6885                           ;RF_Control_B1.c: 278: ;
  6886                           
  6887                           ;RF_Control_B1.c: 272: }
  6888                           ;RF_Control_B1.c: 276: }
  6889                           ;RF_Control_B1.c: 277: } else {
  6890  0C8A  0008               	return
  6891  0C8B                     __end_of_getRxData:	
  6892                           
  6893                           	psect	text24
  6894  12D7                     __ptext24:	
  6895 ;; *************** function _setLog_Code *****************
  6896 ;; Defined at:
  6897 ;;		line 284 in file "../src/RF_Control_B1.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;		None
  6902 ;; Return value:  Size  Location     Type
  6903 ;;		None               void
  6904 ;; Registers used:
  6905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;Total ram usage:        1 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    7
  6918 ;; This function calls:
  6919 ;;		_setBuz
  6920 ;;		_setMemory_LoopSave
  6921 ;;		_setMemory_Modify
  6922 ;;		_setProductData
  6923 ;; This function is called by:
  6924 ;;		_getRxData
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           
  6929                           ;psect for function _setLog_Code
  6930  12D7                     _setLog_Code:	
  6931                           
  6932                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  6933                           
  6934                           ;incstack = 0
  6935                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6936  12D7  0021               	movlb	1	; select bank1
  6937  12D8  133A               	bcf	_RF1^(0+128),6
  6938                           
  6939                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  6940  12D9  0023               	movlb	3	; select bank3
  6941  12DA  082C               	movf	(_RF_Data^(0+384)+12),w
  6942  12DB  0020               	movlb	0	; select bank0
  6943  12DC  00E6               	movwf	??_setLog_Code
  6944  12DD  0866               	movf	??_setLog_Code,w
  6945  12DE  00E2               	movwf	setProductData@value
  6946  12DF  300C               	movlw	12
  6947  12E0  319D  255F  3192   	fcall	_setProductData
  6948                           
  6949                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  6950  12E3  0023               	movlb	3	; select bank3
  6951  12E4  082D               	movf	(_RF_Data^(0+384)+13),w
  6952  12E5  0020               	movlb	0	; select bank0
  6953  12E6  00E6               	movwf	??_setLog_Code
  6954  12E7  0866               	movf	??_setLog_Code,w
  6955  12E8  00E2               	movwf	setProductData@value
  6956  12E9  300D               	movlw	13
  6957  12EA  319D  255F  3192   	fcall	_setProductData
  6958                           
  6959                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  6960  12ED  0023               	movlb	3	; select bank3
  6961  12EE  082E               	movf	(_RF_Data^(0+384)+14),w
  6962  12EF  0020               	movlb	0	; select bank0
  6963  12F0  00E6               	movwf	??_setLog_Code
  6964  12F1  0866               	movf	??_setLog_Code,w
  6965  12F2  00E2               	movwf	setProductData@value
  6966  12F3  300E               	movlw	14
  6967  12F4  319D  255F  3192   	fcall	_setProductData
  6968                           
  6969                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  6970  12F7  3064               	movlw	100
  6971  12F8  0020               	movlb	0	; select bank0
  6972  12F9  00A9               	movwf	setBuz@time
  6973  12FA  3000               	movlw	0
  6974  12FB  00AA               	movwf	setBuz@time+1
  6975  12FC  3001               	movlw	1
  6976  12FD  3197  27A7  3192   	fcall	_setBuz
  6977                           
  6978                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  6979  1300  0021               	movlb	1	; select bank1
  6980  1301  1EA0               	btfss	_myMain^(0+128),5
  6981  1302  2B07               	goto	l2098
  6982                           
  6983                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  6984  1303  3001               	movlw	1
  6985  1304  319E  266B  3192   	fcall	_setMemory_LoopSave
  6986  1307                     l2098:	
  6987                           
  6988                           ;RF_Control_B1.c: 292: }
  6989                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  6990  1307  3001               	movlw	1
  6991  1308  319E  2658         	fcall	_setMemory_Modify
  6992  130A  0008               	return
  6993  130B                     __end_of_setLog_Code:	
  6994                           
  6995                           	psect	text25
  6996  1E6B                     __ptext25:	
  6997 ;; *************** function _setMemory_LoopSave *****************
  6998 ;; Defined at:
  6999 ;;		line 1071 in file "../src/MCU_B1.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  command         1    wreg     unsigned char 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  command         1    1[BANK0 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        2 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    5
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_setLog_Code
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function _setMemory_LoopSave
  7029  1E6B                     _setMemory_LoopSave:	
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7033                           ;setMemory_LoopSave@command stored from wreg
  7034  1E6B  0020               	movlb	0	; select bank0
  7035  1E6C  00A1               	movwf	setMemory_LoopSave@command
  7036                           
  7037                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7038  1E6D  0821               	movf	setMemory_LoopSave@command,w
  7039  1E6E  3A01               	xorlw	1
  7040  1E6F  3000               	movlw	0
  7041  1E70  1903               	skipnz
  7042  1E71  3001               	movlw	1
  7043  1E72  00A0               	movwf	??_setMemory_LoopSave
  7044  1E73  0DA0               	rlf	??_setMemory_LoopSave,f
  7045  1E74  0DA0               	rlf	??_setMemory_LoopSave,f
  7046  1E75  0023               	movlb	3	; select bank3
  7047  1E76  0862               	movf	(_Memory^(0+384)+36),w
  7048  1E77  0020               	movlb	0	; select bank0
  7049  1E78  0620               	xorwf	??_setMemory_LoopSave,w
  7050  1E79  39FB               	andlw	-5
  7051  1E7A  0620               	xorwf	??_setMemory_LoopSave,w
  7052  1E7B  0023               	movlb	3	; select bank3
  7053  1E7C  00E2               	movwf	(_Memory^(0+384)+36)
  7054  1E7D  0008               	return
  7055  1E7E                     __end_of_setMemory_LoopSave:	
  7056                           
  7057                           	psect	text26
  7058  09B4                     __ptext26:	
  7059 ;; *************** function _setControl_Lights_Table *****************
  7060 ;; Defined at:
  7061 ;;		line 297 in file "../src/RF_Control_B1.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;		None
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;		None
  7066 ;; Return value:  Size  Location     Type
  7067 ;;		None               void
  7068 ;; Registers used:
  7069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;Total ram usage:        0 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:   11
  7082 ;; This function calls:
  7083 ;;		_setBuz
  7084 ;;		_setDimmerLights_ErrorClose
  7085 ;;		_setProductData
  7086 ;;		_setRFSW_AdjControl
  7087 ;;		_setRFSW_Control
  7088 ;;		_setTxData
  7089 ;; This function is called by:
  7090 ;;		_getRxData
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _setControl_Lights_Table
  7096  09B4                     _setControl_Lights_Table:	
  7097                           
  7098                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7102  09B4  29F7               	goto	l8734
  7103  09B5                     l8722:	
  7104                           ;RF_Control_B1.c: 299: case 0x00:
  7105                           
  7106                           
  7107                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7108  09B5  30FF               	movlw	255
  7109  09B6  3189  2156  3189   	fcall	_setDimmerLights_ErrorClose
  7110                           
  7111                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7112  09B9  0020               	movlb	0	; select bank0
  7113  09BA  01E2               	clrf	setProductData@value
  7114  09BB  3009               	movlw	9
  7115  09BC  319D  255F  3189   	fcall	_setProductData
  7116                           
  7117                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7118  09BF  0020               	movlb	0	; select bank0
  7119  09C0  01E2               	clrf	setProductData@value
  7120  09C1  300B               	movlw	11
  7121  09C2  319D  255F  3189   	fcall	_setProductData
  7122                           
  7123                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7124  09C5  0020               	movlb	0	; select bank0
  7125  09C6  01E2               	clrf	setProductData@value
  7126  09C7  300F               	movlw	15
  7127  09C8  319D  255F  3189   	fcall	_setProductData
  7128                           
  7129                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7130  09CB  0020               	movlb	0	; select bank0
  7131  09CC  01E2               	clrf	setProductData@value
  7132  09CD  3011               	movlw	17
  7133  09CE  319D  255F  3189   	fcall	_setProductData
  7134                           
  7135                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7136  09D1  3064               	movlw	100
  7137  09D2  0020               	movlb	0	; select bank0
  7138  09D3  00A9               	movwf	setBuz@time
  7139  09D4  3000               	movlw	0
  7140  09D5  00AA               	movwf	setBuz@time+1
  7141  09D6  3001               	movlw	1
  7142  09D7  3197  27A7         	fcall	_setBuz
  7143                           
  7144                           ;RF_Control_B1.c: 309: break;
  7145  09D9  0008               	return
  7146  09DA                     l8726:	
  7147                           ;RF_Control_B1.c: 310: case 0x20:
  7148                           
  7149                           
  7150                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7151  09DA  0020               	movlb	0	; select bank0
  7152  09DB  01E2               	clrf	setProductData@value
  7153  09DC  3009               	movlw	9
  7154  09DD  319D  255F  3189   	fcall	_setProductData
  7155                           
  7156                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7157  09E0  0020               	movlb	0	; select bank0
  7158  09E1  01E2               	clrf	setProductData@value
  7159  09E2  300B               	movlw	11
  7160  09E3  319D  255F  3189   	fcall	_setProductData
  7161                           
  7162                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7163  09E6  0020               	movlb	0	; select bank0
  7164  09E7  01E2               	clrf	setProductData@value
  7165  09E8  3011               	movlw	17
  7166  09E9  319D  255F  3189   	fcall	_setProductData
  7167                           
  7168                           ;RF_Control_B1.c: 314: setTxData();
  7169  09EC  318E  2610         	fcall	_setTxData
  7170                           
  7171                           ;RF_Control_B1.c: 315: break;
  7172  09EE  0008               	return
  7173  09EF                     l8728:	
  7174                           ;RF_Control_B1.c: 316: case 0x01:
  7175                           
  7176                           
  7177                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7178  09EF  3001               	movlw	1
  7179  09F0  3195  25B7         	fcall	_setRFSW_Control
  7180                           
  7181                           ;RF_Control_B1.c: 330: break;
  7182                           
  7183                           ;RF_Control_B1.c: 326: case 0x03:
  7184                           
  7185                           ;RF_Control_B1.c: 325: break;
  7186                           
  7187                           ;RF_Control_B1.c: 321: case 0x02:
  7188                           
  7189                           ;RF_Control_B1.c: 320: break;
  7190  09F2  0008               	return
  7191  09F3                     l8730:	
  7192                           ;RF_Control_B1.c: 331: case 0x11:
  7193                           
  7194                           
  7195                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7196  09F3  3001               	movlw	1
  7197  09F4  3194  2492         	fcall	_setRFSW_AdjControl
  7198                           
  7199                           ;RF_Control_B1.c: 352: }
  7200                           
  7201                           ;RF_Control_B1.c: 351: break;
  7202                           
  7203                           ;RF_Control_B1.c: 345: case 0x31:
  7204                           
  7205                           ;RF_Control_B1.c: 344: break;
  7206                           
  7207                           ;RF_Control_B1.c: 338: case 0x21:
  7208                           
  7209                           ;RF_Control_B1.c: 337: break;
  7210  09F6  0008               	return
  7211  09F7                     l8734:	
  7212  09F7  0023               	movlb	3	; select bank3
  7213  09F8  082F               	movf	(_RF_Data^(0+384)+15),w
  7214                           
  7215                           ; Switch size 1, requested type "space"
  7216                           ; Number of cases is 8, Range of values is 0 to 49
  7217                           ; switch strategies available:
  7218                           ; Name         Instructions Cycles
  7219                           ; simple_byte           25    13 (average)
  7220                           ; direct_byte          106     6 (fixed)
  7221                           ; jumptable            260     6 (fixed)
  7222                           ;	Chosen strategy is simple_byte
  7223  09F9  3A00               	xorlw	0	; case 0
  7224  09FA  1903               	skipnz
  7225  09FB  29B5               	goto	l8722
  7226  09FC  3A01               	xorlw	1	; case 1
  7227  09FD  1903               	skipnz
  7228  09FE  29EF               	goto	l8728
  7229  09FF  3A03               	xorlw	3	; case 2
  7230  0A00  1903               	skipnz
  7231  0A01  2A12               	goto	l2112
  7232  0A02  3A01               	xorlw	1	; case 3
  7233  0A03  1903               	skipnz
  7234  0A04  2A12               	goto	l2112
  7235  0A05  3A12               	xorlw	18	; case 17
  7236  0A06  1903               	skipnz
  7237  0A07  29F3               	goto	l8730
  7238  0A08  3A31               	xorlw	49	; case 32
  7239  0A09  1903               	skipnz
  7240  0A0A  29DA               	goto	l8726
  7241  0A0B  3A01               	xorlw	1	; case 33
  7242  0A0C  1903               	skipnz
  7243  0A0D  2A12               	goto	l2112
  7244  0A0E  3A10               	xorlw	16	; case 49
  7245  0A0F  1903               	skipnz
  7246  0A10  2A12               	goto	l2112
  7247  0A11  2A12               	goto	l2112
  7248  0A12                     l2112:	
  7249  0A12  0008               	return
  7250  0A13                     __end_of_setControl_Lights_Table:	
  7251                           
  7252                           	psect	text27
  7253  15B7                     __ptext27:	
  7254 ;; *************** function _setRFSW_Control *****************
  7255 ;; Defined at:
  7256 ;;		line 379 in file "../src/RF_Control_B1.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  sw              1    wreg     unsigned char 
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;  sw              1   77[BANK0 ] unsigned char 
  7261 ;;  status          1   76[BANK0 ] unsigned char 
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;Total ram usage:        3 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    9
  7278 ;; This function calls:
  7279 ;;		_getDelayOff_GO
  7280 ;;		_getDimmerLights_Status
  7281 ;;		_setBuz
  7282 ;;		_setDelayOff_GO
  7283 ;;		_setDimmerLights_SwOff
  7284 ;;		_setDimmerLights_SwOn
  7285 ;;		_setRF_DimmerLights
  7286 ;;		_setTxData
  7287 ;; This function is called by:
  7288 ;;		_setControl_Lights_Table
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _setRFSW_Control
  7294  15B7                     _setRFSW_Control:	
  7295                           
  7296                           ;incstack = 0
  7297                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7298                           ;setRFSW_Control@sw stored from wreg
  7299  15B7  0020               	movlb	0	; select bank0
  7300  15B8  00ED               	movwf	setRFSW_Control@sw
  7301                           
  7302                           ;RF_Control_B1.c: 380: char status = 0;
  7303  15B9  01EC               	clrf	setRFSW_Control@status
  7304                           
  7305                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7306  15BA  0023               	movlb	3	; select bank3
  7307  15BB  0830               	movf	(_RF_Data^(0+384)+16),w
  7308  15BC  3A80               	xorlw	128
  7309  15BD  1D03               	skipz
  7310  15BE  2DEA               	goto	l8566
  7311                           
  7312                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7313  15BF  0020               	movlb	0	; select bank0
  7314  15C0  01E6               	clrf	setDelayOff_GO@command
  7315  15C1  0AE6               	incf	setDelayOff_GO@command,f
  7316  15C2  0023               	movlb	3	; select bank3
  7317  15C3  0831               	movf	(_RF_Data^(0+384)+17),w
  7318  15C4  0020               	movlb	0	; select bank0
  7319  15C5  00EB               	movwf	??_setRFSW_Control
  7320  15C6  086B               	movf	??_setRFSW_Control,w
  7321  15C7  00E7               	movwf	setDelayOff_GO@value
  7322  15C8  086D               	movf	setRFSW_Control@sw,w
  7323  15C9  3196  26A8  3195   	fcall	_setDelayOff_GO
  7324                           
  7325                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7326  15CC  0020               	movlb	0	; select bank0
  7327  15CD  086D               	movf	setRFSW_Control@sw,w
  7328  15CE  319D  25B9  3195   	fcall	_getDimmerLights_Status
  7329  15D1  3A01               	xorlw	1
  7330  15D2  1D03               	skipz
  7331  15D3  2DF9               	goto	l8570
  7332                           
  7333                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7334  15D4  3064               	movlw	100
  7335  15D5  0020               	movlb	0	; select bank0
  7336  15D6  00A9               	movwf	setBuz@time
  7337  15D7  3000               	movlw	0
  7338  15D8  00AA               	movwf	setBuz@time+1
  7339  15D9  3001               	movlw	1
  7340  15DA  3197  27A7  3195   	fcall	_setBuz
  7341                           
  7342                           ;RF_Control_B1.c: 387: status = 1;
  7343  15DD  0020               	movlb	0	; select bank0
  7344  15DE  01EC               	clrf	setRFSW_Control@status
  7345  15DF  0AEC               	incf	setRFSW_Control@status,f
  7346                           
  7347                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7348  15E0  01E6               	clrf	setRF_DimmerLights@on
  7349  15E1  0AE6               	incf	setRF_DimmerLights@on,f
  7350  15E2  086D               	movf	setRFSW_Control@sw,w
  7351  15E3  3188  2045  3195   	fcall	_setRF_DimmerLights
  7352                           
  7353                           ;RF_Control_B1.c: 389: setTxData();
  7354  15E6  318E  2610  3195   	fcall	_setTxData
  7355                           
  7356                           ;RF_Control_B1.c: 390: }
  7357                           ;RF_Control_B1.c: 391: } else {
  7358  15E9  2DF9               	goto	l8570
  7359  15EA                     l8566:	
  7360                           
  7361                           ;RF_Control_B1.c: 393: if (getDelayOff_GO(sw) == 1) {
  7362  15EA  0020               	movlb	0	; select bank0
  7363  15EB  086D               	movf	setRFSW_Control@sw,w
  7364  15EC  319D  2599  3195   	fcall	_getDelayOff_GO
  7365  15EF  3A01               	xorlw	1
  7366  15F0  1D03               	skipz
  7367  15F1  2DF9               	goto	l8570
  7368                           
  7369                           ;RF_Control_B1.c: 394: setDelayOff_GO(sw, 0, 0);
  7370  15F2  0020               	movlb	0	; select bank0
  7371  15F3  01E6               	clrf	setDelayOff_GO@command
  7372  15F4  01E7               	clrf	setDelayOff_GO@value
  7373  15F5  086D               	movf	setRFSW_Control@sw,w
  7374  15F6  3196  26A8  3195   	fcall	_setDelayOff_GO
  7375  15F9                     l8570:	
  7376                           
  7377                           ;RF_Control_B1.c: 395: }
  7378                           ;RF_Control_B1.c: 397: }
  7379                           ;RF_Control_B1.c: 398: if (status == 0) {
  7380  15F9  0020               	movlb	0	; select bank0
  7381  15FA  08EC               	movf	setRFSW_Control@status,f
  7382  15FB  1D03               	skipz
  7383  15FC  0008               	return
  7384                           
  7385                           ;RF_Control_B1.c: 400: setDimmerLights_SwOn(sw);
  7386  15FD  086D               	movf	setRFSW_Control@sw,w
  7387  15FE  3194  241D  3195   	fcall	_setDimmerLights_SwOn
  7388                           
  7389                           ;RF_Control_B1.c: 401: setDimmerLights_SwOff(sw);
  7390  1601  0020               	movlb	0	; select bank0
  7391  1602  086D               	movf	setRFSW_Control@sw,w
  7392  1603  3195  2568         	fcall	_setDimmerLights_SwOff
  7393  1605  0008               	return
  7394  1606                     __end_of_setRFSW_Control:	
  7395                           
  7396                           	psect	text28
  7397  141D                     __ptext28:	
  7398 ;; *************** function _setDimmerLights_SwOn *****************
  7399 ;; Defined at:
  7400 ;;		line 405 in file "../src/Dimmer_B1.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  sw              1    wreg     unsigned char 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  sw              1   13[BANK0 ] unsigned char 
  7405 ;;  idle            1   14[BANK0 ] unsigned char 
  7406 ;; Return value:  Size  Location     Type
  7407 ;;		None               void
  7408 ;; Registers used:
  7409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;Total ram usage:        2 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    7
  7422 ;; This function calls:
  7423 ;;		_DimmerLightsPointSelect
  7424 ;;		_setBuz
  7425 ;; This function is called by:
  7426 ;;		_setRFSW_Control
  7427 ;;		_setSw_Main
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           
  7432                           ;psect for function _setDimmerLights_SwOn
  7433  141D                     _setDimmerLights_SwOn:	
  7434                           
  7435                           ;incstack = 0
  7436                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7437                           ;setDimmerLights_SwOn@sw stored from wreg
  7438  141D  0020               	movlb	0	; select bank0
  7439  141E  00AD               	movwf	setDimmerLights_SwOn@sw
  7440                           
  7441                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7442  141F  082D               	movf	setDimmerLights_SwOn@sw,w
  7443  1420  319C  24D4  3194   	fcall	_DimmerLightsPointSelect
  7444                           
  7445                           ;Dimmer_B1.c: 407: char idle = 0;
  7446  1423  0020               	movlb	0	; select bank0
  7447  1424  01AE               	clrf	setDimmerLights_SwOn@idle
  7448                           
  7449                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7450  1425  08AE               	movf	setDimmerLights_SwOn@idle,f
  7451  1426  1D03               	skipz
  7452  1427  0008               	return
  7453                           
  7454                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7455  1428  086F               	movf	_DimmerLights,w
  7456  1429  3E0B               	addlw	11
  7457  142A  0086               	movwf	6
  7458  142B  3001               	movlw	1	; select bank2/3
  7459  142C  0087               	movwf	7
  7460  142D  1481               	bsf	1,1
  7461                           
  7462                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7463  142E  086F               	movf	_DimmerLights,w
  7464  142F  3E02               	addlw	2
  7465  1430  0086               	movwf	6
  7466  1431  3001               	movlw	1	; select bank2/3
  7467  1432  0087               	movwf	7
  7468  1433  1881               	btfsc	1,1
  7469  1434  2C48               	goto	l8364
  7470                           
  7471                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7472  1435  086F               	movf	_DimmerLights,w
  7473  1436  3E02               	addlw	2
  7474  1437  0086               	movwf	6
  7475  1438  3001               	movlw	1	; select bank2/3
  7476  1439  0087               	movwf	7
  7477  143A  1481               	bsf	1,1
  7478                           
  7479                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7480  143B  086F               	movf	_DimmerLights,w
  7481  143C  3E0A               	addlw	10
  7482  143D  0086               	movwf	6
  7483  143E  3001               	movlw	1	; select bank2/3
  7484  143F  0087               	movwf	7
  7485  1440  1481               	bsf	1,1
  7486                           
  7487                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7488  1441  086F               	movf	_DimmerLights,w
  7489  1442  3E0A               	addlw	10
  7490  1443  0086               	movwf	6
  7491  1444  3001               	movlw	1	; select bank2/3
  7492  1445  0087               	movwf	7
  7493  1446  1401               	bsf	1,0
  7494                           
  7495                           ;Dimmer_B1.c: 442: } else {
  7496  1447  2C4E               	goto	l8366
  7497  1448                     l8364:	
  7498                           
  7499                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7500  1448  086F               	movf	_DimmerLights,w
  7501  1449  3E02               	addlw	2
  7502  144A  0086               	movwf	6
  7503  144B  3001               	movlw	1	; select bank2/3
  7504  144C  0087               	movwf	7
  7505  144D  1081               	bcf	1,1
  7506  144E                     l8366:	
  7507                           
  7508                           ;Dimmer_B1.c: 444: }
  7509                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7510  144E  3064               	movlw	100
  7511  144F  00A9               	movwf	setBuz@time
  7512  1450  3000               	movlw	0
  7513  1451  00AA               	movwf	setBuz@time+1
  7514  1452  3001               	movlw	1
  7515  1453  3197  27A7         	fcall	_setBuz
  7516  1455  0008               	return
  7517  1456                     __end_of_setDimmerLights_SwOn:	
  7518                           
  7519                           	psect	text29
  7520  1492                     __ptext29:	
  7521 ;; *************** function _setRFSW_AdjControl *****************
  7522 ;; Defined at:
  7523 ;;		line 407 in file "../src/RF_Control_B1.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  sw              1    wreg     unsigned char 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  sw              1   75[BANK0 ] unsigned char 
  7528 ;;  status          1   74[BANK0 ] unsigned char 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;Total ram usage:        4 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:   10
  7545 ;; This function calls:
  7546 ;;		_getDimmerLights_Status
  7547 ;;		_setMemory_Modify
  7548 ;;		_setProductData
  7549 ;;		_setRF_DimmerValue
  7550 ;;		_setTxData
  7551 ;; This function is called by:
  7552 ;;		_setControl_Lights_Table
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _setRFSW_AdjControl
  7558  1492                     _setRFSW_AdjControl:	
  7559                           
  7560                           ;incstack = 0
  7561                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7562                           ;setRFSW_AdjControl@sw stored from wreg
  7563  1492  0020               	movlb	0	; select bank0
  7564  1493  00EB               	movwf	setRFSW_AdjControl@sw
  7565                           
  7566                           ;RF_Control_B1.c: 408: char status = 0;
  7567  1494  01EA               	clrf	setRFSW_AdjControl@status
  7568                           
  7569                           ;RF_Control_B1.c: 410: status = getDimmerLights_Status(sw);
  7570  1495  086B               	movf	setRFSW_AdjControl@sw,w
  7571  1496  319D  25B9  3194   	fcall	_getDimmerLights_Status
  7572  1499  0020               	movlb	0	; select bank0
  7573  149A  00E8               	movwf	??_setRFSW_AdjControl
  7574  149B  0868               	movf	??_setRFSW_AdjControl,w
  7575  149C  00EA               	movwf	setRFSW_AdjControl@status
  7576                           
  7577                           ;RF_Control_B1.c: 413: if (status == 1) {
  7578  149D  086A               	movf	setRFSW_AdjControl@status,w
  7579  149E  3A01               	xorlw	1
  7580  149F  1D03               	skipz
  7581  14A0  2CAB               	goto	l8584
  7582                           
  7583                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7584  14A1  3001               	movlw	1
  7585  14A2  319E  2658  3194   	fcall	_setMemory_Modify
  7586                           
  7587                           ;RF_Control_B1.c: 415: setRF_DimmerValue(sw);
  7588  14A5  0020               	movlb	0	; select bank0
  7589  14A6  086B               	movf	setRFSW_AdjControl@sw,w
  7590  14A7  3192  2210  3194   	fcall	_setRF_DimmerValue
  7591                           
  7592                           ;RF_Control_B1.c: 416: } else {
  7593  14AA  2CBC               	goto	l2124
  7594  14AB                     l8584:	
  7595                           
  7596                           ;RF_Control_B1.c: 417: setProductData(9, product->Data[20 + sw]);
  7597  14AB  0020               	movlb	0	; select bank0
  7598  14AC  086B               	movf	setRFSW_AdjControl@sw,w
  7599  14AD  3E14               	addlw	20
  7600  14AE  0779               	addwf	_product,w
  7601  14AF  00E8               	movwf	??_setRFSW_AdjControl
  7602  14B0  0868               	movf	??_setRFSW_AdjControl,w
  7603  14B1  0086               	movwf	6
  7604  14B2  3002               	movlw	2	; select bank4/5
  7605  14B3  0087               	movwf	7
  7606  14B4  0801               	movf	1,w
  7607  14B5  00E9               	movwf	??_setRFSW_AdjControl+1
  7608  14B6  0869               	movf	??_setRFSW_AdjControl+1,w
  7609  14B7  00E2               	movwf	setProductData@value
  7610  14B8  3009               	movlw	9
  7611  14B9  319D  255F  3194   	fcall	_setProductData
  7612  14BC                     l2124:	
  7613                           
  7614                           ;RF_Control_B1.c: 418: }
  7615                           ;RF_Control_B1.c: 419: setProductData(17, product->Data[26 + sw]);
  7616  14BC  0020               	movlb	0	; select bank0
  7617  14BD  086B               	movf	setRFSW_AdjControl@sw,w
  7618  14BE  3E1A               	addlw	26
  7619  14BF  0779               	addwf	_product,w
  7620  14C0  00E8               	movwf	??_setRFSW_AdjControl
  7621  14C1  0868               	movf	??_setRFSW_AdjControl,w
  7622  14C2  0086               	movwf	6
  7623  14C3  3002               	movlw	2	; select bank4/5
  7624  14C4  0087               	movwf	7
  7625  14C5  0801               	movf	1,w
  7626  14C6  00E9               	movwf	??_setRFSW_AdjControl+1
  7627  14C7  0869               	movf	??_setRFSW_AdjControl+1,w
  7628  14C8  00E2               	movwf	setProductData@value
  7629  14C9  3011               	movlw	17
  7630  14CA  319D  255F  3194   	fcall	_setProductData
  7631                           
  7632                           ;RF_Control_B1.c: 420: setTxData();
  7633  14CD  318E  2610         	fcall	_setTxData
  7634  14CF  0008               	return
  7635  14D0                     __end_of_setRFSW_AdjControl:	
  7636                           
  7637                           	psect	text30
  7638  1210                     __ptext30:	
  7639 ;; *************** function _setRF_DimmerValue *****************
  7640 ;; Defined at:
  7641 ;;		line 425 in file "../src/RF_Control_B1.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  lights          1    wreg     unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  lights          1   71[BANK0 ] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;		None               void
  7648 ;; Registers used:
  7649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;Total ram usage:        2 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    9
  7662 ;; This function calls:
  7663 ;;		_setDimmerLights_AdjRF
  7664 ;;		_setProductData
  7665 ;; This function is called by:
  7666 ;;		_setRFSW_AdjControl
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           
  7671                           ;psect for function _setRF_DimmerValue
  7672  1210                     _setRF_DimmerValue:	
  7673                           
  7674                           ;incstack = 0
  7675                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7676                           ;setRF_DimmerValue@lights stored from wreg
  7677  1210  0020               	movlb	0	; select bank0
  7678  1211  00E7               	movwf	setRF_DimmerValue@lights
  7679                           
  7680                           ;RF_Control_B1.c: 426: if (RF_Data[9] > 0x64) {
  7681  1212  3065               	movlw	101
  7682  1213  0023               	movlb	3	; select bank3
  7683  1214  0229               	subwf	(_RF_Data^(0+384)+9),w
  7684  1215  1C03               	skipc
  7685  1216  2A1D               	goto	l8460
  7686                           
  7687                           ;RF_Control_B1.c: 427: RF_Data[9] = 0x64;
  7688  1217  3064               	movlw	100
  7689  1218  0020               	movlb	0	; select bank0
  7690  1219  00E6               	movwf	??_setRF_DimmerValue
  7691  121A  0866               	movf	??_setRF_DimmerValue,w
  7692  121B  0023               	movlb	3	; select bank3
  7693  121C  00A9               	movwf	(_RF_Data^(0+384)+9)
  7694  121D                     l8460:	
  7695                           
  7696                           ;RF_Control_B1.c: 428: }
  7697                           ;RF_Control_B1.c: 429: setProductData(9, RF_Data[9]);
  7698  121D  0829               	movf	(_RF_Data^(0+384)+9),w
  7699  121E  0020               	movlb	0	; select bank0
  7700  121F  00E6               	movwf	??_setRF_DimmerValue
  7701  1220  0866               	movf	??_setRF_DimmerValue,w
  7702  1221  00E2               	movwf	setProductData@value
  7703  1222  3009               	movlw	9
  7704  1223  319D  255F  3192   	fcall	_setProductData
  7705                           
  7706                           ;RF_Control_B1.c: 430: setProductData(11, lights);
  7707  1226  0020               	movlb	0	; select bank0
  7708  1227  0867               	movf	setRF_DimmerValue@lights,w
  7709  1228  00E6               	movwf	??_setRF_DimmerValue
  7710  1229  0866               	movf	??_setRF_DimmerValue,w
  7711  122A  00E2               	movwf	setProductData@value
  7712  122B  300B               	movlw	11
  7713  122C  319D  255F  3192   	fcall	_setProductData
  7714                           
  7715                           ;RF_Control_B1.c: 431: setProductData((20 + lights), RF_Data[9]);
  7716  122F  0023               	movlb	3	; select bank3
  7717  1230  0829               	movf	(_RF_Data^(0+384)+9),w
  7718  1231  0020               	movlb	0	; select bank0
  7719  1232  00E6               	movwf	??_setRF_DimmerValue
  7720  1233  0866               	movf	??_setRF_DimmerValue,w
  7721  1234  00E2               	movwf	setProductData@value
  7722  1235  0867               	movf	setRF_DimmerValue@lights,w
  7723  1236  3E14               	addlw	20
  7724  1237  319D  255F  3192   	fcall	_setProductData
  7725                           
  7726                           ;RF_Control_B1.c: 432: setDimmerLights_AdjRF(lights);
  7727  123A  0020               	movlb	0	; select bank0
  7728  123B  0867               	movf	setRF_DimmerValue@lights,w
  7729  123C  3190  20CE         	fcall	_setDimmerLights_AdjRF
  7730  123E  0008               	return
  7731  123F                     __end_of_setRF_DimmerValue:	
  7732                           
  7733                           	psect	text31
  7734  10CE                     __ptext31:	
  7735 ;; *************** function _setDimmerLights_AdjRF *****************
  7736 ;; Defined at:
  7737 ;;		line 903 in file "../src/Dimmer_B1.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  lights          1    wreg     unsigned char 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  lights          1   67[BANK0 ] unsigned char 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;		None               void
  7744 ;; Registers used:
  7745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;Total ram usage:        2 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    8
  7758 ;; This function calls:
  7759 ;;		_DimmerLightsPointSelect
  7760 ;;		_getPercentValue
  7761 ;; This function is called by:
  7762 ;;		_setRF_DimmerValue
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           
  7767                           ;psect for function _setDimmerLights_AdjRF
  7768  10CE                     _setDimmerLights_AdjRF:	
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7772                           ;setDimmerLights_AdjRF@lights stored from wreg
  7773  10CE  0020               	movlb	0	; select bank0
  7774  10CF  00E3               	movwf	setDimmerLights_AdjRF@lights
  7775                           
  7776                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7777  10D0  0863               	movf	setDimmerLights_AdjRF@lights,w
  7778  10D1  319C  24D4  3190   	fcall	_DimmerLightsPointSelect
  7779                           
  7780                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7781  10D4  0020               	movlb	0	; select bank0
  7782  10D5  086F               	movf	_DimmerLights,w
  7783  10D6  3E02               	addlw	2
  7784  10D7  0086               	movwf	6
  7785  10D8  3001               	movlw	1	; select bank2/3
  7786  10D9  0087               	movwf	7
  7787  10DA  1401               	bsf	1,0
  7788                           
  7789                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7790  10DB  0A6F               	incf	_DimmerLights,w
  7791  10DC  0086               	movwf	6
  7792  10DD  3001               	movlw	1	; select bank2/3
  7793  10DE  0087               	movwf	7
  7794  10DF  1681               	bsf	1,5
  7795                           
  7796                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7797  10E0  0879               	movf	_product,w
  7798  10E1  3E09               	addlw	9
  7799  10E2  0086               	movwf	6
  7800  10E3  3002               	movlw	2	; select bank4/5
  7801  10E4  0087               	movwf	7
  7802  10E5  0801               	movf	1,w
  7803  10E6  318B  233D         	fcall	_getPercentValue
  7804  10E8  0020               	movlb	0	; select bank0
  7805  10E9  00E2               	movwf	??_setDimmerLights_AdjRF
  7806  10EA  086F               	movf	_DimmerLights,w
  7807  10EB  3E06               	addlw	6
  7808  10EC  0086               	movwf	6
  7809  10ED  3001               	movlw	1	; select bank2/3
  7810  10EE  0087               	movwf	7
  7811  10EF  0862               	movf	??_setDimmerLights_AdjRF,w
  7812  10F0  0081               	movwf	1
  7813  10F1  0008               	return
  7814  10F2                     __end_of_setDimmerLights_AdjRF:	
  7815                           
  7816                           	psect	text32
  7817  0B3D                     __ptext32:	
  7818 ;; *************** function _getPercentValue *****************
  7819 ;; Defined at:
  7820 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  value           1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  value           1   62[BANK0 ] unsigned char 
  7825 ;;  i               3   63[BANK0 ] float 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  1    wreg      unsigned char 
  7828 ;; Registers used:
  7829 ;;		wreg, status,2, status,0, pclath, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;Total ram usage:        6 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    7
  7842 ;; This function calls:
  7843 ;;		___awtoft
  7844 ;;		___ftadd
  7845 ;;		___ftdiv
  7846 ;;		___ftmul
  7847 ;;		___ftneg
  7848 ;;		___fttol
  7849 ;; This function is called by:
  7850 ;;		_setDimmerLights_AdjRF
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _getPercentValue
  7856  0B3D                     _getPercentValue:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7860                           ;getPercentValue@value stored from wreg
  7861  0B3D  0020               	movlb	0	; select bank0
  7862  0B3E  00DE               	movwf	getPercentValue@value
  7863                           
  7864                           ;Dimmer_B1.c: 1026: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  7865  0B3F  3000               	movlw	0
  7866  0B40  00DF               	movwf	getPercentValue@i
  7867  0B41  3030               	movlw	48
  7868  0B42  00E0               	movwf	getPercentValue@i+1
  7869  0B43  3042               	movlw	66
  7870  0B44  00E1               	movwf	getPercentValue@i+2
  7871                           
  7872                           ;Dimmer_B1.c: 1027: i /= 100;
  7873  0B45  3000               	movlw	0
  7874  0B46  00AE               	movwf	___ftdiv@f2
  7875  0B47  30C8               	movlw	200
  7876  0B48  00AF               	movwf	___ftdiv@f2+1
  7877  0B49  3042               	movlw	66
  7878  0B4A  00B0               	movwf	___ftdiv@f2+2
  7879  0B4B  085F               	movf	getPercentValue@i,w
  7880  0B4C  00B1               	movwf	___ftdiv@f1
  7881  0B4D  0860               	movf	getPercentValue@i+1,w
  7882  0B4E  00B2               	movwf	___ftdiv@f1+1
  7883  0B4F  0861               	movf	getPercentValue@i+2,w
  7884  0B50  00B3               	movwf	___ftdiv@f1+2
  7885  0B51  318E  26A7  318B   	fcall	___ftdiv
  7886  0B54  0020               	movlb	0	; select bank0
  7887  0B55  082E               	movf	?___ftdiv,w
  7888  0B56  00DF               	movwf	getPercentValue@i
  7889  0B57  082F               	movf	?___ftdiv+1,w
  7890  0B58  00E0               	movwf	getPercentValue@i+1
  7891  0B59  0830               	movf	?___ftdiv+2,w
  7892  0B5A  00E1               	movwf	getPercentValue@i+2
  7893                           
  7894                           ;Dimmer_B1.c: 1029: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  7895  0B5B  085E               	movf	getPercentValue@value,w
  7896  0B5C  00DC               	movwf	??_getPercentValue
  7897  0B5D  01DD               	clrf	??_getPercentValue+1
  7898  0B5E  09DC               	comf	??_getPercentValue,f
  7899  0B5F  09DD               	comf	??_getPercentValue+1,f
  7900  0B60  0ADC               	incf	??_getPercentValue,f
  7901  0B61  1903               	skipnz
  7902  0B62  0ADD               	incf	??_getPercentValue+1,f
  7903  0B63  085C               	movf	??_getPercentValue,w
  7904  0B64  3E64               	addlw	100
  7905  0B65  00A8               	movwf	___awtoft@c
  7906  0B66  3000               	movlw	0
  7907  0B67  3D5D               	addwfc	??_getPercentValue+1,w
  7908  0B68  00A9               	movwf	___awtoft@c+1
  7909  0B69  3190  2089  318B   	fcall	___awtoft
  7910  0B6C  0020               	movlb	0	; select bank0
  7911  0B6D  0828               	movf	?___awtoft,w
  7912  0B6E  00B1               	movwf	___ftmul@f2
  7913  0B6F  0829               	movf	?___awtoft+1,w
  7914  0B70  00B2               	movwf	___ftmul@f2+1
  7915  0B71  082A               	movf	?___awtoft+2,w
  7916  0B72  00B3               	movwf	___ftmul@f2+2
  7917  0B73  085F               	movf	getPercentValue@i,w
  7918  0B74  00AE               	movwf	___ftmul@f1
  7919  0B75  0860               	movf	getPercentValue@i+1,w
  7920  0B76  00AF               	movwf	___ftmul@f1+1
  7921  0B77  0861               	movf	getPercentValue@i+2,w
  7922  0B78  00B0               	movwf	___ftmul@f1+2
  7923  0B79  3187  2704  318B   	fcall	___ftmul
  7924  0B7C  0020               	movlb	0	; select bank0
  7925  0B7D  082E               	movf	?___ftmul,w
  7926  0B7E  00BE               	movwf	___ftneg@f1
  7927  0B7F  082F               	movf	?___ftmul+1,w
  7928  0B80  00BF               	movwf	___ftneg@f1+1
  7929  0B81  0830               	movf	?___ftmul+2,w
  7930  0B82  00C0               	movwf	___ftneg@f1+2
  7931  0B83  319C  2485  318B   	fcall	___ftneg
  7932  0B86  0020               	movlb	0	; select bank0
  7933  0B87  083E               	movf	?___ftneg,w
  7934  0B88  00C4               	movwf	___ftadd@f2
  7935  0B89  083F               	movf	?___ftneg+1,w
  7936  0B8A  00C5               	movwf	___ftadd@f2+1
  7937  0B8B  0840               	movf	?___ftneg+2,w
  7938  0B8C  00C6               	movwf	___ftadd@f2+2
  7939  0B8D  3000               	movlw	0
  7940  0B8E  00C1               	movwf	___ftadd@f1
  7941  0B8F  3060               	movlw	96
  7942  0B90  00C2               	movwf	___ftadd@f1+1
  7943  0B91  3042               	movlw	66
  7944  0B92  00C3               	movwf	___ftadd@f1+2
  7945  0B93  3184  2456  318B   	fcall	___ftadd
  7946  0B96  0020               	movlb	0	; select bank0
  7947  0B97  0841               	movf	?___ftadd,w
  7948  0B98  00CE               	movwf	___fttol@f1
  7949  0B99  0842               	movf	?___ftadd+1,w
  7950  0B9A  00CF               	movwf	___fttol@f1+1
  7951  0B9B  0843               	movf	?___ftadd+2,w
  7952  0B9C  00D0               	movwf	___fttol@f1+2
  7953  0B9D  318D  2589         	fcall	___fttol
  7954  0B9F  0020               	movlb	0	; select bank0
  7955  0BA0  084E               	movf	?___fttol,w
  7956  0BA1  0008               	return
  7957  0BA2                     __end_of_getPercentValue:	
  7958                           
  7959                           	psect	text33
  7960  0704                     __ptext33:	
  7961 ;; *************** function ___ftmul *****************
  7962 ;; Defined at:
  7963 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;  f1              3   14[BANK0 ] float 
  7966 ;;  f2              3   17[BANK0 ] float 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7969 ;;  sign            1   29[BANK0 ] unsigned char 
  7970 ;;  cntr            1   28[BANK0 ] unsigned char 
  7971 ;;  exp             1   24[BANK0 ] unsigned char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  3   14[BANK0 ] float 
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0, pclath, cstack
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7981 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;Total ram usage:       16 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    6
  7988 ;; This function calls:
  7989 ;;		___ftpack
  7990 ;; This function is called by:
  7991 ;;		_getPercentValue
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function ___ftmul
  7997  0704                     ___ftmul:	
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8001  0704  0020               	movlb	0	; select bank0
  8002  0705  082E               	movf	___ftmul@f1,w
  8003  0706  00B4               	movwf	??___ftmul
  8004  0707  082F               	movf	___ftmul@f1+1,w
  8005  0708  00B5               	movwf	??___ftmul+1
  8006  0709  0830               	movf	___ftmul@f1+2,w
  8007  070A  00B6               	movwf	??___ftmul+2
  8008  070B  1003               	clrc
  8009  070C  0D35               	rlf	??___ftmul+1,w
  8010  070D  0D36               	rlf	??___ftmul+2,w
  8011  070E  00B7               	movwf	??___ftmul+3
  8012  070F  0837               	movf	??___ftmul+3,w
  8013  0710  00B8               	movwf	___ftmul@exp
  8014  0711  08B8               	movf	___ftmul@exp,f
  8015  0712  1D03               	skipz
  8016  0713  2F1B               	goto	l8112
  8017  0714  3000               	movlw	0
  8018  0715  00AE               	movwf	?___ftmul
  8019  0716  3000               	movlw	0
  8020  0717  00AF               	movwf	?___ftmul+1
  8021  0718  3000               	movlw	0
  8022  0719  00B0               	movwf	?___ftmul+2
  8023  071A  0008               	return
  8024  071B                     l8112:	
  8025  071B  0831               	movf	___ftmul@f2,w
  8026  071C  00B4               	movwf	??___ftmul
  8027  071D  0832               	movf	___ftmul@f2+1,w
  8028  071E  00B5               	movwf	??___ftmul+1
  8029  071F  0833               	movf	___ftmul@f2+2,w
  8030  0720  00B6               	movwf	??___ftmul+2
  8031  0721  1003               	clrc
  8032  0722  0D35               	rlf	??___ftmul+1,w
  8033  0723  0D36               	rlf	??___ftmul+2,w
  8034  0724  00B7               	movwf	??___ftmul+3
  8035  0725  0837               	movf	??___ftmul+3,w
  8036  0726  00BD               	movwf	___ftmul@sign
  8037  0727  08BD               	movf	___ftmul@sign,f
  8038  0728  1D03               	skipz
  8039  0729  2F31               	goto	l8118
  8040  072A  3000               	movlw	0
  8041  072B  00AE               	movwf	?___ftmul
  8042  072C  3000               	movlw	0
  8043  072D  00AF               	movwf	?___ftmul+1
  8044  072E  3000               	movlw	0
  8045  072F  00B0               	movwf	?___ftmul+2
  8046  0730  0008               	return
  8047  0731                     l8118:	
  8048  0731  083D               	movf	___ftmul@sign,w
  8049  0732  3E7B               	addlw	123
  8050  0733  00B4               	movwf	??___ftmul
  8051  0734  0834               	movf	??___ftmul,w
  8052  0735  07B8               	addwf	___ftmul@exp,f
  8053  0736  082E               	movf	___ftmul@f1,w
  8054  0737  00B4               	movwf	??___ftmul
  8055  0738  082F               	movf	___ftmul@f1+1,w
  8056  0739  00B5               	movwf	??___ftmul+1
  8057  073A  0830               	movf	___ftmul@f1+2,w
  8058  073B  00B6               	movwf	??___ftmul+2
  8059  073C  3010               	movlw	16
  8060  073D                     u8485:	
  8061  073D  36B6               	lsrf	??___ftmul+2,f
  8062  073E  0CB5               	rrf	??___ftmul+1,f
  8063  073F  0CB4               	rrf	??___ftmul,f
  8064  0740  0B89               	decfsz	9,f
  8065  0741  2F3D               	goto	u8485
  8066  0742  0834               	movf	??___ftmul,w
  8067  0743  00B7               	movwf	??___ftmul+3
  8068  0744  0837               	movf	??___ftmul+3,w
  8069  0745  00BD               	movwf	___ftmul@sign
  8070  0746  0831               	movf	___ftmul@f2,w
  8071  0747  00B4               	movwf	??___ftmul
  8072  0748  0832               	movf	___ftmul@f2+1,w
  8073  0749  00B5               	movwf	??___ftmul+1
  8074  074A  0833               	movf	___ftmul@f2+2,w
  8075  074B  00B6               	movwf	??___ftmul+2
  8076  074C  3010               	movlw	16
  8077  074D                     u8495:	
  8078  074D  36B6               	lsrf	??___ftmul+2,f
  8079  074E  0CB5               	rrf	??___ftmul+1,f
  8080  074F  0CB4               	rrf	??___ftmul,f
  8081  0750  0B89               	decfsz	9,f
  8082  0751  2F4D               	goto	u8495
  8083  0752  0834               	movf	??___ftmul,w
  8084  0753  00B7               	movwf	??___ftmul+3
  8085  0754  0837               	movf	??___ftmul+3,w
  8086  0755  06BD               	xorwf	___ftmul@sign,f
  8087  0756  3080               	movlw	128
  8088  0757  00B4               	movwf	??___ftmul
  8089  0758  0834               	movf	??___ftmul,w
  8090  0759  05BD               	andwf	___ftmul@sign,f
  8091  075A  17AF               	bsf	___ftmul@f1+1,7
  8092  075B  17B2               	bsf	___ftmul@f2+1,7
  8093  075C  30FF               	movlw	255
  8094  075D  05B1               	andwf	___ftmul@f2,f
  8095  075E  30FF               	movlw	255
  8096  075F  05B2               	andwf	___ftmul@f2+1,f
  8097  0760  3000               	movlw	0
  8098  0761  05B3               	andwf	___ftmul@f2+2,f
  8099  0762  3000               	movlw	0
  8100  0763  00B9               	movwf	___ftmul@f3_as_product
  8101  0764  3000               	movlw	0
  8102  0765  00BA               	movwf	___ftmul@f3_as_product+1
  8103  0766  3000               	movlw	0
  8104  0767  00BB               	movwf	___ftmul@f3_as_product+2
  8105  0768  3007               	movlw	7
  8106  0769  00B4               	movwf	??___ftmul
  8107  076A  0834               	movf	??___ftmul,w
  8108  076B  00BC               	movwf	___ftmul@cntr
  8109  076C                     l8130:	
  8110  076C  1C2E               	btfss	___ftmul@f1,0
  8111  076D  2F74               	goto	l8134
  8112  076E  0831               	movf	___ftmul@f2,w
  8113  076F  07B9               	addwf	___ftmul@f3_as_product,f
  8114  0770  0832               	movf	___ftmul@f2+1,w
  8115  0771  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8116  0772  0833               	movf	___ftmul@f2+2,w
  8117  0773  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8118  0774                     l8134:	
  8119  0774  3001               	movlw	1
  8120  0775                     u8515:	
  8121  0775  36B0               	lsrf	___ftmul@f1+2,f
  8122  0776  0CAF               	rrf	___ftmul@f1+1,f
  8123  0777  0CAE               	rrf	___ftmul@f1,f
  8124  0778  0B89               	decfsz	9,f
  8125  0779  2F75               	goto	u8515
  8126  077A  3001               	movlw	1
  8127  077B                     u8525:	
  8128  077B  35B1               	lslf	___ftmul@f2,f
  8129  077C  0DB2               	rlf	___ftmul@f2+1,f
  8130  077D  0DB3               	rlf	___ftmul@f2+2,f
  8131  077E  0B89               	decfsz	9,f
  8132  077F  2F7B               	goto	u8525
  8133  0780  3001               	movlw	1
  8134  0781  02BC               	subwf	___ftmul@cntr,f
  8135  0782  1D03               	btfss	3,2
  8136  0783  2F6C               	goto	l8130
  8137  0784  3009               	movlw	9
  8138  0785  00B4               	movwf	??___ftmul
  8139  0786  0834               	movf	??___ftmul,w
  8140  0787  00BC               	movwf	___ftmul@cntr
  8141  0788                     l8142:	
  8142  0788  1C2E               	btfss	___ftmul@f1,0
  8143  0789  2F90               	goto	l8146
  8144  078A  0831               	movf	___ftmul@f2,w
  8145  078B  07B9               	addwf	___ftmul@f3_as_product,f
  8146  078C  0832               	movf	___ftmul@f2+1,w
  8147  078D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8148  078E  0833               	movf	___ftmul@f2+2,w
  8149  078F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8150  0790                     l8146:	
  8151  0790  3001               	movlw	1
  8152  0791                     u8555:	
  8153  0791  36B0               	lsrf	___ftmul@f1+2,f
  8154  0792  0CAF               	rrf	___ftmul@f1+1,f
  8155  0793  0CAE               	rrf	___ftmul@f1,f
  8156  0794  0B89               	decfsz	9,f
  8157  0795  2F91               	goto	u8555
  8158  0796  3001               	movlw	1
  8159  0797                     u8565:	
  8160  0797  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8161  0798  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8162  0799  0CB9               	rrf	___ftmul@f3_as_product,f
  8163  079A  0B89               	decfsz	9,f
  8164  079B  2F97               	goto	u8565
  8165  079C  3001               	movlw	1
  8166  079D  02BC               	subwf	___ftmul@cntr,f
  8167  079E  1D03               	btfss	3,2
  8168  079F  2F88               	goto	l8142
  8169  07A0  0839               	movf	___ftmul@f3_as_product,w
  8170  07A1  00A0               	movwf	___ftpack@arg
  8171  07A2  083A               	movf	___ftmul@f3_as_product+1,w
  8172  07A3  00A1               	movwf	___ftpack@arg+1
  8173  07A4  083B               	movf	___ftmul@f3_as_product+2,w
  8174  07A5  00A2               	movwf	___ftpack@arg+2
  8175  07A6  0838               	movf	___ftmul@exp,w
  8176  07A7  00B4               	movwf	??___ftmul
  8177  07A8  0834               	movf	??___ftmul,w
  8178  07A9  00A3               	movwf	___ftpack@exp
  8179  07AA  083D               	movf	___ftmul@sign,w
  8180  07AB  00B5               	movwf	??___ftmul+1
  8181  07AC  0835               	movf	??___ftmul+1,w
  8182  07AD  00A4               	movwf	___ftpack@sign
  8183  07AE  318A  2213         	fcall	___ftpack
  8184  07B0  0020               	movlb	0	; select bank0
  8185  07B1  0820               	movf	?___ftpack,w
  8186  07B2  00AE               	movwf	?___ftmul
  8187  07B3  0821               	movf	?___ftpack+1,w
  8188  07B4  00AF               	movwf	?___ftmul+1
  8189  07B5  0822               	movf	?___ftpack+2,w
  8190  07B6  00B0               	movwf	?___ftmul+2
  8191  07B7  0008               	return
  8192  07B8                     __end_of___ftmul:	
  8193                           
  8194                           	psect	text34
  8195  1E58                     __ptext34:	
  8196 ;; *************** function _setMemory_Modify *****************
  8197 ;; Defined at:
  8198 ;;		line 1065 in file "../src/MCU_B1.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  command         1    wreg     unsigned char 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  command         1    1[BANK0 ] unsigned char 
  8203 ;; Return value:  Size  Location     Type
  8204 ;;		None               void
  8205 ;; Registers used:
  8206 ;;		wreg, status,2, status,0
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;Total ram usage:        2 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    5
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		_setLog_Code
  8223 ;;		_setRFSW_AdjControl
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _setMemory_Modify
  8229  1E58                     _setMemory_Modify:	
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8233                           ;setMemory_Modify@command stored from wreg
  8234  1E58  0020               	movlb	0	; select bank0
  8235  1E59  00A1               	movwf	setMemory_Modify@command
  8236                           
  8237                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8238  1E5A  0821               	movf	setMemory_Modify@command,w
  8239  1E5B  3A01               	xorlw	1
  8240  1E5C  3000               	movlw	0
  8241  1E5D  1903               	skipnz
  8242  1E5E  3001               	movlw	1
  8243  1E5F  00A0               	movwf	??_setMemory_Modify
  8244  1E60  0023               	movlb	3	; select bank3
  8245  1E61  0862               	movf	(_Memory^(0+384)+36),w
  8246  1E62  0020               	movlb	0	; select bank0
  8247  1E63  0620               	xorwf	??_setMemory_Modify,w
  8248  1E64  39FE               	andlw	-2
  8249  1E65  0620               	xorwf	??_setMemory_Modify,w
  8250  1E66  0023               	movlb	3	; select bank3
  8251  1E67  00E2               	movwf	(_Memory^(0+384)+36)
  8252                           
  8253                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8254  1E68  01E0               	clrf	(_Memory^(0+384)+34)
  8255  1E69  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8256  1E6A  0008               	return
  8257  1E6B                     __end_of_setMemory_Modify:	
  8258                           
  8259                           	psect	text35
  8260  1DDB                     __ptext35:	
  8261 ;; *************** function _getRF_KeyStatus *****************
  8262 ;; Defined at:
  8263 ;;		line 154 in file "../src/RF_Control_B1.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  key             1    1[BANK0 ] unsigned char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      unsigned char 
  8270 ;; Registers used:
  8271 ;;		wreg, status,2
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        3 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    5
  8284 ;; This function calls:
  8285 ;;		Nothing
  8286 ;; This function is called by:
  8287 ;;		_setRF_Main
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           
  8292                           ;psect for function _getRF_KeyStatus
  8293  1DDB                     _getRF_KeyStatus:	
  8294                           
  8295                           ;RF_Control_B1.c: 155: char key = 0;
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8299  1DDB  0020               	movlb	0	; select bank0
  8300  1DDC  01A1               	clrf	getRF_KeyStatus@key
  8301                           
  8302                           ;RF_Control_B1.c: 165: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8303  1DDD  01A2               	clrf	_getRF_KeyStatus$5046
  8304  1DDE  0AA2               	incf	_getRF_KeyStatus$5046,f
  8305  1DDF  1F0C               	btfss	12,6	;volatile
  8306  1DE0  1A0C               	btfsc	12,4	;volatile
  8307  1DE1  2DE6               	goto	l9022
  8308  1DE2  1C0C               	btfss	12,0	;volatile
  8309  1DE3  1B8C               	btfsc	12,7	;volatile
  8310  1DE4  2DE6               	goto	l9022
  8311  1DE5  01A2               	clrf	_getRF_KeyStatus$5046
  8312  1DE6                     l9022:	
  8313  1DE6  0822               	movf	_getRF_KeyStatus$5046,w
  8314  1DE7  00A0               	movwf	??_getRF_KeyStatus
  8315  1DE8  0820               	movf	??_getRF_KeyStatus,w
  8316  1DE9  00A1               	movwf	getRF_KeyStatus@key
  8317                           
  8318                           ;RF_Control_B1.c: 167: return key;
  8319  1DEA  0821               	movf	getRF_KeyStatus@key,w
  8320  1DEB  0008               	return
  8321  1DEC                     __end_of_getRF_KeyStatus:	
  8322                           
  8323                           	psect	text36
  8324  1DCA                     __ptext36:	
  8325 ;; *************** function _getBuz_GO *****************
  8326 ;; Defined at:
  8327 ;;		line 82 in file "../src/Buzzer_B1.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  i               2    4[BANK0 ] int 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  2    0[BANK0 ] int 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        6 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    5
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_setRF_Main
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _getBuz_GO
  8357  1DCA                     _getBuz_GO:	
  8358                           
  8359                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8363  1DCA  0021               	movlb	1	; select bank1
  8364  1DCB  0C2E               	rrf	_Buz1^(0+128),w
  8365  1DCC  3901               	andlw	1
  8366  1DCD  0020               	movlb	0	; select bank0
  8367  1DCE  00A2               	movwf	??_getBuz_GO
  8368  1DCF  01A3               	clrf	??_getBuz_GO+1
  8369  1DD0  0822               	movf	??_getBuz_GO,w
  8370  1DD1  00A4               	movwf	getBuz_GO@i
  8371  1DD2  0823               	movf	??_getBuz_GO+1,w
  8372  1DD3  00A5               	movwf	getBuz_GO@i+1
  8373                           
  8374                           ;Buzzer_B1.c: 84: return i;
  8375  1DD4  0825               	movf	getBuz_GO@i+1,w
  8376  1DD5  01A1               	clrf	?_getBuz_GO+1
  8377  1DD6  07A1               	addwf	?_getBuz_GO+1,f
  8378  1DD7  0824               	movf	getBuz_GO@i,w
  8379  1DD8  01A0               	clrf	?_getBuz_GO
  8380  1DD9  07A0               	addwf	?_getBuz_GO,f
  8381  1DDA  0008               	return
  8382  1DDB                     __end_of_getBuz_GO:	
  8383                           
  8384                           	psect	text37
  8385  1E45                     __ptext37:	
  8386 ;; *************** function _RF_RxDisable *****************
  8387 ;; Defined at:
  8388 ;;		line 227 in file "../src/RF_Control_B1.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;		None               void
  8395 ;; Registers used:
  8396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;Total ram usage:        0 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    7
  8409 ;; This function calls:
  8410 ;;		_CC2500_WriteCommand
  8411 ;; This function is called by:
  8412 ;;		_setRF_Main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _RF_RxDisable
  8418  1E45                     _RF_RxDisable:	
  8419                           
  8420                           ;RF_Control_B1.c: 228: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8424  1E45  0021               	movlb	1	; select bank1
  8425  1E46  18BA               	btfsc	_RF1^(0+128),1
  8426  1E47  2E4A               	goto	l2076
  8427  1E48  1DBA               	btfss	_RF1^(0+128),3
  8428  1E49  0008               	return
  8429  1E4A                     l2076:	
  8430                           
  8431                           ;RF_Control_B1.c: 229: RF1.RxStatus = 0;
  8432  1E4A  11BA               	bcf	_RF1^(0+128),3
  8433                           
  8434                           ;RF_Control_B1.c: 230: RF1.ReceiveGO = 0;
  8435  1E4B  10BA               	bcf	_RF1^(0+128),1
  8436                           
  8437                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x36);
  8438  1E4C  3036               	movlw	54
  8439  1E4D  319F  2700  319E   	fcall	_CC2500_WriteCommand
  8440                           
  8441                           ;RF_Control_B1.c: 233: CC2500_WriteCommand(0x3A);
  8442  1E50  303A               	movlw	58
  8443  1E51  319F  2700  319E   	fcall	_CC2500_WriteCommand
  8444                           
  8445                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x3B);
  8446  1E54  303B               	movlw	59
  8447  1E55  319F  2700         	fcall	_CC2500_WriteCommand
  8448  1E57  0008               	return
  8449  1E58                     __end_of_RF_RxDisable:	
  8450                           
  8451                           	psect	text38
  8452  0A74                     __ptext38:	
  8453 ;; *************** function _CC2500_TxData *****************
  8454 ;; Defined at:
  8455 ;;		line 32 in file "../src/CC2500_B1.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;		None               void
  8462 ;; Registers used:
  8463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:        2 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    7
  8476 ;; This function calls:
  8477 ;;		_CC2500_WriteByte
  8478 ;;		_CC2500_WriteCommand
  8479 ;;		_Timeout_Counter
  8480 ;;		_set_TimeoutCleared
  8481 ;; This function is called by:
  8482 ;;		_setRF_Main
  8483 ;; This function uses a non-reentrant model
  8484 ;;
  8485                           
  8486                           
  8487                           ;psect for function _CC2500_TxData
  8488  0A74                     _CC2500_TxData:	
  8489                           
  8490                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8491                           ;CC2500_B1.c: 35: RC0 = 0;
  8492                           
  8493                           ;incstack = 0
  8494                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8495  0A74  0020               	movlb	0	; select bank0
  8496  0A75  100E               	bcf	14,0	;volatile
  8497                           
  8498                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8499  0A76  307F               	movlw	127
  8500  0A77  00A4               	movwf	??_CC2500_TxData
  8501  0A78  0824               	movf	??_CC2500_TxData,w
  8502  0A79  0021               	movlb	1	; select bank1
  8503  0A7A  00D1               	movwf	_SPI0Buffer^(0+128)
  8504                           
  8505                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8506  0A7B  2A7F               	goto	l8746
  8507  0A7C                     l8744:	
  8508                           
  8509                           ;CC2500_B1.c: 38: Timeout_Counter();
  8510  0A7C  319E  2692  318A   	fcall	_Timeout_Counter
  8511  0A7F                     l8746:	
  8512  0A7F  0020               	movlb	0	; select bank0
  8513  0A80  1E8E               	btfss	14,5	;volatile
  8514  0A81  2A85               	goto	l8750
  8515  0A82  0021               	movlb	1	; select bank1
  8516  0A83  1D2B               	btfss	(_myMain^(0+128)+11),2
  8517  0A84  2A7C               	goto	l8744
  8518  0A85                     l8750:	
  8519                           
  8520                           ;CC2500_B1.c: 39: };
  8521                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8522  0A85  319C  244F  318A   	fcall	_set_TimeoutCleared
  8523                           
  8524                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8525  0A88  319E  26E7  318A   	fcall	_CC2500_WriteByte
  8526                           
  8527                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8528  0A8B  0021               	movlb	1	; select bank1
  8529  0A8C  0853               	movf	_Tx_Length^(0+128),w
  8530  0A8D  0020               	movlb	0	; select bank0
  8531  0A8E  00A4               	movwf	??_CC2500_TxData
  8532  0A8F  0824               	movf	??_CC2500_TxData,w
  8533  0A90  0021               	movlb	1	; select bank1
  8534  0A91  00D1               	movwf	_SPI0Buffer^(0+128)
  8535                           
  8536                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8537  0A92  319E  26E7  318A   	fcall	_CC2500_WriteByte
  8538                           
  8539                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8540  0A95  0020               	movlb	0	; select bank0
  8541  0A96  01A5               	clrf	CC2500_TxData@loop_e
  8542  0A97                     l8764:	
  8543  0A97  0021               	movlb	1	; select bank1
  8544  0A98  0853               	movf	_Tx_Length^(0+128),w
  8545  0A99  0020               	movlb	0	; select bank0
  8546  0A9A  0225               	subwf	CC2500_TxData@loop_e,w
  8547  0A9B  1803               	btfsc	3,0
  8548  0A9C  2AB0               	goto	l231
  8549                           
  8550                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8551  0A9D  0825               	movf	CC2500_TxData@loop_e,w
  8552  0A9E  3EA0               	addlw	_RF_Data& (0+255)
  8553  0A9F  0086               	movwf	6
  8554  0AA0  3001               	movlw	1	; select bank3/4
  8555  0AA1  0087               	movwf	7
  8556  0AA2  0801               	movf	1,w
  8557  0AA3  00A4               	movwf	??_CC2500_TxData
  8558  0AA4  0824               	movf	??_CC2500_TxData,w
  8559  0AA5  0021               	movlb	1	; select bank1
  8560  0AA6  00D1               	movwf	_SPI0Buffer^(0+128)
  8561                           
  8562                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8563  0AA7  319E  26E7  318A   	fcall	_CC2500_WriteByte
  8564  0AAA  3001               	movlw	1
  8565  0AAB  0020               	movlb	0	; select bank0
  8566  0AAC  00A4               	movwf	??_CC2500_TxData
  8567  0AAD  0824               	movf	??_CC2500_TxData,w
  8568  0AAE  07A5               	addwf	CC2500_TxData@loop_e,f
  8569  0AAF  2A97               	goto	l8764
  8570  0AB0                     l231:	
  8571                           
  8572                           ;CC2500_B1.c: 48: }
  8573                           ;CC2500_B1.c: 49: RC0 = 1;
  8574  0AB0  140E               	bsf	14,0	;volatile
  8575                           
  8576                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8577  0AB1  3035               	movlw	53
  8578  0AB2  319F  2700  318A   	fcall	_CC2500_WriteCommand
  8579                           
  8580                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8581  0AB5  2AB9               	goto	l8770
  8582  0AB6                     l8768:	
  8583                           
  8584                           ;CC2500_B1.c: 52: Timeout_Counter();
  8585  0AB6  319E  2692  318A   	fcall	_Timeout_Counter
  8586  0AB9                     l8770:	
  8587  0AB9  0020               	movlb	0	; select bank0
  8588  0ABA  188E               	btfsc	14,1	;volatile
  8589  0ABB  2ABF               	goto	l8774
  8590  0ABC  0021               	movlb	1	; select bank1
  8591  0ABD  1D2B               	btfss	(_myMain^(0+128)+11),2
  8592  0ABE  2AB6               	goto	l8768
  8593  0ABF                     l8774:	
  8594                           
  8595                           ;CC2500_B1.c: 53: };
  8596                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8597  0ABF  319C  244F  318A   	fcall	_set_TimeoutCleared
  8598                           
  8599                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8600  0AC2  2AC6               	goto	l8778
  8601  0AC3                     l8776:	
  8602                           
  8603                           ;CC2500_B1.c: 57: Timeout_Counter();
  8604  0AC3  319E  2692  318A   	fcall	_Timeout_Counter
  8605  0AC6                     l8778:	
  8606  0AC6  0020               	movlb	0	; select bank0
  8607  0AC7  1C8E               	btfss	14,1	;volatile
  8608  0AC8  2ACC               	goto	l8782
  8609  0AC9  0021               	movlb	1	; select bank1
  8610  0ACA  1D2B               	btfss	(_myMain^(0+128)+11),2
  8611  0ACB  2AC3               	goto	l8776
  8612  0ACC                     l8782:	
  8613                           
  8614                           ;CC2500_B1.c: 58: };
  8615                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8616  0ACC  319C  244F  318A   	fcall	_set_TimeoutCleared
  8617                           
  8618                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8619  0ACF  3036               	movlw	54
  8620  0AD0  319F  2700  318A   	fcall	_CC2500_WriteCommand
  8621                           
  8622                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8623  0AD3  303B               	movlw	59
  8624  0AD4  319F  2700         	fcall	_CC2500_WriteCommand
  8625                           
  8626                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8627  0AD6  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8628  0AD7  0008               	return
  8629  0AD8                     __end_of_CC2500_TxData:	
  8630                           
  8631                           	psect	text39
  8632  0BA2                     __ptext39:	
  8633 ;; *************** function _CC2500_RxData *****************
  8634 ;; Defined at:
  8635 ;;		line 70 in file "../src/CC2500_B1.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;		None               void
  8642 ;; Registers used:
  8643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;Total ram usage:        2 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    7
  8656 ;; This function calls:
  8657 ;;		_CC2500_ReadByte
  8658 ;;		_CC2500_ReadStatus
  8659 ;;		_CC2500_WriteByte
  8660 ;;		_Timeout_Counter
  8661 ;;		_set_TimeoutCleared
  8662 ;; This function is called by:
  8663 ;;		_setRF_Main
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _CC2500_RxData
  8669  0BA2                     _CC2500_RxData:	
  8670                           
  8671                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8672                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8673                           
  8674                           ;incstack = 0
  8675                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8676  0BA2  0020               	movlb	0	; select bank0
  8677  0BA3  188E               	btfsc	14,1	;volatile
  8678  0BA4  2BA9               	goto	l8796
  8679  0BA5  2BB2               	goto	l8802
  8680  0BA6                     l8794:	
  8681                           ;CC2500_B1.c: 76: {
  8682                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8683                           
  8684                           
  8685                           ;CC2500_B1.c: 78: Timeout_Counter();
  8686  0BA6  319E  2692  318B   	fcall	_Timeout_Counter
  8687  0BA9                     l8796:	
  8688  0BA9  0020               	movlb	0	; select bank0
  8689  0BAA  1C8E               	btfss	14,1	;volatile
  8690  0BAB  2BAF               	goto	l8800
  8691  0BAC  0021               	movlb	1	; select bank1
  8692  0BAD  1D2B               	btfss	(_myMain^(0+128)+11),2
  8693  0BAE  2BA6               	goto	l8794
  8694  0BAF                     l8800:	
  8695                           
  8696                           ;CC2500_B1.c: 79: };
  8697                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8698  0BAF  319C  244F  318B   	fcall	_set_TimeoutCleared
  8699  0BB2                     l8802:	
  8700                           
  8701                           ;CC2500_B1.c: 81: }
  8702                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8703  0BB2  303B               	movlw	59
  8704  0BB3  3191  2117  318B   	fcall	_CC2500_ReadStatus
  8705                           
  8706                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8707  0BB6  0021               	movlb	1	; select bank1
  8708  0BB7  0856               	movf	_s_data^(0+128),w
  8709  0BB8  1903               	btfsc	3,2
  8710  0BB9  0008               	return
  8711                           
  8712                           ;CC2500_B1.c: 86: RC0 = 0;
  8713  0BBA  0020               	movlb	0	; select bank0
  8714  0BBB  100E               	bcf	14,0	;volatile
  8715                           
  8716                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8717  0BBC  30FF               	movlw	255
  8718  0BBD  00A4               	movwf	??_CC2500_RxData
  8719  0BBE  0824               	movf	??_CC2500_RxData,w
  8720  0BBF  0021               	movlb	1	; select bank1
  8721  0BC0  00D1               	movwf	_SPI0Buffer^(0+128)
  8722                           
  8723                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8724  0BC1  2BC5               	goto	l8812
  8725  0BC2                     l8810:	
  8726                           
  8727                           ;CC2500_B1.c: 89: Timeout_Counter();
  8728  0BC2  319E  2692  318B   	fcall	_Timeout_Counter
  8729  0BC5                     l8812:	
  8730  0BC5  0020               	movlb	0	; select bank0
  8731  0BC6  1E8E               	btfss	14,5	;volatile
  8732  0BC7  2BCB               	goto	l8816
  8733  0BC8  0021               	movlb	1	; select bank1
  8734  0BC9  1D2B               	btfss	(_myMain^(0+128)+11),2
  8735  0BCA  2BC2               	goto	l8810
  8736  0BCB                     l8816:	
  8737                           
  8738                           ;CC2500_B1.c: 90: };
  8739                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8740  0BCB  319C  244F  318B   	fcall	_set_TimeoutCleared
  8741                           
  8742                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8743  0BCE  319E  26E7  318B   	fcall	_CC2500_WriteByte
  8744                           
  8745                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8746  0BD1  319F  2786  318B   	fcall	_CC2500_ReadByte
  8747                           
  8748                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8749  0BD4  0021               	movlb	1	; select bank1
  8750  0BD5  0851               	movf	_SPI0Buffer^(0+128),w
  8751  0BD6  0020               	movlb	0	; select bank0
  8752  0BD7  00A4               	movwf	??_CC2500_RxData
  8753  0BD8  0824               	movf	??_CC2500_RxData,w
  8754  0BD9  0021               	movlb	1	; select bank1
  8755  0BDA  00D0               	movwf	_Rx_Length^(0+128)
  8756                           
  8757                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8758  0BDB  0020               	movlb	0	; select bank0
  8759  0BDC  01A5               	clrf	CC2500_RxData@loop_f
  8760  0BDD                     l8832:	
  8761  0BDD  0021               	movlb	1	; select bank1
  8762  0BDE  0850               	movf	_Rx_Length^(0+128),w
  8763  0BDF  0020               	movlb	0	; select bank0
  8764  0BE0  0225               	subwf	CC2500_RxData@loop_f,w
  8765  0BE1  1803               	btfsc	3,0
  8766  0BE2  2BF6               	goto	l8834
  8767                           
  8768                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8769  0BE3  319F  2786  318B   	fcall	_CC2500_ReadByte
  8770                           
  8771                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8772  0BE6  0021               	movlb	1	; select bank1
  8773  0BE7  0851               	movf	_SPI0Buffer^(0+128),w
  8774  0BE8  0020               	movlb	0	; select bank0
  8775  0BE9  00A4               	movwf	??_CC2500_RxData
  8776  0BEA  0825               	movf	CC2500_RxData@loop_f,w
  8777  0BEB  3EA0               	addlw	_RF_Data& (0+255)
  8778  0BEC  0086               	movwf	6
  8779  0BED  3001               	movlw	1	; select bank3/4
  8780  0BEE  0087               	movwf	7
  8781  0BEF  0824               	movf	??_CC2500_RxData,w
  8782  0BF0  0081               	movwf	1
  8783  0BF1  3001               	movlw	1
  8784  0BF2  00A4               	movwf	??_CC2500_RxData
  8785  0BF3  0824               	movf	??_CC2500_RxData,w
  8786  0BF4  07A5               	addwf	CC2500_RxData@loop_f,f
  8787  0BF5  2BDD               	goto	l8832
  8788  0BF6                     l8834:	
  8789                           
  8790                           ;CC2500_B1.c: 99: }
  8791                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8792  0BF6  319F  2786  318B   	fcall	_CC2500_ReadByte
  8793                           
  8794                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8795  0BF9  0021               	movlb	1	; select bank1
  8796  0BFA  0851               	movf	_SPI0Buffer^(0+128),w
  8797  0BFB  0020               	movlb	0	; select bank0
  8798  0BFC  00A4               	movwf	??_CC2500_RxData
  8799  0BFD  0824               	movf	??_CC2500_RxData,w
  8800  0BFE  0021               	movlb	1	; select bank1
  8801  0BFF  00CF               	movwf	_RSSI^(0+128)
  8802                           
  8803                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8804  0C00  319F  2786         	fcall	_CC2500_ReadByte
  8805                           
  8806                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8807  0C02  0021               	movlb	1	; select bank1
  8808  0C03  0851               	movf	_SPI0Buffer^(0+128),w
  8809  0C04  0020               	movlb	0	; select bank0
  8810  0C05  00A4               	movwf	??_CC2500_RxData
  8811  0C06  0824               	movf	??_CC2500_RxData,w
  8812  0C07  0021               	movlb	1	; select bank1
  8813  0C08  00CB               	movwf	_CRC^(0+128)
  8814                           
  8815                           ;CC2500_B1.c: 104: RC0 = 1;
  8816  0C09  0020               	movlb	0	; select bank0
  8817  0C0A  140E               	bsf	14,0	;volatile
  8818                           
  8819                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8820  0C0B  0021               	movlb	1	; select bank1
  8821  0C0C  1BCB               	btfsc	_CRC^(0+128),7
  8822                           
  8823                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8824  0C0D  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8825                           
  8826                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8827  0C0E  11BA               	bcf	_RF1^(0+128),3
  8828                           
  8829                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8830  0C0F  14BA               	bsf	_RF1^(0+128),1
  8831  0C10  0008               	return
  8832  0C11                     __end_of_CC2500_RxData:	
  8833                           
  8834                           	psect	text40
  8835  1117                     __ptext40:	
  8836 ;; *************** function _CC2500_ReadStatus *****************
  8837 ;; Defined at:
  8838 ;;		line 301 in file "../src/CC2500_B1.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  status_addr     1    wreg     unsigned char 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;		None               void
  8845 ;; Registers used:
  8846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;Total ram usage:        2 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    6
  8859 ;; This function calls:
  8860 ;;		_CC2500_ReadByte
  8861 ;;		_CC2500_WriteByte
  8862 ;;		_Timeout_Counter
  8863 ;;		_set_TimeoutCleared
  8864 ;; This function is called by:
  8865 ;;		_CC2500_RxData
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _CC2500_ReadStatus
  8871  1117                     _CC2500_ReadStatus:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8875                           ;CC2500_ReadStatus@status_addr stored from wreg
  8876  1117  0020               	movlb	0	; select bank0
  8877  1118  00A3               	movwf	CC2500_ReadStatus@status_addr
  8878                           
  8879                           ;CC2500_B1.c: 302: RC0 = 0;
  8880  1119  100E               	bcf	14,0	;volatile
  8881                           
  8882                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8883  111A  0823               	movf	CC2500_ReadStatus@status_addr,w
  8884  111B  3EC0               	addlw	192
  8885  111C  00A2               	movwf	??_CC2500_ReadStatus
  8886  111D  0822               	movf	??_CC2500_ReadStatus,w
  8887  111E  0021               	movlb	1	; select bank1
  8888  111F  00D1               	movwf	_SPI0Buffer^(0+128)
  8889                           
  8890                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  8891  1120  2924               	goto	l8608
  8892  1121                     l8606:	
  8893                           
  8894                           ;CC2500_B1.c: 306: Timeout_Counter();
  8895  1121  319E  2692  3191   	fcall	_Timeout_Counter
  8896  1124                     l8608:	
  8897  1124  0020               	movlb	0	; select bank0
  8898  1125  1E8E               	btfss	14,5	;volatile
  8899  1126  292A               	goto	l8612
  8900  1127  0021               	movlb	1	; select bank1
  8901  1128  1D2B               	btfss	(_myMain^(0+128)+11),2
  8902  1129  2921               	goto	l8606
  8903  112A                     l8612:	
  8904                           
  8905                           ;CC2500_B1.c: 307: };
  8906                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8907  112A  319C  244F  3191   	fcall	_set_TimeoutCleared
  8908                           
  8909                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8910  112D  319E  26E7  3191   	fcall	_CC2500_WriteByte
  8911                           
  8912                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8913  1130  319F  2786         	fcall	_CC2500_ReadByte
  8914                           
  8915                           ;CC2500_B1.c: 312: RC0 = 1;
  8916  1132  0020               	movlb	0	; select bank0
  8917  1133  140E               	bsf	14,0	;volatile
  8918                           
  8919                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8920  1134  0021               	movlb	1	; select bank1
  8921  1135  0851               	movf	_SPI0Buffer^(0+128),w
  8922  1136  0020               	movlb	0	; select bank0
  8923  1137  00A2               	movwf	??_CC2500_ReadStatus
  8924  1138  0822               	movf	??_CC2500_ReadStatus,w
  8925  1139  0021               	movlb	1	; select bank1
  8926  113A  00D6               	movwf	_s_data^(0+128)
  8927  113B  0008               	return
  8928  113C                     __end_of_CC2500_ReadStatus:	
  8929                           
  8930                           	psect	text41
  8931  1F86                     __ptext41:	
  8932 ;; *************** function _CC2500_ReadByte *****************
  8933 ;; Defined at:
  8934 ;;		line 235 in file "../src/CC2500_B1.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;		None               void
  8941 ;; Registers used:
  8942 ;;		wreg, status,2, status,0
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        2 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    5
  8955 ;; This function calls:
  8956 ;;		Nothing
  8957 ;; This function is called by:
  8958 ;;		_CC2500_RxData
  8959 ;;		_CC2500_ReadStatus
  8960 ;;		_CC2500_ReadREG
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           
  8965                           ;psect for function _CC2500_ReadByte
  8966  1F86                     _CC2500_ReadByte:	
  8967                           
  8968                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8969                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8970                           
  8971                           ;incstack = 0
  8972                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8973  1F86  0020               	movlb	0	; select bank0
  8974  1F87  01A1               	clrf	CC2500_ReadByte@loop_b
  8975  1F88                     L2:	
  8976  1F88  3008               	movlw	8
  8977  1F89  0221               	subwf	CC2500_ReadByte@loop_b,w
  8978  1F8A  1803               	btfsc	3,0
  8979  1F8B  0008               	return
  8980                           
  8981                           ;CC2500_B1.c: 238: RC3 = 1;
  8982  1F8C  158E               	bsf	14,3	;volatile
  8983                           
  8984                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  8985  1F8D  1003               	clrc
  8986  1F8E  0021               	movlb	1	; select bank1
  8987  1F8F  0DD1               	rlf	_SPI0Buffer^(0+128),f
  8988                           
  8989                           ;CC2500_B1.c: 240: if (RC5 == 1)
  8990  1F90  0020               	movlb	0	; select bank0
  8991  1F91  1E8E               	btfss	14,5	;volatile
  8992  1F92  2F96               	goto	l8508
  8993                           
  8994                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  8995  1F93  0021               	movlb	1	; select bank1
  8996  1F94  1451               	bsf	_SPI0Buffer^(0+128),0
  8997  1F95  2F9C               	goto	l8510
  8998  1F96                     l8508:	
  8999                           
  9000                           ;CC2500_B1.c: 242: else
  9001                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9002  1F96  30FE               	movlw	254
  9003  1F97  0020               	movlb	0	; select bank0
  9004  1F98  00A0               	movwf	??_CC2500_ReadByte
  9005  1F99  0820               	movf	??_CC2500_ReadByte,w
  9006  1F9A  0021               	movlb	1	; select bank1
  9007  1F9B  05D1               	andwf	_SPI0Buffer^(0+128),f
  9008  1F9C                     l8510:	
  9009                           
  9010                           ;CC2500_B1.c: 244: RC3 = 0;
  9011  1F9C  0020               	movlb	0	; select bank0
  9012  1F9D  118E               	bcf	14,3	;volatile
  9013  1F9E  3001               	movlw	1
  9014  1F9F  00A0               	movwf	??_CC2500_ReadByte
  9015  1FA0  0820               	movf	??_CC2500_ReadByte,w
  9016  1FA1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9017  1FA2  2F88               	goto	L2
  9018  1FA3                     __end_of_CC2500_ReadByte:	
  9019                           
  9020                           	psect	text42
  9021  1C26                     __ptext42:	
  9022 ;; *************** function _RF_Initialization *****************
  9023 ;; Defined at:
  9024 ;;		line 9 in file "../src/RF_Control_B1.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;		None
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;		None
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        0 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    6
  9045 ;; This function calls:
  9046 ;;		_setRF_Initialization
  9047 ;; This function is called by:
  9048 ;;		_main
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _RF_Initialization
  9054  1C26                     _RF_Initialization:	
  9055                           
  9056                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9060  1C26  319C  24F5         	fcall	_setRF_Initialization
  9061  1C28  0008               	return
  9062  1C29                     __end_of_RF_Initialization:	
  9063                           
  9064                           	psect	text43
  9065  1CF5                     __ptext43:	
  9066 ;; *************** function _setRF_Initialization *****************
  9067 ;; Defined at:
  9068 ;;		line 43 in file "../src/RF_Control_B1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;		None               void
  9075 ;; Registers used:
  9076 ;;		wreg
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;Total ram usage:        1 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    5
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_RF_Initialization
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _setRF_Initialization
  9098  1CF5                     _setRF_Initialization:	
  9099                           
  9100                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _setRF_Initialization: [wreg]
  9104  1CF5  3015               	movlw	21
  9105  1CF6  0020               	movlb	0	; select bank0
  9106  1CF7  00A0               	movwf	??_setRF_Initialization
  9107  1CF8  0820               	movf	??_setRF_Initialization,w
  9108  1CF9  0021               	movlb	1	; select bank1
  9109  1CFA  00D3               	movwf	_Tx_Length^(0+128)
  9110                           
  9111                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9112  1CFB  3005               	movlw	5
  9113  1CFC  00C1               	movwf	(_RF1^(0+128)+7)
  9114  1CFD  3000               	movlw	0
  9115  1CFE  00C2               	movwf	(_RF1^(0+128)+8)
  9116  1CFF  0008               	return
  9117  1D00                     __end_of_setRF_Initialization:	
  9118                           
  9119                           	psect	text44
  9120  1E21                     __ptext44:	
  9121 ;; *************** function _Mcu_Initialization *****************
  9122 ;; Defined at:
  9123 ;;		line 30 in file "../src/MCU_B1.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;		None
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;		None
  9128 ;; Return value:  Size  Location     Type
  9129 ;;		None               void
  9130 ;; Registers used:
  9131 ;;		wreg, status,2, status,0, pclath, cstack
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;Total ram usage:        0 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    6
  9144 ;; This function calls:
  9145 ;;		_ADC_Set
  9146 ;;		_Fosc_Set
  9147 ;;		_IOC_Set
  9148 ;;		_IO_Set
  9149 ;;		_TMR1_Set
  9150 ;;		_WDT_Set
  9151 ;; This function is called by:
  9152 ;;		_main
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           
  9157                           ;psect for function _Mcu_Initialization
  9158  1E21                     _Mcu_Initialization:	
  9159                           
  9160                           ;MCU_B1.c: 32: Fosc_Set();
  9161                           
  9162                           ;incstack = 0
  9163                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9164  1E21  3187  27FC  319E   	fcall	_Fosc_Set
  9165                           
  9166                           ;MCU_B1.c: 34: IO_Set();
  9167  1E24  319F  2734  319E   	fcall	_IO_Set
  9168                           
  9169                           ;MCU_B1.c: 36: ;;
  9170                           ;MCU_B1.c: 38: TMR1_Set();
  9171  1E27  319D  2553  319E   	fcall	_TMR1_Set
  9172                           
  9173                           ;MCU_B1.c: 40: ADC_Set();
  9174  1E2A  319C  2466  319E   	fcall	_ADC_Set
  9175                           
  9176                           ;MCU_B1.c: 42: ;;
  9177                           ;MCU_B1.c: 44: ;;
  9178                           ;MCU_B1.c: 46: IOC_Set();
  9179  1E2D  319D  2547  319E   	fcall	_IOC_Set
  9180                           
  9181                           ;MCU_B1.c: 48: ;;
  9182                           ;MCU_B1.c: 50: ;;
  9183                           ;MCU_B1.c: 52: WDT_Set();
  9184  1E30  319C  24EA         	fcall	_WDT_Set
  9185  1E32  0008               	return
  9186  1E33                     __end_of_Mcu_Initialization:	
  9187                           
  9188                           	psect	text45
  9189  1CEA                     __ptext45:	
  9190 ;; *************** function _WDT_Set *****************
  9191 ;; Defined at:
  9192 ;;		line 1084 in file "../src/MCU_B1.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;		None               void
  9199 ;; Registers used:
  9200 ;;		wreg
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;Total ram usage:        1 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    5
  9213 ;; This function calls:
  9214 ;;		Nothing
  9215 ;; This function is called by:
  9216 ;;		_Mcu_Initialization
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           
  9221                           ;psect for function _WDT_Set
  9222  1CEA                     _WDT_Set:	
  9223                           
  9224                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9225                           
  9226                           ;incstack = 0
  9227                           ; Regs used in _WDT_Set: [wreg]
  9228  1CEA  3017               	movlw	23
  9229  1CEB  0021               	movlb	1	; select bank1
  9230  1CEC  0097               	movwf	23	;volatile
  9231                           
  9232                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9233  1CED  1449               	bsf	_WDT^(0+128),0
  9234                           
  9235                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9236  1CEE  300A               	movlw	10
  9237  1CEF  0020               	movlb	0	; select bank0
  9238  1CF0  00A0               	movwf	??_WDT_Set
  9239  1CF1  0820               	movf	??_WDT_Set,w
  9240  1CF2  0021               	movlb	1	; select bank1
  9241  1CF3  00CA               	movwf	(_WDT^(0+128)+1)
  9242  1CF4  0008               	return
  9243  1CF5                     __end_of_WDT_Set:	
  9244                           
  9245                           	psect	text46
  9246  1D53                     __ptext46:	
  9247 ;; *************** function _TMR1_Set *****************
  9248 ;; Defined at:
  9249 ;;		line 200 in file "../src/MCU_B1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;		None
  9254 ;; Return value:  Size  Location     Type
  9255 ;;		None               void
  9256 ;; Registers used:
  9257 ;;		wreg
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;Total ram usage:        0 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:    5
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_Mcu_Initialization
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _TMR1_Set
  9279  1D53                     _TMR1_Set:	
  9280                           
  9281                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _TMR1_Set: [wreg]
  9285  1D53  3041               	movlw	65
  9286  1D54  0020               	movlb	0	; select bank0
  9287  1D55  0098               	movwf	24	;volatile
  9288                           
  9289                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
  9290  1D56  30FA               	movlw	250
  9291  1D57  0097               	movwf	23	;volatile
  9292                           
  9293                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
  9294  1D58  3038               	movlw	56
  9295  1D59  0096               	movwf	22	;volatile
  9296                           
  9297                           ;MCU_B1.c: 204: TMR1IE = 1;
  9298  1D5A  0021               	movlb	1	; select bank1
  9299  1D5B  1411               	bsf	17,0	;volatile
  9300                           
  9301                           ;MCU_B1.c: 205: PEIE = 1;
  9302  1D5C  170B               	bsf	11,6	;volatile
  9303                           
  9304                           ;MCU_B1.c: 206: GIE = 1;
  9305  1D5D  178B               	bsf	11,7	;volatile
  9306  1D5E  0008               	return
  9307  1D5F                     __end_of_TMR1_Set:	
  9308                           
  9309                           	psect	text47
  9310  1F34                     __ptext47:	
  9311 ;; *************** function _IO_Set *****************
  9312 ;; Defined at:
  9313 ;;		line 60 in file "../src/MCU_B1.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;		None               void
  9320 ;; Registers used:
  9321 ;;		wreg, status,2
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        0 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    5
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_Mcu_Initialization
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           
  9342                           ;psect for function _IO_Set
  9343  1F34                     _IO_Set:	
  9344                           
  9345                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9346                           
  9347                           ;incstack = 0
  9348                           ; Regs used in _IO_Set: [wreg+status,2]
  9349  1F34  30F7               	movlw	247
  9350  1F35  0021               	movlb	1	; select bank1
  9351  1F36  008C               	movwf	12	;volatile
  9352                           
  9353                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9354  1F37  3004               	movlw	4
  9355  1F38  008D               	movwf	13	;volatile
  9356                           
  9357                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9358  1F39  3026               	movlw	38
  9359  1F3A  008E               	movwf	14	;volatile
  9360                           
  9361                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9362  1F3B  0022               	movlb	2	; select bank2
  9363  1F3C  018C               	clrf	12	;volatile
  9364                           
  9365                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9366  1F3D  018D               	clrf	13	;volatile
  9367                           
  9368                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9369  1F3E  018E               	clrf	14	;volatile
  9370                           
  9371                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9372  1F3F  300E               	movlw	14
  9373  1F40  0023               	movlb	3	; select bank3
  9374  1F41  008C               	movwf	12	;volatile
  9375                           
  9376                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9377  1F42  018D               	clrf	13	;volatile
  9378                           
  9379                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9380  1F43  018E               	clrf	14	;volatile
  9381                           
  9382                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9383  1F44  30F7               	movlw	247
  9384  1F45  0020               	movlb	0	; select bank0
  9385  1F46  008C               	movwf	12	;volatile
  9386                           
  9387                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9388  1F47  3004               	movlw	4
  9389  1F48  008D               	movwf	13	;volatile
  9390                           
  9391                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9392  1F49  3026               	movlw	38
  9393  1F4A  008E               	movwf	14	;volatile
  9394                           
  9395                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
  9396  1F4B  0024               	movlb	4	; select bank4
  9397  1F4C  018D               	clrf	13	;volatile
  9398  1F4D  0008               	return
  9399  1F4E                     __end_of_IO_Set:	
  9400                           
  9401                           	psect	text48
  9402  1D47                     __ptext48:	
  9403 ;; *************** function _IOC_Set *****************
  9404 ;; Defined at:
  9405 ;;		line 366 in file "../src/MCU_B1.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;		None
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;		None
  9410 ;; Return value:  Size  Location     Type
  9411 ;;		None               void
  9412 ;; Registers used:
  9413 ;;		wreg, status,2
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;Total ram usage:        0 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    5
  9426 ;; This function calls:
  9427 ;;		Nothing
  9428 ;; This function is called by:
  9429 ;;		_Mcu_Initialization
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           
  9434                           ;psect for function _IOC_Set
  9435  1D47                     _IOC_Set:	
  9436                           
  9437                           ;MCU_B1.c: 367: WPUB2 = 0;
  9438                           
  9439                           ;incstack = 0
  9440                           ; Regs used in _IOC_Set: [wreg+status,2]
  9441  1D47  0024               	movlb	4	; select bank4
  9442  1D48  110D               	bcf	13,2	;volatile
  9443                           
  9444                           ;MCU_B1.c: 387: IOCBP = 0b00000100;
  9445  1D49  3004               	movlw	4
  9446  1D4A  0027               	movlb	7	; select bank7
  9447  1D4B  0094               	movwf	20	;volatile
  9448                           
  9449                           ;MCU_B1.c: 388: IOCBN = 0b00000000;
  9450  1D4C  0195               	clrf	21	;volatile
  9451                           
  9452                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9453  1D4D  0196               	clrf	22	;volatile
  9454                           
  9455                           ;MCU_B1.c: 394: IOCIE = 1;
  9456  1D4E  158B               	bsf	11,3	;volatile
  9457                           
  9458                           ;MCU_B1.c: 395: IOCIF = 0;
  9459  1D4F  100B               	bcf	11,0	;volatile
  9460                           
  9461                           ;MCU_B1.c: 396: PEIE = 1;
  9462  1D50  170B               	bsf	11,6	;volatile
  9463                           
  9464                           ;MCU_B1.c: 397: GIE = 1;
  9465  1D51  178B               	bsf	11,7	;volatile
  9466  1D52  0008               	return
  9467  1D53                     __end_of_IOC_Set:	
  9468                           
  9469                           	psect	text49
  9470  07FC                     __ptext49:	
  9471 ;; *************** function _Fosc_Set *****************
  9472 ;; Defined at:
  9473 ;;		line 56 in file "../src/MCU_B1.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;		None
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		wreg
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;Total ram usage:        0 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    5
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_Mcu_Initialization
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function _Fosc_Set
  9503  07FC                     _Fosc_Set:	
  9504                           
  9505                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in _Fosc_Set: [wreg]
  9509  07FC  3078               	movlw	120
  9510  07FD  0021               	movlb	1	; select bank1
  9511  07FE  0099               	movwf	25	;volatile
  9512  07FF  0008               	return
  9513  0800                     __end_of_Fosc_Set:	
  9514                           
  9515                           	psect	text50
  9516  1C66                     __ptext50:	
  9517 ;; *************** function _ADC_Set *****************
  9518 ;; Defined at:
  9519 ;;		line 420 in file "../src/MCU_B1.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;		None
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;		None
  9524 ;; Return value:  Size  Location     Type
  9525 ;;		None               void
  9526 ;; Registers used:
  9527 ;;		wreg
  9528 ;; Tracked objects:
  9529 ;;		On entry : 0/0
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;Total ram usage:        0 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    5
  9540 ;; This function calls:
  9541 ;;		Nothing
  9542 ;; This function is called by:
  9543 ;;		_Mcu_Initialization
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           
  9548                           ;psect for function _ADC_Set
  9549  1C66                     _ADC_Set:	
  9550                           
  9551                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in _ADC_Set: [wreg]
  9555  1C66  30F3               	movlw	243
  9556  1C67  0021               	movlb	1	; select bank1
  9557  1C68  009E               	movwf	30	;volatile
  9558                           
  9559                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9560  1C69  30C1               	movlw	193
  9561  1C6A  0022               	movlb	2	; select bank2
  9562  1C6B  0097               	movwf	23	;volatile
  9563  1C6C  0008               	return
  9564  1C6D                     __end_of_ADC_Set:	
  9565                           
  9566                           	psect	text51
  9567  0041                     __ptext51:	
  9568 ;; *************** function _Load_Main *****************
  9569 ;; Defined at:
  9570 ;;		line 39 in file "../src/OverLoad_B1.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;		None
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  i               2   12[BANK0 ] int 
  9575 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9576 ;;  error           1   10[BANK0 ] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        6 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    7
  9593 ;; This function calls:
  9594 ;;		___lwdiv
  9595 ;;		___wmul
  9596 ;;		_getAll_DimmerLights_AdjSw
  9597 ;;		_getDimmer_LoadGO
  9598 ;;		_getDimmer_Load_Status
  9599 ;;		_getMain_All_Error_Status
  9600 ;;		_getMain_LightsStatus
  9601 ;;		_getMain_Lights_Count
  9602 ;;		_setLoad_AH_AL_Restore
  9603 ;; This function is called by:
  9604 ;;		_main
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           
  9609                           ;psect for function _Load_Main
  9610  0041                     _Load_Main:	
  9611                           
  9612                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9613                           
  9614                           ;incstack = 0
  9615                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9616  0041  3000               	movlw	0
  9617  0042  3192  2270  3180   	fcall	_getMain_All_Error_Status
  9618  0045  0020               	movlb	0	; select bank0
  9619  0046  00A8               	movwf	??_Load_Main
  9620  0047  0828               	movf	??_Load_Main,w
  9621  0048  00AA               	movwf	Load_Main@error
  9622                           
  9623                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9624  0049  01AB               	clrf	Load_Main@Load_Status
  9625                           
  9626                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9627  004A  0022               	movlb	2	; select bank2
  9628  004B  1C25               	btfss	_Load^(0+256),0
  9629  004C  29E7               	goto	l1563
  9630                           
  9631                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9632  004D  319C  24B4  3180   	fcall	_getMain_LightsStatus
  9633  0050  3800               	iorlw	0
  9634  0051  1D03               	skipz
  9635  0052  2855               	goto	l9944
  9636                           
  9637                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9638  0053  0022               	movlb	2	; select bank2
  9639  0054  2876               	goto	l9962
  9640  0055                     l9944:	
  9641                           ;OverLoad_B1.c: 66: } else {
  9642                           
  9643                           
  9644                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9645  0055  0020               	movlb	0	; select bank0
  9646  0056  08AA               	movf	Load_Main@error,f
  9647  0057  1D03               	skipz
  9648  0058  2873               	goto	l1566
  9649  0059  3191  21B6  3180   	fcall	_getAll_DimmerLights_AdjSw
  9650  005C  3800               	iorlw	0
  9651  005D  1D03               	skipz
  9652  005E  2873               	goto	l1566
  9653                           
  9654                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9655  005F  0022               	movlb	2	; select bank2
  9656  0060  14A5               	bsf	_Load^(0+256),1
  9657                           
  9658                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9659  0061  319C  2475  3180   	fcall	_getDimmer_LoadGO
  9660  0064  3A01               	xorlw	1
  9661  0065  1D03               	skipz
  9662  0066  286E               	goto	l1567
  9663                           
  9664                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9665  0067  0022               	movlb	2	; select bank2
  9666  0068  1DA5               	btfss	_Load^(0+256),3
  9667  0069  1BA5               	btfsc	_Load^(0+256),7
  9668  006A  2877               	goto	l1565
  9669                           
  9670                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9671  006B  15A5               	bsf	_Load^(0+256),3
  9672                           
  9673                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9674  006C  01CE               	clrf	(_Load^(0+256)+41)
  9675                           
  9676                           ;OverLoad_B1.c: 76: }
  9677                           ;OverLoad_B1.c: 77: } else {
  9678  006D  2877               	goto	l1565
  9679  006E                     l1567:	
  9680                           
  9681                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9682  006E  0022               	movlb	2	; select bank2
  9683  006F  1FA5               	btfss	_Load^(0+256),7
  9684  0070  2877               	goto	l1565
  9685                           
  9686                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9687  0071  13A5               	bcf	_Load^(0+256),7
  9688                           
  9689                           ;OverLoad_B1.c: 80: }
  9690                           ;OverLoad_B1.c: 81: }
  9691                           ;OverLoad_B1.c: 82: } else {
  9692  0072  2877               	goto	l1565
  9693  0073                     l1566:	
  9694                           
  9695                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9696  0073  0022               	movlb	2	; select bank2
  9697  0074  1CA5               	btfss	_Load^(0+256),1
  9698  0075  2877               	goto	l1565
  9699  0076                     l9962:	
  9700                           
  9701                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9702  0076  10A5               	bcf	_Load^(0+256),1
  9703  0077                     l1565:	
  9704                           
  9705                           ;OverLoad_B1.c: 85: }
  9706                           ;OverLoad_B1.c: 86: }
  9707                           ;OverLoad_B1.c: 88: }
  9708                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9709  0077  1CA5               	btfss	_Load^(0+256),1
  9710  0078  29C3               	goto	l1573
  9711                           
  9712                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9713  0079  1525               	bsf	_Load^(0+256),2
  9714                           
  9715                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9716  007A  1E25               	btfss	_Load^(0+256),4
  9717  007B  29C1               	goto	l1574
  9718                           
  9719                           ;OverLoad_B1.c: 95: Load.Time++;
  9720  007C  3001               	movlw	1
  9721  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9722  007E  3000               	movlw	0
  9723  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9724                           
  9725                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9726  0080  3000               	movlw	0
  9727  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9728  0082  3005               	movlw	5
  9729  0083  1903               	skipnz
  9730  0084  0226               	subwf	(_Load^(0+256)+1),w
  9731  0085  1C03               	skipc
  9732  0086  0008               	return
  9733                           
  9734                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9735  0087  01A6               	clrf	(_Load^(0+256)+1)
  9736  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9737                           
  9738                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9739  0089  1225               	bcf	_Load^(0+256),4
  9740                           
  9741                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9742  008A  3001               	movlw	1
  9743  008B  0020               	movlb	0	; select bank0
  9744  008C  00AC               	movwf	Load_Main@i
  9745  008D  3000               	movlw	0
  9746  008E  00AD               	movwf	Load_Main@i+1
  9747  008F  082D               	movf	Load_Main@i+1,w
  9748  0090  3A80               	xorlw	128
  9749  0091  00A8               	movwf	??_Load_Main
  9750  0092  3080               	movlw	128
  9751  0093  0228               	subwf	??_Load_Main,w
  9752  0094  1D03               	skipz
  9753  0095  2898               	goto	u11395
  9754  0096  3004               	movlw	4
  9755  0097  022C               	subwf	Load_Main@i,w
  9756  0098                     u11395:	
  9757  0098  1803               	btfsc	3,0
  9758  0099  28CC               	goto	l9984
  9759  009A                     l9978:	
  9760                           
  9761                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9762  009A  0020               	movlb	0	; select bank0
  9763  009B  352C               	lslf	Load_Main@i,w
  9764  009C  3E30               	addlw	(_Load+11)& (0+255)
  9765  009D  0086               	movwf	6
  9766  009E  3001               	movlw	1	; select bank2/3
  9767  009F  0087               	movwf	7
  9768  00A0  3F40               	moviw [0]fsr1
  9769  00A1  00A8               	movwf	??_Load_Main
  9770  00A2  3F41               	moviw [1]fsr1
  9771  00A3  00A9               	movwf	??_Load_Main+1
  9772  00A4  0828               	movf	??_Load_Main,w
  9773  00A5  0022               	movlb	2	; select bank2
  9774  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9775  00A7  0020               	movlb	0	; select bank0
  9776  00A8  0829               	movf	??_Load_Main+1,w
  9777  00A9  0022               	movlb	2	; select bank2
  9778  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9779                           
  9780                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9781  00AB  0020               	movlb	0	; select bank0
  9782  00AC  352C               	lslf	Load_Main@i,w
  9783  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9784  00AE  0086               	movwf	6
  9785  00AF  3001               	movlw	1	; select bank2/3
  9786  00B0  0087               	movwf	7
  9787  00B1  3F40               	moviw [0]fsr1
  9788  00B2  00A8               	movwf	??_Load_Main
  9789  00B3  3F41               	moviw [1]fsr1
  9790  00B4  00A9               	movwf	??_Load_Main+1
  9791  00B5  0828               	movf	??_Load_Main,w
  9792  00B6  0022               	movlb	2	; select bank2
  9793  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9794  00B8  0020               	movlb	0	; select bank0
  9795  00B9  0829               	movf	??_Load_Main+1,w
  9796  00BA  0022               	movlb	2	; select bank2
  9797  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9798  00BC  3001               	movlw	1
  9799  00BD  0020               	movlb	0	; select bank0
  9800  00BE  07AC               	addwf	Load_Main@i,f
  9801  00BF  3000               	movlw	0
  9802  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9803  00C1  082D               	movf	Load_Main@i+1,w
  9804  00C2  3A80               	xorlw	128
  9805  00C3  00A8               	movwf	??_Load_Main
  9806  00C4  3080               	movlw	128
  9807  00C5  0228               	subwf	??_Load_Main,w
  9808  00C6  1D03               	skipz
  9809  00C7  28CA               	goto	u11405
  9810  00C8  3004               	movlw	4
  9811  00C9  022C               	subwf	Load_Main@i,w
  9812  00CA                     u11405:	
  9813  00CA  1C03               	skipc
  9814  00CB  289A               	goto	l9978
  9815  00CC                     l9984:	
  9816                           
  9817                           ;OverLoad_B1.c: 103: }
  9818                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9819  00CC  3003               	movlw	3
  9820  00CD  0020               	movlb	0	; select bank0
  9821  00CE  00A0               	movwf	___lwdiv@divisor
  9822  00CF  3000               	movlw	0
  9823  00D0  00A1               	movwf	___lwdiv@divisor+1
  9824  00D1  0022               	movlb	2	; select bank2
  9825  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9826  00D3  0020               	movlb	0	; select bank0
  9827  00D4  01A3               	clrf	___lwdiv@dividend+1
  9828  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9829  00D6  0022               	movlb	2	; select bank2
  9830  00D7  082A               	movf	(_Load^(0+256)+5),w
  9831  00D8  0020               	movlb	0	; select bank0
  9832  00D9  01A2               	clrf	___lwdiv@dividend
  9833  00DA  07A2               	addwf	___lwdiv@dividend,f
  9834  00DB  3193  23AD  3180   	fcall	___lwdiv
  9835  00DE  0020               	movlb	0	; select bank0
  9836  00DF  0821               	movf	?___lwdiv+1,w
  9837  00E0  0022               	movlb	2	; select bank2
  9838  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9839  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9840  00E3  0020               	movlb	0	; select bank0
  9841  00E4  0820               	movf	?___lwdiv,w
  9842  00E5  0022               	movlb	2	; select bank2
  9843  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9844  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9845                           
  9846                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9847  00E8  3003               	movlw	3
  9848  00E9  0020               	movlb	0	; select bank0
  9849  00EA  00A0               	movwf	___lwdiv@divisor
  9850  00EB  3000               	movlw	0
  9851  00EC  00A1               	movwf	___lwdiv@divisor+1
  9852  00ED  0022               	movlb	2	; select bank2
  9853  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9854  00EF  0020               	movlb	0	; select bank0
  9855  00F0  01A3               	clrf	___lwdiv@dividend+1
  9856  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9857  00F2  0022               	movlb	2	; select bank2
  9858  00F3  082C               	movf	(_Load^(0+256)+7),w
  9859  00F4  0020               	movlb	0	; select bank0
  9860  00F5  01A2               	clrf	___lwdiv@dividend
  9861  00F6  07A2               	addwf	___lwdiv@dividend,f
  9862  00F7  3193  23AD  3180   	fcall	___lwdiv
  9863  00FA  0020               	movlb	0	; select bank0
  9864  00FB  0821               	movf	?___lwdiv+1,w
  9865  00FC  0022               	movlb	2	; select bank2
  9866  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9867  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9868  00FF  0020               	movlb	0	; select bank0
  9869  0100  0820               	movf	?___lwdiv,w
  9870  0101  0022               	movlb	2	; select bank2
  9871  0102  01AC               	clrf	(_Load^(0+256)+7)
  9872  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9873                           
  9874                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9875  0104  319F  276A  3180   	fcall	_setLoad_AH_AL_Restore
  9876                           
  9877                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  9878  0107  0022               	movlb	2	; select bank2
  9879  0108  082B               	movf	((_Load+1)^(0+256)+5),w
  9880  0109  022D               	subwf	((_Load+1)^(0+256)+7),w
  9881  010A  1D03               	skipz
  9882  010B  290E               	goto	u11415
  9883  010C  082A               	movf	(_Load^(0+256)+5),w
  9884  010D  022C               	subwf	(_Load^(0+256)+7),w
  9885  010E                     u11415:	
  9886  010E  1803               	skipnc
  9887  010F  0008               	return
  9888                           
  9889                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9890  0110  3005               	movlw	5
  9891  0111  3E25               	addlw	_Load& (0+255)
  9892  0112  0086               	movwf	6
  9893  0113  3001               	movlw	1	; select bank2/3
  9894  0114  0087               	movwf	7
  9895  0115  092C               	comf	(_Load^(0+256)+7),w
  9896  0116  0020               	movlb	0	; select bank0
  9897  0117  00A8               	movwf	??_Load_Main
  9898  0118  0022               	movlb	2	; select bank2
  9899  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9900  011A  0020               	movlb	0	; select bank0
  9901  011B  00A9               	movwf	??_Load_Main+1
  9902  011C  0AA8               	incf	??_Load_Main,f
  9903  011D  1903               	skipnz
  9904  011E  0AA9               	incf	??_Load_Main+1,f
  9905  011F  3F40               	moviw [0]fsr1
  9906  0120  0728               	addwf	??_Load_Main,w
  9907  0121  0022               	movlb	2	; select bank2
  9908  0122  00C4               	movwf	(_Load^(0+256)+31)
  9909  0123  3F41               	moviw [1]fsr1
  9910  0124  0020               	movlb	0	; select bank0
  9911  0125  3D29               	addwfc	??_Load_Main+1,w
  9912  0126  0022               	movlb	2	; select bank2
  9913  0127  00C5               	movwf	(_Load^(0+256)+32)
  9914                           
  9915                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9916  0128  01AA               	clrf	(_Load^(0+256)+5)
  9917  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9918                           
  9919                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9920  012A  01AC               	clrf	(_Load^(0+256)+7)
  9921  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9922                           
  9923                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9924  012C  1DA5               	btfss	_Load^(0+256),3
  9925  012D  298D               	goto	l10024
  9926                           
  9927                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9928  012E  3002               	movlw	2
  9929  012F  024E               	subwf	(_Load^(0+256)+41),w
  9930  0130  1803               	skipnc
  9931  0131  298D               	goto	l10024
  9932                           
  9933                           ;OverLoad_B1.c: 115: Load.Count++;
  9934  0132  3001               	movlw	1
  9935  0133  0020               	movlb	0	; select bank0
  9936  0134  00A8               	movwf	??_Load_Main
  9937  0135  0828               	movf	??_Load_Main,w
  9938  0136  0022               	movlb	2	; select bank2
  9939  0137  07CE               	addwf	(_Load^(0+256)+41),f
  9940                           
  9941                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  9942  0138  319C  247D  3180   	fcall	_getDimmer_Load_Status
  9943  013B  0020               	movlb	0	; select bank0
  9944  013C  00A8               	movwf	??_Load_Main
  9945  013D  0828               	movf	??_Load_Main,w
  9946  013E  00AB               	movwf	Load_Main@Load_Status
  9947                           
  9948                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  9949  013F  319D  253B  3180   	fcall	_getMain_Lights_Count
  9950  0142  0020               	movlb	0	; select bank0
  9951  0143  00A8               	movwf	??_Load_Main
  9952  0144  0828               	movf	??_Load_Main,w
  9953  0145  0022               	movlb	2	; select bank2
  9954  0146  00D1               	movwf	(_Load^(0+256)+44)
  9955                           
  9956                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  9957  0147  084E               	movf	(_Load^(0+256)+41),w
  9958  0148  3A01               	xorlw	1
  9959  0149  1D03               	skipz
  9960  014A  2955               	goto	l10010
  9961                           
  9962                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  9963  014B  3002               	movlw	2
  9964  014C  0020               	movlb	0	; select bank0
  9965  014D  00A8               	movwf	??_Load_Main
  9966  014E  0828               	movf	??_Load_Main,w
  9967  014F  0022               	movlb	2	; select bank2
  9968  0150  00D0               	movwf	(_Load^(0+256)+43)
  9969                           
  9970                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
  9971  0151  3074               	movlw	116
  9972  0152  00CA               	movwf	(_Load^(0+256)+37)
  9973  0153  3004               	movlw	4
  9974  0154  2960               	goto	L3
  9975  0155                     l10010:	
  9976                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  9977                           
  9978  0155  084E               	movf	(_Load^(0+256)+41),w
  9979  0156  3A02               	xorlw	2
  9980  0157  1D03               	skipz
  9981  0158  298D               	goto	l10024
  9982                           
  9983                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
  9984  0159  0851               	movf	(_Load^(0+256)+44),w
  9985  015A  3A01               	xorlw	1
  9986  015B  1D03               	skipz
  9987  015C  2962               	goto	l10016
  9988                           
  9989                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.8*57);
  9990  015D  3066               	movlw	102
  9991  015E  00CA               	movwf	(_Load^(0+256)+37)
  9992  015F  3000               	movlw	0
  9993  0160                     L3:	
  9994  0160  00CB               	movwf	(_Load^(0+256)+38)
  9995                           
  9996                           ;OverLoad_B1.c: 124: } else {
  9997  0161  298D               	goto	l10024
  9998  0162                     l10016:	
  9999                           
 10000                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10001  0162  0020               	movlb	0	; select bank0
 10002  0163  08AB               	movf	Load_Main@Load_Status,f
 10003  0164  1D03               	skipz
 10004  0165  2981               	goto	l10020
 10005                           
 10006                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.8*57) * Load.LightsCount;
 10007  0166  0022               	movlb	2	; select bank2
 10008  0167  0851               	movf	(_Load^(0+256)+44),w
 10009  0168  0020               	movlb	0	; select bank0
 10010  0169  00A8               	movwf	??_Load_Main
 10011  016A  01A9               	clrf	??_Load_Main+1
 10012  016B  0828               	movf	??_Load_Main,w
 10013  016C  00A0               	movwf	___wmul@multiplier
 10014  016D  0829               	movf	??_Load_Main+1,w
 10015  016E  00A1               	movwf	___wmul@multiplier+1
 10016  016F  3066               	movlw	102
 10017  0170  00A2               	movwf	___wmul@multiplicand
 10018  0171  3000               	movlw	0
 10019  0172  00A3               	movwf	___wmul@multiplicand+1
 10020  0173  319F  27A3  3180   	fcall	___wmul
 10021  0176  0020               	movlb	0	; select bank0
 10022  0177  0821               	movf	?___wmul+1,w
 10023  0178  0022               	movlb	2	; select bank2
 10024  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10025  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10026  017B  0020               	movlb	0	; select bank0
 10027  017C  0820               	movf	?___wmul,w
 10028  017D  0022               	movlb	2	; select bank2
 10029  017E  01CA               	clrf	(_Load^(0+256)+37)
 10030  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10031                           
 10032                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10033  0180  298D               	goto	l10024
 10034  0181                     l10020:	
 10035  0181  0020               	movlb	0	; select bank0
 10036  0182  082B               	movf	Load_Main@Load_Status,w
 10037  0183  3A01               	xorlw	1
 10038  0184  1D03               	skipz
 10039  0185  298D               	goto	l10024
 10040                           
 10041                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10042  0186  0022               	movlb	2	; select bank2
 10043  0187  082E               	movf	(_Load^(0+256)+9),w
 10044  0188  3E66               	addlw	102
 10045  0189  00CA               	movwf	(_Load^(0+256)+37)
 10046  018A  3000               	movlw	0
 10047  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10048  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10049  018D                     l10024:	
 10050                           
 10051                           ;OverLoad_B1.c: 129: }
 10052                           ;OverLoad_B1.c: 130: }
 10053                           ;OverLoad_B1.c: 131: }
 10054                           ;OverLoad_B1.c: 132: }
 10055                           ;OverLoad_B1.c: 133: }
 10056                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10057  018D  0022               	movlb	2	; select bank2
 10058  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10059  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10060  0190  1D03               	skipz
 10061  0191  2994               	goto	u11495
 10062  0192  084A               	movf	(_Load^(0+256)+37),w
 10063  0193  0244               	subwf	(_Load^(0+256)+31),w
 10064  0194                     u11495:	
 10065  0194  1C03               	skipc
 10066  0195  29A3               	goto	l10034
 10067                           
 10068                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10069  0196  3001               	movlw	1
 10070  0197  0020               	movlb	0	; select bank0
 10071  0198  00A8               	movwf	??_Load_Main
 10072  0199  0828               	movf	??_Load_Main,w
 10073  019A  0022               	movlb	2	; select bank2
 10074  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10075                           
 10076                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10077  019C  084F               	movf	(_Load^(0+256)+42),w
 10078  019D  0250               	subwf	(_Load^(0+256)+43),w
 10079  019E  1803               	skipnc
 10080  019F  0008               	return
 10081                           
 10082                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10083  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10084                           
 10085                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10086  01A1  16A5               	bsf	_Load^(0+256),5
 10087                           
 10088                           ;OverLoad_B1.c: 161: }
 10089                           ;OverLoad_B1.c: 162: } else {
 10090  01A2  0008               	return
 10091  01A3                     l10034:	
 10092                           
 10093                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10094  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10095                           
 10096                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10097  01A4  1DA5               	btfss	_Load^(0+256),3
 10098  01A5  0008               	return
 10099                           
 10100                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10101  01A6  3001               	movlw	1
 10102  01A7  0020               	movlb	0	; select bank0
 10103  01A8  00A8               	movwf	??_Load_Main
 10104  01A9  0828               	movf	??_Load_Main,w
 10105  01AA  0022               	movlb	2	; select bank2
 10106  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10107                           
 10108                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10109  01AC  3003               	movlw	3
 10110  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10111  01AE  1C03               	skipc
 10112  01AF  0008               	return
 10113                           
 10114                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10115  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10116                           
 10117                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10118  01B1  17A5               	bsf	_Load^(0+256),7
 10119                           
 10120                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10121  01B2  11A5               	bcf	_Load^(0+256),3
 10122                           
 10123                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10124  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10125                           
 10126                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10127  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10128  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10129  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10130  01B7  0844               	movf	(_Load^(0+256)+31),w
 10131  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10132  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10133                           
 10134                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10135  01BA  3003               	movlw	3
 10136  01BB  0020               	movlb	0	; select bank0
 10137  01BC  00A8               	movwf	??_Load_Main
 10138  01BD  0828               	movf	??_Load_Main,w
 10139  01BE  0022               	movlb	2	; select bank2
 10140  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10141                           
 10142                           ;OverLoad_B1.c: 176: }
 10143                           ;OverLoad_B1.c: 177: }
 10144                           ;OverLoad_B1.c: 200: }
 10145                           ;OverLoad_B1.c: 201: }
 10146                           ;OverLoad_B1.c: 202: }
 10147                           ;OverLoad_B1.c: 203: } else {
 10148  01C0  0008               	return
 10149  01C1                     l1574:	
 10150                           
 10151                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10152  01C1  1625               	bsf	_Load^(0+256),4
 10153                           
 10154                           ;OverLoad_B1.c: 205: }
 10155                           ;OverLoad_B1.c: 206: } else {
 10156  01C2  0008               	return
 10157  01C3                     l1573:	
 10158                           
 10159                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10160  01C3  1D25               	btfss	_Load^(0+256),2
 10161  01C4  29D6               	goto	l10072
 10162                           
 10163                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10164  01C5  1125               	bcf	_Load^(0+256),2
 10165                           
 10166                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10167  01C6  1225               	bcf	_Load^(0+256),4
 10168                           
 10169                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10170  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10171  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10172                           
 10173                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10174  01C9  319F  276A  3180   	fcall	_setLoad_AH_AL_Restore
 10175                           
 10176                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10177  01CC  0022               	movlb	2	; select bank2
 10178  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10179                           
 10180                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10181  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10182                           
 10183                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10184  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10185  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10186                           
 10187                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10188  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10189  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10190                           
 10191                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10192  01D3  11A5               	bcf	_Load^(0+256),3
 10193                           
 10194                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10195  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10196                           
 10197                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10198  01D5  13A5               	bcf	_Load^(0+256),7
 10199  01D6                     l10072:	
 10200                           
 10201                           ;OverLoad_B1.c: 248: }
 10202                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10203  01D6  1EA5               	btfss	_Load^(0+256),5
 10204  01D7  0008               	return
 10205                           
 10206                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10207  01D8  3001               	movlw	1
 10208  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10209  01DA  3000               	movlw	0
 10210  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10211                           
 10212                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10213  01DC  3003               	movlw	3
 10214  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10215  01DE  30E8               	movlw	232
 10216  01DF  1903               	skipnz
 10217  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10218  01E1  1C03               	skipc
 10219  01E2  0008               	return
 10220                           
 10221                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10222  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10223  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10224                           
 10225                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10226  01E5  12A5               	bcf	_Load^(0+256),5
 10227                           
 10228                           ;OverLoad_B1.c: 254: }
 10229                           ;OverLoad_B1.c: 255: }
 10230                           ;OverLoad_B1.c: 256: }
 10231                           ;OverLoad_B1.c: 257: } else {
 10232  01E6  0008               	return
 10233  01E7                     l1563:	
 10234                           
 10235                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10236  01E7  0021               	movlb	1	; select bank1
 10237  01E8  1C20               	btfss	_myMain^(0+128),0
 10238  01E9  0008               	return
 10239                           
 10240                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10241  01EA  0022               	movlb	2	; select bank2
 10242  01EB  1425               	bsf	_Load^(0+256),0
 10243  01EC  0008               	return
 10244  01ED                     __end_of_Load_Main:	
 10245                           
 10246                           	psect	text52
 10247  1D3B                     __ptext52:	
 10248 ;; *************** function _getMain_Lights_Count *****************
 10249 ;; Defined at:
 10250 ;;		line 467 in file "../src/Main_B1.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  status1         1    1[BANK0 ] unsigned char 
 10255 ;;  count           1    0[BANK0 ] unsigned char 
 10256 ;; Return value:  Size  Location     Type
 10257 ;;                  1    wreg      unsigned char 
 10258 ;; Registers used:
 10259 ;;		wreg, status,2
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;Total ram usage:        2 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    5
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_Load_Main
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _getMain_Lights_Count
 10281  1D3B                     _getMain_Lights_Count:	
 10282                           
 10283                           ;Main_B1.c: 468: char count = 0;
 10284                           
 10285                           ;incstack = 0
 10286                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10287  1D3B  0020               	movlb	0	; select bank0
 10288  1D3C  01A0               	clrf	getMain_Lights_Count@count
 10289                           
 10290                           ;Main_B1.c: 472: char status1 = 0;
 10291  1D3D  01A1               	clrf	getMain_Lights_Count@status1
 10292                           
 10293                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10294  1D3E  3000               	movlw	0
 10295  1D3F  0022               	movlb	2	; select bank2
 10296  1D40  1954               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10297  1D41  3001               	movlw	1
 10298  1D42  0020               	movlb	0	; select bank0
 10299  1D43  00A1               	movwf	getMain_Lights_Count@status1
 10300                           
 10301                           ;Main_B1.c: 498: return count = status1;
 10302  1D44  0821               	movf	getMain_Lights_Count@status1,w
 10303  1D45  00A0               	movwf	getMain_Lights_Count@count
 10304  1D46  0008               	return
 10305  1D47                     __end_of_getMain_Lights_Count:	
 10306                           
 10307                           	psect	text53
 10308  1C7D                     __ptext53:	
 10309 ;; *************** function _getDimmer_Load_Status *****************
 10310 ;; Defined at:
 10311 ;;		line 888 in file "../src/Dimmer_B1.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;		None
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;  status          1    0[BANK0 ] unsigned char 
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      unsigned char 
 10318 ;; Registers used:
 10319 ;;		wreg, status,2
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;Total ram usage:        1 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    5
 10332 ;; This function calls:
 10333 ;;		Nothing
 10334 ;; This function is called by:
 10335 ;;		_Load_Main
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           
 10340                           ;psect for function _getDimmer_Load_Status
 10341  1C7D                     _getDimmer_Load_Status:	
 10342                           
 10343                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10347  1C7D  3000               	movlw	0
 10348  1C7E  0021               	movlb	1	; select bank1
 10349  1C7F  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10350  1C80  3001               	movlw	1
 10351  1C81  0020               	movlb	0	; select bank0
 10352  1C82  00A0               	movwf	getDimmer_Load_Status@status
 10353                           
 10354                           ;Dimmer_B1.c: 890: return status;
 10355  1C83  0820               	movf	getDimmer_Load_Status@status,w
 10356  1C84  0008               	return
 10357  1C85                     __end_of_getDimmer_Load_Status:	
 10358                           
 10359                           	psect	text54
 10360  1C75                     __ptext54:	
 10361 ;; *************** function _getDimmer_LoadGO *****************
 10362 ;; Defined at:
 10363 ;;		line 623 in file "../src/Dimmer_B1.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  1    wreg      unsigned char 
 10370 ;; Registers used:
 10371 ;;		wreg, status,2
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;Total ram usage:        1 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    5
 10384 ;; This function calls:
 10385 ;;		Nothing
 10386 ;; This function is called by:
 10387 ;;		_Load_Main
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           
 10392                           ;psect for function _getDimmer_LoadGO
 10393  1C75                     _getDimmer_LoadGO:	
 10394                           
 10395                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10396                           
 10397                           ;incstack = 0
 10398                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10399  1C75  3000               	movlw	0
 10400  1C76  0021               	movlb	1	; select bank1
 10401  1C77  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10402  1C78  3001               	movlw	1
 10403  1C79  0020               	movlb	0	; select bank0
 10404  1C7A  00A0               	movwf	getDimmer_LoadGO@loadgo
 10405                           
 10406                           ;Dimmer_B1.c: 625: return loadgo;
 10407  1C7B  0820               	movf	getDimmer_LoadGO@loadgo,w
 10408  1C7C  0008               	return
 10409  1C7D                     __end_of_getDimmer_LoadGO:	
 10410                           
 10411                           	psect	text55
 10412  11B6                     __ptext55:	
 10413 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10414 ;; Defined at:
 10415 ;;		line 832 in file "../src/Dimmer_B1.c"
 10416 ;; Parameters:    Size  Location     Type
 10417 ;;		None
 10418 ;; Auto vars:     Size  Location     Type
 10419 ;;  i               2    4[BANK0 ] int 
 10420 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10421 ;;  count           1    3[BANK0 ] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  1    wreg      unsigned char 
 10424 ;; Registers used:
 10425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        5 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    6
 10438 ;; This function calls:
 10439 ;;		_DimmerLightsPointSelect
 10440 ;; This function is called by:
 10441 ;;		_Load_Main
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           
 10446                           ;psect for function _getAll_DimmerLights_AdjSw
 10447  11B6                     _getAll_DimmerLights_AdjSw:	
 10448                           
 10449                           ;Dimmer_B1.c: 833: char count = 1;
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10453  11B6  0020               	movlb	0	; select bank0
 10454  11B7  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10455  11B8  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10456                           
 10457                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10458  11B9  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10459                           
 10460                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10461  11BA  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10462  11BB  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10463  11BC                     l9270:	
 10464  11BC  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10465  11BD  3A80               	xorlw	128
 10466  11BE  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10467  11BF  3080               	movlw	128
 10468  11C0  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10469  11C1  1D03               	skipz
 10470  11C2  29C5               	goto	u10165
 10471  11C3  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10472  11C4  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10473  11C5                     u10165:	
 10474  11C5  1803               	btfsc	3,0
 10475  11C6  29DE               	goto	l9272
 10476                           
 10477                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10478  11C7  0020               	movlb	0	; select bank0
 10479  11C8  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10480  11C9  3E01               	addlw	1
 10481  11CA  319C  24D4  3191   	fcall	_DimmerLightsPointSelect
 10482                           
 10483                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10484  11CD  0020               	movlb	0	; select bank0
 10485  11CE  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10486  11CF  1D03               	skipz
 10487  11D0  29D9               	goto	l9268
 10488                           
 10489                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10490  11D1  0A6F               	incf	_DimmerLights,w
 10491  11D2  0086               	movwf	6
 10492  11D3  3001               	movlw	1	; select bank2/3
 10493  11D4  0087               	movwf	7
 10494  11D5  3000               	movlw	0
 10495  11D6  1B01               	btfsc	1,6
 10496  11D7  3001               	movlw	1
 10497  11D8  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10498  11D9                     l9268:	
 10499  11D9  3001               	movlw	1
 10500  11DA  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10501  11DB  3000               	movlw	0
 10502  11DC  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10503  11DD  29BC               	goto	l9270
 10504  11DE                     l9272:	
 10505                           
 10506                           ;Dimmer_B1.c: 840: }
 10507                           ;Dimmer_B1.c: 841: }
 10508                           ;Dimmer_B1.c: 842: return adjsw;
 10509  11DE  0020               	movlb	0	; select bank0
 10510  11DF  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10511  11E0  0008               	return
 10512  11E1                     __end_of_getAll_DimmerLights_AdjSw:	
 10513                           
 10514                           	psect	text56
 10515  1FA3                     __ptext56:	
 10516 ;; *************** function ___wmul *****************
 10517 ;; Defined at:
 10518 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10521 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;  product         2    4[BANK0 ] unsigned int 
 10524 ;; Return value:  Size  Location     Type
 10525 ;;                  2    0[BANK0 ] unsigned int 
 10526 ;; Registers used:
 10527 ;;		wreg, status,2, status,0
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;Total ram usage:        6 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; Hardware stack levels required when called:    5
 10540 ;; This function calls:
 10541 ;;		Nothing
 10542 ;; This function is called by:
 10543 ;;		_Load_Main
 10544 ;; This function uses a non-reentrant model
 10545 ;;
 10546                           
 10547                           
 10548                           ;psect for function ___wmul
 10549  1FA3                     ___wmul:	
 10550                           
 10551                           ;incstack = 0
 10552                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10553  1FA3  0020               	movlb	0	; select bank0
 10554  1FA4  01A4               	clrf	___wmul@product
 10555  1FA5  01A5               	clrf	___wmul@product+1
 10556  1FA6                     l9648:	
 10557  1FA6  1C20               	btfss	___wmul@multiplier,0
 10558  1FA7  2FAC               	goto	l2587
 10559  1FA8  0822               	movf	___wmul@multiplicand,w
 10560  1FA9  07A4               	addwf	___wmul@product,f
 10561  1FAA  0823               	movf	___wmul@multiplicand+1,w
 10562  1FAB  3DA5               	addwfc	___wmul@product+1,f
 10563  1FAC                     l2587:	
 10564  1FAC  3001               	movlw	1
 10565  1FAD                     u10775:	
 10566  1FAD  35A2               	lslf	___wmul@multiplicand,f
 10567  1FAE  0DA3               	rlf	___wmul@multiplicand+1,f
 10568  1FAF  0B89               	decfsz	9,f
 10569  1FB0  2FAD               	goto	u10775
 10570  1FB1  3001               	movlw	1
 10571  1FB2                     u10785:	
 10572  1FB2  36A1               	lsrf	___wmul@multiplier+1,f
 10573  1FB3  0CA0               	rrf	___wmul@multiplier,f
 10574  1FB4  0B89               	decfsz	9,f
 10575  1FB5  2FB2               	goto	u10785
 10576  1FB6  0821               	movf	___wmul@multiplier+1,w
 10577  1FB7  0420               	iorwf	___wmul@multiplier,w
 10578  1FB8  1D03               	skipz
 10579  1FB9  2FA6               	goto	l9648
 10580  1FBA  0825               	movf	___wmul@product+1,w
 10581  1FBB  01A1               	clrf	?___wmul+1
 10582  1FBC  07A1               	addwf	?___wmul+1,f
 10583  1FBD  0824               	movf	___wmul@product,w
 10584  1FBE  01A0               	clrf	?___wmul
 10585  1FBF  07A0               	addwf	?___wmul,f
 10586  1FC0  0008               	return
 10587  1FC1                     __end_of___wmul:	
 10588                           
 10589                           	psect	text57
 10590  13AD                     __ptext57:	
 10591 ;; *************** function ___lwdiv *****************
 10592 ;; Defined at:
 10593 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  divisor         2    0[BANK0 ] unsigned int 
 10596 ;;  dividend        2    2[BANK0 ] unsigned int 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  quotient        2    6[BANK0 ] unsigned int 
 10599 ;;  counter         1    5[BANK0 ] unsigned char 
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  2    0[BANK0 ] unsigned int 
 10602 ;; Registers used:
 10603 ;;		wreg, status,2, status,0
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        8 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    5
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_Load_Main
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           
 10624                           ;psect for function ___lwdiv
 10625  13AD                     ___lwdiv:	
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10629  13AD  0020               	movlb	0	; select bank0
 10630  13AE  01A6               	clrf	___lwdiv@quotient
 10631  13AF  01A7               	clrf	___lwdiv@quotient+1
 10632  13B0  0821               	movf	___lwdiv@divisor+1,w
 10633  13B1  0420               	iorwf	___lwdiv@divisor,w
 10634  13B2  1903               	skipnz
 10635  13B3  2BDD               	goto	l9680
 10636  13B4  01A5               	clrf	___lwdiv@counter
 10637  13B5  0AA5               	incf	___lwdiv@counter,f
 10638  13B6                     l9668:	
 10639  13B6  1BA1               	btfsc	___lwdiv@divisor+1,7
 10640  13B7  2BC2               	goto	l9670
 10641  13B8  3001               	movlw	1
 10642  13B9                     u10815:	
 10643  13B9  35A0               	lslf	___lwdiv@divisor,f
 10644  13BA  0DA1               	rlf	___lwdiv@divisor+1,f
 10645  13BB  0B89               	decfsz	9,f
 10646  13BC  2BB9               	goto	u10815
 10647  13BD  3001               	movlw	1
 10648  13BE  00A4               	movwf	??___lwdiv
 10649  13BF  0824               	movf	??___lwdiv,w
 10650  13C0  07A5               	addwf	___lwdiv@counter,f
 10651  13C1  2BB6               	goto	l9668
 10652  13C2                     l9670:	
 10653  13C2  3001               	movlw	1
 10654  13C3                     u10835:	
 10655  13C3  35A6               	lslf	___lwdiv@quotient,f
 10656  13C4  0DA7               	rlf	___lwdiv@quotient+1,f
 10657  13C5  0B89               	decfsz	9,f
 10658  13C6  2BC3               	goto	u10835
 10659  13C7  0821               	movf	___lwdiv@divisor+1,w
 10660  13C8  0223               	subwf	___lwdiv@dividend+1,w
 10661  13C9  1D03               	skipz
 10662  13CA  2BCD               	goto	u10845
 10663  13CB  0820               	movf	___lwdiv@divisor,w
 10664  13CC  0222               	subwf	___lwdiv@dividend,w
 10665  13CD                     u10845:	
 10666  13CD  1C03               	skipc
 10667  13CE  2BD4               	goto	l9676
 10668  13CF  0820               	movf	___lwdiv@divisor,w
 10669  13D0  02A2               	subwf	___lwdiv@dividend,f
 10670  13D1  0821               	movf	___lwdiv@divisor+1,w
 10671  13D2  3BA3               	subwfb	___lwdiv@dividend+1,f
 10672  13D3  1426               	bsf	___lwdiv@quotient,0
 10673  13D4                     l9676:	
 10674  13D4  3001               	movlw	1
 10675  13D5                     u10855:	
 10676  13D5  36A1               	lsrf	___lwdiv@divisor+1,f
 10677  13D6  0CA0               	rrf	___lwdiv@divisor,f
 10678  13D7  0B89               	decfsz	9,f
 10679  13D8  2BD5               	goto	u10855
 10680  13D9  3001               	movlw	1
 10681  13DA  02A5               	subwf	___lwdiv@counter,f
 10682  13DB  1D03               	btfss	3,2
 10683  13DC  2BC2               	goto	l9670
 10684  13DD                     l9680:	
 10685  13DD  0827               	movf	___lwdiv@quotient+1,w
 10686  13DE  01A1               	clrf	?___lwdiv+1
 10687  13DF  07A1               	addwf	?___lwdiv+1,f
 10688  13E0  0826               	movf	___lwdiv@quotient,w
 10689  13E1  01A0               	clrf	?___lwdiv
 10690  13E2  07A0               	addwf	?___lwdiv,f
 10691  13E3  0008               	return
 10692  13E4                     __end_of___lwdiv:	
 10693                           
 10694                           	psect	text58
 10695  1C23                     __ptext58:	
 10696 ;; *************** function _Load_Initialization *****************
 10697 ;; Defined at:
 10698 ;;		line 9 in file "../src/OverLoad_B1.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;		None
 10703 ;; Return value:  Size  Location     Type
 10704 ;;		None               void
 10705 ;; Registers used:
 10706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;Total ram usage:        0 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    6
 10719 ;; This function calls:
 10720 ;;		_setLoad_AH_AL_Restore
 10721 ;; This function is called by:
 10722 ;;		_main
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           
 10727                           ;psect for function _Load_Initialization
 10728  1C23                     _Load_Initialization:	
 10729                           
 10730                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10731                           
 10732                           ;incstack = 0
 10733                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10734  1C23  319F  276A         	fcall	_setLoad_AH_AL_Restore
 10735  1C25  0008               	return
 10736  1C26                     __end_of_Load_Initialization:	
 10737                           
 10738                           	psect	text59
 10739  1F6A                     __ptext59:	
 10740 ;; *************** function _setLoad_AH_AL_Restore *****************
 10741 ;; Defined at:
 10742 ;;		line 285 in file "../src/OverLoad_B1.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;		None
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  i               1    1[BANK0 ] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;		None               void
 10749 ;; Registers used:
 10750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;Total ram usage:        2 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    5
 10763 ;; This function calls:
 10764 ;;		Nothing
 10765 ;; This function is called by:
 10766 ;;		_Load_Initialization
 10767 ;;		_Load_Main
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           
 10772                           ;psect for function _setLoad_AH_AL_Restore
 10773  1F6A                     _setLoad_AH_AL_Restore:	
 10774                           
 10775                           ;OverLoad_B1.c: 286: char i;
 10776                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10777                           
 10778                           ;incstack = 0
 10779                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10780  1F6A  0020               	movlb	0	; select bank0
 10781  1F6B  01A1               	clrf	setLoad_AH_AL_Restore@i
 10782  1F6C                     L4:	
 10783  1F6C  3005               	movlw	5
 10784  1F6D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10785  1F6E  1803               	btfsc	3,0
 10786  1F6F  0008               	return
 10787                           
 10788                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10789  1F70  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10790  1F71  3E30               	addlw	(_Load+11)& (0+255)
 10791  1F72  0086               	movwf	6
 10792  1F73  3001               	movlw	1	; select bank2/3
 10793  1F74  0087               	movwf	7
 10794  1F75  3000               	movlw	0
 10795  1F76  3FC0               	movwi [0]fsr1
 10796  1F77  3FC1               	movwi [1]fsr1
 10797                           
 10798                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10799  1F78  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10800  1F79  3E3A               	addlw	(_Load+21)& (0+255)
 10801  1F7A  0086               	movwf	6
 10802  1F7B  3001               	movlw	1	; select bank2/3
 10803  1F7C  0087               	movwf	7
 10804  1F7D  30FF               	movlw	255
 10805  1F7E  3FC0               	movwi [0]fsr1
 10806  1F7F  30FF               	movlw	255
 10807  1F80  3FC1               	movwi [1]fsr1
 10808  1F81  3001               	movlw	1
 10809  1F82  00A0               	movwf	??_setLoad_AH_AL_Restore
 10810  1F83  0820               	movf	??_setLoad_AH_AL_Restore,w
 10811  1F84  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10812  1F85  2F6C               	goto	L4
 10813  1F86                     __end_of_setLoad_AH_AL_Restore:	
 10814                           
 10815                           	psect	text60
 10816  1C4B                     __ptext60:	
 10817 ;; *************** function _LED_Main *****************
 10818 ;; Defined at:
 10819 ;;		line 47 in file "../src/LED_B1.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;		None               void
 10826 ;; Registers used:
 10827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;Total ram usage:        0 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    7
 10840 ;; This function calls:
 10841 ;;		_setLED_Main
 10842 ;; This function is called by:
 10843 ;;		_main
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           
 10848                           ;psect for function _LED_Main
 10849  1C4B                     _LED_Main:	
 10850                           
 10851                           ;LED_B1.c: 62: setLED_Main(99);
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10855  1C4B  3063               	movlw	99
 10856  1C4C  3193  2341         	fcall	_setLED_Main
 10857  1C4E  0008               	return
 10858  1C4F                     __end_of_LED_Main:	
 10859                           
 10860                           	psect	text61
 10861  1341                     __ptext61:	
 10862 ;; *************** function _setLED_Main *****************
 10863 ;; Defined at:
 10864 ;;		line 221 in file "../src/LED_B1.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;  led             1    wreg     unsigned char 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  led             1    4[BANK0 ] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;		None               void
 10871 ;; Registers used:
 10872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;Total ram usage:        3 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    6
 10885 ;; This function calls:
 10886 ;;		_LedPointSelect
 10887 ;; This function is called by:
 10888 ;;		_LED_Main
 10889 ;; This function uses a non-reentrant model
 10890 ;;
 10891                           
 10892                           
 10893                           ;psect for function _setLED_Main
 10894  1341                     _setLED_Main:	
 10895                           
 10896                           ;incstack = 0
 10897                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10898                           ;setLED_Main@led stored from wreg
 10899  1341  0020               	movlb	0	; select bank0
 10900  1342  00A4               	movwf	setLED_Main@led
 10901                           
 10902                           ;LED_B1.c: 222: LedPointSelect(led);
 10903  1343  0824               	movf	setLED_Main@led,w
 10904  1344  319D  2517  3193   	fcall	_LedPointSelect
 10905                           
 10906                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10907  1347  0021               	movlb	1	; select bank1
 10908  1348  084E               	movf	_LED^(0+128),w
 10909  1349  0086               	movwf	6
 10910  134A  3001               	movlw	1	; select bank2/3
 10911  134B  0087               	movwf	7
 10912  134C  1C81               	btfss	1,1
 10913  134D  0008               	return
 10914                           
 10915                           ;LED_B1.c: 224: LED->Time++;
 10916  134E  0A4E               	incf	_LED^(0+128),w
 10917  134F  0086               	movwf	6
 10918  1350  3001               	movlw	1	; select bank2/3
 10919  1351  0087               	movwf	7
 10920  1352  3001               	movlw	1
 10921  1353  0781               	addwf	1,f
 10922  1354  3141               	addfsr 1,1
 10923  1355  1803               	skipnc
 10924  1356  0A81               	incf	1,f
 10925                           
 10926                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10927  1357  0A4E               	incf	_LED^(0+128),w
 10928  1358  0086               	movwf	6
 10929  1359  3001               	movlw	1	; select bank2/3
 10930  135A  0087               	movwf	7
 10931  135B  3F40               	moviw [0]fsr1
 10932  135C  0020               	movlb	0	; select bank0
 10933  135D  00A2               	movwf	??_setLED_Main
 10934  135E  3F41               	moviw [1]fsr1
 10935  135F  00A3               	movwf	??_setLED_Main+1
 10936  1360  3000               	movlw	0
 10937  1361  0223               	subwf	??_setLED_Main+1,w
 10938  1362  3032               	movlw	50
 10939  1363  1903               	skipnz
 10940  1364  0222               	subwf	??_setLED_Main,w
 10941  1365  1C03               	skipc
 10942  1366  0008               	return
 10943                           
 10944                           ;LED_B1.c: 226: LED->Time = 0;
 10945  1367  0021               	movlb	1	; select bank1
 10946  1368  0A4E               	incf	_LED^(0+128),w
 10947  1369  0086               	movwf	6
 10948  136A  3001               	movlw	1	; select bank2/3
 10949  136B  0087               	movwf	7
 10950  136C  3000               	movlw	0
 10951  136D  3FC0               	movwi [0]fsr1
 10952  136E  3FC1               	movwi [1]fsr1
 10953                           
 10954                           ;LED_B1.c: 243: if (led == 99) {
 10955  136F  0020               	movlb	0	; select bank0
 10956  1370  0824               	movf	setLED_Main@led,w
 10957  1371  3A63               	xorlw	99
 10958  1372  1D03               	skipz
 10959  1373  0008               	return
 10960                           
 10961                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10962  1374  3020               	movlw	32
 10963  1375  068D               	xorwf	13,f
 10964  1376  0008               	return
 10965  1377                     __end_of_setLED_Main:	
 10966                           
 10967                           	psect	text62
 10968  1C47                     __ptext62:	
 10969 ;; *************** function _LED_Initialization *****************
 10970 ;; Defined at:
 10971 ;;		line 31 in file "../src/LED_B1.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;		None               void
 10978 ;; Registers used:
 10979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;Total ram usage:        0 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    8
 10992 ;; This function calls:
 10993 ;;		_setLED_Initialization
 10994 ;; This function is called by:
 10995 ;;		_main
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           
 11000                           ;psect for function _LED_Initialization
 11001  1C47                     _LED_Initialization:	
 11002                           
 11003                           ;LED_B1.c: 42: setLED_Initialization(99);
 11004                           
 11005                           ;incstack = 0
 11006                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11007  1C47  3063               	movlw	99
 11008  1C48  319E  260F         	fcall	_setLED_Initialization
 11009  1C4A  0008               	return
 11010  1C4B                     __end_of_LED_Initialization:	
 11011                           
 11012                           	psect	text63
 11013  1E0F                     __ptext63:	
 11014 ;; *************** function _setLED_Initialization *****************
 11015 ;; Defined at:
 11016 ;;		line 69 in file "../src/LED_B1.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  led             1    wreg     unsigned char 
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;  led             1    4[BANK0 ] unsigned char 
 11021 ;; Return value:  Size  Location     Type
 11022 ;;		None               void
 11023 ;; Registers used:
 11024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;Total ram usage:        1 bytes
 11035 ;; Hardware stack levels used:    1
 11036 ;; Hardware stack levels required when called:    7
 11037 ;; This function calls:
 11038 ;;		_LedPointSelect
 11039 ;;		_setLED
 11040 ;; This function is called by:
 11041 ;;		_LED_Initialization
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           
 11046                           ;psect for function _setLED_Initialization
 11047  1E0F                     _setLED_Initialization:	
 11048                           
 11049                           ;incstack = 0
 11050                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11051                           ;setLED_Initialization@led stored from wreg
 11052  1E0F  0020               	movlb	0	; select bank0
 11053  1E10  00A4               	movwf	setLED_Initialization@led
 11054                           
 11055                           ;LED_B1.c: 70: LedPointSelect(led);
 11056  1E11  0824               	movf	setLED_Initialization@led,w
 11057  1E12  319D  2517  319E   	fcall	_LedPointSelect
 11058                           
 11059                           ;LED_B1.c: 71: LED->Enable = 1;
 11060  1E15  0021               	movlb	1	; select bank1
 11061  1E16  084E               	movf	_LED^(0+128),w
 11062  1E17  0086               	movwf	6
 11063  1E18  3001               	movlw	1	; select bank2/3
 11064  1E19  0087               	movwf	7
 11065  1E1A  1401               	bsf	1,0
 11066                           
 11067                           ;LED_B1.c: 72: setLED(led, 0);
 11068  1E1B  0020               	movlb	0	; select bank0
 11069  1E1C  01A2               	clrf	setLED@command
 11070  1E1D  0824               	movf	setLED_Initialization@led,w
 11071  1E1E  3193  23E4         	fcall	_setLED
 11072  1E20  0008               	return
 11073  1E21                     __end_of_setLED_Initialization:	
 11074                           
 11075                           	psect	text64
 11076  130B                     __ptext64:	
 11077 ;; *************** function _Flash_Memory_Main *****************
 11078 ;; Defined at:
 11079 ;;		line 966 in file "../src/MCU_B1.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;		None
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;		None
 11084 ;; Return value:  Size  Location     Type
 11085 ;;		None               void
 11086 ;; Registers used:
 11087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;Total ram usage:        1 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    8
 11100 ;; This function calls:
 11101 ;;		_Flash_Memory_Modify
 11102 ;;		_getMain_LightsStatus
 11103 ;; This function is called by:
 11104 ;;		_main
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _Flash_Memory_Main
 11110  130B                     _Flash_Memory_Main:	
 11111                           
 11112                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11113                           
 11114                           ;incstack = 0
 11115                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11116  130B  0023               	movlb	3	; select bank3
 11117  130C  1C62               	btfss	(_Memory^(0+384)+36),0
 11118  130D  0008               	return
 11119                           
 11120                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11121  130E  319C  24B4  3193   	fcall	_getMain_LightsStatus
 11122  1311  3A00               	xorlw	0
 11123  1312  3000               	movlw	0
 11124  1313  1903               	skipnz
 11125  1314  3001               	movlw	1
 11126  1315  0020               	movlb	0	; select bank0
 11127  1316  00A6               	movwf	??_Flash_Memory_Main
 11128  1317  0DA6               	rlf	??_Flash_Memory_Main,f
 11129  1318  0023               	movlb	3	; select bank3
 11130  1319  0862               	movf	(_Memory^(0+384)+36),w
 11131  131A  0020               	movlb	0	; select bank0
 11132  131B  0626               	xorwf	??_Flash_Memory_Main,w
 11133  131C  39FD               	andlw	-3
 11134  131D  0626               	xorwf	??_Flash_Memory_Main,w
 11135  131E  0023               	movlb	3	; select bank3
 11136  131F  00E2               	movwf	(_Memory^(0+384)+36)
 11137                           
 11138                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11139  1320  1CE2               	btfss	(_Memory^(0+384)+36),1
 11140  1321  2B3B               	goto	l1194
 11141                           
 11142                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11143  1322  15E2               	bsf	(_Memory^(0+384)+36),3
 11144                           
 11145                           ;MCU_B1.c: 971: Memory.Time++;
 11146  1323  3001               	movlw	1
 11147  1324  07E0               	addwf	(_Memory^(0+384)+34),f
 11148  1325  3000               	movlw	0
 11149  1326  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11150                           
 11151                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11152  1327  3022               	movlw	34
 11153  1328  3EBE               	addlw	_Memory& (0+255)
 11154  1329  0086               	movwf	6
 11155  132A  3001               	movlw	1	; select bank3/4
 11156  132B  0087               	movwf	7
 11157  132C  3F40               	moviw [0]fsr1
 11158  132D  3A19               	xorlw	25
 11159  132E  1D03               	skipz
 11160  132F  2B32               	goto	u11045
 11161  1330  3F41               	moviw [1]fsr1
 11162  1331  3A00               	xorlw	0
 11163  1332                     u11045:	
 11164  1332  1D03               	skipz
 11165  1333  0008               	return
 11166                           
 11167                           ;MCU_B1.c: 973: Memory.Time = 0;
 11168  1334  01E0               	clrf	(_Memory^(0+384)+34)
 11169  1335  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11170                           
 11171                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11172  1336  1062               	bcf	(_Memory^(0+384)+36),0
 11173                           
 11174                           ;MCU_B1.c: 975: Memory.GO = 0;
 11175  1337  10E2               	bcf	(_Memory^(0+384)+36),1
 11176                           
 11177                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11178  1338  3195  251A         	fcall	_Flash_Memory_Modify
 11179                           
 11180                           ;MCU_B1.c: 977: }
 11181                           ;MCU_B1.c: 978: } else {
 11182  133A  0008               	return
 11183  133B                     l1194:	
 11184                           
 11185                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11186  133B  1DE2               	btfss	(_Memory^(0+384)+36),3
 11187  133C  0008               	return
 11188                           
 11189                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11190  133D  11E2               	bcf	(_Memory^(0+384)+36),3
 11191                           
 11192                           ;MCU_B1.c: 981: Memory.Time = 0;
 11193  133E  01E0               	clrf	(_Memory^(0+384)+34)
 11194  133F  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11195  1340  0008               	return
 11196  1341                     __end_of_Flash_Memory_Main:	
 11197                           
 11198                           	psect	text65
 11199  151A                     __ptext65:	
 11200 ;; *************** function _Flash_Memory_Modify *****************
 11201 ;; Defined at:
 11202 ;;		line 1039 in file "../src/MCU_B1.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;  i               1    5[BANK0 ] unsigned char 
 11207 ;; Return value:  Size  Location     Type
 11208 ;;		None               void
 11209 ;; Registers used:
 11210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;Total ram usage:        2 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:    7
 11223 ;; This function calls:
 11224 ;;		_Flash_Memory_Erasing
 11225 ;;		_Flash_Memory_Read
 11226 ;;		_Flash_Memory_Write
 11227 ;;		_setMemory_Data
 11228 ;; This function is called by:
 11229 ;;		_Flash_Memory_Main
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           
 11234                           ;psect for function _Flash_Memory_Modify
 11235  151A                     _Flash_Memory_Modify:	
 11236                           
 11237                           ;MCU_B1.c: 1040: char i = 0;
 11238                           
 11239                           ;incstack = 0
 11240                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11241  151A  0020               	movlb	0	; select bank0
 11242  151B  01A5               	clrf	Flash_Memory_Modify@i
 11243                           
 11244                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11245  151C  01A5               	clrf	Flash_Memory_Modify@i
 11246  151D  3020               	movlw	32
 11247  151E  0225               	subwf	Flash_Memory_Modify@i,w
 11248  151F  1803               	btfsc	3,0
 11249  1520  2D36               	goto	l9380
 11250  1521                     l9374:	
 11251                           
 11252                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11253  1521  0825               	movf	Flash_Memory_Modify@i,w
 11254  1522  319F  271A  3195   	fcall	_Flash_Memory_Read
 11255  1525  0020               	movlb	0	; select bank0
 11256  1526  00A4               	movwf	??_Flash_Memory_Modify
 11257  1527  0825               	movf	Flash_Memory_Modify@i,w
 11258  1528  3EBE               	addlw	_Memory& (0+255)
 11259  1529  0086               	movwf	6
 11260  152A  3001               	movlw	1	; select bank3/4
 11261  152B  0087               	movwf	7
 11262  152C  0824               	movf	??_Flash_Memory_Modify,w
 11263  152D  0081               	movwf	1
 11264  152E  3001               	movlw	1
 11265  152F  00A4               	movwf	??_Flash_Memory_Modify
 11266  1530  0824               	movf	??_Flash_Memory_Modify,w
 11267  1531  07A5               	addwf	Flash_Memory_Modify@i,f
 11268  1532  3020               	movlw	32
 11269  1533  0225               	subwf	Flash_Memory_Modify@i,w
 11270  1534  1C03               	skipc
 11271  1535  2D21               	goto	l9374
 11272  1536                     l9380:	
 11273                           
 11274                           ;MCU_B1.c: 1043: }
 11275                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11276  1536  0879               	movf	_product,w
 11277  1537  0086               	movwf	6
 11278  1538  3002               	movlw	2	; select bank4/5
 11279  1539  0087               	movwf	7
 11280  153A  3002               	movlw	2	; select bank4/5
 11281  153B  3F4C               	moviw [12]fsr1
 11282  153C  00A0               	movwf	setMemory_Data@data
 11283  153D  3000               	movlw	0
 11284  153E  319D  2523  3195   	fcall	_setMemory_Data
 11285                           
 11286                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11287  1541  0879               	movf	_product,w
 11288  1542  0086               	movwf	6
 11289  1543  3002               	movlw	2	; select bank4/5
 11290  1544  0087               	movwf	7
 11291  1545  3002               	movlw	2	; select bank4/5
 11292  1546  3F4D               	moviw [13]fsr1
 11293  1547  0020               	movlb	0	; select bank0
 11294  1548  00A0               	movwf	setMemory_Data@data
 11295  1549  3001               	movlw	1
 11296  154A  319D  2523  3195   	fcall	_setMemory_Data
 11297                           
 11298                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11299  154D  0879               	movf	_product,w
 11300  154E  0086               	movwf	6
 11301  154F  3002               	movlw	2	; select bank4/5
 11302  1550  0087               	movwf	7
 11303  1551  3002               	movlw	2	; select bank4/5
 11304  1552  3F4E               	moviw [14]fsr1
 11305  1553  0020               	movlb	0	; select bank0
 11306  1554  00A0               	movwf	setMemory_Data@data
 11307  1555  3002               	movlw	2
 11308  1556  319D  2523  3195   	fcall	_setMemory_Data
 11309                           
 11310                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11311  1559  0023               	movlb	3	; select bank3
 11312  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 11313  155B  2D60               	goto	l1217
 11314                           
 11315                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11316  155C  1162               	bcf	(_Memory^(0+384)+36),2
 11317                           
 11318                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11319  155D  0021               	movlb	1	; select bank1
 11320  155E  11A0               	bcf	_myMain^(0+128),3
 11321                           
 11322                           ;MCU_B1.c: 1055: myMain.First = 0;
 11323  155F  12A0               	bcf	_myMain^(0+128),5
 11324  1560                     l1217:	
 11325                           
 11326                           ;MCU_B1.c: 1057: }
 11327                           ;MCU_B1.c: 1058: GIE = 0;
 11328  1560  138B               	bcf	11,7	;volatile
 11329                           
 11330                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11331  1561  319D  252F  3195   	fcall	_Flash_Memory_Erasing
 11332                           
 11333                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11334  1564  3191  21E1         	fcall	_Flash_Memory_Write
 11335                           
 11336                           ;MCU_B1.c: 1061: GIE = 1;
 11337  1566  178B               	bsf	11,7	;volatile
 11338  1567  0008               	return
 11339  1568                     __end_of_Flash_Memory_Modify:	
 11340                           
 11341                           	psect	text66
 11342  1D2F                     __ptext66:	
 11343 ;; *************** function _Flash_Memory_Erasing *****************
 11344 ;; Defined at:
 11345 ;;		line 1028 in file "../src/MCU_B1.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;		None
 11350 ;; Return value:  Size  Location     Type
 11351 ;;		None               void
 11352 ;; Registers used:
 11353 ;;		wreg, status,2, status,0, pclath, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;Total ram usage:        0 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    6
 11366 ;; This function calls:
 11367 ;;		_Flash_Memory_Unlock
 11368 ;; This function is called by:
 11369 ;;		_Flash_Memory_Modify
 11370 ;; This function uses a non-reentrant model
 11371 ;;
 11372                           
 11373                           
 11374                           ;psect for function _Flash_Memory_Erasing
 11375  1D2F                     _Flash_Memory_Erasing:	
 11376                           
 11377                           ;MCU_B1.c: 1029: CFGS = 0;
 11378                           
 11379                           ;incstack = 0
 11380                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11381  1D2F  0023               	movlb	3	; select bank3
 11382  1D30  1315               	bcf	21,6	;volatile
 11383                           
 11384                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11385  1D31  3030               	movlw	48
 11386  1D32  0092               	movwf	18	;volatile
 11387                           
 11388                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11389  1D33  0191               	clrf	17	;volatile
 11390                           
 11391                           ;MCU_B1.c: 1032: FREE = 1;
 11392  1D34  1615               	bsf	21,4	;volatile
 11393                           
 11394                           ;MCU_B1.c: 1033: WREN = 1;
 11395  1D35  1515               	bsf	21,2	;volatile
 11396                           
 11397                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11398  1D36  319C  248E         	fcall	_Flash_Memory_Unlock
 11399                           
 11400                           ;MCU_B1.c: 1035: WREN = 0;
 11401  1D38  0023               	movlb	3	; select bank3
 11402  1D39  1115               	bcf	21,2	;volatile
 11403  1D3A  0008               	return
 11404  1D3B                     __end_of_Flash_Memory_Erasing:	
 11405                           
 11406                           	psect	text67
 11407  054C                     __ptext67:	
 11408 ;; *************** function _Flash_Memory_Initialization *****************
 11409 ;; Defined at:
 11410 ;;		line 925 in file "../src/MCU_B1.c"
 11411 ;; Parameters:    Size  Location     Type
 11412 ;;		None
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;  i               1   67[BANK0 ] unsigned char 
 11415 ;; Return value:  Size  Location     Type
 11416 ;;		None               void
 11417 ;; Registers used:
 11418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11419 ;; Tracked objects:
 11420 ;;		On entry : 0/0
 11421 ;;		On exit  : 0/0
 11422 ;;		Unchanged: 0/0
 11423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;Total ram usage:        2 bytes
 11429 ;; Hardware stack levels used:    1
 11430 ;; Hardware stack levels required when called:    8
 11431 ;; This function calls:
 11432 ;;		_Flash_Memory_Read
 11433 ;;		_Flash_Memory_Write
 11434 ;;		_setMemory_Data
 11435 ;;		_setPercentValue
 11436 ;; This function is called by:
 11437 ;;		_main
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           
 11442                           ;psect for function _Flash_Memory_Initialization
 11443  054C                     _Flash_Memory_Initialization:	
 11444                           
 11445                           ;MCU_B1.c: 926: char i = 0;
 11446                           
 11447                           ;incstack = 0
 11448                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11449  054C  0020               	movlb	0	; select bank0
 11450  054D  01E3               	clrf	Flash_Memory_Initialization@i
 11451                           
 11452                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11453  054E  301F               	movlw	31
 11454  054F  319F  271A  3185   	fcall	_Flash_Memory_Read
 11455  0552  3AAA               	xorlw	170
 11456  0553  1D03               	skipz
 11457  0554  2DBE               	goto	l9766
 11458                           
 11459                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11460  0555  3000               	movlw	0
 11461  0556  319F  271A  3185   	fcall	_Flash_Memory_Read
 11462  0559  0020               	movlb	0	; select bank0
 11463  055A  00E2               	movwf	??_Flash_Memory_Initialization
 11464  055B  0879               	movf	_product,w
 11465  055C  3E0C               	addlw	12
 11466  055D  0086               	movwf	6
 11467  055E  3002               	movlw	2	; select bank4/5
 11468  055F  0087               	movwf	7
 11469  0560  0862               	movf	??_Flash_Memory_Initialization,w
 11470  0561  0081               	movwf	1
 11471                           
 11472                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11473  0562  3001               	movlw	1
 11474  0563  319F  271A  3185   	fcall	_Flash_Memory_Read
 11475  0566  0020               	movlb	0	; select bank0
 11476  0567  00E2               	movwf	??_Flash_Memory_Initialization
 11477  0568  0879               	movf	_product,w
 11478  0569  3E0D               	addlw	13
 11479  056A  0086               	movwf	6
 11480  056B  3002               	movlw	2	; select bank4/5
 11481  056C  0087               	movwf	7
 11482  056D  0862               	movf	??_Flash_Memory_Initialization,w
 11483  056E  0081               	movwf	1
 11484                           
 11485                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11486  056F  3002               	movlw	2
 11487  0570  319F  271A  3185   	fcall	_Flash_Memory_Read
 11488  0573  0020               	movlb	0	; select bank0
 11489  0574  00E2               	movwf	??_Flash_Memory_Initialization
 11490  0575  0879               	movf	_product,w
 11491  0576  3E0E               	addlw	14
 11492  0577  0086               	movwf	6
 11493  0578  3002               	movlw	2	; select bank4/5
 11494  0579  0087               	movwf	7
 11495  057A  0862               	movf	??_Flash_Memory_Initialization,w
 11496  057B  0081               	movwf	1
 11497                           
 11498                           ;MCU_B1.c: 936: i = setPercentValue(((char)(70*0.8)));
 11499  057C  3038               	movlw	56
 11500  057D  318A  22D8  3185   	fcall	_setPercentValue
 11501  0580  0020               	movlb	0	; select bank0
 11502  0581  00E2               	movwf	??_Flash_Memory_Initialization
 11503  0582  0862               	movf	??_Flash_Memory_Initialization,w
 11504  0583  00E3               	movwf	Flash_Memory_Initialization@i
 11505                           
 11506                           ;MCU_B1.c: 937: product->Data[21] = i;
 11507  0584  0863               	movf	Flash_Memory_Initialization@i,w
 11508  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11509  0586  0879               	movf	_product,w
 11510  0587  3E15               	addlw	21
 11511  0588  0086               	movwf	6
 11512  0589  3002               	movlw	2	; select bank4/5
 11513  058A  0087               	movwf	7
 11514  058B  0862               	movf	??_Flash_Memory_Initialization,w
 11515  058C  0081               	movwf	1
 11516                           
 11517                           ;MCU_B1.c: 938: product->Data[22] = i;
 11518  058D  0863               	movf	Flash_Memory_Initialization@i,w
 11519  058E  00E2               	movwf	??_Flash_Memory_Initialization
 11520  058F  0879               	movf	_product,w
 11521  0590  3E16               	addlw	22
 11522  0591  0086               	movwf	6
 11523  0592  3002               	movlw	2	; select bank4/5
 11524  0593  0087               	movwf	7
 11525  0594  0862               	movf	??_Flash_Memory_Initialization,w
 11526  0595  0081               	movwf	1
 11527                           
 11528                           ;MCU_B1.c: 939: product->Data[23] = i;
 11529  0596  0863               	movf	Flash_Memory_Initialization@i,w
 11530  0597  00E2               	movwf	??_Flash_Memory_Initialization
 11531  0598  0879               	movf	_product,w
 11532  0599  3E17               	addlw	23
 11533  059A  0086               	movwf	6
 11534  059B  3002               	movlw	2	; select bank4/5
 11535  059C  0087               	movwf	7
 11536  059D  0862               	movf	??_Flash_Memory_Initialization,w
 11537  059E  0081               	movwf	1
 11538                           
 11539                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11540  059F  0879               	movf	_product,w
 11541  05A0  3E0C               	addlw	12
 11542  05A1  0086               	movwf	6
 11543  05A2  3002               	movlw	2	; select bank4/5
 11544  05A3  0087               	movwf	7
 11545  05A4  0801               	movf	1,w
 11546  05A5  3AFF               	xorlw	255
 11547  05A6  1D03               	skipz
 11548  05A7  0008               	return
 11549  05A8  0879               	movf	_product,w
 11550  05A9  3E0D               	addlw	13
 11551  05AA  0086               	movwf	6
 11552  05AB  3002               	movlw	2	; select bank4/5
 11553  05AC  0087               	movwf	7
 11554  05AD  0801               	movf	1,w
 11555  05AE  3AFF               	xorlw	255
 11556  05AF  1D03               	skipz
 11557  05B0  0008               	return
 11558  05B1  0879               	movf	_product,w
 11559  05B2  3E0E               	addlw	14
 11560  05B3  0086               	movwf	6
 11561  05B4  3002               	movlw	2	; select bank4/5
 11562  05B5  0087               	movwf	7
 11563  05B6  0801               	movf	1,w
 11564  05B7  3AFF               	xorlw	255
 11565  05B8  1D03               	skipz
 11566  05B9  0008               	return
 11567                           
 11568                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 11569  05BA  0021               	movlb	1	; select bank1
 11570  05BB  15A0               	bsf	_myMain^(0+128),3
 11571                           
 11572                           ;MCU_B1.c: 943: myMain.First = 1;
 11573  05BC  16A0               	bsf	_myMain^(0+128),5
 11574                           
 11575                           ;MCU_B1.c: 944: }
 11576                           ;MCU_B1.c: 945: } else {
 11577  05BD  0008               	return
 11578  05BE                     l9766:	
 11579                           
 11580                           ;MCU_B1.c: 946: i = setPercentValue(((char)(70*0.8)));
 11581  05BE  3038               	movlw	56
 11582  05BF  318A  22D8  3185   	fcall	_setPercentValue
 11583  05C2  0020               	movlb	0	; select bank0
 11584  05C3  00E2               	movwf	??_Flash_Memory_Initialization
 11585  05C4  0862               	movf	??_Flash_Memory_Initialization,w
 11586  05C5  00E3               	movwf	Flash_Memory_Initialization@i
 11587                           
 11588                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 11589  05C6  30FF               	movlw	255
 11590  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11591  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11592  05C9  00A0               	movwf	setMemory_Data@data
 11593  05CA  3000               	movlw	0
 11594  05CB  319D  2523  3185   	fcall	_setMemory_Data
 11595                           
 11596                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 11597  05CE  30FF               	movlw	255
 11598  05CF  0020               	movlb	0	; select bank0
 11599  05D0  00E2               	movwf	??_Flash_Memory_Initialization
 11600  05D1  0862               	movf	??_Flash_Memory_Initialization,w
 11601  05D2  00A0               	movwf	setMemory_Data@data
 11602  05D3  3001               	movlw	1
 11603  05D4  319D  2523  3185   	fcall	_setMemory_Data
 11604                           
 11605                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 11606  05D7  30FF               	movlw	255
 11607  05D8  0020               	movlb	0	; select bank0
 11608  05D9  00E2               	movwf	??_Flash_Memory_Initialization
 11609  05DA  0862               	movf	??_Flash_Memory_Initialization,w
 11610  05DB  00A0               	movwf	setMemory_Data@data
 11611  05DC  3002               	movlw	2
 11612  05DD  319D  2523  3185   	fcall	_setMemory_Data
 11613                           
 11614                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 11615  05E0  30FF               	movlw	255
 11616  05E1  0020               	movlb	0	; select bank0
 11617  05E2  00E2               	movwf	??_Flash_Memory_Initialization
 11618  05E3  0862               	movf	??_Flash_Memory_Initialization,w
 11619  05E4  00A0               	movwf	setMemory_Data@data
 11620  05E5  3003               	movlw	3
 11621  05E6  319D  2523  3185   	fcall	_setMemory_Data
 11622                           
 11623                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 11624  05E9  30FF               	movlw	255
 11625  05EA  0020               	movlb	0	; select bank0
 11626  05EB  00E2               	movwf	??_Flash_Memory_Initialization
 11627  05EC  0862               	movf	??_Flash_Memory_Initialization,w
 11628  05ED  00A0               	movwf	setMemory_Data@data
 11629  05EE  3004               	movlw	4
 11630  05EF  319D  2523  3185   	fcall	_setMemory_Data
 11631                           
 11632                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 11633  05F2  30FF               	movlw	255
 11634  05F3  0020               	movlb	0	; select bank0
 11635  05F4  00E2               	movwf	??_Flash_Memory_Initialization
 11636  05F5  0862               	movf	??_Flash_Memory_Initialization,w
 11637  05F6  00A0               	movwf	setMemory_Data@data
 11638  05F7  3005               	movlw	5
 11639  05F8  319D  2523  3185   	fcall	_setMemory_Data
 11640                           
 11641                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 11642  05FB  30AA               	movlw	170
 11643  05FC  0020               	movlb	0	; select bank0
 11644  05FD  00E2               	movwf	??_Flash_Memory_Initialization
 11645  05FE  0862               	movf	??_Flash_Memory_Initialization,w
 11646  05FF  00A0               	movwf	setMemory_Data@data
 11647  0600  301F               	movlw	31
 11648  0601  319D  2523  3185   	fcall	_setMemory_Data
 11649                           
 11650                           ;MCU_B1.c: 954: product->Data[21] = i;
 11651  0604  0020               	movlb	0	; select bank0
 11652  0605  0863               	movf	Flash_Memory_Initialization@i,w
 11653  0606  00E2               	movwf	??_Flash_Memory_Initialization
 11654  0607  0879               	movf	_product,w
 11655  0608  3E15               	addlw	21
 11656  0609  0086               	movwf	6
 11657  060A  3002               	movlw	2	; select bank4/5
 11658  060B  0087               	movwf	7
 11659  060C  0862               	movf	??_Flash_Memory_Initialization,w
 11660  060D  0081               	movwf	1
 11661                           
 11662                           ;MCU_B1.c: 955: product->Data[22] = i;
 11663  060E  0863               	movf	Flash_Memory_Initialization@i,w
 11664  060F  00E2               	movwf	??_Flash_Memory_Initialization
 11665  0610  0879               	movf	_product,w
 11666  0611  3E16               	addlw	22
 11667  0612  0086               	movwf	6
 11668  0613  3002               	movlw	2	; select bank4/5
 11669  0614  0087               	movwf	7
 11670  0615  0862               	movf	??_Flash_Memory_Initialization,w
 11671  0616  0081               	movwf	1
 11672                           
 11673                           ;MCU_B1.c: 956: product->Data[23] = i;
 11674  0617  0863               	movf	Flash_Memory_Initialization@i,w
 11675  0618  00E2               	movwf	??_Flash_Memory_Initialization
 11676  0619  0879               	movf	_product,w
 11677  061A  3E17               	addlw	23
 11678  061B  0086               	movwf	6
 11679  061C  3002               	movlw	2	; select bank4/5
 11680  061D  0087               	movwf	7
 11681  061E  0862               	movf	??_Flash_Memory_Initialization,w
 11682  061F  0081               	movwf	1
 11683                           
 11684                           ;MCU_B1.c: 957: GIE = 0;
 11685  0620  138B               	bcf	11,7	;volatile
 11686                           
 11687                           ;MCU_B1.c: 958: Flash_Memory_Write();
 11688  0621  3191  21E1         	fcall	_Flash_Memory_Write
 11689                           
 11690                           ;MCU_B1.c: 959: GIE = 1;
 11691  0623  178B               	bsf	11,7	;volatile
 11692                           
 11693                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 11694  0624  0021               	movlb	1	; select bank1
 11695  0625  15A0               	bsf	_myMain^(0+128),3
 11696                           
 11697                           ;MCU_B1.c: 961: myMain.First = 1;
 11698  0626  16A0               	bsf	_myMain^(0+128),5
 11699  0627  0008               	return
 11700  0628                     __end_of_Flash_Memory_Initialization:	
 11701                           
 11702                           	psect	text68
 11703  1D23                     __ptext68:	
 11704 ;; *************** function _setMemory_Data *****************
 11705 ;; Defined at:
 11706 ;;		line 1076 in file "../src/MCU_B1.c"
 11707 ;; Parameters:    Size  Location     Type
 11708 ;;  address         1    wreg     unsigned char 
 11709 ;;  data            1    0[BANK0 ] unsigned char 
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  address         1    2[BANK0 ] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;		None               void
 11714 ;; Registers used:
 11715 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        3 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    5
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_Flash_Memory_Initialization
 11732 ;;		_Flash_Memory_Modify
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           
 11737                           ;psect for function _setMemory_Data
 11738  1D23                     _setMemory_Data:	
 11739                           
 11740                           ;incstack = 0
 11741                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11742                           ;setMemory_Data@address stored from wreg
 11743  1D23  0020               	movlb	0	; select bank0
 11744  1D24  00A2               	movwf	setMemory_Data@address
 11745                           
 11746                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 11747  1D25  0820               	movf	setMemory_Data@data,w
 11748  1D26  00A1               	movwf	??_setMemory_Data
 11749  1D27  0822               	movf	setMemory_Data@address,w
 11750  1D28  3EBE               	addlw	_Memory& (0+255)
 11751  1D29  0086               	movwf	6
 11752  1D2A  3001               	movlw	1	; select bank3/4
 11753  1D2B  0087               	movwf	7
 11754  1D2C  0821               	movf	??_setMemory_Data,w
 11755  1D2D  0081               	movwf	1
 11756  1D2E  0008               	return
 11757  1D2F                     __end_of_setMemory_Data:	
 11758                           
 11759                           	psect	text69
 11760  11E1                     __ptext69:	
 11761 ;; *************** function _Flash_Memory_Write *****************
 11762 ;; Defined at:
 11763 ;;		line 1009 in file "../src/MCU_B1.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;		None
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;  i               1    1[BANK0 ] unsigned char 
 11768 ;; Return value:  Size  Location     Type
 11769 ;;		None               void
 11770 ;; Registers used:
 11771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11772 ;; Tracked objects:
 11773 ;;		On entry : 0/0
 11774 ;;		On exit  : 0/0
 11775 ;;		Unchanged: 0/0
 11776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;Total ram usage:        2 bytes
 11782 ;; Hardware stack levels used:    1
 11783 ;; Hardware stack levels required when called:    6
 11784 ;; This function calls:
 11785 ;;		_Flash_Memory_Unlock
 11786 ;; This function is called by:
 11787 ;;		_Flash_Memory_Initialization
 11788 ;;		_Flash_Memory_Modify
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _Flash_Memory_Write
 11794  11E1                     _Flash_Memory_Write:	
 11795                           
 11796                           ;MCU_B1.c: 1010: char i = 0;
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11800  11E1  0020               	movlb	0	; select bank0
 11801  11E2  01A1               	clrf	Flash_Memory_Write@i
 11802                           
 11803                           ;MCU_B1.c: 1011: CFGS = 0;
 11804  11E3  0023               	movlb	3	; select bank3
 11805  11E4  1315               	bcf	21,6	;volatile
 11806                           
 11807                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 11808  11E5  3030               	movlw	48
 11809  11E6  0092               	movwf	18	;volatile
 11810                           
 11811                           ;MCU_B1.c: 1013: PMDATH = 0;
 11812  11E7  0194               	clrf	20	;volatile
 11813                           
 11814                           ;MCU_B1.c: 1014: FREE = 0;
 11815  11E8  1215               	bcf	21,4	;volatile
 11816                           
 11817                           ;MCU_B1.c: 1015: LWLO = 1;
 11818  11E9  1695               	bsf	21,5	;volatile
 11819                           
 11820                           ;MCU_B1.c: 1016: WREN = 1;
 11821  11EA  1515               	bsf	21,2	;volatile
 11822                           
 11823                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 11824  11EB  0020               	movlb	0	; select bank0
 11825  11EC  01A1               	clrf	Flash_Memory_Write@i
 11826  11ED  3020               	movlw	32
 11827  11EE  0221               	subwf	Flash_Memory_Write@i,w
 11828  11EF  1803               	btfsc	3,0
 11829  11F0  2A09               	goto	l1208
 11830  11F1                     l8978:	
 11831                           
 11832                           ;MCU_B1.c: 1018: PMADRL = i;
 11833  11F1  0821               	movf	Flash_Memory_Write@i,w
 11834  11F2  0023               	movlb	3	; select bank3
 11835  11F3  0091               	movwf	17	;volatile
 11836                           
 11837                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 11838  11F4  0020               	movlb	0	; select bank0
 11839  11F5  0821               	movf	Flash_Memory_Write@i,w
 11840  11F6  3EBE               	addlw	_Memory& (0+255)
 11841  11F7  0086               	movwf	6
 11842  11F8  3001               	movlw	1	; select bank3/4
 11843  11F9  0087               	movwf	7
 11844  11FA  0801               	movf	1,w
 11845  11FB  0023               	movlb	3	; select bank3
 11846  11FC  0093               	movwf	19	;volatile
 11847                           
 11848                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 11849  11FD  319C  248E  3191   	fcall	_Flash_Memory_Unlock
 11850  1200  3001               	movlw	1
 11851  1201  0020               	movlb	0	; select bank0
 11852  1202  00A0               	movwf	??_Flash_Memory_Write
 11853  1203  0820               	movf	??_Flash_Memory_Write,w
 11854  1204  07A1               	addwf	Flash_Memory_Write@i,f
 11855  1205  3020               	movlw	32
 11856  1206  0221               	subwf	Flash_Memory_Write@i,w
 11857  1207  1C03               	skipc
 11858  1208  29F1               	goto	l8978
 11859  1209                     l1208:	
 11860                           
 11861                           ;MCU_B1.c: 1021: }
 11862                           ;MCU_B1.c: 1022: LWLO = 0;
 11863  1209  0023               	movlb	3	; select bank3
 11864  120A  1295               	bcf	21,5	;volatile
 11865                           
 11866                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 11867  120B  319C  248E         	fcall	_Flash_Memory_Unlock
 11868                           
 11869                           ;MCU_B1.c: 1024: WREN = 0;
 11870  120D  0023               	movlb	3	; select bank3
 11871  120E  1115               	bcf	21,2	;volatile
 11872  120F  0008               	return
 11873  1210                     __end_of_Flash_Memory_Write:	
 11874                           
 11875                           	psect	text70
 11876  1C8E                     __ptext70:	
 11877 ;; *************** function _Flash_Memory_Unlock *****************
 11878 ;; Defined at:
 11879 ;;		line 988 in file "../src/MCU_B1.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;		None
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;		None
 11884 ;; Return value:  Size  Location     Type
 11885 ;;		None               void
 11886 ;; Registers used:
 11887 ;;		wreg
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;Total ram usage:        0 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    5
 11900 ;; This function calls:
 11901 ;;		Nothing
 11902 ;; This function is called by:
 11903 ;;		_Flash_Memory_Write
 11904 ;;		_Flash_Memory_Erasing
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           
 11909                           ;psect for function _Flash_Memory_Unlock
 11910  1C8E                     _Flash_Memory_Unlock:	
 11911                           
 11912                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 11913                           
 11914                           ;incstack = 0
 11915                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11916  1C8E  3055               	movlw	85
 11917  1C8F  0023               	movlb	3	; select bank3
 11918  1C90  0096               	movwf	22	;volatile
 11919                           
 11920                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 11921  1C91  30AA               	movlw	170
 11922  1C92  0096               	movwf	22	;volatile
 11923                           
 11924                           ;MCU_B1.c: 991: WR = 1;
 11925  1C93  1495               	bsf	21,1	;volatile
 11926                           
 11927                           ;MCU_B1.c: 992: __nop();
 11928  1C94  0000               	nop
 11929                           
 11930                           ;MCU_B1.c: 993: __nop();
 11931  1C95  0000               	nop
 11932  1C96  0008               	return
 11933  1C97                     __end_of_Flash_Memory_Unlock:	
 11934                           
 11935                           	psect	text71
 11936  1F1A                     __ptext71:	
 11937 ;; *************** function _Flash_Memory_Read *****************
 11938 ;; Defined at:
 11939 ;;		line 997 in file "../src/MCU_B1.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  address         1    wreg     unsigned char 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;  address         1    2[BANK0 ] unsigned char 
 11944 ;;  ret             1    3[BANK0 ] unsigned char 
 11945 ;;  i               1    1[BANK0 ] unsigned char 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      unsigned char 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        4 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    5
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_Flash_Memory_Initialization
 11966 ;;		_Flash_Memory_Modify
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function _Flash_Memory_Read
 11972  1F1A                     _Flash_Memory_Read:	
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11976                           ;Flash_Memory_Read@address stored from wreg
 11977  1F1A  0020               	movlb	0	; select bank0
 11978  1F1B  00A2               	movwf	Flash_Memory_Read@address
 11979                           
 11980                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 11981  1F1C  01A1               	clrf	Flash_Memory_Read@i
 11982  1F1D  01A3               	clrf	Flash_Memory_Read@ret
 11983                           
 11984                           ;MCU_B1.c: 999: PMADRH = 0x30;
 11985  1F1E  3030               	movlw	48
 11986  1F1F  0023               	movlb	3	; select bank3
 11987  1F20  0092               	movwf	18	;volatile
 11988                           
 11989                           ;MCU_B1.c: 1000: PMADRL = address;
 11990  1F21  0020               	movlb	0	; select bank0
 11991  1F22  0822               	movf	Flash_Memory_Read@address,w
 11992  1F23  0023               	movlb	3	; select bank3
 11993  1F24  0091               	movwf	17	;volatile
 11994                           
 11995                           ;MCU_B1.c: 1001: CFGS = 0;
 11996  1F25  1315               	bcf	21,6	;volatile
 11997                           
 11998                           ;MCU_B1.c: 1002: RD = 1;
 11999  1F26  1415               	bsf	21,0	;volatile
 12000                           
 12001                           ;MCU_B1.c: 1003: i = PMDATH;
 12002  1F27  0814               	movf	20,w	;volatile
 12003  1F28  0020               	movlb	0	; select bank0
 12004  1F29  00A0               	movwf	??_Flash_Memory_Read
 12005  1F2A  0820               	movf	??_Flash_Memory_Read,w
 12006  1F2B  00A1               	movwf	Flash_Memory_Read@i
 12007                           
 12008                           ;MCU_B1.c: 1004: ret = PMDATL;
 12009  1F2C  0023               	movlb	3	; select bank3
 12010  1F2D  0813               	movf	19,w	;volatile
 12011  1F2E  0020               	movlb	0	; select bank0
 12012  1F2F  00A0               	movwf	??_Flash_Memory_Read
 12013  1F30  0820               	movf	??_Flash_Memory_Read,w
 12014  1F31  00A3               	movwf	Flash_Memory_Read@ret
 12015                           
 12016                           ;MCU_B1.c: 1005: return ret;
 12017  1F32  0823               	movf	Flash_Memory_Read@ret,w
 12018  1F33  0008               	return
 12019  1F34                     __end_of_Flash_Memory_Read:	
 12020                           
 12021                           	psect	text72
 12022  0628                     __ptext72:	
 12023 ;; *************** function _Exception_Main *****************
 12024 ;; Defined at:
 12025 ;;		line 523 in file "../src/Main_B1.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;  i               2    4[BANK1 ] int 
 12030 ;;  i               2    2[BANK1 ] int 
 12031 ;;  lights          1    6[BANK1 ] unsigned char 
 12032 ;;  error           1    1[BANK1 ] unsigned char 
 12033 ;;  count           1    0[BANK1 ] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;		None               void
 12036 ;; Registers used:
 12037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        8 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    9
 12050 ;; This function calls:
 12051 ;;		_getDimmerLights_Line
 12052 ;;		_getDimmerLights_Status
 12053 ;;		_getMain_All_Error_Status
 12054 ;;		_getMain_LightsStatus
 12055 ;;		_setBuz
 12056 ;;		_setDimmerLights_SwOff
 12057 ;;		_setLED
 12058 ;; This function is called by:
 12059 ;;		_main
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           
 12064                           ;psect for function _Exception_Main
 12065  0628                     _Exception_Main:	
 12066                           
 12067                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12071  0628  3000               	movlw	0
 12072  0629  3192  2270  3186   	fcall	_getMain_All_Error_Status
 12073  062C  0020               	movlb	0	; select bank0
 12074  062D  00EB               	movwf	??_Exception_Main
 12075  062E  086B               	movf	??_Exception_Main,w
 12076  062F  0021               	movlb	1	; select bank1
 12077  0630  00EA               	movwf	Exception_Main@error^(0+128)
 12078                           
 12079                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12080  0631  01EF               	clrf	Exception_Main@lights^(0+128)
 12081  0632  01E9               	clrf	Exception_Main@count^(0+128)
 12082  0633  0AE9               	incf	Exception_Main@count^(0+128),f
 12083                           
 12084                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12085  0634  1DAB               	btfss	(_myMain^(0+128)+11),3
 12086  0635  2E43               	goto	l10100
 12087                           
 12088                           ;Main_B1.c: 527: if (error == 0) {
 12089  0636  08EA               	movf	Exception_Main@error^(0+128),f
 12090  0637  1D03               	skipz
 12091  0638  0008               	return
 12092                           
 12093                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12094  0639  11AB               	bcf	(_myMain^(0+128)+11),3
 12095                           
 12096                           ;Main_B1.c: 533: setLED(99, 10);
 12097  063A  300A               	movlw	10
 12098  063B  0020               	movlb	0	; select bank0
 12099  063C  00EB               	movwf	??_Exception_Main
 12100  063D  086B               	movf	??_Exception_Main,w
 12101  063E  00A2               	movwf	setLED@command
 12102  063F  3063               	movlw	99
 12103  0640  3193  23E4         	fcall	_setLED
 12104                           
 12105                           ;Main_B1.c: 535: }
 12106                           ;Main_B1.c: 536: } else {
 12107  0642  0008               	return
 12108  0643                     l10100:	
 12109                           
 12110                           ;Main_B1.c: 537: if (error != 0) {
 12111  0643  0021               	movlb	1	; select bank1
 12112  0644  086A               	movf	Exception_Main@error^(0+128),w
 12113  0645  1903               	btfsc	3,2
 12114  0646  0008               	return
 12115                           
 12116                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12117  0647  15AB               	bsf	(_myMain^(0+128)+11),3
 12118                           
 12119                           ;Main_B1.c: 541: setLED(99, 11);
 12120  0648  300B               	movlw	11
 12121  0649  0020               	movlb	0	; select bank0
 12122  064A  00EB               	movwf	??_Exception_Main
 12123  064B  086B               	movf	??_Exception_Main,w
 12124  064C  00A2               	movwf	setLED@command
 12125  064D  3063               	movlw	99
 12126  064E  3193  23E4  3186   	fcall	_setLED
 12127                           
 12128                           ;Main_B1.c: 543: switch (error) {
 12129  0651  2EF9               	goto	l10148
 12130  0652                     l10106:	
 12131                           ;Main_B1.c: 544: case 2:
 12132                           
 12133                           
 12134                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12135  0652  319C  24B4  3186   	fcall	_getMain_LightsStatus
 12136  0655  3A01               	xorlw	1
 12137  0656  1D03               	skipz
 12138  0657  2E61               	goto	l10110
 12139                           
 12140                           ;Main_B1.c: 546: setBuz(10, 300);
 12141  0658  302C               	movlw	44
 12142  0659  0020               	movlb	0	; select bank0
 12143  065A  00A9               	movwf	setBuz@time
 12144  065B  3001               	movlw	1
 12145  065C  00AA               	movwf	setBuz@time+1
 12146  065D  300A               	movlw	10
 12147  065E  3197  27A7  3186   	fcall	_setBuz
 12148  0661                     l10110:	
 12149                           
 12150                           ;Main_B1.c: 547: }
 12151                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12152  0661  0021               	movlb	1	; select bank1
 12153  0662  01EB               	clrf	Exception_Main@i^(0+128)
 12154  0663  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12155  0664                     l10120:	
 12156  0664  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12157  0665  3A80               	xorlw	128
 12158  0666  0020               	movlb	0	; select bank0
 12159  0667  00EB               	movwf	??_Exception_Main
 12160  0668  3080               	movlw	128
 12161  0669  026B               	subwf	??_Exception_Main,w
 12162  066A  1D03               	skipz
 12163  066B  2E6F               	goto	u11625
 12164  066C  0021               	movlb	1	; select bank1
 12165  066D  0869               	movf	Exception_Main@count^(0+128),w
 12166  066E  026B               	subwf	Exception_Main@i^(0+128),w
 12167  066F                     u11625:	
 12168  066F  1803               	btfsc	3,0
 12169  0670  2E93               	goto	u11620
 12170                           
 12171                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12172  0671  0021               	movlb	1	; select bank1
 12173  0672  086B               	movf	Exception_Main@i^(0+128),w
 12174  0673  3E01               	addlw	1
 12175  0674  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12176  0677  3A01               	xorlw	1
 12177  0678  1D03               	skipz
 12178  0679  2E8D               	goto	l10118
 12179                           
 12180                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12181  067A  0020               	movlb	0	; select bank0
 12182  067B  086F               	movf	_DimmerLights,w
 12183  067C  3E0B               	addlw	11
 12184  067D  0086               	movwf	6
 12185  067E  3001               	movlw	1	; select bank2/3
 12186  067F  0087               	movwf	7
 12187  0680  1481               	bsf	1,1
 12188                           
 12189                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12190  0681  086F               	movf	_DimmerLights,w
 12191  0682  3E02               	addlw	2
 12192  0683  0086               	movwf	6
 12193  0684  3001               	movlw	1	; select bank2/3
 12194  0685  0087               	movwf	7
 12195  0686  1081               	bcf	1,1
 12196                           
 12197                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12198  0687  0021               	movlb	1	; select bank1
 12199  0688  086B               	movf	Exception_Main@i^(0+128),w
 12200  0689  3E01               	addlw	1
 12201  068A  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12202  068D                     l10118:	
 12203  068D  3001               	movlw	1
 12204  068E  0021               	movlb	1	; select bank1
 12205  068F  07EB               	addwf	Exception_Main@i^(0+128),f
 12206  0690  3000               	movlw	0
 12207  0691  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12208  0692  2E64               	goto	l10120
 12209  0693                     u11620:	
 12210  0693  0021               	movlb	1	; select bank1
 12211  0694  0008               	return
 12212  0695                     l10122:	
 12213                           ;Main_B1.c: 558: case 3:
 12214                           
 12215                           ;Main_B1.c: 555: }
 12216                           ;Main_B1.c: 556: }
 12217                           ;Main_B1.c: 557: break;
 12218                           
 12219                           
 12220                           ;Main_B1.c: 560: setBuz(5, 300);
 12221  0695  302C               	movlw	44
 12222  0696  0020               	movlb	0	; select bank0
 12223  0697  00A9               	movwf	setBuz@time
 12224  0698  3001               	movlw	1
 12225  0699  00AA               	movwf	setBuz@time+1
 12226  069A  3005               	movlw	5
 12227  069B  3197  27A7  3186   	fcall	_setBuz
 12228                           
 12229                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12230  069E  319C  24DF  3186   	fcall	_getDimmerLights_Line
 12231  06A1  0020               	movlb	0	; select bank0
 12232  06A2  00EB               	movwf	??_Exception_Main
 12233  06A3  086B               	movf	??_Exception_Main,w
 12234  06A4  0021               	movlb	1	; select bank1
 12235  06A5  00EF               	movwf	Exception_Main@lights^(0+128)
 12236                           
 12237                           ;Main_B1.c: 562: if (lights == 0) {
 12238  06A6  08EF               	movf	Exception_Main@lights^(0+128),f
 12239  06A7  1D03               	skipz
 12240  06A8  2EDC               	goto	l10140
 12241                           
 12242                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12243  06A9  01ED               	clrf	Exception_Main@i_3436^(0+128)
 12244  06AA  01EE               	clrf	(Exception_Main@i_3436+1)^(0+128)
 12245  06AB                     l10138:	
 12246  06AB  086E               	movf	(Exception_Main@i_3436+1)^(0+128),w
 12247  06AC  3A80               	xorlw	128
 12248  06AD  0020               	movlb	0	; select bank0
 12249  06AE  00EB               	movwf	??_Exception_Main
 12250  06AF  3080               	movlw	128
 12251  06B0  026B               	subwf	??_Exception_Main,w
 12252  06B1  1D03               	skipz
 12253  06B2  2EB6               	goto	u11655
 12254  06B3  0021               	movlb	1	; select bank1
 12255  06B4  0869               	movf	Exception_Main@count^(0+128),w
 12256  06B5  026D               	subwf	Exception_Main@i_3436^(0+128),w
 12257  06B6                     u11655:	
 12258  06B6  1803               	btfsc	3,0
 12259  06B7  2EDA               	goto	u11650
 12260                           
 12261                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12262  06B8  0021               	movlb	1	; select bank1
 12263  06B9  086D               	movf	Exception_Main@i_3436^(0+128),w
 12264  06BA  3E01               	addlw	1
 12265  06BB  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12266  06BE  3A01               	xorlw	1
 12267  06BF  1D03               	skipz
 12268  06C0  2ED4               	goto	l10136
 12269                           
 12270                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12271  06C1  0020               	movlb	0	; select bank0
 12272  06C2  086F               	movf	_DimmerLights,w
 12273  06C3  3E0B               	addlw	11
 12274  06C4  0086               	movwf	6
 12275  06C5  3001               	movlw	1	; select bank2/3
 12276  06C6  0087               	movwf	7
 12277  06C7  1481               	bsf	1,1
 12278                           
 12279                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12280  06C8  086F               	movf	_DimmerLights,w
 12281  06C9  3E02               	addlw	2
 12282  06CA  0086               	movwf	6
 12283  06CB  3001               	movlw	1	; select bank2/3
 12284  06CC  0087               	movwf	7
 12285  06CD  1081               	bcf	1,1
 12286                           
 12287                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12288  06CE  0021               	movlb	1	; select bank1
 12289  06CF  086D               	movf	Exception_Main@i_3436^(0+128),w
 12290  06D0  3E01               	addlw	1
 12291  06D1  3195  2568  3186   	fcall	_setDimmerLights_SwOff
 12292  06D4                     l10136:	
 12293  06D4  3001               	movlw	1
 12294  06D5  0021               	movlb	1	; select bank1
 12295  06D6  07ED               	addwf	Exception_Main@i_3436^(0+128),f
 12296  06D7  3000               	movlw	0
 12297  06D8  3DEE               	addwfc	(Exception_Main@i_3436+1)^(0+128),f
 12298  06D9  2EAB               	goto	l10138
 12299  06DA                     u11650:	
 12300  06DA  0021               	movlb	1	; select bank1
 12301  06DB  0008               	return
 12302  06DC                     l10140:	
 12303                           ;Main_B1.c: 570: }
 12304                           ;Main_B1.c: 571: }
 12305                           ;Main_B1.c: 572: } else {
 12306                           
 12307                           
 12308                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12309  06DC  0021               	movlb	1	; select bank1
 12310  06DD  086F               	movf	Exception_Main@lights^(0+128),w
 12311  06DE  319D  25B9  3186   	fcall	_getDimmerLights_Status
 12312  06E1  3A01               	xorlw	1
 12313  06E2  1903               	btfsc	3,2
 12314  06E3  2EE6               	goto	l10142
 12315  06E4  0021               	movlb	1	; select bank1
 12316  06E5  0008               	return
 12317  06E6                     l10142:	
 12318                           
 12319                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12320  06E6  0020               	movlb	0	; select bank0
 12321  06E7  086F               	movf	_DimmerLights,w
 12322  06E8  3E0B               	addlw	11
 12323  06E9  0086               	movwf	6
 12324  06EA  3001               	movlw	1	; select bank2/3
 12325  06EB  0087               	movwf	7
 12326  06EC  1481               	bsf	1,1
 12327                           
 12328                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12329  06ED  086F               	movf	_DimmerLights,w
 12330  06EE  3E02               	addlw	2
 12331  06EF  0086               	movwf	6
 12332  06F0  3001               	movlw	1	; select bank2/3
 12333  06F1  0087               	movwf	7
 12334  06F2  1081               	bcf	1,1
 12335                           
 12336                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12337  06F3  0021               	movlb	1	; select bank1
 12338  06F4  086F               	movf	Exception_Main@lights^(0+128),w
 12339  06F5  3195  2568         	fcall	_setDimmerLights_SwOff
 12340  06F7  0021               	movlb	1	; select bank1
 12341  06F8  0008               	return
 12342  06F9                     l10148:	
 12343                           ;Main_B1.c: 582: }
 12344                           
 12345                           ;Main_B1.c: 579: }
 12346                           ;Main_B1.c: 580: }
 12347                           ;Main_B1.c: 581: break;
 12348                           
 12349  06F9  0021               	movlb	1	; select bank1
 12350  06FA  086A               	movf	Exception_Main@error^(0+128),w
 12351                           
 12352                           ; Switch size 1, requested type "space"
 12353                           ; Number of cases is 2, Range of values is 2 to 3
 12354                           ; switch strategies available:
 12355                           ; Name         Instructions Cycles
 12356                           ; simple_byte            7     4 (average)
 12357                           ; direct_byte           13     9 (fixed)
 12358                           ; jumptable            263     9 (fixed)
 12359                           ;	Chosen strategy is simple_byte
 12360  06FB  3A02               	xorlw	2	; case 2
 12361  06FC  1903               	skipnz
 12362  06FD  2E52               	goto	l10106
 12363  06FE  3A01               	xorlw	1	; case 3
 12364  06FF  1903               	skipnz
 12365  0700  2E95               	goto	l10122
 12366  0701  2F03               	goto	l1455
 12367  0702  0008               	return
 12368  0703                     l1455:	
 12369  0703  0008               	return
 12370  0704                     __end_of_Exception_Main:	
 12371                           
 12372                           	psect	text73
 12373  1CDF                     __ptext73:	
 12374 ;; *************** function _getDimmerLights_Line *****************
 12375 ;; Defined at:
 12376 ;;		line 736 in file "../src/Dimmer_B1.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  line            1    0[BANK0 ] unsigned char 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      unsigned char 
 12383 ;; Registers used:
 12384 ;;		wreg, status,2
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        1 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    5
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_Exception_Main
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           
 12405                           ;psect for function _getDimmerLights_Line
 12406  1CDF                     _getDimmerLights_Line:	
 12407                           
 12408                           ;Dimmer_B1.c: 737: char line = 0;
 12409                           
 12410                           ;incstack = 0
 12411                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12412  1CDF  0020               	movlb	0	; select bank0
 12413  1CE0  01A0               	clrf	getDimmerLights_Line@line
 12414                           
 12415                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12416  1CE1  0022               	movlb	2	; select bank2
 12417  1CE2  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12418  1CE3  2CE7               	goto	l9254
 12419                           
 12420                           ;Dimmer_B1.c: 740: line = 1;
 12421  1CE4  0020               	movlb	0	; select bank0
 12422  1CE5  01A0               	clrf	getDimmerLights_Line@line
 12423  1CE6  0AA0               	incf	getDimmerLights_Line@line,f
 12424  1CE7                     l9254:	
 12425                           
 12426                           ;Dimmer_B1.c: 741: }
 12427                           ;Dimmer_B1.c: 753: return line;
 12428  1CE7  0020               	movlb	0	; select bank0
 12429  1CE8  0820               	movf	getDimmerLights_Line@line,w
 12430  1CE9  0008               	return
 12431  1CEA                     __end_of_getDimmerLights_Line:	
 12432                           
 12433                           	psect	text74
 12434  1F4E                     __ptext74:	
 12435 ;; *************** function _DimmerLights_Main *****************
 12436 ;; Defined at:
 12437 ;;		line 502 in file "../src/Dimmer_B1.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;		None
 12440 ;; Auto vars:     Size  Location     Type
 12441 ;;		None
 12442 ;; Return value:  Size  Location     Type
 12443 ;;		None               void
 12444 ;; Registers used:
 12445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12446 ;; Tracked objects:
 12447 ;;		On entry : 0/0
 12448 ;;		On exit  : 0/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;Total ram usage:        0 bytes
 12456 ;; Hardware stack levels used:    1
 12457 ;; Hardware stack levels required when called:   10
 12458 ;; This function calls:
 12459 ;;		_getLoad_OK
 12460 ;;		_getMain_All_Error_Status
 12461 ;;		_getMain_LightsStatus
 12462 ;;		_setDimmerLights_Main
 12463 ;; This function is called by:
 12464 ;;		_main
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468                           
 12469                           ;psect for function _DimmerLights_Main
 12470  1F4E                     _DimmerLights_Main:	
 12471                           
 12472                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12473                           
 12474                           ;incstack = 0
 12475                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12476  1F4E  0021               	movlb	1	; select bank1
 12477  1F4F  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12478  1F50  2F66               	goto	l9736
 12479                           
 12480                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12481  1F51  319C  246D  319F   	fcall	_getLoad_OK
 12482  1F54  3A01               	xorlw	1
 12483  1F55  1903               	skipnz
 12484  1F56  2F64               	goto	l730
 12485  1F57  3000               	movlw	0
 12486  1F58  3192  2270  319F   	fcall	_getMain_All_Error_Status
 12487  1F5B  3800               	iorlw	0
 12488  1F5C  1D03               	skipz
 12489  1F5D  2F64               	goto	l730
 12490  1F5E  319C  24B4  319F   	fcall	_getMain_LightsStatus
 12491  1F61  3800               	iorlw	0
 12492  1F62  1D03               	skipz
 12493  1F63  2F66               	goto	l9736
 12494  1F64                     l730:	
 12495                           
 12496                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12497  1F64  0021               	movlb	1	; select bank1
 12498  1F65  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12499  1F66                     l9736:	
 12500                           
 12501                           ;Dimmer_B1.c: 517: }
 12502                           ;Dimmer_B1.c: 518: }
 12503                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12504  1F66  3001               	movlw	1
 12505  1F67  3196  2606         	fcall	_setDimmerLights_Main
 12506  1F69  0008               	return
 12507  1F6A                     __end_of_DimmerLights_Main:	
 12508                           
 12509                           	psect	text75
 12510  1606                     __ptext75:	
 12511 ;; *************** function _setDimmerLights_Main *****************
 12512 ;; Defined at:
 12513 ;;		line 536 in file "../src/Dimmer_B1.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;  lights          1    wreg     unsigned char 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  lights          1   78[BANK0 ] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;		None               void
 12520 ;; Registers used:
 12521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:        1 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    9
 12534 ;; This function calls:
 12535 ;;		_DimmerLightsPointSelect
 12536 ;;		_getDimmerLights_Allow_Condition
 12537 ;;		_setDimmerLights
 12538 ;;		_setDimmerLights_Adj
 12539 ;; This function is called by:
 12540 ;;		_DimmerLights_Main
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _setDimmerLights_Main
 12546  1606                     _setDimmerLights_Main:	
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12550                           ;setDimmerLights_Main@lights stored from wreg
 12551  1606  0020               	movlb	0	; select bank0
 12552  1607  00EE               	movwf	setDimmerLights_Main@lights
 12553                           
 12554                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12555  1608  086E               	movf	setDimmerLights_Main@lights,w
 12556  1609  319C  24D4  3196   	fcall	_DimmerLightsPointSelect
 12557                           
 12558                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12559  160C  0020               	movlb	0	; select bank0
 12560  160D  086F               	movf	_DimmerLights,w
 12561  160E  3E0A               	addlw	10
 12562  160F  0086               	movwf	6
 12563  1610  3001               	movlw	1	; select bank2/3
 12564  1611  0087               	movwf	7
 12565  1612  1C81               	btfss	1,1
 12566  1613  2E35               	goto	l9234
 12567                           
 12568                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12569  1614  086E               	movf	setDimmerLights_Main@lights,w
 12570  1615  319E  26D1  3196   	fcall	_getDimmerLights_Allow_Condition
 12571  1618  3800               	iorlw	0
 12572  1619  1D03               	skipz
 12573  161A  0008               	return
 12574                           
 12575                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12576  161B  0020               	movlb	0	; select bank0
 12577  161C  086F               	movf	_DimmerLights,w
 12578  161D  3E0A               	addlw	10
 12579  161E  0086               	movwf	6
 12580  161F  3001               	movlw	1	; select bank2/3
 12581  1620  0087               	movwf	7
 12582  1621  1081               	bcf	1,1
 12583                           
 12584                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12585  1622  086F               	movf	_DimmerLights,w
 12586  1623  3E0A               	addlw	10
 12587  1624  0086               	movwf	6
 12588  1625  3001               	movlw	1	; select bank2/3
 12589  1626  0087               	movwf	7
 12590  1627  1C01               	btfss	1,0
 12591  1628  2E2F               	goto	l9232
 12592                           
 12593                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12594  1629  01EB               	clrf	setDimmerLights@status
 12595  162A  0AEB               	incf	setDimmerLights@status,f
 12596  162B  086E               	movf	setDimmerLights_Main@lights,w
 12597  162C  3196  2656         	fcall	_setDimmerLights
 12598                           
 12599                           ;Dimmer_B1.c: 544: } else {
 12600  162E  0008               	return
 12601  162F                     l9232:	
 12602                           
 12603                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12604  162F  0020               	movlb	0	; select bank0
 12605  1630  01EB               	clrf	setDimmerLights@status
 12606  1631  086E               	movf	setDimmerLights_Main@lights,w
 12607  1632  3196  2656         	fcall	_setDimmerLights
 12608                           
 12609                           ;Dimmer_B1.c: 546: }
 12610                           ;Dimmer_B1.c: 547: }
 12611                           ;Dimmer_B1.c: 548: } else {
 12612  1634  0008               	return
 12613  1635                     l9234:	
 12614                           
 12615                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12616  1635  0020               	movlb	0	; select bank0
 12617  1636  086F               	movf	_DimmerLights,w
 12618  1637  3E0A               	addlw	10
 12619  1638  0086               	movwf	6
 12620  1639  3001               	movlw	1	; select bank2/3
 12621  163A  0087               	movwf	7
 12622  163B  1D81               	btfss	1,3
 12623  163C  0008               	return
 12624                           
 12625                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12626  163D  086F               	movf	_DimmerLights,w
 12627  163E  3E0A               	addlw	10
 12628  163F  0086               	movwf	6
 12629  1640  3001               	movlw	1	; select bank2/3
 12630  1641  0087               	movwf	7
 12631  1642  1181               	bcf	1,3
 12632                           
 12633                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12634  1643  086F               	movf	_DimmerLights,w
 12635  1644  3E0A               	addlw	10
 12636  1645  0086               	movwf	6
 12637  1646  3001               	movlw	1	; select bank2/3
 12638  1647  0087               	movwf	7
 12639  1648  1D01               	btfss	1,2
 12640  1649  2E50               	goto	l9240
 12641                           
 12642                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12643  164A  01EB               	clrf	setDimmerLights_Adj@status
 12644  164B  0AEB               	incf	setDimmerLights_Adj@status,f
 12645  164C  086E               	movf	setDimmerLights_Main@lights,w
 12646  164D  3197  274F         	fcall	_setDimmerLights_Adj
 12647                           
 12648                           ;Dimmer_B1.c: 553: } else {
 12649  164F  0008               	return
 12650  1650                     l9240:	
 12651                           
 12652                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12653  1650  0020               	movlb	0	; select bank0
 12654  1651  01EB               	clrf	setDimmerLights_Adj@status
 12655  1652  086E               	movf	setDimmerLights_Main@lights,w
 12656  1653  3197  274F         	fcall	_setDimmerLights_Adj
 12657  1655  0008               	return
 12658  1656                     __end_of_setDimmerLights_Main:	
 12659                           
 12660                           	psect	text76
 12661  174F                     __ptext76:	
 12662 ;; *************** function _setDimmerLights_Adj *****************
 12663 ;; Defined at:
 12664 ;;		line 672 in file "../src/Dimmer_B1.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;  lights          1    wreg     unsigned char 
 12667 ;;  status          1   75[BANK0 ] unsigned char 
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;  lights          1   77[BANK0 ] unsigned char 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;Total ram usage:        3 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    8
 12686 ;; This function calls:
 12687 ;;		_setBuz
 12688 ;;		_setDimmerLights_Line
 12689 ;;		_setPercentValue
 12690 ;;		_setProductData
 12691 ;;		_setRF_DimmerLights
 12692 ;;		_setTxData
 12693 ;; This function is called by:
 12694 ;;		_setDimmerLights_Main
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           
 12699                           ;psect for function _setDimmerLights_Adj
 12700  174F                     _setDimmerLights_Adj:	
 12701                           
 12702                           ;incstack = 0
 12703                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12704                           ;setDimmerLights_Adj@lights stored from wreg
 12705  174F  0020               	movlb	0	; select bank0
 12706  1750  00ED               	movwf	setDimmerLights_Adj@lights
 12707                           
 12708                           ;Dimmer_B1.c: 674: if (status == 1) {
 12709  1751  086B               	movf	setDimmerLights_Adj@status,w
 12710  1752  3A01               	xorlw	1
 12711  1753  1D03               	skipz
 12712  1754  2F67               	goto	l8920
 12713                           
 12714                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12715  1755  0A6F               	incf	_DimmerLights,w
 12716  1756  0086               	movwf	6
 12717  1757  3001               	movlw	1	; select bank2/3
 12718  1758  0087               	movwf	7
 12719  1759  1701               	bsf	1,6
 12720                           
 12721                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12722  175A  0A6F               	incf	_DimmerLights,w
 12723  175B  0086               	movwf	6
 12724  175C  3001               	movlw	1	; select bank2/3
 12725  175D  0087               	movwf	7
 12726  175E  1681               	bsf	1,5
 12727                           
 12728                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12729  175F  3064               	movlw	100
 12730  1760  00A9               	movwf	setBuz@time
 12731  1761  3000               	movlw	0
 12732  1762  00AA               	movwf	setBuz@time+1
 12733  1763  3001               	movlw	1
 12734  1764  3197  27A7         	fcall	_setBuz
 12735                           
 12736                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12737  1766  0008               	return
 12738  1767                     l8920:	
 12739  1767  0020               	movlb	0	; select bank0
 12740  1768  08EB               	movf	setDimmerLights_Adj@status,f
 12741  1769  1D03               	skipz
 12742  176A  0008               	return
 12743                           
 12744                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12745  176B  0021               	movlb	1	; select bank1
 12746  176C  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12747                           
 12748                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12749  176D  0020               	movlb	0	; select bank0
 12750  176E  086D               	movf	setDimmerLights_Adj@lights,w
 12751  176F  319D  256D  3197   	fcall	_setDimmerLights_Line
 12752                           
 12753                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12754  1772  0020               	movlb	0	; select bank0
 12755  1773  0A6F               	incf	_DimmerLights,w
 12756  1774  0086               	movwf	6
 12757  1775  3001               	movlw	1	; select bank2/3
 12758  1776  0087               	movwf	7
 12759  1777  1301               	bcf	1,6
 12760                           
 12761                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 12762  1778  0A6F               	incf	_DimmerLights,w
 12763  1779  0086               	movwf	6
 12764  177A  3001               	movlw	1	; select bank2/3
 12765  177B  0087               	movwf	7
 12766  177C  1281               	bcf	1,5
 12767                           
 12768                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12769  177D  086F               	movf	_DimmerLights,w
 12770  177E  3E04               	addlw	4
 12771  177F  0086               	movwf	6
 12772  1780  3001               	movlw	1	; select bank2/3
 12773  1781  0087               	movwf	7
 12774  1782  0801               	movf	1,w
 12775  1783  00EC               	movwf	??_setDimmerLights_Adj
 12776  1784  086F               	movf	_DimmerLights,w
 12777  1785  3E06               	addlw	6
 12778  1786  0086               	movwf	6
 12779  1787  3001               	movlw	1	; select bank2/3
 12780  1788  0087               	movwf	7
 12781  1789  086C               	movf	??_setDimmerLights_Adj,w
 12782  178A  0081               	movwf	1
 12783                           
 12784                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12785  178B  086F               	movf	_DimmerLights,w
 12786  178C  3E04               	addlw	4
 12787  178D  0086               	movwf	6
 12788  178E  3001               	movlw	1	; select bank2/3
 12789  178F  0087               	movwf	7
 12790  1790  0801               	movf	1,w
 12791  1791  318A  22D8  3197   	fcall	_setPercentValue
 12792  1794  0020               	movlb	0	; select bank0
 12793  1795  00EC               	movwf	??_setDimmerLights_Adj
 12794  1796  086C               	movf	??_setDimmerLights_Adj,w
 12795  1797  00E2               	movwf	setProductData@value
 12796  1798  086D               	movf	setDimmerLights_Adj@lights,w
 12797  1799  3E14               	addlw	20
 12798  179A  319D  255F  3197   	fcall	_setProductData
 12799                           
 12800                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 12801  179D  0020               	movlb	0	; select bank0
 12802  179E  01E6               	clrf	setRF_DimmerLights@on
 12803  179F  0AE6               	incf	setRF_DimmerLights@on,f
 12804  17A0  086D               	movf	setDimmerLights_Adj@lights,w
 12805  17A1  3188  2045  3197   	fcall	_setRF_DimmerLights
 12806                           
 12807                           ;Dimmer_B1.c: 701: setTxData();
 12808  17A4  318E  2610         	fcall	_setTxData
 12809  17A6  0008               	return
 12810  17A7                     __end_of_setDimmerLights_Adj:	
 12811                           
 12812                           	psect	text77
 12813  1656                     __ptext77:	
 12814 ;; *************** function _setDimmerLights *****************
 12815 ;; Defined at:
 12816 ;;		line 630 in file "../src/Dimmer_B1.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  lights          1    wreg     unsigned char 
 12819 ;;  status          1   75[BANK0 ] unsigned char 
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;  lights          1   77[BANK0 ] unsigned char 
 12822 ;; Return value:  Size  Location     Type
 12823 ;;		None               void
 12824 ;; Registers used:
 12825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12831 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12834 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;Total ram usage:        3 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:    8
 12838 ;; This function calls:
 12839 ;;		_setDimmerLights_Line
 12840 ;;		_setLED
 12841 ;;		_setPercentValue
 12842 ;;		_setProductData
 12843 ;;		_setRF_DimmerLights
 12844 ;;		_setTxData
 12845 ;; This function is called by:
 12846 ;;		_setDimmerLights_Main
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function _setDimmerLights
 12852  1656                     _setDimmerLights:	
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12856                           ;setDimmerLights@lights stored from wreg
 12857  1656  0020               	movlb	0	; select bank0
 12858  1657  00ED               	movwf	setDimmerLights@lights
 12859                           
 12860                           ;Dimmer_B1.c: 638: if (status == 1) {
 12861  1658  086B               	movf	setDimmerLights@status,w
 12862  1659  3A01               	xorlw	1
 12863  165A  1D03               	skipz
 12864  165B  2E86               	goto	l8900
 12865                           
 12866                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12867  165C  0A6F               	incf	_DimmerLights,w
 12868  165D  0086               	movwf	6
 12869  165E  3001               	movlw	1	; select bank2/3
 12870  165F  0087               	movwf	7
 12871  1660  1501               	bsf	1,2
 12872                           
 12873                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 12874  1661  0021               	movlb	1	; select bank1
 12875  1662  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12876                           
 12877                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 12878  1663  0020               	movlb	0	; select bank0
 12879  1664  086D               	movf	setDimmerLights@lights,w
 12880  1665  319D  256D  3196   	fcall	_setDimmerLights_Line
 12881                           
 12882                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 12883  1668  0020               	movlb	0	; select bank0
 12884  1669  01A2               	clrf	setLED@command
 12885  166A  086D               	movf	setDimmerLights@lights,w
 12886  166B  3193  23E4  3196   	fcall	_setLED
 12887                           
 12888                           ;Dimmer_B1.c: 646: ;;
 12889                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(70*0.8));
 12890  166E  3038               	movlw	56
 12891  166F  0020               	movlb	0	; select bank0
 12892  1670  00EC               	movwf	??_setDimmerLights
 12893  1671  086F               	movf	_DimmerLights,w
 12894  1672  3E04               	addlw	4
 12895  1673  0086               	movwf	6
 12896  1674  3001               	movlw	1	; select bank2/3
 12897  1675  0087               	movwf	7
 12898  1676  086C               	movf	??_setDimmerLights,w
 12899  1677  0081               	movwf	1
 12900                           
 12901                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 12902  1678  3038               	movlw	56
 12903  1679  318A  22D8  3196   	fcall	_setPercentValue
 12904  167C  0020               	movlb	0	; select bank0
 12905  167D  00EC               	movwf	??_setDimmerLights
 12906  167E  086C               	movf	??_setDimmerLights,w
 12907  167F  00E2               	movwf	setProductData@value
 12908  1680  086D               	movf	setDimmerLights@lights,w
 12909  1681  3E14               	addlw	20
 12910  1682  319D  255F  3196   	fcall	_setProductData
 12911                           
 12912                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 12913  1685  2E9C               	goto	l8910
 12914  1686                     l8900:	
 12915  1686  0020               	movlb	0	; select bank0
 12916  1687  08EB               	movf	setDimmerLights@status,f
 12917  1688  1D03               	skipz
 12918  1689  2E9C               	goto	l8910
 12919                           
 12920                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12921  168A  0A6F               	incf	_DimmerLights,w
 12922  168B  0086               	movwf	6
 12923  168C  3001               	movlw	1	; select bank2/3
 12924  168D  0087               	movwf	7
 12925  168E  1101               	bcf	1,2
 12926                           
 12927                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 12928  168F  0021               	movlb	1	; select bank1
 12929  1690  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12930                           
 12931                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 12932  1691  3000               	movlw	0
 12933  1692  319D  256D  3196   	fcall	_setDimmerLights_Line
 12934                           
 12935                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 12936  1695  0020               	movlb	0	; select bank0
 12937  1696  01A2               	clrf	setLED@command
 12938  1697  0AA2               	incf	setLED@command,f
 12939  1698  086D               	movf	setDimmerLights@lights,w
 12940  1699  3193  23E4  3196   	fcall	_setLED
 12941  169C                     l8910:	
 12942                           ;Dimmer_B1.c: 662: ;;
 12943                           
 12944                           
 12945                           ;Dimmer_B1.c: 663: }
 12946                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 12947  169C  0020               	movlb	0	; select bank0
 12948  169D  086B               	movf	setDimmerLights@status,w
 12949  169E  00EC               	movwf	??_setDimmerLights
 12950  169F  086C               	movf	??_setDimmerLights,w
 12951  16A0  00E6               	movwf	setRF_DimmerLights@on
 12952  16A1  086D               	movf	setDimmerLights@lights,w
 12953  16A2  3188  2045  3196   	fcall	_setRF_DimmerLights
 12954                           
 12955                           ;Dimmer_B1.c: 667: setTxData();
 12956  16A5  318E  2610         	fcall	_setTxData
 12957  16A7  0008               	return
 12958  16A8                     __end_of_setDimmerLights:	
 12959                           
 12960                           	psect	text78
 12961  0E10                     __ptext78:	
 12962 ;; *************** function _setTxData *****************
 12963 ;; Defined at:
 12964 ;;		line 171 in file "../src/RF_Control_B1.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;		None
 12967 ;; Auto vars:     Size  Location     Type
 12968 ;;  i               1    0        unsigned char 
 12969 ;; Return value:  Size  Location     Type
 12970 ;;		None               void
 12971 ;; Registers used:
 12972 ;;		wreg, fsr1l, fsr1h
 12973 ;; Tracked objects:
 12974 ;;		On entry : 0/0
 12975 ;;		On exit  : 0/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;Total ram usage:        1 bytes
 12983 ;; Hardware stack levels used:    1
 12984 ;; Hardware stack levels required when called:    5
 12985 ;; This function calls:
 12986 ;;		Nothing
 12987 ;; This function is called by:
 12988 ;;		_setDimmerLights
 12989 ;;		_setDimmerLights_Adj
 12990 ;;		_getRxData
 12991 ;;		_setControl_Lights_Table
 12992 ;;		_setRFSW_Control
 12993 ;;		_setRFSW_AdjControl
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           
 12998                           ;psect for function _setTxData
 12999  0E10                     _setTxData:	
 13000                           
 13001                           ;RF_Control_B1.c: 172: char i;
 13002                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13003                           
 13004                           ;incstack = 0
 13005                           ; Regs used in _setTxData: [wregfsr1]
 13006  0E10  0021               	movlb	1	; select bank1
 13007  0E11  1C3A               	btfss	_RF1^(0+128),0
 13008  0E12  0008               	return
 13009                           
 13010                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13011  0E13  193A               	btfsc	_RF1^(0+128),2
 13012  0E14  0008               	return
 13013                           
 13014                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13015  0E15  153A               	bsf	_RF1^(0+128),2
 13016                           
 13017                           ;RF_Control_B1.c: 188: RF_Data[0] = 0x63;
 13018  0E16  3063               	movlw	99
 13019  0E17  0020               	movlb	0	; select bank0
 13020  0E18  00A0               	movwf	??_setTxData
 13021  0E19  0820               	movf	??_setTxData,w
 13022  0E1A  0023               	movlb	3	; select bank3
 13023  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13024                           
 13025                           ;RF_Control_B1.c: 189: RF_Data[1] = 0x02;
 13026  0E1C  3002               	movlw	2
 13027  0E1D  0020               	movlb	0	; select bank0
 13028  0E1E  00A0               	movwf	??_setTxData
 13029  0E1F  0820               	movf	??_setTxData,w
 13030  0E20  0023               	movlb	3	; select bank3
 13031  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13032                           
 13033                           ;RF_Control_B1.c: 191: RF_Data[2] = product->Data[2];
 13034  0E22  0879               	movf	_product,w
 13035  0E23  0086               	movwf	6
 13036  0E24  3002               	movlw	2	; select bank4/5
 13037  0E25  0087               	movwf	7
 13038  0E26  3002               	movlw	2	; select bank4/5
 13039  0E27  3F42               	moviw [2]fsr1
 13040  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13041                           
 13042                           ;RF_Control_B1.c: 192: RF_Data[3] = product->Data[3];
 13043  0E29  0879               	movf	_product,w
 13044  0E2A  0086               	movwf	6
 13045  0E2B  3002               	movlw	2	; select bank4/5
 13046  0E2C  0087               	movwf	7
 13047  0E2D  3002               	movlw	2	; select bank4/5
 13048  0E2E  3F43               	moviw [3]fsr1
 13049  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13050                           
 13051                           ;RF_Control_B1.c: 193: RF_Data[4] = product->Data[4];
 13052  0E30  0879               	movf	_product,w
 13053  0E31  0086               	movwf	6
 13054  0E32  3002               	movlw	2	; select bank4/5
 13055  0E33  0087               	movwf	7
 13056  0E34  3002               	movlw	2	; select bank4/5
 13057  0E35  3F44               	moviw [4]fsr1
 13058  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13059                           
 13060                           ;RF_Control_B1.c: 194: RF_Data[5] = product->Data[5];
 13061  0E37  0879               	movf	_product,w
 13062  0E38  0086               	movwf	6
 13063  0E39  3002               	movlw	2	; select bank4/5
 13064  0E3A  0087               	movwf	7
 13065  0E3B  3002               	movlw	2	; select bank4/5
 13066  0E3C  3F45               	moviw [5]fsr1
 13067  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13068                           
 13069                           ;RF_Control_B1.c: 195: RF_Data[6] = product->Data[6];
 13070  0E3E  0879               	movf	_product,w
 13071  0E3F  0086               	movwf	6
 13072  0E40  3002               	movlw	2	; select bank4/5
 13073  0E41  0087               	movwf	7
 13074  0E42  3002               	movlw	2	; select bank4/5
 13075  0E43  3F46               	moviw [6]fsr1
 13076  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13077                           
 13078                           ;RF_Control_B1.c: 196: RF_Data[7] = product->Data[7];
 13079  0E45  0879               	movf	_product,w
 13080  0E46  0086               	movwf	6
 13081  0E47  3002               	movlw	2	; select bank4/5
 13082  0E48  0087               	movwf	7
 13083  0E49  3002               	movlw	2	; select bank4/5
 13084  0E4A  3F47               	moviw [7]fsr1
 13085  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13086                           
 13087                           ;RF_Control_B1.c: 197: RF_Data[8] = product->Data[8];
 13088  0E4C  0879               	movf	_product,w
 13089  0E4D  0086               	movwf	6
 13090  0E4E  3002               	movlw	2	; select bank4/5
 13091  0E4F  0087               	movwf	7
 13092  0E50  3002               	movlw	2	; select bank4/5
 13093  0E51  3F48               	moviw [8]fsr1
 13094  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13095                           
 13096                           ;RF_Control_B1.c: 198: RF_Data[9] = product->Data[9];
 13097  0E53  0879               	movf	_product,w
 13098  0E54  0086               	movwf	6
 13099  0E55  3002               	movlw	2	; select bank4/5
 13100  0E56  0087               	movwf	7
 13101  0E57  3002               	movlw	2	; select bank4/5
 13102  0E58  3F49               	moviw [9]fsr1
 13103  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13104                           
 13105                           ;RF_Control_B1.c: 199: RF_Data[10] = product->Data[10];
 13106  0E5A  0879               	movf	_product,w
 13107  0E5B  0086               	movwf	6
 13108  0E5C  3002               	movlw	2	; select bank4/5
 13109  0E5D  0087               	movwf	7
 13110  0E5E  3002               	movlw	2	; select bank4/5
 13111  0E5F  3F4A               	moviw [10]fsr1
 13112  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13113                           
 13114                           ;RF_Control_B1.c: 200: RF_Data[11] = product->Data[11];
 13115  0E61  0879               	movf	_product,w
 13116  0E62  0086               	movwf	6
 13117  0E63  3002               	movlw	2	; select bank4/5
 13118  0E64  0087               	movwf	7
 13119  0E65  3002               	movlw	2	; select bank4/5
 13120  0E66  3F4B               	moviw [11]fsr1
 13121  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13122                           
 13123                           ;RF_Control_B1.c: 201: RF_Data[12] = product->Data[12];
 13124  0E68  0879               	movf	_product,w
 13125  0E69  0086               	movwf	6
 13126  0E6A  3002               	movlw	2	; select bank4/5
 13127  0E6B  0087               	movwf	7
 13128  0E6C  3002               	movlw	2	; select bank4/5
 13129  0E6D  3F4C               	moviw [12]fsr1
 13130  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13131                           
 13132                           ;RF_Control_B1.c: 202: RF_Data[13] = product->Data[13];
 13133  0E6F  0879               	movf	_product,w
 13134  0E70  0086               	movwf	6
 13135  0E71  3002               	movlw	2	; select bank4/5
 13136  0E72  0087               	movwf	7
 13137  0E73  3002               	movlw	2	; select bank4/5
 13138  0E74  3F4D               	moviw [13]fsr1
 13139  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13140                           
 13141                           ;RF_Control_B1.c: 203: RF_Data[14] = product->Data[14];
 13142  0E76  0879               	movf	_product,w
 13143  0E77  0086               	movwf	6
 13144  0E78  3002               	movlw	2	; select bank4/5
 13145  0E79  0087               	movwf	7
 13146  0E7A  3002               	movlw	2	; select bank4/5
 13147  0E7B  3F4E               	moviw [14]fsr1
 13148  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13149                           
 13150                           ;RF_Control_B1.c: 204: RF_Data[15] = product->Data[15];
 13151  0E7D  0879               	movf	_product,w
 13152  0E7E  0086               	movwf	6
 13153  0E7F  3002               	movlw	2	; select bank4/5
 13154  0E80  0087               	movwf	7
 13155  0E81  3002               	movlw	2	; select bank4/5
 13156  0E82  3F4F               	moviw [15]fsr1
 13157  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13158                           
 13159                           ;RF_Control_B1.c: 205: RF_Data[16] = product->Data[16];
 13160  0E84  0879               	movf	_product,w
 13161  0E85  0086               	movwf	6
 13162  0E86  3002               	movlw	2	; select bank4/5
 13163  0E87  0087               	movwf	7
 13164  0E88  3002               	movlw	2	; select bank4/5
 13165  0E89  3F50               	moviw [16]fsr1
 13166  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13167                           
 13168                           ;RF_Control_B1.c: 206: RF_Data[17] = product->Data[17];
 13169  0E8B  0879               	movf	_product,w
 13170  0E8C  0086               	movwf	6
 13171  0E8D  3002               	movlw	2	; select bank4/5
 13172  0E8E  0087               	movwf	7
 13173  0E8F  3002               	movlw	2	; select bank4/5
 13174  0E90  3F51               	moviw [17]fsr1
 13175  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13176                           
 13177                           ;RF_Control_B1.c: 207: RF_Data[18] = product->Data[18];
 13178  0E92  0879               	movf	_product,w
 13179  0E93  0086               	movwf	6
 13180  0E94  3002               	movlw	2	; select bank4/5
 13181  0E95  0087               	movwf	7
 13182  0E96  3002               	movlw	2	; select bank4/5
 13183  0E97  3F52               	moviw [18]fsr1
 13184  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13185                           
 13186                           ;RF_Control_B1.c: 208: RF_Data[19] = product->Data[19];
 13187  0E99  0879               	movf	_product,w
 13188  0E9A  0086               	movwf	6
 13189  0E9B  3002               	movlw	2	; select bank4/5
 13190  0E9C  0087               	movwf	7
 13191  0E9D  3002               	movlw	2	; select bank4/5
 13192  0E9E  3F53               	moviw [19]fsr1
 13193  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13194                           
 13195                           ;RF_Control_B1.c: 209: RF_Data[20] = 209;
 13196  0EA0  30D1               	movlw	209
 13197  0EA1  0020               	movlb	0	; select bank0
 13198  0EA2  00A0               	movwf	??_setTxData
 13199  0EA3  0820               	movf	??_setTxData,w
 13200  0EA4  0023               	movlb	3	; select bank3
 13201  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13202  0EA6  0008               	return
 13203  0EA7                     __end_of_setTxData:	
 13204                           
 13205                           	psect	text79
 13206  0845                     __ptext79:	
 13207 ;; *************** function _setRF_DimmerLights *****************
 13208 ;; Defined at:
 13209 ;;		line 436 in file "../src/RF_Control_B1.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  lights          1    wreg     unsigned char 
 13212 ;;  on              1   70[BANK0 ] unsigned char 
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;  lights          1   74[BANK0 ] unsigned char 
 13215 ;;  status          1   73[BANK0 ] unsigned char 
 13216 ;; Return value:  Size  Location     Type
 13217 ;;		None               void
 13218 ;; Registers used:
 13219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13220 ;; Tracked objects:
 13221 ;;		On entry : 0/0
 13222 ;;		On exit  : 0/0
 13223 ;;		Unchanged: 0/0
 13224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13225 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;Total ram usage:        5 bytes
 13230 ;; Hardware stack levels used:    1
 13231 ;; Hardware stack levels required when called:    6
 13232 ;; This function calls:
 13233 ;;		_setProductData
 13234 ;; This function is called by:
 13235 ;;		_setDimmerLights
 13236 ;;		_setDimmerLights_Adj
 13237 ;;		_setRFSW_Control
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           
 13242                           ;psect for function _setRF_DimmerLights
 13243  0845                     _setRF_DimmerLights:	
 13244                           
 13245                           ;incstack = 0
 13246                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13247                           ;setRF_DimmerLights@lights stored from wreg
 13248  0845  0020               	movlb	0	; select bank0
 13249  0846  00EA               	movwf	setRF_DimmerLights@lights
 13250                           
 13251                           ;RF_Control_B1.c: 437: char status = 1;
 13252  0847  01E9               	clrf	setRF_DimmerLights@status
 13253  0848  0AE9               	incf	setRF_DimmerLights@status,f
 13254                           
 13255                           ;RF_Control_B1.c: 438: status <<= (lights - 1);
 13256  0849  086A               	movf	setRF_DimmerLights@lights,w
 13257  084A  3EFF               	addlw	-1
 13258  084B  0A89               	incf	9,f
 13259  084C  284F               	goto	u8970
 13260  084D                     u8975:	
 13261  084D  1003               	clrc
 13262  084E  0DE9               	rlf	setRF_DimmerLights@status,f
 13263  084F                     u8970:	
 13264  084F  3EFF               	addlw	-1
 13265  0850  1D03               	skipz
 13266  0851  284D               	goto	u8975
 13267                           
 13268                           ;RF_Control_B1.c: 439: setProductData(11, lights);
 13269  0852  086A               	movf	setRF_DimmerLights@lights,w
 13270  0853  00E7               	movwf	??_setRF_DimmerLights
 13271  0854  0867               	movf	??_setRF_DimmerLights,w
 13272  0855  00E2               	movwf	setProductData@value
 13273  0856  300B               	movlw	11
 13274  0857  319D  255F  3188   	fcall	_setProductData
 13275                           
 13276                           ;RF_Control_B1.c: 447: setProductData(9, product->Data[20 + lights]);
 13277  085A  0020               	movlb	0	; select bank0
 13278  085B  086A               	movf	setRF_DimmerLights@lights,w
 13279  085C  3E14               	addlw	20
 13280  085D  0779               	addwf	_product,w
 13281  085E  00E7               	movwf	??_setRF_DimmerLights
 13282  085F  0867               	movf	??_setRF_DimmerLights,w
 13283  0860  0086               	movwf	6
 13284  0861  3002               	movlw	2	; select bank4/5
 13285  0862  0087               	movwf	7
 13286  0863  0801               	movf	1,w
 13287  0864  00E8               	movwf	??_setRF_DimmerLights+1
 13288  0865  0868               	movf	??_setRF_DimmerLights+1,w
 13289  0866  00E2               	movwf	setProductData@value
 13290  0867  3009               	movlw	9
 13291  0868  319D  255F  3188   	fcall	_setProductData
 13292                           
 13293                           ;RF_Control_B1.c: 448: setProductData(17, product->Data[26 + lights]);
 13294  086B  0020               	movlb	0	; select bank0
 13295  086C  086A               	movf	setRF_DimmerLights@lights,w
 13296  086D  3E1A               	addlw	26
 13297  086E  0779               	addwf	_product,w
 13298  086F  00E7               	movwf	??_setRF_DimmerLights
 13299  0870  0867               	movf	??_setRF_DimmerLights,w
 13300  0871  0086               	movwf	6
 13301  0872  3002               	movlw	2	; select bank4/5
 13302  0873  0087               	movwf	7
 13303  0874  0801               	movf	1,w
 13304  0875  00E8               	movwf	??_setRF_DimmerLights+1
 13305  0876  0868               	movf	??_setRF_DimmerLights+1,w
 13306  0877  00E2               	movwf	setProductData@value
 13307  0878  3011               	movlw	17
 13308  0879  319D  255F  3188   	fcall	_setProductData
 13309                           
 13310                           ;RF_Control_B1.c: 449: if (on == 1) {
 13311  087C  0020               	movlb	0	; select bank0
 13312  087D  0866               	movf	setRF_DimmerLights@on,w
 13313  087E  3A01               	xorlw	1
 13314  087F  1D03               	skipz
 13315  0880  288F               	goto	l8398
 13316                           
 13317                           ;RF_Control_B1.c: 450: setProductData(15, (product->Data[15] | status));
 13318  0881  0879               	movf	_product,w
 13319  0882  3E0F               	addlw	15
 13320  0883  0086               	movwf	6
 13321  0884  3002               	movlw	2	; select bank4/5
 13322  0885  0087               	movwf	7
 13323  0886  0801               	movf	1,w
 13324  0887  0469               	iorwf	setRF_DimmerLights@status,w
 13325  0888  00E7               	movwf	??_setRF_DimmerLights
 13326  0889  0867               	movf	??_setRF_DimmerLights,w
 13327  088A  00E2               	movwf	setProductData@value
 13328  088B  300F               	movlw	15
 13329  088C  319D  255F         	fcall	_setProductData
 13330                           
 13331                           ;RF_Control_B1.c: 451: } else {
 13332  088E  0008               	return
 13333  088F                     l8398:	
 13334                           
 13335                           ;RF_Control_B1.c: 452: setProductData(15, (product->Data[15]&(~status)));
 13336  088F  0879               	movf	_product,w
 13337  0890  3E0F               	addlw	15
 13338  0891  0086               	movwf	6
 13339  0892  3002               	movlw	2	; select bank4/5
 13340  0893  0087               	movwf	7
 13341  0894  0020               	movlb	0	; select bank0
 13342  0895  0969               	comf	setRF_DimmerLights@status,w
 13343  0896  0501               	andwf	1,w
 13344  0897  00E7               	movwf	??_setRF_DimmerLights
 13345  0898  0867               	movf	??_setRF_DimmerLights,w
 13346  0899  00E2               	movwf	setProductData@value
 13347  089A  300F               	movlw	15
 13348  089B  319D  255F         	fcall	_setProductData
 13349  089D  0008               	return
 13350  089E                     __end_of_setRF_DimmerLights:	
 13351                           
 13352                           	psect	text80
 13353  0AD8                     __ptext80:	
 13354 ;; *************** function _setPercentValue *****************
 13355 ;; Defined at:
 13356 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;  value           1    wreg     unsigned char 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  value           1   62[BANK0 ] unsigned char 
 13361 ;;  i               3   63[BANK0 ] float 
 13362 ;; Return value:  Size  Location     Type
 13363 ;;                  1    wreg      unsigned char 
 13364 ;; Registers used:
 13365 ;;		wreg, status,2, status,0, pclath, cstack
 13366 ;; Tracked objects:
 13367 ;;		On entry : 0/0
 13368 ;;		On exit  : 0/0
 13369 ;;		Unchanged: 0/0
 13370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;Total ram usage:        6 bytes
 13376 ;; Hardware stack levels used:    1
 13377 ;; Hardware stack levels required when called:    7
 13378 ;; This function calls:
 13379 ;;		___awtoft
 13380 ;;		___ftadd
 13381 ;;		___ftdiv
 13382 ;;		___ftneg
 13383 ;;		___fttol
 13384 ;; This function is called by:
 13385 ;;		_setDimmerLights
 13386 ;;		_setDimmerLights_Adj
 13387 ;;		_Flash_Memory_Initialization
 13388 ;; This function uses a non-reentrant model
 13389 ;;
 13390                           
 13391                           
 13392                           ;psect for function _setPercentValue
 13393  0AD8                     _setPercentValue:	
 13394                           
 13395                           ;incstack = 0
 13396                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13397                           ;setPercentValue@value stored from wreg
 13398  0AD8  0020               	movlb	0	; select bank0
 13399  0AD9  00DE               	movwf	setPercentValue@value
 13400                           
 13401                           ;Dimmer_B1.c: 1042: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13402  0ADA  3000               	movlw	0
 13403  0ADB  00DF               	movwf	setPercentValue@i
 13404  0ADC  3030               	movlw	48
 13405  0ADD  00E0               	movwf	setPercentValue@i+1
 13406  0ADE  3042               	movlw	66
 13407  0ADF  00E1               	movwf	setPercentValue@i+2
 13408                           
 13409                           ;Dimmer_B1.c: 1043: i /= 100;
 13410  0AE0  3000               	movlw	0
 13411  0AE1  00AE               	movwf	___ftdiv@f2
 13412  0AE2  30C8               	movlw	200
 13413  0AE3  00AF               	movwf	___ftdiv@f2+1
 13414  0AE4  3042               	movlw	66
 13415  0AE5  00B0               	movwf	___ftdiv@f2+2
 13416  0AE6  085F               	movf	setPercentValue@i,w
 13417  0AE7  00B1               	movwf	___ftdiv@f1
 13418  0AE8  0860               	movf	setPercentValue@i+1,w
 13419  0AE9  00B2               	movwf	___ftdiv@f1+1
 13420  0AEA  0861               	movf	setPercentValue@i+2,w
 13421  0AEB  00B3               	movwf	___ftdiv@f1+2
 13422  0AEC  318E  26A7  318A   	fcall	___ftdiv
 13423  0AEF  0020               	movlb	0	; select bank0
 13424  0AF0  082E               	movf	?___ftdiv,w
 13425  0AF1  00DF               	movwf	setPercentValue@i
 13426  0AF2  082F               	movf	?___ftdiv+1,w
 13427  0AF3  00E0               	movwf	setPercentValue@i+1
 13428  0AF4  0830               	movf	?___ftdiv+2,w
 13429  0AF5  00E1               	movwf	setPercentValue@i+2
 13430                           
 13431                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13432  0AF6  085E               	movf	setPercentValue@value,w
 13433  0AF7  00DC               	movwf	??_setPercentValue
 13434  0AF8  01DD               	clrf	??_setPercentValue+1
 13435  0AF9  09DC               	comf	??_setPercentValue,f
 13436  0AFA  09DD               	comf	??_setPercentValue+1,f
 13437  0AFB  0ADC               	incf	??_setPercentValue,f
 13438  0AFC  1903               	skipnz
 13439  0AFD  0ADD               	incf	??_setPercentValue+1,f
 13440  0AFE  085C               	movf	??_setPercentValue,w
 13441  0AFF  3E38               	addlw	56
 13442  0B00  00A8               	movwf	___awtoft@c
 13443  0B01  3000               	movlw	0
 13444  0B02  3D5D               	addwfc	??_setPercentValue+1,w
 13445  0B03  00A9               	movwf	___awtoft@c+1
 13446  0B04  3190  2089  318A   	fcall	___awtoft
 13447  0B07  0020               	movlb	0	; select bank0
 13448  0B08  0828               	movf	?___awtoft,w
 13449  0B09  00B1               	movwf	___ftdiv@f1
 13450  0B0A  0829               	movf	?___awtoft+1,w
 13451  0B0B  00B2               	movwf	___ftdiv@f1+1
 13452  0B0C  082A               	movf	?___awtoft+2,w
 13453  0B0D  00B3               	movwf	___ftdiv@f1+2
 13454  0B0E  085F               	movf	setPercentValue@i,w
 13455  0B0F  00AE               	movwf	___ftdiv@f2
 13456  0B10  0860               	movf	setPercentValue@i+1,w
 13457  0B11  00AF               	movwf	___ftdiv@f2+1
 13458  0B12  0861               	movf	setPercentValue@i+2,w
 13459  0B13  00B0               	movwf	___ftdiv@f2+2
 13460  0B14  318E  26A7  318A   	fcall	___ftdiv
 13461  0B17  0020               	movlb	0	; select bank0
 13462  0B18  082E               	movf	?___ftdiv,w
 13463  0B19  00BE               	movwf	___ftneg@f1
 13464  0B1A  082F               	movf	?___ftdiv+1,w
 13465  0B1B  00BF               	movwf	___ftneg@f1+1
 13466  0B1C  0830               	movf	?___ftdiv+2,w
 13467  0B1D  00C0               	movwf	___ftneg@f1+2
 13468  0B1E  319C  2485  318A   	fcall	___ftneg
 13469  0B21  0020               	movlb	0	; select bank0
 13470  0B22  083E               	movf	?___ftneg,w
 13471  0B23  00C4               	movwf	___ftadd@f2
 13472  0B24  083F               	movf	?___ftneg+1,w
 13473  0B25  00C5               	movwf	___ftadd@f2+1
 13474  0B26  0840               	movf	?___ftneg+2,w
 13475  0B27  00C6               	movwf	___ftadd@f2+2
 13476  0B28  3000               	movlw	0
 13477  0B29  00C1               	movwf	___ftadd@f1
 13478  0B2A  30C8               	movlw	200
 13479  0B2B  00C2               	movwf	___ftadd@f1+1
 13480  0B2C  3042               	movlw	66
 13481  0B2D  00C3               	movwf	___ftadd@f1+2
 13482  0B2E  3184  2456  318A   	fcall	___ftadd
 13483  0B31  0020               	movlb	0	; select bank0
 13484  0B32  0841               	movf	?___ftadd,w
 13485  0B33  00CE               	movwf	___fttol@f1
 13486  0B34  0842               	movf	?___ftadd+1,w
 13487  0B35  00CF               	movwf	___fttol@f1+1
 13488  0B36  0843               	movf	?___ftadd+2,w
 13489  0B37  00D0               	movwf	___fttol@f1+2
 13490  0B38  318D  2589         	fcall	___fttol
 13491  0B3A  0020               	movlb	0	; select bank0
 13492  0B3B  084E               	movf	?___fttol,w
 13493  0B3C  0008               	return
 13494  0B3D                     __end_of_setPercentValue:	
 13495                           
 13496                           	psect	text81
 13497  0D89                     __ptext81:	
 13498 ;; *************** function ___fttol *****************
 13499 ;; Defined at:
 13500 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  f1              3   46[BANK0 ] float 
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  lval            4   55[BANK0 ] unsigned long 
 13505 ;;  exp1            1   59[BANK0 ] unsigned char 
 13506 ;;  sign1           1   54[BANK0 ] unsigned char 
 13507 ;; Return value:  Size  Location     Type
 13508 ;;                  4   46[BANK0 ] long 
 13509 ;; Registers used:
 13510 ;;		wreg, status,2, status,0
 13511 ;; Tracked objects:
 13512 ;;		On entry : 0/0
 13513 ;;		On exit  : 0/0
 13514 ;;		Unchanged: 0/0
 13515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;Total ram usage:       14 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    5
 13523 ;; This function calls:
 13524 ;;		Nothing
 13525 ;; This function is called by:
 13526 ;;		_getPercentValue
 13527 ;;		_setPercentValue
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           
 13532                           ;psect for function ___fttol
 13533  0D89                     ___fttol:	
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13537  0D89  0020               	movlb	0	; select bank0
 13538  0D8A  084E               	movf	___fttol@f1,w
 13539  0D8B  00D2               	movwf	??___fttol
 13540  0D8C  084F               	movf	___fttol@f1+1,w
 13541  0D8D  00D3               	movwf	??___fttol+1
 13542  0D8E  0850               	movf	___fttol@f1+2,w
 13543  0D8F  00D4               	movwf	??___fttol+2
 13544  0D90  1003               	clrc
 13545  0D91  0D53               	rlf	??___fttol+1,w
 13546  0D92  0D54               	rlf	??___fttol+2,w
 13547  0D93  00D5               	movwf	??___fttol+3
 13548  0D94  0855               	movf	??___fttol+3,w
 13549  0D95  00DB               	movwf	___fttol@exp1
 13550  0D96  08DB               	movf	___fttol@exp1,f
 13551  0D97  1D03               	skipz
 13552  0D98  2DA2               	goto	l8170
 13553  0D99  3000               	movlw	0
 13554  0D9A  00D1               	movwf	?___fttol+3
 13555  0D9B  3000               	movlw	0
 13556  0D9C  00D0               	movwf	?___fttol+2
 13557  0D9D  3000               	movlw	0
 13558  0D9E  00CF               	movwf	?___fttol+1
 13559  0D9F  3000               	movlw	0
 13560  0DA0  00CE               	movwf	?___fttol
 13561  0DA1  0008               	return
 13562  0DA2                     l8170:	
 13563  0DA2  084E               	movf	___fttol@f1,w
 13564  0DA3  00D2               	movwf	??___fttol
 13565  0DA4  084F               	movf	___fttol@f1+1,w
 13566  0DA5  00D3               	movwf	??___fttol+1
 13567  0DA6  0850               	movf	___fttol@f1+2,w
 13568  0DA7  00D4               	movwf	??___fttol+2
 13569  0DA8  3017               	movlw	23
 13570  0DA9                     u8605:	
 13571  0DA9  36D4               	lsrf	??___fttol+2,f
 13572  0DAA  0CD3               	rrf	??___fttol+1,f
 13573  0DAB  0CD2               	rrf	??___fttol,f
 13574  0DAC  0B89               	decfsz	9,f
 13575  0DAD  2DA9               	goto	u8605
 13576  0DAE  0852               	movf	??___fttol,w
 13577  0DAF  00D5               	movwf	??___fttol+3
 13578  0DB0  0855               	movf	??___fttol+3,w
 13579  0DB1  00D6               	movwf	___fttol@sign1
 13580  0DB2  17CF               	bsf	___fttol@f1+1,7
 13581  0DB3  30FF               	movlw	255
 13582  0DB4  05CE               	andwf	___fttol@f1,f
 13583  0DB5  30FF               	movlw	255
 13584  0DB6  05CF               	andwf	___fttol@f1+1,f
 13585  0DB7  3000               	movlw	0
 13586  0DB8  05D0               	andwf	___fttol@f1+2,f
 13587  0DB9  084E               	movf	___fttol@f1,w
 13588  0DBA  00D7               	movwf	___fttol@lval
 13589  0DBB  084F               	movf	___fttol@f1+1,w
 13590  0DBC  00D8               	movwf	___fttol@lval+1
 13591  0DBD  0850               	movf	___fttol@f1+2,w
 13592  0DBE  00D9               	movwf	___fttol@lval+2
 13593  0DBF  01DA               	clrf	___fttol@lval+3
 13594  0DC0  308E               	movlw	142
 13595  0DC1  02DB               	subwf	___fttol@exp1,f
 13596  0DC2  1FDB               	btfss	___fttol@exp1,7
 13597  0DC3  2DE0               	goto	l8190
 13598  0DC4  085B               	movf	___fttol@exp1,w
 13599  0DC5  3A80               	xorlw	128
 13600  0DC6  3E8F               	addlw	143
 13601  0DC7  1803               	skipnc
 13602  0DC8  2DD2               	goto	l8188
 13603  0DC9  3000               	movlw	0
 13604  0DCA  00D1               	movwf	?___fttol+3
 13605  0DCB  3000               	movlw	0
 13606  0DCC  00D0               	movwf	?___fttol+2
 13607  0DCD  3000               	movlw	0
 13608  0DCE  00CF               	movwf	?___fttol+1
 13609  0DCF  3000               	movlw	0
 13610  0DD0  00CE               	movwf	?___fttol
 13611  0DD1  0008               	return
 13612  0DD2                     l8188:	
 13613  0DD2  3001               	movlw	1
 13614  0DD3                     u8635:	
 13615  0DD3  36DA               	lsrf	___fttol@lval+3,f
 13616  0DD4  0CD9               	rrf	___fttol@lval+2,f
 13617  0DD5  0CD8               	rrf	___fttol@lval+1,f
 13618  0DD6  0CD7               	rrf	___fttol@lval,f
 13619  0DD7  0B89               	decfsz	9,f
 13620  0DD8  2DD3               	goto	u8635
 13621  0DD9  3001               	movlw	1
 13622  0DDA  00D2               	movwf	??___fttol
 13623  0DDB  0852               	movf	??___fttol,w
 13624  0DDC  07DB               	addwf	___fttol@exp1,f
 13625  0DDD  1903               	btfsc	3,2
 13626  0DDE  2DF9               	goto	l8200
 13627  0DDF  2DD2               	goto	l8188
 13628  0DE0                     l8190:	
 13629  0DE0  3018               	movlw	24
 13630  0DE1  025B               	subwf	___fttol@exp1,w
 13631  0DE2  1C03               	skipc
 13632  0DE3  2DF6               	goto	l8198
 13633  0DE4  3000               	movlw	0
 13634  0DE5  00D1               	movwf	?___fttol+3
 13635  0DE6  3000               	movlw	0
 13636  0DE7  00D0               	movwf	?___fttol+2
 13637  0DE8  3000               	movlw	0
 13638  0DE9  00CF               	movwf	?___fttol+1
 13639  0DEA  3000               	movlw	0
 13640  0DEB  00CE               	movwf	?___fttol
 13641  0DEC  0008               	return
 13642  0DED                     l8196:	
 13643  0DED  3001               	movlw	1
 13644  0DEE                     u8665:	
 13645  0DEE  35D7               	lslf	___fttol@lval,f
 13646  0DEF  0DD8               	rlf	___fttol@lval+1,f
 13647  0DF0  0DD9               	rlf	___fttol@lval+2,f
 13648  0DF1  0DDA               	rlf	___fttol@lval+3,f
 13649  0DF2  0B89               	decfsz	9,f
 13650  0DF3  2DEE               	goto	u8665
 13651  0DF4  3001               	movlw	1
 13652  0DF5  02DB               	subwf	___fttol@exp1,f
 13653  0DF6                     l8198:	
 13654  0DF6  08DB               	movf	___fttol@exp1,f
 13655  0DF7  1D03               	skipz
 13656  0DF8  2DED               	goto	l8196
 13657  0DF9                     l8200:	
 13658  0DF9  0856               	movf	___fttol@sign1,w
 13659  0DFA  1903               	btfsc	3,2
 13660  0DFB  2E07               	goto	l8204
 13661  0DFC  09D7               	comf	___fttol@lval,f
 13662  0DFD  09D8               	comf	___fttol@lval+1,f
 13663  0DFE  09D9               	comf	___fttol@lval+2,f
 13664  0DFF  09DA               	comf	___fttol@lval+3,f
 13665  0E00  0AD7               	incf	___fttol@lval,f
 13666  0E01  1903               	skipnz
 13667  0E02  0AD8               	incf	___fttol@lval+1,f
 13668  0E03  1903               	skipnz
 13669  0E04  0AD9               	incf	___fttol@lval+2,f
 13670  0E05  1903               	skipnz
 13671  0E06  0ADA               	incf	___fttol@lval+3,f
 13672  0E07                     l8204:	
 13673  0E07  085A               	movf	___fttol@lval+3,w
 13674  0E08  00D1               	movwf	?___fttol+3
 13675  0E09  0859               	movf	___fttol@lval+2,w
 13676  0E0A  00D0               	movwf	?___fttol+2
 13677  0E0B  0858               	movf	___fttol@lval+1,w
 13678  0E0C  00CF               	movwf	?___fttol+1
 13679  0E0D  0857               	movf	___fttol@lval,w
 13680  0E0E  00CE               	movwf	?___fttol
 13681  0E0F  0008               	return
 13682  0E10                     __end_of___fttol:	
 13683                           
 13684                           	psect	text82
 13685  1C85                     __ptext82:	
 13686 ;; *************** function ___ftneg *****************
 13687 ;; Defined at:
 13688 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  f1              3   30[BANK0 ] float 
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;		None
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  3   30[BANK0 ] float 
 13695 ;; Registers used:
 13696 ;;		wreg
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13702 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;Total ram usage:        3 bytes
 13707 ;; Hardware stack levels used:    1
 13708 ;; Hardware stack levels required when called:    5
 13709 ;; This function calls:
 13710 ;;		Nothing
 13711 ;; This function is called by:
 13712 ;;		_getPercentValue
 13713 ;;		_setPercentValue
 13714 ;; This function uses a non-reentrant model
 13715 ;;
 13716                           
 13717                           
 13718                           ;psect for function ___ftneg
 13719  1C85                     ___ftneg:	
 13720                           
 13721                           ;incstack = 0
 13722                           ; Regs used in ___ftneg: [wreg]
 13723  1C85  0020               	movlb	0	; select bank0
 13724  1C86  0840               	movf	___ftneg@f1+2,w
 13725  1C87  043F               	iorwf	___ftneg@f1+1,w
 13726  1C88  043E               	iorwf	___ftneg@f1,w
 13727  1C89  1903               	skipnz
 13728  1C8A  0008               	return
 13729  1C8B  3080               	movlw	128
 13730  1C8C  06C0               	xorwf	___ftneg@f1+2,f
 13731  1C8D  0008               	return
 13732  1C8E                     __end_of___ftneg:	
 13733                           
 13734                           	psect	text83
 13735  0EA7                     __ptext83:	
 13736 ;; *************** function ___ftdiv *****************
 13737 ;; Defined at:
 13738 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;  f2              3   14[BANK0 ] float 
 13741 ;;  f1              3   17[BANK0 ] float 
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;  f3              3   25[BANK0 ] float 
 13744 ;;  sign            1   29[BANK0 ] unsigned char 
 13745 ;;  exp             1   28[BANK0 ] unsigned char 
 13746 ;;  cntr            1   24[BANK0 ] unsigned char 
 13747 ;; Return value:  Size  Location     Type
 13748 ;;                  3   14[BANK0 ] float 
 13749 ;; Registers used:
 13750 ;;		wreg, status,2, status,0, pclath, cstack
 13751 ;; Tracked objects:
 13752 ;;		On entry : 0/0
 13753 ;;		On exit  : 0/0
 13754 ;;		Unchanged: 0/0
 13755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13756 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13758 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13759 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13760 ;;Total ram usage:       16 bytes
 13761 ;; Hardware stack levels used:    1
 13762 ;; Hardware stack levels required when called:    6
 13763 ;; This function calls:
 13764 ;;		___ftpack
 13765 ;; This function is called by:
 13766 ;;		_getPercentValue
 13767 ;;		_setPercentValue
 13768 ;; This function uses a non-reentrant model
 13769 ;;
 13770                           
 13771                           
 13772                           ;psect for function ___ftdiv
 13773  0EA7                     ___ftdiv:	
 13774                           
 13775                           ;incstack = 0
 13776                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13777  0EA7  0020               	movlb	0	; select bank0
 13778  0EA8  0831               	movf	___ftdiv@f1,w
 13779  0EA9  00B4               	movwf	??___ftdiv
 13780  0EAA  0832               	movf	___ftdiv@f1+1,w
 13781  0EAB  00B5               	movwf	??___ftdiv+1
 13782  0EAC  0833               	movf	___ftdiv@f1+2,w
 13783  0EAD  00B6               	movwf	??___ftdiv+2
 13784  0EAE  1003               	clrc
 13785  0EAF  0D35               	rlf	??___ftdiv+1,w
 13786  0EB0  0D36               	rlf	??___ftdiv+2,w
 13787  0EB1  00B7               	movwf	??___ftdiv+3
 13788  0EB2  0837               	movf	??___ftdiv+3,w
 13789  0EB3  00BC               	movwf	___ftdiv@exp
 13790  0EB4  08BC               	movf	___ftdiv@exp,f
 13791  0EB5  1D03               	skipz
 13792  0EB6  2EBE               	goto	l8070
 13793  0EB7  3000               	movlw	0
 13794  0EB8  00AE               	movwf	?___ftdiv
 13795  0EB9  3000               	movlw	0
 13796  0EBA  00AF               	movwf	?___ftdiv+1
 13797  0EBB  3000               	movlw	0
 13798  0EBC  00B0               	movwf	?___ftdiv+2
 13799  0EBD  0008               	return
 13800  0EBE                     l8070:	
 13801  0EBE  082E               	movf	___ftdiv@f2,w
 13802  0EBF  00B4               	movwf	??___ftdiv
 13803  0EC0  082F               	movf	___ftdiv@f2+1,w
 13804  0EC1  00B5               	movwf	??___ftdiv+1
 13805  0EC2  0830               	movf	___ftdiv@f2+2,w
 13806  0EC3  00B6               	movwf	??___ftdiv+2
 13807  0EC4  1003               	clrc
 13808  0EC5  0D35               	rlf	??___ftdiv+1,w
 13809  0EC6  0D36               	rlf	??___ftdiv+2,w
 13810  0EC7  00B7               	movwf	??___ftdiv+3
 13811  0EC8  0837               	movf	??___ftdiv+3,w
 13812  0EC9  00BD               	movwf	___ftdiv@sign
 13813  0ECA  08BD               	movf	___ftdiv@sign,f
 13814  0ECB  1D03               	skipz
 13815  0ECC  2ED4               	goto	l8076
 13816  0ECD  3000               	movlw	0
 13817  0ECE  00AE               	movwf	?___ftdiv
 13818  0ECF  3000               	movlw	0
 13819  0ED0  00AF               	movwf	?___ftdiv+1
 13820  0ED1  3000               	movlw	0
 13821  0ED2  00B0               	movwf	?___ftdiv+2
 13822  0ED3  0008               	return
 13823  0ED4                     l8076:	
 13824  0ED4  3000               	movlw	0
 13825  0ED5  00B9               	movwf	___ftdiv@f3
 13826  0ED6  3000               	movlw	0
 13827  0ED7  00BA               	movwf	___ftdiv@f3+1
 13828  0ED8  3000               	movlw	0
 13829  0ED9  00BB               	movwf	___ftdiv@f3+2
 13830  0EDA  3089               	movlw	137
 13831  0EDB  073D               	addwf	___ftdiv@sign,w
 13832  0EDC  00B4               	movwf	??___ftdiv
 13833  0EDD  0834               	movf	??___ftdiv,w
 13834  0EDE  02BC               	subwf	___ftdiv@exp,f
 13835  0EDF  0831               	movf	___ftdiv@f1,w
 13836  0EE0  00B4               	movwf	??___ftdiv
 13837  0EE1  0832               	movf	___ftdiv@f1+1,w
 13838  0EE2  00B5               	movwf	??___ftdiv+1
 13839  0EE3  0833               	movf	___ftdiv@f1+2,w
 13840  0EE4  00B6               	movwf	??___ftdiv+2
 13841  0EE5  3010               	movlw	16
 13842  0EE6                     u8405:	
 13843  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13844  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13845  0EE8  0CB4               	rrf	??___ftdiv,f
 13846  0EE9  0B89               	decfsz	9,f
 13847  0EEA  2EE6               	goto	u8405
 13848  0EEB  0834               	movf	??___ftdiv,w
 13849  0EEC  00B7               	movwf	??___ftdiv+3
 13850  0EED  0837               	movf	??___ftdiv+3,w
 13851  0EEE  00BD               	movwf	___ftdiv@sign
 13852  0EEF  082E               	movf	___ftdiv@f2,w
 13853  0EF0  00B4               	movwf	??___ftdiv
 13854  0EF1  082F               	movf	___ftdiv@f2+1,w
 13855  0EF2  00B5               	movwf	??___ftdiv+1
 13856  0EF3  0830               	movf	___ftdiv@f2+2,w
 13857  0EF4  00B6               	movwf	??___ftdiv+2
 13858  0EF5  3010               	movlw	16
 13859  0EF6                     u8415:	
 13860  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13861  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13862  0EF8  0CB4               	rrf	??___ftdiv,f
 13863  0EF9  0B89               	decfsz	9,f
 13864  0EFA  2EF6               	goto	u8415
 13865  0EFB  0834               	movf	??___ftdiv,w
 13866  0EFC  00B7               	movwf	??___ftdiv+3
 13867  0EFD  0837               	movf	??___ftdiv+3,w
 13868  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13869  0EFF  3080               	movlw	128
 13870  0F00  00B4               	movwf	??___ftdiv
 13871  0F01  0834               	movf	??___ftdiv,w
 13872  0F02  05BD               	andwf	___ftdiv@sign,f
 13873  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13874  0F04  30FF               	movlw	255
 13875  0F05  05B1               	andwf	___ftdiv@f1,f
 13876  0F06  30FF               	movlw	255
 13877  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13878  0F08  3000               	movlw	0
 13879  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13880  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13881  0F0B  30FF               	movlw	255
 13882  0F0C  05AE               	andwf	___ftdiv@f2,f
 13883  0F0D  30FF               	movlw	255
 13884  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13885  0F0F  3000               	movlw	0
 13886  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13887  0F11  3018               	movlw	24
 13888  0F12  00B4               	movwf	??___ftdiv
 13889  0F13  0834               	movf	??___ftdiv,w
 13890  0F14  00B8               	movwf	___ftdiv@cntr
 13891  0F15                     l8090:	
 13892  0F15  3001               	movlw	1
 13893  0F16                     u8425:	
 13894  0F16  35B9               	lslf	___ftdiv@f3,f
 13895  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13896  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13897  0F19  0B89               	decfsz	9,f
 13898  0F1A  2F16               	goto	u8425
 13899  0F1B  0830               	movf	___ftdiv@f2+2,w
 13900  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13901  0F1D  1D03               	skipz
 13902  0F1E  2F25               	goto	u8435
 13903  0F1F  082F               	movf	___ftdiv@f2+1,w
 13904  0F20  0232               	subwf	___ftdiv@f1+1,w
 13905  0F21  1D03               	skipz
 13906  0F22  2F25               	goto	u8435
 13907  0F23  082E               	movf	___ftdiv@f2,w
 13908  0F24  0231               	subwf	___ftdiv@f1,w
 13909  0F25                     u8435:	
 13910  0F25  1C03               	skipc
 13911  0F26  2F2E               	goto	l8098
 13912  0F27  082E               	movf	___ftdiv@f2,w
 13913  0F28  02B1               	subwf	___ftdiv@f1,f
 13914  0F29  082F               	movf	___ftdiv@f2+1,w
 13915  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13916  0F2B  0830               	movf	___ftdiv@f2+2,w
 13917  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13918  0F2D  1439               	bsf	___ftdiv@f3,0
 13919  0F2E                     l8098:	
 13920  0F2E  3001               	movlw	1
 13921  0F2F                     u8445:	
 13922  0F2F  35B1               	lslf	___ftdiv@f1,f
 13923  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13924  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13925  0F32  0B89               	decfsz	9,f
 13926  0F33  2F2F               	goto	u8445
 13927  0F34  3001               	movlw	1
 13928  0F35  02B8               	subwf	___ftdiv@cntr,f
 13929  0F36  1D03               	btfss	3,2
 13930  0F37  2F15               	goto	l8090
 13931  0F38  0839               	movf	___ftdiv@f3,w
 13932  0F39  00A0               	movwf	___ftpack@arg
 13933  0F3A  083A               	movf	___ftdiv@f3+1,w
 13934  0F3B  00A1               	movwf	___ftpack@arg+1
 13935  0F3C  083B               	movf	___ftdiv@f3+2,w
 13936  0F3D  00A2               	movwf	___ftpack@arg+2
 13937  0F3E  083C               	movf	___ftdiv@exp,w
 13938  0F3F  00B4               	movwf	??___ftdiv
 13939  0F40  0834               	movf	??___ftdiv,w
 13940  0F41  00A3               	movwf	___ftpack@exp
 13941  0F42  083D               	movf	___ftdiv@sign,w
 13942  0F43  00B5               	movwf	??___ftdiv+1
 13943  0F44  0835               	movf	??___ftdiv+1,w
 13944  0F45  00A4               	movwf	___ftpack@sign
 13945  0F46  318A  2213         	fcall	___ftpack
 13946  0F48  0020               	movlb	0	; select bank0
 13947  0F49  0820               	movf	?___ftpack,w
 13948  0F4A  00AE               	movwf	?___ftdiv
 13949  0F4B  0821               	movf	?___ftpack+1,w
 13950  0F4C  00AF               	movwf	?___ftdiv+1
 13951  0F4D  0822               	movf	?___ftpack+2,w
 13952  0F4E  00B0               	movwf	?___ftdiv+2
 13953  0F4F  0008               	return
 13954  0F50                     __end_of___ftdiv:	
 13955                           
 13956                           	psect	text84
 13957  0456                     __ptext84:	
 13958 ;; *************** function ___ftadd *****************
 13959 ;; Defined at:
 13960 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13961 ;; Parameters:    Size  Location     Type
 13962 ;;  f1              3   33[BANK0 ] float 
 13963 ;;  f2              3   36[BANK0 ] float 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  exp1            1   45[BANK0 ] unsigned char 
 13966 ;;  exp2            1   44[BANK0 ] unsigned char 
 13967 ;;  sign            1   43[BANK0 ] unsigned char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  3   33[BANK0 ] float 
 13970 ;; Registers used:
 13971 ;;		wreg, status,2, status,0, pclath, cstack
 13972 ;; Tracked objects:
 13973 ;;		On entry : 0/0
 13974 ;;		On exit  : 0/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13977 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;Total ram usage:       13 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; Hardware stack levels required when called:    6
 13984 ;; This function calls:
 13985 ;;		___ftpack
 13986 ;; This function is called by:
 13987 ;;		_getPercentValue
 13988 ;;		_setPercentValue
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991                           
 13992                           
 13993                           ;psect for function ___ftadd
 13994  0456                     ___ftadd:	
 13995                           
 13996                           ;incstack = 0
 13997                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13998  0456  0020               	movlb	0	; select bank0
 13999  0457  0841               	movf	___ftadd@f1,w
 14000  0458  00C7               	movwf	??___ftadd
 14001  0459  0842               	movf	___ftadd@f1+1,w
 14002  045A  00C8               	movwf	??___ftadd+1
 14003  045B  0843               	movf	___ftadd@f1+2,w
 14004  045C  00C9               	movwf	??___ftadd+2
 14005  045D  1003               	clrc
 14006  045E  0D48               	rlf	??___ftadd+1,w
 14007  045F  0D49               	rlf	??___ftadd+2,w
 14008  0460  00CA               	movwf	??___ftadd+3
 14009  0461  084A               	movf	??___ftadd+3,w
 14010  0462  00CD               	movwf	___ftadd@exp1
 14011  0463  0844               	movf	___ftadd@f2,w
 14012  0464  00C7               	movwf	??___ftadd
 14013  0465  0845               	movf	___ftadd@f2+1,w
 14014  0466  00C8               	movwf	??___ftadd+1
 14015  0467  0846               	movf	___ftadd@f2+2,w
 14016  0468  00C9               	movwf	??___ftadd+2
 14017  0469  1003               	clrc
 14018  046A  0D48               	rlf	??___ftadd+1,w
 14019  046B  0D49               	rlf	??___ftadd+2,w
 14020  046C  00CA               	movwf	??___ftadd+3
 14021  046D  084A               	movf	??___ftadd+3,w
 14022  046E  00CC               	movwf	___ftadd@exp2
 14023  046F  084D               	movf	___ftadd@exp1,w
 14024  0470  1903               	btfsc	3,2
 14025  0471  2C7E               	goto	l8000
 14026  0472  084C               	movf	___ftadd@exp2,w
 14027  0473  024D               	subwf	___ftadd@exp1,w
 14028  0474  1803               	skipnc
 14029  0475  2C85               	goto	l8004
 14030  0476  034D               	decf	___ftadd@exp1,w
 14031  0477  3AFF               	xorlw	255
 14032  0478  074C               	addwf	___ftadd@exp2,w
 14033  0479  00C7               	movwf	??___ftadd
 14034  047A  3019               	movlw	25
 14035  047B  0247               	subwf	??___ftadd,w
 14036  047C  1C03               	skipc
 14037  047D  2C85               	goto	l8004
 14038  047E                     l8000:	
 14039  047E  0844               	movf	___ftadd@f2,w
 14040  047F  00C1               	movwf	?___ftadd
 14041  0480  0845               	movf	___ftadd@f2+1,w
 14042  0481  00C2               	movwf	?___ftadd+1
 14043  0482  0846               	movf	___ftadd@f2+2,w
 14044  0483  00C3               	movwf	?___ftadd+2
 14045  0484  0008               	return
 14046  0485                     l8004:	
 14047  0485  084C               	movf	___ftadd@exp2,w
 14048  0486  1903               	btfsc	3,2
 14049  0487  0008               	return
 14050  0488  084D               	movf	___ftadd@exp1,w
 14051  0489  024C               	subwf	___ftadd@exp2,w
 14052  048A  1803               	skipnc
 14053  048B  2C94               	goto	l8010
 14054  048C  034C               	decf	___ftadd@exp2,w
 14055  048D  3AFF               	xorlw	255
 14056  048E  074D               	addwf	___ftadd@exp1,w
 14057  048F  00C7               	movwf	??___ftadd
 14058  0490  3019               	movlw	25
 14059  0491  0247               	subwf	??___ftadd,w
 14060  0492  1803               	btfsc	3,0
 14061  0493  0008               	return
 14062  0494                     l8010:	
 14063  0494  3006               	movlw	6
 14064  0495  00C7               	movwf	??___ftadd
 14065  0496  0847               	movf	??___ftadd,w
 14066  0497  00CB               	movwf	___ftadd@sign
 14067  0498  1BC3               	btfsc	___ftadd@f1+2,7
 14068  0499  17CB               	bsf	___ftadd@sign,7
 14069  049A  1BC6               	btfsc	___ftadd@f2+2,7
 14070  049B  174B               	bsf	___ftadd@sign,6
 14071  049C  17C2               	bsf	___ftadd@f1+1,7
 14072  049D  30FF               	movlw	255
 14073  049E  05C1               	andwf	___ftadd@f1,f
 14074  049F  30FF               	movlw	255
 14075  04A0  05C2               	andwf	___ftadd@f1+1,f
 14076  04A1  3000               	movlw	0
 14077  04A2  05C3               	andwf	___ftadd@f1+2,f
 14078  04A3  17C5               	bsf	___ftadd@f2+1,7
 14079  04A4  30FF               	movlw	255
 14080  04A5  05C4               	andwf	___ftadd@f2,f
 14081  04A6  30FF               	movlw	255
 14082  04A7  05C5               	andwf	___ftadd@f2+1,f
 14083  04A8  3000               	movlw	0
 14084  04A9  05C6               	andwf	___ftadd@f2+2,f
 14085  04AA  084C               	movf	___ftadd@exp2,w
 14086  04AB  024D               	subwf	___ftadd@exp1,w
 14087  04AC  1803               	skipnc
 14088  04AD  2CD0               	goto	l8032
 14089  04AE                     l8022:	
 14090  04AE  3001               	movlw	1
 14091  04AF                     u8245:	
 14092  04AF  35C4               	lslf	___ftadd@f2,f
 14093  04B0  0DC5               	rlf	___ftadd@f2+1,f
 14094  04B1  0DC6               	rlf	___ftadd@f2+2,f
 14095  04B2  0B89               	decfsz	9,f
 14096  04B3  2CAF               	goto	u8245
 14097  04B4  3001               	movlw	1
 14098  04B5  02CC               	subwf	___ftadd@exp2,f
 14099  04B6  084C               	movf	___ftadd@exp2,w
 14100  04B7  064D               	xorwf	___ftadd@exp1,w
 14101  04B8  1903               	skipnz
 14102  04B9  2CCB               	goto	l8030
 14103  04BA  3001               	movlw	1
 14104  04BB  02CB               	subwf	___ftadd@sign,f
 14105  04BC  084B               	movf	___ftadd@sign,w
 14106  04BD  3907               	andlw	7
 14107  04BE  1903               	btfsc	3,2
 14108  04BF  2CCB               	goto	l8030
 14109  04C0  2CAE               	goto	l8022
 14110  04C1                     l8028:	
 14111  04C1  3001               	movlw	1
 14112  04C2                     u8275:	
 14113  04C2  36C3               	lsrf	___ftadd@f1+2,f
 14114  04C3  0CC2               	rrf	___ftadd@f1+1,f
 14115  04C4  0CC1               	rrf	___ftadd@f1,f
 14116  04C5  0B89               	decfsz	9,f
 14117  04C6  2CC2               	goto	u8275
 14118  04C7  3001               	movlw	1
 14119  04C8  00C7               	movwf	??___ftadd
 14120  04C9  0847               	movf	??___ftadd,w
 14121  04CA  07CD               	addwf	___ftadd@exp1,f
 14122  04CB                     l8030:	
 14123  04CB  084D               	movf	___ftadd@exp1,w
 14124  04CC  064C               	xorwf	___ftadd@exp2,w
 14125  04CD  1903               	btfsc	3,2
 14126  04CE  2CF5               	goto	l2777
 14127  04CF  2CC1               	goto	l8028
 14128  04D0                     l8032:	
 14129  04D0  084D               	movf	___ftadd@exp1,w
 14130  04D1  024C               	subwf	___ftadd@exp2,w
 14131  04D2  1803               	skipnc
 14132  04D3  2CF5               	goto	l2777
 14133  04D4                     l8034:	
 14134  04D4  3001               	movlw	1
 14135  04D5                     u8305:	
 14136  04D5  35C1               	lslf	___ftadd@f1,f
 14137  04D6  0DC2               	rlf	___ftadd@f1+1,f
 14138  04D7  0DC3               	rlf	___ftadd@f1+2,f
 14139  04D8  0B89               	decfsz	9,f
 14140  04D9  2CD5               	goto	u8305
 14141  04DA  3001               	movlw	1
 14142  04DB  02CD               	subwf	___ftadd@exp1,f
 14143  04DC  084C               	movf	___ftadd@exp2,w
 14144  04DD  064D               	xorwf	___ftadd@exp1,w
 14145  04DE  1903               	skipnz
 14146  04DF  2CF1               	goto	l8042
 14147  04E0  3001               	movlw	1
 14148  04E1  02CB               	subwf	___ftadd@sign,f
 14149  04E2  084B               	movf	___ftadd@sign,w
 14150  04E3  3907               	andlw	7
 14151  04E4  1903               	btfsc	3,2
 14152  04E5  2CF1               	goto	l8042
 14153  04E6  2CD4               	goto	l8034
 14154  04E7                     l8040:	
 14155  04E7  3001               	movlw	1
 14156  04E8                     u8335:	
 14157  04E8  36C6               	lsrf	___ftadd@f2+2,f
 14158  04E9  0CC5               	rrf	___ftadd@f2+1,f
 14159  04EA  0CC4               	rrf	___ftadd@f2,f
 14160  04EB  0B89               	decfsz	9,f
 14161  04EC  2CE8               	goto	u8335
 14162  04ED  3001               	movlw	1
 14163  04EE  00C7               	movwf	??___ftadd
 14164  04EF  0847               	movf	??___ftadd,w
 14165  04F0  07CC               	addwf	___ftadd@exp2,f
 14166  04F1                     l8042:	
 14167  04F1  084D               	movf	___ftadd@exp1,w
 14168  04F2  064C               	xorwf	___ftadd@exp2,w
 14169  04F3  1D03               	skipz
 14170  04F4  2CE7               	goto	l8040
 14171  04F5                     l2777:	
 14172  04F5  1FCB               	btfss	___ftadd@sign,7
 14173  04F6  2D07               	goto	l8046
 14174  04F7  30FF               	movlw	255
 14175  04F8  06C1               	xorwf	___ftadd@f1,f
 14176  04F9  30FF               	movlw	255
 14177  04FA  06C2               	xorwf	___ftadd@f1+1,f
 14178  04FB  30FF               	movlw	255
 14179  04FC  06C3               	xorwf	___ftadd@f1+2,f
 14180  04FD  3001               	movlw	1
 14181  04FE  07C1               	addwf	___ftadd@f1,f
 14182  04FF  3000               	movlw	0
 14183  0500  1803               	skipnc
 14184  0501  3001               	movlw	1
 14185  0502  07C2               	addwf	___ftadd@f1+1,f
 14186  0503  3000               	movlw	0
 14187  0504  1803               	skipnc
 14188  0505  3001               	movlw	1
 14189  0506  07C3               	addwf	___ftadd@f1+2,f
 14190  0507                     l8046:	
 14191  0507  1F4B               	btfss	___ftadd@sign,6
 14192  0508  2D19               	goto	l8050
 14193  0509  30FF               	movlw	255
 14194  050A  06C4               	xorwf	___ftadd@f2,f
 14195  050B  30FF               	movlw	255
 14196  050C  06C5               	xorwf	___ftadd@f2+1,f
 14197  050D  30FF               	movlw	255
 14198  050E  06C6               	xorwf	___ftadd@f2+2,f
 14199  050F  3001               	movlw	1
 14200  0510  07C4               	addwf	___ftadd@f2,f
 14201  0511  3000               	movlw	0
 14202  0512  1803               	skipnc
 14203  0513  3001               	movlw	1
 14204  0514  07C5               	addwf	___ftadd@f2+1,f
 14205  0515  3000               	movlw	0
 14206  0516  1803               	skipnc
 14207  0517  3001               	movlw	1
 14208  0518  07C6               	addwf	___ftadd@f2+2,f
 14209  0519                     l8050:	
 14210  0519  01CB               	clrf	___ftadd@sign
 14211  051A  0841               	movf	___ftadd@f1,w
 14212  051B  07C4               	addwf	___ftadd@f2,f
 14213  051C  0842               	movf	___ftadd@f1+1,w
 14214  051D  3DC5               	addwfc	___ftadd@f2+1,f
 14215  051E  0843               	movf	___ftadd@f1+2,w
 14216  051F  3DC6               	addwfc	___ftadd@f2+2,f
 14217  0520  1FC6               	btfss	___ftadd@f2+2,7
 14218  0521  2D34               	goto	l8060
 14219  0522  30FF               	movlw	255
 14220  0523  06C4               	xorwf	___ftadd@f2,f
 14221  0524  30FF               	movlw	255
 14222  0525  06C5               	xorwf	___ftadd@f2+1,f
 14223  0526  30FF               	movlw	255
 14224  0527  06C6               	xorwf	___ftadd@f2+2,f
 14225  0528  3001               	movlw	1
 14226  0529  07C4               	addwf	___ftadd@f2,f
 14227  052A  3000               	movlw	0
 14228  052B  1803               	skipnc
 14229  052C  3001               	movlw	1
 14230  052D  07C5               	addwf	___ftadd@f2+1,f
 14231  052E  3000               	movlw	0
 14232  052F  1803               	skipnc
 14233  0530  3001               	movlw	1
 14234  0531  07C6               	addwf	___ftadd@f2+2,f
 14235  0532  01CB               	clrf	___ftadd@sign
 14236  0533  0ACB               	incf	___ftadd@sign,f
 14237  0534                     l8060:	
 14238  0534  0844               	movf	___ftadd@f2,w
 14239  0535  00A0               	movwf	___ftpack@arg
 14240  0536  0845               	movf	___ftadd@f2+1,w
 14241  0537  00A1               	movwf	___ftpack@arg+1
 14242  0538  0846               	movf	___ftadd@f2+2,w
 14243  0539  00A2               	movwf	___ftpack@arg+2
 14244  053A  084D               	movf	___ftadd@exp1,w
 14245  053B  00C7               	movwf	??___ftadd
 14246  053C  0847               	movf	??___ftadd,w
 14247  053D  00A3               	movwf	___ftpack@exp
 14248  053E  084B               	movf	___ftadd@sign,w
 14249  053F  00C8               	movwf	??___ftadd+1
 14250  0540  0848               	movf	??___ftadd+1,w
 14251  0541  00A4               	movwf	___ftpack@sign
 14252  0542  318A  2213         	fcall	___ftpack
 14253  0544  0020               	movlb	0	; select bank0
 14254  0545  0820               	movf	?___ftpack,w
 14255  0546  00C1               	movwf	?___ftadd
 14256  0547  0821               	movf	?___ftpack+1,w
 14257  0548  00C2               	movwf	?___ftadd+1
 14258  0549  0822               	movf	?___ftpack+2,w
 14259  054A  00C3               	movwf	?___ftadd+2
 14260  054B  0008               	return
 14261  054C                     __end_of___ftadd:	
 14262                           
 14263                           	psect	text85
 14264  1089                     __ptext85:	
 14265 ;; *************** function ___awtoft *****************
 14266 ;; Defined at:
 14267 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  c               2    8[BANK0 ] int 
 14270 ;; Auto vars:     Size  Location     Type
 14271 ;;  sign            1   13[BANK0 ] unsigned char 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  3    8[BANK0 ] float 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0, pclath, cstack
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14281 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;Total ram usage:        6 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    6
 14288 ;; This function calls:
 14289 ;;		___ftpack
 14290 ;; This function is called by:
 14291 ;;		_getPercentValue
 14292 ;;		_setPercentValue
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           
 14297                           ;psect for function ___awtoft
 14298  1089                     ___awtoft:	
 14299                           
 14300                           ;incstack = 0
 14301                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14302  1089  0020               	movlb	0	; select bank0
 14303  108A  01AD               	clrf	___awtoft@sign
 14304  108B  1FA9               	btfss	___awtoft@c+1,7
 14305  108C  2894               	goto	l7988
 14306  108D  09A8               	comf	___awtoft@c,f
 14307  108E  09A9               	comf	___awtoft@c+1,f
 14308  108F  0AA8               	incf	___awtoft@c,f
 14309  1090  1903               	skipnz
 14310  1091  0AA9               	incf	___awtoft@c+1,f
 14311  1092  01AD               	clrf	___awtoft@sign
 14312  1093  0AAD               	incf	___awtoft@sign,f
 14313  1094                     l7988:	
 14314  1094  0828               	movf	___awtoft@c,w
 14315  1095  00A0               	movwf	___ftpack@arg
 14316  1096  0829               	movf	___awtoft@c+1,w
 14317  1097  00A1               	movwf	___ftpack@arg+1
 14318  1098  01A2               	clrf	___ftpack@arg+2
 14319  1099  308E               	movlw	142
 14320  109A  00AB               	movwf	??___awtoft
 14321  109B  082B               	movf	??___awtoft,w
 14322  109C  00A3               	movwf	___ftpack@exp
 14323  109D  082D               	movf	___awtoft@sign,w
 14324  109E  00AC               	movwf	??___awtoft+1
 14325  109F  082C               	movf	??___awtoft+1,w
 14326  10A0  00A4               	movwf	___ftpack@sign
 14327  10A1  318A  2213         	fcall	___ftpack
 14328  10A3  0020               	movlb	0	; select bank0
 14329  10A4  0820               	movf	?___ftpack,w
 14330  10A5  00A8               	movwf	?___awtoft
 14331  10A6  0821               	movf	?___ftpack+1,w
 14332  10A7  00A9               	movwf	?___awtoft+1
 14333  10A8  0822               	movf	?___ftpack+2,w
 14334  10A9  00AA               	movwf	?___awtoft+2
 14335  10AA  0008               	return
 14336  10AB                     __end_of___awtoft:	
 14337                           
 14338                           	psect	text86
 14339  0A13                     __ptext86:	
 14340 ;; *************** function ___ftpack *****************
 14341 ;; Defined at:
 14342 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;  arg             3    0[BANK0 ] unsigned um
 14345 ;;  exp             1    3[BANK0 ] unsigned char 
 14346 ;;  sign            1    4[BANK0 ] unsigned char 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;		None
 14349 ;; Return value:  Size  Location     Type
 14350 ;;                  3    0[BANK0 ] float 
 14351 ;; Registers used:
 14352 ;;		wreg, status,2, status,0
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14358 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;Total ram usage:        8 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    5
 14365 ;; This function calls:
 14366 ;;		Nothing
 14367 ;; This function is called by:
 14368 ;;		___awtoft
 14369 ;;		___ftadd
 14370 ;;		___ftdiv
 14371 ;;		___ftmul
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           
 14376                           ;psect for function ___ftpack
 14377  0A13                     ___ftpack:	
 14378                           
 14379                           ;incstack = 0
 14380                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14381  0A13  0020               	movlb	0	; select bank0
 14382  0A14  0823               	movf	___ftpack@exp,w
 14383  0A15  1903               	btfsc	3,2
 14384  0A16  2A1C               	goto	l7938
 14385  0A17  0822               	movf	___ftpack@arg+2,w
 14386  0A18  0421               	iorwf	___ftpack@arg+1,w
 14387  0A19  0420               	iorwf	___ftpack@arg,w
 14388  0A1A  1D03               	skipz
 14389  0A1B  2A2D               	goto	l7944
 14390  0A1C                     l7938:	
 14391  0A1C  3000               	movlw	0
 14392  0A1D  00A0               	movwf	?___ftpack
 14393  0A1E  3000               	movlw	0
 14394  0A1F  00A1               	movwf	?___ftpack+1
 14395  0A20  3000               	movlw	0
 14396  0A21  00A2               	movwf	?___ftpack+2
 14397  0A22  0008               	return
 14398  0A23                     l7942:	
 14399  0A23  3001               	movlw	1
 14400  0A24  00A5               	movwf	??___ftpack
 14401  0A25  0825               	movf	??___ftpack,w
 14402  0A26  07A3               	addwf	___ftpack@exp,f
 14403  0A27  3001               	movlw	1
 14404  0A28                     u8035:	
 14405  0A28  36A2               	lsrf	___ftpack@arg+2,f
 14406  0A29  0CA1               	rrf	___ftpack@arg+1,f
 14407  0A2A  0CA0               	rrf	___ftpack@arg,f
 14408  0A2B  0B89               	decfsz	9,f
 14409  0A2C  2A28               	goto	u8035
 14410  0A2D                     l7944:	
 14411  0A2D  30FE               	movlw	254
 14412  0A2E  0522               	andwf	___ftpack@arg+2,w
 14413  0A2F  1903               	btfsc	3,2
 14414  0A30  2A46               	goto	l2748
 14415  0A31  2A23               	goto	l7942
 14416  0A32                     l7946:	
 14417  0A32  3001               	movlw	1
 14418  0A33  00A5               	movwf	??___ftpack
 14419  0A34  0825               	movf	??___ftpack,w
 14420  0A35  07A3               	addwf	___ftpack@exp,f
 14421  0A36  3001               	movlw	1
 14422  0A37  07A0               	addwf	___ftpack@arg,f
 14423  0A38  3000               	movlw	0
 14424  0A39  1803               	skipnc
 14425  0A3A  3001               	movlw	1
 14426  0A3B  07A1               	addwf	___ftpack@arg+1,f
 14427  0A3C  3000               	movlw	0
 14428  0A3D  1803               	skipnc
 14429  0A3E  3001               	movlw	1
 14430  0A3F  07A2               	addwf	___ftpack@arg+2,f
 14431  0A40  3001               	movlw	1
 14432  0A41                     u8055:	
 14433  0A41  36A2               	lsrf	___ftpack@arg+2,f
 14434  0A42  0CA1               	rrf	___ftpack@arg+1,f
 14435  0A43  0CA0               	rrf	___ftpack@arg,f
 14436  0A44  0B89               	decfsz	9,f
 14437  0A45  2A41               	goto	u8055
 14438  0A46                     l2748:	
 14439  0A46  30FF               	movlw	255
 14440  0A47  0522               	andwf	___ftpack@arg+2,w
 14441  0A48  1903               	btfsc	3,2
 14442  0A49  2A53               	goto	l7954
 14443  0A4A  2A32               	goto	l7946
 14444  0A4B                     l7952:	
 14445  0A4B  3001               	movlw	1
 14446  0A4C  02A3               	subwf	___ftpack@exp,f
 14447  0A4D  3001               	movlw	1
 14448  0A4E                     u8075:	
 14449  0A4E  35A0               	lslf	___ftpack@arg,f
 14450  0A4F  0DA1               	rlf	___ftpack@arg+1,f
 14451  0A50  0DA2               	rlf	___ftpack@arg+2,f
 14452  0A51  0B89               	decfsz	9,f
 14453  0A52  2A4E               	goto	u8075
 14454  0A53                     l7954:	
 14455  0A53  1FA1               	btfss	___ftpack@arg+1,7
 14456  0A54  2A4B               	goto	l7952
 14457  0A55  1823               	btfsc	___ftpack@exp,0
 14458  0A56  2A5D               	goto	l2754
 14459  0A57  30FF               	movlw	255
 14460  0A58  05A0               	andwf	___ftpack@arg,f
 14461  0A59  307F               	movlw	127
 14462  0A5A  05A1               	andwf	___ftpack@arg+1,f
 14463  0A5B  30FF               	movlw	255
 14464  0A5C  05A2               	andwf	___ftpack@arg+2,f
 14465  0A5D                     l2754:	
 14466  0A5D  1003               	clrc
 14467  0A5E  0CA3               	rrf	___ftpack@exp,f
 14468  0A5F  0823               	movf	___ftpack@exp,w
 14469  0A60  00A5               	movwf	??___ftpack
 14470  0A61  01A6               	clrf	??___ftpack+1
 14471  0A62  01A7               	clrf	??___ftpack+2
 14472  0A63  3010               	movlw	16
 14473  0A64                     u8105:	
 14474  0A64  35A5               	lslf	??___ftpack,f
 14475  0A65  0DA6               	rlf	??___ftpack+1,f
 14476  0A66  0DA7               	rlf	??___ftpack+2,f
 14477  0A67  0B89               	decfsz	9,f
 14478  0A68  2A64               	goto	u8105
 14479  0A69  0825               	movf	??___ftpack,w
 14480  0A6A  04A0               	iorwf	___ftpack@arg,f
 14481  0A6B  0826               	movf	??___ftpack+1,w
 14482  0A6C  04A1               	iorwf	___ftpack@arg+1,f
 14483  0A6D  0827               	movf	??___ftpack+2,w
 14484  0A6E  04A2               	iorwf	___ftpack@arg+2,f
 14485  0A6F  0824               	movf	___ftpack@sign,w
 14486  0A70  1903               	btfsc	3,2
 14487  0A71  0008               	return
 14488  0A72  17A2               	bsf	___ftpack@arg+2,7
 14489  0A73  0008               	return
 14490  0A74                     __end_of___ftpack:	
 14491                           
 14492                           	psect	text87
 14493  13E4                     __ptext87:	
 14494 ;; *************** function _setLED *****************
 14495 ;; Defined at:
 14496 ;;		line 76 in file "../src/LED_B1.c"
 14497 ;; Parameters:    Size  Location     Type
 14498 ;;  led             1    wreg     unsigned char 
 14499 ;;  command         1    2[BANK0 ] unsigned char 
 14500 ;; Auto vars:     Size  Location     Type
 14501 ;;  led             1    3[BANK0 ] unsigned char 
 14502 ;; Return value:  Size  Location     Type
 14503 ;;		None               void
 14504 ;; Registers used:
 14505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14506 ;; Tracked objects:
 14507 ;;		On entry : 0/0
 14508 ;;		On exit  : 0/0
 14509 ;;		Unchanged: 0/0
 14510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14511 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;Total ram usage:        2 bytes
 14516 ;; Hardware stack levels used:    1
 14517 ;; Hardware stack levels required when called:    6
 14518 ;; This function calls:
 14519 ;;		_LedPointSelect
 14520 ;; This function is called by:
 14521 ;;		_setDimmerLights
 14522 ;;		_setLED_Initialization
 14523 ;;		_Exception_Main
 14524 ;;		_setSw_Initialization
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           
 14529                           ;psect for function _setLED
 14530  13E4                     _setLED:	
 14531                           
 14532                           ;incstack = 0
 14533                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14534                           ;setLED@led stored from wreg
 14535  13E4  0020               	movlb	0	; select bank0
 14536  13E5  00A3               	movwf	setLED@led
 14537                           
 14538                           ;LED_B1.c: 77: LedPointSelect(led);
 14539  13E6  0823               	movf	setLED@led,w
 14540  13E7  319D  2517  3193   	fcall	_LedPointSelect
 14541                           
 14542                           ;LED_B1.c: 78: if (command == 0) {
 14543  13EA  0020               	movlb	0	; select bank0
 14544  13EB  08A2               	movf	setLED@command,f
 14545  13EC  1D03               	skipz
 14546  13ED  2BF3               	goto	l8676
 14547                           
 14548                           ;LED_B1.c: 107: if (led == 99) {
 14549  13EE  0823               	movf	setLED@led,w
 14550  13EF  3A63               	xorlw	99
 14551  13F0  1D03               	skipz
 14552  13F1  2BF3               	goto	l8676
 14553                           
 14554                           ;LED_B1.c: 111: RB5 = 1;
 14555  13F2  168D               	bsf	13,5	;volatile
 14556  13F3                     l8676:	
 14557                           
 14558                           ;LED_B1.c: 113: }
 14559                           ;LED_B1.c: 115: }
 14560                           ;LED_B1.c: 116: if (command == 1) {
 14561  13F3  0822               	movf	setLED@command,w
 14562  13F4  3A01               	xorlw	1
 14563  13F5  1D03               	skipz
 14564  13F6  2BFC               	goto	l8682
 14565                           
 14566                           ;LED_B1.c: 145: if (led == 99) {
 14567  13F7  0823               	movf	setLED@led,w
 14568  13F8  3A63               	xorlw	99
 14569  13F9  1D03               	skipz
 14570  13FA  2BFC               	goto	l8682
 14571                           
 14572                           ;LED_B1.c: 149: RB5 = 0;
 14573  13FB  128D               	bcf	13,5	;volatile
 14574  13FC                     l8682:	
 14575                           
 14576                           ;LED_B1.c: 151: }
 14577                           ;LED_B1.c: 153: }
 14578                           ;LED_B1.c: 154: if (command == 10) {
 14579  13FC  0822               	movf	setLED@command,w
 14580  13FD  3A0A               	xorlw	10
 14581  13FE  1D03               	skipz
 14582  13FF  2C12               	goto	l8690
 14583                           
 14584                           ;LED_B1.c: 155: LED->GO = 0;
 14585  1400  0021               	movlb	1	; select bank1
 14586  1401  084E               	movf	_LED^(0+128),w
 14587  1402  0086               	movwf	6
 14588  1403  3001               	movlw	1	; select bank2/3
 14589  1404  0087               	movwf	7
 14590  1405  1081               	bcf	1,1
 14591                           
 14592                           ;LED_B1.c: 156: LED->Time = 0;
 14593  1406  0A4E               	incf	_LED^(0+128),w
 14594  1407  0086               	movwf	6
 14595  1408  3001               	movlw	1	; select bank2/3
 14596  1409  0087               	movwf	7
 14597  140A  3000               	movlw	0
 14598  140B  3FC0               	movwi [0]fsr1
 14599  140C  3FC1               	movwi [1]fsr1
 14600                           
 14601                           ;LED_B1.c: 185: if (led == 99) {
 14602  140D  0020               	movlb	0	; select bank0
 14603  140E  0823               	movf	setLED@led,w
 14604  140F  3A63               	xorlw	99
 14605  1410  1903               	btfsc	3,2
 14606                           
 14607                           ;LED_B1.c: 189: RB5 = 1;
 14608  1411  168D               	bsf	13,5	;volatile
 14609  1412                     l8690:	
 14610                           
 14611                           ;LED_B1.c: 191: }
 14612                           ;LED_B1.c: 193: }
 14613                           ;LED_B1.c: 194: if (command == 11) {
 14614  1412  0822               	movf	setLED@command,w
 14615  1413  3A0B               	xorlw	11
 14616  1414  1D03               	skipz
 14617  1415  0008               	return
 14618                           
 14619                           ;LED_B1.c: 195: LED->GO = 1;
 14620  1416  0021               	movlb	1	; select bank1
 14621  1417  084E               	movf	_LED^(0+128),w
 14622  1418  0086               	movwf	6
 14623  1419  3001               	movlw	1	; select bank2/3
 14624  141A  0087               	movwf	7
 14625  141B  1481               	bsf	1,1
 14626  141C  0008               	return
 14627  141D                     __end_of_setLED:	
 14628                           
 14629                           	psect	text88
 14630  1D17                     __ptext88:	
 14631 ;; *************** function _LedPointSelect *****************
 14632 ;; Defined at:
 14633 ;;		line 7 in file "../src/LED_B1.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  led             1    wreg     unsigned char 
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;  led             1    1[BANK0 ] unsigned char 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;		None               void
 14640 ;; Registers used:
 14641 ;;		wreg
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;Total ram usage:        2 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    5
 14654 ;; This function calls:
 14655 ;;		Nothing
 14656 ;; This function is called by:
 14657 ;;		_setLED_Initialization
 14658 ;;		_setLED
 14659 ;;		_setLED_Main
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           
 14664                           ;psect for function _LedPointSelect
 14665  1D17                     _LedPointSelect:	
 14666                           
 14667                           ;incstack = 0
 14668                           ; Regs used in _LedPointSelect: [wreg]
 14669                           ;LedPointSelect@led stored from wreg
 14670  1D17  0020               	movlb	0	; select bank0
 14671  1D18  00A1               	movwf	LedPointSelect@led
 14672                           
 14673                           ;LED_B1.c: 24: if (led == 99) {
 14674  1D19  0821               	movf	LedPointSelect@led,w
 14675  1D1A  3A63               	xorlw	99
 14676  1D1B  1D03               	skipz
 14677  1D1C  0008               	return
 14678                           
 14679                           ;LED_B1.c: 25: LED = &VarErrLED;
 14680  1D1D  3069               	movlw	_VarErrLED& (0+255)
 14681  1D1E  00A0               	movwf	??_LedPointSelect
 14682  1D1F  0820               	movf	??_LedPointSelect,w
 14683  1D20  0021               	movlb	1	; select bank1
 14684  1D21  00CE               	movwf	_LED^(0+128)
 14685  1D22  0008               	return
 14686  1D23                     __end_of_LedPointSelect:	
 14687                           
 14688                           	psect	text89
 14689  1D6D                     __ptext89:	
 14690 ;; *************** function _setDimmerLights_Line *****************
 14691 ;; Defined at:
 14692 ;;		line 706 in file "../src/Dimmer_B1.c"
 14693 ;; Parameters:    Size  Location     Type
 14694 ;;  lights          1    wreg     unsigned char 
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;  lights          1    0[BANK0 ] unsigned char 
 14697 ;; Return value:  Size  Location     Type
 14698 ;;		None               void
 14699 ;; Registers used:
 14700 ;;		wreg
 14701 ;; Tracked objects:
 14702 ;;		On entry : 0/0
 14703 ;;		On exit  : 0/0
 14704 ;;		Unchanged: 0/0
 14705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;Total ram usage:        1 bytes
 14711 ;; Hardware stack levels used:    1
 14712 ;; Hardware stack levels required when called:    5
 14713 ;; This function calls:
 14714 ;;		Nothing
 14715 ;; This function is called by:
 14716 ;;		_setDimmerLights
 14717 ;;		_setDimmerLights_Adj
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           
 14722                           ;psect for function _setDimmerLights_Line
 14723  1D6D                     _setDimmerLights_Line:	
 14724                           
 14725                           ;incstack = 0
 14726                           ; Regs used in _setDimmerLights_Line: [wreg]
 14727                           ;setDimmerLights_Line@lights stored from wreg
 14728  1D6D  0020               	movlb	0	; select bank0
 14729  1D6E  00A0               	movwf	setDimmerLights_Line@lights
 14730                           
 14731                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 14732  1D6F  0021               	movlb	1	; select bank1
 14733  1D70  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14734                           
 14735                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 14736  1D71  0022               	movlb	2	; select bank2
 14737  1D72  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14738                           
 14739                           ;Dimmer_B1.c: 718: if (lights == 1) {
 14740  1D73  0020               	movlb	0	; select bank0
 14741  1D74  0820               	movf	setDimmerLights_Line@lights,w
 14742  1D75  3A01               	xorlw	1
 14743  1D76  1D03               	skipz
 14744  1D77  0008               	return
 14745                           
 14746                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 14747  1D78  0022               	movlb	2	; select bank2
 14748  1D79  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14749  1D7A  0008               	return
 14750  1D7B                     __end_of_setDimmerLights_Line:	
 14751                           
 14752                           	psect	text90
 14753  1ED1                     __ptext90:	
 14754 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14755 ;; Defined at:
 14756 ;;		line 586 in file "../src/Dimmer_B1.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;  lights          1    wreg     unsigned char 
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;  lights          1    0[COMMON] unsigned char 
 14761 ;;  allow           1    2[BANK0 ] unsigned char 
 14762 ;; Return value:  Size  Location     Type
 14763 ;;                  1    wreg      unsigned char 
 14764 ;; Registers used:
 14765 ;;		wreg, status,2, pclath, cstack
 14766 ;; Tracked objects:
 14767 ;;		On entry : 0/0
 14768 ;;		On exit  : 0/0
 14769 ;;		Unchanged: 0/0
 14770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14775 ;;Total ram usage:        3 bytes
 14776 ;; Hardware stack levels used:    1
 14777 ;; Hardware stack levels required when called:    6
 14778 ;; This function calls:
 14779 ;;		_getLoad_OK
 14780 ;; This function is called by:
 14781 ;;		_setDimmerLights_AdjOn
 14782 ;;		_setDimmerLights_Main
 14783 ;; This function uses a non-reentrant model
 14784 ;;
 14785                           
 14786                           
 14787                           ;psect for function _getDimmerLights_Allow_Condition
 14788  1ED1                     _getDimmerLights_Allow_Condition:	
 14789                           
 14790                           ;Dimmer_B1.c: 587: char allow = 0;
 14791                           
 14792                           ;incstack = 0
 14793                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14794  1ED1  0020               	movlb	0	; select bank0
 14795  1ED2  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14796                           
 14797                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14798  1ED3  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14799  1ED4  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14800  1ED5  319C  246D  319E   	fcall	_getLoad_OK
 14801  1ED8  3800               	iorlw	0
 14802  1ED9  1D03               	skipz
 14803  1EDA  2EE0               	goto	l8632
 14804  1EDB  0021               	movlb	1	; select bank1
 14805  1EDC  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14806  1EDD  2EE0               	goto	l8632
 14807  1EDE  0020               	movlb	0	; select bank0
 14808  1EDF  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14809  1EE0                     l8632:	
 14810  1EE0  0020               	movlb	0	; select bank0
 14811  1EE1  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14812  1EE2  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14813  1EE3  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14814  1EE4  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14815                           
 14816                           ;Dimmer_B1.c: 619: return allow;
 14817  1EE5  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14818  1EE6  0008               	return
 14819  1EE7                     __end_of_getDimmerLights_Allow_Condition:	
 14820                           
 14821                           	psect	text91
 14822  1C6D                     __ptext91:	
 14823 ;; *************** function _getLoad_OK *****************
 14824 ;; Defined at:
 14825 ;;		line 265 in file "../src/OverLoad_B1.c"
 14826 ;; Parameters:    Size  Location     Type
 14827 ;;		None
 14828 ;; Auto vars:     Size  Location     Type
 14829 ;;  ok              1    0[BANK0 ] unsigned char 
 14830 ;; Return value:  Size  Location     Type
 14831 ;;                  1    wreg      unsigned char 
 14832 ;; Registers used:
 14833 ;;		wreg, status,2
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;Total ram usage:        1 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; Hardware stack levels required when called:    5
 14846 ;; This function calls:
 14847 ;;		Nothing
 14848 ;; This function is called by:
 14849 ;;		_DimmerLights_Main
 14850 ;;		_getDimmerLights_Allow_Condition
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           
 14855                           ;psect for function _getLoad_OK
 14856  1C6D                     _getLoad_OK:	
 14857                           
 14858                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14859                           
 14860                           ;incstack = 0
 14861                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14862  1C6D  3000               	movlw	0
 14863  1C6E  0022               	movlb	2	; select bank2
 14864  1C6F  1BA5               	btfsc	_Load^(0+256),7
 14865  1C70  3001               	movlw	1
 14866  1C71  0020               	movlb	0	; select bank0
 14867  1C72  00A0               	movwf	getLoad_OK@ok
 14868                           
 14869                           ;OverLoad_B1.c: 267: return ok;
 14870  1C73  0820               	movf	getLoad_OK@ok,w
 14871  1C74  0008               	return
 14872  1C75                     __end_of_getLoad_OK:	
 14873                           
 14874                           	psect	text92
 14875  1CB4                     __ptext92:	
 14876 ;; *************** function _getMain_LightsStatus *****************
 14877 ;; Defined at:
 14878 ;;		line 375 in file "../src/Main_B1.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;		None
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  status          1    0[BANK0 ] unsigned char 
 14883 ;; Return value:  Size  Location     Type
 14884 ;;                  1    wreg      unsigned char 
 14885 ;; Registers used:
 14886 ;;		wreg, status,2
 14887 ;; Tracked objects:
 14888 ;;		On entry : 0/0
 14889 ;;		On exit  : 0/0
 14890 ;;		Unchanged: 0/0
 14891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;Total ram usage:        1 bytes
 14897 ;; Hardware stack levels used:    1
 14898 ;; Hardware stack levels required when called:    5
 14899 ;; This function calls:
 14900 ;;		Nothing
 14901 ;; This function is called by:
 14902 ;;		_DimmerLights_Main
 14903 ;;		_Flash_Memory_Main
 14904 ;;		_Exception_Main
 14905 ;;		_Load_Main
 14906 ;; This function uses a non-reentrant model
 14907 ;;
 14908                           
 14909                           
 14910                           ;psect for function _getMain_LightsStatus
 14911  1CB4                     _getMain_LightsStatus:	
 14912                           
 14913                           ;Main_B1.c: 376: char status = 0;
 14914                           
 14915                           ;incstack = 0
 14916                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14917  1CB4  0020               	movlb	0	; select bank0
 14918  1CB5  01A0               	clrf	getMain_LightsStatus@status
 14919                           
 14920                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14921  1CB6  3000               	movlw	0
 14922  1CB7  0022               	movlb	2	; select bank2
 14923  1CB8  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 14924  1CB9  3001               	movlw	1
 14925  1CBA  0020               	movlb	0	; select bank0
 14926  1CBB  00A0               	movwf	getMain_LightsStatus@status
 14927                           
 14928                           ;Main_B1.c: 422: return status;
 14929  1CBC  0820               	movf	getMain_LightsStatus@status,w
 14930  1CBD  0008               	return
 14931  1CBE                     __end_of_getMain_LightsStatus:	
 14932                           
 14933                           	psect	text93
 14934  1270                     __ptext93:	
 14935 ;; *************** function _getMain_All_Error_Status *****************
 14936 ;; Defined at:
 14937 ;;		line 426 in file "../src/Main_B1.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;  command         1    wreg     unsigned char 
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;  command         1    5[BANK0 ] unsigned char 
 14942 ;;  status          1    6[BANK0 ] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      unsigned char 
 14945 ;; Registers used:
 14946 ;;		wreg, status,2, status,0
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:        7 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    5
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_DimmerLights_Main
 14963 ;;		_Exception_Main
 14964 ;;		_Load_Main
 14965 ;;		_setTemp_Main
 14966 ;;		_setRF_Main
 14967 ;;		_getRxData
 14968 ;;		_setSw_Main
 14969 ;; This function uses a non-reentrant model
 14970 ;;
 14971                           
 14972                           
 14973                           ;psect for function _getMain_All_Error_Status
 14974  1270                     _getMain_All_Error_Status:	
 14975                           
 14976                           ;incstack = 0
 14977                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14978                           ;getMain_All_Error_Status@command stored from wreg
 14979  1270  0020               	movlb	0	; select bank0
 14980  1271  00A5               	movwf	getMain_All_Error_Status@command
 14981                           
 14982                           ;Main_B1.c: 427: char status = 0;
 14983  1272  01A6               	clrf	getMain_All_Error_Status@status
 14984                           
 14985                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 14986  1273  08A6               	movf	getMain_All_Error_Status@status,f
 14987  1274  1D03               	skipz
 14988  1275  2A8A               	goto	l8650
 14989  1276  0825               	movf	getMain_All_Error_Status@command,w
 14990  1277  3A02               	xorlw	2
 14991  1278  1903               	skipnz
 14992  1279  2A8A               	goto	l8650
 14993                           
 14994                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 14995  127A  0021               	movlb	1	; select bank1
 14996  127B  18D7               	btfsc	_Temp^(0+128),1
 14997  127C  2A81               	goto	l8648
 14998  127D  0020               	movlb	0	; select bank0
 14999  127E  01A1               	clrf	_getMain_All_Error_Status$3422
 15000  127F  01A2               	clrf	_getMain_All_Error_Status$3422+1
 15001  1280  2A86               	goto	l1420
 15002  1281                     l8648:	
 15003  1281  3002               	movlw	2
 15004  1282  0020               	movlb	0	; select bank0
 15005  1283  00A1               	movwf	_getMain_All_Error_Status$3422
 15006  1284  3000               	movlw	0
 15007  1285  00A2               	movwf	_getMain_All_Error_Status$3422+1
 15008  1286                     l1420:	
 15009  1286  0821               	movf	_getMain_All_Error_Status$3422,w
 15010  1287  00A0               	movwf	??_getMain_All_Error_Status
 15011  1288  0820               	movf	??_getMain_All_Error_Status,w
 15012  1289  00A6               	movwf	getMain_All_Error_Status@status
 15013  128A                     l8650:	
 15014                           
 15015                           ;Main_B1.c: 440: }
 15016                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15017  128A  08A6               	movf	getMain_All_Error_Status@status,f
 15018  128B  1D03               	skipz
 15019  128C  2AA1               	goto	l1421
 15020  128D  0825               	movf	getMain_All_Error_Status@command,w
 15021  128E  3A03               	xorlw	3
 15022  128F  1903               	skipnz
 15023  1290  2AA1               	goto	l1421
 15024                           
 15025                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15026  1291  0022               	movlb	2	; select bank2
 15027  1292  1AA5               	btfsc	_Load^(0+256),5
 15028  1293  2A98               	goto	l8658
 15029  1294  0020               	movlb	0	; select bank0
 15030  1295  01A3               	clrf	_getMain_All_Error_Status$3423
 15031  1296  01A4               	clrf	_getMain_All_Error_Status$3423+1
 15032  1297  2A9D               	goto	l1425
 15033  1298                     l8658:	
 15034  1298  3003               	movlw	3
 15035  1299  0020               	movlb	0	; select bank0
 15036  129A  00A3               	movwf	_getMain_All_Error_Status$3423
 15037  129B  3000               	movlw	0
 15038  129C  00A4               	movwf	_getMain_All_Error_Status$3423+1
 15039  129D                     l1425:	
 15040  129D  0823               	movf	_getMain_All_Error_Status$3423,w
 15041  129E  00A0               	movwf	??_getMain_All_Error_Status
 15042  129F  0820               	movf	??_getMain_All_Error_Status,w
 15043  12A0  00A6               	movwf	getMain_All_Error_Status@status
 15044  12A1                     l1421:	
 15045                           
 15046                           ;Main_B1.c: 447: }
 15047                           ;Main_B1.c: 463: return status;
 15048  12A1  0826               	movf	getMain_All_Error_Status@status,w
 15049  12A2  0008               	return
 15050  12A3                     __end_of_getMain_All_Error_Status:	
 15051                           
 15052                           	psect	text94
 15053  1CAA                     __ptext94:	
 15054 ;; *************** function _DimmerLights_Initialization *****************
 15055 ;; Defined at:
 15056 ;;		line 341 in file "../src/Dimmer_B1.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;		None
 15059 ;; Auto vars:     Size  Location     Type
 15060 ;;		None
 15061 ;; Return value:  Size  Location     Type
 15062 ;;		None               void
 15063 ;; Registers used:
 15064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15065 ;; Tracked objects:
 15066 ;;		On entry : 0/0
 15067 ;;		On exit  : 0/0
 15068 ;;		Unchanged: 0/0
 15069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;Total ram usage:        1 bytes
 15075 ;; Hardware stack levels used:    1
 15076 ;; Hardware stack levels required when called:    7
 15077 ;; This function calls:
 15078 ;;		_setDimmerLights_Initialization
 15079 ;; This function is called by:
 15080 ;;		_main
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           
 15085                           ;psect for function _DimmerLights_Initialization
 15086  1CAA                     _DimmerLights_Initialization:	
 15087                           
 15088                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15089                           
 15090                           ;incstack = 0
 15091                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15092  1CAA  3053               	movlw	_DimmerLights1& (0+255)
 15093  1CAB  0020               	movlb	0	; select bank0
 15094  1CAC  00A4               	movwf	??_DimmerLights_Initialization
 15095  1CAD  0824               	movf	??_DimmerLights_Initialization,w
 15096  1CAE  0021               	movlb	1	; select bank1
 15097  1CAF  00CC               	movwf	_DimmerLights11^(0+128)
 15098                           
 15099                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15100  1CB0  3001               	movlw	1
 15101  1CB1  3192  223F         	fcall	_setDimmerLights_Initialization
 15102  1CB3  0008               	return
 15103  1CB4                     __end_of_DimmerLights_Initialization:	
 15104                           
 15105                           	psect	text95
 15106  123F                     __ptext95:	
 15107 ;; *************** function _setDimmerLights_Initialization *****************
 15108 ;; Defined at:
 15109 ;;		line 365 in file "../src/Dimmer_B1.c"
 15110 ;; Parameters:    Size  Location     Type
 15111 ;;  lights          1    wreg     unsigned char 
 15112 ;; Auto vars:     Size  Location     Type
 15113 ;;  lights          1    3[BANK0 ] unsigned char 
 15114 ;; Return value:  Size  Location     Type
 15115 ;;		None               void
 15116 ;; Registers used:
 15117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15118 ;; Tracked objects:
 15119 ;;		On entry : 0/0
 15120 ;;		On exit  : 0/0
 15121 ;;		Unchanged: 0/0
 15122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;Total ram usage:        2 bytes
 15128 ;; Hardware stack levels used:    1
 15129 ;; Hardware stack levels required when called:    6
 15130 ;; This function calls:
 15131 ;;		_DimmerLightsPointSelect
 15132 ;; This function is called by:
 15133 ;;		_DimmerLights_Initialization
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           
 15138                           ;psect for function _setDimmerLights_Initialization
 15139  123F                     _setDimmerLights_Initialization:	
 15140                           
 15141                           ;incstack = 0
 15142                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15143                           ;setDimmerLights_Initialization@lights stored from wreg
 15144  123F  0020               	movlb	0	; select bank0
 15145  1240  00A3               	movwf	setDimmerLights_Initialization@lights
 15146                           
 15147                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15148  1241  0823               	movf	setDimmerLights_Initialization@lights,w
 15149  1242  319C  24D4  3192   	fcall	_DimmerLightsPointSelect
 15150                           
 15151                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15152  1245  3007               	movlw	7
 15153  1246  0020               	movlb	0	; select bank0
 15154  1247  00A2               	movwf	??_setDimmerLights_Initialization
 15155  1248  086F               	movf	_DimmerLights,w
 15156  1249  3E08               	addlw	8
 15157  124A  0086               	movwf	6
 15158  124B  3001               	movlw	1	; select bank2/3
 15159  124C  0087               	movwf	7
 15160  124D  0822               	movf	??_setDimmerLights_Initialization,w
 15161  124E  0081               	movwf	1
 15162                           
 15163                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15164  124F  3038               	movlw	56
 15165  1250  00A2               	movwf	??_setDimmerLights_Initialization
 15166  1251  086F               	movf	_DimmerLights,w
 15167  1252  3E06               	addlw	6
 15168  1253  0086               	movwf	6
 15169  1254  3001               	movlw	1	; select bank2/3
 15170  1255  0087               	movwf	7
 15171  1256  0822               	movf	??_setDimmerLights_Initialization,w
 15172  1257  0081               	movwf	1
 15173                           
 15174                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15175  1258  300C               	movlw	12
 15176  1259  00A2               	movwf	??_setDimmerLights_Initialization
 15177  125A  086F               	movf	_DimmerLights,w
 15178  125B  3E09               	addlw	9
 15179  125C  0086               	movwf	6
 15180  125D  3001               	movlw	1	; select bank2/3
 15181  125E  0087               	movwf	7
 15182  125F  0822               	movf	??_setDimmerLights_Initialization,w
 15183  1260  0081               	movwf	1
 15184                           
 15185                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15186  1261  086F               	movf	_DimmerLights,w
 15187  1262  3E06               	addlw	6
 15188  1263  0086               	movwf	6
 15189  1264  3001               	movlw	1	; select bank2/3
 15190  1265  0087               	movwf	7
 15191  1266  0801               	movf	1,w
 15192  1267  00A2               	movwf	??_setDimmerLights_Initialization
 15193  1268  086F               	movf	_DimmerLights,w
 15194  1269  3E04               	addlw	4
 15195  126A  0086               	movwf	6
 15196  126B  3001               	movlw	1	; select bank2/3
 15197  126C  0087               	movwf	7
 15198  126D  0822               	movf	??_setDimmerLights_Initialization,w
 15199  126E  0081               	movwf	1
 15200  126F  0008               	return
 15201  1270                     __end_of_setDimmerLights_Initialization:	
 15202                           
 15203                           	psect	text96
 15204  1C43                     __ptext96:	
 15205 ;; *************** function _DelayOff_Main *****************
 15206 ;; Defined at:
 15207 ;;		line 41 in file "../src/DelayOff_B1.c"
 15208 ;; Parameters:    Size  Location     Type
 15209 ;;		None
 15210 ;; Auto vars:     Size  Location     Type
 15211 ;;		None
 15212 ;; Return value:  Size  Location     Type
 15213 ;;		None               void
 15214 ;; Registers used:
 15215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15216 ;; Tracked objects:
 15217 ;;		On entry : 0/0
 15218 ;;		On exit  : 0/0
 15219 ;;		Unchanged: 0/0
 15220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;Total ram usage:        0 bytes
 15226 ;; Hardware stack levels used:    1
 15227 ;; Hardware stack levels required when called:   11
 15228 ;; This function calls:
 15229 ;;		_DlyOff_Main
 15230 ;; This function is called by:
 15231 ;;		_main
 15232 ;; This function uses a non-reentrant model
 15233 ;;
 15234                           
 15235                           
 15236                           ;psect for function _DelayOff_Main
 15237  1C43                     _DelayOff_Main:	
 15238                           
 15239                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15240                           
 15241                           ;incstack = 0
 15242                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15243  1C43  3001               	movlw	1
 15244  1C44  3188  20F9         	fcall	_DlyOff_Main
 15245  1C46  0008               	return
 15246  1C47                     __end_of_DelayOff_Main:	
 15247                           
 15248                           	psect	text97
 15249  08F9                     __ptext97:	
 15250 ;; *************** function _DlyOff_Main *****************
 15251 ;; Defined at:
 15252 ;;		line 61 in file "../src/DelayOff_B1.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  sw              1    wreg     unsigned char 
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;  sw              1   78[BANK0 ] unsigned char 
 15257 ;; Return value:  Size  Location     Type
 15258 ;;		None               void
 15259 ;; Registers used:
 15260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15261 ;; Tracked objects:
 15262 ;;		On entry : 0/0
 15263 ;;		On exit  : 0/0
 15264 ;;		Unchanged: 0/0
 15265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;Total ram usage:        3 bytes
 15271 ;; Hardware stack levels used:    1
 15272 ;; Hardware stack levels required when called:   10
 15273 ;; This function calls:
 15274 ;;		_DelayOffPointSelect
 15275 ;;		_setBuz
 15276 ;;		_setDimmerLights_ErrorClose
 15277 ;; This function is called by:
 15278 ;;		_DelayOff_Main
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           
 15283                           ;psect for function _DlyOff_Main
 15284  08F9                     _DlyOff_Main:	
 15285                           
 15286                           ;incstack = 0
 15287                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15288                           ;DlyOff_Main@sw stored from wreg
 15289  08F9  0020               	movlb	0	; select bank0
 15290  08FA  00EE               	movwf	DlyOff_Main@sw
 15291                           
 15292                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15293  08FB  086E               	movf	DlyOff_Main@sw,w
 15294  08FC  319C  24C9  3188   	fcall	_DelayOffPointSelect
 15295                           
 15296                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15297  08FF  0875               	movf	_DelayOff,w
 15298  0900  0086               	movwf	6
 15299  0901  3001               	movlw	1	; select bank2/3
 15300  0902  0087               	movwf	7
 15301  0903  1C81               	btfss	1,1
 15302  0904  0008               	return
 15303                           
 15304                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15305  0905  0875               	movf	_DelayOff,w
 15306  0906  3E02               	addlw	2
 15307  0907  0086               	movwf	6
 15308  0908  3001               	movlw	1	; select bank2/3
 15309  0909  0087               	movwf	7
 15310  090A  3001               	movlw	1
 15311  090B  0781               	addwf	1,f
 15312  090C  3141               	addfsr 1,1
 15313  090D  1803               	skipnc
 15314  090E  0A81               	incf	1,f
 15315                           
 15316                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15317  090F  0875               	movf	_DelayOff,w
 15318  0910  3E02               	addlw	2
 15319  0911  0086               	movwf	6
 15320  0912  3001               	movlw	1	; select bank2/3
 15321  0913  0087               	movwf	7
 15322  0914  3F40               	moviw [0]fsr1
 15323  0915  0020               	movlb	0	; select bank0
 15324  0916  00EC               	movwf	??_DlyOff_Main
 15325  0917  3F41               	moviw [1]fsr1
 15326  0918  00ED               	movwf	??_DlyOff_Main+1
 15327  0919  3017               	movlw	23
 15328  091A  026D               	subwf	??_DlyOff_Main+1,w
 15329  091B  3070               	movlw	112
 15330  091C  1903               	skipnz
 15331  091D  026C               	subwf	??_DlyOff_Main,w
 15332  091E  1C03               	skipc
 15333  091F  0008               	return
 15334                           
 15335                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15336  0920  0875               	movf	_DelayOff,w
 15337  0921  3E02               	addlw	2
 15338  0922  0086               	movwf	6
 15339  0923  3001               	movlw	1	; select bank2/3
 15340  0924  0087               	movwf	7
 15341  0925  3000               	movlw	0
 15342  0926  3FC0               	movwi [0]fsr1
 15343  0927  3FC1               	movwi [1]fsr1
 15344                           
 15345                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15346  0928  3001               	movlw	1
 15347  0929  00EC               	movwf	??_DlyOff_Main
 15348  092A  0875               	movf	_DelayOff,w
 15349  092B  3E04               	addlw	4
 15350  092C  0086               	movwf	6
 15351  092D  3001               	movlw	1	; select bank2/3
 15352  092E  0087               	movwf	7
 15353  092F  086C               	movf	??_DlyOff_Main,w
 15354  0930  0781               	addwf	1,f
 15355                           
 15356                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15357  0931  0875               	movf	_DelayOff,w
 15358  0932  3E04               	addlw	4
 15359  0933  0086               	movwf	6
 15360  0934  3001               	movlw	1	; select bank2/3
 15361  0935  0087               	movwf	7
 15362  0936  0A75               	incf	_DelayOff,w
 15363  0937  0084               	movwf	4
 15364  0938  3001               	movlw	1	; select bank2/3
 15365  0939  0085               	movwf	5
 15366  093A  0800               	movf	0,w
 15367  093B  0201               	subwf	1,w
 15368  093C  1C03               	skipc
 15369  093D  0008               	return
 15370                           
 15371                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15372  093E  0875               	movf	_DelayOff,w
 15373  093F  3E04               	addlw	4
 15374  0940  0086               	movwf	6
 15375  0941  3001               	movlw	1	; select bank2/3
 15376  0942  0087               	movwf	7
 15377  0943  0181               	clrf	1
 15378                           
 15379                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15380  0944  0875               	movf	_DelayOff,w
 15381  0945  0086               	movwf	6
 15382  0946  3001               	movlw	1	; select bank2/3
 15383  0947  0087               	movwf	7
 15384  0948  1081               	bcf	1,1
 15385                           
 15386                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15387  0949  3064               	movlw	100
 15388  094A  00A9               	movwf	setBuz@time
 15389  094B  3000               	movlw	0
 15390  094C  00AA               	movwf	setBuz@time+1
 15391  094D  3001               	movlw	1
 15392  094E  3197  27A7  3188   	fcall	_setBuz
 15393                           
 15394                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15395  0951  0020               	movlb	0	; select bank0
 15396  0952  086E               	movf	DlyOff_Main@sw,w
 15397  0953  3189  2156         	fcall	_setDimmerLights_ErrorClose
 15398  0955  0008               	return
 15399  0956                     __end_of_DlyOff_Main:	
 15400                           
 15401                           	psect	text98
 15402  0956                     __ptext98:	
 15403 ;; *************** function _setDimmerLights_ErrorClose *****************
 15404 ;; Defined at:
 15405 ;;		line 846 in file "../src/Dimmer_B1.c"
 15406 ;; Parameters:    Size  Location     Type
 15407 ;;  lights          1    wreg     unsigned char 
 15408 ;; Auto vars:     Size  Location     Type
 15409 ;;  lights          1    1[BANK1 ] unsigned char 
 15410 ;;  i               2    2[BANK1 ] int 
 15411 ;;  count           1    0[BANK1 ] unsigned char 
 15412 ;; Return value:  Size  Location     Type
 15413 ;;		None               void
 15414 ;; Registers used:
 15415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15416 ;; Tracked objects:
 15417 ;;		On entry : 0/0
 15418 ;;		On exit  : 0/0
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;Total ram usage:        5 bytes
 15426 ;; Hardware stack levels used:    1
 15427 ;; Hardware stack levels required when called:    9
 15428 ;; This function calls:
 15429 ;;		_DimmerLightsPointSelect
 15430 ;;		_getDimmerLights_Status
 15431 ;;		_setDimmerLights_SwOff
 15432 ;; This function is called by:
 15433 ;;		_DlyOff_Main
 15434 ;;		_setControl_Lights_Table
 15435 ;; This function uses a non-reentrant model
 15436 ;;
 15437                           
 15438                           
 15439                           ;psect for function _setDimmerLights_ErrorClose
 15440  0956                     _setDimmerLights_ErrorClose:	
 15441                           
 15442                           ;incstack = 0
 15443                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15444                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15445  0956  0021               	movlb	1	; select bank1
 15446  0957  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15447                           
 15448                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15449  0958  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15450  0959  3AFF               	xorlw	255
 15451  095A  1D03               	skipz
 15452  095B  2995               	goto	l8532
 15453                           
 15454                           ;Dimmer_B1.c: 849: char count = 1;
 15455  095C  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15456  095D  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15457                           
 15458                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15459  095E  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15460  095F  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15461  0960                     l8530:	
 15462  0960  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15463  0961  3A80               	xorlw	128
 15464  0962  0020               	movlb	0	; select bank0
 15465  0963  00EB               	movwf	??_setDimmerLights_ErrorClose
 15466  0964  3080               	movlw	128
 15467  0965  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15468  0966  1D03               	skipz
 15469  0967  296B               	goto	u9115
 15470  0968  0021               	movlb	1	; select bank1
 15471  0969  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15472  096A  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15473  096B                     u9115:	
 15474  096B  1803               	btfsc	3,0
 15475  096C  0008               	return
 15476                           
 15477                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15478  096D  0021               	movlb	1	; select bank1
 15479  096E  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15480  096F  3E01               	addlw	1
 15481  0970  319C  24D4  3189   	fcall	_DimmerLightsPointSelect
 15482                           
 15483                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15484  0973  0021               	movlb	1	; select bank1
 15485  0974  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15486  0975  3E01               	addlw	1
 15487  0976  319D  25B9  3189   	fcall	_getDimmerLights_Status
 15488  0979  3A01               	xorlw	1
 15489  097A  1D03               	skipz
 15490  097B  298F               	goto	l8528
 15491                           
 15492                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15493  097C  0020               	movlb	0	; select bank0
 15494  097D  086F               	movf	_DimmerLights,w
 15495  097E  3E0B               	addlw	11
 15496  097F  0086               	movwf	6
 15497  0980  3001               	movlw	1	; select bank2/3
 15498  0981  0087               	movwf	7
 15499  0982  1481               	bsf	1,1
 15500                           
 15501                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15502  0983  086F               	movf	_DimmerLights,w
 15503  0984  3E02               	addlw	2
 15504  0985  0086               	movwf	6
 15505  0986  3001               	movlw	1	; select bank2/3
 15506  0987  0087               	movwf	7
 15507  0988  1081               	bcf	1,1
 15508                           
 15509                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15510  0989  0021               	movlb	1	; select bank1
 15511  098A  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15512  098B  3E01               	addlw	1
 15513  098C  3195  2568  3189   	fcall	_setDimmerLights_SwOff
 15514  098F                     l8528:	
 15515  098F  3001               	movlw	1
 15516  0990  0021               	movlb	1	; select bank1
 15517  0991  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15518  0992  3000               	movlw	0
 15519  0993  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15520  0994  2960               	goto	l8530
 15521  0995                     l8532:	
 15522                           ;Dimmer_B1.c: 863: }
 15523                           ;Dimmer_B1.c: 864: }
 15524                           ;Dimmer_B1.c: 865: } else {
 15525                           
 15526                           
 15527                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15528  0995  0021               	movlb	1	; select bank1
 15529  0996  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15530  0997  319C  24D4  3189   	fcall	_DimmerLightsPointSelect
 15531                           
 15532                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15533  099A  0021               	movlb	1	; select bank1
 15534  099B  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15535  099C  319D  25B9  3189   	fcall	_getDimmerLights_Status
 15536  099F  3A01               	xorlw	1
 15537  09A0  1D03               	skipz
 15538  09A1  0008               	return
 15539                           
 15540                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15541  09A2  0020               	movlb	0	; select bank0
 15542  09A3  086F               	movf	_DimmerLights,w
 15543  09A4  3E0B               	addlw	11
 15544  09A5  0086               	movwf	6
 15545  09A6  3001               	movlw	1	; select bank2/3
 15546  09A7  0087               	movwf	7
 15547  09A8  1481               	bsf	1,1
 15548                           
 15549                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15550  09A9  086F               	movf	_DimmerLights,w
 15551  09AA  3E02               	addlw	2
 15552  09AB  0086               	movwf	6
 15553  09AC  3001               	movlw	1	; select bank2/3
 15554  09AD  0087               	movwf	7
 15555  09AE  1081               	bcf	1,1
 15556                           
 15557                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 15558  09AF  0021               	movlb	1	; select bank1
 15559  09B0  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15560  09B1  3195  2568         	fcall	_setDimmerLights_SwOff
 15561  09B3  0008               	return
 15562  09B4                     __end_of_setDimmerLights_ErrorClose:	
 15563                           
 15564                           	psect	text99
 15565  1568                     __ptext99:	
 15566 ;; *************** function _setDimmerLights_SwOff *****************
 15567 ;; Defined at:
 15568 ;;		line 450 in file "../src/Dimmer_B1.c"
 15569 ;; Parameters:    Size  Location     Type
 15570 ;;  sw              1    wreg     unsigned char 
 15571 ;; Auto vars:     Size  Location     Type
 15572 ;;  sw              1   74[BANK0 ] unsigned char 
 15573 ;; Return value:  Size  Location     Type
 15574 ;;		None               void
 15575 ;; Registers used:
 15576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15577 ;; Tracked objects:
 15578 ;;		On entry : 0/0
 15579 ;;		On exit  : 0/0
 15580 ;;		Unchanged: 0/0
 15581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;Total ram usage:        1 bytes
 15587 ;; Hardware stack levels used:    1
 15588 ;; Hardware stack levels required when called:    8
 15589 ;; This function calls:
 15590 ;;		_DimmerLightsPointSelect
 15591 ;;		_getDelayOff_GO
 15592 ;;		_setDelayOff_GO
 15593 ;; This function is called by:
 15594 ;;		_setDimmerLights_ErrorClose
 15595 ;;		_Exception_Main
 15596 ;;		_setRFSW_Control
 15597 ;;		_setSw_Main
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _setDimmerLights_SwOff
 15603  1568                     _setDimmerLights_SwOff:	
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15607                           ;setDimmerLights_SwOff@sw stored from wreg
 15608  1568  0020               	movlb	0	; select bank0
 15609  1569  00EA               	movwf	setDimmerLights_SwOff@sw
 15610                           
 15611                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15612  156A  086A               	movf	setDimmerLights_SwOff@sw,w
 15613  156B  319C  24D4  3195   	fcall	_DimmerLightsPointSelect
 15614                           
 15615                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15616  156E  0020               	movlb	0	; select bank0
 15617  156F  086F               	movf	_DimmerLights,w
 15618  1570  3E0B               	addlw	11
 15619  1571  0086               	movwf	6
 15620  1572  3001               	movlw	1	; select bank2/3
 15621  1573  0087               	movwf	7
 15622  1574  1C81               	btfss	1,1
 15623  1575  0008               	return
 15624                           
 15625                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15626  1576  086F               	movf	_DimmerLights,w
 15627  1577  3E0B               	addlw	11
 15628  1578  0086               	movwf	6
 15629  1579  3001               	movlw	1	; select bank2/3
 15630  157A  0087               	movwf	7
 15631  157B  1081               	bcf	1,1
 15632                           
 15633                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15634  157C  086F               	movf	_DimmerLights,w
 15635  157D  3E02               	addlw	2
 15636  157E  0086               	movwf	6
 15637  157F  3001               	movlw	1	; select bank2/3
 15638  1580  0087               	movwf	7
 15639  1581  1C81               	btfss	1,1
 15640  1582  2D9D               	goto	l8378
 15641                           
 15642                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15643  1583  086F               	movf	_DimmerLights,w
 15644  1584  3E0B               	addlw	11
 15645  1585  0086               	movwf	6
 15646  1586  3001               	movlw	1	; select bank2/3
 15647  1587  0087               	movwf	7
 15648  1588  1D01               	btfss	1,2
 15649  1589  0008               	return
 15650                           
 15651                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15652  158A  086F               	movf	_DimmerLights,w
 15653  158B  3E0B               	addlw	11
 15654  158C  0086               	movwf	6
 15655  158D  3001               	movlw	1	; select bank2/3
 15656  158E  0087               	movwf	7
 15657  158F  1101               	bcf	1,2
 15658                           
 15659                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15660  1590  086F               	movf	_DimmerLights,w
 15661  1591  3E0A               	addlw	10
 15662  1592  0086               	movwf	6
 15663  1593  3001               	movlw	1	; select bank2/3
 15664  1594  0087               	movwf	7
 15665  1595  1581               	bsf	1,3
 15666                           
 15667                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15668  1596  086F               	movf	_DimmerLights,w
 15669  1597  3E0A               	addlw	10
 15670  1598  0086               	movwf	6
 15671  1599  3001               	movlw	1	; select bank2/3
 15672  159A  0087               	movwf	7
 15673  159B  1101               	bcf	1,2
 15674                           
 15675                           ;Dimmer_B1.c: 462: }
 15676                           ;Dimmer_B1.c: 463: } else {
 15677  159C  0008               	return
 15678  159D                     l8378:	
 15679                           
 15680                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15681  159D  086F               	movf	_DimmerLights,w
 15682  159E  3E0A               	addlw	10
 15683  159F  0086               	movwf	6
 15684  15A0  3001               	movlw	1	; select bank2/3
 15685  15A1  0087               	movwf	7
 15686  15A2  1481               	bsf	1,1
 15687                           
 15688                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15689  15A3  086F               	movf	_DimmerLights,w
 15690  15A4  3E0A               	addlw	10
 15691  15A5  0086               	movwf	6
 15692  15A6  3001               	movlw	1	; select bank2/3
 15693  15A7  0087               	movwf	7
 15694  15A8  1001               	bcf	1,0
 15695                           
 15696                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15697  15A9  086A               	movf	setDimmerLights_SwOff@sw,w
 15698  15AA  319D  2599  3195   	fcall	_getDelayOff_GO
 15699  15AD  3A01               	xorlw	1
 15700  15AE  1D03               	skipz
 15701  15AF  0008               	return
 15702                           
 15703                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15704  15B0  0020               	movlb	0	; select bank0
 15705  15B1  01E6               	clrf	setDelayOff_GO@command
 15706  15B2  01E7               	clrf	setDelayOff_GO@value
 15707  15B3  086A               	movf	setDimmerLights_SwOff@sw,w
 15708  15B4  3196  26A8         	fcall	_setDelayOff_GO
 15709  15B6  0008               	return
 15710  15B7                     __end_of_setDimmerLights_SwOff:	
 15711                           
 15712                           	psect	text100
 15713  16A8                     __ptext100:	
 15714 ;; *************** function _setDelayOff_GO *****************
 15715 ;; Defined at:
 15716 ;;		line 83 in file "../src/DelayOff_B1.c"
 15717 ;; Parameters:    Size  Location     Type
 15718 ;;  sw              1    wreg     unsigned char 
 15719 ;;  command         1   70[BANK0 ] unsigned char 
 15720 ;;  value           1   71[BANK0 ] unsigned char 
 15721 ;; Auto vars:     Size  Location     Type
 15722 ;;  sw              1   73[BANK0 ] unsigned char 
 15723 ;; Return value:  Size  Location     Type
 15724 ;;		None               void
 15725 ;; Registers used:
 15726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15727 ;; Tracked objects:
 15728 ;;		On entry : 0/0
 15729 ;;		On exit  : 0/0
 15730 ;;		Unchanged: 0/0
 15731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;Total ram usage:        4 bytes
 15737 ;; Hardware stack levels used:    1
 15738 ;; Hardware stack levels required when called:    7
 15739 ;; This function calls:
 15740 ;;		_DelayOffPointSelect
 15741 ;;		_DelayTimejudge
 15742 ;;		_setProductData
 15743 ;; This function is called by:
 15744 ;;		_setDimmerLights_SwOff
 15745 ;;		_setRFSW_Control
 15746 ;; This function uses a non-reentrant model
 15747 ;;
 15748                           
 15749                           
 15750                           ;psect for function _setDelayOff_GO
 15751  16A8                     _setDelayOff_GO:	
 15752                           
 15753                           ;incstack = 0
 15754                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15755                           ;setDelayOff_GO@sw stored from wreg
 15756  16A8  0020               	movlb	0	; select bank0
 15757  16A9  00E9               	movwf	setDelayOff_GO@sw
 15758                           
 15759                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15760  16AA  0869               	movf	setDelayOff_GO@sw,w
 15761  16AB  319C  24C9  3196   	fcall	_DelayOffPointSelect
 15762                           
 15763                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15764  16AE  0020               	movlb	0	; select bank0
 15765  16AF  0866               	movf	setDelayOff_GO@command,w
 15766  16B0  3A01               	xorlw	1
 15767  16B1  3000               	movlw	0
 15768  16B2  1903               	skipnz
 15769  16B3  3001               	movlw	1
 15770  16B4  00E8               	movwf	??_setDelayOff_GO
 15771  16B5  0875               	movf	_DelayOff,w
 15772  16B6  0086               	movwf	6
 15773  16B7  3001               	movlw	1	; select bank2/3
 15774  16B8  0087               	movwf	7
 15775  16B9  0DE8               	rlf	??_setDelayOff_GO,f
 15776  16BA  0801               	movf	1,w
 15777  16BB  0668               	xorwf	??_setDelayOff_GO,w
 15778  16BC  39FD               	andlw	-3
 15779  16BD  0668               	xorwf	??_setDelayOff_GO,w
 15780  16BE  0081               	movwf	1
 15781                           
 15782                           ;DelayOff_B1.c: 89: if (command == 1) {
 15783  16BF  0866               	movf	setDelayOff_GO@command,w
 15784  16C0  3A01               	xorlw	1
 15785  16C1  1D03               	skipz
 15786  16C2  2EE6               	goto	l8332
 15787                           
 15788                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15789  16C3  0867               	movf	setDelayOff_GO@value,w
 15790  16C4  3191  218C  3196   	fcall	_DelayTimejudge
 15791  16C7  0020               	movlb	0	; select bank0
 15792  16C8  00E8               	movwf	??_setDelayOff_GO
 15793  16C9  0A75               	incf	_DelayOff,w
 15794  16CA  0086               	movwf	6
 15795  16CB  3001               	movlw	1	; select bank2/3
 15796  16CC  0087               	movwf	7
 15797  16CD  0868               	movf	??_setDelayOff_GO,w
 15798  16CE  0081               	movwf	1
 15799                           
 15800                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15801  16CF  300F               	movlw	15
 15802  16D0  0567               	andwf	setDelayOff_GO@value,w
 15803  16D1  00E8               	movwf	??_setDelayOff_GO
 15804  16D2  0868               	movf	??_setDelayOff_GO,w
 15805  16D3  3A05               	xorlw	5
 15806  16D4  1903               	skipnz
 15807  16D5  2EDA               	goto	l8326
 15808  16D6  0867               	movf	setDelayOff_GO@value,w
 15809  16D7  390F               	andlw	15
 15810  16D8  1D03               	btfss	3,2
 15811  16D9  2EE0               	goto	l8330
 15812  16DA                     l8326:	
 15813  16DA  3026               	movlw	38
 15814  16DB  0267               	subwf	setDelayOff_GO@value,w
 15815  16DC  1803               	skipnc
 15816  16DD  2EE0               	goto	l8330
 15817                           
 15818                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15819  16DE  0867               	movf	setDelayOff_GO@value,w
 15820  16DF  2EE2               	goto	L6
 15821  16E0                     l8330:	
 15822                           ;DelayOff_B1.c: 93: } else {
 15823                           
 15824                           
 15825                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15826  16E0  3005               	movlw	5
 15827  16E1  0020               	movlb	0	; select bank0
 15828  16E2                     L6:	
 15829  16E2  00E8               	movwf	??_setDelayOff_GO
 15830  16E3  0868               	movf	??_setDelayOff_GO,w
 15831  16E4  00E2               	movwf	setProductData@value
 15832  16E5  2EE8               	goto	L5
 15833  16E6                     l8332:	
 15834                           ;DelayOff_B1.c: 95: }
 15835                           ;DelayOff_B1.c: 96: } else {
 15836                           
 15837                           
 15838                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15839  16E6  0020               	movlb	0	; select bank0
 15840  16E7  01E2               	clrf	setProductData@value
 15841  16E8                     L5:	
 15842  16E8  0869               	movf	setDelayOff_GO@sw,w
 15843  16E9  3E1A               	addlw	26
 15844  16EA  319D  255F         	fcall	_setProductData
 15845                           
 15846                           ;DelayOff_B1.c: 98: }
 15847                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15848  16EC  0875               	movf	_DelayOff,w
 15849  16ED  3E02               	addlw	2
 15850  16EE  0086               	movwf	6
 15851  16EF  3001               	movlw	1	; select bank2/3
 15852  16F0  0087               	movwf	7
 15853  16F1  3000               	movlw	0
 15854  16F2  3FC0               	movwi [0]fsr1
 15855  16F3  3FC1               	movwi [1]fsr1
 15856                           
 15857                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15858  16F4  0875               	movf	_DelayOff,w
 15859  16F5  3E04               	addlw	4
 15860  16F6  0086               	movwf	6
 15861  16F7  3001               	movlw	1	; select bank2/3
 15862  16F8  0087               	movwf	7
 15863  16F9  0181               	clrf	1
 15864  16FA  0008               	return
 15865  16FB                     __end_of_setDelayOff_GO:	
 15866                           
 15867                           	psect	text101
 15868  1D5F                     __ptext101:	
 15869 ;; *************** function _setProductData *****************
 15870 ;; Defined at:
 15871 ;;		line 605 in file "../src/Main_B1.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;  address         1    wreg     unsigned char 
 15874 ;;  value           1   66[BANK0 ] unsigned char 
 15875 ;; Auto vars:     Size  Location     Type
 15876 ;;  address         1   69[BANK0 ] unsigned char 
 15877 ;; Return value:  Size  Location     Type
 15878 ;;		None               void
 15879 ;; Registers used:
 15880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15881 ;; Tracked objects:
 15882 ;;		On entry : 0/0
 15883 ;;		On exit  : 0/0
 15884 ;;		Unchanged: 0/0
 15885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15886 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;Total ram usage:        4 bytes
 15891 ;; Hardware stack levels used:    1
 15892 ;; Hardware stack levels required when called:    5
 15893 ;; This function calls:
 15894 ;;		Nothing
 15895 ;; This function is called by:
 15896 ;;		_setDelayOff_GO
 15897 ;;		_setDimmerLights
 15898 ;;		_setDimmerLights_Adj
 15899 ;;		_setTemp_Main
 15900 ;;		_setLog_Code
 15901 ;;		_setControl_Lights_Table
 15902 ;;		_setRFSW_AdjControl
 15903 ;;		_setRF_DimmerValue
 15904 ;;		_setRF_DimmerLights
 15905 ;; This function uses a non-reentrant model
 15906 ;;
 15907                           
 15908                           
 15909                           ;psect for function _setProductData
 15910  1D5F                     _setProductData:	
 15911                           
 15912                           ;incstack = 0
 15913                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15914                           ;setProductData@address stored from wreg
 15915  1D5F  0020               	movlb	0	; select bank0
 15916  1D60  00E5               	movwf	setProductData@address
 15917                           
 15918                           ;Main_B1.c: 606: product->Data[address] = value;
 15919  1D61  0862               	movf	setProductData@value,w
 15920  1D62  00E3               	movwf	??_setProductData
 15921  1D63  0865               	movf	setProductData@address,w
 15922  1D64  0779               	addwf	_product,w
 15923  1D65  00E4               	movwf	??_setProductData+1
 15924  1D66  0864               	movf	??_setProductData+1,w
 15925  1D67  0086               	movwf	6
 15926  1D68  3002               	movlw	2	; select bank4/5
 15927  1D69  0087               	movwf	7
 15928  1D6A  0863               	movf	??_setProductData,w
 15929  1D6B  0081               	movwf	1
 15930  1D6C  0008               	return
 15931  1D6D                     __end_of_setProductData:	
 15932                           
 15933                           	psect	text102
 15934  118C                     __ptext102:	
 15935 ;; *************** function _DelayTimejudge *****************
 15936 ;; Defined at:
 15937 ;;		line 112 in file "../src/DelayOff_B1.c"
 15938 ;; Parameters:    Size  Location     Type
 15939 ;;  value           1    wreg     unsigned char 
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  value           1    9[BANK0 ] unsigned char 
 15942 ;;  k               1    8[BANK0 ] unsigned char 
 15943 ;;  j               1    7[BANK0 ] unsigned char 
 15944 ;;  i               1    6[BANK0 ] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;                  1    wreg      unsigned char 
 15947 ;; Registers used:
 15948 ;;		wreg, status,2, status,0, pclath, cstack
 15949 ;; Tracked objects:
 15950 ;;		On entry : 0/0
 15951 ;;		On exit  : 0/0
 15952 ;;		Unchanged: 0/0
 15953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;Total ram usage:        6 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; Hardware stack levels required when called:    6
 15961 ;; This function calls:
 15962 ;;		___bmul
 15963 ;; This function is called by:
 15964 ;;		_setDelayOff_GO
 15965 ;; This function uses a non-reentrant model
 15966 ;;
 15967                           
 15968                           
 15969                           ;psect for function _DelayTimejudge
 15970  118C                     _DelayTimejudge:	
 15971                           
 15972                           ;incstack = 0
 15973                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15974                           ;DelayTimejudge@value stored from wreg
 15975  118C  0020               	movlb	0	; select bank0
 15976  118D  00A9               	movwf	DelayTimejudge@value
 15977                           
 15978                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15979  118E  3005               	movlw	5
 15980  118F  00A4               	movwf	??_DelayTimejudge
 15981  1190  0824               	movf	??_DelayTimejudge,w
 15982  1191  00A6               	movwf	DelayTimejudge@i
 15983  1192  01A7               	clrf	DelayTimejudge@j
 15984  1193  01A8               	clrf	DelayTimejudge@k
 15985                           
 15986                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15987  1194  3031               	movlw	49
 15988  1195  0229               	subwf	DelayTimejudge@value,w
 15989  1196  1803               	skipnc
 15990  1197  29B4               	goto	l8224
 15991                           
 15992                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15993  1198  0829               	movf	DelayTimejudge@value,w
 15994  1199  390F               	andlw	15
 15995  119A  00A4               	movwf	??_DelayTimejudge
 15996  119B  0824               	movf	??_DelayTimejudge,w
 15997  119C  00A7               	movwf	DelayTimejudge@j
 15998                           
 15999                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16000  119D  0829               	movf	DelayTimejudge@value,w
 16001  119E  00A4               	movwf	??_DelayTimejudge
 16002  119F  3004               	movlw	4
 16003  11A0                     u8715:	
 16004  11A0  36A4               	lsrf	??_DelayTimejudge,f
 16005  11A1  0B89               	decfsz	9,f
 16006  11A2  29A0               	goto	u8715
 16007  11A3  0824               	movf	??_DelayTimejudge,w
 16008  11A4  390F               	andlw	15
 16009  11A5  00A5               	movwf	??_DelayTimejudge+1
 16010  11A6  0825               	movf	??_DelayTimejudge+1,w
 16011  11A7  00A8               	movwf	DelayTimejudge@k
 16012                           
 16013                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16014  11A8  300A               	movlw	10
 16015  11A9  00A4               	movwf	??_DelayTimejudge
 16016  11AA  0824               	movf	??_DelayTimejudge,w
 16017  11AB  00A0               	movwf	___bmul@multiplicand
 16018  11AC  0828               	movf	DelayTimejudge@k,w
 16019  11AD  319D  25FD         	fcall	___bmul
 16020  11AF  0020               	movlb	0	; select bank0
 16021  11B0  0727               	addwf	DelayTimejudge@j,w
 16022  11B1  00A5               	movwf	??_DelayTimejudge+1
 16023  11B2  0825               	movf	??_DelayTimejudge+1,w
 16024  11B3  00A6               	movwf	DelayTimejudge@i
 16025  11B4                     l8224:	
 16026                           
 16027                           ;DelayOff_B1.c: 118: }
 16028                           ;DelayOff_B1.c: 139: return i;
 16029  11B4  0826               	movf	DelayTimejudge@i,w
 16030  11B5  0008               	return
 16031  11B6                     __end_of_DelayTimejudge:	
 16032                           
 16033                           	psect	text103
 16034  1DFD                     __ptext103:	
 16035 ;; *************** function ___bmul *****************
 16036 ;; Defined at:
 16037 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16038 ;; Parameters:    Size  Location     Type
 16039 ;;  multiplier      1    wreg     unsigned char 
 16040 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16043 ;;  product         1    2[BANK0 ] unsigned char 
 16044 ;; Return value:  Size  Location     Type
 16045 ;;                  1    wreg      unsigned char 
 16046 ;; Registers used:
 16047 ;;		wreg, status,2, status,0
 16048 ;; Tracked objects:
 16049 ;;		On entry : 0/0
 16050 ;;		On exit  : 0/0
 16051 ;;		Unchanged: 0/0
 16052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16053 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;Total ram usage:        4 bytes
 16058 ;; Hardware stack levels used:    1
 16059 ;; Hardware stack levels required when called:    5
 16060 ;; This function calls:
 16061 ;;		Nothing
 16062 ;; This function is called by:
 16063 ;;		_DelayTimejudge
 16064 ;; This function uses a non-reentrant model
 16065 ;;
 16066                           
 16067                           
 16068                           ;psect for function ___bmul
 16069  1DFD                     ___bmul:	
 16070                           
 16071                           ;incstack = 0
 16072                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16073                           ;___bmul@multiplier stored from wreg
 16074  1DFD  0020               	movlb	0	; select bank0
 16075  1DFE  00A3               	movwf	___bmul@multiplier
 16076  1DFF  01A2               	clrf	___bmul@product
 16077  1E00                     l7966:	
 16078  1E00  1C23               	btfss	___bmul@multiplier,0
 16079  1E01  2E06               	goto	l7970
 16080  1E02  0820               	movf	___bmul@multiplicand,w
 16081  1E03  00A1               	movwf	??___bmul
 16082  1E04  0821               	movf	??___bmul,w
 16083  1E05  07A2               	addwf	___bmul@product,f
 16084  1E06                     l7970:	
 16085  1E06  1003               	clrc
 16086  1E07  0DA0               	rlf	___bmul@multiplicand,f
 16087  1E08  1003               	clrc
 16088  1E09  0CA3               	rrf	___bmul@multiplier,f
 16089  1E0A  08A3               	movf	___bmul@multiplier,f
 16090  1E0B  1D03               	skipz
 16091  1E0C  2E00               	goto	l7966
 16092  1E0D  0822               	movf	___bmul@product,w
 16093  1E0E  0008               	return
 16094  1E0F                     __end_of___bmul:	
 16095                           
 16096                           	psect	text104
 16097  1D99                     __ptext104:	
 16098 ;; *************** function _getDelayOff_GO *****************
 16099 ;; Defined at:
 16100 ;;		line 105 in file "../src/DelayOff_B1.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  sw              1    wreg     unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  sw              1    2[BANK0 ] unsigned char 
 16105 ;;  go              1    3[BANK0 ] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;                  1    wreg      unsigned char 
 16108 ;; Registers used:
 16109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;Total ram usage:        2 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    6
 16122 ;; This function calls:
 16123 ;;		_DelayOffPointSelect
 16124 ;; This function is called by:
 16125 ;;		_setDimmerLights_SwOff
 16126 ;;		_setRFSW_Control
 16127 ;; This function uses a non-reentrant model
 16128 ;;
 16129                           
 16130                           
 16131                           ;psect for function _getDelayOff_GO
 16132  1D99                     _getDelayOff_GO:	
 16133                           
 16134                           ;incstack = 0
 16135                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16136                           ;getDelayOff_GO@sw stored from wreg
 16137  1D99  0020               	movlb	0	; select bank0
 16138  1D9A  00A2               	movwf	getDelayOff_GO@sw
 16139                           
 16140                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16141  1D9B  0822               	movf	getDelayOff_GO@sw,w
 16142  1D9C  319C  24C9         	fcall	_DelayOffPointSelect
 16143                           
 16144                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16145  1D9E  0875               	movf	_DelayOff,w
 16146  1D9F  0086               	movwf	6
 16147  1DA0  3001               	movlw	1	; select bank2/3
 16148  1DA1  0087               	movwf	7
 16149  1DA2  3000               	movlw	0
 16150  1DA3  1881               	btfsc	1,1
 16151  1DA4  3001               	movlw	1
 16152  1DA5  0020               	movlb	0	; select bank0
 16153  1DA6  00A3               	movwf	getDelayOff_GO@go
 16154                           
 16155                           ;DelayOff_B1.c: 108: return go;
 16156  1DA7  0823               	movf	getDelayOff_GO@go,w
 16157  1DA8  0008               	return
 16158  1DA9                     __end_of_getDelayOff_GO:	
 16159                           
 16160                           	psect	text105
 16161  1DB9                     __ptext105:	
 16162 ;; *************** function _getDimmerLights_Status *****************
 16163 ;; Defined at:
 16164 ;;		line 757 in file "../src/Dimmer_B1.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;  lights          1    wreg     unsigned char 
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;  lights          1    2[BANK0 ] unsigned char 
 16169 ;;  status          1    3[BANK0 ] unsigned char 
 16170 ;; Return value:  Size  Location     Type
 16171 ;;                  1    wreg      unsigned char 
 16172 ;; Registers used:
 16173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;Total ram usage:        2 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    6
 16186 ;; This function calls:
 16187 ;;		_DimmerLightsPointSelect
 16188 ;; This function is called by:
 16189 ;;		_setDimmerLights_ErrorClose
 16190 ;;		_Exception_Main
 16191 ;;		_setRFSW_Control
 16192 ;;		_setRFSW_AdjControl
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           
 16197                           ;psect for function _getDimmerLights_Status
 16198  1DB9                     _getDimmerLights_Status:	
 16199                           
 16200                           ;incstack = 0
 16201                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16202                           ;getDimmerLights_Status@lights stored from wreg
 16203  1DB9  0020               	movlb	0	; select bank0
 16204  1DBA  00A2               	movwf	getDimmerLights_Status@lights
 16205                           
 16206                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16207  1DBB  0822               	movf	getDimmerLights_Status@lights,w
 16208  1DBC  319C  24D4         	fcall	_DimmerLightsPointSelect
 16209                           
 16210                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16211  1DBE  0020               	movlb	0	; select bank0
 16212  1DBF  086F               	movf	_DimmerLights,w
 16213  1DC0  3E02               	addlw	2
 16214  1DC1  0086               	movwf	6
 16215  1DC2  3001               	movlw	1	; select bank2/3
 16216  1DC3  0087               	movwf	7
 16217  1DC4  3000               	movlw	0
 16218  1DC5  1881               	btfsc	1,1
 16219  1DC6  3001               	movlw	1
 16220  1DC7  00A3               	movwf	getDimmerLights_Status@status
 16221                           
 16222                           ;Dimmer_B1.c: 760: return status;
 16223  1DC8  0823               	movf	getDimmerLights_Status@status,w
 16224  1DC9  0008               	return
 16225  1DCA                     __end_of_getDimmerLights_Status:	
 16226                           
 16227                           	psect	text106
 16228  1CD4                     __ptext106:	
 16229 ;; *************** function _DimmerLightsPointSelect *****************
 16230 ;; Defined at:
 16231 ;;		line 321 in file "../src/Dimmer_B1.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;  lights          1    wreg     unsigned char 
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;  lights          1    1[BANK0 ] unsigned char 
 16236 ;; Return value:  Size  Location     Type
 16237 ;;		None               void
 16238 ;; Registers used:
 16239 ;;		wreg
 16240 ;; Tracked objects:
 16241 ;;		On entry : 0/0
 16242 ;;		On exit  : 0/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;Total ram usage:        2 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; Hardware stack levels required when called:    5
 16252 ;; This function calls:
 16253 ;;		Nothing
 16254 ;; This function is called by:
 16255 ;;		_setDimmerLights_Initialization
 16256 ;;		_setDimmerLights_SwOn
 16257 ;;		_setDimmerLights_SwOff
 16258 ;;		_setDimmerLights_AdjOn
 16259 ;;		_setDimmerLights_Main
 16260 ;;		_getDimmerLights_Status
 16261 ;;		_getAll_DimmerLights_AdjSw
 16262 ;;		_setDimmerLights_ErrorClose
 16263 ;;		_setDimmerLights_AdjRF
 16264 ;;		_setDimmerLights_Status
 16265 ;;		_setDimmerLights_GO
 16266 ;;		_setDimmerLights_MaxmumValue
 16267 ;;		_setDimmerLights_Trigger
 16268 ;; This function uses a non-reentrant model
 16269 ;;
 16270                           
 16271                           
 16272                           ;psect for function _DimmerLightsPointSelect
 16273  1CD4                     _DimmerLightsPointSelect:	
 16274                           
 16275                           ;incstack = 0
 16276                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16277                           ;DimmerLightsPointSelect@lights stored from wreg
 16278  1CD4  0020               	movlb	0	; select bank0
 16279  1CD5  00A1               	movwf	DimmerLightsPointSelect@lights
 16280                           
 16281                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16282  1CD6  0821               	movf	DimmerLightsPointSelect@lights,w
 16283  1CD7  3A01               	xorlw	1
 16284  1CD8  1D03               	skipz
 16285  1CD9  0008               	return
 16286                           
 16287                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16288  1CDA  3053               	movlw	_DimmerLights1& (0+255)
 16289  1CDB  00A0               	movwf	??_DimmerLightsPointSelect
 16290  1CDC  0820               	movf	??_DimmerLightsPointSelect,w
 16291  1CDD  00EF               	movwf	_DimmerLights
 16292  1CDE  0008               	return
 16293  1CDF                     __end_of_DimmerLightsPointSelect:	
 16294                           
 16295                           	psect	text107
 16296  17A7                     __ptext107:	
 16297 ;; *************** function _setBuz *****************
 16298 ;; Defined at:
 16299 ;;		line 22 in file "../src/Buzzer_B1.c"
 16300 ;; Parameters:    Size  Location     Type
 16301 ;;  count           1    wreg     unsigned char 
 16302 ;;  time            2    9[BANK0 ] int 
 16303 ;; Auto vars:     Size  Location     Type
 16304 ;;  count           1   12[BANK0 ] unsigned char 
 16305 ;; Return value:  Size  Location     Type
 16306 ;;		None               void
 16307 ;; Registers used:
 16308 ;;		wreg, status,2, status,0, pclath, cstack
 16309 ;; Tracked objects:
 16310 ;;		On entry : 0/0
 16311 ;;		On exit  : 0/0
 16312 ;;		Unchanged: 0/0
 16313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16314 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16317 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;Total ram usage:        4 bytes
 16319 ;; Hardware stack levels used:    1
 16320 ;; Hardware stack levels required when called:    6
 16321 ;; This function calls:
 16322 ;;		___awdiv
 16323 ;; This function is called by:
 16324 ;;		_DlyOff_Main
 16325 ;;		_setDimmerLights_SwOn
 16326 ;;		_setDimmerLights_Adj
 16327 ;;		_my_MainTimer
 16328 ;;		_Exception_Main
 16329 ;;		_setTemp_Main
 16330 ;;		_setLog_Code
 16331 ;;		_setControl_Lights_Table
 16332 ;;		_setRFSW_Control
 16333 ;;		_setSw_Main
 16334 ;; This function uses a non-reentrant model
 16335 ;;
 16336                           
 16337                           
 16338                           ;psect for function _setBuz
 16339  17A7                     _setBuz:	
 16340                           
 16341                           ;incstack = 0
 16342                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16343                           ;setBuz@count stored from wreg
 16344  17A7  0020               	movlb	0	; select bank0
 16345  17A8  00AC               	movwf	setBuz@count
 16346                           
 16347                           ;Buzzer_B1.c: 23: time /= 10;
 16348  17A9  300A               	movlw	10
 16349  17AA  00A0               	movwf	___awdiv@divisor
 16350  17AB  3000               	movlw	0
 16351  17AC  00A1               	movwf	___awdiv@divisor+1
 16352  17AD  082A               	movf	setBuz@time+1,w
 16353  17AE  01A3               	clrf	___awdiv@dividend+1
 16354  17AF  07A3               	addwf	___awdiv@dividend+1,f
 16355  17B0  0829               	movf	setBuz@time,w
 16356  17B1  01A2               	clrf	___awdiv@dividend
 16357  17B2  07A2               	addwf	___awdiv@dividend,f
 16358  17B3  3196  26FB  3197   	fcall	___awdiv
 16359  17B6  0020               	movlb	0	; select bank0
 16360  17B7  0821               	movf	?___awdiv+1,w
 16361  17B8  01AA               	clrf	setBuz@time+1
 16362  17B9  07AA               	addwf	setBuz@time+1,f
 16363  17BA  0820               	movf	?___awdiv,w
 16364  17BB  01A9               	clrf	setBuz@time
 16365  17BC  07A9               	addwf	setBuz@time,f
 16366                           
 16367                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16368  17BD  0021               	movlb	1	; select bank1
 16369  17BE  1C2E               	btfss	_Buz1^(0+128),0
 16370  17BF  0008               	return
 16371                           
 16372                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16373  17C0  18AE               	btfsc	_Buz1^(0+128),1
 16374  17C1  2FD8               	goto	l84
 16375                           
 16376                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16377  17C2  14AE               	bsf	_Buz1^(0+128),1
 16378                           
 16379                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16380  17C3  01AF               	clrf	(_Buz1^(0+128)+1)
 16381  17C4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16382                           
 16383                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16384  17C5  0020               	movlb	0	; select bank0
 16385  17C6  082C               	movf	setBuz@count,w
 16386  17C7  00AB               	movwf	??_setBuz
 16387  17C8  082B               	movf	??_setBuz,w
 16388  17C9  0021               	movlb	1	; select bank1
 16389  17CA  00B1               	movwf	(_Buz1^(0+128)+3)
 16390                           
 16391                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16392  17CB  0020               	movlb	0	; select bank0
 16393  17CC  082A               	movf	setBuz@time+1,w
 16394  17CD  0021               	movlb	1	; select bank1
 16395  17CE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16396  17CF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16397  17D0  0020               	movlb	0	; select bank0
 16398  17D1  0829               	movf	setBuz@time,w
 16399  17D2  0021               	movlb	1	; select bank1
 16400  17D3  01B4               	clrf	(_Buz1^(0+128)+6)
 16401  17D4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16402                           
 16403                           ;Buzzer_B1.c: 30: RB3 = 1;
 16404  17D5  0020               	movlb	0	; select bank0
 16405  17D6  158D               	bsf	13,3	;volatile
 16406                           
 16407                           ;Buzzer_B1.c: 31: } else {
 16408  17D7  0008               	return
 16409  17D8                     l84:	
 16410                           
 16411                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16412  17D8  19AE               	btfsc	_Buz1^(0+128),3
 16413  17D9  2FEC               	goto	l86
 16414                           
 16415                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16416  17DA  15AE               	bsf	_Buz1^(0+128),3
 16417                           
 16418                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16419  17DB  0020               	movlb	0	; select bank0
 16420  17DC  082C               	movf	setBuz@count,w
 16421  17DD  00AB               	movwf	??_setBuz
 16422  17DE  082B               	movf	??_setBuz,w
 16423  17DF  0021               	movlb	1	; select bank1
 16424  17E0  00B2               	movwf	(_Buz1^(0+128)+4)
 16425                           
 16426                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16427  17E1  0020               	movlb	0	; select bank0
 16428  17E2  082A               	movf	setBuz@time+1,w
 16429  17E3  0021               	movlb	1	; select bank1
 16430  17E4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16431  17E5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16432  17E6  0020               	movlb	0	; select bank0
 16433  17E7  0829               	movf	setBuz@time,w
 16434  17E8  0021               	movlb	1	; select bank1
 16435  17E9  01B6               	clrf	(_Buz1^(0+128)+8)
 16436  17EA  07B6               	addwf	(_Buz1^(0+128)+8),f
 16437                           
 16438                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16439  17EB  0008               	return
 16440  17EC                     l86:	
 16441  17EC  1A2E               	btfsc	_Buz1^(0+128),4
 16442  17ED  0008               	return
 16443                           
 16444                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16445  17EE  162E               	bsf	_Buz1^(0+128),4
 16446                           
 16447                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16448  17EF  0020               	movlb	0	; select bank0
 16449  17F0  082C               	movf	setBuz@count,w
 16450  17F1  00AB               	movwf	??_setBuz
 16451  17F2  082B               	movf	??_setBuz,w
 16452  17F3  0021               	movlb	1	; select bank1
 16453  17F4  00B3               	movwf	(_Buz1^(0+128)+5)
 16454                           
 16455                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16456  17F5  0020               	movlb	0	; select bank0
 16457  17F6  082A               	movf	setBuz@time+1,w
 16458  17F7  0021               	movlb	1	; select bank1
 16459  17F8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16460  17F9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16461  17FA  0020               	movlb	0	; select bank0
 16462  17FB  0829               	movf	setBuz@time,w
 16463  17FC  0021               	movlb	1	; select bank1
 16464  17FD  01B8               	clrf	(_Buz1^(0+128)+10)
 16465  17FE  07B8               	addwf	(_Buz1^(0+128)+10),f
 16466  17FF  0008               	return
 16467  1800                     __end_of_setBuz:	
 16468                           
 16469                           	psect	text108
 16470  16FB                     __ptext108:	
 16471 ;; *************** function ___awdiv *****************
 16472 ;; Defined at:
 16473 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;  divisor         2    0[BANK0 ] int 
 16476 ;;  dividend        2    2[BANK0 ] int 
 16477 ;; Auto vars:     Size  Location     Type
 16478 ;;  quotient        2    7[BANK0 ] int 
 16479 ;;  sign            1    6[BANK0 ] unsigned char 
 16480 ;;  counter         1    5[BANK0 ] unsigned char 
 16481 ;; Return value:  Size  Location     Type
 16482 ;;                  2    0[BANK0 ] int 
 16483 ;; Registers used:
 16484 ;;		wreg, status,2, status,0
 16485 ;; Tracked objects:
 16486 ;;		On entry : 0/0
 16487 ;;		On exit  : 0/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;Total ram usage:        9 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; Hardware stack levels required when called:    5
 16497 ;; This function calls:
 16498 ;;		Nothing
 16499 ;; This function is called by:
 16500 ;;		_setBuz
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function ___awdiv
 16506  16FB                     ___awdiv:	
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16510  16FB  0020               	movlb	0	; select bank0
 16511  16FC  01A6               	clrf	___awdiv@sign
 16512  16FD  1FA1               	btfss	___awdiv@divisor+1,7
 16513  16FE  2F06               	goto	l8250
 16514  16FF  09A0               	comf	___awdiv@divisor,f
 16515  1700  09A1               	comf	___awdiv@divisor+1,f
 16516  1701  0AA0               	incf	___awdiv@divisor,f
 16517  1702  1903               	skipnz
 16518  1703  0AA1               	incf	___awdiv@divisor+1,f
 16519  1704  01A6               	clrf	___awdiv@sign
 16520  1705  0AA6               	incf	___awdiv@sign,f
 16521  1706                     l8250:	
 16522  1706  1FA3               	btfss	___awdiv@dividend+1,7
 16523  1707  2F11               	goto	l8256
 16524  1708  09A2               	comf	___awdiv@dividend,f
 16525  1709  09A3               	comf	___awdiv@dividend+1,f
 16526  170A  0AA2               	incf	___awdiv@dividend,f
 16527  170B  1903               	skipnz
 16528  170C  0AA3               	incf	___awdiv@dividend+1,f
 16529  170D  3001               	movlw	1
 16530  170E  00A4               	movwf	??___awdiv
 16531  170F  0824               	movf	??___awdiv,w
 16532  1710  06A6               	xorwf	___awdiv@sign,f
 16533  1711                     l8256:	
 16534  1711  01A7               	clrf	___awdiv@quotient
 16535  1712  01A8               	clrf	___awdiv@quotient+1
 16536  1713  0821               	movf	___awdiv@divisor+1,w
 16537  1714  0420               	iorwf	___awdiv@divisor,w
 16538  1715  1903               	skipnz
 16539  1716  2F40               	goto	l8278
 16540  1717  01A5               	clrf	___awdiv@counter
 16541  1718  0AA5               	incf	___awdiv@counter,f
 16542  1719                     l8266:	
 16543  1719  1BA1               	btfsc	___awdiv@divisor+1,7
 16544  171A  2F25               	goto	l8268
 16545  171B  3001               	movlw	1
 16546  171C                     u8765:	
 16547  171C  35A0               	lslf	___awdiv@divisor,f
 16548  171D  0DA1               	rlf	___awdiv@divisor+1,f
 16549  171E  0B89               	decfsz	9,f
 16550  171F  2F1C               	goto	u8765
 16551  1720  3001               	movlw	1
 16552  1721  00A4               	movwf	??___awdiv
 16553  1722  0824               	movf	??___awdiv,w
 16554  1723  07A5               	addwf	___awdiv@counter,f
 16555  1724  2F19               	goto	l8266
 16556  1725                     l8268:	
 16557  1725  3001               	movlw	1
 16558  1726                     u8785:	
 16559  1726  35A7               	lslf	___awdiv@quotient,f
 16560  1727  0DA8               	rlf	___awdiv@quotient+1,f
 16561  1728  0B89               	decfsz	9,f
 16562  1729  2F26               	goto	u8785
 16563  172A  0821               	movf	___awdiv@divisor+1,w
 16564  172B  0223               	subwf	___awdiv@dividend+1,w
 16565  172C  1D03               	skipz
 16566  172D  2F30               	goto	u8795
 16567  172E  0820               	movf	___awdiv@divisor,w
 16568  172F  0222               	subwf	___awdiv@dividend,w
 16569  1730                     u8795:	
 16570  1730  1C03               	skipc
 16571  1731  2F37               	goto	l8274
 16572  1732  0820               	movf	___awdiv@divisor,w
 16573  1733  02A2               	subwf	___awdiv@dividend,f
 16574  1734  0821               	movf	___awdiv@divisor+1,w
 16575  1735  3BA3               	subwfb	___awdiv@dividend+1,f
 16576  1736  1427               	bsf	___awdiv@quotient,0
 16577  1737                     l8274:	
 16578  1737  3001               	movlw	1
 16579  1738                     u8805:	
 16580  1738  36A1               	lsrf	___awdiv@divisor+1,f
 16581  1739  0CA0               	rrf	___awdiv@divisor,f
 16582  173A  0B89               	decfsz	9,f
 16583  173B  2F38               	goto	u8805
 16584  173C  3001               	movlw	1
 16585  173D  02A5               	subwf	___awdiv@counter,f
 16586  173E  1D03               	btfss	3,2
 16587  173F  2F25               	goto	l8268
 16588  1740                     l8278:	
 16589  1740  0826               	movf	___awdiv@sign,w
 16590  1741  1903               	btfsc	3,2
 16591  1742  2F48               	goto	l8282
 16592  1743  09A7               	comf	___awdiv@quotient,f
 16593  1744  09A8               	comf	___awdiv@quotient+1,f
 16594  1745  0AA7               	incf	___awdiv@quotient,f
 16595  1746  1903               	skipnz
 16596  1747  0AA8               	incf	___awdiv@quotient+1,f
 16597  1748                     l8282:	
 16598  1748  0828               	movf	___awdiv@quotient+1,w
 16599  1749  01A1               	clrf	?___awdiv+1
 16600  174A  07A1               	addwf	?___awdiv+1,f
 16601  174B  0827               	movf	___awdiv@quotient,w
 16602  174C  01A0               	clrf	?___awdiv
 16603  174D  07A0               	addwf	?___awdiv,f
 16604  174E  0008               	return
 16605  174F                     __end_of___awdiv:	
 16606                           
 16607                           	psect	text109
 16608  1C3F                     __ptext109:	
 16609 ;; *************** function _DelayOff_Initialization *****************
 16610 ;; Defined at:
 16611 ;;		line 26 in file "../src/DelayOff_B1.c"
 16612 ;; Parameters:    Size  Location     Type
 16613 ;;		None
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;		None
 16616 ;; Return value:  Size  Location     Type
 16617 ;;		None               void
 16618 ;; Registers used:
 16619 ;;		wreg, status,2, status,0, pclath, cstack
 16620 ;; Tracked objects:
 16621 ;;		On entry : 0/0
 16622 ;;		On exit  : 0/0
 16623 ;;		Unchanged: 0/0
 16624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16629 ;;Total ram usage:        0 bytes
 16630 ;; Hardware stack levels used:    1
 16631 ;; Hardware stack levels required when called:    7
 16632 ;; This function calls:
 16633 ;;		_DlyOff_Initialization
 16634 ;; This function is called by:
 16635 ;;		_main
 16636 ;; This function uses a non-reentrant model
 16637 ;;
 16638                           
 16639                           
 16640                           ;psect for function _DelayOff_Initialization
 16641  1C3F                     _DelayOff_Initialization:	
 16642                           
 16643                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16644                           
 16645                           ;incstack = 0
 16646                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16647  1C3F  3001               	movlw	1
 16648  1C40  319C  2454         	fcall	_DlyOff_Initialization
 16649  1C42  0008               	return
 16650  1C43                     __end_of_DelayOff_Initialization:	
 16651                           
 16652                           	psect	text110
 16653  1C54                     __ptext110:	
 16654 ;; *************** function _DlyOff_Initialization *****************
 16655 ;; Defined at:
 16656 ;;		line 56 in file "../src/DelayOff_B1.c"
 16657 ;; Parameters:    Size  Location     Type
 16658 ;;  sw              1    wreg     unsigned char 
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;  sw              1    2[BANK0 ] unsigned char 
 16661 ;; Return value:  Size  Location     Type
 16662 ;;		None               void
 16663 ;; Registers used:
 16664 ;;		wreg, status,2, status,0, pclath, cstack
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;Total ram usage:        1 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    6
 16677 ;; This function calls:
 16678 ;;		_DelayOffPointSelect
 16679 ;; This function is called by:
 16680 ;;		_DelayOff_Initialization
 16681 ;; This function uses a non-reentrant model
 16682 ;;
 16683                           
 16684                           
 16685                           ;psect for function _DlyOff_Initialization
 16686  1C54                     _DlyOff_Initialization:	
 16687                           
 16688                           ;incstack = 0
 16689                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16690                           ;DlyOff_Initialization@sw stored from wreg
 16691  1C54  0020               	movlb	0	; select bank0
 16692  1C55  00A2               	movwf	DlyOff_Initialization@sw
 16693                           
 16694                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16695  1C56  0822               	movf	DlyOff_Initialization@sw,w
 16696  1C57  319C  24C9         	fcall	_DelayOffPointSelect
 16697  1C59  0008               	return
 16698  1C5A                     __end_of_DlyOff_Initialization:	
 16699                           
 16700                           	psect	text111
 16701  1CC9                     __ptext111:	
 16702 ;; *************** function _DelayOffPointSelect *****************
 16703 ;; Defined at:
 16704 ;;		line 7 in file "../src/DelayOff_B1.c"
 16705 ;; Parameters:    Size  Location     Type
 16706 ;;  sw              1    wreg     unsigned char 
 16707 ;; Auto vars:     Size  Location     Type
 16708 ;;  sw              1    1[BANK0 ] unsigned char 
 16709 ;; Return value:  Size  Location     Type
 16710 ;;		None               void
 16711 ;; Registers used:
 16712 ;;		wreg
 16713 ;; Tracked objects:
 16714 ;;		On entry : 0/0
 16715 ;;		On exit  : 0/0
 16716 ;;		Unchanged: 0/0
 16717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16722 ;;Total ram usage:        2 bytes
 16723 ;; Hardware stack levels used:    1
 16724 ;; Hardware stack levels required when called:    5
 16725 ;; This function calls:
 16726 ;;		Nothing
 16727 ;; This function is called by:
 16728 ;;		_DlyOff_Initialization
 16729 ;;		_DlyOff_Main
 16730 ;;		_setDelayOff_GO
 16731 ;;		_getDelayOff_GO
 16732 ;; This function uses a non-reentrant model
 16733 ;;
 16734                           
 16735                           
 16736                           ;psect for function _DelayOffPointSelect
 16737  1CC9                     _DelayOffPointSelect:	
 16738                           
 16739                           ;incstack = 0
 16740                           ; Regs used in _DelayOffPointSelect: [wreg]
 16741                           ;DelayOffPointSelect@sw stored from wreg
 16742  1CC9  0020               	movlb	0	; select bank0
 16743  1CCA  00A1               	movwf	DelayOffPointSelect@sw
 16744                           
 16745                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16746  1CCB  0821               	movf	DelayOffPointSelect@sw,w
 16747  1CCC  3A01               	xorlw	1
 16748  1CCD  1D03               	skipz
 16749  1CCE  0008               	return
 16750                           
 16751                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16752  1CCF  3064               	movlw	_DlySw1& (0+255)
 16753  1CD0  00A0               	movwf	??_DelayOffPointSelect
 16754  1CD1  0820               	movf	??_DelayOffPointSelect,w
 16755  1CD2  00F5               	movwf	_DelayOff
 16756  1CD3  0008               	return
 16757  1CD4                     __end_of_DelayOffPointSelect:	
 16758                           
 16759                           	psect	text112
 16760  1EA7                     __ptext112:	
 16761 ;; *************** function _CC2500_PowerOnInitial *****************
 16762 ;; Defined at:
 16763 ;;		line 119 in file "../src/CC2500_B1.c"
 16764 ;; Parameters:    Size  Location     Type
 16765 ;;		None
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;		None
 16768 ;; Return value:  Size  Location     Type
 16769 ;;		None               void
 16770 ;; Registers used:
 16771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;Total ram usage:        0 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    8
 16784 ;; This function calls:
 16785 ;;		_CC2500_ClearRXFIFO
 16786 ;;		_CC2500_ClearTXFIFO
 16787 ;;		_CC2500_FrequencyCabr
 16788 ;;		_CC2500_InitPATable
 16789 ;;		_CC2500_InitSetREG
 16790 ;;		_CC2500_PowerRST
 16791 ;;		_CC2500_SIDLEMode
 16792 ;; This function is called by:
 16793 ;;		_main
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           
 16798                           ;psect for function _CC2500_PowerOnInitial
 16799  1EA7                     _CC2500_PowerOnInitial:	
 16800                           
 16801                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16802                           
 16803                           ;incstack = 0
 16804                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16805  1EA7  3187  27B8  319E   	fcall	_CC2500_PowerRST
 16806                           
 16807                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16808  1EAA  3191  2162  319E   	fcall	_CC2500_InitSetREG
 16809                           
 16810                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16811  1EAD  319F  27C1  319E   	fcall	_CC2500_InitPATable
 16812                           
 16813                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16814  1EB0  319C  2437  319E   	fcall	_CC2500_ClearTXFIFO
 16815                           
 16816                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16817  1EB3  319C  2433  319E   	fcall	_CC2500_ClearRXFIFO
 16818                           
 16819                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16820  1EB6  319D  250B  319E   	fcall	_CC2500_FrequencyCabr
 16821                           
 16822                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16823  1EB9  319C  243B         	fcall	_CC2500_SIDLEMode
 16824  1EBB  0008               	return
 16825  1EBC                     __end_of_CC2500_PowerOnInitial:	
 16826                           
 16827                           	psect	text113
 16828  1C3B                     __ptext113:	
 16829 ;; *************** function _CC2500_SIDLEMode *****************
 16830 ;; Defined at:
 16831 ;;		line 209 in file "../src/CC2500_B1.c"
 16832 ;; Parameters:    Size  Location     Type
 16833 ;;		None
 16834 ;; Auto vars:     Size  Location     Type
 16835 ;;		None
 16836 ;; Return value:  Size  Location     Type
 16837 ;;		None               void
 16838 ;; Registers used:
 16839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16840 ;; Tracked objects:
 16841 ;;		On entry : 0/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;Total ram usage:        0 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:    7
 16852 ;; This function calls:
 16853 ;;		_CC2500_WriteCommand
 16854 ;; This function is called by:
 16855 ;;		_CC2500_PowerOnInitial
 16856 ;; This function uses a non-reentrant model
 16857 ;;
 16858                           
 16859                           
 16860                           ;psect for function _CC2500_SIDLEMode
 16861  1C3B                     _CC2500_SIDLEMode:	
 16862                           
 16863                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16864                           
 16865                           ;incstack = 0
 16866                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16867  1C3B  3036               	movlw	54
 16868  1C3C  319F  2700         	fcall	_CC2500_WriteCommand
 16869  1C3E  0008               	return
 16870  1C3F                     __end_of_CC2500_SIDLEMode:	
 16871                           
 16872                           	psect	text114
 16873  07B8                     __ptext114:	
 16874 ;; *************** function _CC2500_PowerRST *****************
 16875 ;; Defined at:
 16876 ;;		line 132 in file "../src/CC2500_B1.c"
 16877 ;; Parameters:    Size  Location     Type
 16878 ;;		None
 16879 ;; Auto vars:     Size  Location     Type
 16880 ;;		None
 16881 ;; Return value:  Size  Location     Type
 16882 ;;		None               void
 16883 ;; Registers used:
 16884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16885 ;; Tracked objects:
 16886 ;;		On entry : 0/0
 16887 ;;		On exit  : 0/0
 16888 ;;		Unchanged: 0/0
 16889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;Total ram usage:        1 bytes
 16895 ;; Hardware stack levels used:    1
 16896 ;; Hardware stack levels required when called:    6
 16897 ;; This function calls:
 16898 ;;		_CC2500_WriteByte
 16899 ;;		_DelayTime_1us
 16900 ;;		_Timeout_Counter
 16901 ;;		_set_TimeoutCleared
 16902 ;; This function is called by:
 16903 ;;		_CC2500_PowerOnInitial
 16904 ;; This function uses a non-reentrant model
 16905 ;;
 16906                           
 16907                           
 16908                           ;psect for function _CC2500_PowerRST
 16909  07B8                     _CC2500_PowerRST:	
 16910                           
 16911                           ;CC2500_B1.c: 133: RC3 = 0;
 16912                           
 16913                           ;incstack = 0
 16914                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16915  07B8  0020               	movlb	0	; select bank0
 16916  07B9  118E               	bcf	14,3	;volatile
 16917                           
 16918                           ;CC2500_B1.c: 134: RC4 = 0;
 16919  07BA  120E               	bcf	14,4	;volatile
 16920                           
 16921                           ;CC2500_B1.c: 135: RC0 = 1;
 16922  07BB  140E               	bsf	14,0	;volatile
 16923                           
 16924                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16925  07BC  300A               	movlw	10
 16926  07BD  00A0               	movwf	DelayTime_1us@count
 16927  07BE  3000               	movlw	0
 16928  07BF  00A1               	movwf	DelayTime_1us@count+1
 16929  07C0  3191  213C  3187   	fcall	_DelayTime_1us
 16930                           
 16931                           ;CC2500_B1.c: 137: RC0 = 0;
 16932  07C3  0020               	movlb	0	; select bank0
 16933  07C4  100E               	bcf	14,0	;volatile
 16934                           
 16935                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16936  07C5  300A               	movlw	10
 16937  07C6  00A0               	movwf	DelayTime_1us@count
 16938  07C7  3000               	movlw	0
 16939  07C8  00A1               	movwf	DelayTime_1us@count+1
 16940  07C9  3191  213C  3187   	fcall	_DelayTime_1us
 16941                           
 16942                           ;CC2500_B1.c: 139: RC0 = 1;
 16943  07CC  0020               	movlb	0	; select bank0
 16944  07CD  140E               	bsf	14,0	;volatile
 16945                           
 16946                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16947  07CE  3028               	movlw	40
 16948  07CF  00A0               	movwf	DelayTime_1us@count
 16949  07D0  3000               	movlw	0
 16950  07D1  00A1               	movwf	DelayTime_1us@count+1
 16951  07D2  3191  213C  3187   	fcall	_DelayTime_1us
 16952                           
 16953                           ;CC2500_B1.c: 141: RC0 = 0;
 16954  07D5  0020               	movlb	0	; select bank0
 16955  07D6  100E               	bcf	14,0	;volatile
 16956                           
 16957                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16958  07D7  3030               	movlw	48
 16959  07D8  00A6               	movwf	??_CC2500_PowerRST
 16960  07D9  0826               	movf	??_CC2500_PowerRST,w
 16961  07DA  0021               	movlb	1	; select bank1
 16962  07DB  00D1               	movwf	_SPI0Buffer^(0+128)
 16963                           
 16964                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16965  07DC  2FE0               	goto	l9124
 16966  07DD                     l9122:	
 16967                           
 16968                           ;CC2500_B1.c: 144: Timeout_Counter();
 16969  07DD  319E  2692  3187   	fcall	_Timeout_Counter
 16970  07E0                     l9124:	
 16971  07E0  0020               	movlb	0	; select bank0
 16972  07E1  1E8E               	btfss	14,5	;volatile
 16973  07E2  2FE6               	goto	l9128
 16974  07E3  0021               	movlb	1	; select bank1
 16975  07E4  1D2B               	btfss	(_myMain^(0+128)+11),2
 16976  07E5  2FDD               	goto	l9122
 16977  07E6                     l9128:	
 16978                           
 16979                           ;CC2500_B1.c: 145: };
 16980                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16981  07E6  319C  244F  3187   	fcall	_set_TimeoutCleared
 16982                           
 16983                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 16984  07E9  319E  26E7  3187   	fcall	_CC2500_WriteByte
 16985                           
 16986                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 16987  07EC  2FF0               	goto	l9134
 16988  07ED                     l9132:	
 16989                           
 16990                           ;CC2500_B1.c: 149: Timeout_Counter();
 16991  07ED  319E  2692  3187   	fcall	_Timeout_Counter
 16992  07F0                     l9134:	
 16993  07F0  0020               	movlb	0	; select bank0
 16994  07F1  1E8E               	btfss	14,5	;volatile
 16995  07F2  2FF6               	goto	l9138
 16996  07F3  0021               	movlb	1	; select bank1
 16997  07F4  1D2B               	btfss	(_myMain^(0+128)+11),2
 16998  07F5  2FED               	goto	l9132
 16999  07F6                     l9138:	
 17000                           
 17001                           ;CC2500_B1.c: 150: };
 17002                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17003  07F6  319C  244F         	fcall	_set_TimeoutCleared
 17004                           
 17005                           ;CC2500_B1.c: 152: RC4 = 0;
 17006  07F8  0020               	movlb	0	; select bank0
 17007  07F9  120E               	bcf	14,4	;volatile
 17008                           
 17009                           ;CC2500_B1.c: 153: RC0 = 1;
 17010  07FA  140E               	bsf	14,0	;volatile
 17011  07FB  0008               	return
 17012  07FC                     __end_of_CC2500_PowerRST:	
 17013                           
 17014                           	psect	text115
 17015  1162                     __ptext115:	
 17016 ;; *************** function _CC2500_InitSetREG *****************
 17017 ;; Defined at:
 17018 ;;		line 159 in file "../src/CC2500_B1.c"
 17019 ;; Parameters:    Size  Location     Type
 17020 ;;		None
 17021 ;; Auto vars:     Size  Location     Type
 17022 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17023 ;;  temp2           1    7[BANK0 ] unsigned char 
 17024 ;;  temp1           1    6[BANK0 ] unsigned char 
 17025 ;; Return value:  Size  Location     Type
 17026 ;;		None               void
 17027 ;; Registers used:
 17028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17029 ;; Tracked objects:
 17030 ;;		On entry : 0/0
 17031 ;;		On exit  : 0/0
 17032 ;;		Unchanged: 0/0
 17033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17035 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;Total ram usage:        4 bytes
 17039 ;; Hardware stack levels used:    1
 17040 ;; Hardware stack levels required when called:    7
 17041 ;; This function calls:
 17042 ;;		_CC2500_WriteREG
 17043 ;; This function is called by:
 17044 ;;		_CC2500_PowerOnInitial
 17045 ;; This function uses a non-reentrant model
 17046 ;;
 17047                           
 17048                           
 17049                           ;psect for function _CC2500_InitSetREG
 17050  1162                     _CC2500_InitSetREG:	
 17051                           
 17052                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17053                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17054                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17055                           
 17056                           ;incstack = 0
 17057                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17058  1162  0020               	movlb	0	; select bank0
 17059  1163  01A8               	clrf	CC2500_InitSetREG@loop_c
 17060  1164                     L7:	
 17061  1164  302F               	movlw	47
 17062  1165  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17063  1166  1803               	btfsc	3,0
 17064  1167  0008               	return
 17065                           
 17066                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17067  1168  0828               	movf	CC2500_InitSetREG@loop_c,w
 17068  1169  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17069  116A  0084               	movwf	4
 17070  116B  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17071  116C  1803               	skipnc
 17072  116D  3E01               	addlw	1
 17073  116E  0085               	movwf	5
 17074  116F  0800               	movf	0,w	;code access
 17075  1170  00A5               	movwf	??_CC2500_InitSetREG
 17076  1171  0825               	movf	??_CC2500_InitSetREG,w
 17077  1172  00A6               	movwf	CC2500_InitSetREG@temp1
 17078                           
 17079                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17080  1173  0828               	movf	CC2500_InitSetREG@loop_c,w
 17081  1174  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17082  1175  0084               	movwf	4
 17083  1176  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17084  1177  1803               	skipnc
 17085  1178  3E01               	addlw	1
 17086  1179  0085               	movwf	5
 17087  117A  0800               	movf	0,w	;code access
 17088  117B  00A5               	movwf	??_CC2500_InitSetREG
 17089  117C  0825               	movf	??_CC2500_InitSetREG,w
 17090  117D  00A7               	movwf	CC2500_InitSetREG@temp2
 17091                           
 17092                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17093  117E  0827               	movf	CC2500_InitSetREG@temp2,w
 17094  117F  00A5               	movwf	??_CC2500_InitSetREG
 17095  1180  0825               	movf	??_CC2500_InitSetREG,w
 17096  1181  00A2               	movwf	CC2500_WriteREG@value
 17097  1182  0826               	movf	CC2500_InitSetREG@temp1,w
 17098  1183  3190  20AB  3191   	fcall	_CC2500_WriteREG
 17099  1186  3001               	movlw	1
 17100  1187  0020               	movlb	0	; select bank0
 17101  1188  00A5               	movwf	??_CC2500_InitSetREG
 17102  1189  0825               	movf	??_CC2500_InitSetREG,w
 17103  118A  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17104  118B  2964               	goto	L7
 17105  118C                     __end_of_CC2500_InitSetREG:	
 17106                           
 17107                           	psect	text116
 17108  1FC1                     __ptext116:	
 17109 ;; *************** function _CC2500_InitPATable *****************
 17110 ;; Defined at:
 17111 ;;		line 174 in file "../src/CC2500_B1.c"
 17112 ;; Parameters:    Size  Location     Type
 17113 ;;		None
 17114 ;; Auto vars:     Size  Location     Type
 17115 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17116 ;;  temp            1    6[BANK0 ] unsigned char 
 17117 ;; Return value:  Size  Location     Type
 17118 ;;		None               void
 17119 ;; Registers used:
 17120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17121 ;; Tracked objects:
 17122 ;;		On entry : 0/0
 17123 ;;		On exit  : 0/0
 17124 ;;		Unchanged: 0/0
 17125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17127 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17129 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17130 ;;Total ram usage:        3 bytes
 17131 ;; Hardware stack levels used:    1
 17132 ;; Hardware stack levels required when called:    7
 17133 ;; This function calls:
 17134 ;;		_CC2500_WriteREG
 17135 ;; This function is called by:
 17136 ;;		_CC2500_PowerOnInitial
 17137 ;; This function uses a non-reentrant model
 17138 ;;
 17139                           
 17140                           
 17141                           ;psect for function _CC2500_InitPATable
 17142  1FC1                     _CC2500_InitPATable:	
 17143                           
 17144                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17145                           ;CC2500_B1.c: 176: unsigned char temp;
 17146                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17147                           
 17148                           ;incstack = 0
 17149                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17150  1FC1  0020               	movlb	0	; select bank0
 17151  1FC2  01A7               	clrf	CC2500_InitPATable@loop_d
 17152  1FC3                     L8:	
 17153  1FC3  3008               	movlw	8
 17154  1FC4  0227               	subwf	CC2500_InitPATable@loop_d,w
 17155  1FC5  1803               	btfsc	3,0
 17156  1FC6  0008               	return
 17157                           
 17158                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17159  1FC7  0827               	movf	CC2500_InitPATable@loop_d,w
 17160  1FC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17161  1FC9  0084               	movwf	4
 17162  1FCA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17163  1FCB  1803               	skipnc
 17164  1FCC  3E01               	addlw	1
 17165  1FCD  0085               	movwf	5
 17166  1FCE  0800               	movf	0,w	;code access
 17167  1FCF  00A5               	movwf	??_CC2500_InitPATable
 17168  1FD0  0825               	movf	??_CC2500_InitPATable,w
 17169  1FD1  00A6               	movwf	CC2500_InitPATable@temp
 17170                           
 17171                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17172  1FD2  0826               	movf	CC2500_InitPATable@temp,w
 17173  1FD3  00A5               	movwf	??_CC2500_InitPATable
 17174  1FD4  0825               	movf	??_CC2500_InitPATable,w
 17175  1FD5  00A2               	movwf	CC2500_WriteREG@value
 17176  1FD6  303E               	movlw	62
 17177  1FD7  3190  20AB  319F   	fcall	_CC2500_WriteREG
 17178  1FDA  3001               	movlw	1
 17179  1FDB  0020               	movlb	0	; select bank0
 17180  1FDC  00A5               	movwf	??_CC2500_InitPATable
 17181  1FDD  0825               	movf	??_CC2500_InitPATable,w
 17182  1FDE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17183  1FDF  2FC3               	goto	L8
 17184  1FE0                     __end_of_CC2500_InitPATable:	
 17185                           
 17186                           	psect	text117
 17187  10AB                     __ptext117:	
 17188 ;; *************** function _CC2500_WriteREG *****************
 17189 ;; Defined at:
 17190 ;;		line 251 in file "../src/CC2500_B1.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;  w_addr          1    wreg     unsigned char 
 17193 ;;  value           1    2[BANK0 ] unsigned char 
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17196 ;; Return value:  Size  Location     Type
 17197 ;;		None               void
 17198 ;; Registers used:
 17199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17205 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;Total ram usage:        3 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:    6
 17212 ;; This function calls:
 17213 ;;		_CC2500_WriteByte
 17214 ;;		_Timeout_Counter
 17215 ;;		_set_TimeoutCleared
 17216 ;; This function is called by:
 17217 ;;		_CC2500_InitSetREG
 17218 ;;		_CC2500_InitPATable
 17219 ;; This function uses a non-reentrant model
 17220 ;;
 17221                           
 17222                           
 17223                           ;psect for function _CC2500_WriteREG
 17224  10AB                     _CC2500_WriteREG:	
 17225                           
 17226                           ;incstack = 0
 17227                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17228                           ;CC2500_WriteREG@w_addr stored from wreg
 17229  10AB  0020               	movlb	0	; select bank0
 17230  10AC  00A4               	movwf	CC2500_WriteREG@w_addr
 17231                           
 17232                           ;CC2500_B1.c: 252: RC0 = 0;
 17233  10AD  100E               	bcf	14,0	;volatile
 17234                           
 17235                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17236  10AE  0824               	movf	CC2500_WriteREG@w_addr,w
 17237  10AF  00A3               	movwf	??_CC2500_WriteREG
 17238  10B0  0823               	movf	??_CC2500_WriteREG,w
 17239  10B1  0021               	movlb	1	; select bank1
 17240  10B2  00D1               	movwf	_SPI0Buffer^(0+128)
 17241                           
 17242                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17243  10B3  28B7               	goto	l8864
 17244  10B4                     l8862:	
 17245                           
 17246                           ;CC2500_B1.c: 255: Timeout_Counter();
 17247  10B4  319E  2692  3190   	fcall	_Timeout_Counter
 17248  10B7                     l8864:	
 17249  10B7  0020               	movlb	0	; select bank0
 17250  10B8  1E8E               	btfss	14,5	;volatile
 17251  10B9  28BD               	goto	l8868
 17252  10BA  0021               	movlb	1	; select bank1
 17253  10BB  1D2B               	btfss	(_myMain^(0+128)+11),2
 17254  10BC  28B4               	goto	l8862
 17255  10BD                     l8868:	
 17256                           
 17257                           ;CC2500_B1.c: 256: };
 17258                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17259  10BD  319C  244F  3190   	fcall	_set_TimeoutCleared
 17260                           
 17261                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17262  10C0  319E  26E7  3190   	fcall	_CC2500_WriteByte
 17263                           
 17264                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17265  10C3  0020               	movlb	0	; select bank0
 17266  10C4  0822               	movf	CC2500_WriteREG@value,w
 17267  10C5  00A3               	movwf	??_CC2500_WriteREG
 17268  10C6  0823               	movf	??_CC2500_WriteREG,w
 17269  10C7  0021               	movlb	1	; select bank1
 17270  10C8  00D1               	movwf	_SPI0Buffer^(0+128)
 17271                           
 17272                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17273  10C9  319E  26E7         	fcall	_CC2500_WriteByte
 17274                           
 17275                           ;CC2500_B1.c: 262: RC0 = 1;
 17276  10CB  0020               	movlb	0	; select bank0
 17277  10CC  140E               	bsf	14,0	;volatile
 17278  10CD  0008               	return
 17279  10CE                     __end_of_CC2500_WriteREG:	
 17280                           
 17281                           	psect	text118
 17282  1D0B                     __ptext118:	
 17283 ;; *************** function _CC2500_FrequencyCabr *****************
 17284 ;; Defined at:
 17285 ;;		line 201 in file "../src/CC2500_B1.c"
 17286 ;; Parameters:    Size  Location     Type
 17287 ;;		None
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;		None
 17290 ;; Return value:  Size  Location     Type
 17291 ;;		None               void
 17292 ;; Registers used:
 17293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17294 ;; Tracked objects:
 17295 ;;		On entry : 0/0
 17296 ;;		On exit  : 0/0
 17297 ;;		Unchanged: 0/0
 17298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17303 ;;Total ram usage:        0 bytes
 17304 ;; Hardware stack levels used:    1
 17305 ;; Hardware stack levels required when called:    7
 17306 ;; This function calls:
 17307 ;;		_CC2500_WriteCommand
 17308 ;;		_DelayTime_1us
 17309 ;; This function is called by:
 17310 ;;		_CC2500_PowerOnInitial
 17311 ;; This function uses a non-reentrant model
 17312 ;;
 17313                           
 17314                           
 17315                           ;psect for function _CC2500_FrequencyCabr
 17316  1D0B                     _CC2500_FrequencyCabr:	
 17317                           
 17318                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17319                           
 17320                           ;incstack = 0
 17321                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17322  1D0B  3033               	movlw	51
 17323  1D0C  319F  2700  319D   	fcall	_CC2500_WriteCommand
 17324                           
 17325                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17326  1D0F  30E8               	movlw	232
 17327  1D10  0020               	movlb	0	; select bank0
 17328  1D11  00A0               	movwf	DelayTime_1us@count
 17329  1D12  3003               	movlw	3
 17330  1D13  00A1               	movwf	DelayTime_1us@count+1
 17331  1D14  3191  213C         	fcall	_DelayTime_1us
 17332  1D16  0008               	return
 17333  1D17                     __end_of_CC2500_FrequencyCabr:	
 17334                           
 17335                           	psect	text119
 17336  113C                     __ptext119:	
 17337 ;; *************** function _DelayTime_1us *****************
 17338 ;; Defined at:
 17339 ;;		line 320 in file "../src/CC2500_B1.c"
 17340 ;; Parameters:    Size  Location     Type
 17341 ;;  count           2    0[BANK0 ] int 
 17342 ;; Auto vars:     Size  Location     Type
 17343 ;;  j               2    4[BANK0 ] unsigned int 
 17344 ;;  i               2    2[BANK0 ] unsigned int 
 17345 ;; Return value:  Size  Location     Type
 17346 ;;		None               void
 17347 ;; Registers used:
 17348 ;;		wreg, status,2
 17349 ;; Tracked objects:
 17350 ;;		On entry : 0/0
 17351 ;;		On exit  : 0/0
 17352 ;;		Unchanged: 0/0
 17353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17354 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;Total ram usage:        6 bytes
 17359 ;; Hardware stack levels used:    1
 17360 ;; Hardware stack levels required when called:    5
 17361 ;; This function calls:
 17362 ;;		Nothing
 17363 ;; This function is called by:
 17364 ;;		_CC2500_PowerRST
 17365 ;;		_CC2500_FrequencyCabr
 17366 ;; This function uses a non-reentrant model
 17367 ;;
 17368                           
 17369                           
 17370                           ;psect for function _DelayTime_1us
 17371  113C                     _DelayTime_1us:	
 17372                           
 17373                           ;CC2500_B1.c: 321: unsigned int i, j;
 17374                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17375                           
 17376                           ;incstack = 0
 17377                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17378  113C  3001               	movlw	1
 17379  113D  0020               	movlb	0	; select bank0
 17380  113E  00A2               	movwf	DelayTime_1us@i
 17381  113F  3000               	movlw	0
 17382  1140  00A3               	movwf	DelayTime_1us@i+1
 17383  1141                     l348:	
 17384  1141  0821               	movf	DelayTime_1us@count+1,w
 17385  1142  0223               	subwf	DelayTime_1us@i+1,w
 17386  1143  1D03               	skipz
 17387  1144  2947               	goto	u9575
 17388  1145  0820               	movf	DelayTime_1us@count,w
 17389  1146  0222               	subwf	DelayTime_1us@i,w
 17390  1147                     u9575:	
 17391  1147  1803               	btfsc	3,0
 17392  1148  0008               	return
 17393                           
 17394                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17395  1149  01A4               	clrf	DelayTime_1us@j
 17396  114A  01A5               	clrf	DelayTime_1us@j+1
 17397  114B  3000               	movlw	0
 17398  114C  0225               	subwf	DelayTime_1us@j+1,w
 17399  114D  3002               	movlw	2
 17400  114E  1903               	skipnz
 17401  114F  0224               	subwf	DelayTime_1us@j,w
 17402  1150  1803               	btfsc	3,0
 17403  1151  295D               	goto	l8856
 17404  1152                     l8854:	
 17405  1152  3001               	movlw	1
 17406  1153  07A4               	addwf	DelayTime_1us@j,f
 17407  1154  3000               	movlw	0
 17408  1155  3DA5               	addwfc	DelayTime_1us@j+1,f
 17409  1156  3000               	movlw	0
 17410  1157  0225               	subwf	DelayTime_1us@j+1,w
 17411  1158  3002               	movlw	2
 17412  1159  1903               	skipnz
 17413  115A  0224               	subwf	DelayTime_1us@j,w
 17414  115B  1C03               	skipc
 17415  115C  2952               	goto	l8854
 17416  115D                     l8856:	
 17417  115D  3001               	movlw	1
 17418  115E  07A2               	addwf	DelayTime_1us@i,f
 17419  115F  3000               	movlw	0
 17420  1160  3DA3               	addwfc	DelayTime_1us@i+1,f
 17421  1161  2941               	goto	l348
 17422  1162                     __end_of_DelayTime_1us:	
 17423                           
 17424                           	psect	text120
 17425  1C37                     __ptext120:	
 17426 ;; *************** function _CC2500_ClearTXFIFO *****************
 17427 ;; Defined at:
 17428 ;;		line 187 in file "../src/CC2500_B1.c"
 17429 ;; Parameters:    Size  Location     Type
 17430 ;;		None
 17431 ;; Auto vars:     Size  Location     Type
 17432 ;;		None
 17433 ;; Return value:  Size  Location     Type
 17434 ;;		None               void
 17435 ;; Registers used:
 17436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17437 ;; Tracked objects:
 17438 ;;		On entry : 0/0
 17439 ;;		On exit  : 0/0
 17440 ;;		Unchanged: 0/0
 17441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;Total ram usage:        0 bytes
 17447 ;; Hardware stack levels used:    1
 17448 ;; Hardware stack levels required when called:    7
 17449 ;; This function calls:
 17450 ;;		_CC2500_WriteCommand
 17451 ;; This function is called by:
 17452 ;;		_CC2500_PowerOnInitial
 17453 ;; This function uses a non-reentrant model
 17454 ;;
 17455                           
 17456                           
 17457                           ;psect for function _CC2500_ClearTXFIFO
 17458  1C37                     _CC2500_ClearTXFIFO:	
 17459                           
 17460                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17461                           
 17462                           ;incstack = 0
 17463                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17464  1C37  303B               	movlw	59
 17465  1C38  319F  2700         	fcall	_CC2500_WriteCommand
 17466  1C3A  0008               	return
 17467  1C3B                     __end_of_CC2500_ClearTXFIFO:	
 17468                           
 17469                           	psect	text121
 17470  1C33                     __ptext121:	
 17471 ;; *************** function _CC2500_ClearRXFIFO *****************
 17472 ;; Defined at:
 17473 ;;		line 194 in file "../src/CC2500_B1.c"
 17474 ;; Parameters:    Size  Location     Type
 17475 ;;		None
 17476 ;; Auto vars:     Size  Location     Type
 17477 ;;		None
 17478 ;; Return value:  Size  Location     Type
 17479 ;;		None               void
 17480 ;; Registers used:
 17481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17482 ;; Tracked objects:
 17483 ;;		On entry : 0/0
 17484 ;;		On exit  : 0/0
 17485 ;;		Unchanged: 0/0
 17486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17491 ;;Total ram usage:        0 bytes
 17492 ;; Hardware stack levels used:    1
 17493 ;; Hardware stack levels required when called:    7
 17494 ;; This function calls:
 17495 ;;		_CC2500_WriteCommand
 17496 ;; This function is called by:
 17497 ;;		_CC2500_PowerOnInitial
 17498 ;; This function uses a non-reentrant model
 17499 ;;
 17500                           
 17501                           
 17502                           ;psect for function _CC2500_ClearRXFIFO
 17503  1C33                     _CC2500_ClearRXFIFO:	
 17504                           
 17505                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17506                           
 17507                           ;incstack = 0
 17508                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17509  1C33  303A               	movlw	58
 17510  1C34  319F  2700         	fcall	_CC2500_WriteCommand
 17511  1C36  0008               	return
 17512  1C37                     __end_of_CC2500_ClearRXFIFO:	
 17513                           
 17514                           	psect	text122
 17515  1F00                     __ptext122:	
 17516 ;; *************** function _CC2500_WriteCommand *****************
 17517 ;; Defined at:
 17518 ;;		line 285 in file "../src/CC2500_B1.c"
 17519 ;; Parameters:    Size  Location     Type
 17520 ;;  command         1    wreg     unsigned char 
 17521 ;; Auto vars:     Size  Location     Type
 17522 ;;  command         1    3[BANK0 ] unsigned char 
 17523 ;; Return value:  Size  Location     Type
 17524 ;;		None               void
 17525 ;; Registers used:
 17526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17527 ;; Tracked objects:
 17528 ;;		On entry : 0/0
 17529 ;;		On exit  : 0/0
 17530 ;;		Unchanged: 0/0
 17531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;Total ram usage:        2 bytes
 17537 ;; Hardware stack levels used:    1
 17538 ;; Hardware stack levels required when called:    6
 17539 ;; This function calls:
 17540 ;;		_CC2500_WriteByte
 17541 ;;		_Timeout_Counter
 17542 ;;		_set_TimeoutCleared
 17543 ;; This function is called by:
 17544 ;;		_CC2500_TxData
 17545 ;;		_CC2500_ClearTXFIFO
 17546 ;;		_CC2500_ClearRXFIFO
 17547 ;;		_CC2500_FrequencyCabr
 17548 ;;		_CC2500_SIDLEMode
 17549 ;;		_setRF_Main
 17550 ;;		_RF_RxDisable
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554                           
 17555                           ;psect for function _CC2500_WriteCommand
 17556  1F00                     _CC2500_WriteCommand:	
 17557                           
 17558                           ;incstack = 0
 17559                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17560                           ;CC2500_WriteCommand@command stored from wreg
 17561  1F00  0020               	movlb	0	; select bank0
 17562  1F01  00A3               	movwf	CC2500_WriteCommand@command
 17563                           
 17564                           ;CC2500_B1.c: 286: RC0 = 0;
 17565  1F02  100E               	bcf	14,0	;volatile
 17566                           
 17567                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17568  1F03  0823               	movf	CC2500_WriteCommand@command,w
 17569  1F04  00A2               	movwf	??_CC2500_WriteCommand
 17570  1F05  0822               	movf	??_CC2500_WriteCommand,w
 17571  1F06  0021               	movlb	1	; select bank1
 17572  1F07  00D1               	movwf	_SPI0Buffer^(0+128)
 17573                           
 17574                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17575  1F08  2F0C               	goto	l8592
 17576  1F09                     l8590:	
 17577                           
 17578                           ;CC2500_B1.c: 290: Timeout_Counter();
 17579  1F09  319E  2692  319F   	fcall	_Timeout_Counter
 17580  1F0C                     l8592:	
 17581  1F0C  0020               	movlb	0	; select bank0
 17582  1F0D  1E8E               	btfss	14,5	;volatile
 17583  1F0E  2F12               	goto	l8596
 17584  1F0F  0021               	movlb	1	; select bank1
 17585  1F10  1D2B               	btfss	(_myMain^(0+128)+11),2
 17586  1F11  2F09               	goto	l8590
 17587  1F12                     l8596:	
 17588                           
 17589                           ;CC2500_B1.c: 291: };
 17590                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17591  1F12  319C  244F  319F   	fcall	_set_TimeoutCleared
 17592                           
 17593                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17594  1F15  319E  26E7         	fcall	_CC2500_WriteByte
 17595                           
 17596                           ;CC2500_B1.c: 295: RC0 = 1;
 17597  1F17  0020               	movlb	0	; select bank0
 17598  1F18  140E               	bsf	14,0	;volatile
 17599  1F19  0008               	return
 17600  1F1A                     __end_of_CC2500_WriteCommand:	
 17601                           
 17602                           	psect	text123
 17603  1C4F                     __ptext123:	
 17604 ;; *************** function _set_TimeoutCleared *****************
 17605 ;; Defined at:
 17606 ;;		line 283 in file "../src/Main_B1.c"
 17607 ;; Parameters:    Size  Location     Type
 17608 ;;		None
 17609 ;; Auto vars:     Size  Location     Type
 17610 ;;		None
 17611 ;; Return value:  Size  Location     Type
 17612 ;;		None               void
 17613 ;; Registers used:
 17614 ;;		status,2
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;Total ram usage:        0 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    5
 17627 ;; This function calls:
 17628 ;;		Nothing
 17629 ;; This function is called by:
 17630 ;;		_CC2500_TxData
 17631 ;;		_CC2500_RxData
 17632 ;;		_CC2500_PowerRST
 17633 ;;		_CC2500_WriteREG
 17634 ;;		_CC2500_WriteCommand
 17635 ;;		_CC2500_ReadStatus
 17636 ;;		_getAD
 17637 ;;		_TouchPower
 17638 ;;		_CC2500_ReadREG
 17639 ;; This function uses a non-reentrant model
 17640 ;;
 17641                           
 17642                           
 17643                           ;psect for function _set_TimeoutCleared
 17644  1C4F                     _set_TimeoutCleared:	
 17645                           
 17646                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17647                           
 17648                           ;incstack = 0
 17649                           ; Regs used in _set_TimeoutCleared: [status,2]
 17650  1C4F  0021               	movlb	1	; select bank1
 17651  1C50  112B               	bcf	(_myMain^(0+128)+11),2
 17652                           
 17653                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17654  1C51  01AC               	clrf	(_myMain^(0+128)+12)
 17655  1C52  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17656  1C53  0008               	return
 17657  1C54                     __end_of_set_TimeoutCleared:	
 17658                           
 17659                           	psect	text124
 17660  1E92                     __ptext124:	
 17661 ;; *************** function _Timeout_Counter *****************
 17662 ;; Defined at:
 17663 ;;		line 274 in file "../src/Main_B1.c"
 17664 ;; Parameters:    Size  Location     Type
 17665 ;;		None
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;		None
 17668 ;; Return value:  Size  Location     Type
 17669 ;;		None               void
 17670 ;; Registers used:
 17671 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17672 ;; Tracked objects:
 17673 ;;		On entry : 0/0
 17674 ;;		On exit  : 0/0
 17675 ;;		Unchanged: 0/0
 17676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;Total ram usage:        0 bytes
 17682 ;; Hardware stack levels used:    1
 17683 ;; Hardware stack levels required when called:    5
 17684 ;; This function calls:
 17685 ;;		Nothing
 17686 ;; This function is called by:
 17687 ;;		_CC2500_TxData
 17688 ;;		_CC2500_RxData
 17689 ;;		_CC2500_PowerRST
 17690 ;;		_CC2500_WriteREG
 17691 ;;		_CC2500_WriteCommand
 17692 ;;		_CC2500_ReadStatus
 17693 ;;		_getAD
 17694 ;;		_TouchPower
 17695 ;;		_CC2500_ReadREG
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699                           
 17700                           ;psect for function _Timeout_Counter
 17701  1E92                     _Timeout_Counter:	
 17702                           
 17703                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17704                           
 17705                           ;incstack = 0
 17706                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17707  1E92  3001               	movlw	1
 17708  1E93  0021               	movlb	1	; select bank1
 17709  1E94  07AC               	addwf	(_myMain^(0+128)+12),f
 17710  1E95  3000               	movlw	0
 17711  1E96  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17712                           
 17713                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
 17714  1E97  300C               	movlw	12
 17715  1E98  3EA0               	addlw	_myMain& (0+255)
 17716  1E99  0086               	movwf	6
 17717  1E9A  0187               	clrf	7
 17718  1E9B  3F40               	moviw [0]fsr1
 17719  1E9C  3AA8               	xorlw	168
 17720  1E9D  1D03               	skipz
 17721  1E9E  2EA1               	goto	u9025
 17722  1E9F  3F41               	moviw [1]fsr1
 17723  1EA0  3A61               	xorlw	97
 17724  1EA1                     u9025:	
 17725  1EA1  1D03               	skipz
 17726  1EA2  0008               	return
 17727                           
 17728                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17729  1EA3  01AC               	clrf	(_myMain^(0+128)+12)
 17730  1EA4  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17731                           
 17732                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17733  1EA5  152B               	bsf	(_myMain^(0+128)+11),2
 17734  1EA6  0008               	return
 17735  1EA7                     __end_of_Timeout_Counter:	
 17736                           
 17737                           	psect	text125
 17738  1EE7                     __ptext125:	
 17739 ;; *************** function _CC2500_WriteByte *****************
 17740 ;; Defined at:
 17741 ;;		line 219 in file "../src/CC2500_B1.c"
 17742 ;; Parameters:    Size  Location     Type
 17743 ;;		None
 17744 ;; Auto vars:     Size  Location     Type
 17745 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17746 ;; Return value:  Size  Location     Type
 17747 ;;		None               void
 17748 ;; Registers used:
 17749 ;;		wreg, status,2, status,0
 17750 ;; Tracked objects:
 17751 ;;		On entry : 0/0
 17752 ;;		On exit  : 0/0
 17753 ;;		Unchanged: 0/0
 17754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;Total ram usage:        2 bytes
 17760 ;; Hardware stack levels used:    1
 17761 ;; Hardware stack levels required when called:    5
 17762 ;; This function calls:
 17763 ;;		Nothing
 17764 ;; This function is called by:
 17765 ;;		_CC2500_TxData
 17766 ;;		_CC2500_RxData
 17767 ;;		_CC2500_PowerRST
 17768 ;;		_CC2500_WriteREG
 17769 ;;		_CC2500_WriteCommand
 17770 ;;		_CC2500_ReadStatus
 17771 ;;		_CC2500_ReadREG
 17772 ;; This function uses a non-reentrant model
 17773 ;;
 17774                           
 17775                           
 17776                           ;psect for function _CC2500_WriteByte
 17777  1EE7                     _CC2500_WriteByte:	
 17778                           
 17779                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17780                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17781                           
 17782                           ;incstack = 0
 17783                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17784  1EE7  0020               	movlb	0	; select bank0
 17785  1EE8  01A1               	clrf	CC2500_WriteByte@loop_a
 17786  1EE9                     L9:	
 17787  1EE9  3008               	movlw	8
 17788  1EEA  0221               	subwf	CC2500_WriteByte@loop_a,w
 17789  1EEB  1803               	btfsc	3,0
 17790  1EEC  0008               	return
 17791                           
 17792                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17793  1EED  0021               	movlb	1	; select bank1
 17794  1EEE  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17795  1EEF  2EF3               	goto	l304
 17796                           
 17797                           ;CC2500_B1.c: 223: RC4 = 1;
 17798  1EF0  0020               	movlb	0	; select bank0
 17799  1EF1  160E               	bsf	14,4	;volatile
 17800  1EF2  2EF5               	goto	l305
 17801  1EF3                     l304:	
 17802                           
 17803                           ;CC2500_B1.c: 224: else
 17804                           ;CC2500_B1.c: 225: RC4 = 0;
 17805  1EF3  0020               	movlb	0	; select bank0
 17806  1EF4  120E               	bcf	14,4	;volatile
 17807  1EF5                     l305:	
 17808                           
 17809                           ;CC2500_B1.c: 226: RC3 = 1;
 17810  1EF5  158E               	bsf	14,3	;volatile
 17811                           
 17812                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17813  1EF6  1003               	clrc
 17814  1EF7  0021               	movlb	1	; select bank1
 17815  1EF8  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17816                           
 17817                           ;CC2500_B1.c: 228: RC3 = 0;
 17818  1EF9  0020               	movlb	0	; select bank0
 17819  1EFA  118E               	bcf	14,3	;volatile
 17820  1EFB  3001               	movlw	1
 17821  1EFC  00A0               	movwf	??_CC2500_WriteByte
 17822  1EFD  0820               	movf	??_CC2500_WriteByte,w
 17823  1EFE  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17824  1EFF  2EE9               	goto	L9
 17825  1F00                     __end_of_CC2500_WriteByte:	
 17826                           
 17827                           	psect	text126
 17828  14D0                     __ptext126:	
 17829 ;; *************** function _Buzzer_Main *****************
 17830 ;; Defined at:
 17831 ;;		line 46 in file "../src/Buzzer_B1.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;		None
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;		None
 17836 ;; Return value:  Size  Location     Type
 17837 ;;		None               void
 17838 ;; Registers used:
 17839 ;;		wreg, status,2, status,0
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;Total ram usage:        1 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    5
 17852 ;; This function calls:
 17853 ;;		Nothing
 17854 ;; This function is called by:
 17855 ;;		_main
 17856 ;; This function uses a non-reentrant model
 17857 ;;
 17858                           
 17859                           
 17860                           ;psect for function _Buzzer_Main
 17861  14D0                     _Buzzer_Main:	
 17862                           
 17863                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17864                           
 17865                           ;incstack = 0
 17866                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17867  14D0  0021               	movlb	1	; select bank1
 17868  14D1  1CAE               	btfss	_Buz1^(0+128),1
 17869  14D2  0008               	return
 17870                           
 17871                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17872  14D3  3001               	movlw	1
 17873  14D4  07AF               	addwf	(_Buz1^(0+128)+1),f
 17874  14D5  3000               	movlw	0
 17875  14D6  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17876                           
 17877                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17878  14D7  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17879  14D8  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17880  14D9  1D03               	skipz
 17881  14DA  2CDD               	goto	u10885
 17882  14DB  0834               	movf	(_Buz1^(0+128)+6),w
 17883  14DC  022F               	subwf	(_Buz1^(0+128)+1),w
 17884  14DD                     u10885:	
 17885  14DD  1C03               	skipc
 17886  14DE  0008               	return
 17887                           
 17888                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17889  14DF  01AF               	clrf	(_Buz1^(0+128)+1)
 17890  14E0  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17891                           
 17892                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17893  14E1  12AE               	bcf	_Buz1^(0+128),5
 17894  14E2  0020               	movlb	0	; select bank0
 17895  14E3  1D8D               	btfss	13,3	;volatile
 17896  14E4  2CE7               	goto	l9694
 17897  14E5  0021               	movlb	1	; select bank1
 17898  14E6  16AE               	bsf	_Buz1^(0+128),5
 17899  14E7                     l9694:	
 17900                           
 17901                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17902  14E7  0021               	movlb	1	; select bank1
 17903  14E8  1AAE               	btfsc	_Buz1^(0+128),5
 17904  14E9  2D13               	goto	l94
 17905                           
 17906                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17907  14EA  08B1               	movf	(_Buz1^(0+128)+3),f
 17908  14EB  1D03               	skipz
 17909  14EC  2D0F               	goto	l95
 17910                           
 17911                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17912  14ED  1DAE               	btfss	_Buz1^(0+128),3
 17913  14EE  2CFD               	goto	l96
 17914                           
 17915                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17916  14EF  11AE               	bcf	_Buz1^(0+128),3
 17917                           
 17918                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17919  14F0  0832               	movf	(_Buz1^(0+128)+4),w
 17920  14F1  0020               	movlb	0	; select bank0
 17921  14F2  00A0               	movwf	??_Buzzer_Main
 17922  14F3  0820               	movf	??_Buzzer_Main,w
 17923  14F4  0021               	movlb	1	; select bank1
 17924  14F5  00B1               	movwf	(_Buz1^(0+128)+3)
 17925                           
 17926                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17927  14F6  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17928  14F7  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17929  14F8  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17930  14F9  0836               	movf	(_Buz1^(0+128)+8),w
 17931  14FA  01B4               	clrf	(_Buz1^(0+128)+6)
 17932  14FB  07B4               	addwf	(_Buz1^(0+128)+6),f
 17933                           
 17934                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17935  14FC  0008               	return
 17936  14FD                     l96:	
 17937  14FD  1E2E               	btfss	_Buz1^(0+128),4
 17938  14FE  2D0D               	goto	l98
 17939                           
 17940                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17941  14FF  122E               	bcf	_Buz1^(0+128),4
 17942                           
 17943                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17944  1500  0833               	movf	(_Buz1^(0+128)+5),w
 17945  1501  0020               	movlb	0	; select bank0
 17946  1502  00A0               	movwf	??_Buzzer_Main
 17947  1503  0820               	movf	??_Buzzer_Main,w
 17948  1504  0021               	movlb	1	; select bank1
 17949  1505  00B1               	movwf	(_Buz1^(0+128)+3)
 17950                           
 17951                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17952  1506  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17953  1507  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17954  1508  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17955  1509  0838               	movf	(_Buz1^(0+128)+10),w
 17956  150A  01B4               	clrf	(_Buz1^(0+128)+6)
 17957  150B  07B4               	addwf	(_Buz1^(0+128)+6),f
 17958                           
 17959                           ;Buzzer_B1.c: 62: } else {
 17960  150C  0008               	return
 17961  150D                     l98:	
 17962                           
 17963                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17964  150D  10AE               	bcf	_Buz1^(0+128),1
 17965                           
 17966                           ;Buzzer_B1.c: 64: }
 17967                           ;Buzzer_B1.c: 65: } else {
 17968  150E  0008               	return
 17969  150F                     l95:	
 17970                           
 17971                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17972  150F  16AE               	bsf	_Buz1^(0+128),5
 17973                           
 17974                           ;Buzzer_B1.c: 68: RB3 = 1;
 17975  1510  0020               	movlb	0	; select bank0
 17976  1511  158D               	bsf	13,3	;volatile
 17977                           
 17978                           ;Buzzer_B1.c: 69: }
 17979                           ;Buzzer_B1.c: 70: } else {
 17980  1512  0008               	return
 17981  1513                     l94:	
 17982                           
 17983                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17984  1513  12AE               	bcf	_Buz1^(0+128),5
 17985                           
 17986                           ;Buzzer_B1.c: 73: RB3 = 0;
 17987  1514  0020               	movlb	0	; select bank0
 17988  1515  118D               	bcf	13,3	;volatile
 17989                           
 17990                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17991  1516  3001               	movlw	1
 17992  1517  0021               	movlb	1	; select bank1
 17993  1518  02B1               	subwf	(_Buz1^(0+128)+3),f
 17994  1519  0008               	return
 17995  151A                     __end_of_Buzzer_Main:	
 17996                           
 17997                           	psect	text127
 17998  1C20                     __ptext127:	
 17999 ;; *************** function _Buzzer_Initialization *****************
 18000 ;; Defined at:
 18001 ;;		line 11 in file "../src/Buzzer_B1.c"
 18002 ;; Parameters:    Size  Location     Type
 18003 ;;		None
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;		None
 18006 ;; Return value:  Size  Location     Type
 18007 ;;		None               void
 18008 ;; Registers used:
 18009 ;;		None
 18010 ;; Tracked objects:
 18011 ;;		On entry : 0/0
 18012 ;;		On exit  : 0/0
 18013 ;;		Unchanged: 0/0
 18014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;Total ram usage:        0 bytes
 18020 ;; Hardware stack levels used:    1
 18021 ;; Hardware stack levels required when called:    5
 18022 ;; This function calls:
 18023 ;;		Nothing
 18024 ;; This function is called by:
 18025 ;;		_main
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           
 18030                           ;psect for function _Buzzer_Initialization
 18031  1C20                     _Buzzer_Initialization:	
 18032                           
 18033                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18034                           
 18035                           ;incstack = 0
 18036                           ; Regs used in _Buzzer_Initialization: []
 18037  1C20  0021               	movlb	1	; select bank1
 18038  1C21  142E               	bsf	_Buz1^(0+128),0
 18039  1C22  0008               	return
 18040  1C23                     __end_of_Buzzer_Initialization:	
 18041                           
 18042                           	psect	intentry
 18043  0004                     __pintentry:	
 18044 ;; *************** function _ISR *****************
 18045 ;; Defined at:
 18046 ;;		line 108 in file "../src/MCU_B1.c"
 18047 ;; Parameters:    Size  Location     Type
 18048 ;;		None
 18049 ;; Auto vars:     Size  Location     Type
 18050 ;;		None
 18051 ;; Return value:  Size  Location     Type
 18052 ;;		None               void
 18053 ;; Registers used:
 18054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18055 ;; Tracked objects:
 18056 ;;		On entry : 0/0
 18057 ;;		On exit  : 0/0
 18058 ;;		Unchanged: 0/0
 18059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;Total ram usage:        1 bytes
 18065 ;; Hardware stack levels used:    1
 18066 ;; Hardware stack levels required when called:    4
 18067 ;; This function calls:
 18068 ;;		_IOC_ISR
 18069 ;;		_TMR1_ISR
 18070 ;; This function is called by:
 18071 ;;		Interrupt level 1
 18072 ;; This function uses a non-reentrant model
 18073 ;;
 18074                           
 18075  0004                     _ISR:	
 18076                           
 18077                           ;incstack = 0
 18078                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18079  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18080  0005  3180               	pagesel	$
 18081  0006  0020               	movlb	0	; select bank0
 18082  0007  087F               	movf	127,w
 18083  0008  00F4               	movwf	??_ISR
 18084                           
 18085                           ;MCU_B1.c: 110: IOC_ISR();
 18086  0009  319D  257B  3180   	fcall	_IOC_ISR
 18087                           
 18088                           ;MCU_B1.c: 112: ;;
 18089                           ;MCU_B1.c: 114: TMR1_ISR();
 18090  000C  3190  20F2         	fcall	_TMR1_ISR
 18091  000E  0874               	movf	??_ISR,w
 18092  000F  0020               	movlb	0	; select bank0
 18093  0010  00FF               	movwf	127
 18094  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18095  0012  0009               	retfie
 18096  0013                     __end_of_ISR:	
 18097                           
 18098                           	psect	text129
 18099  10F2                     __ptext129:	
 18100 ;; *************** function _TMR1_ISR *****************
 18101 ;; Defined at:
 18102 ;;		line 210 in file "../src/MCU_B1.c"
 18103 ;; Parameters:    Size  Location     Type
 18104 ;;		None
 18105 ;; Auto vars:     Size  Location     Type
 18106 ;;		None
 18107 ;; Return value:  Size  Location     Type
 18108 ;;		None               void
 18109 ;; Registers used:
 18110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18111 ;; Tracked objects:
 18112 ;;		On entry : 0/0
 18113 ;;		On exit  : 0/0
 18114 ;;		Unchanged: 0/0
 18115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18120 ;;Total ram usage:        0 bytes
 18121 ;; Hardware stack levels used:    1
 18122 ;; Hardware stack levels required when called:    2
 18123 ;; This function calls:
 18124 ;;		_setDimmerLights_IntrControl
 18125 ;; This function is called by:
 18126 ;;		_ISR
 18127 ;; This function uses a non-reentrant model
 18128 ;;
 18129                           
 18130                           
 18131                           ;psect for function _TMR1_ISR
 18132  10F2                     _TMR1_ISR:	
 18133                           
 18134                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18135                           
 18136                           ;incstack = 0
 18137                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18138  10F2  0021               	movlb	1	; select bank1
 18139  10F3  1C11               	btfss	17,0	;volatile
 18140  10F4  0008               	return
 18141  10F5  0020               	movlb	0	; select bank0
 18142  10F6  1C11               	btfss	17,0	;volatile
 18143  10F7  0008               	return
 18144                           
 18145                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18146  10F8  30FA               	movlw	250
 18147  10F9  0097               	movwf	23	;volatile
 18148                           
 18149                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18150  10FA  3038               	movlw	56
 18151  10FB  0096               	movwf	22	;volatile
 18152                           
 18153                           ;MCU_B1.c: 215: TMR1IF = 0;
 18154  10FC  1011               	bcf	17,0	;volatile
 18155                           
 18156                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18157  10FD  3001               	movlw	1
 18158  10FE  3183  235C  3190   	fcall	_setDimmerLights_IntrControl
 18159                           
 18160                           ;MCU_B1.c: 236: Timer1.Count++;
 18161  1101  3001               	movlw	1
 18162  1102  0022               	movlb	2	; select bank2
 18163  1103  07A1               	addwf	(_Timer1^(0+256)+1),f
 18164  1104  3000               	movlw	0
 18165  1105  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18166                           
 18167                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18168  1106  3001               	movlw	1
 18169  1107  3E20               	addlw	_Timer1& (0+255)
 18170  1108  0086               	movwf	6
 18171  1109  3001               	movlw	1	; select bank2/3
 18172  110A  0087               	movwf	7
 18173  110B  3F40               	moviw [0]fsr1
 18174  110C  3A64               	xorlw	100
 18175  110D  1D03               	skipz
 18176  110E  2911               	goto	u725_25
 18177  110F  3F41               	moviw [1]fsr1
 18178  1110  3A00               	xorlw	0
 18179  1111                     u725_25:	
 18180  1111  1D03               	skipz
 18181  1112  0008               	return
 18182                           
 18183                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18184  1113  01A1               	clrf	(_Timer1^(0+256)+1)
 18185  1114  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18186                           
 18187                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18188  1115  1420               	bsf	_Timer1^(0+256),0
 18189  1116  0008               	return
 18190  1117                     __end_of_TMR1_ISR:	
 18191                           
 18192                           	psect	text130
 18193  035C                     __ptext130:	
 18194 ;; *************** function _setDimmerLights_IntrControl *****************
 18195 ;; Defined at:
 18196 ;;		line 96 in file "../src/Dimmer_B1.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;  lights          1    wreg     unsigned char 
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;  lights          1    3[COMMON] unsigned char 
 18201 ;; Return value:  Size  Location     Type
 18202 ;;		None               void
 18203 ;; Registers used:
 18204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18214 ;;Total ram usage:        2 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    1
 18217 ;; This function calls:
 18218 ;;		_DimmerIntrPointSelect
 18219 ;; This function is called by:
 18220 ;;		_TMR1_ISR
 18221 ;; This function uses a non-reentrant model
 18222 ;;
 18223                           
 18224                           
 18225                           ;psect for function _setDimmerLights_IntrControl
 18226  035C                     _setDimmerLights_IntrControl:	
 18227                           
 18228                           ;incstack = 0
 18229                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18230                           ;setDimmerLights_IntrControl@lights stored from wreg
 18231  035C  00F3               	movwf	setDimmerLights_IntrControl@lights
 18232                           
 18233                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18234  035D  0873               	movf	setDimmerLights_IntrControl@lights,w
 18235  035E  319C  24A0  3183   	fcall	_DimmerIntrPointSelect
 18236                           
 18237                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18238  0361  0876               	movf	_DimmerLightsIntr,w
 18239  0362  3E02               	addlw	2
 18240  0363  0086               	movwf	6
 18241  0364  3001               	movlw	1	; select bank2/3
 18242  0365  0087               	movwf	7
 18243  0366  1D01               	btfss	1,2
 18244  0367  2B86               	goto	i1l6764
 18245                           
 18246                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18247  0368  3001               	movlw	1
 18248  0369  00F2               	movwf	??_setDimmerLights_IntrControl
 18249  036A  0876               	movf	_DimmerLightsIntr,w
 18250  036B  3E03               	addlw	3
 18251  036C  0086               	movwf	6
 18252  036D  3001               	movlw	1	; select bank2/3
 18253  036E  0087               	movwf	7
 18254  036F  0872               	movf	??_setDimmerLights_IntrControl,w
 18255  0370  0781               	addwf	1,f
 18256                           
 18257                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18258  0371  0876               	movf	_DimmerLightsIntr,w
 18259  0372  3E03               	addlw	3
 18260  0373  0086               	movwf	6
 18261  0374  3001               	movlw	1	; select bank2/3
 18262  0375  0087               	movwf	7
 18263  0376  3039               	movlw	57
 18264  0377  0201               	subwf	1,w
 18265  0378  1C03               	skipc
 18266  0379  2B86               	goto	i1l6764
 18267                           
 18268                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18269  037A  0876               	movf	_DimmerLightsIntr,w
 18270  037B  3E03               	addlw	3
 18271  037C  0086               	movwf	6
 18272  037D  3001               	movlw	1	; select bank2/3
 18273  037E  0087               	movwf	7
 18274  037F  0181               	clrf	1
 18275                           
 18276                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18277  0380  0876               	movf	_DimmerLightsIntr,w
 18278  0381  3E02               	addlw	2
 18279  0382  0086               	movwf	6
 18280  0383  3001               	movlw	1	; select bank2/3
 18281  0384  0087               	movwf	7
 18282  0385  1101               	bcf	1,2
 18283  0386                     i1l6764:	
 18284                           
 18285                           ;Dimmer_B1.c: 241: }
 18286                           ;Dimmer_B1.c: 242: }
 18287                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18288  0386  0A76               	incf	_DimmerLightsIntr,w
 18289  0387  0086               	movwf	6
 18290  0388  3001               	movlw	1	; select bank2/3
 18291  0389  0087               	movwf	7
 18292  038A  1C01               	btfss	1,0
 18293  038B  2BB6               	goto	i1l6776
 18294                           
 18295                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18296  038C  0876               	movf	_DimmerLightsIntr,w
 18297  038D  3E03               	addlw	3
 18298  038E  0086               	movwf	6
 18299  038F  3001               	movlw	1	; select bank2/3
 18300  0390  0087               	movwf	7
 18301  0391  0876               	movf	_DimmerLightsIntr,w
 18302  0392  3E04               	addlw	4
 18303  0393  0084               	movwf	4
 18304  0394  3001               	movlw	1	; select bank2/3
 18305  0395  0085               	movwf	5
 18306  0396  0800               	movf	0,w
 18307  0397  0201               	subwf	1,w
 18308  0398  1C03               	skipc
 18309  0399  0008               	return
 18310                           
 18311                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18312  039A  0A76               	incf	_DimmerLightsIntr,w
 18313  039B  0086               	movwf	6
 18314  039C  3001               	movlw	1	; select bank2/3
 18315  039D  0087               	movwf	7
 18316  039E  1001               	bcf	1,0
 18317                           
 18318                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18319  039F  0A76               	incf	_DimmerLightsIntr,w
 18320  03A0  0086               	movwf	6
 18321  03A1  3001               	movlw	1	; select bank2/3
 18322  03A2  0087               	movwf	7
 18323  03A3  1581               	bsf	1,3
 18324                           
 18325                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18326  03A4  0876               	movf	_DimmerLightsIntr,w
 18327  03A5  0086               	movwf	6
 18328  03A6  3001               	movlw	1	; select bank2/3
 18329  03A7  0087               	movwf	7
 18330  03A8  1C01               	btfss	1,0
 18331  03A9  0008               	return
 18332                           
 18333                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18334  03AA  0876               	movf	_DimmerLightsIntr,w
 18335  03AB  0086               	movwf	6
 18336  03AC  3001               	movlw	1	; select bank2/3
 18337  03AD  0087               	movwf	7
 18338  03AE  1001               	bcf	1,0
 18339                           
 18340                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18341  03AF  0873               	movf	setDimmerLights_IntrControl@lights,w
 18342  03B0  3A01               	xorlw	1
 18343  03B1  1D03               	skipz
 18344  03B2  0008               	return
 18345                           
 18346                           ;Dimmer_B1.c: 253: RB1 = 0;
 18347  03B3  0020               	movlb	0	; select bank0
 18348  03B4  108D               	bcf	13,1	;volatile
 18349                           
 18350                           ;Dimmer_B1.c: 255: }
 18351                           ;Dimmer_B1.c: 262: }
 18352                           ;Dimmer_B1.c: 263: }
 18353                           ;Dimmer_B1.c: 264: } else {
 18354  03B5  0008               	return
 18355  03B6                     i1l6776:	
 18356                           
 18357                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18358  03B6  0A76               	incf	_DimmerLightsIntr,w
 18359  03B7  0086               	movwf	6
 18360  03B8  3001               	movlw	1	; select bank2/3
 18361  03B9  0087               	movwf	7
 18362  03BA  1D81               	btfss	1,3
 18363  03BB  0008               	return
 18364                           
 18365                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18366  03BC  0A76               	incf	_DimmerLightsIntr,w
 18367  03BD  0086               	movwf	6
 18368  03BE  3001               	movlw	1	; select bank2/3
 18369  03BF  0087               	movwf	7
 18370  03C0  1181               	bcf	1,3
 18371                           
 18372                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18373  03C1  3001               	movlw	1
 18374  03C2  00F2               	movwf	??_setDimmerLights_IntrControl
 18375  03C3  0876               	movf	_DimmerLightsIntr,w
 18376  03C4  3E05               	addlw	5
 18377  03C5  0086               	movwf	6
 18378  03C6  3001               	movlw	1	; select bank2/3
 18379  03C7  0087               	movwf	7
 18380  03C8  0872               	movf	??_setDimmerLights_IntrControl,w
 18381  03C9  0781               	addwf	1,f
 18382                           
 18383                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18384  03CA  0876               	movf	_DimmerLightsIntr,w
 18385  03CB  3E05               	addlw	5
 18386  03CC  0086               	movwf	6
 18387  03CD  3001               	movlw	1	; select bank2/3
 18388  03CE  0087               	movwf	7
 18389  03CF  0876               	movf	_DimmerLightsIntr,w
 18390  03D0  3E08               	addlw	8
 18391  03D1  0084               	movwf	4
 18392  03D2  3001               	movlw	1	; select bank2/3
 18393  03D3  0085               	movwf	5
 18394  03D4  0800               	movf	0,w
 18395  03D5  0201               	subwf	1,w
 18396  03D6  1C03               	skipc
 18397  03D7  2C1A               	goto	i1l6802
 18398                           
 18399                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18400  03D8  0876               	movf	_DimmerLightsIntr,w
 18401  03D9  3E05               	addlw	5
 18402  03DA  0086               	movwf	6
 18403  03DB  3001               	movlw	1	; select bank2/3
 18404  03DC  0087               	movwf	7
 18405  03DD  0181               	clrf	1
 18406                           
 18407                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18408  03DE  0A76               	incf	_DimmerLightsIntr,w
 18409  03DF  0086               	movwf	6
 18410  03E0  3001               	movlw	1	; select bank2/3
 18411  03E1  0087               	movwf	7
 18412  03E2  1F01               	btfss	1,6
 18413  03E3  0008               	return
 18414                           
 18415                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18416  03E4  0A76               	incf	_DimmerLightsIntr,w
 18417  03E5  0086               	movwf	6
 18418  03E6  3001               	movlw	1	; select bank2/3
 18419  03E7  0087               	movwf	7
 18420  03E8  1B81               	btfsc	1,7
 18421  03E9  2C03               	goto	i1l6796
 18422                           
 18423                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18424  03EA  0876               	movf	_DimmerLightsIntr,w
 18425  03EB  3E04               	addlw	4
 18426  03EC  0086               	movwf	6
 18427  03ED  3001               	movlw	1	; select bank2/3
 18428  03EE  0087               	movwf	7
 18429  03EF  3038               	movlw	56
 18430  03F0  0201               	subwf	1,w
 18431  03F1  1803               	skipnc
 18432  03F2  2BFD               	goto	i1l6794
 18433                           
 18434                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18435  03F3  3001               	movlw	1
 18436  03F4  00F2               	movwf	??_setDimmerLights_IntrControl
 18437  03F5  0876               	movf	_DimmerLightsIntr,w
 18438  03F6  3E04               	addlw	4
 18439  03F7  0086               	movwf	6
 18440  03F8  3001               	movlw	1	; select bank2/3
 18441  03F9  0087               	movwf	7
 18442  03FA  0872               	movf	??_setDimmerLights_IntrControl,w
 18443  03FB  0781               	addwf	1,f
 18444                           
 18445                           ;Dimmer_B1.c: 274: } else {
 18446  03FC  0008               	return
 18447  03FD                     i1l6794:	
 18448                           
 18449                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18450  03FD  0A76               	incf	_DimmerLightsIntr,w
 18451  03FE  0086               	movwf	6
 18452  03FF  3001               	movlw	1	; select bank2/3
 18453  0400  0087               	movwf	7
 18454  0401  1781               	bsf	1,7
 18455                           
 18456                           ;Dimmer_B1.c: 276: }
 18457                           ;Dimmer_B1.c: 277: } else {
 18458  0402  0008               	return
 18459  0403                     i1l6796:	
 18460                           
 18461                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18462  0403  0876               	movf	_DimmerLightsIntr,w
 18463  0404  3E04               	addlw	4
 18464  0405  0086               	movwf	6
 18465  0406  3001               	movlw	1	; select bank2/3
 18466  0407  0087               	movwf	7
 18467  0408  300D               	movlw	13
 18468  0409  0201               	subwf	1,w
 18469  040A  1C03               	skipc
 18470  040B  2C14               	goto	i1l6800
 18471                           
 18472                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18473  040C  0876               	movf	_DimmerLightsIntr,w
 18474  040D  3E04               	addlw	4
 18475  040E  0086               	movwf	6
 18476  040F  3001               	movlw	1	; select bank2/3
 18477  0410  0087               	movwf	7
 18478  0411  3001               	movlw	1
 18479  0412  0281               	subwf	1,f
 18480                           
 18481                           ;Dimmer_B1.c: 280: } else
 18482  0413  0008               	return
 18483  0414                     i1l6800:	
 18484                           
 18485                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18486  0414  0A76               	incf	_DimmerLightsIntr,w
 18487  0415  0086               	movwf	6
 18488  0416  3001               	movlw	1	; select bank2/3
 18489  0417  0087               	movwf	7
 18490  0418  1381               	bcf	1,7
 18491                           
 18492                           ;Dimmer_B1.c: 282: }
 18493                           ;Dimmer_B1.c: 283: }
 18494                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18495  0419  0008               	return
 18496  041A                     i1l6802:	
 18497  041A  0876               	movf	_DimmerLightsIntr,w
 18498  041B  3E02               	addlw	2
 18499  041C  0086               	movwf	6
 18500  041D  3001               	movlw	1	; select bank2/3
 18501  041E  0087               	movwf	7
 18502  041F  1C01               	btfss	1,0
 18503  0420  0008               	return
 18504                           
 18505                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18506  0421  0876               	movf	_DimmerLightsIntr,w
 18507  0422  3E04               	addlw	4
 18508  0423  0086               	movwf	6
 18509  0424  3001               	movlw	1	; select bank2/3
 18510  0425  0087               	movwf	7
 18511  0426  0876               	movf	_DimmerLightsIntr,w
 18512  0427  3E06               	addlw	6
 18513  0428  0084               	movwf	4
 18514  0429  3001               	movlw	1	; select bank2/3
 18515  042A  0085               	movwf	5
 18516  042B  0800               	movf	0,w
 18517  042C  0201               	subwf	1,w
 18518  042D  1803               	skipnc
 18519  042E  2C39               	goto	i1l6808
 18520                           
 18521                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18522  042F  3001               	movlw	1
 18523  0430  00F2               	movwf	??_setDimmerLights_IntrControl
 18524  0431  0876               	movf	_DimmerLightsIntr,w
 18525  0432  3E04               	addlw	4
 18526  0433  0086               	movwf	6
 18527  0434  3001               	movlw	1	; select bank2/3
 18528  0435  0087               	movwf	7
 18529  0436  0872               	movf	??_setDimmerLights_IntrControl,w
 18530  0437  0781               	addwf	1,f
 18531                           
 18532                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18533  0438  0008               	return
 18534  0439                     i1l6808:	
 18535  0439  0876               	movf	_DimmerLightsIntr,w
 18536  043A  3E06               	addlw	6
 18537  043B  0086               	movwf	6
 18538  043C  3001               	movlw	1	; select bank2/3
 18539  043D  0087               	movwf	7
 18540  043E  0876               	movf	_DimmerLightsIntr,w
 18541  043F  3E04               	addlw	4
 18542  0440  0084               	movwf	4
 18543  0441  3001               	movlw	1	; select bank2/3
 18544  0442  0085               	movwf	5
 18545  0443  0800               	movf	0,w
 18546  0444  0201               	subwf	1,w
 18547  0445  1803               	skipnc
 18548  0446  2C4F               	goto	i1l6812
 18549                           
 18550                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18551  0447  0876               	movf	_DimmerLightsIntr,w
 18552  0448  3E04               	addlw	4
 18553  0449  0086               	movwf	6
 18554  044A  3001               	movlw	1	; select bank2/3
 18555  044B  0087               	movwf	7
 18556  044C  3001               	movlw	1
 18557  044D  0281               	subwf	1,f
 18558                           
 18559                           ;Dimmer_B1.c: 289: } else {
 18560  044E  0008               	return
 18561  044F                     i1l6812:	
 18562                           
 18563                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18564  044F  0876               	movf	_DimmerLightsIntr,w
 18565  0450  3E02               	addlw	2
 18566  0451  0086               	movwf	6
 18567  0452  3001               	movlw	1	; select bank2/3
 18568  0453  0087               	movwf	7
 18569  0454  1001               	bcf	1,0
 18570  0455  0008               	return
 18571  0456                     __end_of_setDimmerLights_IntrControl:	
 18572                           
 18573                           	psect	text131
 18574  1CA0                     __ptext131:	
 18575 ;; *************** function _DimmerIntrPointSelect *****************
 18576 ;; Defined at:
 18577 ;;		line 74 in file "../src/Dimmer_B1.c"
 18578 ;; Parameters:    Size  Location     Type
 18579 ;;  lights          1    wreg     unsigned char 
 18580 ;; Auto vars:     Size  Location     Type
 18581 ;;  lights          1    1[COMMON] unsigned char 
 18582 ;; Return value:  Size  Location     Type
 18583 ;;		None               void
 18584 ;; Registers used:
 18585 ;;		wreg
 18586 ;; Tracked objects:
 18587 ;;		On entry : 0/0
 18588 ;;		On exit  : 0/0
 18589 ;;		Unchanged: 0/0
 18590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18595 ;;Total ram usage:        2 bytes
 18596 ;; Hardware stack levels used:    1
 18597 ;; This function calls:
 18598 ;;		Nothing
 18599 ;; This function is called by:
 18600 ;;		_setDimmerLights_IntrControl
 18601 ;; This function uses a non-reentrant model
 18602 ;;
 18603                           
 18604                           
 18605                           ;psect for function _DimmerIntrPointSelect
 18606  1CA0                     _DimmerIntrPointSelect:	
 18607                           
 18608                           ;incstack = 0
 18609                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18610                           ;DimmerIntrPointSelect@lights stored from wreg
 18611  1CA0  00F1               	movwf	DimmerIntrPointSelect@lights
 18612                           
 18613                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18614  1CA1  0871               	movf	DimmerIntrPointSelect@lights,w
 18615  1CA2  3A01               	xorlw	1
 18616  1CA3  1D03               	skipz
 18617  1CA4  0008               	return
 18618                           
 18619                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18620  1CA5  3053               	movlw	_DimmerLights1& (0+255)
 18621  1CA6  00F0               	movwf	??_DimmerIntrPointSelect
 18622  1CA7  0870               	movf	??_DimmerIntrPointSelect,w
 18623  1CA8  00F6               	movwf	_DimmerLightsIntr
 18624  1CA9  0008               	return
 18625  1CAA                     __end_of_DimmerIntrPointSelect:	
 18626                           
 18627                           	psect	text132
 18628  1D7B                     __ptext132:	
 18629 ;; *************** function _IOC_ISR *****************
 18630 ;; Defined at:
 18631 ;;		line 401 in file "../src/MCU_B1.c"
 18632 ;; Parameters:    Size  Location     Type
 18633 ;;		None
 18634 ;; Auto vars:     Size  Location     Type
 18635 ;;		None
 18636 ;; Return value:  Size  Location     Type
 18637 ;;		None               void
 18638 ;; Registers used:
 18639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18640 ;; Tracked objects:
 18641 ;;		On entry : 0/0
 18642 ;;		On exit  : 0/0
 18643 ;;		Unchanged: 0/0
 18644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18649 ;;Total ram usage:        0 bytes
 18650 ;; Hardware stack levels used:    1
 18651 ;; Hardware stack levels required when called:    3
 18652 ;; This function calls:
 18653 ;;		_setDimmerReClock
 18654 ;; This function is called by:
 18655 ;;		_ISR
 18656 ;; This function uses a non-reentrant model
 18657 ;;
 18658                           
 18659                           
 18660                           ;psect for function _IOC_ISR
 18661  1D7B                     _IOC_ISR:	
 18662                           
 18663                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18664                           
 18665                           ;incstack = 0
 18666                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18667  1D7B  1D8B               	btfss	11,3	;volatile
 18668  1D7C  0008               	return
 18669  1D7D  1C0B               	btfss	11,0	;volatile
 18670  1D7E  0008               	return
 18671  1D7F  0027               	movlb	7	; select bank7
 18672  1D80  1D16               	btfss	22,2	;volatile
 18673  1D81  0008               	return
 18674                           
 18675                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18676  1D82  1116               	bcf	22,2	;volatile
 18677                           
 18678                           ;MCU_B1.c: 404: IOCIF = 0;
 18679  1D83  100B               	bcf	11,0	;volatile
 18680                           
 18681                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18682  1D84  0021               	movlb	1	; select bank1
 18683  1D85  1C20               	btfss	_myMain^(0+128),0
 18684  1D86  0008               	return
 18685                           
 18686                           ;MCU_B1.c: 408: setDimmerReClock();
 18687  1D87  319C  242F         	fcall	_setDimmerReClock
 18688  1D89  0008               	return
 18689  1D8A                     __end_of_IOC_ISR:	
 18690                           
 18691                           	psect	text133
 18692  1C2F                     __ptext133:	
 18693 ;; *************** function _setDimmerReClock *****************
 18694 ;; Defined at:
 18695 ;;		line 244 in file "../src/MCU_B1.c"
 18696 ;; Parameters:    Size  Location     Type
 18697 ;;		None
 18698 ;; Auto vars:     Size  Location     Type
 18699 ;;		None
 18700 ;; Return value:  Size  Location     Type
 18701 ;;		None               void
 18702 ;; Registers used:
 18703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18704 ;; Tracked objects:
 18705 ;;		On entry : 0/0
 18706 ;;		On exit  : 0/0
 18707 ;;		Unchanged: 0/0
 18708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;Total ram usage:        0 bytes
 18714 ;; Hardware stack levels used:    1
 18715 ;; Hardware stack levels required when called:    2
 18716 ;; This function calls:
 18717 ;;		_setDimmerLights_IntrIOC_GO
 18718 ;; This function is called by:
 18719 ;;		_IOC_ISR
 18720 ;; This function uses a non-reentrant model
 18721 ;;
 18722                           
 18723                           
 18724                           ;psect for function _setDimmerReClock
 18725  1C2F                     _setDimmerReClock:	
 18726                           
 18727                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18728                           
 18729                           ;incstack = 0
 18730                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18731  1C2F  3001               	movlw	1
 18732  1C30  3192  22A3         	fcall	_setDimmerLights_IntrIOC_GO
 18733  1C32  0008               	return
 18734  1C33                     __end_of_setDimmerReClock:	
 18735                           
 18736                           	psect	text134
 18737  12A3                     __ptext134:	
 18738 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18739 ;; Defined at:
 18740 ;;		line 28 in file "../src/Dimmer_B1.c"
 18741 ;; Parameters:    Size  Location     Type
 18742 ;;  lights          1    wreg     unsigned char 
 18743 ;; Auto vars:     Size  Location     Type
 18744 ;;  lights          1    2[COMMON] unsigned char 
 18745 ;; Return value:  Size  Location     Type
 18746 ;;		None               void
 18747 ;; Registers used:
 18748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18749 ;; Tracked objects:
 18750 ;;		On entry : 0/0
 18751 ;;		On exit  : 0/0
 18752 ;;		Unchanged: 0/0
 18753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;Total ram usage:        1 bytes
 18759 ;; Hardware stack levels used:    1
 18760 ;; Hardware stack levels required when called:    1
 18761 ;; This function calls:
 18762 ;;		_DimmerIntrIOCPointSelect
 18763 ;; This function is called by:
 18764 ;;		_setDimmerReClock
 18765 ;; This function uses a non-reentrant model
 18766 ;;
 18767                           
 18768                           
 18769                           ;psect for function _setDimmerLights_IntrIOC_GO
 18770  12A3                     _setDimmerLights_IntrIOC_GO:	
 18771                           
 18772                           ;incstack = 0
 18773                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18774                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18775  12A3  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18776                           
 18777                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18778  12A4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18779  12A5  319C  24BE  3192   	fcall	_DimmerIntrIOCPointSelect
 18780                           
 18781                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18782  12A8  0021               	movlb	1	; select bank1
 18783  12A9  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18784  12AA  3E02               	addlw	2
 18785  12AB  0086               	movwf	6
 18786  12AC  3001               	movlw	1	; select bank2/3
 18787  12AD  0087               	movwf	7
 18788  12AE  1901               	btfsc	1,2
 18789  12AF  0008               	return
 18790  12B0  0020               	movlb	0	; select bank0
 18791  12B1  1D0D               	btfss	13,2	;volatile
 18792  12B2  0008               	return
 18793                           
 18794                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18795  12B3  0021               	movlb	1	; select bank1
 18796  12B4  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18797  12B5  3E02               	addlw	2
 18798  12B6  0086               	movwf	6
 18799  12B7  3001               	movlw	1	; select bank2/3
 18800  12B8  0087               	movwf	7
 18801  12B9  1501               	bsf	1,2
 18802                           
 18803                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18804  12BA  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18805  12BB  0086               	movwf	6
 18806  12BC  3001               	movlw	1	; select bank2/3
 18807  12BD  0087               	movwf	7
 18808  12BE  1401               	bsf	1,0
 18809                           
 18810                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18811  12BF  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18812  12C0  0086               	movwf	6
 18813  12C1  3001               	movlw	1	; select bank2/3
 18814  12C2  0087               	movwf	7
 18815  12C3  1481               	bsf	1,1
 18816                           
 18817                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18818  12C4  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18819                           
 18820                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18821  12C5  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18822  12C6  0086               	movwf	6
 18823  12C7  3001               	movlw	1	; select bank2/3
 18824  12C8  0087               	movwf	7
 18825  12C9  1D01               	btfss	1,2
 18826  12CA  0008               	return
 18827                           
 18828                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18829  12CB  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18830  12CC  0086               	movwf	6
 18831  12CD  3001               	movlw	1	; select bank2/3
 18832  12CE  0087               	movwf	7
 18833  12CF  1401               	bsf	1,0
 18834                           
 18835                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18836  12D0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18837  12D1  3A01               	xorlw	1
 18838  12D2  1D03               	skipz
 18839  12D3  0008               	return
 18840                           
 18841                           ;Dimmer_B1.c: 56: RB1 = 1;
 18842  12D4  0020               	movlb	0	; select bank0
 18843  12D5  148D               	bsf	13,1	;volatile
 18844  12D6  0008               	return
 18845  12D7                     __end_of_setDimmerLights_IntrIOC_GO:	
 18846                           
 18847                           	psect	text135
 18848  1CBE                     __ptext135:	
 18849 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18850 ;; Defined at:
 18851 ;;		line 8 in file "../src/Dimmer_B1.c"
 18852 ;; Parameters:    Size  Location     Type
 18853 ;;  lights          1    wreg     unsigned char 
 18854 ;; Auto vars:     Size  Location     Type
 18855 ;;  lights          1    1[COMMON] unsigned char 
 18856 ;; Return value:  Size  Location     Type
 18857 ;;		None               void
 18858 ;; Registers used:
 18859 ;;		wreg
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/0
 18862 ;;		On exit  : 0/0
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18869 ;;Total ram usage:        2 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; This function calls:
 18872 ;;		Nothing
 18873 ;; This function is called by:
 18874 ;;		_setDimmerLights_IntrIOC_GO
 18875 ;; This function uses a non-reentrant model
 18876 ;;
 18877                           
 18878                           
 18879                           ;psect for function _DimmerIntrIOCPointSelect
 18880  1CBE                     _DimmerIntrIOCPointSelect:	
 18881                           
 18882                           ;incstack = 0
 18883                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18884                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18885  1CBE  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18886                           
 18887                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18888  1CBF  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18889  1CC0  3A01               	xorlw	1
 18890  1CC1  1D03               	skipz
 18891  1CC2  0008               	return
 18892                           
 18893                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18894  1CC3  3053               	movlw	_DimmerLights1& (0+255)
 18895  1CC4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18896  1CC5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18897  1CC6  0021               	movlb	1	; select bank1
 18898  1CC7  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18899  1CC8  0008               	return
 18900  1CC9                     __end_of_DimmerIntrIOCPointSelect:	
 18901  007E                     btemp	set	126	;btemp
 18902  007E                     pic14e$flags	set	126
 18903  007E                     wtemp	set	126
 18904  007E                     wtemp0	set	126
 18905  0080                     wtemp1	set	128
 18906  0082                     wtemp2	set	130
 18907  0084                     wtemp3	set	132
 18908  0086                     wtemp4	set	134
 18909  0088                     wtemp5	set	136
 18910  007F                     wtemp6	set	127
 18911  007E                     ttemp	set	126
 18912  007E                     ttemp0	set	126
 18913  0081                     ttemp1	set	129
 18914  0084                     ttemp2	set	132
 18915  0087                     ttemp3	set	135
 18916  007F                     ttemp4	set	127
 18917  007E                     ltemp	set	126
 18918  007E                     ltemp0	set	126
 18919  0082                     ltemp1	set	130
 18920  0086                     ltemp2	set	134
 18921  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127316
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7770
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7770
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     201
                                              4 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45365
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45365
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35279
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   34970
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 20 15:56:12 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 17D8  
                                      l94 1513                                        l86 17EC  
                                      l95 150F                                        l96 14FD  
                                      l98 150D                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10CE                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CDF  
                  __end_of_setDelayOff_GO 16FB                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1606  
                    _setDimmerLights_Line 1D6D                              ___ftadd@sign 004B  
                                     l231 0AB0                                       l304 1EF3  
                                     l305 1EF5                      _setDimmerLights_SwOn 141D  
                                     l348 1141                                       l730 1F64  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1F00                     _Buzzer_Initialization 1C20  
                         __end_of_ADC_Set 1C6D                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 1656  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 10CE  
                   _setDimmerLights_AdjOn 1377                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D8A                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l1208 1209  
                                    l2112 0A12                                      l1217 1560  
                                    l2041 0CCA                                      l1420 1286  
                                    l2124 14BC                                      l1421 12A1  
                                    l2037 0D04                                      l2047 0CE0  
                                    l1425 129D                                      l2049 0CF5  
                                    l1194 133B                  ?_DimmerLightsPointSelect 0070  
                                    l2076 1E4A                                      l2412 0353  
                                    l2414 0230                                      l1455 0703  
                                    l2098 1307                                      l1394 1490  
                                    l1563 01E7                                      l1724 0FF6  
                                    l1573 01C3                                      l1565 0077  
                         __end_of_IOC_Set 1D53                                      l1574 01C1  
                                    l1566 0073                                      l1567 006E  
                                    l1719 0FFC                                      l2392 1EC3  
                                    l2754 0A5D                                      l2587 1FAC  
                                    l2748 0A46                                      l8000 047E  
                                    l2777 04F5                                      l8010 0494  
                                    l8004 0485                                      l8030 04CB  
                                    l8022 04AE                                      l8040 04E7  
                                    l8032 04D0                                      l8200 0DF9  
                                    l8112 071B                                      l8050 0519  
                                    l8042 04F1                                      l8034 04D4  
                                    l8130 076C                                      l8060 0534  
                                    l8028 04C1                                      l8204 0E07  
                   _setDimmerLights_SwOff 1568                                      l8046 0507  
                                    l8070 0EBE                                      l9022 1DE6  
                                    l8142 0788                                      l8134 0774  
                                    l8118 0731                                      l8224 11B4  
                                    l9104 1DF7                                      l9122 07DD  
                                    l8250 1706                                      l8330 16E0  
                                    l8090 0F15                                      l8170 0DA2  
                                    l8146 0790                                      l9132 07ED  
                                    l9124 07E0                                      l8332 16E6  
                                    l8076 0ED4                                      l9044 0C30  
                                    l9134 07F0                                      l8326 16DA  
                                    l8190 0DE0                                      l8510 1F9C  
                                    l9054 0C41                                      l9128 07E6  
                                    l8256 1711                                      l9240 1650  
                                    l9232 162F                                      l9080 0C81  
                                    l9138 07F6                                      l8282 1748  
                                    l8274 1737                                      l8266 1719  
                                    l8530 0960                                      l8098 0F2E  
                                    l9234 1635                                      l9066 0C57  
                                    l9074 0C76                                      l8268 1725  
                                    l8532 0995                                      l8196 0DED  
                                    l8188 0DD2                                      l8508 1F96  
                                    l8612 112A                                      l8460 121D  
                                    l8364 1448                                      l8278 1740  
                                    l8198 0DF6                                      l9254 1CE7  
                                    l9270 11BC                                      l8606 1121  
                                    l8366 144E                                      l9510 0CD0  
                                    l8528 098F                                      l8632 1EE0  
                                    l9272 11DE                                      l8608 1124  
                                    l8800 0BAF                                      l9424 0F6C  
                                    l8378 159D                                      l8650 128A  
                                    l8810 0BC2                                      l8802 0BB2  
                                    l8570 15F9                                      l8730 09F3  
                                    l8722 09B5                                      l9362 1FF3  
                                    l8900 1686                                      l9380 1536  
                                    l9268 11D9                                      l8812 0BC5  
                                    l9356 1FEB                     _myMain_Initialization 1D8A  
                                    l8590 1F09                                      l7942 0A23  
                                    l8398 088F                                      l8910 169C  
                                    l9374 1521                                      l8750 0A85  
                                    l8566 15EA                                      l8726 09DA  
                                    l8734 09F7                                      l9526 0CE6  
                                    l9550 1EC8                                      l9454 0FCB  
                                    l9358 1FEE                                      l8592 1F0C  
                                    l8648 1281                                      l7952 0A4B  
                                    l7944 0A2D                                      l8920 1767  
                                    l8832 0BDD                                      l8816 0BCB  
                                    l8744 0A7C                                      l8584 14AB  
                                    l8728 09EF                                      l9608 02CE  
                                    l9456 0FCD                                      l7970 1E06  
                                    l8658 1298                                      l8690 1412  
                                    l8682 13FC                                      l7954 0A53  
                                    l7946 0A32                                      l7938 0A1C  
                                    l8834 0BF6                                      l8770 0AB9  
                                    l8746 0A7F                                      l9554 1ECE  
                                    l9618 0300                                      l9466 0FE2  
                                    l8596 1F12                                      l8676 13F3  
                                    l8764 0A97                                      l9468 0FE3  
                                    l8854 1152                                      l8862 10B4  
                                    l7966 1E00                                      l9670 13C2  
                                    l8782 0ACC                                      l8774 0ABF  
                                    l9494 0CB1                                      l8856 115D  
                                    l8864 10B7                                      l9736 1F66  
                                    l9680 13DD                                      l9648 1FA6  
                                    l8776 0AC3                                      l8768 0AB6  
                                    l9584 025E                                      l9568 021B  
                                    _CFGS 0CAE                                      l8794 0BA6  
                                    l8778 0AC6                                      l9594 0290  
                                    l8868 10BD                                      l7988 1094  
                                    l9676 13D4                                      l9668 13B6  
                                    l8796 0BA9                                      l9916 1470  
                                    l9694 14E7                                      l9766 05BE  
                                    l9944 0055                                      l9864 0D4E  
                                    l9856 0D29                              __CFG_WDTE$ON 0000  
                                    l8978 11F1                                      l9962 0076  
                                    l9884 0D83                                      l9868 0D56  
                                    l9984 00CC                                      l9978 009A  
                                    l9898 0836                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u8105 0A64                                      u8035 0A28  
                                    u8055 0A41                                      u9025 1EA1  
                                    u8305 04D5                                      u9115 096B  
                                    u8075 0A4E                                      u8245 04AF  
                                    u8405 0EE6                                      u8335 04E8  
                                    u8415 0EF6                                      u8425 0F16  
                                    u8275 04C2                                      u8435 0F25  
                                    u8515 0775                                      u8445 0F2F  
                                    u8605 0DA9                                      u8525 077B  
                                    u8715 11A0                                      u8635 0DD3  
                                    u8555 0791                                      u8805 1738  
                                    u8565 0797                                      u8485 073D  
                                    u8495 074D                                      u8665 0DEE  
                                    u8765 171C                                      u9575 1147  
                                    u8785 1726                                      u8970 084F  
                                    u8795 1730                                      _LWLO 0CAD  
                                    u8975 084D                                      _RSSI 00CF  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00AE                                      _Load 0125  
                                    _Temp 00D7                                      _main 089E  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0956  
                         __end_of_RF_Main 1C2C                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1CF5  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1C2F                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 14D0  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2172 0023  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1EE7  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1ED1  
                  _getDimmerLights_Status 1DB9                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 000A                          __end_of_LED_Main 1C4F  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1CAA  
                   ?_getDimmerLights_Line 0070                                     l10010 0155  
                                   l10100 0643                                     l10020 0181  
                                   l10110 0661                                     l10120 0664  
                                   l10016 0162                                     l10024 018D  
                                   l10122 0695                                     l10106 0652  
                                   l10034 01A3                                     l10140 06DC  
                                   l10212 08CD                                     l10142 06E6  
                                   l10118 068D                                     l10136 06D4  
                                   l10072 01D6                                     l10208 08C2  
                                   l10138 06AB                                     l10148 06F9  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 174F  
                         __end_of___ftadd 054C                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1C8E                                     u11105 0D3C  
                                   u11045 1332                                     u10165 11C5  
                         __end_of___ftmul 07B8                                     u11205 082D  
                                   u11215 083C                                     u10345 0FB3  
                                   u11155 0D70                           ___awdiv@divisor 0020  
                                   u11405 00CA                                     u10365 0FD3  
                                   u11415 010E                                     u11255 1488  
                                   _T1CON 0018                                     u10465 0CC4  
                                   u11620 0693                           __end_of___fttol 0E10  
                                   u10815 13B9                                     u11625 066F  
                                   u11650 06DA                                     u10835 13C3  
                                   u11395 0098                                     u10845 13CD  
                                   u11655 06B6                                     u10855 13D5  
                                   u10775 1FAD                                     u11495 0194  
                                   u10785 1FB2                                     u10885 14DD  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 13E4  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1EA7                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12D7                _setDimmerLights_IntrIOC_GO 12A3  
                        __end_of_TMR1_ISR 1117                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 09B4  
              _setDimmerLights_ErrorClose 0956                          __end_of_TMR1_Set 1D5F  
                                   _getAD 1FE0                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E45               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D47  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CBE  
           __end_of_setLED_Initialization 1E21                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 0845  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0B3D  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 08F9                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 0800                        ??_setMemory_Modify 0020  
                          _Exception_Main 0628                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 16A8  
                    _setSw_Initialization 1DA9                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 09B4                            _setMemory_Data 1D23  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CDF  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08F9                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1C7D                                 ??_WDT_Set 0020  
                        __end_of___awtoft 10AB                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0A74                  _getMain_All_Error_Status 1270  
                                  _IOCBF2 1CB2                                    i1l6800 0414  
                                  i1l6802 041A                                    i1l6812 044F  
                                  i1l6808 0439                                    i1l6764 0386  
                                  i1l6776 03B6                                    i1l6794 03FD  
                                  i1l6796 0403                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u725_25 1111  
                      __size_of_Load_Main 01AC                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1F34  
                                  _WDTCON 0097                      Exception_Main@i_3436 00ED  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1EBC                                    _Dimmer 00C6  
                                  _DlySw1 0164                __end_of_Mcu_Initialization 1E33  
                     __end_of_Buzzer_Main 151A                                    _Memory 01BE  
                                  _Timer1 0120                                    ___bmul 1DFD  
                  __end_of_Exception_Main 0704                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 1FA3  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 13E4  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D2F  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 17A7                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1C26          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 0456               _setDimmerLights_IntrControl 035C  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E7E               getMain_Lights_Count@status1 0021  
                   __end_of_SwPointSelect 1D0B              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1EBC  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0BA2  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 003D  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5046 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1069                             __end_of_getAD 2000  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1C47  
                         _getSw_KeyStatus 1DEC                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D3B  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1CB4  
              __end_of_set_TimeoutCleared 1C54                  __end_of_setDimmerReClock 1C33  
                      __size_of_getRxData 007A                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D5F  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1C2C                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14D0  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1069  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C3F                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 089E                            _getDelayOff_GO 1D99  
                     _CC2500_WriteCommand 1F00                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 000B  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0D08  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1C6D  
                      __size_of_setTxData 0097                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1C66                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0807                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1D00  
                      _setRFSW_AdjControl 1492                    __end_of_setProductData 1D6D  
                                 _IOC_ISR 1D7B                                   _IOC_Set 1D47  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 130B  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1F1A  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C29  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CEA           __end_of_setControl_Lights_Table 0A13  
                         setRF_Main@error 016F                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0AD8  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1D17                           __size_of_IO_Set 001A  
                       __end_of_getBuz_GO 1DDB                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1DA9  
          __end_of_getDimmerLights_Status 1DCA                         __end_of_getRxData 0C8B  
                 __end_of_getSw_KeyStatus 1DFD                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CC9                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16FB                                   ___ftadd 0456  
                                 ___ftdiv 0EA7                                   ___ftneg 1C85  
                         __size_of___wmul 001E                                   ___ftmul 0704  
                                 ___fttol 0D89                       __end_of_Switch_Main 0807  
                                 ___lwdiv 13AD                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1DDB                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 1456                                   __ptext2 1D8A  
                                 __ptext3 0807                                   __ptext4 0D08  
                                 __ptext5 1FE0                                   __ptext6 1E33  
                                 __ptext7 0002                                   __ptext8 1066  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0024                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1CA0                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1341                 __end_of_Flash_Memory_Read 1F34  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0C8B  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1C43  
                       _DimmerLights_Main 1F4E            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1C5A                __end_of_CC2500_ClearRXFIFO 1C37  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1C3B  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1D17                       _DelayOffPointSelect 1CC9  
                                 clrloop0 1C61            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1CA0                      end_of_initialization 003D  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1162  
                           _DelayTime_1us 113C                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 1210                                   init_ram 1C5A  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C5B  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1117  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1E0F  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0BA2                             _CC2500_TxData 0A74  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 151A  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C8E                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F6A                        _Mcu_Initialization 1E21  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1492  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D23                   __end_of_setPercentValue 0B3D  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 118C  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 174F                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 113C                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1F4E                      _setRF_Initialization 1CF5  
                      _setMemory_LoopSave 1E6B                               _Switch_Main 0800  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CD4                   __end_of_getRF_KeyStatus 1DEC  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1EA7                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1E0F                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CBE                            __end_of___wmul 1FC1  
                       getSw_KeyStatus@sw 0070                         __size_of_TMR1_ISR 0025  
           __size_of_getDimmerLights_Line 000B                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 141D             __size_of_setDimmerLights_Line 000E  
           __size_of_setDimmerLights_SwOn 0039                            __end_of_setBuz 1800  
                    _CC2500_FrequencyCabr 1D0B                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15B7  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1210  
                         ?_LedPointSelect 0070                                 _Load_Main 0041  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1C75  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1FE0           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1C4F  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1066                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 000B  
                               _Tx_Length 00D3                               __pdataBANK4 0220  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 11B6  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 12A3                          _CC2500_SIDLEMode 1C3B  
              __size_of_DimmerLights_Main 001C                 __end_of_setRF_DimmerValue 123F  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1E58  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK2 016D  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0153  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F86  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00ED               __size_of_LED_Initialization 0004  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 007D  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1C1F  
                               _getBuz_GO 1DCA       __end_of_Flash_Memory_Initialization 0628  
             _Flash_Memory_Initialization 054C                                  ?___awdiv 0020  
                               __ptext100 16A8                                 __ptext101 1D5F  
                               __ptext110 1C54                                 __ptext102 118C  
                               __ptext111 1CC9                                 __ptext103 1DFD  
                               __ptext120 1C37                                 __ptext112 1EA7  
                               __ptext104 1D99                                 __ptext121 1C33  
                               __ptext113 1C3B                                 __ptext105 1DB9  
                               __ptext130 035C                                 __ptext122 1F00  
                               __ptext114 07B8                                 __ptext106 1CD4  
                               __ptext131 1CA0                                 __ptext123 1C4F  
                               __ptext115 1162                                 __ptext107 17A7  
                               __ptext132 1D7B                                 __ptext124 1E92  
                               __ptext116 1FC1                                 __ptext108 16FB  
                               __ptext133 1C2F                                 __ptext125 1EE7  
                               __ptext117 10AB                                 __ptext109 1C3F  
                                ?___ftadd 0041                                 __ptext134 12A3  
                               __ptext126 14D0                                 __ptext118 1D0B  
                               __ptext135 1CBE                                 __ptext127 1C20  
                               __ptext119 113C                                 __ptext129 10F2  
                               _getRxData 0C11                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1606  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1C23  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1ED1                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 10F2             __end_of_setDimmerLights_AdjOn 13AD  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D4  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 15B7              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D99                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D00                       __end_of_setLED_Main 1377  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CD  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1C2F  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1C4B                           SwPointSelect@sw 0021  
                               clear_ram0 1C60                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 1456                                 _setTxData 0E10  
     __end_of_DimmerLights_Initialization 1CB4               _DimmerLights_Initialization 1CAA  
                      _CC2500_ClearRXFIFO 1C33                        _CC2500_ClearTXFIFO 1C37  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E92                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11E1                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10F2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1D53  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1E58  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1F1A  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1E33  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016D                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D3B  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 130B  
                   _DlyOff_Initialization 1C54                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 07FC  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D89                        __end_of_getLoad_OK 1C75  
                   _Switch_Initialization 1C97         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0845                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1EE7                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D2  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3422 0021             _getMain_All_Error_Status$3423 0023  
                __end_of_getDimmer_LoadGO 1C7D                       _Load_Initialization 1C23  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1089                          ??_LedPointSelect 0020  
                                ___ftpack 0A13             __size_of_getMain_Lights_Count 000C  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 000A  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1341  
              __end_of_setRF_DimmerLights 089E            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1C85  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002B  
                         ___lwdiv@counter 0025                                  __ptext10 1C2C  
                                __ptext11 1C1F                                  __ptext20 1EBC  
                                __ptext12 0800                                  __ptext21 1C29  
                                __ptext13 01ED                                  __ptext30 1210  
                                __ptext22 0C8B                                  __ptext14 1E7E  
                                __ptext31 10CE                                  __ptext23 0C11  
                                __ptext15 1377                                  __ptext40 1117  
                                __ptext32 0B3D                                  __ptext24 12D7  
                                __ptext16 1DEC                                  __ptext41 1F86  
                                __ptext33 0704                                  __ptext25 1E6B  
                                __ptext17 1D00                                  __ptext50 1C66  
                                __ptext42 1C26                                  __ptext34 1E58  
                                __ptext26 09B4                                  __ptext18 1C97  
                                __ptext51 0041                                  __ptext43 1CF5  
                                __ptext35 1DDB                                  __ptext27 15B7  
                                __ptext19 1DA9                                  __ptext60 1C4B  
                                __ptext52 1D3B                                  __ptext44 1E21  
                                __ptext36 1DCA                                  __ptext28 141D  
                                __ptext61 1341                                  __ptext53 1C7D  
                                __ptext45 1CEA                                  __ptext37 1E45  
                                __ptext29 1492                                  __ptext70 1C8E  
                                __ptext62 1C47                                  __ptext54 1C75  
                                __ptext46 1D53                                  __ptext38 0A74  
                                __ptext71 1F1A                                  __ptext63 1E0F  
                                __ptext55 11B6                                  __ptext47 1F34  
                                __ptext39 0BA2                                  __ptext80 0AD8  
                                __ptext72 0628                                  __ptext64 130B  
                                __ptext56 1FA3                                  __ptext48 1D47  
                                __ptext81 0D89                                  __ptext73 1CDF  
                                __ptext65 151A                                  __ptext57 13AD  
                                __ptext49 07FC                                  __ptext90 1ED1  
                                __ptext82 1C85                                  __ptext74 1F4E  
                                __ptext66 1D2F                                  __ptext58 1C23  
                                __ptext91 1C6D                                  __ptext83 0EA7  
                                __ptext75 1606                                  __ptext67 054C  
                                __ptext59 1F6A                                  __ptext92 1CB4  
                                __ptext84 0456                                  __ptext76 174F  
                                __ptext68 1D23                                  __ptext93 1270  
                                __ptext85 1089                                  __ptext77 1656  
                                __ptext69 11E1                                  __ptext94 1CAA  
                                __ptext86 0A13                                  __ptext78 0E10  
                                __ptext95 123F                                  __ptext87 13E4  
                                __ptext79 0845                                  __ptext96 1C43  
                                __ptext88 1D17                                  __ptext97 08F9  
                                __ptext89 1D6D                                  __ptext98 0956  
                                __ptext99 1568                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CEA  
            __end_of_setDimmerLights_Main 1656              __end_of_setDimmerLights_Line 1D7B  
            __end_of_setDimmerLights_SwOn 1456                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E7E                  __end_of_CC2500_SIDLEMode 1C3F  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1CD4  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 016E  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0024  
                         _CC2500_ReadByte 1F86                        _CC2500_InitPATable 1FC1  
                __end_of_setMemory_Modify 1E6B                        __end_of_setRF_Main 0D08  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 01EC                                  main@argv 01EE  
                    _getSw_KeyStatus$6012 0022                       ?_CC2500_InitPATable 0070  
                         _CC2500_PowerRST 07B8                  __size_of_getSw_KeyStatus 0011  
             __end_of_Flash_Memory_Modify 1568                         ??_getPercentValue 005C  
                             _setLog_Code 12D7               __end_of_Flash_Memory_Unlock 1C97  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 10AB  
                      __end_of_setSw_Main 035C                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 118C                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 11E1  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 1270   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 123F               __end_of_setDimmerLights_Adj 17A7  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 0013  
                       _RF_Initialization 1C26      __size_of_setDimmerLights_IntrControl 00FA  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1D2F  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00DC           __end_of_DelayOff_Initialization 1C43  
     __size_of_setDimmerLights_IntrIOC_GO 0034       __size_of_setDimmerLights_ErrorClose 005E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1C47  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 16A8          __size_of_setControl_Lights_Table 005F  
                  __end_of_DelayTimejudge 11B6               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1162                   __end_of_CC2500_ReadByte 1FA3  
            __end_of_setSw_Initialization 1DB9                           _Timeout_Counter 1E92  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1E45                __end_of_LED_Initialization 1C4B  
          __end_of_setTemp_Initialization 1C20                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1C29                     __end_of_CC2500_RxData 0C11  
                   __end_of_CC2500_TxData 0AD8                     _setLoad_AH_AL_Restore 1F6A  
                 __end_of_CC2500_PowerRST 07FC  
