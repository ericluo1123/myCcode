

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 22 10:29:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1FE0                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1FE0  3463               	retlw	99
  2163  1FE1  3402               	retlw	2
  2164  1FE2  3400               	retlw	0
  2165  1FE3  3400               	retlw	0
  2166  1FE4  3400               	retlw	0
  2167  1FE5  3400               	retlw	0
  2168  1FE6  3400               	retlw	0
  2169  1FE7  3400               	retlw	0
  2170  1FE8  3400               	retlw	0
  2171  1FE9  3400               	retlw	0
  2172  1FEA  3400               	retlw	0
  2173  1FEB  3400               	retlw	0
  2174  1FEC  34FF               	retlw	255
  2175  1FED  34FF               	retlw	255
  2176  1FEE  34FF               	retlw	255
  2177  1FEF  3400               	retlw	0
  2178  1FF0  3400               	retlw	0
  2179  1FF1  3400               	retlw	0
  2180  1FF2  3400               	retlw	0
  2181  1FF3  3400               	retlw	0
  2182  1FF4  3400               	retlw	0
  2183  1FF5  3400               	retlw	0
  2184  1FF6  3400               	retlw	0
  2185  1FF7  3400               	retlw	0
  2186  1FF8  3400               	retlw	0
  2187  1FF9  3400               	retlw	0
  2188  1FFA  3400               	retlw	0
  2189  1FFB  3400               	retlw	0
  2190  1FFC  3400               	retlw	0
  2191  1FFD  3400               	retlw	0
  2192  1FFE  3400               	retlw	0
  2193  1FFF  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  020D                     _WPUB	set	525
  2365  1069                     _WPUB1	set	4201
  2366  106A                     _WPUB2	set	4202
  2367  0396                     _IOCBF	set	918
  2368  0395                     _IOCBN	set	917
  2369  0394                     _IOCBP	set	916
  2370  1CB2                     _IOCBF2	set	7346
  2371                           
  2372                           ; #config settings
  2373  0000                     
  2374                           	psect	cinit
  2375  0015                     start_initialization:	
  2376  0015                     __initialization:	
  2377                           
  2378                           ; Clear objects allocated to BITCOMMON
  2379  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2380                           
  2381                           ; Clear objects allocated to COMMON
  2382  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2383  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2384  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK0
  2387  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  001A  30A0               	movlw	low __pbssBANK1
  2391  001B  0084               	movwf	4
  2392  001C  3000               	movlw	high __pbssBANK1
  2393  001D  0085               	movwf	5
  2394  001E  3049               	movlw	73
  2395  001F  319C  244E  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  0022  3020               	movlw	low __pbssBANK2
  2399  0023  0084               	movwf	4
  2400  0024  3001               	movlw	high __pbssBANK2
  2401  0025  0085               	movwf	5
  2402  0026  304D               	movlw	77
  2403  0027  319C  244E  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  002A  30A0               	movlw	low __pbssBANK3
  2407  002B  0084               	movwf	4
  2408  002C  3001               	movlw	high __pbssBANK3
  2409  002D  0085               	movwf	5
  2410  002E  304C               	movlw	76
  2411  002F  319C  244E  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Initialize objects allocated to BANK4
  2414  0032  30E0               	movlw	low __pidataBANK4
  2415  0033  0084               	movwf	4
  2416  0034  309F               	movlw	(high __pidataBANK4)| (0+128)
  2417  0035  0085               	movwf	5
  2418  0036  3020               	movlw	low __pdataBANK4
  2419  0037  0086               	movwf	6
  2420  0038  3002               	movlw	high __pdataBANK4
  2421  0039  0087               	movwf	7
  2422  003A  3020               	movlw	32
  2423  003B  319C  2448         	fcall	init_ram
  2424  003D                     end_of_initialization:	
  2425                           ;End of C runtime variable initialization code
  2426                           
  2427  003D                     __end_of__initialization:	
  2428  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2429  003E  0020               	movlb	0
  2430  003F  3188  2831         	ljmp	_main	;jump to C main() function
  2431                           
  2432                           	psect	bitbssCOMMON
  2433  03C0                     __pbitbssCOMMON:	
  2434  03C0                     _Receive_OK:	
  2435  03C0                     	ds	1
  2436  03C1                     _Transceive_OK:	
  2437  03C1                     	ds	1
  2438                           
  2439                           	psect	bssCOMMON
  2440  0075                     __pbssCOMMON:	
  2441  0075                     _DelayOff:	
  2442  0075                     	ds	1
  2443  0076                     _DimmerLightsIntr:	
  2444  0076                     	ds	1
  2445  0077                     _Sw:	
  2446  0077                     	ds	1
  2447                           
  2448                           	psect	bssBANK0
  2449  006F                     __pbssBANK0:	
  2450  006F                     _DimmerLights:	
  2451  006F                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _myMain:	
  2456  00A0                     	ds	14
  2457  00AE                     _Buz1:	
  2458  00AE                     	ds	12
  2459  00BA                     _RF1:	
  2460  00BA                     	ds	12
  2461  00C6                     _Dimmer:	
  2462  00C6                     	ds	3
  2463  00C9                     _WDT:	
  2464  00C9                     	ds	2
  2465  00CB                     _CRC:	
  2466  00CB                     	ds	1
  2467  00CC                     _DimmerLights11:	
  2468  00CC                     	ds	1
  2469  00CD                     _DimmerLightsIntrIOC:	
  2470  00CD                     	ds	1
  2471  00CE                     _LED:	
  2472  00CE                     	ds	1
  2473  00CF                     _RSSI:	
  2474  00CF                     	ds	1
  2475  00D0                     _Rx_Length:	
  2476  00D0                     	ds	1
  2477  00D1                     _SPI0Buffer:	
  2478  00D1                     	ds	1
  2479  00D2                     _SwDetect:	
  2480  00D2                     	ds	1
  2481  00D3                     _Tx_Length:	
  2482  00D3                     	ds	1
  2483  00D4                     _r_address:	
  2484  00D4                     	ds	1
  2485  00D5                     _r_data:	
  2486  00D5                     	ds	1
  2487  00D6                     _s_data:	
  2488  00D6                     	ds	1
  2489  00D7                     _Temp:	
  2490  00D7                     	ds	18
  2491                           
  2492                           	psect	bssBANK2
  2493  0120                     __pbssBANK2:	
  2494  0120                     _Timer1:	
  2495  0120                     	ds	3
  2496  0123                     _RF_Count:	
  2497  0123                     	ds	2
  2498  0125                     _Load:	
  2499  0125                     	ds	46
  2500  0153                     _DimmerLights1:	
  2501  0153                     	ds	17
  2502  0164                     _DlySw1:	
  2503  0164                     	ds	5
  2504  0169                     _VarErrLED:	
  2505  0169                     	ds	4
  2506                           
  2507                           	psect	bssBANK3
  2508  01A0                     __pbssBANK3:	
  2509  01A0                     _RF_Data:	
  2510  01A0                     	ds	30
  2511  01BE                     _Memory:	
  2512  01BE                     	ds	37
  2513  01E3                     _Sw1:	
  2514  01E3                     	ds	9
  2515                           
  2516                           	psect	dataBANK4
  2517  0220                     __pdataBANK4:	
  2518  0220                     __product:	
  2519  0220                     	ds	32
  2520                           
  2521                           	psect	clrtext
  2522  1C4E                     clear_ram0:	
  2523                           ;	Called with FSR0 containing the base address, and
  2524                           ;	WREG with the size to clear
  2525                           
  2526  1C4E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2527  1C4F                     clrloop0:	
  2528  1C4F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2529  1C50  3101               	addfsr 0,1
  2530  1C51  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2531  1C52  2C4F               	goto	clrloop0	;have we reached the end yet?
  2532  1C53  3400               	retlw	0	;all done for this memory range, return
  2533                           
  2534                           	psect	inittext
  2535  1C48                     init_ram:	
  2536  1C48  00FE               	movwf	126
  2537  1C49                     initloop:	
  2538  1C49  0012               	moviw fsr0++
  2539  1C4A  001E               	movwi fsr1++
  2540  1C4B  0BFE               	decfsz	126,f
  2541  1C4C  2C49               	goto	initloop
  2542  1C4D  3400               	retlw	0
  2543                           
  2544                           	psect	cstackBANK3
  2545  01EC                     __pcstackBANK3:	
  2546  01EC                     ?_main:	
  2547  01EC                     main@argc:	
  2548                           ; 2 bytes @ 0x0
  2549                           
  2550                           
  2551                           ; 2 bytes @ 0x0
  2552  01EC                     	ds	2
  2553  01EE                     main@argv:	
  2554                           
  2555                           ; 2 bytes @ 0x2
  2556  01EE                     	ds	2
  2557                           
  2558                           	psect	cstackBANK2
  2559  016D                     __pcstackBANK2:	
  2560  016D                     setRF_Main@loop_f:	
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  016D                     	ds	1
  2564  016E                     setRF_Main@Receive_OK:	
  2565                           
  2566                           ; 1 bytes @ 0x1
  2567  016E                     	ds	1
  2568  016F                     setRF_Main@error:	
  2569                           
  2570                           ; 1 bytes @ 0x2
  2571  016F                     	ds	1
  2572                           
  2573                           	psect	cstackBANK1
  2574  00E9                     __pcstackBANK1:	
  2575  00E9                     setDimmerLights_ErrorClose@count:	
  2576  00E9                     Exception_Main@count:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579                           
  2580                           ; 1 bytes @ 0x0
  2581  00E9                     	ds	1
  2582  00EA                     setDimmerLights_ErrorClose@lights:	
  2583  00EA                     Exception_Main@error:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586                           
  2587                           ; 1 bytes @ 0x1
  2588  00EA                     	ds	1
  2589  00EB                     setDimmerLights_ErrorClose@i:	
  2590  00EB                     Exception_Main@i:	
  2591                           ; 2 bytes @ 0x2
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x2
  2595  00EB                     	ds	2
  2596  00ED                     getRxData@error:	
  2597  00ED                     Exception_Main@i_3436:	
  2598                           ; 1 bytes @ 0x4
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x4
  2602  00ED                     	ds	2
  2603  00EF                     Exception_Main@lights:	
  2604                           
  2605                           ; 1 bytes @ 0x6
  2606  00EF                     	ds	1
  2607                           
  2608                           	psect	cstackCOMMON
  2609  0070                     __pcstackCOMMON:	
  2610  0070                     ?_Timeout_Counter:	
  2611  0070                     ?_set_TimeoutCleared:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_WriteByte:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteCommand:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ReadStatus:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadByte:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_PowerRST:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_InitSetREG:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitPATable:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_ClearTXFIFO:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearRXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_FrequencyCabr:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_SIDLEMode:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DlyOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_ErrorClose:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Line:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setTxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setLED_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Fosc_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IO_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_ADC_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IOC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_WDT_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_IOC_ISR:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_TMR1_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Flash_Memory_Write:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Flash_Memory_Modify:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_WDT_Clearing:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_myMain_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Temp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Load_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Switch_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getLoad_AD:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_my_MainTimer:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Switch_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Exception_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLoad_AH_AL_Restore:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_RxDisable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_DimmerValue:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_TxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_RxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_PowerOnInitial:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOffPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntrIOCPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ??_DimmerIntrIOCPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntrPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ??_DimmerIntrPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_IntrControl:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerLightsPointSelect:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setDimmerLights_SwOn:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_SwOff:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_AdjOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setDimmerLights_AdjRF:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LedPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LED_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Mcu_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_ISR:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setDimmerReClock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_Modify:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_DelayTimejudge:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getLoad_OK:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_All_Error_Status:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_LightsStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getDimmerLights_Allow_Condition:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_setPercentValue:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getPercentValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_Flash_Memory_Read:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getRF_KeyStatus:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getSw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDelayOff_GO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadGO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerLights_Line:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerLights_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerLights_AdjSw:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmer_Load_Status:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getMain_Lights_Count:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     getDimmerLights_Allow_Condition@lights:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getSw_KeyStatus@sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x0
  2958  0070                     	ds	1
  2959  0071                     DimmerIntrIOCPointSelect@lights:	
  2960  0071                     DimmerIntrPointSelect@lights:	
  2961                           ; 1 bytes @ 0x1
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x1
  2965  0071                     	ds	1
  2966  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2967  0072                     ??_setDimmerLights_IntrControl:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973                           
  2974                           ; 1 bytes @ 0x2
  2975  0072                     	ds	1
  2976  0073                     ??_IOC_ISR:	
  2977  0073                     ??_setDimmerReClock:	
  2978                           ; 0 bytes @ 0x3
  2979                           
  2980  0073                     setDimmerLights_IntrControl@lights:	
  2981                           ; 0 bytes @ 0x3
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x3
  2985  0073                     	ds	1
  2986  0074                     ??_TMR1_ISR:	
  2987  0074                     ??_ISR:	
  2988                           ; 0 bytes @ 0x4
  2989                           
  2990                           
  2991                           ; 0 bytes @ 0x4
  2992  0074                     	ds	1
  2993                           
  2994                           	psect	cstackBANK0
  2995  0020                     __pcstackBANK0:	
  2996  0020                     ??_Timeout_Counter:	
  2997  0020                     ??_set_TimeoutCleared:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_CC2500_WriteByte:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_CC2500_ReadByte:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?_DelayTime_1us:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_getLoad_OK:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_getMain_All_Error_Status:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getMain_LightsStatus:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_setDimmerLights_Line:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_setTxData:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_Fosc_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_IO_Set:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_TMR1_Set:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_ADC_Set:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_IOC_Set:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_WDT_Set:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Flash_Memory_Read:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ?_setMemory_Data:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Flash_Memory_Write:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_WDT_Clearing:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_myMain_Initialization:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Temp_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setLoad_AH_AL_Restore:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setTemp_Initialization:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setRF_Initialization:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_getRF_KeyStatus:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getSw_KeyStatus:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Buzzer_Initialization:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_Buzzer_Main:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_DelayOffPointSelect:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_DimmerLightsPointSelect:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getDimmer_LoadGO:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getDimmerLights_Line:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_getDimmer_Load_Status:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_LedPointSelect:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Flash_Memory_Unlock:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Erasing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setMemory_Modify:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setMemory_LoopSave:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_WDT_Main:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_getMain_Lights_Count:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setRF_Learn:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_TouchPower:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_SwPointSelect:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ?___bmul:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?_getBuz_GO:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ?_getAD:	
  3133                           ; 2 bytes @ 0x0
  3134                           
  3135  0020                     ?___wmul:	
  3136                           ; 2 bytes @ 0x0
  3137                           
  3138  0020                     ?___awdiv:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141  0020                     ?___lwdiv:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144  0020                     ?___ftpack:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147  0020                     getDimmer_LoadGO@loadgo:	
  3148                           ; 3 bytes @ 0x0
  3149                           
  3150  0020                     setDimmerLights_Line@lights:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     getDimmerLights_Line@line:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     getDimmer_Load_Status@status:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     getAD@adcon1:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     setMemory_Data@data:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0020                     getMain_LightsStatus@status:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     getMain_Lights_Count@count:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getLoad_OK@ok:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ___bmul@multiplicand:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     DelayTime_1us@count:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     ___wmul@multiplier:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     ___awdiv@divisor:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     ___lwdiv@divisor:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___ftpack@arg:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192                           
  3193                           ; 3 bytes @ 0x0
  3194  0020                     	ds	1
  3195  0021                     ??_getDimmerLights_Allow_Condition:	
  3196  0021                     ??_setMemory_Data:	
  3197                           ; 0 bytes @ 0x1
  3198                           
  3199  0021                     ??_RF_Initialization:	
  3200                           ; 0 bytes @ 0x1
  3201                           
  3202  0021                     ??_Mcu_Initialization:	
  3203                           ; 0 bytes @ 0x1
  3204                           
  3205  0021                     ??___bmul:	
  3206                           ; 0 bytes @ 0x1
  3207                           
  3208  0021                     CC2500_WriteByte@loop_a:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     CC2500_ReadByte@loop_b:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     DelayOffPointSelect@sw:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     DimmerLightsPointSelect@lights:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0021                     LedPointSelect@led:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     Flash_Memory_Read@i:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     Flash_Memory_Write@i:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     setMemory_Modify@command:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     setMemory_LoopSave@command:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     getMain_Lights_Count@status1:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     setLoad_AH_AL_Restore@i:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     setRF_Learn@command:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     getRF_KeyStatus@key:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     SwPointSelect@sw:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     getSw_KeyStatus@status:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     _getMain_All_Error_Status$3422:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x1
  3258  0021                     	ds	1
  3259  0022                     ??_CC2500_WriteCommand:	
  3260  0022                     ??_CC2500_ReadStatus:	
  3261                           ; 0 bytes @ 0x2
  3262                           
  3263  0022                     ??_DelayTime_1us:	
  3264                           ; 0 bytes @ 0x2
  3265                           
  3266  0022                     ?_CC2500_WriteREG:	
  3267                           ; 0 bytes @ 0x2
  3268                           
  3269  0022                     ??_DlyOff_Initialization:	
  3270                           ; 0 bytes @ 0x2
  3271                           
  3272  0022                     ??_setDimmerLights_Initialization:	
  3273                           ; 0 bytes @ 0x2
  3274                           
  3275  0022                     ?_setLED:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     ??_setLED_Main:	
  3279                           ; 0 bytes @ 0x2
  3280                           
  3281  0022                     ??_Load_Initialization:	
  3282                           ; 0 bytes @ 0x2
  3283                           
  3284  0022                     ??_getBuz_GO:	
  3285                           ; 0 bytes @ 0x2
  3286                           
  3287  0022                     ??_getDelayOff_GO:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ??_setDimmerLights_AdjOn:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_getDimmerLights_Status:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     ??_getAll_DimmerLights_AdjSw:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     CC2500_WriteREG@value:	
  3300                           ; 0 bytes @ 0x2
  3301                           
  3302  0022                     DlyOff_Initialization@sw:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     getDelayOff_GO@sw:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     setDimmerLights_AdjOn@sw:	
  3309                           ; 1 bytes @ 0x2
  3310                           
  3311  0022                     getDimmerLights_Allow_Condition@allow:	
  3312                           ; 1 bytes @ 0x2
  3313                           
  3314  0022                     getDimmerLights_Status@lights:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     setLED@command:	
  3318                           ; 1 bytes @ 0x2
  3319                           
  3320  0022                     Flash_Memory_Read@address:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     setMemory_Data@address:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     _getRF_KeyStatus$5046:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     _getSw_KeyStatus$6012:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     ___bmul@product:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0022                     DelayTime_1us@i:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338  0022                     ___wmul@multiplicand:	
  3339                           ; 2 bytes @ 0x2
  3340                           
  3341  0022                     ___awdiv@dividend:	
  3342                           ; 2 bytes @ 0x2
  3343                           
  3344  0022                     ___lwdiv@dividend:	
  3345                           ; 2 bytes @ 0x2
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x2
  3349  0022                     	ds	1
  3350  0023                     ??_CC2500_WriteREG:	
  3351  0023                     ??_setLED:	
  3352                           ; 0 bytes @ 0x3
  3353                           
  3354  0023                     ??_DelayOff_Initialization:	
  3355                           ; 0 bytes @ 0x3
  3356                           
  3357  0023                     ??_getAD:	
  3358                           ; 0 bytes @ 0x3
  3359                           
  3360  0023                     CC2500_WriteCommand@command:	
  3361                           ; 0 bytes @ 0x3
  3362                           
  3363  0023                     CC2500_ReadStatus@status_addr:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     getDelayOff_GO@go:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     setDimmerLights_Initialization@lights:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372  0023                     _getDimmerLights_Allow_Condition$2172:	
  3373                           ; 1 bytes @ 0x3
  3374                           
  3375  0023                     getDimmerLights_Status@status:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     getAll_DimmerLights_AdjSw@count:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     setLED@led:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     getAD@adcon0:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     Flash_Memory_Read@ret:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0023                     ___bmul@multiplier:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393  0023                     ___ftpack@exp:	
  3394                           ; 1 bytes @ 0x3
  3395                           
  3396  0023                     _getMain_All_Error_Status$3423:	
  3397                           ; 1 bytes @ 0x3
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x3
  3401  0023                     	ds	1
  3402  0024                     ??_CC2500_ClearTXFIFO:	
  3403  0024                     ??_CC2500_ClearRXFIFO:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_CC2500_SIDLEMode:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_DelayTimejudge:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_setLED_Initialization:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??_Flash_Memory_Modify:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??_getLoad_AD:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_getTemp_AD:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_RF_RxDisable:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_setSw_Initialization:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_CC2500_TxData:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??_CC2500_RxData:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??_DimmerLights_Initialization:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??___wmul:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     ??___awdiv:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     ??___lwdiv:	
  3446                           ; 0 bytes @ 0x4
  3447                           
  3448  0024                     CC2500_WriteREG@w_addr:	
  3449                           ; 0 bytes @ 0x4
  3450                           
  3451  0024                     setLED_Initialization@led:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0024                     setLED_Main@led:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0024                     setSw_Initialization@sw:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0024                     ___ftpack@sign:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0024                     getBuz_GO@i:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0024                     DelayTime_1us@j:	
  3467                           ; 2 bytes @ 0x4
  3468                           
  3469  0024                     getAll_DimmerLights_AdjSw@i:	
  3470                           ; 2 bytes @ 0x4
  3471                           
  3472  0024                     ___wmul@product:	
  3473                           ; 2 bytes @ 0x4
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x4
  3477  0024                     	ds	1
  3478  0025                     ??_CC2500_InitSetREG:	
  3479  0025                     ??_CC2500_InitPATable:	
  3480                           ; 0 bytes @ 0x5
  3481                           
  3482  0025                     ??_Switch_Initialization:	
  3483                           ; 0 bytes @ 0x5
  3484                           
  3485  0025                     ??___ftpack:	
  3486                           ; 0 bytes @ 0x5
  3487                           
  3488  0025                     ??_LED_Initialization:	
  3489                           ; 0 bytes @ 0x5
  3490                           
  3491  0025                     ??_LED_Main:	
  3492                           ; 0 bytes @ 0x5
  3493                           
  3494  0025                     CC2500_TxData@loop_e:	
  3495                           ; 0 bytes @ 0x5
  3496                           
  3497  0025                     CC2500_RxData@loop_f:	
  3498                           ; 1 bytes @ 0x5
  3499                           
  3500  0025                     Flash_Memory_Modify@i:	
  3501                           ; 1 bytes @ 0x5
  3502                           
  3503  0025                     getMain_All_Error_Status@command:	
  3504                           ; 1 bytes @ 0x5
  3505                           
  3506  0025                     getTemp_AD@channel:	
  3507                           ; 1 bytes @ 0x5
  3508                           
  3509  0025                     ___awdiv@counter:	
  3510                           ; 1 bytes @ 0x5
  3511                           
  3512  0025                     ___lwdiv@counter:	
  3513                           ; 1 bytes @ 0x5
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x5
  3517  0025                     	ds	1
  3518  0026                     ??_CC2500_PowerRST:	
  3519  0026                     ??_CC2500_FrequencyCabr:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0026                     ??_Flash_Memory_Main:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0026                     CC2500_InitSetREG@temp1:	
  3526                           ; 0 bytes @ 0x6
  3527                           
  3528  0026                     CC2500_InitPATable@temp:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0026                     DelayTimejudge@i:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0026                     getMain_All_Error_Status@status:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0026                     getLoad_AD@channel:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0026                     ___awdiv@sign:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0026                     ___lwdiv@quotient:	
  3547                           ; 1 bytes @ 0x6
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0x6
  3551  0026                     	ds	1
  3552  0027                     CC2500_InitSetREG@temp2:	
  3553  0027                     CC2500_InitPATable@loop_d:	
  3554                           ; 1 bytes @ 0x7
  3555                           
  3556  0027                     DelayTimejudge@j:	
  3557                           ; 1 bytes @ 0x7
  3558                           
  3559  0027                     getLoad_AD@k:	
  3560                           ; 1 bytes @ 0x7
  3561                           
  3562  0027                     ___awdiv@quotient:	
  3563                           ; 1 bytes @ 0x7
  3564                           
  3565                           
  3566                           ; 2 bytes @ 0x7
  3567  0027                     	ds	1
  3568  0028                     ??_Load_Main:	
  3569  0028                     ?___awtoft:	
  3570                           ; 0 bytes @ 0x8
  3571                           
  3572  0028                     CC2500_InitSetREG@loop_c:	
  3573                           ; 3 bytes @ 0x8
  3574                           
  3575  0028                     DelayTimejudge@k:	
  3576                           ; 1 bytes @ 0x8
  3577                           
  3578  0028                     getLoad_AD@j:	
  3579                           ; 1 bytes @ 0x8
  3580                           
  3581  0028                     ___awtoft@c:	
  3582                           ; 1 bytes @ 0x8
  3583                           
  3584                           
  3585                           ; 2 bytes @ 0x8
  3586  0028                     	ds	1
  3587  0029                     ?_setBuz:	
  3588  0029                     ??_CC2500_PowerOnInitial:	
  3589                           ; 0 bytes @ 0x9
  3590                           
  3591  0029                     DelayTimejudge@value:	
  3592                           ; 0 bytes @ 0x9
  3593                           
  3594  0029                     getLoad_AD@i:	
  3595                           ; 1 bytes @ 0x9
  3596                           
  3597  0029                     setBuz@time:	
  3598                           ; 1 bytes @ 0x9
  3599                           
  3600                           
  3601                           ; 2 bytes @ 0x9
  3602  0029                     	ds	1
  3603  002A                     Load_Main@error:	
  3604                           
  3605                           ; 1 bytes @ 0xA
  3606  002A                     	ds	1
  3607  002B                     ??_setBuz:	
  3608  002B                     ??___awtoft:	
  3609                           ; 0 bytes @ 0xB
  3610                           
  3611  002B                     Load_Main@Load_Status:	
  3612                           ; 0 bytes @ 0xB
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0xB
  3616  002B                     	ds	1
  3617  002C                     setBuz@count:	
  3618  002C                     Load_Main@i:	
  3619                           ; 1 bytes @ 0xC
  3620                           
  3621                           
  3622                           ; 2 bytes @ 0xC
  3623  002C                     	ds	1
  3624  002D                     ??_my_MainTimer:	
  3625  002D                     ??_setDimmerLights_SwOn:	
  3626                           ; 0 bytes @ 0xD
  3627                           
  3628  002D                     setDimmerLights_SwOn@sw:	
  3629                           ; 0 bytes @ 0xD
  3630                           
  3631  002D                     ___awtoft@sign:	
  3632                           ; 1 bytes @ 0xD
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0xD
  3636  002D                     	ds	1
  3637  002E                     ?___ftdiv:	
  3638  002E                     ?___ftmul:	
  3639                           ; 3 bytes @ 0xE
  3640                           
  3641  002E                     setDimmerLights_SwOn@idle:	
  3642                           ; 3 bytes @ 0xE
  3643                           
  3644  002E                     ___ftdiv@f2:	
  3645                           ; 1 bytes @ 0xE
  3646                           
  3647  002E                     ___ftmul@f1:	
  3648                           ; 3 bytes @ 0xE
  3649                           
  3650                           
  3651                           ; 3 bytes @ 0xE
  3652  002E                     	ds	3
  3653  0031                     ___ftdiv@f1:	
  3654  0031                     ___ftmul@f2:	
  3655                           ; 3 bytes @ 0x11
  3656                           
  3657                           
  3658                           ; 3 bytes @ 0x11
  3659  0031                     	ds	3
  3660  0034                     ??___ftdiv:	
  3661  0034                     ??___ftmul:	
  3662                           ; 0 bytes @ 0x14
  3663                           
  3664                           
  3665                           ; 0 bytes @ 0x14
  3666  0034                     	ds	4
  3667  0038                     ___ftdiv@cntr:	
  3668  0038                     ___ftmul@exp:	
  3669                           ; 1 bytes @ 0x18
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x18
  3673  0038                     	ds	1
  3674  0039                     ___ftdiv@f3:	
  3675  0039                     ___ftmul@f3_as_product:	
  3676                           ; 3 bytes @ 0x19
  3677                           
  3678                           
  3679                           ; 3 bytes @ 0x19
  3680  0039                     	ds	3
  3681  003C                     ___ftdiv@exp:	
  3682  003C                     ___ftmul@cntr:	
  3683                           ; 1 bytes @ 0x1C
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x1C
  3687  003C                     	ds	1
  3688  003D                     ___ftdiv@sign:	
  3689  003D                     ___ftmul@sign:	
  3690                           ; 1 bytes @ 0x1D
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x1D
  3694  003D                     	ds	1
  3695  003E                     ?___ftneg:	
  3696  003E                     ___ftneg@f1:	
  3697                           ; 3 bytes @ 0x1E
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x1E
  3701  003E                     	ds	3
  3702  0041                     ??___ftneg:	
  3703  0041                     ?___ftadd:	
  3704                           ; 0 bytes @ 0x21
  3705                           
  3706  0041                     ___ftadd@f1:	
  3707                           ; 3 bytes @ 0x21
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x21
  3711  0041                     	ds	3
  3712  0044                     ___ftadd@f2:	
  3713                           
  3714                           ; 3 bytes @ 0x24
  3715  0044                     	ds	3
  3716  0047                     ??___ftadd:	
  3717                           
  3718                           ; 0 bytes @ 0x27
  3719  0047                     	ds	4
  3720  004B                     ___ftadd@sign:	
  3721                           
  3722                           ; 1 bytes @ 0x2B
  3723  004B                     	ds	1
  3724  004C                     ___ftadd@exp2:	
  3725                           
  3726                           ; 1 bytes @ 0x2C
  3727  004C                     	ds	1
  3728  004D                     ___ftadd@exp1:	
  3729                           
  3730                           ; 1 bytes @ 0x2D
  3731  004D                     	ds	1
  3732  004E                     ?___fttol:	
  3733  004E                     ___fttol@f1:	
  3734                           ; 4 bytes @ 0x2E
  3735                           
  3736                           
  3737                           ; 3 bytes @ 0x2E
  3738  004E                     	ds	4
  3739  0052                     ??___fttol:	
  3740                           
  3741                           ; 0 bytes @ 0x32
  3742  0052                     	ds	4
  3743  0056                     ___fttol@sign1:	
  3744                           
  3745                           ; 1 bytes @ 0x36
  3746  0056                     	ds	1
  3747  0057                     ___fttol@lval:	
  3748                           
  3749                           ; 4 bytes @ 0x37
  3750  0057                     	ds	4
  3751  005B                     ___fttol@exp1:	
  3752                           
  3753                           ; 1 bytes @ 0x3B
  3754  005B                     	ds	1
  3755  005C                     ??_setPercentValue:	
  3756  005C                     ??_getPercentValue:	
  3757                           ; 0 bytes @ 0x3C
  3758                           
  3759                           
  3760                           ; 0 bytes @ 0x3C
  3761  005C                     	ds	2
  3762  005E                     getPercentValue@value:	
  3763  005E                     setPercentValue@value:	
  3764                           ; 1 bytes @ 0x3E
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3E
  3768  005E                     	ds	1
  3769  005F                     getPercentValue@i:	
  3770  005F                     setPercentValue@i:	
  3771                           ; 3 bytes @ 0x3F
  3772                           
  3773                           
  3774                           ; 3 bytes @ 0x3F
  3775  005F                     	ds	3
  3776  0062                     ?_setProductData:	
  3777  0062                     ??_setDimmerLights_AdjRF:	
  3778                           ; 0 bytes @ 0x42
  3779                           
  3780  0062                     ??_Flash_Memory_Initialization:	
  3781                           ; 0 bytes @ 0x42
  3782                           
  3783  0062                     setProductData@value:	
  3784                           ; 0 bytes @ 0x42
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x42
  3788  0062                     	ds	1
  3789  0063                     ??_setProductData:	
  3790  0063                     setDimmerLights_AdjRF@lights:	
  3791                           ; 0 bytes @ 0x43
  3792                           
  3793  0063                     Flash_Memory_Initialization@i:	
  3794                           ; 1 bytes @ 0x43
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x43
  3798  0063                     	ds	2
  3799  0065                     setProductData@address:	
  3800                           
  3801                           ; 1 bytes @ 0x45
  3802  0065                     	ds	1
  3803  0066                     ?_setRF_DimmerLights:	
  3804  0066                     ??_setTemp_Main:	
  3805                           ; 0 bytes @ 0x46
  3806                           
  3807  0066                     ??_setLog_Code:	
  3808                           ; 0 bytes @ 0x46
  3809                           
  3810  0066                     ??_setRF_DimmerValue:	
  3811                           ; 0 bytes @ 0x46
  3812                           
  3813  0066                     ?_setDelayOff_GO:	
  3814                           ; 0 bytes @ 0x46
  3815                           
  3816  0066                     setDelayOff_GO@command:	
  3817                           ; 0 bytes @ 0x46
  3818                           
  3819  0066                     setRF_DimmerLights@on:	
  3820                           ; 1 bytes @ 0x46
  3821                           
  3822                           
  3823                           ; 1 bytes @ 0x46
  3824  0066                     	ds	1
  3825  0067                     ??_setRF_DimmerLights:	
  3826  0067                     setDelayOff_GO@value:	
  3827                           ; 0 bytes @ 0x47
  3828                           
  3829  0067                     setRF_DimmerValue@lights:	
  3830                           ; 1 bytes @ 0x47
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x47
  3834  0067                     	ds	1
  3835  0068                     ??_setRFSW_AdjControl:	
  3836  0068                     ??_setDelayOff_GO:	
  3837                           ; 0 bytes @ 0x48
  3838                           
  3839  0068                     setTemp_Main@error:	
  3840                           ; 0 bytes @ 0x48
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x48
  3844  0068                     	ds	1
  3845  0069                     ??_Temp_Main:	
  3846  0069                     setDelayOff_GO@sw:	
  3847                           ; 0 bytes @ 0x49
  3848                           
  3849  0069                     setRF_DimmerLights@status:	
  3850                           ; 1 bytes @ 0x49
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x49
  3854  0069                     	ds	1
  3855  006A                     ??_setDimmerLights_SwOff:	
  3856  006A                     setDimmerLights_SwOff@sw:	
  3857                           ; 0 bytes @ 0x4A
  3858                           
  3859  006A                     setRFSW_AdjControl@status:	
  3860                           ; 1 bytes @ 0x4A
  3861                           
  3862  006A                     setRF_DimmerLights@lights:	
  3863                           ; 1 bytes @ 0x4A
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x4A
  3867  006A                     	ds	1
  3868  006B                     ??_setDimmerLights_ErrorClose:	
  3869  006B                     ?_setDimmerLights:	
  3870                           ; 0 bytes @ 0x4B
  3871                           
  3872  006B                     ?_setDimmerLights_Adj:	
  3873                           ; 0 bytes @ 0x4B
  3874                           
  3875  006B                     ??_Exception_Main:	
  3876                           ; 0 bytes @ 0x4B
  3877                           
  3878  006B                     ??_setRFSW_Control:	
  3879                           ; 0 bytes @ 0x4B
  3880                           
  3881  006B                     ??_setSw_Main:	
  3882                           ; 0 bytes @ 0x4B
  3883                           
  3884  006B                     setDimmerLights@status:	
  3885                           ; 0 bytes @ 0x4B
  3886                           
  3887  006B                     setDimmerLights_Adj@status:	
  3888                           ; 1 bytes @ 0x4B
  3889                           
  3890  006B                     setRFSW_AdjControl@sw:	
  3891                           ; 1 bytes @ 0x4B
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x4B
  3895  006B                     	ds	1
  3896  006C                     ??_DlyOff_Main:	
  3897  006C                     ??_setDimmerLights:	
  3898                           ; 0 bytes @ 0x4C
  3899                           
  3900  006C                     ??_setDimmerLights_Adj:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  006C                     setRFSW_Control@status:	
  3904                           ; 0 bytes @ 0x4C
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x4C
  3908  006C                     	ds	1
  3909  006D                     setDimmerLights@lights:	
  3910  006D                     setDimmerLights_Adj@lights:	
  3911                           ; 1 bytes @ 0x4D
  3912                           
  3913  006D                     setRFSW_Control@sw:	
  3914                           ; 1 bytes @ 0x4D
  3915                           
  3916  006D                     setSw_Main@sw:	
  3917                           ; 1 bytes @ 0x4D
  3918                           
  3919                           
  3920                           ; 1 bytes @ 0x4D
  3921  006D                     	ds	1
  3922  006E                     ??_setDimmerLights_Main:	
  3923  006E                     ??_Switch_Main:	
  3924                           ; 0 bytes @ 0x4E
  3925                           
  3926  006E                     ??_getRxData:	
  3927                           ; 0 bytes @ 0x4E
  3928                           
  3929  006E                     ??_setControl_Lights_Table:	
  3930                           ; 0 bytes @ 0x4E
  3931                           
  3932  006E                     DlyOff_Main@sw:	
  3933                           ; 0 bytes @ 0x4E
  3934                           
  3935  006E                     setDimmerLights_Main@lights:	
  3936                           ; 1 bytes @ 0x4E
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x4E
  3940  006E                     	ds	1
  3941  006F                     ??_RF_Main:	
  3942  006F                     ??_setRF_Main:	
  3943                           ; 0 bytes @ 0x4F
  3944                           
  3945  006F                     ??_DelayOff_Main:	
  3946                           ; 0 bytes @ 0x4F
  3947                           
  3948  006F                     ??_DimmerLights_Main:	
  3949                           ; 0 bytes @ 0x4F
  3950                           
  3951  006F                     ??_main:	
  3952                           ; 0 bytes @ 0x4F
  3953                           
  3954                           
  3955                           	psect	maintext
  3956  0831                     __pmaintext:	
  3957                           ; 0 bytes @ 0x4F
  3958 ;;
  3959 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3960 ;;
  3961 ;; *************** function _main *****************
  3962 ;; Defined at:
  3963 ;;		line 7 in file "../src/Main_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  argc            2    0[BANK3 ] int 
  3966 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2    0[BANK3 ] int 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 17F/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3978 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels required when called:   15
  3984 ;; This function calls:
  3985 ;;		_Buzzer_Initialization
  3986 ;;		_Buzzer_Main
  3987 ;;		_CC2500_PowerOnInitial
  3988 ;;		_DelayOff_Initialization
  3989 ;;		_DelayOff_Main
  3990 ;;		_DimmerLights_Initialization
  3991 ;;		_DimmerLights_Main
  3992 ;;		_Exception_Main
  3993 ;;		_Flash_Memory_Initialization
  3994 ;;		_Flash_Memory_Main
  3995 ;;		_LED_Initialization
  3996 ;;		_LED_Main
  3997 ;;		_Load_Initialization
  3998 ;;		_Load_Main
  3999 ;;		_Mcu_Initialization
  4000 ;;		_RF_Initialization
  4001 ;;		_RF_Main
  4002 ;;		_Switch_Initialization
  4003 ;;		_Switch_Main
  4004 ;;		_Temp_Initialization
  4005 ;;		_Temp_Main
  4006 ;;		_WDT_Main
  4007 ;;		_getLoad_AD
  4008 ;;		_getTemp_AD
  4009 ;;		_myMain_Initialization
  4010 ;;		_my_MainTimer
  4011 ;; This function is called by:
  4012 ;;		Startup code after reset
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _main
  4018  0831                     _main:	
  4019                           
  4020                           ;Main_B1.c: 8: myMain_Initialization();
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024  0831  319D  257F  3188   	fcall	_myMain_Initialization
  4025                           
  4026                           ;Main_B1.c: 9: Mcu_Initialization();
  4027  0834  319E  2616  3188   	fcall	_Mcu_Initialization
  4028                           
  4029                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4030  0837  3185  254C  3188   	fcall	_Flash_Memory_Initialization
  4031                           
  4032                           ;Main_B1.c: 11: LED_Initialization();
  4033  083A  319C  2435  3188   	fcall	_LED_Initialization
  4034                           
  4035                           ;Main_B1.c: 12: Buzzer_Initialization();
  4036  083D  319C  240B  3188   	fcall	_Buzzer_Initialization
  4037                           
  4038                           ;Main_B1.c: 14: ;;
  4039                           ;Main_B1.c: 15: Temp_Initialization();
  4040  0840  319C  2417  3188   	fcall	_Temp_Initialization
  4041                           
  4042                           ;Main_B1.c: 16: Load_Initialization();
  4043  0843  319C  240E  3188   	fcall	_Load_Initialization
  4044                           
  4045                           ;Main_B1.c: 17: ;;
  4046                           ;Main_B1.c: 18: DelayOff_Initialization();
  4047  0846  319C  242D  3188   	fcall	_DelayOff_Initialization
  4048                           
  4049                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4050  0849  319C  249F  3188   	fcall	_DimmerLights_Initialization
  4051                           
  4052                           ;Main_B1.c: 21: ;;
  4053                           ;Main_B1.c: 22: ;;
  4054                           ;Main_B1.c: 23: ;;
  4055                           ;Main_B1.c: 24: Switch_Initialization();
  4056  084C  319C  248C  3188   	fcall	_Switch_Initialization
  4057                           
  4058                           ;Main_B1.c: 25: RF_Initialization();
  4059  084F  319C  2411  3188   	fcall	_RF_Initialization
  4060                           
  4061                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4062  0852  319E  269C  3188   	fcall	_CC2500_PowerOnInitial
  4063  0855                     l10230:	
  4064                           ;Main_B1.c: 27: ;;
  4065                           ;Main_B1.c: 28: ;;
  4066                           ;Main_B1.c: 30: while (1) {
  4067                           
  4068                           
  4069                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4070  0855  0021               	movlb	1	; select bank1
  4071  0856  1C20               	btfss	_myMain^(0+128),0
  4072  0857  2860               	goto	l10234
  4073                           
  4074                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4075  0858  3005               	movlw	5
  4076  0859  318D  2508  3188   	fcall	_getLoad_AD
  4077                           
  4078                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4079  085C  3009               	movlw	9
  4080  085D  3194  2489  3188   	fcall	_getTemp_AD
  4081  0860                     l10234:	
  4082                           
  4083                           ;Main_B1.c: 57: }
  4084                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4085  0860  0022               	movlb	2	; select bank2
  4086  0861  1C20               	btfss	_Timer1^(0+256),0
  4087  0862  2855               	goto	l10230
  4088                           
  4089                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4090  0863  1020               	bcf	_Timer1^(0+256),0
  4091                           
  4092                           ;Main_B1.c: 96: my_MainTimer();
  4093  0864  3194  240F  3188   	fcall	_my_MainTimer
  4094                           
  4095                           ;Main_B1.c: 97: WDT_Main();
  4096  0867  319E  2628  3188   	fcall	_WDT_Main
  4097                           
  4098                           ;Main_B1.c: 98: ;;
  4099                           ;Main_B1.c: 99: ;;
  4100                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4101  086A  0021               	movlb	1	; select bank1
  4102  086B  1C20               	btfss	_myMain^(0+128),0
  4103  086C  2855               	goto	l10230
  4104                           
  4105                           ;Main_B1.c: 101: Flash_Memory_Main();
  4106  086D  3192  22FA  3188   	fcall	_Flash_Memory_Main
  4107                           
  4108                           ;Main_B1.c: 103: LED_Main();
  4109  0870  319C  2439  3188   	fcall	_LED_Main
  4110                           
  4111                           ;Main_B1.c: 104: Buzzer_Main();
  4112  0873  3194  24C7  3188   	fcall	_Buzzer_Main
  4113                           
  4114                           ;Main_B1.c: 106: ;;
  4115                           ;Main_B1.c: 107: Temp_Main();
  4116  0876  319C  241A  3188   	fcall	_Temp_Main
  4117                           
  4118                           ;Main_B1.c: 108: Load_Main();
  4119  0879  3180  2041  3188   	fcall	_Load_Main
  4120                           
  4121                           ;Main_B1.c: 109: ;;
  4122                           ;Main_B1.c: 111: ;;
  4123                           ;Main_B1.c: 112: DimmerLights_Main();
  4124  087C  319F  272E  3188   	fcall	_DimmerLights_Main
  4125                           
  4126                           ;Main_B1.c: 113: Switch_Main();
  4127  087F  319C  245B  3188   	fcall	_Switch_Main
  4128                           
  4129                           ;Main_B1.c: 114: ;;
  4130                           ;Main_B1.c: 115: ;;
  4131                           ;Main_B1.c: 117: RF_Main();
  4132  0882  319C  2414  3188   	fcall	_RF_Main
  4133                           
  4134                           ;Main_B1.c: 118: DelayOff_Main();
  4135  0885  319C  2431  3188   	fcall	_DelayOff_Main
  4136                           
  4137                           ;Main_B1.c: 119: ;;
  4138                           ;Main_B1.c: 120: ;;
  4139                           ;Main_B1.c: 121: Exception_Main();
  4140  0888  3186  2628  3188   	fcall	_Exception_Main
  4141  088B  2855               	goto	l10230
  4142  088C                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  140F                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 185 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  140F                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  140F  0021               	movlb	1	; select bank1
  4191  1410  1820               	btfsc	_myMain^(0+128),0
  4192  1411  2C29               	goto	l9938
  4193                           
  4194                           ;Main_B1.c: 189: myMain.PowerCount++;
  4195  1412  3001               	movlw	1
  4196  1413  0020               	movlb	0	; select bank0
  4197  1414  00AD               	movwf	??_my_MainTimer
  4198  1415  082D               	movf	??_my_MainTimer,w
  4199  1416  0021               	movlb	1	; select bank1
  4200  1417  07A1               	addwf	(_myMain^(0+128)+1),f
  4201                           
  4202                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4203  1418  0821               	movf	(_myMain^(0+128)+1),w
  4204  1419  3A96               	xorlw	150
  4205  141A  1D03               	skipz
  4206  141B  0008               	return
  4207                           
  4208                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4209  141C  01A1               	clrf	(_myMain^(0+128)+1)
  4210                           
  4211                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4212  141D  1420               	bsf	_myMain^(0+128),0
  4213                           
  4214                           ;Main_B1.c: 197: setBuz(3, 50);
  4215  141E  3032               	movlw	50
  4216  141F  0020               	movlb	0	; select bank0
  4217  1420  00A9               	movwf	setBuz@time
  4218  1421  3000               	movlw	0
  4219  1422  00AA               	movwf	setBuz@time+1
  4220  1423  3003               	movlw	3
  4221  1424  3197  274E         	fcall	_setBuz
  4222                           
  4223                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4224  1426  0021               	movlb	1	; select bank1
  4225  1427  1620               	bsf	_myMain^(0+128),4
  4226                           
  4227                           ;Main_B1.c: 207: }
  4228                           ;Main_B1.c: 208: } else {
  4229  1428  0008               	return
  4230  1429                     l9938:	
  4231                           
  4232                           ;Main_B1.c: 209: myMain.PowerCount++;
  4233  1429  3001               	movlw	1
  4234  142A  0020               	movlb	0	; select bank0
  4235  142B  00AD               	movwf	??_my_MainTimer
  4236  142C  082D               	movf	??_my_MainTimer,w
  4237  142D  0021               	movlb	1	; select bank1
  4238  142E  07A1               	addwf	(_myMain^(0+128)+1),f
  4239                           
  4240                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4241  142F  0821               	movf	(_myMain^(0+128)+1),w
  4242  1430  3A64               	xorlw	100
  4243  1431  1903               	btfsc	3,2
  4244                           
  4245                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4246  1432  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 226: }
  4249                           ;Main_B1.c: 228: myMain.Count1++;
  4250  1433  3001               	movlw	1
  4251  1434  07A4               	addwf	(_myMain^(0+128)+4),f
  4252  1435  3000               	movlw	0
  4253  1436  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4254                           
  4255                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4256  1437  3004               	movlw	4
  4257  1438  3EA0               	addlw	_myMain& (0+255)
  4258  1439  0086               	movwf	6
  4259  143A  0187               	clrf	7
  4260  143B  3F40               	moviw [0]fsr1
  4261  143C  3A64               	xorlw	100
  4262  143D  1D03               	skipz
  4263  143E  2C41               	goto	u11315
  4264  143F  3F41               	moviw [1]fsr1
  4265  1440  3A00               	xorlw	0
  4266  1441                     u11315:	
  4267  1441  1D03               	skipz
  4268  1442  0008               	return
  4269                           
  4270                           ;Main_B1.c: 230: {
  4271                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4272  1443  01A4               	clrf	(_myMain^(0+128)+4)
  4273  1444  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4274                           
  4275                           ;Main_B1.c: 243: if (myMain.Flag) {
  4276  1445  1CA0               	btfss	_myMain^(0+128),1
  4277  1446  2C49               	goto	l1398
  4278                           
  4279                           ;Main_B1.c: 244: myMain.Flag = 0;
  4280  1447  10A0               	bcf	_myMain^(0+128),1
  4281                           
  4282                           ;Main_B1.c: 253: } else {
  4283  1448  0008               	return
  4284  1449                     l1398:	
  4285                           
  4286                           ;Main_B1.c: 254: myMain.Flag = 1;
  4287  1449  14A0               	bsf	_myMain^(0+128),1
  4288  144A  0008               	return
  4289  144B                     __end_of_my_MainTimer:	
  4290                           
  4291                           	psect	text2
  4292  1D7F                     __ptext2:	
  4293 ;; *************** function _myMain_Initialization *****************
  4294 ;; Defined at:
  4295 ;;		line 170 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _myMain_Initialization
  4325  1D7F                     _myMain_Initialization:	
  4326                           
  4327                           ;Main_B1.c: 173: product = &_product;
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4331  1D7F  3020               	movlw	__product& (0+255)
  4332  1D80  0020               	movlb	0	; select bank0
  4333  1D81  00A0               	movwf	??_myMain_Initialization
  4334  1D82  0820               	movf	??_myMain_Initialization,w
  4335  1D83  00F9               	movwf	_product
  4336                           
  4337                           ;Main_B1.c: 174: product->Data[20] = 209;
  4338  1D84  30D1               	movlw	209
  4339  1D85  00A0               	movwf	??_myMain_Initialization
  4340  1D86  0879               	movf	_product,w
  4341  1D87  3E14               	addlw	20
  4342  1D88  0086               	movwf	6
  4343  1D89  3002               	movlw	2	; select bank4/5
  4344  1D8A  0087               	movwf	7
  4345  1D8B  0820               	movf	??_myMain_Initialization,w
  4346  1D8C  0081               	movwf	1
  4347  1D8D  0008               	return
  4348  1D8E                     __end_of_myMain_Initialization:	
  4349                           
  4350                           	psect	text3
  4351  1489                     __ptext3:	
  4352 ;; *************** function _getTemp_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    5[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;Total ram usage:        2 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		_getAD
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _getTemp_AD
  4384  1489                     _getTemp_AD:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4388                           ;getTemp_AD@channel stored from wreg
  4389  1489  0020               	movlb	0	; select bank0
  4390  148A  00A5               	movwf	getTemp_AD@channel
  4391                           
  4392                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4393  148B  0021               	movlb	1	; select bank1
  4394  148C  1D57               	btfss	_Temp^(0+128),2
  4395  148D  0008               	return
  4396                           
  4397                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4398  148E  30F0               	movlw	240
  4399  148F  0020               	movlb	0	; select bank0
  4400  1490  00A4               	movwf	??_getTemp_AD
  4401  1491  0824               	movf	??_getTemp_AD,w
  4402  1492  00A0               	movwf	getAD@adcon1
  4403  1493  0825               	movf	getTemp_AD@channel,w
  4404  1494  319F  27C0  3194   	fcall	_getAD
  4405  1497  0020               	movlb	0	; select bank0
  4406  1498  0821               	movf	?_getAD+1,w
  4407  1499  0021               	movlb	1	; select bank1
  4408  149A  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4409  149B  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4410  149C  0020               	movlb	0	; select bank0
  4411  149D  0820               	movf	?_getAD,w
  4412  149E  0021               	movlb	1	; select bank1
  4413  149F  01E3               	clrf	(_Temp^(0+128)+12)
  4414  14A0  07E3               	addwf	(_Temp^(0+128)+12),f
  4415                           
  4416                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4417  14A1  300C               	movlw	12
  4418  14A2  3ED7               	addlw	_Temp& (0+255)
  4419  14A3  0086               	movwf	6
  4420  14A4  0187               	clrf	7
  4421  14A5  0016               	moviw fsr1++
  4422  14A6  0401               	iorwf	1,w
  4423  14A7  1903               	skipnz
  4424  14A8  0008               	return
  4425                           
  4426                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4427  14A9  0864               	movf	((_Temp+1)^(0+128)+12),w
  4428  14AA  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4429  14AB  1D03               	skipz
  4430  14AC  2CAF               	goto	u11265
  4431  14AD  0863               	movf	(_Temp^(0+128)+12),w
  4432  14AE  025F               	subwf	(_Temp^(0+128)+8),w
  4433  14AF                     u11265:	
  4434  14AF  1803               	skipnc
  4435  14B0  2CB8               	goto	l9920
  4436                           
  4437                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4438  14B1  0864               	movf	((_Temp+1)^(0+128)+12),w
  4439  14B2  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4440  14B3  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4441  14B4  0863               	movf	(_Temp^(0+128)+12),w
  4442  14B5  01DF               	clrf	(_Temp^(0+128)+8)
  4443  14B6  07DF               	addwf	(_Temp^(0+128)+8),f
  4444                           
  4445                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4446  14B7  0008               	return
  4447  14B8                     l9920:	
  4448  14B8  0864               	movf	((_Temp+1)^(0+128)+12),w
  4449  14B9  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4450  14BA  1D03               	skipz
  4451  14BB  2CBE               	goto	u11275
  4452  14BC  0863               	movf	(_Temp^(0+128)+12),w
  4453  14BD  0261               	subwf	(_Temp^(0+128)+10),w
  4454  14BE                     u11275:	
  4455  14BE  1803               	skipnc
  4456  14BF  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4459  14C0  0864               	movf	((_Temp+1)^(0+128)+12),w
  4460  14C1  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4461  14C2  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4462  14C3  0863               	movf	(_Temp^(0+128)+12),w
  4463  14C4  01E1               	clrf	(_Temp^(0+128)+10)
  4464  14C5  07E1               	addwf	(_Temp^(0+128)+10),f
  4465  14C6  0008               	return
  4466  14C7                     __end_of_getTemp_AD:	
  4467                           
  4468                           	psect	text4
  4469  0D08                     __ptext4:	
  4470 ;; *************** function _getLoad_AD *****************
  4471 ;; Defined at:
  4472 ;;		line 15 in file "../src/OverLoad_B1.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  channel         1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  channel         1    6[BANK0 ] unsigned char 
  4477 ;;  i               1    9[BANK0 ] unsigned char 
  4478 ;;  j               1    8[BANK0 ] unsigned char 
  4479 ;;  k               1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_getAD
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _getLoad_AD
  4505  0D08                     _getLoad_AD:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;getLoad_AD@channel stored from wreg
  4510  0D08  0020               	movlb	0	; select bank0
  4511  0D09  00A6               	movwf	getLoad_AD@channel
  4512                           
  4513                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4514  0D0A  01A9               	clrf	getLoad_AD@i
  4515  0D0B  01A8               	clrf	getLoad_AD@j
  4516  0D0C  01A7               	clrf	getLoad_AD@k
  4517                           
  4518                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4519  0D0D  0022               	movlb	2	; select bank2
  4520  0D0E  1E25               	btfss	_Load^(0+256),4
  4521  0D0F  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4524  0D10  30F3               	movlw	243
  4525  0D11  0020               	movlb	0	; select bank0
  4526  0D12  00A4               	movwf	??_getLoad_AD
  4527  0D13  0824               	movf	??_getLoad_AD,w
  4528  0D14  00A0               	movwf	getAD@adcon1
  4529  0D15  0826               	movf	getLoad_AD@channel,w
  4530  0D16  319F  27C0  318D   	fcall	_getAD
  4531  0D19  0020               	movlb	0	; select bank0
  4532  0D1A  0821               	movf	?_getAD+1,w
  4533  0D1B  0022               	movlb	2	; select bank2
  4534  0D1C  01C7               	clrf	((_Load+1)^(0+256)+33)
  4535  0D1D  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4536  0D1E  0020               	movlb	0	; select bank0
  4537  0D1F  0820               	movf	?_getAD,w
  4538  0D20  0022               	movlb	2	; select bank2
  4539  0D21  01C6               	clrf	(_Load^(0+256)+33)
  4540  0D22  07C6               	addwf	(_Load^(0+256)+33),f
  4541                           
  4542                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4543  0D23  0020               	movlb	0	; select bank0
  4544  0D24  01A9               	clrf	getLoad_AD@i
  4545  0D25  3004               	movlw	4
  4546  0D26  0229               	subwf	getLoad_AD@i,w
  4547  0D27  1803               	btfsc	3,0
  4548  0D28  2D56               	goto	l9890
  4549  0D29                     l9878:	
  4550                           
  4551                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4552  0D29  3529               	lslf	getLoad_AD@i,w
  4553  0D2A  3E30               	addlw	(_Load+11)& (0+255)
  4554  0D2B  0086               	movwf	6
  4555  0D2C  3001               	movlw	1	; select bank2/3
  4556  0D2D  0087               	movwf	7
  4557  0D2E  3F40               	moviw [0]fsr1
  4558  0D2F  00A4               	movwf	??_getLoad_AD
  4559  0D30  3F41               	moviw [1]fsr1
  4560  0D31  00A5               	movwf	??_getLoad_AD+1
  4561  0D32  0022               	movlb	2	; select bank2
  4562  0D33  0847               	movf	((_Load+1)^(0+256)+33),w
  4563  0D34  0020               	movlb	0	; select bank0
  4564  0D35  0225               	subwf	??_getLoad_AD+1,w
  4565  0D36  1D03               	skipz
  4566  0D37  2D3C               	goto	u11165
  4567  0D38  0022               	movlb	2	; select bank2
  4568  0D39  0846               	movf	(_Load^(0+256)+33),w
  4569  0D3A  0020               	movlb	0	; select bank0
  4570  0D3B  0224               	subwf	??_getLoad_AD,w
  4571  0D3C                     u11165:	
  4572  0D3C  1803               	skipnc
  4573  0D3D  2D4E               	goto	l9886
  4574  0D3E  08A8               	movf	getLoad_AD@j,f
  4575  0D3F  1D03               	skipz
  4576  0D40  2D4E               	goto	l9886
  4577                           
  4578                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4579  0D41  3529               	lslf	getLoad_AD@i,w
  4580  0D42  3E30               	addlw	(_Load+11)& (0+255)
  4581  0D43  0086               	movwf	6
  4582  0D44  3001               	movlw	1	; select bank2/3
  4583  0D45  0087               	movwf	7
  4584  0D46  0022               	movlb	2	; select bank2
  4585  0D47  0846               	movf	(_Load^(0+256)+33),w
  4586  0D48  3FC0               	movwi [0]fsr1
  4587  0D49  0847               	movf	((_Load+1)^(0+256)+33),w
  4588  0D4A  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;OverLoad_B1.c: 24: j = 1;
  4591  0D4B  0020               	movlb	0	; select bank0
  4592  0D4C  01A8               	clrf	getLoad_AD@j
  4593  0D4D  0AA8               	incf	getLoad_AD@j,f
  4594  0D4E                     l9886:	
  4595  0D4E  3001               	movlw	1
  4596  0D4F  00A4               	movwf	??_getLoad_AD
  4597  0D50  0824               	movf	??_getLoad_AD,w
  4598  0D51  07A9               	addwf	getLoad_AD@i,f
  4599  0D52  3004               	movlw	4
  4600  0D53  0229               	subwf	getLoad_AD@i,w
  4601  0D54  1C03               	skipc
  4602  0D55  2D29               	goto	l9878
  4603  0D56                     l9890:	
  4604                           
  4605                           ;OverLoad_B1.c: 25: }
  4606                           ;OverLoad_B1.c: 26: }
  4607                           ;OverLoad_B1.c: 27: if (j == 0) {
  4608  0D56  08A8               	movf	getLoad_AD@j,f
  4609  0D57  1D03               	skipz
  4610  0D58  0008               	return
  4611                           
  4612                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4613  0D59  01A9               	clrf	getLoad_AD@i
  4614  0D5A                     L1:	
  4615  0D5A  3004               	movlw	4
  4616  0D5B  0229               	subwf	getLoad_AD@i,w
  4617  0D5C  1803               	btfsc	3,0
  4618  0D5D  0008               	return
  4619                           
  4620                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4621  0D5E  3529               	lslf	getLoad_AD@i,w
  4622  0D5F  3E3A               	addlw	(_Load+21)& (0+255)
  4623  0D60  0086               	movwf	6
  4624  0D61  3001               	movlw	1	; select bank2/3
  4625  0D62  0087               	movwf	7
  4626  0D63  3F40               	moviw [0]fsr1
  4627  0D64  00A4               	movwf	??_getLoad_AD
  4628  0D65  3F41               	moviw [1]fsr1
  4629  0D66  00A5               	movwf	??_getLoad_AD+1
  4630  0D67  0825               	movf	??_getLoad_AD+1,w
  4631  0D68  0022               	movlb	2	; select bank2
  4632  0D69  0247               	subwf	((_Load+1)^(0+256)+33),w
  4633  0D6A  1D03               	skipz
  4634  0D6B  2D70               	goto	u11215
  4635  0D6C  0020               	movlb	0	; select bank0
  4636  0D6D  0824               	movf	??_getLoad_AD,w
  4637  0D6E  0022               	movlb	2	; select bank2
  4638  0D6F  0246               	subwf	(_Load^(0+256)+33),w
  4639  0D70                     u11215:	
  4640  0D70  1803               	skipnc
  4641  0D71  2D83               	goto	l9906
  4642  0D72  0020               	movlb	0	; select bank0
  4643  0D73  08A7               	movf	getLoad_AD@k,f
  4644  0D74  1D03               	skipz
  4645  0D75  2D83               	goto	l9906
  4646                           
  4647                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4648  0D76  3529               	lslf	getLoad_AD@i,w
  4649  0D77  3E3A               	addlw	(_Load+21)& (0+255)
  4650  0D78  0086               	movwf	6
  4651  0D79  3001               	movlw	1	; select bank2/3
  4652  0D7A  0087               	movwf	7
  4653  0D7B  0022               	movlb	2	; select bank2
  4654  0D7C  0846               	movf	(_Load^(0+256)+33),w
  4655  0D7D  3FC0               	movwi [0]fsr1
  4656  0D7E  0847               	movf	((_Load+1)^(0+256)+33),w
  4657  0D7F  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;OverLoad_B1.c: 31: k = 1;
  4660  0D80  0020               	movlb	0	; select bank0
  4661  0D81  01A7               	clrf	getLoad_AD@k
  4662  0D82  0AA7               	incf	getLoad_AD@k,f
  4663  0D83                     l9906:	
  4664  0D83  3001               	movlw	1
  4665  0D84  0020               	movlb	0	; select bank0
  4666  0D85  00A4               	movwf	??_getLoad_AD
  4667  0D86  0824               	movf	??_getLoad_AD,w
  4668  0D87  07A9               	addwf	getLoad_AD@i,f
  4669  0D88  2D5A               	goto	L1
  4670  0D89                     __end_of_getLoad_AD:	
  4671                           
  4672                           	psect	text5
  4673  1FC0                     __ptext5:	
  4674 ;; *************** function _getAD *****************
  4675 ;; Defined at:
  4676 ;;		line 454 in file "../src/MCU_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  adcon0          1    wreg     unsigned char 
  4679 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[BANK0 ] int 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_Timeout_Counter
  4700 ;;		_set_TimeoutCleared
  4701 ;; This function is called by:
  4702 ;;		_getLoad_AD
  4703 ;;		_getTemp_AD
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getAD
  4709  1FC0                     _getAD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getAD@adcon0 stored from wreg
  4714  1FC0  0020               	movlb	0	; select bank0
  4715  1FC1  00A3               	movwf	getAD@adcon0
  4716                           
  4717                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4718  1FC2  0823               	movf	getAD@adcon0,w
  4719  1FC3  0021               	movlb	1	; select bank1
  4720  1FC4  009D               	movwf	29	;volatile
  4721                           
  4722                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4723  1FC5  0020               	movlb	0	; select bank0
  4724  1FC6  0820               	movf	getAD@adcon1,w
  4725  1FC7  0021               	movlb	1	; select bank1
  4726  1FC8  009E               	movwf	30	;volatile
  4727                           
  4728                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4729  1FC9  149D               	bsf	29,1	;volatile
  4730                           
  4731                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4732  1FCA  2FCE               	goto	l9380
  4733  1FCB                     l9378:	
  4734                           
  4735                           ;MCU_B1.c: 459: Timeout_Counter();
  4736  1FCB  319E  2687  319F   	fcall	_Timeout_Counter
  4737  1FCE                     l9380:	
  4738  1FCE  0021               	movlb	1	; select bank1
  4739  1FCF  1C9D               	btfss	29,1	;volatile
  4740  1FD0  2FD3               	goto	l9384
  4741  1FD1  1D2B               	btfss	(_myMain^(0+128)+11),2
  4742  1FD2  2FCB               	goto	l9378
  4743  1FD3                     l9384:	
  4744                           
  4745                           ;MCU_B1.c: 460: };
  4746                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4747  1FD3  319C  243D         	fcall	_set_TimeoutCleared
  4748                           
  4749                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4750  1FD5  0021               	movlb	1	; select bank1
  4751  1FD6  081C               	movf	28,w	;volatile
  4752  1FD7  0020               	movlb	0	; select bank0
  4753  1FD8  01A1               	clrf	?_getAD+1
  4754  1FD9  07A1               	addwf	?_getAD+1,f
  4755  1FDA  0021               	movlb	1	; select bank1
  4756  1FDB  081B               	movf	27,w	;volatile
  4757  1FDC  0020               	movlb	0	; select bank0
  4758  1FDD  01A0               	clrf	?_getAD
  4759  1FDE  07A0               	addwf	?_getAD,f
  4760  1FDF  0008               	return
  4761  1FE0                     __end_of_getAD:	
  4762                           
  4763                           	psect	text6
  4764  1E28                     __ptext6:	
  4765 ;; *************** function _WDT_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 1098 in file "../src/MCU_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        1 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_WDT_Clearing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _WDT_Main
  4797  1E28                     _WDT_Main:	
  4798                           
  4799                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4803  1E28  0021               	movlb	1	; select bank1
  4804  1E29  1C49               	btfss	_WDT^(0+128),0
  4805  1E2A  0008               	return
  4806                           
  4807                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4808  1E2B  3001               	movlw	1
  4809  1E2C  02CA               	subwf	(_WDT^(0+128)+1),f
  4810  1E2D  084A               	movf	(_WDT^(0+128)+1),w
  4811  1E2E  3AFF               	xorlw	255
  4812  1E2F  1903               	skipnz
  4813  1E30  0008               	return
  4814                           
  4815                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4816  1E31  3064               	movlw	100
  4817  1E32  0020               	movlb	0	; select bank0
  4818  1E33  00A0               	movwf	??_WDT_Main
  4819  1E34  0820               	movf	??_WDT_Main,w
  4820  1E35  0021               	movlb	1	; select bank1
  4821  1E36  00CA               	movwf	(_WDT^(0+128)+1)
  4822                           
  4823                           ;MCU_B1.c: 1102: WDT_Clearing();
  4824  1E37  3180  2002         	fcall	_WDT_Clearing
  4825  1E39  0008               	return
  4826  1E3A                     __end_of_WDT_Main:	
  4827                           
  4828                           	psect	text7
  4829  0002                     __ptext7:	
  4830 ;; *************** function _WDT_Clearing *****************
  4831 ;; Defined at:
  4832 ;;		line 1108 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		None
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_WDT_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Clearing
  4862  0002                     _WDT_Clearing:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _WDT_Clearing: []
  4866  0002  0064               	clrwdt	;# 
  4867  0003  0008               	return
  4868  0004                     __end_of_WDT_Clearing:	
  4869                           
  4870                           	psect	text8
  4871  1C1A                     __ptext8:	
  4872 ;; *************** function _Temp_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    8
  4895 ;; This function calls:
  4896 ;;		_setTemp_Main
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Temp_Main
  4904  1C1A                     _Temp_Main:	
  4905                           
  4906                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  1C1A  318F  2750         	fcall	_setTemp_Main
  4911  1C1C  0008               	return
  4912  1C1D                     __end_of_Temp_Main:	
  4913                           
  4914                           	psect	text9
  4915  0F50                     __ptext9:	
  4916 ;; *************** function _setTemp_Main *****************
  4917 ;; Defined at:
  4918 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  error           1   72[BANK0 ] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		_getMain_All_Error_Status
  4941 ;;		_setBuz
  4942 ;;		_setProductData
  4943 ;; This function is called by:
  4944 ;;		_Temp_Main
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _setTemp_Main
  4950  0F50                     _setTemp_Main:	
  4951                           
  4952                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4956  0F50  3000               	movlw	0
  4957  0F51  3192  225F  318F   	fcall	_getMain_All_Error_Status
  4958  0F54  0020               	movlb	0	; select bank0
  4959  0F55  00E6               	movwf	??_setTemp_Main
  4960  0F56  0866               	movf	??_setTemp_Main,w
  4961  0F57  00E8               	movwf	setTemp_Main@error
  4962                           
  4963                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4964  0F58  0021               	movlb	1	; select bank1
  4965  0F59  1C57               	btfss	_Temp^(0+128),0
  4966  0F5A  2FFC               	goto	l1723
  4967                           
  4968                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4969  0F5B  1957               	btfsc	_Temp^(0+128),2
  4970  0F5C  2F6C               	goto	l9446
  4971                           
  4972                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4973  0F5D  3001               	movlw	1
  4974  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4975  0F5F  3000               	movlw	0
  4976  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4977                           
  4978                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4979  0F61  3001               	movlw	1
  4980  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4981  0F63  30F4               	movlw	244
  4982  0F64  1903               	skipnz
  4983  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4984  0F66  1C03               	skipc
  4985  0F67  0008               	return
  4986                           
  4987                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4988  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4989  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4990                           
  4991                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4992  0F6A  1557               	bsf	_Temp^(0+128),2
  4993                           
  4994                           ;OverTemperature_B1.c: 70: }
  4995                           ;OverTemperature_B1.c: 71: } else {
  4996  0F6B  0008               	return
  4997  0F6C                     l9446:	
  4998                           
  4999                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5000  0F6C  3001               	movlw	1
  5001  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5002  0F6E  3000               	movlw	0
  5003  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5004                           
  5005                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5006  0F70  3000               	movlw	0
  5007  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5008  0F72  3005               	movlw	5
  5009  0F73  1903               	skipnz
  5010  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5011  0F75  1C03               	skipc
  5012  0F76  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5015  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5016  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5017                           
  5018                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5019  0F79  3008               	movlw	8
  5020  0F7A  3ED7               	addlw	_Temp& (0+255)
  5021  0F7B  0086               	movwf	6
  5022  0F7C  0187               	clrf	7
  5023  0F7D  0016               	moviw fsr1++
  5024  0F7E  0401               	iorwf	1,w
  5025  0F7F  1903               	skipnz
  5026  0F80  2FF6               	goto	l1728
  5027  0F81  300A               	movlw	10
  5028  0F82  3ED7               	addlw	_Temp& (0+255)
  5029  0F83  0086               	movwf	6
  5030  0F84  0187               	clrf	7
  5031  0F85  0016               	moviw fsr1++
  5032  0F86  0401               	iorwf	1,w
  5033  0F87  1903               	skipnz
  5034  0F88  2FF6               	goto	l1728
  5035                           
  5036                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5037  0F89  1157               	bcf	_Temp^(0+128),2
  5038                           
  5039                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5040  0F8A  300A               	movlw	10
  5041  0F8B  3ED7               	addlw	_Temp& (0+255)
  5042  0F8C  0086               	movwf	6
  5043  0F8D  0187               	clrf	7
  5044  0F8E  3008               	movlw	8
  5045  0F8F  3ED7               	addlw	_Temp& (0+255)
  5046  0F90  0084               	movwf	4
  5047  0F91  0185               	clrf	5
  5048  0F92  3F40               	moviw [0]fsr1
  5049  0F93  0700               	addwf	0,w
  5050  0F94  0020               	movlb	0	; select bank0
  5051  0F95  00E6               	movwf	??_setTemp_Main
  5052  0F96  3101               	addfsr 0,1
  5053  0F97  3F41               	moviw [1]fsr1
  5054  0F98  3D00               	addwfc	0,w
  5055  0F99  00E7               	movwf	??_setTemp_Main+1
  5056  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5057  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5058  0F9C  0866               	movf	??_setTemp_Main,w
  5059  0F9D  0021               	movlb	1	; select bank1
  5060  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5061  0F9F  0020               	movlb	0	; select bank0
  5062  0FA0  0867               	movf	??_setTemp_Main+1,w
  5063  0FA1  0021               	movlb	1	; select bank1
  5064  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5065                           
  5066                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5067  0FA3  3090               	movlw	144
  5068  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5069  0FA5  3001               	movlw	1
  5070  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5071                           
  5072                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5073  0FA7  3059               	movlw	89
  5074  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5075  0FA9  3001               	movlw	1
  5076  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5077                           
  5078                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5079  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5080  0FAC  2FCD               	goto	l9478
  5081                           
  5082                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5083  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5084  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5085  0FAF  1D03               	skipz
  5086  0FB0  2FB3               	goto	u10405
  5087  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5088  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5089  0FB3                     u10405:	
  5090  0FB3  1C03               	skipc
  5091  0FB4  2FCB               	goto	l9476
  5092                           
  5093                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5094  0FB5  3001               	movlw	1
  5095  0FB6  0020               	movlb	0	; select bank0
  5096  0FB7  00E6               	movwf	??_setTemp_Main
  5097  0FB8  0866               	movf	??_setTemp_Main,w
  5098  0FB9  0021               	movlb	1	; select bank1
  5099  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5100                           
  5101                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5102  0FBB  3003               	movlw	3
  5103  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5104  0FBD  1C03               	skipc
  5105  0FBE  2FE3               	goto	l9490
  5106                           
  5107                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5108  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5109                           
  5110                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5111  0FC0  10D7               	bcf	_Temp^(0+128),1
  5112                           
  5113                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5114  0FC1  3064               	movlw	100
  5115  0FC2  0020               	movlb	0	; select bank0
  5116  0FC3  00A9               	movwf	setBuz@time
  5117  0FC4  3000               	movlw	0
  5118  0FC5  00AA               	movwf	setBuz@time+1
  5119  0FC6  3002               	movlw	2
  5120  0FC7  3197  274E  318F   	fcall	_setBuz
  5121                           
  5122                           ;OverTemperature_B1.c: 103: }
  5123                           ;OverTemperature_B1.c: 104: } else {
  5124  0FCA  2FE3               	goto	l9490
  5125  0FCB                     l9476:	
  5126                           
  5127                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5128  0FCB  0021               	movlb	1	; select bank1
  5129  0FCC  2FE2               	goto	l9488
  5130  0FCD                     l9478:	
  5131                           ;OverTemperature_B1.c: 106: }
  5132                           ;OverTemperature_B1.c: 107: } else {
  5133                           
  5134                           
  5135                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5136  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5137  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5138  0FCF  1D03               	skipz
  5139  0FD0  2FD3               	goto	u10425
  5140  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5141  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5142  0FD3                     u10425:	
  5143  0FD3  1C03               	skipc
  5144  0FD4  2FE2               	goto	l9488
  5145                           
  5146                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5147  0FD5  3001               	movlw	1
  5148  0FD6  0020               	movlb	0	; select bank0
  5149  0FD7  00E6               	movwf	??_setTemp_Main
  5150  0FD8  0866               	movf	??_setTemp_Main,w
  5151  0FD9  0021               	movlb	1	; select bank1
  5152  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5153                           
  5154                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5155  0FDB  3003               	movlw	3
  5156  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5157  0FDD  1C03               	skipc
  5158  0FDE  2FE3               	goto	l9490
  5159                           
  5160                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5161  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5162                           
  5163                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5164  0FE0  14D7               	bsf	_Temp^(0+128),1
  5165                           
  5166                           ;OverTemperature_B1.c: 113: }
  5167                           ;OverTemperature_B1.c: 114: } else {
  5168  0FE1  2FE3               	goto	l9490
  5169  0FE2                     l9488:	
  5170                           
  5171                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5172  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5173  0FE3                     l9490:	
  5174                           
  5175                           ;OverTemperature_B1.c: 116: }
  5176                           ;OverTemperature_B1.c: 117: }
  5177                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5178  0FE3  0021               	movlb	1	; select bank1
  5179  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FE5  0020               	movlb	0	; select bank0
  5181  0FE6  00E6               	movwf	??_setTemp_Main
  5182  0FE7  0866               	movf	??_setTemp_Main,w
  5183  0FE8  00E2               	movwf	setProductData@value
  5184  0FE9  3018               	movlw	24
  5185  0FEA  319D  2554  318F   	fcall	_setProductData
  5186                           
  5187                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5188  0FED  0021               	movlb	1	; select bank1
  5189  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5190  0FEF  0020               	movlb	0	; select bank0
  5191  0FF0  00E6               	movwf	??_setTemp_Main
  5192  0FF1  0866               	movf	??_setTemp_Main,w
  5193  0FF2  00E2               	movwf	setProductData@value
  5194  0FF3  3019               	movlw	25
  5195  0FF4  319D  2554         	fcall	_setProductData
  5196  0FF6                     l1728:	
  5197                           
  5198                           ;OverTemperature_B1.c: 135: }
  5199                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5200  0FF6  0021               	movlb	1	; select bank1
  5201  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5202  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5203                           
  5204                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5205  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5206  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5207                           
  5208                           ;OverTemperature_B1.c: 138: }
  5209                           ;OverTemperature_B1.c: 139: }
  5210                           ;OverTemperature_B1.c: 141: } else {
  5211  0FFB  0008               	return
  5212  0FFC                     l1723:	
  5213                           
  5214                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5215  0FFC  1C20               	btfss	_myMain^(0+128),0
  5216  0FFD  0008               	return
  5217                           
  5218                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5219  0FFE  1457               	bsf	_Temp^(0+128),0
  5220  0FFF  0008               	return
  5221  1000                     __end_of_setTemp_Main:	
  5222                           
  5223                           	psect	text10
  5224  1C17                     __ptext10:	
  5225 ;; *************** function _Temp_Initialization *****************
  5226 ;; Defined at:
  5227 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    6
  5248 ;; This function calls:
  5249 ;;		_setTemp_Initialization
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _Temp_Initialization
  5257  1C17                     _Temp_Initialization:	
  5258                           
  5259                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5263  1C17  319C  240A         	fcall	_setTemp_Initialization
  5264  1C19  0008               	return
  5265  1C1A                     __end_of_Temp_Initialization:	
  5266                           
  5267                           	psect	text11
  5268  1C0A                     __ptext11:	
  5269 ;; *************** function _setTemp_Initialization *****************
  5270 ;; Defined at:
  5271 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		None
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    5
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_Temp_Initialization
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _setTemp_Initialization
  5301  1C0A                     _setTemp_Initialization:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _setTemp_Initialization: []
  5305  1C0A  0008               	return
  5306  1C0B                     __end_of_setTemp_Initialization:	
  5307                           
  5308                           	psect	text12
  5309  1C5B                     __ptext12:	
  5310 ;; *************** function _Switch_Main *****************
  5311 ;; Defined at:
  5312 ;;		line 72 in file "../src/Switch_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   10
  5333 ;; This function calls:
  5334 ;;		_TouchPower
  5335 ;;		_setSw_Main
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _Switch_Main
  5343  1C5B                     _Switch_Main:	
  5344                           
  5345                           ;Switch_B1.c: 75: setSw_Main(1);
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5349  1C5B  3001               	movlw	1
  5350  1C5C  3181  21ED  319C   	fcall	_setSw_Main
  5351                           
  5352                           ;Switch_B1.c: 87: TouchPower();
  5353  1C5F  3190  2066         	fcall	_TouchPower
  5354  1C61  0008               	return
  5355  1C62                     __end_of_Switch_Main:	
  5356                           
  5357                           	psect	text13
  5358  01ED                     __ptext13:	
  5359 ;; *************** function _setSw_Main *****************
  5360 ;; Defined at:
  5361 ;;		line 121 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1   77[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        3 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    9
  5382 ;; This function calls:
  5383 ;;		_SwPointSelect
  5384 ;;		_getMain_All_Error_Status
  5385 ;;		_getSw_KeyStatus
  5386 ;;		_setBuz
  5387 ;;		_setDimmerLights_AdjOn
  5388 ;;		_setDimmerLights_SwOff
  5389 ;;		_setDimmerLights_SwOn
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  01ED                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  01ED  0020               	movlb	0	; select bank0
  5404  01EE  00ED               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5407  01EF  086D               	movf	setSw_Main@sw,w
  5408  01F0  319C  24F5  3181   	fcall	_SwPointSelect
  5409                           
  5410                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5411  01F3  0877               	movf	_Sw,w
  5412  01F4  0086               	movwf	6
  5413  01F5  3001               	movlw	1	; select bank2/3
  5414  01F6  0087               	movwf	7
  5415  01F7  1C01               	btfss	1,0
  5416  01F8  2B53               	goto	l2416
  5417                           
  5418                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5419  01F9  3000               	movlw	0
  5420  01FA  3192  225F  3181   	fcall	_getMain_All_Error_Status
  5421  01FD  3800               	iorlw	0
  5422  01FE  1D03               	skipz
  5423  01FF  2A1B               	goto	l9590
  5424                           
  5425                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5426  0200  0A77               	incf	_Sw,w
  5427  0201  0086               	movwf	6
  5428  0202  3001               	movlw	1	; select bank2/3
  5429  0203  0087               	movwf	7
  5430  0204  1081               	bcf	1,1
  5431                           
  5432                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5433  0205  0020               	movlb	0	; select bank0
  5434  0206  086D               	movf	setSw_Main@sw,w
  5435  0207  319D  25E1  3181   	fcall	_getSw_KeyStatus
  5436  020A  3A01               	xorlw	1
  5437  020B  3000               	movlw	0
  5438  020C  1903               	skipnz
  5439  020D  3001               	movlw	1
  5440  020E  0020               	movlb	0	; select bank0
  5441  020F  00EB               	movwf	??_setSw_Main
  5442  0210  0877               	movf	_Sw,w
  5443  0211  0086               	movwf	6
  5444  0212  3001               	movlw	1	; select bank2/3
  5445  0213  0087               	movwf	7
  5446  0214  0DEB               	rlf	??_setSw_Main,f
  5447  0215  0801               	movf	1,w
  5448  0216  066B               	xorwf	??_setSw_Main,w
  5449  0217  39FD               	andlw	-3
  5450  0218  066B               	xorwf	??_setSw_Main,w
  5451  0219  0081               	movwf	1
  5452                           
  5453                           ;Switch_B1.c: 128: } else {
  5454  021A  2A30               	goto	l2418
  5455  021B                     l9590:	
  5456                           
  5457                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5458  021B  0A77               	incf	_Sw,w
  5459  021C  0086               	movwf	6
  5460  021D  3001               	movlw	1	; select bank2/3
  5461  021E  0087               	movwf	7
  5462  021F  1881               	btfsc	1,1
  5463  0220  2A30               	goto	l2418
  5464                           
  5465                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5466  0221  0A77               	incf	_Sw,w
  5467  0222  0086               	movwf	6
  5468  0223  3001               	movlw	1	; select bank2/3
  5469  0224  0087               	movwf	7
  5470  0225  1481               	bsf	1,1
  5471                           
  5472                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5473  0226  0877               	movf	_Sw,w
  5474  0227  0086               	movwf	6
  5475  0228  3001               	movlw	1	; select bank2/3
  5476  0229  0087               	movwf	7
  5477  022A  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5480  022B  0877               	movf	_Sw,w
  5481  022C  0086               	movwf	6
  5482  022D  3001               	movlw	1	; select bank2/3
  5483  022E  0087               	movwf	7
  5484  022F  1501               	bsf	1,2
  5485  0230                     l2418:	
  5486                           
  5487                           ;Switch_B1.c: 134: }
  5488                           ;Switch_B1.c: 135: }
  5489                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5490  0230  0877               	movf	_Sw,w
  5491  0231  0086               	movwf	6
  5492  0232  3001               	movlw	1	; select bank2/3
  5493  0233  0087               	movwf	7
  5494  0234  1C81               	btfss	1,1
  5495  0235  2B00               	goto	l9640
  5496                           
  5497                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5498  0236  0877               	movf	_Sw,w
  5499  0237  0086               	movwf	6
  5500  0238  3001               	movlw	1	; select bank2/3
  5501  0239  0087               	movwf	7
  5502  023A  1901               	btfsc	1,2
  5503  023B  2A5E               	goto	l9606
  5504                           
  5505                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5506  023C  3001               	movlw	1
  5507  023D  0020               	movlb	0	; select bank0
  5508  023E  00EB               	movwf	??_setSw_Main
  5509  023F  0877               	movf	_Sw,w
  5510  0240  3E02               	addlw	2
  5511  0241  0086               	movwf	6
  5512  0242  3001               	movlw	1	; select bank2/3
  5513  0243  0087               	movwf	7
  5514  0244  086B               	movf	??_setSw_Main,w
  5515  0245  0781               	addwf	1,f
  5516                           
  5517                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5518  0246  0877               	movf	_Sw,w
  5519  0247  3E02               	addlw	2
  5520  0248  0086               	movwf	6
  5521  0249  3001               	movlw	1	; select bank2/3
  5522  024A  0087               	movwf	7
  5523  024B  3005               	movlw	5
  5524  024C  0201               	subwf	1,w
  5525  024D  1C03               	skipc
  5526  024E  0008               	return
  5527                           
  5528                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5529  024F  0877               	movf	_Sw,w
  5530  0250  3E02               	addlw	2
  5531  0251  0086               	movwf	6
  5532  0252  3001               	movlw	1	; select bank2/3
  5533  0253  0087               	movwf	7
  5534  0254  0181               	clrf	1
  5535                           
  5536                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5537  0255  0877               	movf	_Sw,w
  5538  0256  0086               	movwf	6
  5539  0257  3001               	movlw	1	; select bank2/3
  5540  0258  0087               	movwf	7
  5541  0259  1501               	bsf	1,2
  5542                           
  5543                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5544  025A  086D               	movf	setSw_Main@sw,w
  5545  025B  3193  23D6         	fcall	_setDimmerLights_SwOn
  5546                           
  5547                           ;Switch_B1.c: 148: }
  5548                           ;Switch_B1.c: 149: } else {
  5549  025D  0008               	return
  5550  025E                     l9606:	
  5551                           
  5552                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5553  025E  0877               	movf	_Sw,w
  5554  025F  0086               	movwf	6
  5555  0260  3001               	movlw	1	; select bank2/3
  5556  0261  0087               	movwf	7
  5557  0262  1981               	btfsc	1,3
  5558  0263  2A90               	goto	l9616
  5559                           
  5560                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5561  0264  0877               	movf	_Sw,w
  5562  0265  3E03               	addlw	3
  5563  0266  0086               	movwf	6
  5564  0267  3001               	movlw	1	; select bank2/3
  5565  0268  0087               	movwf	7
  5566  0269  3001               	movlw	1
  5567  026A  0781               	addwf	1,f
  5568  026B  3141               	addfsr 1,1
  5569  026C  1803               	skipnc
  5570  026D  0A81               	incf	1,f
  5571                           
  5572                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5573  026E  0877               	movf	_Sw,w
  5574  026F  3E03               	addlw	3
  5575  0270  0086               	movwf	6
  5576  0271  3001               	movlw	1	; select bank2/3
  5577  0272  0087               	movwf	7
  5578  0273  3F40               	moviw [0]fsr1
  5579  0274  0020               	movlb	0	; select bank0
  5580  0275  00EB               	movwf	??_setSw_Main
  5581  0276  3F41               	moviw [1]fsr1
  5582  0277  00EC               	movwf	??_setSw_Main+1
  5583  0278  3000               	movlw	0
  5584  0279  026C               	subwf	??_setSw_Main+1,w
  5585  027A  3096               	movlw	150
  5586  027B  1903               	skipnz
  5587  027C  026B               	subwf	??_setSw_Main,w
  5588  027D  1C03               	skipc
  5589  027E  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5592  027F  0877               	movf	_Sw,w
  5593  0280  3E03               	addlw	3
  5594  0281  0086               	movwf	6
  5595  0282  3001               	movlw	1	; select bank2/3
  5596  0283  0087               	movwf	7
  5597  0284  3000               	movlw	0
  5598  0285  3FC0               	movwi [0]fsr1
  5599  0286  3FC1               	movwi [1]fsr1
  5600                           
  5601                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5602  0287  0877               	movf	_Sw,w
  5603  0288  0086               	movwf	6
  5604  0289  3001               	movlw	1	; select bank2/3
  5605  028A  0087               	movwf	7
  5606  028B  1581               	bsf	1,3
  5607                           
  5608                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5609  028C  086D               	movf	setSw_Main@sw,w
  5610  028D  3191  21D3         	fcall	_setDimmerLights_AdjOn
  5611                           
  5612                           ;Switch_B1.c: 160: }
  5613                           ;Switch_B1.c: 161: } else {
  5614  028F  0008               	return
  5615  0290                     l9616:	
  5616                           
  5617                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5618  0290  0877               	movf	_Sw,w
  5619  0291  0086               	movwf	6
  5620  0292  3001               	movlw	1	; select bank2/3
  5621  0293  0087               	movwf	7
  5622  0294  1A01               	btfsc	1,4
  5623  0295  2ACE               	goto	l9630
  5624                           
  5625                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5626  0296  0877               	movf	_Sw,w
  5627  0297  3E05               	addlw	5
  5628  0298  0086               	movwf	6
  5629  0299  3001               	movlw	1	; select bank2/3
  5630  029A  0087               	movwf	7
  5631  029B  3001               	movlw	1
  5632  029C  0781               	addwf	1,f
  5633  029D  3141               	addfsr 1,1
  5634  029E  1803               	skipnc
  5635  029F  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5638  02A0  0877               	movf	_Sw,w
  5639  02A1  3E05               	addlw	5
  5640  02A2  0086               	movwf	6
  5641  02A3  3001               	movlw	1	; select bank2/3
  5642  02A4  0087               	movwf	7
  5643  02A5  3F40               	moviw [0]fsr1
  5644  02A6  0020               	movlb	0	; select bank0
  5645  02A7  00EB               	movwf	??_setSw_Main
  5646  02A8  3F41               	moviw [1]fsr1
  5647  02A9  00EC               	movwf	??_setSw_Main+1
  5648  02AA  3000               	movlw	0
  5649  02AB  026C               	subwf	??_setSw_Main+1,w
  5650  02AC  3096               	movlw	150
  5651  02AD  1903               	skipnz
  5652  02AE  026B               	subwf	??_setSw_Main,w
  5653  02AF  1C03               	skipc
  5654  02B0  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5657  02B1  0877               	movf	_Sw,w
  5658  02B2  3E05               	addlw	5
  5659  02B3  0086               	movwf	6
  5660  02B4  3001               	movlw	1	; select bank2/3
  5661  02B5  0087               	movwf	7
  5662  02B6  3000               	movlw	0
  5663  02B7  3FC0               	movwi [0]fsr1
  5664  02B8  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5667  02B9  0877               	movf	_Sw,w
  5668  02BA  0086               	movwf	6
  5669  02BB  3001               	movlw	1	; select bank2/3
  5670  02BC  0087               	movwf	7
  5671  02BD  1601               	bsf	1,4
  5672                           
  5673                           ;Switch_B1.c: 169: setRF_Learn(1);
  5674  02BE  3001               	movlw	1
  5675  02BF  319E  2673  3181   	fcall	_setRF_Learn
  5676                           
  5677                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5678  02C2  0021               	movlb	1	; select bank1
  5679  02C3  1EA0               	btfss	_myMain^(0+128),5
  5680  02C4  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 172: setBuz(2, 100);
  5683  02C5  3064               	movlw	100
  5684  02C6  0020               	movlb	0	; select bank0
  5685  02C7  00A9               	movwf	setBuz@time
  5686  02C8  3000               	movlw	0
  5687  02C9  00AA               	movwf	setBuz@time+1
  5688  02CA  3002               	movlw	2
  5689  02CB  3197  274E         	fcall	_setBuz
  5690                           
  5691                           ;Switch_B1.c: 173: }
  5692                           ;Switch_B1.c: 175: }
  5693                           ;Switch_B1.c: 176: } else {
  5694  02CD  0008               	return
  5695  02CE                     l9630:	
  5696                           
  5697                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5698  02CE  0877               	movf	_Sw,w
  5699  02CF  0086               	movwf	6
  5700  02D0  3001               	movlw	1	; select bank2/3
  5701  02D1  0087               	movwf	7
  5702  02D2  1A81               	btfsc	1,5
  5703  02D3  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5706  02D4  0877               	movf	_Sw,w
  5707  02D5  3E07               	addlw	7
  5708  02D6  0086               	movwf	6
  5709  02D7  3001               	movlw	1	; select bank2/3
  5710  02D8  0087               	movwf	7
  5711  02D9  3001               	movlw	1
  5712  02DA  0781               	addwf	1,f
  5713  02DB  3141               	addfsr 1,1
  5714  02DC  1803               	skipnc
  5715  02DD  0A81               	incf	1,f
  5716                           
  5717                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5718  02DE  0877               	movf	_Sw,w
  5719  02DF  3E07               	addlw	7
  5720  02E0  0086               	movwf	6
  5721  02E1  3001               	movlw	1	; select bank2/3
  5722  02E2  0087               	movwf	7
  5723  02E3  3F40               	moviw [0]fsr1
  5724  02E4  0020               	movlb	0	; select bank0
  5725  02E5  00EB               	movwf	??_setSw_Main
  5726  02E6  3F41               	moviw [1]fsr1
  5727  02E7  00EC               	movwf	??_setSw_Main+1
  5728  02E8  3001               	movlw	1
  5729  02E9  026C               	subwf	??_setSw_Main+1,w
  5730  02EA  302C               	movlw	44
  5731  02EB  1903               	skipnz
  5732  02EC  026B               	subwf	??_setSw_Main,w
  5733  02ED  1C03               	skipc
  5734  02EE  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5737  02EF  0877               	movf	_Sw,w
  5738  02F0  3E07               	addlw	7
  5739  02F1  0086               	movwf	6
  5740  02F2  3001               	movlw	1	; select bank2/3
  5741  02F3  0087               	movwf	7
  5742  02F4  3000               	movlw	0
  5743  02F5  3FC0               	movwi [0]fsr1
  5744  02F6  3FC1               	movwi [1]fsr1
  5745                           
  5746                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5747  02F7  0877               	movf	_Sw,w
  5748  02F8  0086               	movwf	6
  5749  02F9  3001               	movlw	1	; select bank2/3
  5750  02FA  0087               	movwf	7
  5751  02FB  1681               	bsf	1,5
  5752                           
  5753                           ;Switch_B1.c: 184: setRF_Learn(0);
  5754  02FC  3000               	movlw	0
  5755  02FD  319E  2673         	fcall	_setRF_Learn
  5756                           
  5757                           ;Switch_B1.c: 187: }
  5758                           ;Switch_B1.c: 188: }
  5759                           ;Switch_B1.c: 189: }
  5760                           ;Switch_B1.c: 190: }
  5761                           ;Switch_B1.c: 191: }
  5762                           ;Switch_B1.c: 192: } else {
  5763  02FF  0008               	return
  5764  0300                     l9640:	
  5765                           
  5766                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5767  0300  0877               	movf	_Sw,w
  5768  0301  0086               	movwf	6
  5769  0302  3001               	movlw	1	; select bank2/3
  5770  0303  0087               	movwf	7
  5771  0304  1D01               	btfss	1,2
  5772  0305  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5775  0306  3001               	movlw	1
  5776  0307  0020               	movlb	0	; select bank0
  5777  0308  00EB               	movwf	??_setSw_Main
  5778  0309  0877               	movf	_Sw,w
  5779  030A  3E02               	addlw	2
  5780  030B  0086               	movwf	6
  5781  030C  3001               	movlw	1	; select bank2/3
  5782  030D  0087               	movwf	7
  5783  030E  086B               	movf	??_setSw_Main,w
  5784  030F  0781               	addwf	1,f
  5785                           
  5786                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5787  0310  0877               	movf	_Sw,w
  5788  0311  3E02               	addlw	2
  5789  0312  0086               	movwf	6
  5790  0313  3001               	movlw	1	; select bank2/3
  5791  0314  0087               	movwf	7
  5792  0315  3005               	movlw	5
  5793  0316  0201               	subwf	1,w
  5794  0317  1C03               	skipc
  5795  0318  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5798  0319  0877               	movf	_Sw,w
  5799  031A  3E02               	addlw	2
  5800  031B  0086               	movwf	6
  5801  031C  3001               	movlw	1	; select bank2/3
  5802  031D  0087               	movwf	7
  5803  031E  0181               	clrf	1
  5804                           
  5805                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5806  031F  0877               	movf	_Sw,w
  5807  0320  0086               	movwf	6
  5808  0321  3001               	movlw	1	; select bank2/3
  5809  0322  0087               	movwf	7
  5810  0323  1101               	bcf	1,2
  5811                           
  5812                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5813  0324  0877               	movf	_Sw,w
  5814  0325  3E03               	addlw	3
  5815  0326  0086               	movwf	6
  5816  0327  3001               	movlw	1	; select bank2/3
  5817  0328  0087               	movwf	7
  5818  0329  3000               	movlw	0
  5819  032A  3FC0               	movwi [0]fsr1
  5820  032B  3FC1               	movwi [1]fsr1
  5821                           
  5822                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5823  032C  0877               	movf	_Sw,w
  5824  032D  0086               	movwf	6
  5825  032E  3001               	movlw	1	; select bank2/3
  5826  032F  0087               	movwf	7
  5827  0330  1181               	bcf	1,3
  5828                           
  5829                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5830  0331  0877               	movf	_Sw,w
  5831  0332  3E05               	addlw	5
  5832  0333  0086               	movwf	6
  5833  0334  3001               	movlw	1	; select bank2/3
  5834  0335  0087               	movwf	7
  5835  0336  3000               	movlw	0
  5836  0337  3FC0               	movwi [0]fsr1
  5837  0338  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5840  0339  0877               	movf	_Sw,w
  5841  033A  0086               	movwf	6
  5842  033B  3001               	movlw	1	; select bank2/3
  5843  033C  0087               	movwf	7
  5844  033D  1201               	bcf	1,4
  5845                           
  5846                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5847  033E  0877               	movf	_Sw,w
  5848  033F  3E07               	addlw	7
  5849  0340  0086               	movwf	6
  5850  0341  3001               	movlw	1	; select bank2/3
  5851  0342  0087               	movwf	7
  5852  0343  3000               	movlw	0
  5853  0344  3FC0               	movwi [0]fsr1
  5854  0345  3FC1               	movwi [1]fsr1
  5855                           
  5856                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5857  0346  0877               	movf	_Sw,w
  5858  0347  0086               	movwf	6
  5859  0348  3001               	movlw	1	; select bank2/3
  5860  0349  0087               	movwf	7
  5861  034A  1281               	bcf	1,5
  5862                           
  5863                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5864  034B  086D               	movf	setSw_Main@sw,w
  5865  034C  3195  255F  3181   	fcall	_setDimmerLights_SwOff
  5866                           
  5867                           ;Switch_B1.c: 209: setRF_Learn(0);
  5868  034F  3000               	movlw	0
  5869  0350  319E  2673         	fcall	_setRF_Learn
  5870                           
  5871                           ;Switch_B1.c: 211: }
  5872                           ;Switch_B1.c: 212: }
  5873                           ;Switch_B1.c: 213: }
  5874                           ;Switch_B1.c: 214: } else {
  5875  0352  0008               	return
  5876  0353                     l2416:	
  5877                           
  5878                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5879  0353  0021               	movlb	1	; select bank1
  5880  0354  1C20               	btfss	_myMain^(0+128),0
  5881  0355  0008               	return
  5882                           
  5883                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5884  0356  0877               	movf	_Sw,w
  5885  0357  0086               	movwf	6
  5886  0358  3001               	movlw	1	; select bank2/3
  5887  0359  0087               	movwf	7
  5888  035A  1401               	bsf	1,0
  5889  035B  0008               	return
  5890  035C                     __end_of_setSw_Main:	
  5891                           
  5892                           	psect	text14
  5893  1E73                     __ptext14:	
  5894 ;; *************** function _setRF_Learn *****************
  5895 ;; Defined at:
  5896 ;;		line 23 in file "../src/RF_Control_B1.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  command         1    wreg     unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  command         1    1[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		Nothing
  5919 ;; This function is called by:
  5920 ;;		_setSw_Main
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _setRF_Learn
  5926  1E73                     _setRF_Learn:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5930                           ;setRF_Learn@command stored from wreg
  5931  1E73  0020               	movlb	0	; select bank0
  5932  1E74  00A1               	movwf	setRF_Learn@command
  5933                           
  5934                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5935  1E75  0821               	movf	setRF_Learn@command,w
  5936  1E76  3A01               	xorlw	1
  5937  1E77  3000               	movlw	0
  5938  1E78  1903               	skipnz
  5939  1E79  3001               	movlw	1
  5940  1E7A  00A0               	movwf	??_setRF_Learn
  5941  1E7B  0EA0               	swapf	??_setRF_Learn,f
  5942  1E7C  0DA0               	rlf	??_setRF_Learn,f
  5943  1E7D  0DA0               	rlf	??_setRF_Learn,f
  5944  1E7E  0021               	movlb	1	; select bank1
  5945  1E7F  083A               	movf	_RF1^(0+128),w
  5946  1E80  0020               	movlb	0	; select bank0
  5947  1E81  0620               	xorwf	??_setRF_Learn,w
  5948  1E82  39BF               	andlw	-65
  5949  1E83  0620               	xorwf	??_setRF_Learn,w
  5950  1E84  0021               	movlb	1	; select bank1
  5951  1E85  00BA               	movwf	_RF1^(0+128)
  5952  1E86  0008               	return
  5953  1E87                     __end_of_setRF_Learn:	
  5954                           
  5955                           	psect	text15
  5956  11D3                     __ptext15:	
  5957 ;; *************** function _setDimmerLights_AdjOn *****************
  5958 ;; Defined at:
  5959 ;;		line 477 in file "../src/Dimmer_B1.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  sw              1    wreg     unsigned char 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  sw              1    2[BANK0 ] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;		None               void
  5966 ;; Registers used:
  5967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;Total ram usage:        1 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    6
  5980 ;; This function calls:
  5981 ;;		_DimmerLightsPointSelect
  5982 ;; This function is called by:
  5983 ;;		_setSw_Main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _setDimmerLights_AdjOn
  5989  11D3                     _setDimmerLights_AdjOn:	
  5990                           
  5991                           ;incstack = 0
  5992                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5993                           ;setDimmerLights_AdjOn@sw stored from wreg
  5994  11D3  0020               	movlb	0	; select bank0
  5995  11D4  00A2               	movwf	setDimmerLights_AdjOn@sw
  5996                           
  5997                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  5998  11D5  0822               	movf	setDimmerLights_AdjOn@sw,w
  5999  11D6  319C  24C9  3191   	fcall	_DimmerLightsPointSelect
  6000                           
  6001                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0) {
  6002  11D9  0020               	movlb	0	; select bank0
  6003  11DA  086F               	movf	_DimmerLights,w
  6004  11DB  3E0A               	addlw	10
  6005  11DC  0086               	movwf	6
  6006  11DD  3001               	movlw	1	; select bank2/3
  6007  11DE  0087               	movwf	7
  6008  11DF  1881               	btfsc	1,1
  6009  11E0  0008               	return
  6010                           
  6011                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6012  11E1  086F               	movf	_DimmerLights,w
  6013  11E2  3E0B               	addlw	11
  6014  11E3  0086               	movwf	6
  6015  11E4  3001               	movlw	1	; select bank2/3
  6016  11E5  0087               	movwf	7
  6017  11E6  1C81               	btfss	1,1
  6018  11E7  0008               	return
  6019                           
  6020                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6021  11E8  086F               	movf	_DimmerLights,w
  6022  11E9  3E0B               	addlw	11
  6023  11EA  0086               	movwf	6
  6024  11EB  3001               	movlw	1	; select bank2/3
  6025  11EC  0087               	movwf	7
  6026  11ED  1501               	bsf	1,2
  6027                           
  6028                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6029  11EE  086F               	movf	_DimmerLights,w
  6030  11EF  3E02               	addlw	2
  6031  11F0  0086               	movwf	6
  6032  11F1  3001               	movlw	1	; select bank2/3
  6033  11F2  0087               	movwf	7
  6034  11F3  1481               	bsf	1,1
  6035                           
  6036                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6037  11F4  086F               	movf	_DimmerLights,w
  6038  11F5  3E0A               	addlw	10
  6039  11F6  0086               	movwf	6
  6040  11F7  3001               	movlw	1	; select bank2/3
  6041  11F8  0087               	movwf	7
  6042  11F9  1581               	bsf	1,3
  6043                           
  6044                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6045  11FA  086F               	movf	_DimmerLights,w
  6046  11FB  3E0A               	addlw	10
  6047  11FC  0086               	movwf	6
  6048  11FD  3001               	movlw	1	; select bank2/3
  6049  11FE  0087               	movwf	7
  6050  11FF  1501               	bsf	1,2
  6051  1200  0008               	return
  6052  1201                     __end_of_setDimmerLights_AdjOn:	
  6053                           
  6054                           	psect	text16
  6055  1DE1                     __ptext16:	
  6056 ;; *************** function _getSw_KeyStatus *****************
  6057 ;; Defined at:
  6058 ;;		line 222 in file "../src/Switch_B1.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  sw              1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  sw              1    0[COMMON] unsigned char 
  6063 ;;  status          1    1[BANK0 ] unsigned char 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      unsigned char 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;Total ram usage:        3 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    5
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_setSw_Main
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _getSw_KeyStatus
  6089  1DE1                     _getSw_KeyStatus:	
  6090                           
  6091                           ;Switch_B1.c: 223: char status = 0;
  6092                           
  6093                           ;incstack = 0
  6094                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6095  1DE1  0020               	movlb	0	; select bank0
  6096  1DE2  01A1               	clrf	getSw_KeyStatus@status
  6097                           
  6098                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6099  1DE3  01A2               	clrf	_getSw_KeyStatus$6012
  6100  1DE4  0AA2               	incf	_getSw_KeyStatus$6012,f
  6101  1DE5  1F0C               	btfss	12,6	;volatile
  6102  1DE6  1A0C               	btfsc	12,4	;volatile
  6103  1DE7  2DEC               	goto	l9124
  6104  1DE8  1C0C               	btfss	12,0	;volatile
  6105  1DE9  1B8C               	btfsc	12,7	;volatile
  6106  1DEA  2DEC               	goto	l9124
  6107  1DEB  01A2               	clrf	_getSw_KeyStatus$6012
  6108  1DEC                     l9124:	
  6109  1DEC  0822               	movf	_getSw_KeyStatus$6012,w
  6110  1DED  00A0               	movwf	??_getSw_KeyStatus
  6111  1DEE  0820               	movf	??_getSw_KeyStatus,w
  6112  1DEF  00A1               	movwf	getSw_KeyStatus@status
  6113                           
  6114                           ;Switch_B1.c: 246: return status;
  6115  1DF0  0821               	movf	getSw_KeyStatus@status,w
  6116  1DF1  0008               	return
  6117  1DF2                     __end_of_getSw_KeyStatus:	
  6118                           
  6119                           	psect	text17
  6120  1CF5                     __ptext17:	
  6121 ;; *************** function _SwPointSelect *****************
  6122 ;; Defined at:
  6123 ;;		line 25 in file "../src/Switch_B1.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  sw              1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  sw              1    1[BANK0 ] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;		None               void
  6130 ;; Registers used:
  6131 ;;		wreg
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        2 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    5
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_setSw_Main
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _SwPointSelect
  6153  1CF5                     _SwPointSelect:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _SwPointSelect: [wreg]
  6157                           ;SwPointSelect@sw stored from wreg
  6158  1CF5  0020               	movlb	0	; select bank0
  6159  1CF6  00A1               	movwf	SwPointSelect@sw
  6160                           
  6161                           ;Switch_B1.c: 28: if (sw == 1) {
  6162  1CF7  0821               	movf	SwPointSelect@sw,w
  6163  1CF8  3A01               	xorlw	1
  6164  1CF9  1D03               	skipz
  6165  1CFA  0008               	return
  6166                           
  6167                           ;Switch_B1.c: 29: Sw = &Sw1;
  6168  1CFB  30E3               	movlw	_Sw1& (0+255)
  6169  1CFC  00A0               	movwf	??_SwPointSelect
  6170  1CFD  0820               	movf	??_SwPointSelect,w
  6171  1CFE  00F7               	movwf	_Sw
  6172  1CFF  0008               	return
  6173  1D00                     __end_of_SwPointSelect:	
  6174                           
  6175                           	psect	text18
  6176  1C8C                     __ptext18:	
  6177 ;; *************** function _Switch_Initialization *****************
  6178 ;; Defined at:
  6179 ;;		line 46 in file "../src/Switch_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    8
  6200 ;; This function calls:
  6201 ;;		_TouchPower
  6202 ;;		_setSw_Initialization
  6203 ;; This function is called by:
  6204 ;;		_main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _Switch_Initialization
  6210  1C8C                     _Switch_Initialization:	
  6211                           
  6212                           ;Switch_B1.c: 47: TouchPower();
  6213                           
  6214                           ;incstack = 0
  6215                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6216  1C8C  3190  2066  319C   	fcall	_TouchPower
  6217                           
  6218                           ;Switch_B1.c: 49: WPUB1 = 0;
  6219  1C8F  0024               	movlb	4	; select bank4
  6220  1C90  108D               	bcf	13,1	;volatile
  6221                           
  6222                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6223  1C91  3001               	movlw	1
  6224  1C92  319D  259E         	fcall	_setSw_Initialization
  6225  1C94  0008               	return
  6226  1C95                     __end_of_Switch_Initialization:	
  6227                           
  6228                           	psect	text19
  6229  1D9E                     __ptext19:	
  6230 ;; *************** function _setSw_Initialization *****************
  6231 ;; Defined at:
  6232 ;;		line 93 in file "../src/Switch_B1.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  sw              1    wreg     unsigned char 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  sw              1    4[BANK0 ] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;		None               void
  6239 ;; Registers used:
  6240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;Total ram usage:        1 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    7
  6253 ;; This function calls:
  6254 ;;		_setLED
  6255 ;; This function is called by:
  6256 ;;		_Switch_Initialization
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _setSw_Initialization
  6262  1D9E                     _setSw_Initialization:	
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6266                           ;setSw_Initialization@sw stored from wreg
  6267  1D9E  0020               	movlb	0	; select bank0
  6268  1D9F  00A4               	movwf	setSw_Initialization@sw
  6269                           
  6270                           ;Switch_B1.c: 94: setLED(sw, 1);
  6271  1DA0  01A2               	clrf	setLED@command
  6272  1DA1  0AA2               	incf	setLED@command,f
  6273  1DA2  0824               	movf	setSw_Initialization@sw,w
  6274  1DA3  3193  239D  319D   	fcall	_setLED
  6275                           
  6276                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6277  1DA6  0020               	movlb	0	; select bank0
  6278  1DA7  01A2               	clrf	setLED@command
  6279  1DA8  0AA2               	incf	setLED@command,f
  6280  1DA9  0824               	movf	setSw_Initialization@sw,w
  6281  1DAA  3E01               	addlw	1
  6282  1DAB  3193  239D         	fcall	_setLED
  6283  1DAD  0008               	return
  6284  1DAE                     __end_of_setSw_Initialization:	
  6285                           
  6286                           	psect	text20
  6287  1066                     __ptext20:	
  6288 ;; *************** function _TouchPower *****************
  6289 ;; Defined at:
  6290 ;;		line 10 in file "../src/Switch_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;Total ram usage:        0 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    6
  6311 ;; This function calls:
  6312 ;;		_Timeout_Counter
  6313 ;;		_set_TimeoutCleared
  6314 ;; This function is called by:
  6315 ;;		_Switch_Initialization
  6316 ;;		_Switch_Main
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _TouchPower
  6322  1066                     _TouchPower:	
  6323                           
  6324                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6325                           
  6326                           ;incstack = 0
  6327                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6328  1066  0021               	movlb	1	; select bank1
  6329  1067  1C20               	btfss	_myMain^(0+128),0
  6330  1068  0008               	return
  6331                           
  6332                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6333  1069  0020               	movlb	0	; select bank0
  6334  106A  180D               	btfsc	13,0	;volatile
  6335  106B  0008               	return
  6336  106C  2872               	goto	l9572
  6337  106D                     l2396:	
  6338                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6339                           
  6340                           
  6341                           ;Switch_B1.c: 14: RB0 = 1;
  6342  106D  0020               	movlb	0	; select bank0
  6343  106E  140D               	bsf	13,0	;volatile
  6344                           
  6345                           ;Switch_B1.c: 15: Timeout_Counter();
  6346  106F  319E  2687  3190   	fcall	_Timeout_Counter
  6347  1072                     l9572:	
  6348  1072  0020               	movlb	0	; select bank0
  6349  1073  180D               	btfsc	13,0	;volatile
  6350  1074  2878               	goto	l9576
  6351  1075  0021               	movlb	1	; select bank1
  6352  1076  1D2B               	btfss	(_myMain^(0+128)+11),2
  6353  1077  286D               	goto	l2396
  6354  1078                     l9576:	
  6355                           
  6356                           ;Switch_B1.c: 16: }
  6357                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6358  1078  319C  243D         	fcall	_set_TimeoutCleared
  6359  107A  0008               	return
  6360  107B                     __end_of_TouchPower:	
  6361                           
  6362                           	psect	text21
  6363  1C14                     __ptext21:	
  6364 ;; *************** function _RF_Main *****************
  6365 ;; Defined at:
  6366 ;;		line 16 in file "../src/RF_Control_B1.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;		None               void
  6373 ;; Registers used:
  6374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:   14
  6387 ;; This function calls:
  6388 ;;		_setRF_Main
  6389 ;; This function is called by:
  6390 ;;		_main
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _RF_Main
  6396  1C14                     _RF_Main:	
  6397                           
  6398                           ;RF_Control_B1.c: 18: setRF_Main();
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6402  1C14  318C  248B         	fcall	_setRF_Main
  6403  1C16  0008               	return
  6404  1C17                     __end_of_RF_Main:	
  6405                           
  6406                           	psect	text22
  6407  0C8B                     __ptext22:	
  6408 ;; *************** function _setRF_Main *****************
  6409 ;; Defined at:
  6410 ;;		line 52 in file "../src/RF_Control_B1.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  error           1    2[BANK2 ] unsigned char 
  6415 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6416 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        3 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:   13
  6433 ;; This function calls:
  6434 ;;		_CC2500_RxData
  6435 ;;		_CC2500_TxData
  6436 ;;		_CC2500_WriteCommand
  6437 ;;		_RF_RxDisable
  6438 ;;		_getBuz_GO
  6439 ;;		_getMain_All_Error_Status
  6440 ;;		_getRF_KeyStatus
  6441 ;;		_getRxData
  6442 ;; This function is called by:
  6443 ;;		_RF_Main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _setRF_Main
  6449  0C8B                     _setRF_Main:	
  6450                           
  6451                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6455  0C8B  0022               	movlb	2	; select bank2
  6456  0C8C  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6457  0C8D  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6458  0C8E  01EF               	clrf	setRF_Main@error^(0+256)
  6459                           
  6460                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6461  0C8F  0021               	movlb	1	; select bank1
  6462  0C90  1C3A               	btfss	_RF1^(0+128),0
  6463  0C91  2D04               	goto	l2041
  6464                           
  6465                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6466  0C92  319D  25BF  318C   	fcall	_getBuz_GO
  6467  0C95  0020               	movlb	0	; select bank0
  6468  0C96  0821               	movf	?_getBuz_GO+1,w
  6469  0C97  0420               	iorwf	?_getBuz_GO,w
  6470  0C98  1D03               	skipz
  6471  0C99  0008               	return
  6472                           
  6473                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6474  0C9A  3000               	movlw	0
  6475  0C9B  3192  225F  318C   	fcall	_getMain_All_Error_Status
  6476  0C9E  3800               	iorlw	0
  6477  0C9F  1D03               	skipz
  6478  0CA0  2CB1               	goto	l9516
  6479                           
  6480                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6481  0CA1  319D  25D0  318C   	fcall	_getRF_KeyStatus
  6482  0CA4  3A01               	xorlw	1
  6483  0CA5  1D03               	skipz
  6484  0CA6  2CB1               	goto	l9516
  6485  0CA7  0021               	movlb	1	; select bank1
  6486  0CA8  1B3A               	btfsc	_RF1^(0+128),6
  6487  0CA9  2CB1               	goto	l9516
  6488                           
  6489                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6490  0CAA  01BC               	clrf	(_RF1^(0+128)+2)
  6491  0CAB  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6492                           
  6493                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6494  0CAC  14BB               	bsf	(_RF1^(0+128)+1),1
  6495                           
  6496                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6497  0CAD  3005               	movlw	5
  6498  0CAE  00C1               	movwf	(_RF1^(0+128)+7)
  6499  0CAF  3000               	movlw	0
  6500  0CB0  00C2               	movwf	(_RF1^(0+128)+8)
  6501  0CB1                     l9516:	
  6502                           
  6503                           ;RF_Control_B1.c: 74: }
  6504                           ;RF_Control_B1.c: 84: }
  6505                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6506  0CB1  0021               	movlb	1	; select bank1
  6507  0CB2  1B3A               	btfsc	_RF1^(0+128),6
  6508  0CB3  2CCA               	goto	l2045
  6509                           
  6510                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6511  0CB4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6512  0CB5  2CD0               	goto	l9532
  6513                           
  6514                           ;RF_Control_B1.c: 88: RF1.Count++;
  6515  0CB6  3001               	movlw	1
  6516  0CB7  07BC               	addwf	(_RF1^(0+128)+2),f
  6517  0CB8  3000               	movlw	0
  6518  0CB9  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6519                           
  6520                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6521  0CBA  3002               	movlw	2
  6522  0CBB  3EBA               	addlw	_RF1& (0+255)
  6523  0CBC  0086               	movwf	6
  6524  0CBD  0187               	clrf	7
  6525  0CBE  3F40               	moviw [0]fsr1
  6526  0CBF  0641               	xorwf	(_RF1^(0+128)+7),w
  6527  0CC0  1D03               	skipz
  6528  0CC1  2CC4               	goto	u10525
  6529  0CC2  3F41               	moviw [1]fsr1
  6530  0CC3  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6531  0CC4                     u10525:	
  6532  0CC4  1D03               	skipz
  6533  0CC5  2CD0               	goto	l9532
  6534                           
  6535                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6536  0CC6  01BC               	clrf	(_RF1^(0+128)+2)
  6537  0CC7  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6538                           
  6539                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6540  0CC8  10BB               	bcf	(_RF1^(0+128)+1),1
  6541                           
  6542                           ;RF_Control_B1.c: 92: }
  6543                           ;RF_Control_B1.c: 93: }
  6544                           ;RF_Control_B1.c: 94: } else {
  6545  0CC9  2CD0               	goto	l9532
  6546  0CCA                     l2045:	
  6547                           
  6548                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6549  0CCA  113A               	bcf	_RF1^(0+128),2
  6550                           
  6551                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6552  0CCB  1CBB               	btfss	(_RF1^(0+128)+1),1
  6553  0CCC  2CD0               	goto	l9532
  6554                           
  6555                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6556  0CCD  10BB               	bcf	(_RF1^(0+128)+1),1
  6557                           
  6558                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6559  0CCE  01BC               	clrf	(_RF1^(0+128)+2)
  6560  0CCF  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6561  0CD0                     l9532:	
  6562                           
  6563                           ;RF_Control_B1.c: 99: }
  6564                           ;RF_Control_B1.c: 100: }
  6565                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6566  0CD0  18BB               	btfsc	(_RF1^(0+128)+1),1
  6567  0CD1  0008               	return
  6568                           
  6569                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6570  0CD2  1D3A               	btfss	_RF1^(0+128),2
  6571  0CD3  2CE0               	goto	l2051
  6572                           
  6573                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6574  0CD4  113A               	bcf	_RF1^(0+128),2
  6575                           
  6576                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6577  0CD5  14BB               	bsf	(_RF1^(0+128)+1),1
  6578                           
  6579                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6580  0CD6  3005               	movlw	5
  6581  0CD7  00C1               	movwf	(_RF1^(0+128)+7)
  6582  0CD8  3000               	movlw	0
  6583  0CD9  00C2               	movwf	(_RF1^(0+128)+8)
  6584                           
  6585                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6586  0CDA  319E  263A  318C   	fcall	_RF_RxDisable
  6587                           
  6588                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6589  0CDD  318A  2207         	fcall	_CC2500_TxData
  6590                           
  6591                           ;RF_Control_B1.c: 110: } else {
  6592  0CDF  0008               	return
  6593  0CE0                     l2051:	
  6594                           
  6595                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6596  0CE0  1DBA               	btfss	_RF1^(0+128),3
  6597  0CE1  2CF5               	goto	l2053
  6598                           
  6599                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6600  0CE2  1FBA               	btfss	_RF1^(0+128),7
  6601  0CE3  2CE6               	goto	l9548
  6602  0CE4  1F3A               	btfss	_RF1^(0+128),6
  6603  0CE5  0008               	return
  6604  0CE6                     l9548:	
  6605                           
  6606                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6607  0CE6  318B  23A2  318C   	fcall	_CC2500_RxData
  6608                           
  6609                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6610  0CE9  0021               	movlb	1	; select bank1
  6611  0CEA  1CBA               	btfss	_RF1^(0+128),1
  6612  0CEB  0008               	return
  6613                           
  6614                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6615  0CEC  10BA               	bcf	_RF1^(0+128),1
  6616                           
  6617                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6618  0CED  14BB               	bsf	(_RF1^(0+128)+1),1
  6619                           
  6620                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6621  0CEE  3005               	movlw	5
  6622  0CEF  00C1               	movwf	(_RF1^(0+128)+7)
  6623  0CF0  3000               	movlw	0
  6624  0CF1  00C2               	movwf	(_RF1^(0+128)+8)
  6625                           
  6626                           ;RF_Control_B1.c: 127: getRxData();
  6627  0CF2  318C  2411         	fcall	_getRxData
  6628                           
  6629                           ;RF_Control_B1.c: 129: }
  6630                           ;RF_Control_B1.c: 130: }
  6631                           ;RF_Control_B1.c: 131: } else {
  6632  0CF4  0008               	return
  6633  0CF5                     l2053:	
  6634                           
  6635                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6636  0CF5  18BA               	btfsc	_RF1^(0+128),1
  6637  0CF6  0008               	return
  6638                           
  6639                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6640  0CF7  15BA               	bsf	_RF1^(0+128),3
  6641                           
  6642                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6643  0CF8  3036               	movlw	54
  6644  0CF9  319E  26E0  318C   	fcall	_CC2500_WriteCommand
  6645                           
  6646                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6647  0CFC  303A               	movlw	58
  6648  0CFD  319E  26E0  318C   	fcall	_CC2500_WriteCommand
  6649                           
  6650                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6651  0D00  3034               	movlw	52
  6652  0D01  319E  26E0         	fcall	_CC2500_WriteCommand
  6653                           
  6654                           ;RF_Control_B1.c: 140: }
  6655                           ;RF_Control_B1.c: 142: }
  6656                           ;RF_Control_B1.c: 143: }
  6657                           ;RF_Control_B1.c: 144: }
  6658                           ;RF_Control_B1.c: 145: }
  6659                           ;RF_Control_B1.c: 146: } else {
  6660  0D03  0008               	return
  6661  0D04                     l2041:	
  6662                           
  6663                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6664  0D04  1C20               	btfss	_myMain^(0+128),0
  6665  0D05  0008               	return
  6666                           
  6667                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6668  0D06  143A               	bsf	_RF1^(0+128),0
  6669  0D07  0008               	return
  6670  0D08                     __end_of_setRF_Main:	
  6671                           
  6672                           	psect	text23
  6673  0C11                     __ptext23:	
  6674 ;; *************** function _getRxData *****************
  6675 ;; Defined at:
  6676 ;;		line 240 in file "../src/RF_Control_B1.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  error           1    4[BANK1 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;		None               void
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;Total ram usage:        2 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:   12
  6697 ;; This function calls:
  6698 ;;		_getMain_All_Error_Status
  6699 ;;		_setControl_Lights_Table
  6700 ;;		_setLog_Code
  6701 ;;		_setTxData
  6702 ;; This function is called by:
  6703 ;;		_setRF_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _getRxData
  6709  0C11                     _getRxData:	
  6710                           
  6711                           ;RF_Control_B1.c: 241: char error = getMain_All_Error_Status(0);
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6715  0C11  3000               	movlw	0
  6716  0C12  3192  225F  318C   	fcall	_getMain_All_Error_Status
  6717  0C15  0020               	movlb	0	; select bank0
  6718  0C16  00EE               	movwf	??_getRxData
  6719  0C17  086E               	movf	??_getRxData,w
  6720  0C18  0021               	movlb	1	; select bank1
  6721  0C19  00ED               	movwf	getRxData@error^(0+128)
  6722                           
  6723                           ;RF_Control_B1.c: 242: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6724  0C1A  0023               	movlb	3	; select bank3
  6725  0C1B  0820               	movf	_RF_Data^(0+384),w
  6726  0C1C  3AAA               	xorlw	170
  6727  0C1D  1D03               	skipz
  6728  0C1E  2C30               	goto	l9064
  6729  0C1F  0821               	movf	(_RF_Data^(0+384)+1),w
  6730  0C20  3A01               	xorlw	1
  6731  0C21  1D03               	skipz
  6732  0C22  2C30               	goto	l9064
  6733                           
  6734                           ;RF_Control_B1.c: 244: product->Data[2] = 0x55;
  6735  0C23  3055               	movlw	85
  6736  0C24  0020               	movlb	0	; select bank0
  6737  0C25  00EE               	movwf	??_getRxData
  6738  0C26  0879               	movf	_product,w
  6739  0C27  3E02               	addlw	2
  6740  0C28  0086               	movwf	6
  6741  0C29  3002               	movlw	2	; select bank4/5
  6742  0C2A  0087               	movwf	7
  6743  0C2B  086E               	movf	??_getRxData,w
  6744  0C2C  0081               	movwf	1
  6745                           
  6746                           ;RF_Control_B1.c: 245: setTxData();
  6747  0C2D  318E  2610         	fcall	_setTxData
  6748                           
  6749                           ;RF_Control_B1.c: 251: } else {
  6750  0C2F  0008               	return
  6751  0C30                     l9064:	
  6752                           
  6753                           ;RF_Control_B1.c: 253: if (error == 0) {
  6754  0C30  0021               	movlb	1	; select bank1
  6755  0C31  08ED               	movf	getRxData@error^(0+128),f
  6756  0C32  1D03               	skipz
  6757  0C33  0008               	return
  6758                           
  6759                           ;RF_Control_B1.c: 254: if (RF1.Learn == 1) {
  6760  0C34  1F3A               	btfss	_RF1^(0+128),6
  6761  0C35  2C41               	goto	l9074
  6762                           
  6763                           ;RF_Control_B1.c: 255: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6764  0C36  0023               	movlb	3	; select bank3
  6765  0C37  08A0               	movf	_RF_Data^(0+384),f
  6766  0C38  1D03               	skipz
  6767  0C39  0008               	return
  6768  0C3A  0821               	movf	(_RF_Data^(0+384)+1),w
  6769  0C3B  3A64               	xorlw	100
  6770  0C3C  1D03               	skipz
  6771  0C3D  0008               	return
  6772                           
  6773                           ;RF_Control_B1.c: 256: setLog_Code();
  6774  0C3E  3192  22C6         	fcall	_setLog_Code
  6775                           
  6776                           ;RF_Control_B1.c: 257: }
  6777                           ;RF_Control_B1.c: 258: } else {
  6778  0C40  0008               	return
  6779  0C41                     l9074:	
  6780                           
  6781                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6782  0C41  0023               	movlb	3	; select bank3
  6783  0C42  08A0               	movf	_RF_Data^(0+384),f
  6784  0C43  1D03               	skipz
  6785  0C44  2C76               	goto	l9094
  6786  0C45  0821               	movf	(_RF_Data^(0+384)+1),w
  6787  0C46  3A02               	xorlw	2
  6788  0C47  1D03               	skipz
  6789  0C48  2C76               	goto	l9094
  6790                           
  6791                           ;RF_Control_B1.c: 261: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6792  0C49  082C               	movf	(_RF_Data^(0+384)+12),w
  6793  0C4A  3AFF               	xorlw	255
  6794  0C4B  1D03               	skipz
  6795  0C4C  2C57               	goto	l9086
  6796  0C4D  082D               	movf	(_RF_Data^(0+384)+13),w
  6797  0C4E  3AFF               	xorlw	255
  6798  0C4F  1D03               	skipz
  6799  0C50  2C57               	goto	l9086
  6800  0C51  082E               	movf	(_RF_Data^(0+384)+14),w
  6801  0C52  3AFF               	xorlw	255
  6802  0C53  1D03               	skipz
  6803  0C54  2C57               	goto	l9086
  6804                           
  6805                           ;RF_Control_B1.c: 262: __nop();
  6806  0C55  0000               	nop
  6807                           
  6808                           ;RF_Control_B1.c: 263: } else {
  6809  0C56  0008               	return
  6810  0C57                     l9086:	
  6811                           
  6812                           ;RF_Control_B1.c: 264: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6813  0C57  0879               	movf	_product,w
  6814  0C58  3E0C               	addlw	12
  6815  0C59  0086               	movwf	6
  6816  0C5A  3002               	movlw	2	; select bank4/5
  6817  0C5B  0087               	movwf	7
  6818  0C5C  0023               	movlb	3	; select bank3
  6819  0C5D  082C               	movf	(_RF_Data^(0+384)+12),w
  6820  0C5E  0601               	xorwf	1,w
  6821  0C5F  1D03               	skipz
  6822  0C60  0008               	return
  6823  0C61  0879               	movf	_product,w
  6824  0C62  3E0D               	addlw	13
  6825  0C63  0086               	movwf	6
  6826  0C64  3002               	movlw	2	; select bank4/5
  6827  0C65  0087               	movwf	7
  6828  0C66  082D               	movf	(_RF_Data^(0+384)+13),w
  6829  0C67  0601               	xorwf	1,w
  6830  0C68  1D03               	skipz
  6831  0C69  0008               	return
  6832  0C6A  0879               	movf	_product,w
  6833  0C6B  3E0E               	addlw	14
  6834  0C6C  0086               	movwf	6
  6835  0C6D  3002               	movlw	2	; select bank4/5
  6836  0C6E  0087               	movwf	7
  6837  0C6F  082E               	movf	(_RF_Data^(0+384)+14),w
  6838  0C70  0601               	xorwf	1,w
  6839  0C71  1D03               	skipz
  6840  0C72  0008               	return
  6841                           
  6842                           ;RF_Control_B1.c: 265: setControl_Lights_Table();
  6843  0C73  3189  2147         	fcall	_setControl_Lights_Table
  6844                           
  6845                           ;RF_Control_B1.c: 266: }
  6846                           ;RF_Control_B1.c: 267: }
  6847                           ;RF_Control_B1.c: 268: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6848  0C75  0008               	return
  6849  0C76                     l9094:	
  6850  0C76  0023               	movlb	3	; select bank3
  6851  0C77  0820               	movf	_RF_Data^(0+384),w
  6852  0C78  3AFF               	xorlw	255
  6853  0C79  1D03               	skipz
  6854  0C7A  2C81               	goto	l9100
  6855  0C7B  0821               	movf	(_RF_Data^(0+384)+1),w
  6856  0C7C  3A02               	xorlw	2
  6857  0C7D  1D03               	skipz
  6858  0C7E  2C81               	goto	l9100
  6859                           
  6860                           ;RF_Control_B1.c: 269: __nop();
  6861  0C7F  0000               	nop
  6862                           
  6863                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6864  0C80  0008               	return
  6865  0C81                     l9100:	
  6866  0C81  0023               	movlb	3	; select bank3
  6867  0C82  08A0               	movf	_RF_Data^(0+384),f
  6868  0C83  1D03               	skipz
  6869  0C84  0008               	return
  6870  0C85  0821               	movf	(_RF_Data^(0+384)+1),w
  6871  0C86  3A65               	xorlw	101
  6872  0C87  1D03               	skipz
  6873  0C88  0008               	return
  6874                           
  6875                           ;RF_Control_B1.c: 271: __nop();
  6876  0C89  0000               	nop
  6877                           
  6878                           ;RF_Control_B1.c: 278: ;
  6879                           
  6880                           ;RF_Control_B1.c: 272: }
  6881                           ;RF_Control_B1.c: 276: }
  6882                           ;RF_Control_B1.c: 277: } else {
  6883  0C8A  0008               	return
  6884  0C8B                     __end_of_getRxData:	
  6885                           
  6886                           	psect	text24
  6887  12C6                     __ptext24:	
  6888 ;; *************** function _setLog_Code *****************
  6889 ;; Defined at:
  6890 ;;		line 284 in file "../src/RF_Control_B1.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;		None               void
  6897 ;; Registers used:
  6898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;Total ram usage:        1 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    7
  6911 ;; This function calls:
  6912 ;;		_setBuz
  6913 ;;		_setMemory_LoopSave
  6914 ;;		_setMemory_Modify
  6915 ;;		_setProductData
  6916 ;; This function is called by:
  6917 ;;		_getRxData
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _setLog_Code
  6923  12C6                     _setLog_Code:	
  6924                           
  6925                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6929  12C6  0021               	movlb	1	; select bank1
  6930  12C7  133A               	bcf	_RF1^(0+128),6
  6931                           
  6932                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  6933  12C8  0023               	movlb	3	; select bank3
  6934  12C9  082C               	movf	(_RF_Data^(0+384)+12),w
  6935  12CA  0020               	movlb	0	; select bank0
  6936  12CB  00E6               	movwf	??_setLog_Code
  6937  12CC  0866               	movf	??_setLog_Code,w
  6938  12CD  00E2               	movwf	setProductData@value
  6939  12CE  300C               	movlw	12
  6940  12CF  319D  2554  3192   	fcall	_setProductData
  6941                           
  6942                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  6943  12D2  0023               	movlb	3	; select bank3
  6944  12D3  082D               	movf	(_RF_Data^(0+384)+13),w
  6945  12D4  0020               	movlb	0	; select bank0
  6946  12D5  00E6               	movwf	??_setLog_Code
  6947  12D6  0866               	movf	??_setLog_Code,w
  6948  12D7  00E2               	movwf	setProductData@value
  6949  12D8  300D               	movlw	13
  6950  12D9  319D  2554  3192   	fcall	_setProductData
  6951                           
  6952                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  6953  12DC  0023               	movlb	3	; select bank3
  6954  12DD  082E               	movf	(_RF_Data^(0+384)+14),w
  6955  12DE  0020               	movlb	0	; select bank0
  6956  12DF  00E6               	movwf	??_setLog_Code
  6957  12E0  0866               	movf	??_setLog_Code,w
  6958  12E1  00E2               	movwf	setProductData@value
  6959  12E2  300E               	movlw	14
  6960  12E3  319D  2554  3192   	fcall	_setProductData
  6961                           
  6962                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  6963  12E6  3064               	movlw	100
  6964  12E7  0020               	movlb	0	; select bank0
  6965  12E8  00A9               	movwf	setBuz@time
  6966  12E9  3000               	movlw	0
  6967  12EA  00AA               	movwf	setBuz@time+1
  6968  12EB  3001               	movlw	1
  6969  12EC  3197  274E  3192   	fcall	_setBuz
  6970                           
  6971                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  6972  12EF  0021               	movlb	1	; select bank1
  6973  12F0  1EA0               	btfss	_myMain^(0+128),5
  6974  12F1  2AF6               	goto	l2102
  6975                           
  6976                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  6977  12F2  3001               	movlw	1
  6978  12F3  319E  2660  3192   	fcall	_setMemory_LoopSave
  6979  12F6                     l2102:	
  6980                           
  6981                           ;RF_Control_B1.c: 292: }
  6982                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  6983  12F6  3001               	movlw	1
  6984  12F7  319E  264D         	fcall	_setMemory_Modify
  6985  12F9  0008               	return
  6986  12FA                     __end_of_setLog_Code:	
  6987                           
  6988                           	psect	text25
  6989  1E60                     __ptext25:	
  6990 ;; *************** function _setMemory_LoopSave *****************
  6991 ;; Defined at:
  6992 ;;		line 1071 in file "../src/MCU_B1.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;  command         1    wreg     unsigned char 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  command         1    1[BANK0 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;		None               void
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;Total ram usage:        2 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    5
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_setLog_Code
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _setMemory_LoopSave
  7022  1E60                     _setMemory_LoopSave:	
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7026                           ;setMemory_LoopSave@command stored from wreg
  7027  1E60  0020               	movlb	0	; select bank0
  7028  1E61  00A1               	movwf	setMemory_LoopSave@command
  7029                           
  7030                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7031  1E62  0821               	movf	setMemory_LoopSave@command,w
  7032  1E63  3A01               	xorlw	1
  7033  1E64  3000               	movlw	0
  7034  1E65  1903               	skipnz
  7035  1E66  3001               	movlw	1
  7036  1E67  00A0               	movwf	??_setMemory_LoopSave
  7037  1E68  0DA0               	rlf	??_setMemory_LoopSave,f
  7038  1E69  0DA0               	rlf	??_setMemory_LoopSave,f
  7039  1E6A  0023               	movlb	3	; select bank3
  7040  1E6B  0862               	movf	(_Memory^(0+384)+36),w
  7041  1E6C  0020               	movlb	0	; select bank0
  7042  1E6D  0620               	xorwf	??_setMemory_LoopSave,w
  7043  1E6E  39FB               	andlw	-5
  7044  1E6F  0620               	xorwf	??_setMemory_LoopSave,w
  7045  1E70  0023               	movlb	3	; select bank3
  7046  1E71  00E2               	movwf	(_Memory^(0+384)+36)
  7047  1E72  0008               	return
  7048  1E73                     __end_of_setMemory_LoopSave:	
  7049                           
  7050                           	psect	text26
  7051  0947                     __ptext26:	
  7052 ;; *************** function _setControl_Lights_Table *****************
  7053 ;; Defined at:
  7054 ;;		line 297 in file "../src/RF_Control_B1.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;		None
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;		None               void
  7061 ;; Registers used:
  7062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:   11
  7075 ;; This function calls:
  7076 ;;		_setBuz
  7077 ;;		_setDimmerLights_ErrorClose
  7078 ;;		_setProductData
  7079 ;;		_setRFSW_AdjControl
  7080 ;;		_setRFSW_Control
  7081 ;;		_setTxData
  7082 ;; This function is called by:
  7083 ;;		_getRxData
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _setControl_Lights_Table
  7089  0947                     _setControl_Lights_Table:	
  7090                           
  7091                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7095  0947  298A               	goto	l8734
  7096  0948                     l8722:	
  7097                           ;RF_Control_B1.c: 299: case 0x00:
  7098                           
  7099                           
  7100                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7101  0948  30FF               	movlw	255
  7102  0949  3188  20E9  3189   	fcall	_setDimmerLights_ErrorClose
  7103                           
  7104                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7105  094C  0020               	movlb	0	; select bank0
  7106  094D  01E2               	clrf	setProductData@value
  7107  094E  3009               	movlw	9
  7108  094F  319D  2554  3189   	fcall	_setProductData
  7109                           
  7110                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7111  0952  0020               	movlb	0	; select bank0
  7112  0953  01E2               	clrf	setProductData@value
  7113  0954  300B               	movlw	11
  7114  0955  319D  2554  3189   	fcall	_setProductData
  7115                           
  7116                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7117  0958  0020               	movlb	0	; select bank0
  7118  0959  01E2               	clrf	setProductData@value
  7119  095A  300F               	movlw	15
  7120  095B  319D  2554  3189   	fcall	_setProductData
  7121                           
  7122                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7123  095E  0020               	movlb	0	; select bank0
  7124  095F  01E2               	clrf	setProductData@value
  7125  0960  3011               	movlw	17
  7126  0961  319D  2554  3189   	fcall	_setProductData
  7127                           
  7128                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7129  0964  3064               	movlw	100
  7130  0965  0020               	movlb	0	; select bank0
  7131  0966  00A9               	movwf	setBuz@time
  7132  0967  3000               	movlw	0
  7133  0968  00AA               	movwf	setBuz@time+1
  7134  0969  3001               	movlw	1
  7135  096A  3197  274E         	fcall	_setBuz
  7136                           
  7137                           ;RF_Control_B1.c: 309: break;
  7138  096C  0008               	return
  7139  096D                     l8726:	
  7140                           ;RF_Control_B1.c: 310: case 0x20:
  7141                           
  7142                           
  7143                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7144  096D  0020               	movlb	0	; select bank0
  7145  096E  01E2               	clrf	setProductData@value
  7146  096F  3009               	movlw	9
  7147  0970  319D  2554  3189   	fcall	_setProductData
  7148                           
  7149                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7150  0973  0020               	movlb	0	; select bank0
  7151  0974  01E2               	clrf	setProductData@value
  7152  0975  300B               	movlw	11
  7153  0976  319D  2554  3189   	fcall	_setProductData
  7154                           
  7155                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7156  0979  0020               	movlb	0	; select bank0
  7157  097A  01E2               	clrf	setProductData@value
  7158  097B  3011               	movlw	17
  7159  097C  319D  2554  3189   	fcall	_setProductData
  7160                           
  7161                           ;RF_Control_B1.c: 314: setTxData();
  7162  097F  318E  2610         	fcall	_setTxData
  7163                           
  7164                           ;RF_Control_B1.c: 315: break;
  7165  0981  0008               	return
  7166  0982                     l8728:	
  7167                           ;RF_Control_B1.c: 316: case 0x01:
  7168                           
  7169                           
  7170                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7171  0982  3001               	movlw	1
  7172  0983  3195  25AE         	fcall	_setRFSW_Control
  7173                           
  7174                           ;RF_Control_B1.c: 330: break;
  7175                           
  7176                           ;RF_Control_B1.c: 326: case 0x03:
  7177                           
  7178                           ;RF_Control_B1.c: 325: break;
  7179                           
  7180                           ;RF_Control_B1.c: 321: case 0x02:
  7181                           
  7182                           ;RF_Control_B1.c: 320: break;
  7183  0985  0008               	return
  7184  0986                     l8730:	
  7185                           ;RF_Control_B1.c: 331: case 0x11:
  7186                           
  7187                           
  7188                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7189  0986  3001               	movlw	1
  7190  0987  3194  244B         	fcall	_setRFSW_AdjControl
  7191                           
  7192                           ;RF_Control_B1.c: 352: }
  7193                           
  7194                           ;RF_Control_B1.c: 351: break;
  7195                           
  7196                           ;RF_Control_B1.c: 345: case 0x31:
  7197                           
  7198                           ;RF_Control_B1.c: 344: break;
  7199                           
  7200                           ;RF_Control_B1.c: 338: case 0x21:
  7201                           
  7202                           ;RF_Control_B1.c: 337: break;
  7203  0989  0008               	return
  7204  098A                     l8734:	
  7205  098A  0023               	movlb	3	; select bank3
  7206  098B  082F               	movf	(_RF_Data^(0+384)+15),w
  7207                           
  7208                           ; Switch size 1, requested type "space"
  7209                           ; Number of cases is 8, Range of values is 0 to 49
  7210                           ; switch strategies available:
  7211                           ; Name         Instructions Cycles
  7212                           ; simple_byte           25    13 (average)
  7213                           ; direct_byte          106     6 (fixed)
  7214                           ; jumptable            260     6 (fixed)
  7215                           ;	Chosen strategy is simple_byte
  7216  098C  3A00               	xorlw	0	; case 0
  7217  098D  1903               	skipnz
  7218  098E  2948               	goto	l8722
  7219  098F  3A01               	xorlw	1	; case 1
  7220  0990  1903               	skipnz
  7221  0991  2982               	goto	l8728
  7222  0992  3A03               	xorlw	3	; case 2
  7223  0993  1903               	skipnz
  7224  0994  29A5               	goto	l2116
  7225  0995  3A01               	xorlw	1	; case 3
  7226  0996  1903               	skipnz
  7227  0997  29A5               	goto	l2116
  7228  0998  3A12               	xorlw	18	; case 17
  7229  0999  1903               	skipnz
  7230  099A  2986               	goto	l8730
  7231  099B  3A31               	xorlw	49	; case 32
  7232  099C  1903               	skipnz
  7233  099D  296D               	goto	l8726
  7234  099E  3A01               	xorlw	1	; case 33
  7235  099F  1903               	skipnz
  7236  09A0  29A5               	goto	l2116
  7237  09A1  3A10               	xorlw	16	; case 49
  7238  09A2  1903               	skipnz
  7239  09A3  29A5               	goto	l2116
  7240  09A4  29A5               	goto	l2116
  7241  09A5                     l2116:	
  7242  09A5  0008               	return
  7243  09A6                     __end_of_setControl_Lights_Table:	
  7244                           
  7245                           	psect	text27
  7246  15AE                     __ptext27:	
  7247 ;; *************** function _setRFSW_Control *****************
  7248 ;; Defined at:
  7249 ;;		line 379 in file "../src/RF_Control_B1.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;  sw              1    wreg     unsigned char 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  sw              1   77[BANK0 ] unsigned char 
  7254 ;;  status          1   76[BANK0 ] unsigned char 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;		None               void
  7257 ;; Registers used:
  7258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;Total ram usage:        3 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    9
  7271 ;; This function calls:
  7272 ;;		_getDelayOff_GO
  7273 ;;		_getDimmerLights_Status
  7274 ;;		_setBuz
  7275 ;;		_setDelayOff_GO
  7276 ;;		_setDimmerLights_SwOff
  7277 ;;		_setDimmerLights_SwOn
  7278 ;;		_setRF_DimmerLights
  7279 ;;		_setTxData
  7280 ;; This function is called by:
  7281 ;;		_setControl_Lights_Table
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _setRFSW_Control
  7287  15AE                     _setRFSW_Control:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7291                           ;setRFSW_Control@sw stored from wreg
  7292  15AE  0020               	movlb	0	; select bank0
  7293  15AF  00ED               	movwf	setRFSW_Control@sw
  7294                           
  7295                           ;RF_Control_B1.c: 380: char status = 0;
  7296  15B0  01EC               	clrf	setRFSW_Control@status
  7297                           
  7298                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7299  15B1  0023               	movlb	3	; select bank3
  7300  15B2  0830               	movf	(_RF_Data^(0+384)+16),w
  7301  15B3  3A80               	xorlw	128
  7302  15B4  1D03               	skipz
  7303  15B5  2DE1               	goto	l8576
  7304                           
  7305                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7306  15B6  0020               	movlb	0	; select bank0
  7307  15B7  01E6               	clrf	setDelayOff_GO@command
  7308  15B8  0AE6               	incf	setDelayOff_GO@command,f
  7309  15B9  0023               	movlb	3	; select bank3
  7310  15BA  0831               	movf	(_RF_Data^(0+384)+17),w
  7311  15BB  0020               	movlb	0	; select bank0
  7312  15BC  00EB               	movwf	??_setRFSW_Control
  7313  15BD  086B               	movf	??_setRFSW_Control,w
  7314  15BE  00E7               	movwf	setDelayOff_GO@value
  7315  15BF  086D               	movf	setRFSW_Control@sw,w
  7316  15C0  3196  264F  3195   	fcall	_setDelayOff_GO
  7317                           
  7318                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7319  15C3  0020               	movlb	0	; select bank0
  7320  15C4  086D               	movf	setRFSW_Control@sw,w
  7321  15C5  319D  25AE  3195   	fcall	_getDimmerLights_Status
  7322  15C8  3A01               	xorlw	1
  7323  15C9  1D03               	skipz
  7324  15CA  2DF0               	goto	l8580
  7325                           
  7326                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7327  15CB  3064               	movlw	100
  7328  15CC  0020               	movlb	0	; select bank0
  7329  15CD  00A9               	movwf	setBuz@time
  7330  15CE  3000               	movlw	0
  7331  15CF  00AA               	movwf	setBuz@time+1
  7332  15D0  3001               	movlw	1
  7333  15D1  3197  274E  3195   	fcall	_setBuz
  7334                           
  7335                           ;RF_Control_B1.c: 387: status = 1;
  7336  15D4  0020               	movlb	0	; select bank0
  7337  15D5  01EC               	clrf	setRFSW_Control@status
  7338  15D6  0AEC               	incf	setRFSW_Control@status,f
  7339                           
  7340                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7341  15D7  01E6               	clrf	setRF_DimmerLights@on
  7342  15D8  0AE6               	incf	setRF_DimmerLights@on,f
  7343  15D9  086D               	movf	setRFSW_Control@sw,w
  7344  15DA  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7345                           
  7346                           ;RF_Control_B1.c: 389: setTxData();
  7347  15DD  318E  2610  3195   	fcall	_setTxData
  7348                           
  7349                           ;RF_Control_B1.c: 390: }
  7350                           ;RF_Control_B1.c: 391: } else {
  7351  15E0  2DF0               	goto	l8580
  7352  15E1                     l8576:	
  7353                           
  7354                           ;RF_Control_B1.c: 393: if (getDelayOff_GO(sw) == 1) {
  7355  15E1  0020               	movlb	0	; select bank0
  7356  15E2  086D               	movf	setRFSW_Control@sw,w
  7357  15E3  319D  258E  3195   	fcall	_getDelayOff_GO
  7358  15E6  3A01               	xorlw	1
  7359  15E7  1D03               	skipz
  7360  15E8  2DF0               	goto	l8580
  7361                           
  7362                           ;RF_Control_B1.c: 394: setDelayOff_GO(sw, 0, 0);
  7363  15E9  0020               	movlb	0	; select bank0
  7364  15EA  01E6               	clrf	setDelayOff_GO@command
  7365  15EB  01E7               	clrf	setDelayOff_GO@value
  7366  15EC  086D               	movf	setRFSW_Control@sw,w
  7367  15ED  3196  264F  3195   	fcall	_setDelayOff_GO
  7368  15F0                     l8580:	
  7369                           
  7370                           ;RF_Control_B1.c: 395: }
  7371                           ;RF_Control_B1.c: 397: }
  7372                           ;RF_Control_B1.c: 398: if (status == 0) {
  7373  15F0  0020               	movlb	0	; select bank0
  7374  15F1  08EC               	movf	setRFSW_Control@status,f
  7375  15F2  1D03               	skipz
  7376  15F3  0008               	return
  7377                           
  7378                           ;RF_Control_B1.c: 400: setDimmerLights_SwOn(sw);
  7379  15F4  086D               	movf	setRFSW_Control@sw,w
  7380  15F5  3193  23D6  3195   	fcall	_setDimmerLights_SwOn
  7381                           
  7382                           ;RF_Control_B1.c: 401: setDimmerLights_SwOff(sw);
  7383  15F8  0020               	movlb	0	; select bank0
  7384  15F9  086D               	movf	setRFSW_Control@sw,w
  7385  15FA  3195  255F         	fcall	_setDimmerLights_SwOff
  7386  15FC  0008               	return
  7387  15FD                     __end_of_setRFSW_Control:	
  7388                           
  7389                           	psect	text28
  7390  13D6                     __ptext28:	
  7391 ;; *************** function _setDimmerLights_SwOn *****************
  7392 ;; Defined at:
  7393 ;;		line 405 in file "../src/Dimmer_B1.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  sw              1    wreg     unsigned char 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;  sw              1   13[BANK0 ] unsigned char 
  7398 ;;  idle            1   14[BANK0 ] unsigned char 
  7399 ;; Return value:  Size  Location     Type
  7400 ;;		None               void
  7401 ;; Registers used:
  7402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;Total ram usage:        2 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    7
  7415 ;; This function calls:
  7416 ;;		_DimmerLightsPointSelect
  7417 ;;		_setBuz
  7418 ;; This function is called by:
  7419 ;;		_setRFSW_Control
  7420 ;;		_setSw_Main
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _setDimmerLights_SwOn
  7426  13D6                     _setDimmerLights_SwOn:	
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7430                           ;setDimmerLights_SwOn@sw stored from wreg
  7431  13D6  0020               	movlb	0	; select bank0
  7432  13D7  00AD               	movwf	setDimmerLights_SwOn@sw
  7433                           
  7434                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7435  13D8  082D               	movf	setDimmerLights_SwOn@sw,w
  7436  13D9  319C  24C9  3193   	fcall	_DimmerLightsPointSelect
  7437                           
  7438                           ;Dimmer_B1.c: 407: char idle = 0;
  7439  13DC  0020               	movlb	0	; select bank0
  7440  13DD  01AE               	clrf	setDimmerLights_SwOn@idle
  7441                           
  7442                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7443  13DE  08AE               	movf	setDimmerLights_SwOn@idle,f
  7444  13DF  1D03               	skipz
  7445  13E0  0008               	return
  7446                           
  7447                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7448  13E1  086F               	movf	_DimmerLights,w
  7449  13E2  3E0B               	addlw	11
  7450  13E3  0086               	movwf	6
  7451  13E4  3001               	movlw	1	; select bank2/3
  7452  13E5  0087               	movwf	7
  7453  13E6  1481               	bsf	1,1
  7454                           
  7455                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7456  13E7  086F               	movf	_DimmerLights,w
  7457  13E8  3E02               	addlw	2
  7458  13E9  0086               	movwf	6
  7459  13EA  3001               	movlw	1	; select bank2/3
  7460  13EB  0087               	movwf	7
  7461  13EC  1881               	btfsc	1,1
  7462  13ED  2C01               	goto	l8380
  7463                           
  7464                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7465  13EE  086F               	movf	_DimmerLights,w
  7466  13EF  3E02               	addlw	2
  7467  13F0  0086               	movwf	6
  7468  13F1  3001               	movlw	1	; select bank2/3
  7469  13F2  0087               	movwf	7
  7470  13F3  1481               	bsf	1,1
  7471                           
  7472                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7473  13F4  086F               	movf	_DimmerLights,w
  7474  13F5  3E0A               	addlw	10
  7475  13F6  0086               	movwf	6
  7476  13F7  3001               	movlw	1	; select bank2/3
  7477  13F8  0087               	movwf	7
  7478  13F9  1481               	bsf	1,1
  7479                           
  7480                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7481  13FA  086F               	movf	_DimmerLights,w
  7482  13FB  3E0A               	addlw	10
  7483  13FC  0086               	movwf	6
  7484  13FD  3001               	movlw	1	; select bank2/3
  7485  13FE  0087               	movwf	7
  7486  13FF  1401               	bsf	1,0
  7487                           
  7488                           ;Dimmer_B1.c: 442: } else {
  7489  1400  2C07               	goto	l8382
  7490  1401                     l8380:	
  7491                           
  7492                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7493  1401  086F               	movf	_DimmerLights,w
  7494  1402  3E02               	addlw	2
  7495  1403  0086               	movwf	6
  7496  1404  3001               	movlw	1	; select bank2/3
  7497  1405  0087               	movwf	7
  7498  1406  1081               	bcf	1,1
  7499  1407                     l8382:	
  7500                           
  7501                           ;Dimmer_B1.c: 444: }
  7502                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7503  1407  3064               	movlw	100
  7504  1408  00A9               	movwf	setBuz@time
  7505  1409  3000               	movlw	0
  7506  140A  00AA               	movwf	setBuz@time+1
  7507  140B  3001               	movlw	1
  7508  140C  3197  274E         	fcall	_setBuz
  7509  140E  0008               	return
  7510  140F                     __end_of_setDimmerLights_SwOn:	
  7511                           
  7512                           	psect	text29
  7513  144B                     __ptext29:	
  7514 ;; *************** function _setRFSW_AdjControl *****************
  7515 ;; Defined at:
  7516 ;;		line 407 in file "../src/RF_Control_B1.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  sw              1    wreg     unsigned char 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;  sw              1   75[BANK0 ] unsigned char 
  7521 ;;  status          1   74[BANK0 ] unsigned char 
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;Total ram usage:        4 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:   10
  7538 ;; This function calls:
  7539 ;;		_getDimmerLights_Status
  7540 ;;		_setMemory_Modify
  7541 ;;		_setProductData
  7542 ;;		_setRF_DimmerValue
  7543 ;;		_setTxData
  7544 ;; This function is called by:
  7545 ;;		_setControl_Lights_Table
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           
  7550                           ;psect for function _setRFSW_AdjControl
  7551  144B                     _setRFSW_AdjControl:	
  7552                           
  7553                           ;incstack = 0
  7554                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7555                           ;setRFSW_AdjControl@sw stored from wreg
  7556  144B  0020               	movlb	0	; select bank0
  7557  144C  00EB               	movwf	setRFSW_AdjControl@sw
  7558                           
  7559                           ;RF_Control_B1.c: 408: char status = 0;
  7560  144D  01EA               	clrf	setRFSW_AdjControl@status
  7561                           
  7562                           ;RF_Control_B1.c: 410: status = getDimmerLights_Status(sw);
  7563  144E  086B               	movf	setRFSW_AdjControl@sw,w
  7564  144F  319D  25AE  3194   	fcall	_getDimmerLights_Status
  7565  1452  0020               	movlb	0	; select bank0
  7566  1453  00E8               	movwf	??_setRFSW_AdjControl
  7567  1454  0868               	movf	??_setRFSW_AdjControl,w
  7568  1455  00EA               	movwf	setRFSW_AdjControl@status
  7569                           
  7570                           ;RF_Control_B1.c: 413: if (status == 1) {
  7571  1456  086A               	movf	setRFSW_AdjControl@status,w
  7572  1457  3A01               	xorlw	1
  7573  1458  1D03               	skipz
  7574  1459  2C64               	goto	l8594
  7575                           
  7576                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7577  145A  3001               	movlw	1
  7578  145B  319E  264D  3194   	fcall	_setMemory_Modify
  7579                           
  7580                           ;RF_Control_B1.c: 415: setRF_DimmerValue(sw);
  7581  145E  0020               	movlb	0	; select bank0
  7582  145F  086B               	movf	setRFSW_AdjControl@sw,w
  7583  1460  3192  2230  3194   	fcall	_setRF_DimmerValue
  7584                           
  7585                           ;RF_Control_B1.c: 416: } else {
  7586  1463  2C75               	goto	l2128
  7587  1464                     l8594:	
  7588                           
  7589                           ;RF_Control_B1.c: 417: setProductData(9, product->Data[20 + sw]);
  7590  1464  0020               	movlb	0	; select bank0
  7591  1465  086B               	movf	setRFSW_AdjControl@sw,w
  7592  1466  3E14               	addlw	20
  7593  1467  0779               	addwf	_product,w
  7594  1468  00E8               	movwf	??_setRFSW_AdjControl
  7595  1469  0868               	movf	??_setRFSW_AdjControl,w
  7596  146A  0086               	movwf	6
  7597  146B  3002               	movlw	2	; select bank4/5
  7598  146C  0087               	movwf	7
  7599  146D  0801               	movf	1,w
  7600  146E  00E9               	movwf	??_setRFSW_AdjControl+1
  7601  146F  0869               	movf	??_setRFSW_AdjControl+1,w
  7602  1470  00E2               	movwf	setProductData@value
  7603  1471  3009               	movlw	9
  7604  1472  319D  2554  3194   	fcall	_setProductData
  7605  1475                     l2128:	
  7606                           
  7607                           ;RF_Control_B1.c: 418: }
  7608                           ;RF_Control_B1.c: 419: setProductData(17, product->Data[26 + sw]);
  7609  1475  0020               	movlb	0	; select bank0
  7610  1476  086B               	movf	setRFSW_AdjControl@sw,w
  7611  1477  3E1A               	addlw	26
  7612  1478  0779               	addwf	_product,w
  7613  1479  00E8               	movwf	??_setRFSW_AdjControl
  7614  147A  0868               	movf	??_setRFSW_AdjControl,w
  7615  147B  0086               	movwf	6
  7616  147C  3002               	movlw	2	; select bank4/5
  7617  147D  0087               	movwf	7
  7618  147E  0801               	movf	1,w
  7619  147F  00E9               	movwf	??_setRFSW_AdjControl+1
  7620  1480  0869               	movf	??_setRFSW_AdjControl+1,w
  7621  1481  00E2               	movwf	setProductData@value
  7622  1482  3011               	movlw	17
  7623  1483  319D  2554  3194   	fcall	_setProductData
  7624                           
  7625                           ;RF_Control_B1.c: 420: setTxData();
  7626  1486  318E  2610         	fcall	_setTxData
  7627  1488  0008               	return
  7628  1489                     __end_of_setRFSW_AdjControl:	
  7629                           
  7630                           	psect	text30
  7631  1230                     __ptext30:	
  7632 ;; *************** function _setRF_DimmerValue *****************
  7633 ;; Defined at:
  7634 ;;		line 425 in file "../src/RF_Control_B1.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  lights          1    wreg     unsigned char 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  lights          1   71[BANK0 ] unsigned char 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;		None               void
  7641 ;; Registers used:
  7642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;Total ram usage:        2 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; Hardware stack levels required when called:    9
  7655 ;; This function calls:
  7656 ;;		_setDimmerLights_AdjRF
  7657 ;;		_setProductData
  7658 ;; This function is called by:
  7659 ;;		_setRFSW_AdjControl
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _setRF_DimmerValue
  7665  1230                     _setRF_DimmerValue:	
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7669                           ;setRF_DimmerValue@lights stored from wreg
  7670  1230  0020               	movlb	0	; select bank0
  7671  1231  00E7               	movwf	setRF_DimmerValue@lights
  7672                           
  7673                           ;RF_Control_B1.c: 426: if (RF_Data[9] > 0x64) {
  7674  1232  3065               	movlw	101
  7675  1233  0023               	movlb	3	; select bank3
  7676  1234  0229               	subwf	(_RF_Data^(0+384)+9),w
  7677  1235  1C03               	skipc
  7678  1236  2A3D               	goto	l8476
  7679                           
  7680                           ;RF_Control_B1.c: 427: RF_Data[9] = 0x64;
  7681  1237  3064               	movlw	100
  7682  1238  0020               	movlb	0	; select bank0
  7683  1239  00E6               	movwf	??_setRF_DimmerValue
  7684  123A  0866               	movf	??_setRF_DimmerValue,w
  7685  123B  0023               	movlb	3	; select bank3
  7686  123C  00A9               	movwf	(_RF_Data^(0+384)+9)
  7687  123D                     l8476:	
  7688                           
  7689                           ;RF_Control_B1.c: 428: }
  7690                           ;RF_Control_B1.c: 429: setProductData(9, RF_Data[9]);
  7691  123D  0829               	movf	(_RF_Data^(0+384)+9),w
  7692  123E  0020               	movlb	0	; select bank0
  7693  123F  00E6               	movwf	??_setRF_DimmerValue
  7694  1240  0866               	movf	??_setRF_DimmerValue,w
  7695  1241  00E2               	movwf	setProductData@value
  7696  1242  3009               	movlw	9
  7697  1243  319D  2554  3192   	fcall	_setProductData
  7698                           
  7699                           ;RF_Control_B1.c: 430: setProductData(11, lights);
  7700  1246  0020               	movlb	0	; select bank0
  7701  1247  0867               	movf	setRF_DimmerValue@lights,w
  7702  1248  00E6               	movwf	??_setRF_DimmerValue
  7703  1249  0866               	movf	??_setRF_DimmerValue,w
  7704  124A  00E2               	movwf	setProductData@value
  7705  124B  300B               	movlw	11
  7706  124C  319D  2554  3192   	fcall	_setProductData
  7707                           
  7708                           ;RF_Control_B1.c: 431: setProductData((20 + lights), RF_Data[9]);
  7709  124F  0023               	movlb	3	; select bank3
  7710  1250  0829               	movf	(_RF_Data^(0+384)+9),w
  7711  1251  0020               	movlb	0	; select bank0
  7712  1252  00E6               	movwf	??_setRF_DimmerValue
  7713  1253  0866               	movf	??_setRF_DimmerValue,w
  7714  1254  00E2               	movwf	setProductData@value
  7715  1255  0867               	movf	setRF_DimmerValue@lights,w
  7716  1256  3E14               	addlw	20
  7717  1257  319D  2554  3192   	fcall	_setProductData
  7718                           
  7719                           ;RF_Control_B1.c: 432: setDimmerLights_AdjRF(lights);
  7720  125A  0020               	movlb	0	; select bank0
  7721  125B  0867               	movf	setRF_DimmerValue@lights,w
  7722  125C  3190  20C0         	fcall	_setDimmerLights_AdjRF
  7723  125E  0008               	return
  7724  125F                     __end_of_setRF_DimmerValue:	
  7725                           
  7726                           	psect	text31
  7727  10C0                     __ptext31:	
  7728 ;; *************** function _setDimmerLights_AdjRF *****************
  7729 ;; Defined at:
  7730 ;;		line 911 in file "../src/Dimmer_B1.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  lights          1    wreg     unsigned char 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  lights          1   67[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;		None               void
  7737 ;; Registers used:
  7738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:        2 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    8
  7751 ;; This function calls:
  7752 ;;		_DimmerLightsPointSelect
  7753 ;;		_getPercentValue
  7754 ;; This function is called by:
  7755 ;;		_setRF_DimmerValue
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _setDimmerLights_AdjRF
  7761  10C0                     _setDimmerLights_AdjRF:	
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7765                           ;setDimmerLights_AdjRF@lights stored from wreg
  7766  10C0  0020               	movlb	0	; select bank0
  7767  10C1  00E3               	movwf	setDimmerLights_AdjRF@lights
  7768                           
  7769                           ;Dimmer_B1.c: 913: DimmerLightsPointSelect(lights);
  7770  10C2  0863               	movf	setDimmerLights_AdjRF@lights,w
  7771  10C3  319C  24C9  3190   	fcall	_DimmerLightsPointSelect
  7772                           
  7773                           ;Dimmer_B1.c: 914: DimmerLights->AdjRF = 1;
  7774  10C6  0020               	movlb	0	; select bank0
  7775  10C7  086F               	movf	_DimmerLights,w
  7776  10C8  3E02               	addlw	2
  7777  10C9  0086               	movwf	6
  7778  10CA  3001               	movlw	1	; select bank2/3
  7779  10CB  0087               	movwf	7
  7780  10CC  1401               	bsf	1,0
  7781                           
  7782                           ;Dimmer_B1.c: 915: DimmerLights->Signal = 1;
  7783  10CD  0A6F               	incf	_DimmerLights,w
  7784  10CE  0086               	movwf	6
  7785  10CF  3001               	movlw	1	; select bank2/3
  7786  10D0  0087               	movwf	7
  7787  10D1  1681               	bsf	1,5
  7788                           
  7789                           ;Dimmer_B1.c: 916: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7790  10D2  0879               	movf	_product,w
  7791  10D3  3E09               	addlw	9
  7792  10D4  0086               	movwf	6
  7793  10D5  3002               	movlw	2	; select bank4/5
  7794  10D6  0087               	movwf	7
  7795  10D7  0801               	movf	1,w
  7796  10D8  318A  22D0         	fcall	_getPercentValue
  7797  10DA  0020               	movlb	0	; select bank0
  7798  10DB  00E2               	movwf	??_setDimmerLights_AdjRF
  7799  10DC  086F               	movf	_DimmerLights,w
  7800  10DD  3E06               	addlw	6
  7801  10DE  0086               	movwf	6
  7802  10DF  3001               	movlw	1	; select bank2/3
  7803  10E0  0087               	movwf	7
  7804  10E1  0862               	movf	??_setDimmerLights_AdjRF,w
  7805  10E2  0081               	movwf	1
  7806  10E3  0008               	return
  7807  10E4                     __end_of_setDimmerLights_AdjRF:	
  7808                           
  7809                           	psect	text32
  7810  0AD0                     __ptext32:	
  7811 ;; *************** function _getPercentValue *****************
  7812 ;; Defined at:
  7813 ;;		line 1026 in file "../src/Dimmer_B1.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  value           1    wreg     unsigned char 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  value           1   62[BANK0 ] unsigned char 
  7818 ;;  i               3   63[BANK0 ] float 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  1    wreg      unsigned char 
  7821 ;; Registers used:
  7822 ;;		wreg, status,2, status,0, pclath, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;Total ram usage:        6 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:    7
  7835 ;; This function calls:
  7836 ;;		___awtoft
  7837 ;;		___ftadd
  7838 ;;		___ftdiv
  7839 ;;		___ftmul
  7840 ;;		___ftneg
  7841 ;;		___fttol
  7842 ;; This function is called by:
  7843 ;;		_setDimmerLights_AdjRF
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _getPercentValue
  7849  0AD0                     _getPercentValue:	
  7850                           
  7851                           ;incstack = 0
  7852                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7853                           ;getPercentValue@value stored from wreg
  7854  0AD0  0020               	movlb	0	; select bank0
  7855  0AD1  00DE               	movwf	getPercentValue@value
  7856                           
  7857                           ;Dimmer_B1.c: 1034: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  7858  0AD2  3000               	movlw	0
  7859  0AD3  00DF               	movwf	getPercentValue@i
  7860  0AD4  3030               	movlw	48
  7861  0AD5  00E0               	movwf	getPercentValue@i+1
  7862  0AD6  3042               	movlw	66
  7863  0AD7  00E1               	movwf	getPercentValue@i+2
  7864                           
  7865                           ;Dimmer_B1.c: 1035: i /= 100;
  7866  0AD8  3000               	movlw	0
  7867  0AD9  00AE               	movwf	___ftdiv@f2
  7868  0ADA  30C8               	movlw	200
  7869  0ADB  00AF               	movwf	___ftdiv@f2+1
  7870  0ADC  3042               	movlw	66
  7871  0ADD  00B0               	movwf	___ftdiv@f2+2
  7872  0ADE  085F               	movf	getPercentValue@i,w
  7873  0ADF  00B1               	movwf	___ftdiv@f1
  7874  0AE0  0860               	movf	getPercentValue@i+1,w
  7875  0AE1  00B2               	movwf	___ftdiv@f1+1
  7876  0AE2  0861               	movf	getPercentValue@i+2,w
  7877  0AE3  00B3               	movwf	___ftdiv@f1+2
  7878  0AE4  318E  26A7  318A   	fcall	___ftdiv
  7879  0AE7  0020               	movlb	0	; select bank0
  7880  0AE8  082E               	movf	?___ftdiv,w
  7881  0AE9  00DF               	movwf	getPercentValue@i
  7882  0AEA  082F               	movf	?___ftdiv+1,w
  7883  0AEB  00E0               	movwf	getPercentValue@i+1
  7884  0AEC  0830               	movf	?___ftdiv+2,w
  7885  0AED  00E1               	movwf	getPercentValue@i+2
  7886                           
  7887                           ;Dimmer_B1.c: 1037: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  7888  0AEE  085E               	movf	getPercentValue@value,w
  7889  0AEF  00DC               	movwf	??_getPercentValue
  7890  0AF0  01DD               	clrf	??_getPercentValue+1
  7891  0AF1  09DC               	comf	??_getPercentValue,f
  7892  0AF2  09DD               	comf	??_getPercentValue+1,f
  7893  0AF3  0ADC               	incf	??_getPercentValue,f
  7894  0AF4  1903               	skipnz
  7895  0AF5  0ADD               	incf	??_getPercentValue+1,f
  7896  0AF6  085C               	movf	??_getPercentValue,w
  7897  0AF7  3E64               	addlw	100
  7898  0AF8  00A8               	movwf	___awtoft@c
  7899  0AF9  3000               	movlw	0
  7900  0AFA  3D5D               	addwfc	??_getPercentValue+1,w
  7901  0AFB  00A9               	movwf	___awtoft@c+1
  7902  0AFC  3190  207B  318A   	fcall	___awtoft
  7903  0AFF  0020               	movlb	0	; select bank0
  7904  0B00  0828               	movf	?___awtoft,w
  7905  0B01  00B1               	movwf	___ftmul@f2
  7906  0B02  0829               	movf	?___awtoft+1,w
  7907  0B03  00B2               	movwf	___ftmul@f2+1
  7908  0B04  082A               	movf	?___awtoft+2,w
  7909  0B05  00B3               	movwf	___ftmul@f2+2
  7910  0B06  085F               	movf	getPercentValue@i,w
  7911  0B07  00AE               	movwf	___ftmul@f1
  7912  0B08  0860               	movf	getPercentValue@i+1,w
  7913  0B09  00AF               	movwf	___ftmul@f1+1
  7914  0B0A  0861               	movf	getPercentValue@i+2,w
  7915  0B0B  00B0               	movwf	___ftmul@f1+2
  7916  0B0C  3187  2704  318A   	fcall	___ftmul
  7917  0B0F  0020               	movlb	0	; select bank0
  7918  0B10  082E               	movf	?___ftmul,w
  7919  0B11  00BE               	movwf	___ftneg@f1
  7920  0B12  082F               	movf	?___ftmul+1,w
  7921  0B13  00BF               	movwf	___ftneg@f1+1
  7922  0B14  0830               	movf	?___ftmul+2,w
  7923  0B15  00C0               	movwf	___ftneg@f1+2
  7924  0B16  319C  247A  318A   	fcall	___ftneg
  7925  0B19  0020               	movlb	0	; select bank0
  7926  0B1A  083E               	movf	?___ftneg,w
  7927  0B1B  00C4               	movwf	___ftadd@f2
  7928  0B1C  083F               	movf	?___ftneg+1,w
  7929  0B1D  00C5               	movwf	___ftadd@f2+1
  7930  0B1E  0840               	movf	?___ftneg+2,w
  7931  0B1F  00C6               	movwf	___ftadd@f2+2
  7932  0B20  3000               	movlw	0
  7933  0B21  00C1               	movwf	___ftadd@f1
  7934  0B22  3060               	movlw	96
  7935  0B23  00C2               	movwf	___ftadd@f1+1
  7936  0B24  3042               	movlw	66
  7937  0B25  00C3               	movwf	___ftadd@f1+2
  7938  0B26  3184  2456  318A   	fcall	___ftadd
  7939  0B29  0020               	movlb	0	; select bank0
  7940  0B2A  0841               	movf	?___ftadd,w
  7941  0B2B  00CE               	movwf	___fttol@f1
  7942  0B2C  0842               	movf	?___ftadd+1,w
  7943  0B2D  00CF               	movwf	___fttol@f1+1
  7944  0B2E  0843               	movf	?___ftadd+2,w
  7945  0B2F  00D0               	movwf	___fttol@f1+2
  7946  0B30  318D  2589         	fcall	___fttol
  7947  0B32  0020               	movlb	0	; select bank0
  7948  0B33  084E               	movf	?___fttol,w
  7949  0B34  0008               	return
  7950  0B35                     __end_of_getPercentValue:	
  7951                           
  7952                           	psect	text33
  7953  0704                     __ptext33:	
  7954 ;; *************** function ___ftmul *****************
  7955 ;; Defined at:
  7956 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;  f1              3   14[BANK0 ] float 
  7959 ;;  f2              3   17[BANK0 ] float 
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7962 ;;  sign            1   29[BANK0 ] unsigned char 
  7963 ;;  cntr            1   28[BANK0 ] unsigned char 
  7964 ;;  exp             1   24[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  3   14[BANK0 ] float 
  7967 ;; Registers used:
  7968 ;;		wreg, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:       16 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    6
  7981 ;; This function calls:
  7982 ;;		___ftpack
  7983 ;; This function is called by:
  7984 ;;		_getPercentValue
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           
  7989                           ;psect for function ___ftmul
  7990  0704                     ___ftmul:	
  7991                           
  7992                           ;incstack = 0
  7993                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7994  0704  0020               	movlb	0	; select bank0
  7995  0705  082E               	movf	___ftmul@f1,w
  7996  0706  00B4               	movwf	??___ftmul
  7997  0707  082F               	movf	___ftmul@f1+1,w
  7998  0708  00B5               	movwf	??___ftmul+1
  7999  0709  0830               	movf	___ftmul@f1+2,w
  8000  070A  00B6               	movwf	??___ftmul+2
  8001  070B  1003               	clrc
  8002  070C  0D35               	rlf	??___ftmul+1,w
  8003  070D  0D36               	rlf	??___ftmul+2,w
  8004  070E  00B7               	movwf	??___ftmul+3
  8005  070F  0837               	movf	??___ftmul+3,w
  8006  0710  00B8               	movwf	___ftmul@exp
  8007  0711  08B8               	movf	___ftmul@exp,f
  8008  0712  1D03               	skipz
  8009  0713  2F1B               	goto	l8128
  8010  0714  3000               	movlw	0
  8011  0715  00AE               	movwf	?___ftmul
  8012  0716  3000               	movlw	0
  8013  0717  00AF               	movwf	?___ftmul+1
  8014  0718  3000               	movlw	0
  8015  0719  00B0               	movwf	?___ftmul+2
  8016  071A  0008               	return
  8017  071B                     l8128:	
  8018  071B  0831               	movf	___ftmul@f2,w
  8019  071C  00B4               	movwf	??___ftmul
  8020  071D  0832               	movf	___ftmul@f2+1,w
  8021  071E  00B5               	movwf	??___ftmul+1
  8022  071F  0833               	movf	___ftmul@f2+2,w
  8023  0720  00B6               	movwf	??___ftmul+2
  8024  0721  1003               	clrc
  8025  0722  0D35               	rlf	??___ftmul+1,w
  8026  0723  0D36               	rlf	??___ftmul+2,w
  8027  0724  00B7               	movwf	??___ftmul+3
  8028  0725  0837               	movf	??___ftmul+3,w
  8029  0726  00BD               	movwf	___ftmul@sign
  8030  0727  08BD               	movf	___ftmul@sign,f
  8031  0728  1D03               	skipz
  8032  0729  2F31               	goto	l8134
  8033  072A  3000               	movlw	0
  8034  072B  00AE               	movwf	?___ftmul
  8035  072C  3000               	movlw	0
  8036  072D  00AF               	movwf	?___ftmul+1
  8037  072E  3000               	movlw	0
  8038  072F  00B0               	movwf	?___ftmul+2
  8039  0730  0008               	return
  8040  0731                     l8134:	
  8041  0731  083D               	movf	___ftmul@sign,w
  8042  0732  3E7B               	addlw	123
  8043  0733  00B4               	movwf	??___ftmul
  8044  0734  0834               	movf	??___ftmul,w
  8045  0735  07B8               	addwf	___ftmul@exp,f
  8046  0736  082E               	movf	___ftmul@f1,w
  8047  0737  00B4               	movwf	??___ftmul
  8048  0738  082F               	movf	___ftmul@f1+1,w
  8049  0739  00B5               	movwf	??___ftmul+1
  8050  073A  0830               	movf	___ftmul@f1+2,w
  8051  073B  00B6               	movwf	??___ftmul+2
  8052  073C  3010               	movlw	16
  8053  073D                     u8525:	
  8054  073D  36B6               	lsrf	??___ftmul+2,f
  8055  073E  0CB5               	rrf	??___ftmul+1,f
  8056  073F  0CB4               	rrf	??___ftmul,f
  8057  0740  0B89               	decfsz	9,f
  8058  0741  2F3D               	goto	u8525
  8059  0742  0834               	movf	??___ftmul,w
  8060  0743  00B7               	movwf	??___ftmul+3
  8061  0744  0837               	movf	??___ftmul+3,w
  8062  0745  00BD               	movwf	___ftmul@sign
  8063  0746  0831               	movf	___ftmul@f2,w
  8064  0747  00B4               	movwf	??___ftmul
  8065  0748  0832               	movf	___ftmul@f2+1,w
  8066  0749  00B5               	movwf	??___ftmul+1
  8067  074A  0833               	movf	___ftmul@f2+2,w
  8068  074B  00B6               	movwf	??___ftmul+2
  8069  074C  3010               	movlw	16
  8070  074D                     u8535:	
  8071  074D  36B6               	lsrf	??___ftmul+2,f
  8072  074E  0CB5               	rrf	??___ftmul+1,f
  8073  074F  0CB4               	rrf	??___ftmul,f
  8074  0750  0B89               	decfsz	9,f
  8075  0751  2F4D               	goto	u8535
  8076  0752  0834               	movf	??___ftmul,w
  8077  0753  00B7               	movwf	??___ftmul+3
  8078  0754  0837               	movf	??___ftmul+3,w
  8079  0755  06BD               	xorwf	___ftmul@sign,f
  8080  0756  3080               	movlw	128
  8081  0757  00B4               	movwf	??___ftmul
  8082  0758  0834               	movf	??___ftmul,w
  8083  0759  05BD               	andwf	___ftmul@sign,f
  8084  075A  17AF               	bsf	___ftmul@f1+1,7
  8085  075B  17B2               	bsf	___ftmul@f2+1,7
  8086  075C  30FF               	movlw	255
  8087  075D  05B1               	andwf	___ftmul@f2,f
  8088  075E  30FF               	movlw	255
  8089  075F  05B2               	andwf	___ftmul@f2+1,f
  8090  0760  3000               	movlw	0
  8091  0761  05B3               	andwf	___ftmul@f2+2,f
  8092  0762  3000               	movlw	0
  8093  0763  00B9               	movwf	___ftmul@f3_as_product
  8094  0764  3000               	movlw	0
  8095  0765  00BA               	movwf	___ftmul@f3_as_product+1
  8096  0766  3000               	movlw	0
  8097  0767  00BB               	movwf	___ftmul@f3_as_product+2
  8098  0768  3007               	movlw	7
  8099  0769  00B4               	movwf	??___ftmul
  8100  076A  0834               	movf	??___ftmul,w
  8101  076B  00BC               	movwf	___ftmul@cntr
  8102  076C                     l8146:	
  8103  076C  1C2E               	btfss	___ftmul@f1,0
  8104  076D  2F74               	goto	l8150
  8105  076E  0831               	movf	___ftmul@f2,w
  8106  076F  07B9               	addwf	___ftmul@f3_as_product,f
  8107  0770  0832               	movf	___ftmul@f2+1,w
  8108  0771  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8109  0772  0833               	movf	___ftmul@f2+2,w
  8110  0773  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8111  0774                     l8150:	
  8112  0774  3001               	movlw	1
  8113  0775                     u8555:	
  8114  0775  36B0               	lsrf	___ftmul@f1+2,f
  8115  0776  0CAF               	rrf	___ftmul@f1+1,f
  8116  0777  0CAE               	rrf	___ftmul@f1,f
  8117  0778  0B89               	decfsz	9,f
  8118  0779  2F75               	goto	u8555
  8119  077A  3001               	movlw	1
  8120  077B                     u8565:	
  8121  077B  35B1               	lslf	___ftmul@f2,f
  8122  077C  0DB2               	rlf	___ftmul@f2+1,f
  8123  077D  0DB3               	rlf	___ftmul@f2+2,f
  8124  077E  0B89               	decfsz	9,f
  8125  077F  2F7B               	goto	u8565
  8126  0780  3001               	movlw	1
  8127  0781  02BC               	subwf	___ftmul@cntr,f
  8128  0782  1D03               	btfss	3,2
  8129  0783  2F6C               	goto	l8146
  8130  0784  3009               	movlw	9
  8131  0785  00B4               	movwf	??___ftmul
  8132  0786  0834               	movf	??___ftmul,w
  8133  0787  00BC               	movwf	___ftmul@cntr
  8134  0788                     l8158:	
  8135  0788  1C2E               	btfss	___ftmul@f1,0
  8136  0789  2F90               	goto	l8162
  8137  078A  0831               	movf	___ftmul@f2,w
  8138  078B  07B9               	addwf	___ftmul@f3_as_product,f
  8139  078C  0832               	movf	___ftmul@f2+1,w
  8140  078D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8141  078E  0833               	movf	___ftmul@f2+2,w
  8142  078F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8143  0790                     l8162:	
  8144  0790  3001               	movlw	1
  8145  0791                     u8595:	
  8146  0791  36B0               	lsrf	___ftmul@f1+2,f
  8147  0792  0CAF               	rrf	___ftmul@f1+1,f
  8148  0793  0CAE               	rrf	___ftmul@f1,f
  8149  0794  0B89               	decfsz	9,f
  8150  0795  2F91               	goto	u8595
  8151  0796  3001               	movlw	1
  8152  0797                     u8605:	
  8153  0797  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8154  0798  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8155  0799  0CB9               	rrf	___ftmul@f3_as_product,f
  8156  079A  0B89               	decfsz	9,f
  8157  079B  2F97               	goto	u8605
  8158  079C  3001               	movlw	1
  8159  079D  02BC               	subwf	___ftmul@cntr,f
  8160  079E  1D03               	btfss	3,2
  8161  079F  2F88               	goto	l8158
  8162  07A0  0839               	movf	___ftmul@f3_as_product,w
  8163  07A1  00A0               	movwf	___ftpack@arg
  8164  07A2  083A               	movf	___ftmul@f3_as_product+1,w
  8165  07A3  00A1               	movwf	___ftpack@arg+1
  8166  07A4  083B               	movf	___ftmul@f3_as_product+2,w
  8167  07A5  00A2               	movwf	___ftpack@arg+2
  8168  07A6  0838               	movf	___ftmul@exp,w
  8169  07A7  00B4               	movwf	??___ftmul
  8170  07A8  0834               	movf	??___ftmul,w
  8171  07A9  00A3               	movwf	___ftpack@exp
  8172  07AA  083D               	movf	___ftmul@sign,w
  8173  07AB  00B5               	movwf	??___ftmul+1
  8174  07AC  0835               	movf	??___ftmul+1,w
  8175  07AD  00A4               	movwf	___ftpack@sign
  8176  07AE  3189  21A6         	fcall	___ftpack
  8177  07B0  0020               	movlb	0	; select bank0
  8178  07B1  0820               	movf	?___ftpack,w
  8179  07B2  00AE               	movwf	?___ftmul
  8180  07B3  0821               	movf	?___ftpack+1,w
  8181  07B4  00AF               	movwf	?___ftmul+1
  8182  07B5  0822               	movf	?___ftpack+2,w
  8183  07B6  00B0               	movwf	?___ftmul+2
  8184  07B7  0008               	return
  8185  07B8                     __end_of___ftmul:	
  8186                           
  8187                           	psect	text34
  8188  1E4D                     __ptext34:	
  8189 ;; *************** function _setMemory_Modify *****************
  8190 ;; Defined at:
  8191 ;;		line 1065 in file "../src/MCU_B1.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  command         1    wreg     unsigned char 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  command         1    1[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;		None               void
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:        2 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    5
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_setLog_Code
  8216 ;;		_setRFSW_AdjControl
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function _setMemory_Modify
  8222  1E4D                     _setMemory_Modify:	
  8223                           
  8224                           ;incstack = 0
  8225                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8226                           ;setMemory_Modify@command stored from wreg
  8227  1E4D  0020               	movlb	0	; select bank0
  8228  1E4E  00A1               	movwf	setMemory_Modify@command
  8229                           
  8230                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8231  1E4F  0821               	movf	setMemory_Modify@command,w
  8232  1E50  3A01               	xorlw	1
  8233  1E51  3000               	movlw	0
  8234  1E52  1903               	skipnz
  8235  1E53  3001               	movlw	1
  8236  1E54  00A0               	movwf	??_setMemory_Modify
  8237  1E55  0023               	movlb	3	; select bank3
  8238  1E56  0862               	movf	(_Memory^(0+384)+36),w
  8239  1E57  0020               	movlb	0	; select bank0
  8240  1E58  0620               	xorwf	??_setMemory_Modify,w
  8241  1E59  39FE               	andlw	-2
  8242  1E5A  0620               	xorwf	??_setMemory_Modify,w
  8243  1E5B  0023               	movlb	3	; select bank3
  8244  1E5C  00E2               	movwf	(_Memory^(0+384)+36)
  8245                           
  8246                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8247  1E5D  01E0               	clrf	(_Memory^(0+384)+34)
  8248  1E5E  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8249  1E5F  0008               	return
  8250  1E60                     __end_of_setMemory_Modify:	
  8251                           
  8252                           	psect	text35
  8253  1DD0                     __ptext35:	
  8254 ;; *************** function _getRF_KeyStatus *****************
  8255 ;; Defined at:
  8256 ;;		line 154 in file "../src/RF_Control_B1.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  key             1    1[BANK0 ] unsigned char 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  1    wreg      unsigned char 
  8263 ;; Registers used:
  8264 ;;		wreg, status,2
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;Total ram usage:        3 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    5
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_setRF_Main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           
  8285                           ;psect for function _getRF_KeyStatus
  8286  1DD0                     _getRF_KeyStatus:	
  8287                           
  8288                           ;RF_Control_B1.c: 155: char key = 0;
  8289                           
  8290                           ;incstack = 0
  8291                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8292  1DD0  0020               	movlb	0	; select bank0
  8293  1DD1  01A1               	clrf	getRF_KeyStatus@key
  8294                           
  8295                           ;RF_Control_B1.c: 165: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8296  1DD2  01A2               	clrf	_getRF_KeyStatus$5046
  8297  1DD3  0AA2               	incf	_getRF_KeyStatus$5046,f
  8298  1DD4  1F0C               	btfss	12,6	;volatile
  8299  1DD5  1A0C               	btfsc	12,4	;volatile
  8300  1DD6  2DDB               	goto	l9042
  8301  1DD7  1C0C               	btfss	12,0	;volatile
  8302  1DD8  1B8C               	btfsc	12,7	;volatile
  8303  1DD9  2DDB               	goto	l9042
  8304  1DDA  01A2               	clrf	_getRF_KeyStatus$5046
  8305  1DDB                     l9042:	
  8306  1DDB  0822               	movf	_getRF_KeyStatus$5046,w
  8307  1DDC  00A0               	movwf	??_getRF_KeyStatus
  8308  1DDD  0820               	movf	??_getRF_KeyStatus,w
  8309  1DDE  00A1               	movwf	getRF_KeyStatus@key
  8310                           
  8311                           ;RF_Control_B1.c: 167: return key;
  8312  1DDF  0821               	movf	getRF_KeyStatus@key,w
  8313  1DE0  0008               	return
  8314  1DE1                     __end_of_getRF_KeyStatus:	
  8315                           
  8316                           	psect	text36
  8317  1DBF                     __ptext36:	
  8318 ;; *************** function _getBuz_GO *****************
  8319 ;; Defined at:
  8320 ;;		line 82 in file "../src/Buzzer_B1.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;		None
  8323 ;; Auto vars:     Size  Location     Type
  8324 ;;  i               2    4[BANK0 ] int 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  2    0[BANK0 ] int 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;Total ram usage:        6 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    5
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_setRF_Main
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           
  8349                           ;psect for function _getBuz_GO
  8350  1DBF                     _getBuz_GO:	
  8351                           
  8352                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8353                           
  8354                           ;incstack = 0
  8355                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8356  1DBF  0021               	movlb	1	; select bank1
  8357  1DC0  0C2E               	rrf	_Buz1^(0+128),w
  8358  1DC1  3901               	andlw	1
  8359  1DC2  0020               	movlb	0	; select bank0
  8360  1DC3  00A2               	movwf	??_getBuz_GO
  8361  1DC4  01A3               	clrf	??_getBuz_GO+1
  8362  1DC5  0822               	movf	??_getBuz_GO,w
  8363  1DC6  00A4               	movwf	getBuz_GO@i
  8364  1DC7  0823               	movf	??_getBuz_GO+1,w
  8365  1DC8  00A5               	movwf	getBuz_GO@i+1
  8366                           
  8367                           ;Buzzer_B1.c: 84: return i;
  8368  1DC9  0825               	movf	getBuz_GO@i+1,w
  8369  1DCA  01A1               	clrf	?_getBuz_GO+1
  8370  1DCB  07A1               	addwf	?_getBuz_GO+1,f
  8371  1DCC  0824               	movf	getBuz_GO@i,w
  8372  1DCD  01A0               	clrf	?_getBuz_GO
  8373  1DCE  07A0               	addwf	?_getBuz_GO,f
  8374  1DCF  0008               	return
  8375  1DD0                     __end_of_getBuz_GO:	
  8376                           
  8377                           	psect	text37
  8378  1E3A                     __ptext37:	
  8379 ;; *************** function _RF_RxDisable *****************
  8380 ;; Defined at:
  8381 ;;		line 227 in file "../src/RF_Control_B1.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;		None               void
  8388 ;; Registers used:
  8389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    7
  8402 ;; This function calls:
  8403 ;;		_CC2500_WriteCommand
  8404 ;; This function is called by:
  8405 ;;		_setRF_Main
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _RF_RxDisable
  8411  1E3A                     _RF_RxDisable:	
  8412                           
  8413                           ;RF_Control_B1.c: 228: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8417  1E3A  0021               	movlb	1	; select bank1
  8418  1E3B  18BA               	btfsc	_RF1^(0+128),1
  8419  1E3C  2E3F               	goto	l2080
  8420  1E3D  1DBA               	btfss	_RF1^(0+128),3
  8421  1E3E  0008               	return
  8422  1E3F                     l2080:	
  8423                           
  8424                           ;RF_Control_B1.c: 229: RF1.RxStatus = 0;
  8425  1E3F  11BA               	bcf	_RF1^(0+128),3
  8426                           
  8427                           ;RF_Control_B1.c: 230: RF1.ReceiveGO = 0;
  8428  1E40  10BA               	bcf	_RF1^(0+128),1
  8429                           
  8430                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x36);
  8431  1E41  3036               	movlw	54
  8432  1E42  319E  26E0  319E   	fcall	_CC2500_WriteCommand
  8433                           
  8434                           ;RF_Control_B1.c: 233: CC2500_WriteCommand(0x3A);
  8435  1E45  303A               	movlw	58
  8436  1E46  319E  26E0  319E   	fcall	_CC2500_WriteCommand
  8437                           
  8438                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x3B);
  8439  1E49  303B               	movlw	59
  8440  1E4A  319E  26E0         	fcall	_CC2500_WriteCommand
  8441  1E4C  0008               	return
  8442  1E4D                     __end_of_RF_RxDisable:	
  8443                           
  8444                           	psect	text38
  8445  0A07                     __ptext38:	
  8446 ;; *************** function _CC2500_TxData *****************
  8447 ;; Defined at:
  8448 ;;		line 32 in file "../src/CC2500_B1.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;		None
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;		None               void
  8455 ;; Registers used:
  8456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;Total ram usage:        2 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    7
  8469 ;; This function calls:
  8470 ;;		_CC2500_WriteByte
  8471 ;;		_CC2500_WriteCommand
  8472 ;;		_Timeout_Counter
  8473 ;;		_set_TimeoutCleared
  8474 ;; This function is called by:
  8475 ;;		_setRF_Main
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _CC2500_TxData
  8481  0A07                     _CC2500_TxData:	
  8482                           
  8483                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8484                           ;CC2500_B1.c: 35: RC0 = 0;
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8488  0A07  0020               	movlb	0	; select bank0
  8489  0A08  100E               	bcf	14,0	;volatile
  8490                           
  8491                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8492  0A09  307F               	movlw	127
  8493  0A0A  00A4               	movwf	??_CC2500_TxData
  8494  0A0B  0824               	movf	??_CC2500_TxData,w
  8495  0A0C  0021               	movlb	1	; select bank1
  8496  0A0D  00D1               	movwf	_SPI0Buffer^(0+128)
  8497                           
  8498                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8499  0A0E  2A12               	goto	l8746
  8500  0A0F                     l8744:	
  8501                           
  8502                           ;CC2500_B1.c: 38: Timeout_Counter();
  8503  0A0F  319E  2687  318A   	fcall	_Timeout_Counter
  8504  0A12                     l8746:	
  8505  0A12  0020               	movlb	0	; select bank0
  8506  0A13  1E8E               	btfss	14,5	;volatile
  8507  0A14  2A18               	goto	l8750
  8508  0A15  0021               	movlb	1	; select bank1
  8509  0A16  1D2B               	btfss	(_myMain^(0+128)+11),2
  8510  0A17  2A0F               	goto	l8744
  8511  0A18                     l8750:	
  8512                           
  8513                           ;CC2500_B1.c: 39: };
  8514                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8515  0A18  319C  243D  318A   	fcall	_set_TimeoutCleared
  8516                           
  8517                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8518  0A1B  319E  26C7  318A   	fcall	_CC2500_WriteByte
  8519                           
  8520                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8521  0A1E  0021               	movlb	1	; select bank1
  8522  0A1F  0853               	movf	_Tx_Length^(0+128),w
  8523  0A20  0020               	movlb	0	; select bank0
  8524  0A21  00A4               	movwf	??_CC2500_TxData
  8525  0A22  0824               	movf	??_CC2500_TxData,w
  8526  0A23  0021               	movlb	1	; select bank1
  8527  0A24  00D1               	movwf	_SPI0Buffer^(0+128)
  8528                           
  8529                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8530  0A25  319E  26C7  318A   	fcall	_CC2500_WriteByte
  8531                           
  8532                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8533  0A28  0020               	movlb	0	; select bank0
  8534  0A29  01A5               	clrf	CC2500_TxData@loop_e
  8535  0A2A                     l8764:	
  8536  0A2A  0021               	movlb	1	; select bank1
  8537  0A2B  0853               	movf	_Tx_Length^(0+128),w
  8538  0A2C  0020               	movlb	0	; select bank0
  8539  0A2D  0225               	subwf	CC2500_TxData@loop_e,w
  8540  0A2E  1803               	btfsc	3,0
  8541  0A2F  2A43               	goto	l231
  8542                           
  8543                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8544  0A30  0825               	movf	CC2500_TxData@loop_e,w
  8545  0A31  3EA0               	addlw	_RF_Data& (0+255)
  8546  0A32  0086               	movwf	6
  8547  0A33  3001               	movlw	1	; select bank3/4
  8548  0A34  0087               	movwf	7
  8549  0A35  0801               	movf	1,w
  8550  0A36  00A4               	movwf	??_CC2500_TxData
  8551  0A37  0824               	movf	??_CC2500_TxData,w
  8552  0A38  0021               	movlb	1	; select bank1
  8553  0A39  00D1               	movwf	_SPI0Buffer^(0+128)
  8554                           
  8555                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8556  0A3A  319E  26C7  318A   	fcall	_CC2500_WriteByte
  8557  0A3D  3001               	movlw	1
  8558  0A3E  0020               	movlb	0	; select bank0
  8559  0A3F  00A4               	movwf	??_CC2500_TxData
  8560  0A40  0824               	movf	??_CC2500_TxData,w
  8561  0A41  07A5               	addwf	CC2500_TxData@loop_e,f
  8562  0A42  2A2A               	goto	l8764
  8563  0A43                     l231:	
  8564                           
  8565                           ;CC2500_B1.c: 48: }
  8566                           ;CC2500_B1.c: 49: RC0 = 1;
  8567  0A43  140E               	bsf	14,0	;volatile
  8568                           
  8569                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8570  0A44  3035               	movlw	53
  8571  0A45  319E  26E0  318A   	fcall	_CC2500_WriteCommand
  8572                           
  8573                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8574  0A48  2A4C               	goto	l8770
  8575  0A49                     l8768:	
  8576                           
  8577                           ;CC2500_B1.c: 52: Timeout_Counter();
  8578  0A49  319E  2687  318A   	fcall	_Timeout_Counter
  8579  0A4C                     l8770:	
  8580  0A4C  0020               	movlb	0	; select bank0
  8581  0A4D  188E               	btfsc	14,1	;volatile
  8582  0A4E  2A52               	goto	l8774
  8583  0A4F  0021               	movlb	1	; select bank1
  8584  0A50  1D2B               	btfss	(_myMain^(0+128)+11),2
  8585  0A51  2A49               	goto	l8768
  8586  0A52                     l8774:	
  8587                           
  8588                           ;CC2500_B1.c: 53: };
  8589                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8590  0A52  319C  243D  318A   	fcall	_set_TimeoutCleared
  8591                           
  8592                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8593  0A55  2A59               	goto	l8778
  8594  0A56                     l8776:	
  8595                           
  8596                           ;CC2500_B1.c: 57: Timeout_Counter();
  8597  0A56  319E  2687  318A   	fcall	_Timeout_Counter
  8598  0A59                     l8778:	
  8599  0A59  0020               	movlb	0	; select bank0
  8600  0A5A  1C8E               	btfss	14,1	;volatile
  8601  0A5B  2A5F               	goto	l8782
  8602  0A5C  0021               	movlb	1	; select bank1
  8603  0A5D  1D2B               	btfss	(_myMain^(0+128)+11),2
  8604  0A5E  2A56               	goto	l8776
  8605  0A5F                     l8782:	
  8606                           
  8607                           ;CC2500_B1.c: 58: };
  8608                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8609  0A5F  319C  243D  318A   	fcall	_set_TimeoutCleared
  8610                           
  8611                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8612  0A62  3036               	movlw	54
  8613  0A63  319E  26E0  318A   	fcall	_CC2500_WriteCommand
  8614                           
  8615                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8616  0A66  303B               	movlw	59
  8617  0A67  319E  26E0         	fcall	_CC2500_WriteCommand
  8618                           
  8619                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8620  0A69  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8621  0A6A  0008               	return
  8622  0A6B                     __end_of_CC2500_TxData:	
  8623                           
  8624                           	psect	text39
  8625  0BA2                     __ptext39:	
  8626 ;; *************** function _CC2500_RxData *****************
  8627 ;; Defined at:
  8628 ;;		line 70 in file "../src/CC2500_B1.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;		None
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8633 ;; Return value:  Size  Location     Type
  8634 ;;		None               void
  8635 ;; Registers used:
  8636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;Total ram usage:        2 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    7
  8649 ;; This function calls:
  8650 ;;		_CC2500_ReadByte
  8651 ;;		_CC2500_ReadStatus
  8652 ;;		_CC2500_WriteByte
  8653 ;;		_Timeout_Counter
  8654 ;;		_set_TimeoutCleared
  8655 ;; This function is called by:
  8656 ;;		_setRF_Main
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _CC2500_RxData
  8662  0BA2                     _CC2500_RxData:	
  8663                           
  8664                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8665                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8669  0BA2  0020               	movlb	0	; select bank0
  8670  0BA3  188E               	btfsc	14,1	;volatile
  8671  0BA4  2BA9               	goto	l8796
  8672  0BA5  2BB2               	goto	l8802
  8673  0BA6                     l8794:	
  8674                           ;CC2500_B1.c: 76: {
  8675                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8676                           
  8677                           
  8678                           ;CC2500_B1.c: 78: Timeout_Counter();
  8679  0BA6  319E  2687  318B   	fcall	_Timeout_Counter
  8680  0BA9                     l8796:	
  8681  0BA9  0020               	movlb	0	; select bank0
  8682  0BAA  1C8E               	btfss	14,1	;volatile
  8683  0BAB  2BAF               	goto	l8800
  8684  0BAC  0021               	movlb	1	; select bank1
  8685  0BAD  1D2B               	btfss	(_myMain^(0+128)+11),2
  8686  0BAE  2BA6               	goto	l8794
  8687  0BAF                     l8800:	
  8688                           
  8689                           ;CC2500_B1.c: 79: };
  8690                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8691  0BAF  319C  243D  318B   	fcall	_set_TimeoutCleared
  8692  0BB2                     l8802:	
  8693                           
  8694                           ;CC2500_B1.c: 81: }
  8695                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8696  0BB2  303B               	movlw	59
  8697  0BB3  3191  2109  318B   	fcall	_CC2500_ReadStatus
  8698                           
  8699                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8700  0BB6  0021               	movlb	1	; select bank1
  8701  0BB7  0856               	movf	_s_data^(0+128),w
  8702  0BB8  1903               	btfsc	3,2
  8703  0BB9  0008               	return
  8704                           
  8705                           ;CC2500_B1.c: 86: RC0 = 0;
  8706  0BBA  0020               	movlb	0	; select bank0
  8707  0BBB  100E               	bcf	14,0	;volatile
  8708                           
  8709                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8710  0BBC  30FF               	movlw	255
  8711  0BBD  00A4               	movwf	??_CC2500_RxData
  8712  0BBE  0824               	movf	??_CC2500_RxData,w
  8713  0BBF  0021               	movlb	1	; select bank1
  8714  0BC0  00D1               	movwf	_SPI0Buffer^(0+128)
  8715                           
  8716                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8717  0BC1  2BC5               	goto	l8812
  8718  0BC2                     l8810:	
  8719                           
  8720                           ;CC2500_B1.c: 89: Timeout_Counter();
  8721  0BC2  319E  2687  318B   	fcall	_Timeout_Counter
  8722  0BC5                     l8812:	
  8723  0BC5  0020               	movlb	0	; select bank0
  8724  0BC6  1E8E               	btfss	14,5	;volatile
  8725  0BC7  2BCB               	goto	l8816
  8726  0BC8  0021               	movlb	1	; select bank1
  8727  0BC9  1D2B               	btfss	(_myMain^(0+128)+11),2
  8728  0BCA  2BC2               	goto	l8810
  8729  0BCB                     l8816:	
  8730                           
  8731                           ;CC2500_B1.c: 90: };
  8732                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8733  0BCB  319C  243D  318B   	fcall	_set_TimeoutCleared
  8734                           
  8735                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8736  0BCE  319E  26C7  318B   	fcall	_CC2500_WriteByte
  8737                           
  8738                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8739  0BD1  319F  2766  318B   	fcall	_CC2500_ReadByte
  8740                           
  8741                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8742  0BD4  0021               	movlb	1	; select bank1
  8743  0BD5  0851               	movf	_SPI0Buffer^(0+128),w
  8744  0BD6  0020               	movlb	0	; select bank0
  8745  0BD7  00A4               	movwf	??_CC2500_RxData
  8746  0BD8  0824               	movf	??_CC2500_RxData,w
  8747  0BD9  0021               	movlb	1	; select bank1
  8748  0BDA  00D0               	movwf	_Rx_Length^(0+128)
  8749                           
  8750                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8751  0BDB  0020               	movlb	0	; select bank0
  8752  0BDC  01A5               	clrf	CC2500_RxData@loop_f
  8753  0BDD                     l8832:	
  8754  0BDD  0021               	movlb	1	; select bank1
  8755  0BDE  0850               	movf	_Rx_Length^(0+128),w
  8756  0BDF  0020               	movlb	0	; select bank0
  8757  0BE0  0225               	subwf	CC2500_RxData@loop_f,w
  8758  0BE1  1803               	btfsc	3,0
  8759  0BE2  2BF6               	goto	l8834
  8760                           
  8761                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8762  0BE3  319F  2766  318B   	fcall	_CC2500_ReadByte
  8763                           
  8764                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8765  0BE6  0021               	movlb	1	; select bank1
  8766  0BE7  0851               	movf	_SPI0Buffer^(0+128),w
  8767  0BE8  0020               	movlb	0	; select bank0
  8768  0BE9  00A4               	movwf	??_CC2500_RxData
  8769  0BEA  0825               	movf	CC2500_RxData@loop_f,w
  8770  0BEB  3EA0               	addlw	_RF_Data& (0+255)
  8771  0BEC  0086               	movwf	6
  8772  0BED  3001               	movlw	1	; select bank3/4
  8773  0BEE  0087               	movwf	7
  8774  0BEF  0824               	movf	??_CC2500_RxData,w
  8775  0BF0  0081               	movwf	1
  8776  0BF1  3001               	movlw	1
  8777  0BF2  00A4               	movwf	??_CC2500_RxData
  8778  0BF3  0824               	movf	??_CC2500_RxData,w
  8779  0BF4  07A5               	addwf	CC2500_RxData@loop_f,f
  8780  0BF5  2BDD               	goto	l8832
  8781  0BF6                     l8834:	
  8782                           
  8783                           ;CC2500_B1.c: 99: }
  8784                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8785  0BF6  319F  2766  318B   	fcall	_CC2500_ReadByte
  8786                           
  8787                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8788  0BF9  0021               	movlb	1	; select bank1
  8789  0BFA  0851               	movf	_SPI0Buffer^(0+128),w
  8790  0BFB  0020               	movlb	0	; select bank0
  8791  0BFC  00A4               	movwf	??_CC2500_RxData
  8792  0BFD  0824               	movf	??_CC2500_RxData,w
  8793  0BFE  0021               	movlb	1	; select bank1
  8794  0BFF  00CF               	movwf	_RSSI^(0+128)
  8795                           
  8796                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8797  0C00  319F  2766         	fcall	_CC2500_ReadByte
  8798                           
  8799                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8800  0C02  0021               	movlb	1	; select bank1
  8801  0C03  0851               	movf	_SPI0Buffer^(0+128),w
  8802  0C04  0020               	movlb	0	; select bank0
  8803  0C05  00A4               	movwf	??_CC2500_RxData
  8804  0C06  0824               	movf	??_CC2500_RxData,w
  8805  0C07  0021               	movlb	1	; select bank1
  8806  0C08  00CB               	movwf	_CRC^(0+128)
  8807                           
  8808                           ;CC2500_B1.c: 104: RC0 = 1;
  8809  0C09  0020               	movlb	0	; select bank0
  8810  0C0A  140E               	bsf	14,0	;volatile
  8811                           
  8812                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8813  0C0B  0021               	movlb	1	; select bank1
  8814  0C0C  1BCB               	btfsc	_CRC^(0+128),7
  8815                           
  8816                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8817  0C0D  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8818                           
  8819                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8820  0C0E  11BA               	bcf	_RF1^(0+128),3
  8821                           
  8822                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8823  0C0F  14BA               	bsf	_RF1^(0+128),1
  8824  0C10  0008               	return
  8825  0C11                     __end_of_CC2500_RxData:	
  8826                           
  8827                           	psect	text40
  8828  1109                     __ptext40:	
  8829 ;; *************** function _CC2500_ReadStatus *****************
  8830 ;; Defined at:
  8831 ;;		line 301 in file "../src/CC2500_B1.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  status_addr     1    wreg     unsigned char 
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8836 ;; Return value:  Size  Location     Type
  8837 ;;		None               void
  8838 ;; Registers used:
  8839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;Total ram usage:        2 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:    6
  8852 ;; This function calls:
  8853 ;;		_CC2500_ReadByte
  8854 ;;		_CC2500_WriteByte
  8855 ;;		_Timeout_Counter
  8856 ;;		_set_TimeoutCleared
  8857 ;; This function is called by:
  8858 ;;		_CC2500_RxData
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _CC2500_ReadStatus
  8864  1109                     _CC2500_ReadStatus:	
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8868                           ;CC2500_ReadStatus@status_addr stored from wreg
  8869  1109  0020               	movlb	0	; select bank0
  8870  110A  00A3               	movwf	CC2500_ReadStatus@status_addr
  8871                           
  8872                           ;CC2500_B1.c: 302: RC0 = 0;
  8873  110B  100E               	bcf	14,0	;volatile
  8874                           
  8875                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8876  110C  0823               	movf	CC2500_ReadStatus@status_addr,w
  8877  110D  3EC0               	addlw	192
  8878  110E  00A2               	movwf	??_CC2500_ReadStatus
  8879  110F  0822               	movf	??_CC2500_ReadStatus,w
  8880  1110  0021               	movlb	1	; select bank1
  8881  1111  00D1               	movwf	_SPI0Buffer^(0+128)
  8882                           
  8883                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  8884  1112  2916               	goto	l8618
  8885  1113                     l8616:	
  8886                           
  8887                           ;CC2500_B1.c: 306: Timeout_Counter();
  8888  1113  319E  2687  3191   	fcall	_Timeout_Counter
  8889  1116                     l8618:	
  8890  1116  0020               	movlb	0	; select bank0
  8891  1117  1E8E               	btfss	14,5	;volatile
  8892  1118  291C               	goto	l8622
  8893  1119  0021               	movlb	1	; select bank1
  8894  111A  1D2B               	btfss	(_myMain^(0+128)+11),2
  8895  111B  2913               	goto	l8616
  8896  111C                     l8622:	
  8897                           
  8898                           ;CC2500_B1.c: 307: };
  8899                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8900  111C  319C  243D  3191   	fcall	_set_TimeoutCleared
  8901                           
  8902                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8903  111F  319E  26C7  3191   	fcall	_CC2500_WriteByte
  8904                           
  8905                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8906  1122  319F  2766         	fcall	_CC2500_ReadByte
  8907                           
  8908                           ;CC2500_B1.c: 312: RC0 = 1;
  8909  1124  0020               	movlb	0	; select bank0
  8910  1125  140E               	bsf	14,0	;volatile
  8911                           
  8912                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8913  1126  0021               	movlb	1	; select bank1
  8914  1127  0851               	movf	_SPI0Buffer^(0+128),w
  8915  1128  0020               	movlb	0	; select bank0
  8916  1129  00A2               	movwf	??_CC2500_ReadStatus
  8917  112A  0822               	movf	??_CC2500_ReadStatus,w
  8918  112B  0021               	movlb	1	; select bank1
  8919  112C  00D6               	movwf	_s_data^(0+128)
  8920  112D  0008               	return
  8921  112E                     __end_of_CC2500_ReadStatus:	
  8922                           
  8923                           	psect	text41
  8924  1F66                     __ptext41:	
  8925 ;; *************** function _CC2500_ReadByte *****************
  8926 ;; Defined at:
  8927 ;;		line 235 in file "../src/CC2500_B1.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;		None
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg, status,2, status,0
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        2 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    5
  8948 ;; This function calls:
  8949 ;;		Nothing
  8950 ;; This function is called by:
  8951 ;;		_CC2500_RxData
  8952 ;;		_CC2500_ReadStatus
  8953 ;;		_CC2500_ReadREG
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function _CC2500_ReadByte
  8959  1F66                     _CC2500_ReadByte:	
  8960                           
  8961                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8962                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8966  1F66  0020               	movlb	0	; select bank0
  8967  1F67  01A1               	clrf	CC2500_ReadByte@loop_b
  8968  1F68                     L2:	
  8969  1F68  3008               	movlw	8
  8970  1F69  0221               	subwf	CC2500_ReadByte@loop_b,w
  8971  1F6A  1803               	btfsc	3,0
  8972  1F6B  0008               	return
  8973                           
  8974                           ;CC2500_B1.c: 238: RC3 = 1;
  8975  1F6C  158E               	bsf	14,3	;volatile
  8976                           
  8977                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  8978  1F6D  1003               	clrc
  8979  1F6E  0021               	movlb	1	; select bank1
  8980  1F6F  0DD1               	rlf	_SPI0Buffer^(0+128),f
  8981                           
  8982                           ;CC2500_B1.c: 240: if (RC5 == 1)
  8983  1F70  0020               	movlb	0	; select bank0
  8984  1F71  1E8E               	btfss	14,5	;volatile
  8985  1F72  2F76               	goto	l8524
  8986                           
  8987                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  8988  1F73  0021               	movlb	1	; select bank1
  8989  1F74  1451               	bsf	_SPI0Buffer^(0+128),0
  8990  1F75  2F7C               	goto	l8526
  8991  1F76                     l8524:	
  8992                           
  8993                           ;CC2500_B1.c: 242: else
  8994                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  8995  1F76  30FE               	movlw	254
  8996  1F77  0020               	movlb	0	; select bank0
  8997  1F78  00A0               	movwf	??_CC2500_ReadByte
  8998  1F79  0820               	movf	??_CC2500_ReadByte,w
  8999  1F7A  0021               	movlb	1	; select bank1
  9000  1F7B  05D1               	andwf	_SPI0Buffer^(0+128),f
  9001  1F7C                     l8526:	
  9002                           
  9003                           ;CC2500_B1.c: 244: RC3 = 0;
  9004  1F7C  0020               	movlb	0	; select bank0
  9005  1F7D  118E               	bcf	14,3	;volatile
  9006  1F7E  3001               	movlw	1
  9007  1F7F  00A0               	movwf	??_CC2500_ReadByte
  9008  1F80  0820               	movf	??_CC2500_ReadByte,w
  9009  1F81  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9010  1F82  2F68               	goto	L2
  9011  1F83                     __end_of_CC2500_ReadByte:	
  9012                           
  9013                           	psect	text42
  9014  1C11                     __ptext42:	
  9015 ;; *************** function _RF_Initialization *****************
  9016 ;; Defined at:
  9017 ;;		line 9 in file "../src/RF_Control_B1.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;		None               void
  9024 ;; Registers used:
  9025 ;;		wreg, status,2, status,0, pclath, cstack
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        0 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    6
  9038 ;; This function calls:
  9039 ;;		_setRF_Initialization
  9040 ;; This function is called by:
  9041 ;;		_main
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _RF_Initialization
  9047  1C11                     _RF_Initialization:	
  9048                           
  9049                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9053  1C11  319C  24EA         	fcall	_setRF_Initialization
  9054  1C13  0008               	return
  9055  1C14                     __end_of_RF_Initialization:	
  9056                           
  9057                           	psect	text43
  9058  1CEA                     __ptext43:	
  9059 ;; *************** function _setRF_Initialization *****************
  9060 ;; Defined at:
  9061 ;;		line 43 in file "../src/RF_Control_B1.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;		None
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;		None
  9066 ;; Return value:  Size  Location     Type
  9067 ;;		None               void
  9068 ;; Registers used:
  9069 ;;		wreg
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;Total ram usage:        1 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    5
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_RF_Initialization
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _setRF_Initialization
  9091  1CEA                     _setRF_Initialization:	
  9092                           
  9093                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9094                           
  9095                           ;incstack = 0
  9096                           ; Regs used in _setRF_Initialization: [wreg]
  9097  1CEA  3015               	movlw	21
  9098  1CEB  0020               	movlb	0	; select bank0
  9099  1CEC  00A0               	movwf	??_setRF_Initialization
  9100  1CED  0820               	movf	??_setRF_Initialization,w
  9101  1CEE  0021               	movlb	1	; select bank1
  9102  1CEF  00D3               	movwf	_Tx_Length^(0+128)
  9103                           
  9104                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9105  1CF0  3005               	movlw	5
  9106  1CF1  00C1               	movwf	(_RF1^(0+128)+7)
  9107  1CF2  3000               	movlw	0
  9108  1CF3  00C2               	movwf	(_RF1^(0+128)+8)
  9109  1CF4  0008               	return
  9110  1CF5                     __end_of_setRF_Initialization:	
  9111                           
  9112                           	psect	text44
  9113  1E16                     __ptext44:	
  9114 ;; *************** function _Mcu_Initialization *****************
  9115 ;; Defined at:
  9116 ;;		line 30 in file "../src/MCU_B1.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, pclath, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;Total ram usage:        0 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    6
  9137 ;; This function calls:
  9138 ;;		_ADC_Set
  9139 ;;		_Fosc_Set
  9140 ;;		_IOC_Set
  9141 ;;		_IO_Set
  9142 ;;		_TMR1_Set
  9143 ;;		_WDT_Set
  9144 ;; This function is called by:
  9145 ;;		_main
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _Mcu_Initialization
  9151  1E16                     _Mcu_Initialization:	
  9152                           
  9153                           ;MCU_B1.c: 32: Fosc_Set();
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9157  1E16  3187  27FC  319E   	fcall	_Fosc_Set
  9158                           
  9159                           ;MCU_B1.c: 34: IO_Set();
  9160  1E19  319F  2714  319E   	fcall	_IO_Set
  9161                           
  9162                           ;MCU_B1.c: 36: ;;
  9163                           ;MCU_B1.c: 38: TMR1_Set();
  9164  1E1C  319D  2548  319E   	fcall	_TMR1_Set
  9165                           
  9166                           ;MCU_B1.c: 40: ADC_Set();
  9167  1E1F  319C  2454  319E   	fcall	_ADC_Set
  9168                           
  9169                           ;MCU_B1.c: 42: ;;
  9170                           ;MCU_B1.c: 44: ;;
  9171                           ;MCU_B1.c: 46: IOC_Set();
  9172  1E22  319D  253C  319E   	fcall	_IOC_Set
  9173                           
  9174                           ;MCU_B1.c: 48: ;;
  9175                           ;MCU_B1.c: 50: ;;
  9176                           ;MCU_B1.c: 52: WDT_Set();
  9177  1E25  319C  24DF         	fcall	_WDT_Set
  9178  1E27  0008               	return
  9179  1E28                     __end_of_Mcu_Initialization:	
  9180                           
  9181                           	psect	text45
  9182  1CDF                     __ptext45:	
  9183 ;; *************** function _WDT_Set *****************
  9184 ;; Defined at:
  9185 ;;		line 1084 in file "../src/MCU_B1.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;		None               void
  9192 ;; Registers used:
  9193 ;;		wreg
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        1 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    5
  9206 ;; This function calls:
  9207 ;;		Nothing
  9208 ;; This function is called by:
  9209 ;;		_Mcu_Initialization
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function _WDT_Set
  9215  1CDF                     _WDT_Set:	
  9216                           
  9217                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in _WDT_Set: [wreg]
  9221  1CDF  3017               	movlw	23
  9222  1CE0  0021               	movlb	1	; select bank1
  9223  1CE1  0097               	movwf	23	;volatile
  9224                           
  9225                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9226  1CE2  1449               	bsf	_WDT^(0+128),0
  9227                           
  9228                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9229  1CE3  300A               	movlw	10
  9230  1CE4  0020               	movlb	0	; select bank0
  9231  1CE5  00A0               	movwf	??_WDT_Set
  9232  1CE6  0820               	movf	??_WDT_Set,w
  9233  1CE7  0021               	movlb	1	; select bank1
  9234  1CE8  00CA               	movwf	(_WDT^(0+128)+1)
  9235  1CE9  0008               	return
  9236  1CEA                     __end_of_WDT_Set:	
  9237                           
  9238                           	psect	text46
  9239  1D48                     __ptext46:	
  9240 ;; *************** function _TMR1_Set *****************
  9241 ;; Defined at:
  9242 ;;		line 200 in file "../src/MCU_B1.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;		None               void
  9249 ;; Registers used:
  9250 ;;		wreg
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;Total ram usage:        0 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    5
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_Mcu_Initialization
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _TMR1_Set
  9272  1D48                     _TMR1_Set:	
  9273                           
  9274                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _TMR1_Set: [wreg]
  9278  1D48  3041               	movlw	65
  9279  1D49  0020               	movlb	0	; select bank0
  9280  1D4A  0098               	movwf	24	;volatile
  9281                           
  9282                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
  9283  1D4B  30FA               	movlw	250
  9284  1D4C  0097               	movwf	23	;volatile
  9285                           
  9286                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
  9287  1D4D  3038               	movlw	56
  9288  1D4E  0096               	movwf	22	;volatile
  9289                           
  9290                           ;MCU_B1.c: 204: TMR1IE = 1;
  9291  1D4F  0021               	movlb	1	; select bank1
  9292  1D50  1411               	bsf	17,0	;volatile
  9293                           
  9294                           ;MCU_B1.c: 205: PEIE = 1;
  9295  1D51  170B               	bsf	11,6	;volatile
  9296                           
  9297                           ;MCU_B1.c: 206: GIE = 1;
  9298  1D52  178B               	bsf	11,7	;volatile
  9299  1D53  0008               	return
  9300  1D54                     __end_of_TMR1_Set:	
  9301                           
  9302                           	psect	text47
  9303  1F14                     __ptext47:	
  9304 ;; *************** function _IO_Set *****************
  9305 ;; Defined at:
  9306 ;;		line 60 in file "../src/MCU_B1.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;		None
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;		None               void
  9313 ;; Registers used:
  9314 ;;		wreg, status,2
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;Total ram usage:        0 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    5
  9327 ;; This function calls:
  9328 ;;		Nothing
  9329 ;; This function is called by:
  9330 ;;		_Mcu_Initialization
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _IO_Set
  9336  1F14                     _IO_Set:	
  9337                           
  9338                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _IO_Set: [wreg+status,2]
  9342  1F14  30F7               	movlw	247
  9343  1F15  0021               	movlb	1	; select bank1
  9344  1F16  008C               	movwf	12	;volatile
  9345                           
  9346                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9347  1F17  3004               	movlw	4
  9348  1F18  008D               	movwf	13	;volatile
  9349                           
  9350                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9351  1F19  3026               	movlw	38
  9352  1F1A  008E               	movwf	14	;volatile
  9353                           
  9354                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9355  1F1B  0022               	movlb	2	; select bank2
  9356  1F1C  018C               	clrf	12	;volatile
  9357                           
  9358                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9359  1F1D  018D               	clrf	13	;volatile
  9360                           
  9361                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9362  1F1E  018E               	clrf	14	;volatile
  9363                           
  9364                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9365  1F1F  300E               	movlw	14
  9366  1F20  0023               	movlb	3	; select bank3
  9367  1F21  008C               	movwf	12	;volatile
  9368                           
  9369                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9370  1F22  018D               	clrf	13	;volatile
  9371                           
  9372                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9373  1F23  018E               	clrf	14	;volatile
  9374                           
  9375                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9376  1F24  30F7               	movlw	247
  9377  1F25  0020               	movlb	0	; select bank0
  9378  1F26  008C               	movwf	12	;volatile
  9379                           
  9380                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9381  1F27  3004               	movlw	4
  9382  1F28  008D               	movwf	13	;volatile
  9383                           
  9384                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9385  1F29  3026               	movlw	38
  9386  1F2A  008E               	movwf	14	;volatile
  9387                           
  9388                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
  9389  1F2B  0024               	movlb	4	; select bank4
  9390  1F2C  018D               	clrf	13	;volatile
  9391  1F2D  0008               	return
  9392  1F2E                     __end_of_IO_Set:	
  9393                           
  9394                           	psect	text48
  9395  1D3C                     __ptext48:	
  9396 ;; *************** function _IOC_Set *****************
  9397 ;; Defined at:
  9398 ;;		line 366 in file "../src/MCU_B1.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, status,2
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:        0 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    5
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_Mcu_Initialization
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function _IOC_Set
  9428  1D3C                     _IOC_Set:	
  9429                           
  9430                           ;MCU_B1.c: 367: WPUB2 = 0;
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _IOC_Set: [wreg+status,2]
  9434  1D3C  0024               	movlb	4	; select bank4
  9435  1D3D  110D               	bcf	13,2	;volatile
  9436                           
  9437                           ;MCU_B1.c: 387: IOCBP = 0b00000100;
  9438  1D3E  3004               	movlw	4
  9439  1D3F  0027               	movlb	7	; select bank7
  9440  1D40  0094               	movwf	20	;volatile
  9441                           
  9442                           ;MCU_B1.c: 388: IOCBN = 0b00000000;
  9443  1D41  0195               	clrf	21	;volatile
  9444                           
  9445                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9446  1D42  0196               	clrf	22	;volatile
  9447                           
  9448                           ;MCU_B1.c: 394: IOCIE = 1;
  9449  1D43  158B               	bsf	11,3	;volatile
  9450                           
  9451                           ;MCU_B1.c: 395: IOCIF = 0;
  9452  1D44  100B               	bcf	11,0	;volatile
  9453                           
  9454                           ;MCU_B1.c: 396: PEIE = 1;
  9455  1D45  170B               	bsf	11,6	;volatile
  9456                           
  9457                           ;MCU_B1.c: 397: GIE = 1;
  9458  1D46  178B               	bsf	11,7	;volatile
  9459  1D47  0008               	return
  9460  1D48                     __end_of_IOC_Set:	
  9461                           
  9462                           	psect	text49
  9463  07FC                     __ptext49:	
  9464 ;; *************** function _Fosc_Set *****************
  9465 ;; Defined at:
  9466 ;;		line 56 in file "../src/MCU_B1.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;		None               void
  9473 ;; Registers used:
  9474 ;;		wreg
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        0 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    5
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;;		_Mcu_Initialization
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           
  9495                           ;psect for function _Fosc_Set
  9496  07FC                     _Fosc_Set:	
  9497                           
  9498                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9499                           
  9500                           ;incstack = 0
  9501                           ; Regs used in _Fosc_Set: [wreg]
  9502  07FC  3078               	movlw	120
  9503  07FD  0021               	movlb	1	; select bank1
  9504  07FE  0099               	movwf	25	;volatile
  9505  07FF  0008               	return
  9506  0800                     __end_of_Fosc_Set:	
  9507                           
  9508                           	psect	text50
  9509  1C54                     __ptext50:	
  9510 ;; *************** function _ADC_Set *****************
  9511 ;; Defined at:
  9512 ;;		line 420 in file "../src/MCU_B1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    5
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_Mcu_Initialization
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           
  9541                           ;psect for function _ADC_Set
  9542  1C54                     _ADC_Set:	
  9543                           
  9544                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9545                           
  9546                           ;incstack = 0
  9547                           ; Regs used in _ADC_Set: [wreg]
  9548  1C54  30F3               	movlw	243
  9549  1C55  0021               	movlb	1	; select bank1
  9550  1C56  009E               	movwf	30	;volatile
  9551                           
  9552                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9553  1C57  30C1               	movlw	193
  9554  1C58  0022               	movlb	2	; select bank2
  9555  1C59  0097               	movwf	23	;volatile
  9556  1C5A  0008               	return
  9557  1C5B                     __end_of_ADC_Set:	
  9558                           
  9559                           	psect	text51
  9560  0041                     __ptext51:	
  9561 ;; *************** function _Load_Main *****************
  9562 ;; Defined at:
  9563 ;;		line 39 in file "../src/OverLoad_B1.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  i               2   12[BANK0 ] int 
  9568 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9569 ;;  error           1   10[BANK0 ] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;		None               void
  9572 ;; Registers used:
  9573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;Total ram usage:        6 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    7
  9586 ;; This function calls:
  9587 ;;		___lwdiv
  9588 ;;		___wmul
  9589 ;;		_getAll_DimmerLights_AdjSw
  9590 ;;		_getDimmer_LoadGO
  9591 ;;		_getDimmer_Load_Status
  9592 ;;		_getMain_All_Error_Status
  9593 ;;		_getMain_LightsStatus
  9594 ;;		_getMain_Lights_Count
  9595 ;;		_setLoad_AH_AL_Restore
  9596 ;; This function is called by:
  9597 ;;		_main
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           
  9602                           ;psect for function _Load_Main
  9603  0041                     _Load_Main:	
  9604                           
  9605                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9609  0041  3000               	movlw	0
  9610  0042  3192  225F  3180   	fcall	_getMain_All_Error_Status
  9611  0045  0020               	movlb	0	; select bank0
  9612  0046  00A8               	movwf	??_Load_Main
  9613  0047  0828               	movf	??_Load_Main,w
  9614  0048  00AA               	movwf	Load_Main@error
  9615                           
  9616                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9617  0049  01AB               	clrf	Load_Main@Load_Status
  9618                           
  9619                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9620  004A  0022               	movlb	2	; select bank2
  9621  004B  1C25               	btfss	_Load^(0+256),0
  9622  004C  29E7               	goto	l1567
  9623                           
  9624                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9625  004D  319C  24A9  3180   	fcall	_getMain_LightsStatus
  9626  0050  3800               	iorlw	0
  9627  0051  1D03               	skipz
  9628  0052  2855               	goto	l9966
  9629                           
  9630                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9631  0053  0022               	movlb	2	; select bank2
  9632  0054  2876               	goto	l9984
  9633  0055                     l9966:	
  9634                           ;OverLoad_B1.c: 66: } else {
  9635                           
  9636                           
  9637                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9638  0055  0020               	movlb	0	; select bank0
  9639  0056  08AA               	movf	Load_Main@error,f
  9640  0057  1D03               	skipz
  9641  0058  2873               	goto	l1570
  9642  0059  3191  21A8  3180   	fcall	_getAll_DimmerLights_AdjSw
  9643  005C  3800               	iorlw	0
  9644  005D  1D03               	skipz
  9645  005E  2873               	goto	l1570
  9646                           
  9647                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9648  005F  0022               	movlb	2	; select bank2
  9649  0060  14A5               	bsf	_Load^(0+256),1
  9650                           
  9651                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9652  0061  319C  246A  3180   	fcall	_getDimmer_LoadGO
  9653  0064  3A01               	xorlw	1
  9654  0065  1D03               	skipz
  9655  0066  286E               	goto	l1571
  9656                           
  9657                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9658  0067  0022               	movlb	2	; select bank2
  9659  0068  1DA5               	btfss	_Load^(0+256),3
  9660  0069  1BA5               	btfsc	_Load^(0+256),7
  9661  006A  2877               	goto	l1569
  9662                           
  9663                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9664  006B  15A5               	bsf	_Load^(0+256),3
  9665                           
  9666                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9667  006C  01CE               	clrf	(_Load^(0+256)+41)
  9668                           
  9669                           ;OverLoad_B1.c: 76: }
  9670                           ;OverLoad_B1.c: 77: } else {
  9671  006D  2877               	goto	l1569
  9672  006E                     l1571:	
  9673                           
  9674                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9675  006E  0022               	movlb	2	; select bank2
  9676  006F  1FA5               	btfss	_Load^(0+256),7
  9677  0070  2877               	goto	l1569
  9678                           
  9679                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9680  0071  13A5               	bcf	_Load^(0+256),7
  9681                           
  9682                           ;OverLoad_B1.c: 80: }
  9683                           ;OverLoad_B1.c: 81: }
  9684                           ;OverLoad_B1.c: 82: } else {
  9685  0072  2877               	goto	l1569
  9686  0073                     l1570:	
  9687                           
  9688                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9689  0073  0022               	movlb	2	; select bank2
  9690  0074  1CA5               	btfss	_Load^(0+256),1
  9691  0075  2877               	goto	l1569
  9692  0076                     l9984:	
  9693                           
  9694                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9695  0076  10A5               	bcf	_Load^(0+256),1
  9696  0077                     l1569:	
  9697                           
  9698                           ;OverLoad_B1.c: 85: }
  9699                           ;OverLoad_B1.c: 86: }
  9700                           ;OverLoad_B1.c: 88: }
  9701                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9702  0077  1CA5               	btfss	_Load^(0+256),1
  9703  0078  29C3               	goto	l1577
  9704                           
  9705                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9706  0079  1525               	bsf	_Load^(0+256),2
  9707                           
  9708                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9709  007A  1E25               	btfss	_Load^(0+256),4
  9710  007B  29C1               	goto	l1578
  9711                           
  9712                           ;OverLoad_B1.c: 95: Load.Time++;
  9713  007C  3001               	movlw	1
  9714  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9715  007E  3000               	movlw	0
  9716  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9717                           
  9718                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9719  0080  3000               	movlw	0
  9720  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9721  0082  3005               	movlw	5
  9722  0083  1903               	skipnz
  9723  0084  0226               	subwf	(_Load^(0+256)+1),w
  9724  0085  1C03               	skipc
  9725  0086  0008               	return
  9726                           
  9727                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9728  0087  01A6               	clrf	(_Load^(0+256)+1)
  9729  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9730                           
  9731                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9732  0089  1225               	bcf	_Load^(0+256),4
  9733                           
  9734                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9735  008A  3001               	movlw	1
  9736  008B  0020               	movlb	0	; select bank0
  9737  008C  00AC               	movwf	Load_Main@i
  9738  008D  3000               	movlw	0
  9739  008E  00AD               	movwf	Load_Main@i+1
  9740  008F  082D               	movf	Load_Main@i+1,w
  9741  0090  3A80               	xorlw	128
  9742  0091  00A8               	movwf	??_Load_Main
  9743  0092  3080               	movlw	128
  9744  0093  0228               	subwf	??_Load_Main,w
  9745  0094  1D03               	skipz
  9746  0095  2898               	goto	u11455
  9747  0096  3004               	movlw	4
  9748  0097  022C               	subwf	Load_Main@i,w
  9749  0098                     u11455:	
  9750  0098  1803               	btfsc	3,0
  9751  0099  28CC               	goto	l10006
  9752  009A                     l10000:	
  9753                           
  9754                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9755  009A  0020               	movlb	0	; select bank0
  9756  009B  352C               	lslf	Load_Main@i,w
  9757  009C  3E30               	addlw	(_Load+11)& (0+255)
  9758  009D  0086               	movwf	6
  9759  009E  3001               	movlw	1	; select bank2/3
  9760  009F  0087               	movwf	7
  9761  00A0  3F40               	moviw [0]fsr1
  9762  00A1  00A8               	movwf	??_Load_Main
  9763  00A2  3F41               	moviw [1]fsr1
  9764  00A3  00A9               	movwf	??_Load_Main+1
  9765  00A4  0828               	movf	??_Load_Main,w
  9766  00A5  0022               	movlb	2	; select bank2
  9767  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9768  00A7  0020               	movlb	0	; select bank0
  9769  00A8  0829               	movf	??_Load_Main+1,w
  9770  00A9  0022               	movlb	2	; select bank2
  9771  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9772                           
  9773                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9774  00AB  0020               	movlb	0	; select bank0
  9775  00AC  352C               	lslf	Load_Main@i,w
  9776  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9777  00AE  0086               	movwf	6
  9778  00AF  3001               	movlw	1	; select bank2/3
  9779  00B0  0087               	movwf	7
  9780  00B1  3F40               	moviw [0]fsr1
  9781  00B2  00A8               	movwf	??_Load_Main
  9782  00B3  3F41               	moviw [1]fsr1
  9783  00B4  00A9               	movwf	??_Load_Main+1
  9784  00B5  0828               	movf	??_Load_Main,w
  9785  00B6  0022               	movlb	2	; select bank2
  9786  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9787  00B8  0020               	movlb	0	; select bank0
  9788  00B9  0829               	movf	??_Load_Main+1,w
  9789  00BA  0022               	movlb	2	; select bank2
  9790  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9791  00BC  3001               	movlw	1
  9792  00BD  0020               	movlb	0	; select bank0
  9793  00BE  07AC               	addwf	Load_Main@i,f
  9794  00BF  3000               	movlw	0
  9795  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9796  00C1  082D               	movf	Load_Main@i+1,w
  9797  00C2  3A80               	xorlw	128
  9798  00C3  00A8               	movwf	??_Load_Main
  9799  00C4  3080               	movlw	128
  9800  00C5  0228               	subwf	??_Load_Main,w
  9801  00C6  1D03               	skipz
  9802  00C7  28CA               	goto	u11465
  9803  00C8  3004               	movlw	4
  9804  00C9  022C               	subwf	Load_Main@i,w
  9805  00CA                     u11465:	
  9806  00CA  1C03               	skipc
  9807  00CB  289A               	goto	l10000
  9808  00CC                     l10006:	
  9809                           
  9810                           ;OverLoad_B1.c: 103: }
  9811                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9812  00CC  3003               	movlw	3
  9813  00CD  0020               	movlb	0	; select bank0
  9814  00CE  00A0               	movwf	___lwdiv@divisor
  9815  00CF  3000               	movlw	0
  9816  00D0  00A1               	movwf	___lwdiv@divisor+1
  9817  00D1  0022               	movlb	2	; select bank2
  9818  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9819  00D3  0020               	movlb	0	; select bank0
  9820  00D4  01A3               	clrf	___lwdiv@dividend+1
  9821  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9822  00D6  0022               	movlb	2	; select bank2
  9823  00D7  082A               	movf	(_Load^(0+256)+5),w
  9824  00D8  0020               	movlb	0	; select bank0
  9825  00D9  01A2               	clrf	___lwdiv@dividend
  9826  00DA  07A2               	addwf	___lwdiv@dividend,f
  9827  00DB  3193  2366  3180   	fcall	___lwdiv
  9828  00DE  0020               	movlb	0	; select bank0
  9829  00DF  0821               	movf	?___lwdiv+1,w
  9830  00E0  0022               	movlb	2	; select bank2
  9831  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9832  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9833  00E3  0020               	movlb	0	; select bank0
  9834  00E4  0820               	movf	?___lwdiv,w
  9835  00E5  0022               	movlb	2	; select bank2
  9836  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9837  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9838                           
  9839                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9840  00E8  3003               	movlw	3
  9841  00E9  0020               	movlb	0	; select bank0
  9842  00EA  00A0               	movwf	___lwdiv@divisor
  9843  00EB  3000               	movlw	0
  9844  00EC  00A1               	movwf	___lwdiv@divisor+1
  9845  00ED  0022               	movlb	2	; select bank2
  9846  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9847  00EF  0020               	movlb	0	; select bank0
  9848  00F0  01A3               	clrf	___lwdiv@dividend+1
  9849  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9850  00F2  0022               	movlb	2	; select bank2
  9851  00F3  082C               	movf	(_Load^(0+256)+7),w
  9852  00F4  0020               	movlb	0	; select bank0
  9853  00F5  01A2               	clrf	___lwdiv@dividend
  9854  00F6  07A2               	addwf	___lwdiv@dividend,f
  9855  00F7  3193  2366  3180   	fcall	___lwdiv
  9856  00FA  0020               	movlb	0	; select bank0
  9857  00FB  0821               	movf	?___lwdiv+1,w
  9858  00FC  0022               	movlb	2	; select bank2
  9859  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9860  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9861  00FF  0020               	movlb	0	; select bank0
  9862  0100  0820               	movf	?___lwdiv,w
  9863  0101  0022               	movlb	2	; select bank2
  9864  0102  01AC               	clrf	(_Load^(0+256)+7)
  9865  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9866                           
  9867                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9868  0104  319F  274A  3180   	fcall	_setLoad_AH_AL_Restore
  9869                           
  9870                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  9871  0107  0022               	movlb	2	; select bank2
  9872  0108  082B               	movf	((_Load+1)^(0+256)+5),w
  9873  0109  022D               	subwf	((_Load+1)^(0+256)+7),w
  9874  010A  1D03               	skipz
  9875  010B  290E               	goto	u11475
  9876  010C  082A               	movf	(_Load^(0+256)+5),w
  9877  010D  022C               	subwf	(_Load^(0+256)+7),w
  9878  010E                     u11475:	
  9879  010E  1803               	skipnc
  9880  010F  0008               	return
  9881                           
  9882                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9883  0110  3005               	movlw	5
  9884  0111  3E25               	addlw	_Load& (0+255)
  9885  0112  0086               	movwf	6
  9886  0113  3001               	movlw	1	; select bank2/3
  9887  0114  0087               	movwf	7
  9888  0115  092C               	comf	(_Load^(0+256)+7),w
  9889  0116  0020               	movlb	0	; select bank0
  9890  0117  00A8               	movwf	??_Load_Main
  9891  0118  0022               	movlb	2	; select bank2
  9892  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9893  011A  0020               	movlb	0	; select bank0
  9894  011B  00A9               	movwf	??_Load_Main+1
  9895  011C  0AA8               	incf	??_Load_Main,f
  9896  011D  1903               	skipnz
  9897  011E  0AA9               	incf	??_Load_Main+1,f
  9898  011F  3F40               	moviw [0]fsr1
  9899  0120  0728               	addwf	??_Load_Main,w
  9900  0121  0022               	movlb	2	; select bank2
  9901  0122  00C4               	movwf	(_Load^(0+256)+31)
  9902  0123  3F41               	moviw [1]fsr1
  9903  0124  0020               	movlb	0	; select bank0
  9904  0125  3D29               	addwfc	??_Load_Main+1,w
  9905  0126  0022               	movlb	2	; select bank2
  9906  0127  00C5               	movwf	(_Load^(0+256)+32)
  9907                           
  9908                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9909  0128  01AA               	clrf	(_Load^(0+256)+5)
  9910  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9911                           
  9912                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9913  012A  01AC               	clrf	(_Load^(0+256)+7)
  9914  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9915                           
  9916                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9917  012C  1DA5               	btfss	_Load^(0+256),3
  9918  012D  298D               	goto	l10046
  9919                           
  9920                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9921  012E  3002               	movlw	2
  9922  012F  024E               	subwf	(_Load^(0+256)+41),w
  9923  0130  1803               	skipnc
  9924  0131  298D               	goto	l10046
  9925                           
  9926                           ;OverLoad_B1.c: 115: Load.Count++;
  9927  0132  3001               	movlw	1
  9928  0133  0020               	movlb	0	; select bank0
  9929  0134  00A8               	movwf	??_Load_Main
  9930  0135  0828               	movf	??_Load_Main,w
  9931  0136  0022               	movlb	2	; select bank2
  9932  0137  07CE               	addwf	(_Load^(0+256)+41),f
  9933                           
  9934                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  9935  0138  319C  2472  3180   	fcall	_getDimmer_Load_Status
  9936  013B  0020               	movlb	0	; select bank0
  9937  013C  00A8               	movwf	??_Load_Main
  9938  013D  0828               	movf	??_Load_Main,w
  9939  013E  00AB               	movwf	Load_Main@Load_Status
  9940                           
  9941                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  9942  013F  319D  2530  3180   	fcall	_getMain_Lights_Count
  9943  0142  0020               	movlb	0	; select bank0
  9944  0143  00A8               	movwf	??_Load_Main
  9945  0144  0828               	movf	??_Load_Main,w
  9946  0145  0022               	movlb	2	; select bank2
  9947  0146  00D1               	movwf	(_Load^(0+256)+44)
  9948                           
  9949                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  9950  0147  084E               	movf	(_Load^(0+256)+41),w
  9951  0148  3A01               	xorlw	1
  9952  0149  1D03               	skipz
  9953  014A  2955               	goto	l10032
  9954                           
  9955                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  9956  014B  3002               	movlw	2
  9957  014C  0020               	movlb	0	; select bank0
  9958  014D  00A8               	movwf	??_Load_Main
  9959  014E  0828               	movf	??_Load_Main,w
  9960  014F  0022               	movlb	2	; select bank2
  9961  0150  00D0               	movwf	(_Load^(0+256)+43)
  9962                           
  9963                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
  9964  0151  3074               	movlw	116
  9965  0152  00CA               	movwf	(_Load^(0+256)+37)
  9966  0153  3004               	movlw	4
  9967  0154  2960               	goto	L3
  9968  0155                     l10032:	
  9969                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  9970                           
  9971  0155  084E               	movf	(_Load^(0+256)+41),w
  9972  0156  3A02               	xorlw	2
  9973  0157  1D03               	skipz
  9974  0158  298D               	goto	l10046
  9975                           
  9976                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
  9977  0159  0851               	movf	(_Load^(0+256)+44),w
  9978  015A  3A01               	xorlw	1
  9979  015B  1D03               	skipz
  9980  015C  2962               	goto	l10038
  9981                           
  9982                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.8*57);
  9983  015D  3066               	movlw	102
  9984  015E  00CA               	movwf	(_Load^(0+256)+37)
  9985  015F  3000               	movlw	0
  9986  0160                     L3:	
  9987  0160  00CB               	movwf	(_Load^(0+256)+38)
  9988                           
  9989                           ;OverLoad_B1.c: 124: } else {
  9990  0161  298D               	goto	l10046
  9991  0162                     l10038:	
  9992                           
  9993                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
  9994  0162  0020               	movlb	0	; select bank0
  9995  0163  08AB               	movf	Load_Main@Load_Status,f
  9996  0164  1D03               	skipz
  9997  0165  2981               	goto	l10042
  9998                           
  9999                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.8*57) * Load.LightsCount;
 10000  0166  0022               	movlb	2	; select bank2
 10001  0167  0851               	movf	(_Load^(0+256)+44),w
 10002  0168  0020               	movlb	0	; select bank0
 10003  0169  00A8               	movwf	??_Load_Main
 10004  016A  01A9               	clrf	??_Load_Main+1
 10005  016B  0828               	movf	??_Load_Main,w
 10006  016C  00A0               	movwf	___wmul@multiplier
 10007  016D  0829               	movf	??_Load_Main+1,w
 10008  016E  00A1               	movwf	___wmul@multiplier+1
 10009  016F  3066               	movlw	102
 10010  0170  00A2               	movwf	___wmul@multiplicand
 10011  0171  3000               	movlw	0
 10012  0172  00A3               	movwf	___wmul@multiplicand+1
 10013  0173  319F  2783  3180   	fcall	___wmul
 10014  0176  0020               	movlb	0	; select bank0
 10015  0177  0821               	movf	?___wmul+1,w
 10016  0178  0022               	movlb	2	; select bank2
 10017  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10018  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10019  017B  0020               	movlb	0	; select bank0
 10020  017C  0820               	movf	?___wmul,w
 10021  017D  0022               	movlb	2	; select bank2
 10022  017E  01CA               	clrf	(_Load^(0+256)+37)
 10023  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10024                           
 10025                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10026  0180  298D               	goto	l10046
 10027  0181                     l10042:	
 10028  0181  0020               	movlb	0	; select bank0
 10029  0182  082B               	movf	Load_Main@Load_Status,w
 10030  0183  3A01               	xorlw	1
 10031  0184  1D03               	skipz
 10032  0185  298D               	goto	l10046
 10033                           
 10034                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10035  0186  0022               	movlb	2	; select bank2
 10036  0187  082E               	movf	(_Load^(0+256)+9),w
 10037  0188  3E66               	addlw	102
 10038  0189  00CA               	movwf	(_Load^(0+256)+37)
 10039  018A  3000               	movlw	0
 10040  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10041  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10042  018D                     l10046:	
 10043                           
 10044                           ;OverLoad_B1.c: 129: }
 10045                           ;OverLoad_B1.c: 130: }
 10046                           ;OverLoad_B1.c: 131: }
 10047                           ;OverLoad_B1.c: 132: }
 10048                           ;OverLoad_B1.c: 133: }
 10049                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10050  018D  0022               	movlb	2	; select bank2
 10051  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10052  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10053  0190  1D03               	skipz
 10054  0191  2994               	goto	u11555
 10055  0192  084A               	movf	(_Load^(0+256)+37),w
 10056  0193  0244               	subwf	(_Load^(0+256)+31),w
 10057  0194                     u11555:	
 10058  0194  1C03               	skipc
 10059  0195  29A3               	goto	l10056
 10060                           
 10061                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10062  0196  3001               	movlw	1
 10063  0197  0020               	movlb	0	; select bank0
 10064  0198  00A8               	movwf	??_Load_Main
 10065  0199  0828               	movf	??_Load_Main,w
 10066  019A  0022               	movlb	2	; select bank2
 10067  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10068                           
 10069                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10070  019C  084F               	movf	(_Load^(0+256)+42),w
 10071  019D  0250               	subwf	(_Load^(0+256)+43),w
 10072  019E  1803               	skipnc
 10073  019F  0008               	return
 10074                           
 10075                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10076  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10077                           
 10078                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10079  01A1  16A5               	bsf	_Load^(0+256),5
 10080                           
 10081                           ;OverLoad_B1.c: 161: }
 10082                           ;OverLoad_B1.c: 162: } else {
 10083  01A2  0008               	return
 10084  01A3                     l10056:	
 10085                           
 10086                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10087  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10088                           
 10089                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10090  01A4  1DA5               	btfss	_Load^(0+256),3
 10091  01A5  0008               	return
 10092                           
 10093                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10094  01A6  3001               	movlw	1
 10095  01A7  0020               	movlb	0	; select bank0
 10096  01A8  00A8               	movwf	??_Load_Main
 10097  01A9  0828               	movf	??_Load_Main,w
 10098  01AA  0022               	movlb	2	; select bank2
 10099  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10100                           
 10101                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10102  01AC  3003               	movlw	3
 10103  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10104  01AE  1C03               	skipc
 10105  01AF  0008               	return
 10106                           
 10107                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10108  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10109                           
 10110                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10111  01B1  17A5               	bsf	_Load^(0+256),7
 10112                           
 10113                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10114  01B2  11A5               	bcf	_Load^(0+256),3
 10115                           
 10116                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10117  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10118                           
 10119                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10120  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10121  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10122  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10123  01B7  0844               	movf	(_Load^(0+256)+31),w
 10124  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10125  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10126                           
 10127                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10128  01BA  3003               	movlw	3
 10129  01BB  0020               	movlb	0	; select bank0
 10130  01BC  00A8               	movwf	??_Load_Main
 10131  01BD  0828               	movf	??_Load_Main,w
 10132  01BE  0022               	movlb	2	; select bank2
 10133  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10134                           
 10135                           ;OverLoad_B1.c: 175: }
 10136                           ;OverLoad_B1.c: 176: }
 10137                           ;OverLoad_B1.c: 199: }
 10138                           ;OverLoad_B1.c: 200: }
 10139                           ;OverLoad_B1.c: 201: }
 10140                           ;OverLoad_B1.c: 202: } else {
 10141  01C0  0008               	return
 10142  01C1                     l1578:	
 10143                           
 10144                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 10145  01C1  1625               	bsf	_Load^(0+256),4
 10146                           
 10147                           ;OverLoad_B1.c: 204: }
 10148                           ;OverLoad_B1.c: 205: } else {
 10149  01C2  0008               	return
 10150  01C3                     l1577:	
 10151                           
 10152                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10153  01C3  1D25               	btfss	_Load^(0+256),2
 10154  01C4  29D6               	goto	l10094
 10155                           
 10156                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10157  01C5  1125               	bcf	_Load^(0+256),2
 10158                           
 10159                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10160  01C6  1225               	bcf	_Load^(0+256),4
 10161                           
 10162                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10163  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10164  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10165                           
 10166                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10167  01C9  319F  274A  3180   	fcall	_setLoad_AH_AL_Restore
 10168                           
 10169                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10170  01CC  0022               	movlb	2	; select bank2
 10171  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10172                           
 10173                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10174  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10175                           
 10176                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10177  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10178  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10179                           
 10180                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10181  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10182  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10183                           
 10184                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10185  01D3  11A5               	bcf	_Load^(0+256),3
 10186                           
 10187                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10188  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10189                           
 10190                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10191  01D5  13A5               	bcf	_Load^(0+256),7
 10192  01D6                     l10094:	
 10193                           
 10194                           ;OverLoad_B1.c: 248: }
 10195                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10196  01D6  1EA5               	btfss	_Load^(0+256),5
 10197  01D7  0008               	return
 10198                           
 10199                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10200  01D8  3001               	movlw	1
 10201  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10202  01DA  3000               	movlw	0
 10203  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10204                           
 10205                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10206  01DC  3003               	movlw	3
 10207  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10208  01DE  30E8               	movlw	232
 10209  01DF  1903               	skipnz
 10210  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10211  01E1  1C03               	skipc
 10212  01E2  0008               	return
 10213                           
 10214                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10215  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10216  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10217                           
 10218                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10219  01E5  12A5               	bcf	_Load^(0+256),5
 10220                           
 10221                           ;OverLoad_B1.c: 254: }
 10222                           ;OverLoad_B1.c: 255: }
 10223                           ;OverLoad_B1.c: 256: }
 10224                           ;OverLoad_B1.c: 257: } else {
 10225  01E6  0008               	return
 10226  01E7                     l1567:	
 10227                           
 10228                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10229  01E7  0021               	movlb	1	; select bank1
 10230  01E8  1C20               	btfss	_myMain^(0+128),0
 10231  01E9  0008               	return
 10232                           
 10233                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10234  01EA  0022               	movlb	2	; select bank2
 10235  01EB  1425               	bsf	_Load^(0+256),0
 10236  01EC  0008               	return
 10237  01ED                     __end_of_Load_Main:	
 10238                           
 10239                           	psect	text52
 10240  1D30                     __ptext52:	
 10241 ;; *************** function _getMain_Lights_Count *****************
 10242 ;; Defined at:
 10243 ;;		line 467 in file "../src/Main_B1.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;		None
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;  status1         1    1[BANK0 ] unsigned char 
 10248 ;;  count           1    0[BANK0 ] unsigned char 
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      unsigned char 
 10251 ;; Registers used:
 10252 ;;		wreg, status,2
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;Total ram usage:        2 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    5
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_Load_Main
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           
 10273                           ;psect for function _getMain_Lights_Count
 10274  1D30                     _getMain_Lights_Count:	
 10275                           
 10276                           ;Main_B1.c: 468: char count = 0;
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10280  1D30  0020               	movlb	0	; select bank0
 10281  1D31  01A0               	clrf	getMain_Lights_Count@count
 10282                           
 10283                           ;Main_B1.c: 472: char status1 = 0;
 10284  1D32  01A1               	clrf	getMain_Lights_Count@status1
 10285                           
 10286                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10287  1D33  3000               	movlw	0
 10288  1D34  0022               	movlb	2	; select bank2
 10289  1D35  1954               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10290  1D36  3001               	movlw	1
 10291  1D37  0020               	movlb	0	; select bank0
 10292  1D38  00A1               	movwf	getMain_Lights_Count@status1
 10293                           
 10294                           ;Main_B1.c: 498: return count = status1;
 10295  1D39  0821               	movf	getMain_Lights_Count@status1,w
 10296  1D3A  00A0               	movwf	getMain_Lights_Count@count
 10297  1D3B  0008               	return
 10298  1D3C                     __end_of_getMain_Lights_Count:	
 10299                           
 10300                           	psect	text53
 10301  1C72                     __ptext53:	
 10302 ;; *************** function _getDimmer_Load_Status *****************
 10303 ;; Defined at:
 10304 ;;		line 896 in file "../src/Dimmer_B1.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;		None
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  status          1    0[BANK0 ] unsigned char 
 10309 ;; Return value:  Size  Location     Type
 10310 ;;                  1    wreg      unsigned char 
 10311 ;; Registers used:
 10312 ;;		wreg, status,2
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;Total ram usage:        1 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    5
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_Load_Main
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _getDimmer_Load_Status
 10334  1C72                     _getDimmer_Load_Status:	
 10335                           
 10336                           ;Dimmer_B1.c: 897: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10340  1C72  3000               	movlw	0
 10341  1C73  0021               	movlb	1	; select bank1
 10342  1C74  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10343  1C75  3001               	movlw	1
 10344  1C76  0020               	movlb	0	; select bank0
 10345  1C77  00A0               	movwf	getDimmer_Load_Status@status
 10346                           
 10347                           ;Dimmer_B1.c: 898: return status;
 10348  1C78  0820               	movf	getDimmer_Load_Status@status,w
 10349  1C79  0008               	return
 10350  1C7A                     __end_of_getDimmer_Load_Status:	
 10351                           
 10352                           	psect	text54
 10353  1C6A                     __ptext54:	
 10354 ;; *************** function _getDimmer_LoadGO *****************
 10355 ;; Defined at:
 10356 ;;		line 631 in file "../src/Dimmer_B1.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      unsigned char 
 10363 ;; Registers used:
 10364 ;;		wreg, status,2
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;Total ram usage:        1 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    5
 10377 ;; This function calls:
 10378 ;;		Nothing
 10379 ;; This function is called by:
 10380 ;;		_Load_Main
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           
 10385                           ;psect for function _getDimmer_LoadGO
 10386  1C6A                     _getDimmer_LoadGO:	
 10387                           
 10388                           ;Dimmer_B1.c: 632: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10389                           
 10390                           ;incstack = 0
 10391                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10392  1C6A  3000               	movlw	0
 10393  1C6B  0021               	movlb	1	; select bank1
 10394  1C6C  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10395  1C6D  3001               	movlw	1
 10396  1C6E  0020               	movlb	0	; select bank0
 10397  1C6F  00A0               	movwf	getDimmer_LoadGO@loadgo
 10398                           
 10399                           ;Dimmer_B1.c: 633: return loadgo;
 10400  1C70  0820               	movf	getDimmer_LoadGO@loadgo,w
 10401  1C71  0008               	return
 10402  1C72                     __end_of_getDimmer_LoadGO:	
 10403                           
 10404                           	psect	text55
 10405  11A8                     __ptext55:	
 10406 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10407 ;; Defined at:
 10408 ;;		line 840 in file "../src/Dimmer_B1.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;		None
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  i               2    4[BANK0 ] int 
 10413 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10414 ;;  count           1    3[BANK0 ] unsigned char 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  1    wreg      unsigned char 
 10417 ;; Registers used:
 10418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:        5 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    6
 10431 ;; This function calls:
 10432 ;;		_DimmerLightsPointSelect
 10433 ;; This function is called by:
 10434 ;;		_Load_Main
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _getAll_DimmerLights_AdjSw
 10440  11A8                     _getAll_DimmerLights_AdjSw:	
 10441                           
 10442                           ;Dimmer_B1.c: 841: char count = 1;
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10446  11A8  0020               	movlb	0	; select bank0
 10447  11A9  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10448  11AA  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10449                           
 10450                           ;Dimmer_B1.c: 842: char adjsw = 0;
 10451  11AB  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10452                           
 10453                           ;Dimmer_B1.c: 844: for (int i = 0; i < count; i++) {
 10454  11AC  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10455  11AD  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10456  11AE                     l9292:	
 10457  11AE  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10458  11AF  3A80               	xorlw	128
 10459  11B0  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10460  11B1  3080               	movlw	128
 10461  11B2  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10462  11B3  1D03               	skipz
 10463  11B4  29B7               	goto	u10225
 10464  11B5  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10465  11B6  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10466  11B7                     u10225:	
 10467  11B7  1803               	btfsc	3,0
 10468  11B8  29D0               	goto	l9294
 10469                           
 10470                           ;Dimmer_B1.c: 845: DimmerLightsPointSelect(i + 1);
 10471  11B9  0020               	movlb	0	; select bank0
 10472  11BA  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10473  11BB  3E01               	addlw	1
 10474  11BC  319C  24C9  3191   	fcall	_DimmerLightsPointSelect
 10475                           
 10476                           ;Dimmer_B1.c: 846: if (adjsw == 0) {
 10477  11BF  0020               	movlb	0	; select bank0
 10478  11C0  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10479  11C1  1D03               	skipz
 10480  11C2  29CB               	goto	l9290
 10481                           
 10482                           ;Dimmer_B1.c: 847: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10483  11C3  0A6F               	incf	_DimmerLights,w
 10484  11C4  0086               	movwf	6
 10485  11C5  3001               	movlw	1	; select bank2/3
 10486  11C6  0087               	movwf	7
 10487  11C7  3000               	movlw	0
 10488  11C8  1B01               	btfsc	1,6
 10489  11C9  3001               	movlw	1
 10490  11CA  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10491  11CB                     l9290:	
 10492  11CB  3001               	movlw	1
 10493  11CC  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10494  11CD  3000               	movlw	0
 10495  11CE  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10496  11CF  29AE               	goto	l9292
 10497  11D0                     l9294:	
 10498                           
 10499                           ;Dimmer_B1.c: 848: }
 10500                           ;Dimmer_B1.c: 849: }
 10501                           ;Dimmer_B1.c: 850: return adjsw;
 10502  11D0  0020               	movlb	0	; select bank0
 10503  11D1  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10504  11D2  0008               	return
 10505  11D3                     __end_of_getAll_DimmerLights_AdjSw:	
 10506                           
 10507                           	psect	text56
 10508  1F83                     __ptext56:	
 10509 ;; *************** function ___wmul *****************
 10510 ;; Defined at:
 10511 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10514 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;  product         2    4[BANK0 ] unsigned int 
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  2    0[BANK0 ] unsigned int 
 10519 ;; Registers used:
 10520 ;;		wreg, status,2, status,0
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:        6 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    5
 10533 ;; This function calls:
 10534 ;;		Nothing
 10535 ;; This function is called by:
 10536 ;;		_Load_Main
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function ___wmul
 10542  1F83                     ___wmul:	
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10546  1F83  0020               	movlb	0	; select bank0
 10547  1F84  01A4               	clrf	___wmul@product
 10548  1F85  01A5               	clrf	___wmul@product+1
 10549  1F86                     l9670:	
 10550  1F86  1C20               	btfss	___wmul@multiplier,0
 10551  1F87  2F8C               	goto	l2591
 10552  1F88  0822               	movf	___wmul@multiplicand,w
 10553  1F89  07A4               	addwf	___wmul@product,f
 10554  1F8A  0823               	movf	___wmul@multiplicand+1,w
 10555  1F8B  3DA5               	addwfc	___wmul@product+1,f
 10556  1F8C                     l2591:	
 10557  1F8C  3001               	movlw	1
 10558  1F8D                     u10835:	
 10559  1F8D  35A2               	lslf	___wmul@multiplicand,f
 10560  1F8E  0DA3               	rlf	___wmul@multiplicand+1,f
 10561  1F8F  0B89               	decfsz	9,f
 10562  1F90  2F8D               	goto	u10835
 10563  1F91  3001               	movlw	1
 10564  1F92                     u10845:	
 10565  1F92  36A1               	lsrf	___wmul@multiplier+1,f
 10566  1F93  0CA0               	rrf	___wmul@multiplier,f
 10567  1F94  0B89               	decfsz	9,f
 10568  1F95  2F92               	goto	u10845
 10569  1F96  0821               	movf	___wmul@multiplier+1,w
 10570  1F97  0420               	iorwf	___wmul@multiplier,w
 10571  1F98  1D03               	skipz
 10572  1F99  2F86               	goto	l9670
 10573  1F9A  0825               	movf	___wmul@product+1,w
 10574  1F9B  01A1               	clrf	?___wmul+1
 10575  1F9C  07A1               	addwf	?___wmul+1,f
 10576  1F9D  0824               	movf	___wmul@product,w
 10577  1F9E  01A0               	clrf	?___wmul
 10578  1F9F  07A0               	addwf	?___wmul,f
 10579  1FA0  0008               	return
 10580  1FA1                     __end_of___wmul:	
 10581                           
 10582                           	psect	text57
 10583  1366                     __ptext57:	
 10584 ;; *************** function ___lwdiv *****************
 10585 ;; Defined at:
 10586 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  divisor         2    0[BANK0 ] unsigned int 
 10589 ;;  dividend        2    2[BANK0 ] unsigned int 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  quotient        2    6[BANK0 ] unsigned int 
 10592 ;;  counter         1    5[BANK0 ] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  2    0[BANK0 ] unsigned int 
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;Total ram usage:        8 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    5
 10609 ;; This function calls:
 10610 ;;		Nothing
 10611 ;; This function is called by:
 10612 ;;		_Load_Main
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           
 10617                           ;psect for function ___lwdiv
 10618  1366                     ___lwdiv:	
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10622  1366  0020               	movlb	0	; select bank0
 10623  1367  01A6               	clrf	___lwdiv@quotient
 10624  1368  01A7               	clrf	___lwdiv@quotient+1
 10625  1369  0821               	movf	___lwdiv@divisor+1,w
 10626  136A  0420               	iorwf	___lwdiv@divisor,w
 10627  136B  1903               	skipnz
 10628  136C  2B96               	goto	l9702
 10629  136D  01A5               	clrf	___lwdiv@counter
 10630  136E  0AA5               	incf	___lwdiv@counter,f
 10631  136F                     l9690:	
 10632  136F  1BA1               	btfsc	___lwdiv@divisor+1,7
 10633  1370  2B7B               	goto	l9692
 10634  1371  3001               	movlw	1
 10635  1372                     u10875:	
 10636  1372  35A0               	lslf	___lwdiv@divisor,f
 10637  1373  0DA1               	rlf	___lwdiv@divisor+1,f
 10638  1374  0B89               	decfsz	9,f
 10639  1375  2B72               	goto	u10875
 10640  1376  3001               	movlw	1
 10641  1377  00A4               	movwf	??___lwdiv
 10642  1378  0824               	movf	??___lwdiv,w
 10643  1379  07A5               	addwf	___lwdiv@counter,f
 10644  137A  2B6F               	goto	l9690
 10645  137B                     l9692:	
 10646  137B  3001               	movlw	1
 10647  137C                     u10895:	
 10648  137C  35A6               	lslf	___lwdiv@quotient,f
 10649  137D  0DA7               	rlf	___lwdiv@quotient+1,f
 10650  137E  0B89               	decfsz	9,f
 10651  137F  2B7C               	goto	u10895
 10652  1380  0821               	movf	___lwdiv@divisor+1,w
 10653  1381  0223               	subwf	___lwdiv@dividend+1,w
 10654  1382  1D03               	skipz
 10655  1383  2B86               	goto	u10905
 10656  1384  0820               	movf	___lwdiv@divisor,w
 10657  1385  0222               	subwf	___lwdiv@dividend,w
 10658  1386                     u10905:	
 10659  1386  1C03               	skipc
 10660  1387  2B8D               	goto	l9698
 10661  1388  0820               	movf	___lwdiv@divisor,w
 10662  1389  02A2               	subwf	___lwdiv@dividend,f
 10663  138A  0821               	movf	___lwdiv@divisor+1,w
 10664  138B  3BA3               	subwfb	___lwdiv@dividend+1,f
 10665  138C  1426               	bsf	___lwdiv@quotient,0
 10666  138D                     l9698:	
 10667  138D  3001               	movlw	1
 10668  138E                     u10915:	
 10669  138E  36A1               	lsrf	___lwdiv@divisor+1,f
 10670  138F  0CA0               	rrf	___lwdiv@divisor,f
 10671  1390  0B89               	decfsz	9,f
 10672  1391  2B8E               	goto	u10915
 10673  1392  3001               	movlw	1
 10674  1393  02A5               	subwf	___lwdiv@counter,f
 10675  1394  1D03               	btfss	3,2
 10676  1395  2B7B               	goto	l9692
 10677  1396                     l9702:	
 10678  1396  0827               	movf	___lwdiv@quotient+1,w
 10679  1397  01A1               	clrf	?___lwdiv+1
 10680  1398  07A1               	addwf	?___lwdiv+1,f
 10681  1399  0826               	movf	___lwdiv@quotient,w
 10682  139A  01A0               	clrf	?___lwdiv
 10683  139B  07A0               	addwf	?___lwdiv,f
 10684  139C  0008               	return
 10685  139D                     __end_of___lwdiv:	
 10686                           
 10687                           	psect	text58
 10688  1C0E                     __ptext58:	
 10689 ;; *************** function _Load_Initialization *****************
 10690 ;; Defined at:
 10691 ;;		line 9 in file "../src/OverLoad_B1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;		None               void
 10698 ;; Registers used:
 10699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    6
 10712 ;; This function calls:
 10713 ;;		_setLoad_AH_AL_Restore
 10714 ;; This function is called by:
 10715 ;;		_main
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _Load_Initialization
 10721  1C0E                     _Load_Initialization:	
 10722                           
 10723                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10727  1C0E  319F  274A         	fcall	_setLoad_AH_AL_Restore
 10728  1C10  0008               	return
 10729  1C11                     __end_of_Load_Initialization:	
 10730                           
 10731                           	psect	text59
 10732  1F4A                     __ptext59:	
 10733 ;; *************** function _setLoad_AH_AL_Restore *****************
 10734 ;; Defined at:
 10735 ;;		line 285 in file "../src/OverLoad_B1.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;		None
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;  i               1    1[BANK0 ] unsigned char 
 10740 ;; Return value:  Size  Location     Type
 10741 ;;		None               void
 10742 ;; Registers used:
 10743 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        2 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; Hardware stack levels required when called:    5
 10756 ;; This function calls:
 10757 ;;		Nothing
 10758 ;; This function is called by:
 10759 ;;		_Load_Initialization
 10760 ;;		_Load_Main
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function _setLoad_AH_AL_Restore
 10766  1F4A                     _setLoad_AH_AL_Restore:	
 10767                           
 10768                           ;OverLoad_B1.c: 286: char i;
 10769                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10770                           
 10771                           ;incstack = 0
 10772                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10773  1F4A  0020               	movlb	0	; select bank0
 10774  1F4B  01A1               	clrf	setLoad_AH_AL_Restore@i
 10775  1F4C                     L4:	
 10776  1F4C  3005               	movlw	5
 10777  1F4D  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10778  1F4E  1803               	btfsc	3,0
 10779  1F4F  0008               	return
 10780                           
 10781                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10782  1F50  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10783  1F51  3E30               	addlw	(_Load+11)& (0+255)
 10784  1F52  0086               	movwf	6
 10785  1F53  3001               	movlw	1	; select bank2/3
 10786  1F54  0087               	movwf	7
 10787  1F55  3000               	movlw	0
 10788  1F56  3FC0               	movwi [0]fsr1
 10789  1F57  3FC1               	movwi [1]fsr1
 10790                           
 10791                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10792  1F58  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10793  1F59  3E3A               	addlw	(_Load+21)& (0+255)
 10794  1F5A  0086               	movwf	6
 10795  1F5B  3001               	movlw	1	; select bank2/3
 10796  1F5C  0087               	movwf	7
 10797  1F5D  30FF               	movlw	255
 10798  1F5E  3FC0               	movwi [0]fsr1
 10799  1F5F  30FF               	movlw	255
 10800  1F60  3FC1               	movwi [1]fsr1
 10801  1F61  3001               	movlw	1
 10802  1F62  00A0               	movwf	??_setLoad_AH_AL_Restore
 10803  1F63  0820               	movf	??_setLoad_AH_AL_Restore,w
 10804  1F64  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10805  1F65  2F4C               	goto	L4
 10806  1F66                     __end_of_setLoad_AH_AL_Restore:	
 10807                           
 10808                           	psect	text60
 10809  1C39                     __ptext60:	
 10810 ;; *************** function _LED_Main *****************
 10811 ;; Defined at:
 10812 ;;		line 47 in file "../src/LED_B1.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;		None
 10817 ;; Return value:  Size  Location     Type
 10818 ;;		None               void
 10819 ;; Registers used:
 10820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:        0 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    7
 10833 ;; This function calls:
 10834 ;;		_setLED_Main
 10835 ;; This function is called by:
 10836 ;;		_main
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function _LED_Main
 10842  1C39                     _LED_Main:	
 10843                           
 10844                           ;LED_B1.c: 62: setLED_Main(99);
 10845                           
 10846                           ;incstack = 0
 10847                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10848  1C39  3063               	movlw	99
 10849  1C3A  3193  2330         	fcall	_setLED_Main
 10850  1C3C  0008               	return
 10851  1C3D                     __end_of_LED_Main:	
 10852                           
 10853                           	psect	text61
 10854  1330                     __ptext61:	
 10855 ;; *************** function _setLED_Main *****************
 10856 ;; Defined at:
 10857 ;;		line 221 in file "../src/LED_B1.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  led             1    wreg     unsigned char 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  led             1    4[BANK0 ] unsigned char 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;		None               void
 10864 ;; Registers used:
 10865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;Total ram usage:        3 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    6
 10878 ;; This function calls:
 10879 ;;		_LedPointSelect
 10880 ;; This function is called by:
 10881 ;;		_LED_Main
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           
 10886                           ;psect for function _setLED_Main
 10887  1330                     _setLED_Main:	
 10888                           
 10889                           ;incstack = 0
 10890                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10891                           ;setLED_Main@led stored from wreg
 10892  1330  0020               	movlb	0	; select bank0
 10893  1331  00A4               	movwf	setLED_Main@led
 10894                           
 10895                           ;LED_B1.c: 222: LedPointSelect(led);
 10896  1332  0824               	movf	setLED_Main@led,w
 10897  1333  319D  250C  3193   	fcall	_LedPointSelect
 10898                           
 10899                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10900  1336  0021               	movlb	1	; select bank1
 10901  1337  084E               	movf	_LED^(0+128),w
 10902  1338  0086               	movwf	6
 10903  1339  3001               	movlw	1	; select bank2/3
 10904  133A  0087               	movwf	7
 10905  133B  1C81               	btfss	1,1
 10906  133C  0008               	return
 10907                           
 10908                           ;LED_B1.c: 224: LED->Time++;
 10909  133D  0A4E               	incf	_LED^(0+128),w
 10910  133E  0086               	movwf	6
 10911  133F  3001               	movlw	1	; select bank2/3
 10912  1340  0087               	movwf	7
 10913  1341  3001               	movlw	1
 10914  1342  0781               	addwf	1,f
 10915  1343  3141               	addfsr 1,1
 10916  1344  1803               	skipnc
 10917  1345  0A81               	incf	1,f
 10918                           
 10919                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10920  1346  0A4E               	incf	_LED^(0+128),w
 10921  1347  0086               	movwf	6
 10922  1348  3001               	movlw	1	; select bank2/3
 10923  1349  0087               	movwf	7
 10924  134A  3F40               	moviw [0]fsr1
 10925  134B  0020               	movlb	0	; select bank0
 10926  134C  00A2               	movwf	??_setLED_Main
 10927  134D  3F41               	moviw [1]fsr1
 10928  134E  00A3               	movwf	??_setLED_Main+1
 10929  134F  3000               	movlw	0
 10930  1350  0223               	subwf	??_setLED_Main+1,w
 10931  1351  3032               	movlw	50
 10932  1352  1903               	skipnz
 10933  1353  0222               	subwf	??_setLED_Main,w
 10934  1354  1C03               	skipc
 10935  1355  0008               	return
 10936                           
 10937                           ;LED_B1.c: 226: LED->Time = 0;
 10938  1356  0021               	movlb	1	; select bank1
 10939  1357  0A4E               	incf	_LED^(0+128),w
 10940  1358  0086               	movwf	6
 10941  1359  3001               	movlw	1	; select bank2/3
 10942  135A  0087               	movwf	7
 10943  135B  3000               	movlw	0
 10944  135C  3FC0               	movwi [0]fsr1
 10945  135D  3FC1               	movwi [1]fsr1
 10946                           
 10947                           ;LED_B1.c: 243: if (led == 99) {
 10948  135E  0020               	movlb	0	; select bank0
 10949  135F  0824               	movf	setLED_Main@led,w
 10950  1360  3A63               	xorlw	99
 10951  1361  1D03               	skipz
 10952  1362  0008               	return
 10953                           
 10954                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10955  1363  3020               	movlw	32
 10956  1364  068D               	xorwf	13,f
 10957  1365  0008               	return
 10958  1366                     __end_of_setLED_Main:	
 10959                           
 10960                           	psect	text62
 10961  1C35                     __ptext62:	
 10962 ;; *************** function _LED_Initialization *****************
 10963 ;; Defined at:
 10964 ;;		line 31 in file "../src/LED_B1.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;		None               void
 10971 ;; Registers used:
 10972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;Total ram usage:        0 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:    8
 10985 ;; This function calls:
 10986 ;;		_setLED_Initialization
 10987 ;; This function is called by:
 10988 ;;		_main
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           
 10993                           ;psect for function _LED_Initialization
 10994  1C35                     _LED_Initialization:	
 10995                           
 10996                           ;LED_B1.c: 42: setLED_Initialization(99);
 10997                           
 10998                           ;incstack = 0
 10999                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11000  1C35  3063               	movlw	99
 11001  1C36  319E  2604         	fcall	_setLED_Initialization
 11002  1C38  0008               	return
 11003  1C39                     __end_of_LED_Initialization:	
 11004                           
 11005                           	psect	text63
 11006  1E04                     __ptext63:	
 11007 ;; *************** function _setLED_Initialization *****************
 11008 ;; Defined at:
 11009 ;;		line 69 in file "../src/LED_B1.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;  led             1    wreg     unsigned char 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  led             1    4[BANK0 ] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;		None               void
 11016 ;; Registers used:
 11017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:        1 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    7
 11030 ;; This function calls:
 11031 ;;		_LedPointSelect
 11032 ;;		_setLED
 11033 ;; This function is called by:
 11034 ;;		_LED_Initialization
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           
 11039                           ;psect for function _setLED_Initialization
 11040  1E04                     _setLED_Initialization:	
 11041                           
 11042                           ;incstack = 0
 11043                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11044                           ;setLED_Initialization@led stored from wreg
 11045  1E04  0020               	movlb	0	; select bank0
 11046  1E05  00A4               	movwf	setLED_Initialization@led
 11047                           
 11048                           ;LED_B1.c: 70: LedPointSelect(led);
 11049  1E06  0824               	movf	setLED_Initialization@led,w
 11050  1E07  319D  250C  319E   	fcall	_LedPointSelect
 11051                           
 11052                           ;LED_B1.c: 71: LED->Enable = 1;
 11053  1E0A  0021               	movlb	1	; select bank1
 11054  1E0B  084E               	movf	_LED^(0+128),w
 11055  1E0C  0086               	movwf	6
 11056  1E0D  3001               	movlw	1	; select bank2/3
 11057  1E0E  0087               	movwf	7
 11058  1E0F  1401               	bsf	1,0
 11059                           
 11060                           ;LED_B1.c: 72: setLED(led, 0);
 11061  1E10  0020               	movlb	0	; select bank0
 11062  1E11  01A2               	clrf	setLED@command
 11063  1E12  0824               	movf	setLED_Initialization@led,w
 11064  1E13  3193  239D         	fcall	_setLED
 11065  1E15  0008               	return
 11066  1E16                     __end_of_setLED_Initialization:	
 11067                           
 11068                           	psect	text64
 11069  12FA                     __ptext64:	
 11070 ;; *************** function _Flash_Memory_Main *****************
 11071 ;; Defined at:
 11072 ;;		line 966 in file "../src/MCU_B1.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;		None
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;		None
 11077 ;; Return value:  Size  Location     Type
 11078 ;;		None               void
 11079 ;; Registers used:
 11080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;Total ram usage:        1 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    8
 11093 ;; This function calls:
 11094 ;;		_Flash_Memory_Modify
 11095 ;;		_getMain_LightsStatus
 11096 ;; This function is called by:
 11097 ;;		_main
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _Flash_Memory_Main
 11103  12FA                     _Flash_Memory_Main:	
 11104                           
 11105                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11109  12FA  0023               	movlb	3	; select bank3
 11110  12FB  1C62               	btfss	(_Memory^(0+384)+36),0
 11111  12FC  0008               	return
 11112                           
 11113                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11114  12FD  319C  24A9  3192   	fcall	_getMain_LightsStatus
 11115  1300  3A00               	xorlw	0
 11116  1301  3000               	movlw	0
 11117  1302  1903               	skipnz
 11118  1303  3001               	movlw	1
 11119  1304  0020               	movlb	0	; select bank0
 11120  1305  00A6               	movwf	??_Flash_Memory_Main
 11121  1306  0DA6               	rlf	??_Flash_Memory_Main,f
 11122  1307  0023               	movlb	3	; select bank3
 11123  1308  0862               	movf	(_Memory^(0+384)+36),w
 11124  1309  0020               	movlb	0	; select bank0
 11125  130A  0626               	xorwf	??_Flash_Memory_Main,w
 11126  130B  39FD               	andlw	-3
 11127  130C  0626               	xorwf	??_Flash_Memory_Main,w
 11128  130D  0023               	movlb	3	; select bank3
 11129  130E  00E2               	movwf	(_Memory^(0+384)+36)
 11130                           
 11131                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11132  130F  1CE2               	btfss	(_Memory^(0+384)+36),1
 11133  1310  2B2A               	goto	l1198
 11134                           
 11135                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11136  1311  15E2               	bsf	(_Memory^(0+384)+36),3
 11137                           
 11138                           ;MCU_B1.c: 971: Memory.Time++;
 11139  1312  3001               	movlw	1
 11140  1313  07E0               	addwf	(_Memory^(0+384)+34),f
 11141  1314  3000               	movlw	0
 11142  1315  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11143                           
 11144                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11145  1316  3022               	movlw	34
 11146  1317  3EBE               	addlw	_Memory& (0+255)
 11147  1318  0086               	movwf	6
 11148  1319  3001               	movlw	1	; select bank3/4
 11149  131A  0087               	movwf	7
 11150  131B  3F40               	moviw [0]fsr1
 11151  131C  3A19               	xorlw	25
 11152  131D  1D03               	skipz
 11153  131E  2B21               	goto	u11105
 11154  131F  3F41               	moviw [1]fsr1
 11155  1320  3A00               	xorlw	0
 11156  1321                     u11105:	
 11157  1321  1D03               	skipz
 11158  1322  0008               	return
 11159                           
 11160                           ;MCU_B1.c: 973: Memory.Time = 0;
 11161  1323  01E0               	clrf	(_Memory^(0+384)+34)
 11162  1324  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11163                           
 11164                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11165  1325  1062               	bcf	(_Memory^(0+384)+36),0
 11166                           
 11167                           ;MCU_B1.c: 975: Memory.GO = 0;
 11168  1326  10E2               	bcf	(_Memory^(0+384)+36),1
 11169                           
 11170                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11171  1327  3195  2511         	fcall	_Flash_Memory_Modify
 11172                           
 11173                           ;MCU_B1.c: 977: }
 11174                           ;MCU_B1.c: 978: } else {
 11175  1329  0008               	return
 11176  132A                     l1198:	
 11177                           
 11178                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11179  132A  1DE2               	btfss	(_Memory^(0+384)+36),3
 11180  132B  0008               	return
 11181                           
 11182                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11183  132C  11E2               	bcf	(_Memory^(0+384)+36),3
 11184                           
 11185                           ;MCU_B1.c: 981: Memory.Time = 0;
 11186  132D  01E0               	clrf	(_Memory^(0+384)+34)
 11187  132E  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11188  132F  0008               	return
 11189  1330                     __end_of_Flash_Memory_Main:	
 11190                           
 11191                           	psect	text65
 11192  1511                     __ptext65:	
 11193 ;; *************** function _Flash_Memory_Modify *****************
 11194 ;; Defined at:
 11195 ;;		line 1039 in file "../src/MCU_B1.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;		None
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;  i               1    5[BANK0 ] unsigned char 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;		None               void
 11202 ;; Registers used:
 11203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        2 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    7
 11216 ;; This function calls:
 11217 ;;		_Flash_Memory_Erasing
 11218 ;;		_Flash_Memory_Read
 11219 ;;		_Flash_Memory_Write
 11220 ;;		_setMemory_Data
 11221 ;; This function is called by:
 11222 ;;		_Flash_Memory_Main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _Flash_Memory_Modify
 11228  1511                     _Flash_Memory_Modify:	
 11229                           
 11230                           ;MCU_B1.c: 1040: char i = 0;
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11234  1511  0020               	movlb	0	; select bank0
 11235  1512  01A5               	clrf	Flash_Memory_Modify@i
 11236                           
 11237                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11238  1513  01A5               	clrf	Flash_Memory_Modify@i
 11239  1514  3020               	movlw	32
 11240  1515  0225               	subwf	Flash_Memory_Modify@i,w
 11241  1516  1803               	btfsc	3,0
 11242  1517  2D2D               	goto	l9402
 11243  1518                     l9396:	
 11244                           
 11245                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11246  1518  0825               	movf	Flash_Memory_Modify@i,w
 11247  1519  319E  26FA  3195   	fcall	_Flash_Memory_Read
 11248  151C  0020               	movlb	0	; select bank0
 11249  151D  00A4               	movwf	??_Flash_Memory_Modify
 11250  151E  0825               	movf	Flash_Memory_Modify@i,w
 11251  151F  3EBE               	addlw	_Memory& (0+255)
 11252  1520  0086               	movwf	6
 11253  1521  3001               	movlw	1	; select bank3/4
 11254  1522  0087               	movwf	7
 11255  1523  0824               	movf	??_Flash_Memory_Modify,w
 11256  1524  0081               	movwf	1
 11257  1525  3001               	movlw	1
 11258  1526  00A4               	movwf	??_Flash_Memory_Modify
 11259  1527  0824               	movf	??_Flash_Memory_Modify,w
 11260  1528  07A5               	addwf	Flash_Memory_Modify@i,f
 11261  1529  3020               	movlw	32
 11262  152A  0225               	subwf	Flash_Memory_Modify@i,w
 11263  152B  1C03               	skipc
 11264  152C  2D18               	goto	l9396
 11265  152D                     l9402:	
 11266                           
 11267                           ;MCU_B1.c: 1043: }
 11268                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11269  152D  0879               	movf	_product,w
 11270  152E  0086               	movwf	6
 11271  152F  3002               	movlw	2	; select bank4/5
 11272  1530  0087               	movwf	7
 11273  1531  3002               	movlw	2	; select bank4/5
 11274  1532  3F4C               	moviw [12]fsr1
 11275  1533  00A0               	movwf	setMemory_Data@data
 11276  1534  3000               	movlw	0
 11277  1535  319D  2518  3195   	fcall	_setMemory_Data
 11278                           
 11279                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11280  1538  0879               	movf	_product,w
 11281  1539  0086               	movwf	6
 11282  153A  3002               	movlw	2	; select bank4/5
 11283  153B  0087               	movwf	7
 11284  153C  3002               	movlw	2	; select bank4/5
 11285  153D  3F4D               	moviw [13]fsr1
 11286  153E  0020               	movlb	0	; select bank0
 11287  153F  00A0               	movwf	setMemory_Data@data
 11288  1540  3001               	movlw	1
 11289  1541  319D  2518  3195   	fcall	_setMemory_Data
 11290                           
 11291                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11292  1544  0879               	movf	_product,w
 11293  1545  0086               	movwf	6
 11294  1546  3002               	movlw	2	; select bank4/5
 11295  1547  0087               	movwf	7
 11296  1548  3002               	movlw	2	; select bank4/5
 11297  1549  3F4E               	moviw [14]fsr1
 11298  154A  0020               	movlb	0	; select bank0
 11299  154B  00A0               	movwf	setMemory_Data@data
 11300  154C  3002               	movlw	2
 11301  154D  319D  2518  3195   	fcall	_setMemory_Data
 11302                           
 11303                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11304  1550  0023               	movlb	3	; select bank3
 11305  1551  1D62               	btfss	(_Memory^(0+384)+36),2
 11306  1552  2D57               	goto	l1221
 11307                           
 11308                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11309  1553  1162               	bcf	(_Memory^(0+384)+36),2
 11310                           
 11311                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11312  1554  0021               	movlb	1	; select bank1
 11313  1555  11A0               	bcf	_myMain^(0+128),3
 11314                           
 11315                           ;MCU_B1.c: 1055: myMain.First = 0;
 11316  1556  12A0               	bcf	_myMain^(0+128),5
 11317  1557                     l1221:	
 11318                           
 11319                           ;MCU_B1.c: 1057: }
 11320                           ;MCU_B1.c: 1058: GIE = 0;
 11321  1557  138B               	bcf	11,7	;volatile
 11322                           
 11323                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11324  1558  319D  2524  3195   	fcall	_Flash_Memory_Erasing
 11325                           
 11326                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11327  155B  3192  2201         	fcall	_Flash_Memory_Write
 11328                           
 11329                           ;MCU_B1.c: 1061: GIE = 1;
 11330  155D  178B               	bsf	11,7	;volatile
 11331  155E  0008               	return
 11332  155F                     __end_of_Flash_Memory_Modify:	
 11333                           
 11334                           	psect	text66
 11335  1D24                     __ptext66:	
 11336 ;; *************** function _Flash_Memory_Erasing *****************
 11337 ;; Defined at:
 11338 ;;		line 1028 in file "../src/MCU_B1.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;		None
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;		None
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0, pclath, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        0 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    6
 11359 ;; This function calls:
 11360 ;;		_Flash_Memory_Unlock
 11361 ;; This function is called by:
 11362 ;;		_Flash_Memory_Modify
 11363 ;; This function uses a non-reentrant model
 11364 ;;
 11365                           
 11366                           
 11367                           ;psect for function _Flash_Memory_Erasing
 11368  1D24                     _Flash_Memory_Erasing:	
 11369                           
 11370                           ;MCU_B1.c: 1029: CFGS = 0;
 11371                           
 11372                           ;incstack = 0
 11373                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11374  1D24  0023               	movlb	3	; select bank3
 11375  1D25  1315               	bcf	21,6	;volatile
 11376                           
 11377                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11378  1D26  3030               	movlw	48
 11379  1D27  0092               	movwf	18	;volatile
 11380                           
 11381                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11382  1D28  0191               	clrf	17	;volatile
 11383                           
 11384                           ;MCU_B1.c: 1032: FREE = 1;
 11385  1D29  1615               	bsf	21,4	;volatile
 11386                           
 11387                           ;MCU_B1.c: 1033: WREN = 1;
 11388  1D2A  1515               	bsf	21,2	;volatile
 11389                           
 11390                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11391  1D2B  319C  2483         	fcall	_Flash_Memory_Unlock
 11392                           
 11393                           ;MCU_B1.c: 1035: WREN = 0;
 11394  1D2D  0023               	movlb	3	; select bank3
 11395  1D2E  1115               	bcf	21,2	;volatile
 11396  1D2F  0008               	return
 11397  1D30                     __end_of_Flash_Memory_Erasing:	
 11398                           
 11399                           	psect	text67
 11400  054C                     __ptext67:	
 11401 ;; *************** function _Flash_Memory_Initialization *****************
 11402 ;; Defined at:
 11403 ;;		line 925 in file "../src/MCU_B1.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;		None
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;  i               1   67[BANK0 ] unsigned char 
 11408 ;; Return value:  Size  Location     Type
 11409 ;;		None               void
 11410 ;; Registers used:
 11411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;Total ram usage:        2 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; Hardware stack levels required when called:    8
 11424 ;; This function calls:
 11425 ;;		_Flash_Memory_Read
 11426 ;;		_Flash_Memory_Write
 11427 ;;		_setMemory_Data
 11428 ;;		_setPercentValue
 11429 ;; This function is called by:
 11430 ;;		_main
 11431 ;; This function uses a non-reentrant model
 11432 ;;
 11433                           
 11434                           
 11435                           ;psect for function _Flash_Memory_Initialization
 11436  054C                     _Flash_Memory_Initialization:	
 11437                           
 11438                           ;MCU_B1.c: 926: char i = 0;
 11439                           
 11440                           ;incstack = 0
 11441                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11442  054C  0020               	movlb	0	; select bank0
 11443  054D  01E3               	clrf	Flash_Memory_Initialization@i
 11444                           
 11445                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11446  054E  301F               	movlw	31
 11447  054F  319E  26FA  3185   	fcall	_Flash_Memory_Read
 11448  0552  3AAA               	xorlw	170
 11449  0553  1D03               	skipz
 11450  0554  2DBE               	goto	l9788
 11451                           
 11452                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11453  0555  3000               	movlw	0
 11454  0556  319E  26FA  3185   	fcall	_Flash_Memory_Read
 11455  0559  0020               	movlb	0	; select bank0
 11456  055A  00E2               	movwf	??_Flash_Memory_Initialization
 11457  055B  0879               	movf	_product,w
 11458  055C  3E0C               	addlw	12
 11459  055D  0086               	movwf	6
 11460  055E  3002               	movlw	2	; select bank4/5
 11461  055F  0087               	movwf	7
 11462  0560  0862               	movf	??_Flash_Memory_Initialization,w
 11463  0561  0081               	movwf	1
 11464                           
 11465                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11466  0562  3001               	movlw	1
 11467  0563  319E  26FA  3185   	fcall	_Flash_Memory_Read
 11468  0566  0020               	movlb	0	; select bank0
 11469  0567  00E2               	movwf	??_Flash_Memory_Initialization
 11470  0568  0879               	movf	_product,w
 11471  0569  3E0D               	addlw	13
 11472  056A  0086               	movwf	6
 11473  056B  3002               	movlw	2	; select bank4/5
 11474  056C  0087               	movwf	7
 11475  056D  0862               	movf	??_Flash_Memory_Initialization,w
 11476  056E  0081               	movwf	1
 11477                           
 11478                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11479  056F  3002               	movlw	2
 11480  0570  319E  26FA  3185   	fcall	_Flash_Memory_Read
 11481  0573  0020               	movlb	0	; select bank0
 11482  0574  00E2               	movwf	??_Flash_Memory_Initialization
 11483  0575  0879               	movf	_product,w
 11484  0576  3E0E               	addlw	14
 11485  0577  0086               	movwf	6
 11486  0578  3002               	movlw	2	; select bank4/5
 11487  0579  0087               	movwf	7
 11488  057A  0862               	movf	??_Flash_Memory_Initialization,w
 11489  057B  0081               	movwf	1
 11490                           
 11491                           ;MCU_B1.c: 936: i = setPercentValue(((char)(70*0.8)));
 11492  057C  3038               	movlw	56
 11493  057D  318A  226B  3185   	fcall	_setPercentValue
 11494  0580  0020               	movlb	0	; select bank0
 11495  0581  00E2               	movwf	??_Flash_Memory_Initialization
 11496  0582  0862               	movf	??_Flash_Memory_Initialization,w
 11497  0583  00E3               	movwf	Flash_Memory_Initialization@i
 11498                           
 11499                           ;MCU_B1.c: 937: product->Data[21] = i;
 11500  0584  0863               	movf	Flash_Memory_Initialization@i,w
 11501  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11502  0586  0879               	movf	_product,w
 11503  0587  3E15               	addlw	21
 11504  0588  0086               	movwf	6
 11505  0589  3002               	movlw	2	; select bank4/5
 11506  058A  0087               	movwf	7
 11507  058B  0862               	movf	??_Flash_Memory_Initialization,w
 11508  058C  0081               	movwf	1
 11509                           
 11510                           ;MCU_B1.c: 938: product->Data[22] = i;
 11511  058D  0863               	movf	Flash_Memory_Initialization@i,w
 11512  058E  00E2               	movwf	??_Flash_Memory_Initialization
 11513  058F  0879               	movf	_product,w
 11514  0590  3E16               	addlw	22
 11515  0591  0086               	movwf	6
 11516  0592  3002               	movlw	2	; select bank4/5
 11517  0593  0087               	movwf	7
 11518  0594  0862               	movf	??_Flash_Memory_Initialization,w
 11519  0595  0081               	movwf	1
 11520                           
 11521                           ;MCU_B1.c: 939: product->Data[23] = i;
 11522  0596  0863               	movf	Flash_Memory_Initialization@i,w
 11523  0597  00E2               	movwf	??_Flash_Memory_Initialization
 11524  0598  0879               	movf	_product,w
 11525  0599  3E17               	addlw	23
 11526  059A  0086               	movwf	6
 11527  059B  3002               	movlw	2	; select bank4/5
 11528  059C  0087               	movwf	7
 11529  059D  0862               	movf	??_Flash_Memory_Initialization,w
 11530  059E  0081               	movwf	1
 11531                           
 11532                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11533  059F  0879               	movf	_product,w
 11534  05A0  3E0C               	addlw	12
 11535  05A1  0086               	movwf	6
 11536  05A2  3002               	movlw	2	; select bank4/5
 11537  05A3  0087               	movwf	7
 11538  05A4  0801               	movf	1,w
 11539  05A5  3AFF               	xorlw	255
 11540  05A6  1D03               	skipz
 11541  05A7  0008               	return
 11542  05A8  0879               	movf	_product,w
 11543  05A9  3E0D               	addlw	13
 11544  05AA  0086               	movwf	6
 11545  05AB  3002               	movlw	2	; select bank4/5
 11546  05AC  0087               	movwf	7
 11547  05AD  0801               	movf	1,w
 11548  05AE  3AFF               	xorlw	255
 11549  05AF  1D03               	skipz
 11550  05B0  0008               	return
 11551  05B1  0879               	movf	_product,w
 11552  05B2  3E0E               	addlw	14
 11553  05B3  0086               	movwf	6
 11554  05B4  3002               	movlw	2	; select bank4/5
 11555  05B5  0087               	movwf	7
 11556  05B6  0801               	movf	1,w
 11557  05B7  3AFF               	xorlw	255
 11558  05B8  1D03               	skipz
 11559  05B9  0008               	return
 11560                           
 11561                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 11562  05BA  0021               	movlb	1	; select bank1
 11563  05BB  15A0               	bsf	_myMain^(0+128),3
 11564                           
 11565                           ;MCU_B1.c: 943: myMain.First = 1;
 11566  05BC  16A0               	bsf	_myMain^(0+128),5
 11567                           
 11568                           ;MCU_B1.c: 944: }
 11569                           ;MCU_B1.c: 945: } else {
 11570  05BD  0008               	return
 11571  05BE                     l9788:	
 11572                           
 11573                           ;MCU_B1.c: 946: i = setPercentValue(((char)(70*0.8)));
 11574  05BE  3038               	movlw	56
 11575  05BF  318A  226B  3185   	fcall	_setPercentValue
 11576  05C2  0020               	movlb	0	; select bank0
 11577  05C3  00E2               	movwf	??_Flash_Memory_Initialization
 11578  05C4  0862               	movf	??_Flash_Memory_Initialization,w
 11579  05C5  00E3               	movwf	Flash_Memory_Initialization@i
 11580                           
 11581                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 11582  05C6  30FF               	movlw	255
 11583  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11584  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11585  05C9  00A0               	movwf	setMemory_Data@data
 11586  05CA  3000               	movlw	0
 11587  05CB  319D  2518  3185   	fcall	_setMemory_Data
 11588                           
 11589                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 11590  05CE  30FF               	movlw	255
 11591  05CF  0020               	movlb	0	; select bank0
 11592  05D0  00E2               	movwf	??_Flash_Memory_Initialization
 11593  05D1  0862               	movf	??_Flash_Memory_Initialization,w
 11594  05D2  00A0               	movwf	setMemory_Data@data
 11595  05D3  3001               	movlw	1
 11596  05D4  319D  2518  3185   	fcall	_setMemory_Data
 11597                           
 11598                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 11599  05D7  30FF               	movlw	255
 11600  05D8  0020               	movlb	0	; select bank0
 11601  05D9  00E2               	movwf	??_Flash_Memory_Initialization
 11602  05DA  0862               	movf	??_Flash_Memory_Initialization,w
 11603  05DB  00A0               	movwf	setMemory_Data@data
 11604  05DC  3002               	movlw	2
 11605  05DD  319D  2518  3185   	fcall	_setMemory_Data
 11606                           
 11607                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 11608  05E0  30FF               	movlw	255
 11609  05E1  0020               	movlb	0	; select bank0
 11610  05E2  00E2               	movwf	??_Flash_Memory_Initialization
 11611  05E3  0862               	movf	??_Flash_Memory_Initialization,w
 11612  05E4  00A0               	movwf	setMemory_Data@data
 11613  05E5  3003               	movlw	3
 11614  05E6  319D  2518  3185   	fcall	_setMemory_Data
 11615                           
 11616                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 11617  05E9  30FF               	movlw	255
 11618  05EA  0020               	movlb	0	; select bank0
 11619  05EB  00E2               	movwf	??_Flash_Memory_Initialization
 11620  05EC  0862               	movf	??_Flash_Memory_Initialization,w
 11621  05ED  00A0               	movwf	setMemory_Data@data
 11622  05EE  3004               	movlw	4
 11623  05EF  319D  2518  3185   	fcall	_setMemory_Data
 11624                           
 11625                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 11626  05F2  30FF               	movlw	255
 11627  05F3  0020               	movlb	0	; select bank0
 11628  05F4  00E2               	movwf	??_Flash_Memory_Initialization
 11629  05F5  0862               	movf	??_Flash_Memory_Initialization,w
 11630  05F6  00A0               	movwf	setMemory_Data@data
 11631  05F7  3005               	movlw	5
 11632  05F8  319D  2518  3185   	fcall	_setMemory_Data
 11633                           
 11634                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 11635  05FB  30AA               	movlw	170
 11636  05FC  0020               	movlb	0	; select bank0
 11637  05FD  00E2               	movwf	??_Flash_Memory_Initialization
 11638  05FE  0862               	movf	??_Flash_Memory_Initialization,w
 11639  05FF  00A0               	movwf	setMemory_Data@data
 11640  0600  301F               	movlw	31
 11641  0601  319D  2518  3185   	fcall	_setMemory_Data
 11642                           
 11643                           ;MCU_B1.c: 954: product->Data[21] = i;
 11644  0604  0020               	movlb	0	; select bank0
 11645  0605  0863               	movf	Flash_Memory_Initialization@i,w
 11646  0606  00E2               	movwf	??_Flash_Memory_Initialization
 11647  0607  0879               	movf	_product,w
 11648  0608  3E15               	addlw	21
 11649  0609  0086               	movwf	6
 11650  060A  3002               	movlw	2	; select bank4/5
 11651  060B  0087               	movwf	7
 11652  060C  0862               	movf	??_Flash_Memory_Initialization,w
 11653  060D  0081               	movwf	1
 11654                           
 11655                           ;MCU_B1.c: 955: product->Data[22] = i;
 11656  060E  0863               	movf	Flash_Memory_Initialization@i,w
 11657  060F  00E2               	movwf	??_Flash_Memory_Initialization
 11658  0610  0879               	movf	_product,w
 11659  0611  3E16               	addlw	22
 11660  0612  0086               	movwf	6
 11661  0613  3002               	movlw	2	; select bank4/5
 11662  0614  0087               	movwf	7
 11663  0615  0862               	movf	??_Flash_Memory_Initialization,w
 11664  0616  0081               	movwf	1
 11665                           
 11666                           ;MCU_B1.c: 956: product->Data[23] = i;
 11667  0617  0863               	movf	Flash_Memory_Initialization@i,w
 11668  0618  00E2               	movwf	??_Flash_Memory_Initialization
 11669  0619  0879               	movf	_product,w
 11670  061A  3E17               	addlw	23
 11671  061B  0086               	movwf	6
 11672  061C  3002               	movlw	2	; select bank4/5
 11673  061D  0087               	movwf	7
 11674  061E  0862               	movf	??_Flash_Memory_Initialization,w
 11675  061F  0081               	movwf	1
 11676                           
 11677                           ;MCU_B1.c: 957: GIE = 0;
 11678  0620  138B               	bcf	11,7	;volatile
 11679                           
 11680                           ;MCU_B1.c: 958: Flash_Memory_Write();
 11681  0621  3192  2201         	fcall	_Flash_Memory_Write
 11682                           
 11683                           ;MCU_B1.c: 959: GIE = 1;
 11684  0623  178B               	bsf	11,7	;volatile
 11685                           
 11686                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 11687  0624  0021               	movlb	1	; select bank1
 11688  0625  15A0               	bsf	_myMain^(0+128),3
 11689                           
 11690                           ;MCU_B1.c: 961: myMain.First = 1;
 11691  0626  16A0               	bsf	_myMain^(0+128),5
 11692  0627  0008               	return
 11693  0628                     __end_of_Flash_Memory_Initialization:	
 11694                           
 11695                           	psect	text68
 11696  1D18                     __ptext68:	
 11697 ;; *************** function _setMemory_Data *****************
 11698 ;; Defined at:
 11699 ;;		line 1076 in file "../src/MCU_B1.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;  address         1    wreg     unsigned char 
 11702 ;;  data            1    0[BANK0 ] unsigned char 
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;  address         1    2[BANK0 ] unsigned char 
 11705 ;; Return value:  Size  Location     Type
 11706 ;;		None               void
 11707 ;; Registers used:
 11708 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11709 ;; Tracked objects:
 11710 ;;		On entry : 0/0
 11711 ;;		On exit  : 0/0
 11712 ;;		Unchanged: 0/0
 11713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11714 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;Total ram usage:        3 bytes
 11719 ;; Hardware stack levels used:    1
 11720 ;; Hardware stack levels required when called:    5
 11721 ;; This function calls:
 11722 ;;		Nothing
 11723 ;; This function is called by:
 11724 ;;		_Flash_Memory_Initialization
 11725 ;;		_Flash_Memory_Modify
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           
 11730                           ;psect for function _setMemory_Data
 11731  1D18                     _setMemory_Data:	
 11732                           
 11733                           ;incstack = 0
 11734                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11735                           ;setMemory_Data@address stored from wreg
 11736  1D18  0020               	movlb	0	; select bank0
 11737  1D19  00A2               	movwf	setMemory_Data@address
 11738                           
 11739                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 11740  1D1A  0820               	movf	setMemory_Data@data,w
 11741  1D1B  00A1               	movwf	??_setMemory_Data
 11742  1D1C  0822               	movf	setMemory_Data@address,w
 11743  1D1D  3EBE               	addlw	_Memory& (0+255)
 11744  1D1E  0086               	movwf	6
 11745  1D1F  3001               	movlw	1	; select bank3/4
 11746  1D20  0087               	movwf	7
 11747  1D21  0821               	movf	??_setMemory_Data,w
 11748  1D22  0081               	movwf	1
 11749  1D23  0008               	return
 11750  1D24                     __end_of_setMemory_Data:	
 11751                           
 11752                           	psect	text69
 11753  1201                     __ptext69:	
 11754 ;; *************** function _Flash_Memory_Write *****************
 11755 ;; Defined at:
 11756 ;;		line 1009 in file "../src/MCU_B1.c"
 11757 ;; Parameters:    Size  Location     Type
 11758 ;;		None
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;  i               1    1[BANK0 ] unsigned char 
 11761 ;; Return value:  Size  Location     Type
 11762 ;;		None               void
 11763 ;; Registers used:
 11764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11765 ;; Tracked objects:
 11766 ;;		On entry : 0/0
 11767 ;;		On exit  : 0/0
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;Total ram usage:        2 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:    6
 11777 ;; This function calls:
 11778 ;;		_Flash_Memory_Unlock
 11779 ;; This function is called by:
 11780 ;;		_Flash_Memory_Initialization
 11781 ;;		_Flash_Memory_Modify
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _Flash_Memory_Write
 11787  1201                     _Flash_Memory_Write:	
 11788                           
 11789                           ;MCU_B1.c: 1010: char i = 0;
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11793  1201  0020               	movlb	0	; select bank0
 11794  1202  01A1               	clrf	Flash_Memory_Write@i
 11795                           
 11796                           ;MCU_B1.c: 1011: CFGS = 0;
 11797  1203  0023               	movlb	3	; select bank3
 11798  1204  1315               	bcf	21,6	;volatile
 11799                           
 11800                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 11801  1205  3030               	movlw	48
 11802  1206  0092               	movwf	18	;volatile
 11803                           
 11804                           ;MCU_B1.c: 1013: PMDATH = 0;
 11805  1207  0194               	clrf	20	;volatile
 11806                           
 11807                           ;MCU_B1.c: 1014: FREE = 0;
 11808  1208  1215               	bcf	21,4	;volatile
 11809                           
 11810                           ;MCU_B1.c: 1015: LWLO = 1;
 11811  1209  1695               	bsf	21,5	;volatile
 11812                           
 11813                           ;MCU_B1.c: 1016: WREN = 1;
 11814  120A  1515               	bsf	21,2	;volatile
 11815                           
 11816                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 11817  120B  0020               	movlb	0	; select bank0
 11818  120C  01A1               	clrf	Flash_Memory_Write@i
 11819  120D  3020               	movlw	32
 11820  120E  0221               	subwf	Flash_Memory_Write@i,w
 11821  120F  1803               	btfsc	3,0
 11822  1210  2A29               	goto	l1212
 11823  1211                     l8998:	
 11824                           
 11825                           ;MCU_B1.c: 1018: PMADRL = i;
 11826  1211  0821               	movf	Flash_Memory_Write@i,w
 11827  1212  0023               	movlb	3	; select bank3
 11828  1213  0091               	movwf	17	;volatile
 11829                           
 11830                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 11831  1214  0020               	movlb	0	; select bank0
 11832  1215  0821               	movf	Flash_Memory_Write@i,w
 11833  1216  3EBE               	addlw	_Memory& (0+255)
 11834  1217  0086               	movwf	6
 11835  1218  3001               	movlw	1	; select bank3/4
 11836  1219  0087               	movwf	7
 11837  121A  0801               	movf	1,w
 11838  121B  0023               	movlb	3	; select bank3
 11839  121C  0093               	movwf	19	;volatile
 11840                           
 11841                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 11842  121D  319C  2483  3192   	fcall	_Flash_Memory_Unlock
 11843  1220  3001               	movlw	1
 11844  1221  0020               	movlb	0	; select bank0
 11845  1222  00A0               	movwf	??_Flash_Memory_Write
 11846  1223  0820               	movf	??_Flash_Memory_Write,w
 11847  1224  07A1               	addwf	Flash_Memory_Write@i,f
 11848  1225  3020               	movlw	32
 11849  1226  0221               	subwf	Flash_Memory_Write@i,w
 11850  1227  1C03               	skipc
 11851  1228  2A11               	goto	l8998
 11852  1229                     l1212:	
 11853                           
 11854                           ;MCU_B1.c: 1021: }
 11855                           ;MCU_B1.c: 1022: LWLO = 0;
 11856  1229  0023               	movlb	3	; select bank3
 11857  122A  1295               	bcf	21,5	;volatile
 11858                           
 11859                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 11860  122B  319C  2483         	fcall	_Flash_Memory_Unlock
 11861                           
 11862                           ;MCU_B1.c: 1024: WREN = 0;
 11863  122D  0023               	movlb	3	; select bank3
 11864  122E  1115               	bcf	21,2	;volatile
 11865  122F  0008               	return
 11866  1230                     __end_of_Flash_Memory_Write:	
 11867                           
 11868                           	psect	text70
 11869  1C83                     __ptext70:	
 11870 ;; *************** function _Flash_Memory_Unlock *****************
 11871 ;; Defined at:
 11872 ;;		line 988 in file "../src/MCU_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;		None
 11877 ;; Return value:  Size  Location     Type
 11878 ;;		None               void
 11879 ;; Registers used:
 11880 ;;		wreg
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;Total ram usage:        0 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    5
 11893 ;; This function calls:
 11894 ;;		Nothing
 11895 ;; This function is called by:
 11896 ;;		_Flash_Memory_Write
 11897 ;;		_Flash_Memory_Erasing
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _Flash_Memory_Unlock
 11903  1C83                     _Flash_Memory_Unlock:	
 11904                           
 11905                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 11906                           
 11907                           ;incstack = 0
 11908                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11909  1C83  3055               	movlw	85
 11910  1C84  0023               	movlb	3	; select bank3
 11911  1C85  0096               	movwf	22	;volatile
 11912                           
 11913                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 11914  1C86  30AA               	movlw	170
 11915  1C87  0096               	movwf	22	;volatile
 11916                           
 11917                           ;MCU_B1.c: 991: WR = 1;
 11918  1C88  1495               	bsf	21,1	;volatile
 11919                           
 11920                           ;MCU_B1.c: 992: __nop();
 11921  1C89  0000               	nop
 11922                           
 11923                           ;MCU_B1.c: 993: __nop();
 11924  1C8A  0000               	nop
 11925  1C8B  0008               	return
 11926  1C8C                     __end_of_Flash_Memory_Unlock:	
 11927                           
 11928                           	psect	text71
 11929  1EFA                     __ptext71:	
 11930 ;; *************** function _Flash_Memory_Read *****************
 11931 ;; Defined at:
 11932 ;;		line 997 in file "../src/MCU_B1.c"
 11933 ;; Parameters:    Size  Location     Type
 11934 ;;  address         1    wreg     unsigned char 
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;  address         1    2[BANK0 ] unsigned char 
 11937 ;;  ret             1    3[BANK0 ] unsigned char 
 11938 ;;  i               1    1[BANK0 ] unsigned char 
 11939 ;; Return value:  Size  Location     Type
 11940 ;;                  1    wreg      unsigned char 
 11941 ;; Registers used:
 11942 ;;		wreg, status,2
 11943 ;; Tracked objects:
 11944 ;;		On entry : 0/0
 11945 ;;		On exit  : 0/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;Total ram usage:        4 bytes
 11953 ;; Hardware stack levels used:    1
 11954 ;; Hardware stack levels required when called:    5
 11955 ;; This function calls:
 11956 ;;		Nothing
 11957 ;; This function is called by:
 11958 ;;		_Flash_Memory_Initialization
 11959 ;;		_Flash_Memory_Modify
 11960 ;; This function uses a non-reentrant model
 11961 ;;
 11962                           
 11963                           
 11964                           ;psect for function _Flash_Memory_Read
 11965  1EFA                     _Flash_Memory_Read:	
 11966                           
 11967                           ;incstack = 0
 11968                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11969                           ;Flash_Memory_Read@address stored from wreg
 11970  1EFA  0020               	movlb	0	; select bank0
 11971  1EFB  00A2               	movwf	Flash_Memory_Read@address
 11972                           
 11973                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 11974  1EFC  01A1               	clrf	Flash_Memory_Read@i
 11975  1EFD  01A3               	clrf	Flash_Memory_Read@ret
 11976                           
 11977                           ;MCU_B1.c: 999: PMADRH = 0x30;
 11978  1EFE  3030               	movlw	48
 11979  1EFF  0023               	movlb	3	; select bank3
 11980  1F00  0092               	movwf	18	;volatile
 11981                           
 11982                           ;MCU_B1.c: 1000: PMADRL = address;
 11983  1F01  0020               	movlb	0	; select bank0
 11984  1F02  0822               	movf	Flash_Memory_Read@address,w
 11985  1F03  0023               	movlb	3	; select bank3
 11986  1F04  0091               	movwf	17	;volatile
 11987                           
 11988                           ;MCU_B1.c: 1001: CFGS = 0;
 11989  1F05  1315               	bcf	21,6	;volatile
 11990                           
 11991                           ;MCU_B1.c: 1002: RD = 1;
 11992  1F06  1415               	bsf	21,0	;volatile
 11993                           
 11994                           ;MCU_B1.c: 1003: i = PMDATH;
 11995  1F07  0814               	movf	20,w	;volatile
 11996  1F08  0020               	movlb	0	; select bank0
 11997  1F09  00A0               	movwf	??_Flash_Memory_Read
 11998  1F0A  0820               	movf	??_Flash_Memory_Read,w
 11999  1F0B  00A1               	movwf	Flash_Memory_Read@i
 12000                           
 12001                           ;MCU_B1.c: 1004: ret = PMDATL;
 12002  1F0C  0023               	movlb	3	; select bank3
 12003  1F0D  0813               	movf	19,w	;volatile
 12004  1F0E  0020               	movlb	0	; select bank0
 12005  1F0F  00A0               	movwf	??_Flash_Memory_Read
 12006  1F10  0820               	movf	??_Flash_Memory_Read,w
 12007  1F11  00A3               	movwf	Flash_Memory_Read@ret
 12008                           
 12009                           ;MCU_B1.c: 1005: return ret;
 12010  1F12  0823               	movf	Flash_Memory_Read@ret,w
 12011  1F13  0008               	return
 12012  1F14                     __end_of_Flash_Memory_Read:	
 12013                           
 12014                           	psect	text72
 12015  0628                     __ptext72:	
 12016 ;; *************** function _Exception_Main *****************
 12017 ;; Defined at:
 12018 ;;		line 523 in file "../src/Main_B1.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;		None
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  i               2    4[BANK1 ] int 
 12023 ;;  i               2    2[BANK1 ] int 
 12024 ;;  lights          1    6[BANK1 ] unsigned char 
 12025 ;;  error           1    1[BANK1 ] unsigned char 
 12026 ;;  count           1    0[BANK1 ] unsigned char 
 12027 ;; Return value:  Size  Location     Type
 12028 ;;		None               void
 12029 ;; Registers used:
 12030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12031 ;; Tracked objects:
 12032 ;;		On entry : 0/0
 12033 ;;		On exit  : 0/0
 12034 ;;		Unchanged: 0/0
 12035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;Total ram usage:        8 bytes
 12041 ;; Hardware stack levels used:    1
 12042 ;; Hardware stack levels required when called:    9
 12043 ;; This function calls:
 12044 ;;		_getDimmerLights_Line
 12045 ;;		_getDimmerLights_Status
 12046 ;;		_getMain_All_Error_Status
 12047 ;;		_getMain_LightsStatus
 12048 ;;		_setBuz
 12049 ;;		_setDimmerLights_SwOff
 12050 ;;		_setLED
 12051 ;; This function is called by:
 12052 ;;		_main
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           
 12057                           ;psect for function _Exception_Main
 12058  0628                     _Exception_Main:	
 12059                           
 12060                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12061                           
 12062                           ;incstack = 0
 12063                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12064  0628  3000               	movlw	0
 12065  0629  3192  225F  3186   	fcall	_getMain_All_Error_Status
 12066  062C  0020               	movlb	0	; select bank0
 12067  062D  00EB               	movwf	??_Exception_Main
 12068  062E  086B               	movf	??_Exception_Main,w
 12069  062F  0021               	movlb	1	; select bank1
 12070  0630  00EA               	movwf	Exception_Main@error^(0+128)
 12071                           
 12072                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12073  0631  01EF               	clrf	Exception_Main@lights^(0+128)
 12074  0632  01E9               	clrf	Exception_Main@count^(0+128)
 12075  0633  0AE9               	incf	Exception_Main@count^(0+128),f
 12076                           
 12077                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12078  0634  1DAB               	btfss	(_myMain^(0+128)+11),3
 12079  0635  2E43               	goto	l10122
 12080                           
 12081                           ;Main_B1.c: 527: if (error == 0) {
 12082  0636  08EA               	movf	Exception_Main@error^(0+128),f
 12083  0637  1D03               	skipz
 12084  0638  0008               	return
 12085                           
 12086                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12087  0639  11AB               	bcf	(_myMain^(0+128)+11),3
 12088                           
 12089                           ;Main_B1.c: 533: setLED(99, 10);
 12090  063A  300A               	movlw	10
 12091  063B  0020               	movlb	0	; select bank0
 12092  063C  00EB               	movwf	??_Exception_Main
 12093  063D  086B               	movf	??_Exception_Main,w
 12094  063E  00A2               	movwf	setLED@command
 12095  063F  3063               	movlw	99
 12096  0640  3193  239D         	fcall	_setLED
 12097                           
 12098                           ;Main_B1.c: 535: }
 12099                           ;Main_B1.c: 536: } else {
 12100  0642  0008               	return
 12101  0643                     l10122:	
 12102                           
 12103                           ;Main_B1.c: 537: if (error != 0) {
 12104  0643  0021               	movlb	1	; select bank1
 12105  0644  086A               	movf	Exception_Main@error^(0+128),w
 12106  0645  1903               	btfsc	3,2
 12107  0646  0008               	return
 12108                           
 12109                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12110  0647  15AB               	bsf	(_myMain^(0+128)+11),3
 12111                           
 12112                           ;Main_B1.c: 541: setLED(99, 11);
 12113  0648  300B               	movlw	11
 12114  0649  0020               	movlb	0	; select bank0
 12115  064A  00EB               	movwf	??_Exception_Main
 12116  064B  086B               	movf	??_Exception_Main,w
 12117  064C  00A2               	movwf	setLED@command
 12118  064D  3063               	movlw	99
 12119  064E  3193  239D  3186   	fcall	_setLED
 12120                           
 12121                           ;Main_B1.c: 543: switch (error) {
 12122  0651  2EF9               	goto	l10170
 12123  0652                     l10128:	
 12124                           ;Main_B1.c: 544: case 2:
 12125                           
 12126                           
 12127                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12128  0652  319C  24A9  3186   	fcall	_getMain_LightsStatus
 12129  0655  3A01               	xorlw	1
 12130  0656  1D03               	skipz
 12131  0657  2E61               	goto	l10132
 12132                           
 12133                           ;Main_B1.c: 546: setBuz(10, 300);
 12134  0658  302C               	movlw	44
 12135  0659  0020               	movlb	0	; select bank0
 12136  065A  00A9               	movwf	setBuz@time
 12137  065B  3001               	movlw	1
 12138  065C  00AA               	movwf	setBuz@time+1
 12139  065D  300A               	movlw	10
 12140  065E  3197  274E  3186   	fcall	_setBuz
 12141  0661                     l10132:	
 12142                           
 12143                           ;Main_B1.c: 547: }
 12144                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12145  0661  0021               	movlb	1	; select bank1
 12146  0662  01EB               	clrf	Exception_Main@i^(0+128)
 12147  0663  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12148  0664                     l10142:	
 12149  0664  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12150  0665  3A80               	xorlw	128
 12151  0666  0020               	movlb	0	; select bank0
 12152  0667  00EB               	movwf	??_Exception_Main
 12153  0668  3080               	movlw	128
 12154  0669  026B               	subwf	??_Exception_Main,w
 12155  066A  1D03               	skipz
 12156  066B  2E6F               	goto	u11685
 12157  066C  0021               	movlb	1	; select bank1
 12158  066D  0869               	movf	Exception_Main@count^(0+128),w
 12159  066E  026B               	subwf	Exception_Main@i^(0+128),w
 12160  066F                     u11685:	
 12161  066F  1803               	btfsc	3,0
 12162  0670  2E93               	goto	u11680
 12163                           
 12164                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12165  0671  0021               	movlb	1	; select bank1
 12166  0672  086B               	movf	Exception_Main@i^(0+128),w
 12167  0673  3E01               	addlw	1
 12168  0674  319D  25AE  3186   	fcall	_getDimmerLights_Status
 12169  0677  3A01               	xorlw	1
 12170  0678  1D03               	skipz
 12171  0679  2E8D               	goto	l10140
 12172                           
 12173                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12174  067A  0020               	movlb	0	; select bank0
 12175  067B  086F               	movf	_DimmerLights,w
 12176  067C  3E0B               	addlw	11
 12177  067D  0086               	movwf	6
 12178  067E  3001               	movlw	1	; select bank2/3
 12179  067F  0087               	movwf	7
 12180  0680  1481               	bsf	1,1
 12181                           
 12182                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12183  0681  086F               	movf	_DimmerLights,w
 12184  0682  3E02               	addlw	2
 12185  0683  0086               	movwf	6
 12186  0684  3001               	movlw	1	; select bank2/3
 12187  0685  0087               	movwf	7
 12188  0686  1081               	bcf	1,1
 12189                           
 12190                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12191  0687  0021               	movlb	1	; select bank1
 12192  0688  086B               	movf	Exception_Main@i^(0+128),w
 12193  0689  3E01               	addlw	1
 12194  068A  3195  255F  3186   	fcall	_setDimmerLights_SwOff
 12195  068D                     l10140:	
 12196  068D  3001               	movlw	1
 12197  068E  0021               	movlb	1	; select bank1
 12198  068F  07EB               	addwf	Exception_Main@i^(0+128),f
 12199  0690  3000               	movlw	0
 12200  0691  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12201  0692  2E64               	goto	l10142
 12202  0693                     u11680:	
 12203  0693  0021               	movlb	1	; select bank1
 12204  0694  0008               	return
 12205  0695                     l10144:	
 12206                           ;Main_B1.c: 558: case 3:
 12207                           
 12208                           ;Main_B1.c: 555: }
 12209                           ;Main_B1.c: 556: }
 12210                           ;Main_B1.c: 557: break;
 12211                           
 12212                           
 12213                           ;Main_B1.c: 560: setBuz(5, 300);
 12214  0695  302C               	movlw	44
 12215  0696  0020               	movlb	0	; select bank0
 12216  0697  00A9               	movwf	setBuz@time
 12217  0698  3001               	movlw	1
 12218  0699  00AA               	movwf	setBuz@time+1
 12219  069A  3005               	movlw	5
 12220  069B  3197  274E  3186   	fcall	_setBuz
 12221                           
 12222                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12223  069E  319C  24D4  3186   	fcall	_getDimmerLights_Line
 12224  06A1  0020               	movlb	0	; select bank0
 12225  06A2  00EB               	movwf	??_Exception_Main
 12226  06A3  086B               	movf	??_Exception_Main,w
 12227  06A4  0021               	movlb	1	; select bank1
 12228  06A5  00EF               	movwf	Exception_Main@lights^(0+128)
 12229                           
 12230                           ;Main_B1.c: 562: if (lights == 0) {
 12231  06A6  08EF               	movf	Exception_Main@lights^(0+128),f
 12232  06A7  1D03               	skipz
 12233  06A8  2EDC               	goto	l10162
 12234                           
 12235                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12236  06A9  01ED               	clrf	Exception_Main@i_3436^(0+128)
 12237  06AA  01EE               	clrf	(Exception_Main@i_3436+1)^(0+128)
 12238  06AB                     l10160:	
 12239  06AB  086E               	movf	(Exception_Main@i_3436+1)^(0+128),w
 12240  06AC  3A80               	xorlw	128
 12241  06AD  0020               	movlb	0	; select bank0
 12242  06AE  00EB               	movwf	??_Exception_Main
 12243  06AF  3080               	movlw	128
 12244  06B0  026B               	subwf	??_Exception_Main,w
 12245  06B1  1D03               	skipz
 12246  06B2  2EB6               	goto	u11715
 12247  06B3  0021               	movlb	1	; select bank1
 12248  06B4  0869               	movf	Exception_Main@count^(0+128),w
 12249  06B5  026D               	subwf	Exception_Main@i_3436^(0+128),w
 12250  06B6                     u11715:	
 12251  06B6  1803               	btfsc	3,0
 12252  06B7  2EDA               	goto	u11710
 12253                           
 12254                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12255  06B8  0021               	movlb	1	; select bank1
 12256  06B9  086D               	movf	Exception_Main@i_3436^(0+128),w
 12257  06BA  3E01               	addlw	1
 12258  06BB  319D  25AE  3186   	fcall	_getDimmerLights_Status
 12259  06BE  3A01               	xorlw	1
 12260  06BF  1D03               	skipz
 12261  06C0  2ED4               	goto	l10158
 12262                           
 12263                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12264  06C1  0020               	movlb	0	; select bank0
 12265  06C2  086F               	movf	_DimmerLights,w
 12266  06C3  3E0B               	addlw	11
 12267  06C4  0086               	movwf	6
 12268  06C5  3001               	movlw	1	; select bank2/3
 12269  06C6  0087               	movwf	7
 12270  06C7  1481               	bsf	1,1
 12271                           
 12272                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12273  06C8  086F               	movf	_DimmerLights,w
 12274  06C9  3E02               	addlw	2
 12275  06CA  0086               	movwf	6
 12276  06CB  3001               	movlw	1	; select bank2/3
 12277  06CC  0087               	movwf	7
 12278  06CD  1081               	bcf	1,1
 12279                           
 12280                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12281  06CE  0021               	movlb	1	; select bank1
 12282  06CF  086D               	movf	Exception_Main@i_3436^(0+128),w
 12283  06D0  3E01               	addlw	1
 12284  06D1  3195  255F  3186   	fcall	_setDimmerLights_SwOff
 12285  06D4                     l10158:	
 12286  06D4  3001               	movlw	1
 12287  06D5  0021               	movlb	1	; select bank1
 12288  06D6  07ED               	addwf	Exception_Main@i_3436^(0+128),f
 12289  06D7  3000               	movlw	0
 12290  06D8  3DEE               	addwfc	(Exception_Main@i_3436+1)^(0+128),f
 12291  06D9  2EAB               	goto	l10160
 12292  06DA                     u11710:	
 12293  06DA  0021               	movlb	1	; select bank1
 12294  06DB  0008               	return
 12295  06DC                     l10162:	
 12296                           ;Main_B1.c: 570: }
 12297                           ;Main_B1.c: 571: }
 12298                           ;Main_B1.c: 572: } else {
 12299                           
 12300                           
 12301                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12302  06DC  0021               	movlb	1	; select bank1
 12303  06DD  086F               	movf	Exception_Main@lights^(0+128),w
 12304  06DE  319D  25AE  3186   	fcall	_getDimmerLights_Status
 12305  06E1  3A01               	xorlw	1
 12306  06E2  1903               	btfsc	3,2
 12307  06E3  2EE6               	goto	l10164
 12308  06E4  0021               	movlb	1	; select bank1
 12309  06E5  0008               	return
 12310  06E6                     l10164:	
 12311                           
 12312                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12313  06E6  0020               	movlb	0	; select bank0
 12314  06E7  086F               	movf	_DimmerLights,w
 12315  06E8  3E0B               	addlw	11
 12316  06E9  0086               	movwf	6
 12317  06EA  3001               	movlw	1	; select bank2/3
 12318  06EB  0087               	movwf	7
 12319  06EC  1481               	bsf	1,1
 12320                           
 12321                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12322  06ED  086F               	movf	_DimmerLights,w
 12323  06EE  3E02               	addlw	2
 12324  06EF  0086               	movwf	6
 12325  06F0  3001               	movlw	1	; select bank2/3
 12326  06F1  0087               	movwf	7
 12327  06F2  1081               	bcf	1,1
 12328                           
 12329                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12330  06F3  0021               	movlb	1	; select bank1
 12331  06F4  086F               	movf	Exception_Main@lights^(0+128),w
 12332  06F5  3195  255F         	fcall	_setDimmerLights_SwOff
 12333  06F7  0021               	movlb	1	; select bank1
 12334  06F8  0008               	return
 12335  06F9                     l10170:	
 12336                           ;Main_B1.c: 582: }
 12337                           
 12338                           ;Main_B1.c: 579: }
 12339                           ;Main_B1.c: 580: }
 12340                           ;Main_B1.c: 581: break;
 12341                           
 12342  06F9  0021               	movlb	1	; select bank1
 12343  06FA  086A               	movf	Exception_Main@error^(0+128),w
 12344                           
 12345                           ; Switch size 1, requested type "space"
 12346                           ; Number of cases is 2, Range of values is 2 to 3
 12347                           ; switch strategies available:
 12348                           ; Name         Instructions Cycles
 12349                           ; simple_byte            7     4 (average)
 12350                           ; direct_byte           13     9 (fixed)
 12351                           ; jumptable            263     9 (fixed)
 12352                           ;	Chosen strategy is simple_byte
 12353  06FB  3A02               	xorlw	2	; case 2
 12354  06FC  1903               	skipnz
 12355  06FD  2E52               	goto	l10128
 12356  06FE  3A01               	xorlw	1	; case 3
 12357  06FF  1903               	skipnz
 12358  0700  2E95               	goto	l10144
 12359  0701  2F03               	goto	l1459
 12360  0702  0008               	return
 12361  0703                     l1459:	
 12362  0703  0008               	return
 12363  0704                     __end_of_Exception_Main:	
 12364                           
 12365                           	psect	text73
 12366  1CD4                     __ptext73:	
 12367 ;; *************** function _getDimmerLights_Line *****************
 12368 ;; Defined at:
 12369 ;;		line 744 in file "../src/Dimmer_B1.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;		None
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;  line            1    0[BANK0 ] unsigned char 
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      unsigned char 
 12376 ;; Registers used:
 12377 ;;		wreg, status,2
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;Total ram usage:        1 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; Hardware stack levels required when called:    5
 12390 ;; This function calls:
 12391 ;;		Nothing
 12392 ;; This function is called by:
 12393 ;;		_Exception_Main
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           
 12398                           ;psect for function _getDimmerLights_Line
 12399  1CD4                     _getDimmerLights_Line:	
 12400                           
 12401                           ;Dimmer_B1.c: 745: char line = 0;
 12402                           
 12403                           ;incstack = 0
 12404                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12405  1CD4  0020               	movlb	0	; select bank0
 12406  1CD5  01A0               	clrf	getDimmerLights_Line@line
 12407                           
 12408                           ;Dimmer_B1.c: 747: if (DimmerLights1.Line == 1) {
 12409  1CD6  0022               	movlb	2	; select bank2
 12410  1CD7  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12411  1CD8  2CDC               	goto	l9276
 12412                           
 12413                           ;Dimmer_B1.c: 748: line = 1;
 12414  1CD9  0020               	movlb	0	; select bank0
 12415  1CDA  01A0               	clrf	getDimmerLights_Line@line
 12416  1CDB  0AA0               	incf	getDimmerLights_Line@line,f
 12417  1CDC                     l9276:	
 12418                           
 12419                           ;Dimmer_B1.c: 749: }
 12420                           ;Dimmer_B1.c: 761: return line;
 12421  1CDC  0020               	movlb	0	; select bank0
 12422  1CDD  0820               	movf	getDimmerLights_Line@line,w
 12423  1CDE  0008               	return
 12424  1CDF                     __end_of_getDimmerLights_Line:	
 12425                           
 12426                           	psect	text74
 12427  1F2E                     __ptext74:	
 12428 ;; *************** function _DimmerLights_Main *****************
 12429 ;; Defined at:
 12430 ;;		line 502 in file "../src/Dimmer_B1.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;		None
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;		None
 12435 ;; Return value:  Size  Location     Type
 12436 ;;		None               void
 12437 ;; Registers used:
 12438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;Total ram usage:        0 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:   10
 12451 ;; This function calls:
 12452 ;;		_getLoad_OK
 12453 ;;		_getMain_All_Error_Status
 12454 ;;		_getMain_LightsStatus
 12455 ;;		_setDimmerLights_Main
 12456 ;; This function is called by:
 12457 ;;		_main
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _DimmerLights_Main
 12463  1F2E                     _DimmerLights_Main:	
 12464                           
 12465                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12466                           
 12467                           ;incstack = 0
 12468                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12469  1F2E  0021               	movlb	1	; select bank1
 12470  1F2F  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12471  1F30  2F46               	goto	l9758
 12472                           
 12473                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12474  1F31  319C  2462  319F   	fcall	_getLoad_OK
 12475  1F34  3A01               	xorlw	1
 12476  1F35  1903               	skipnz
 12477  1F36  2F44               	goto	l730
 12478  1F37  3000               	movlw	0
 12479  1F38  3192  225F  319F   	fcall	_getMain_All_Error_Status
 12480  1F3B  3800               	iorlw	0
 12481  1F3C  1D03               	skipz
 12482  1F3D  2F44               	goto	l730
 12483  1F3E  319C  24A9  319F   	fcall	_getMain_LightsStatus
 12484  1F41  3800               	iorlw	0
 12485  1F42  1D03               	skipz
 12486  1F43  2F46               	goto	l9758
 12487  1F44                     l730:	
 12488                           
 12489                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12490  1F44  0021               	movlb	1	; select bank1
 12491  1F45  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12492  1F46                     l9758:	
 12493                           
 12494                           ;Dimmer_B1.c: 517: }
 12495                           ;Dimmer_B1.c: 518: }
 12496                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12497  1F46  3001               	movlw	1
 12498  1F47  318B  2335         	fcall	_setDimmerLights_Main
 12499  1F49  0008               	return
 12500  1F4A                     __end_of_DimmerLights_Main:	
 12501                           
 12502                           	psect	text75
 12503  0B35                     __ptext75:	
 12504 ;; *************** function _setDimmerLights_Main *****************
 12505 ;; Defined at:
 12506 ;;		line 536 in file "../src/Dimmer_B1.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  lights          1    wreg     unsigned char 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  lights          1   78[BANK0 ] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;		None               void
 12513 ;; Registers used:
 12514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;Total ram usage:        1 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; Hardware stack levels required when called:    9
 12527 ;; This function calls:
 12528 ;;		_DimmerLightsPointSelect
 12529 ;;		_getDimmerLights_Allow_Condition
 12530 ;;		_getMain_LightsStatus
 12531 ;;		_setDimmerLights
 12532 ;;		_setDimmerLights_Adj
 12533 ;; This function is called by:
 12534 ;;		_DimmerLights_Main
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           
 12539                           ;psect for function _setDimmerLights_Main
 12540  0B35                     _setDimmerLights_Main:	
 12541                           
 12542                           ;incstack = 0
 12543                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12544                           ;setDimmerLights_Main@lights stored from wreg
 12545  0B35  0020               	movlb	0	; select bank0
 12546  0B36  00EE               	movwf	setDimmerLights_Main@lights
 12547                           
 12548                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12549  0B37  086E               	movf	setDimmerLights_Main@lights,w
 12550  0B38  319C  24C9  318B   	fcall	_DimmerLightsPointSelect
 12551                           
 12552                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12553  0B3B  0020               	movlb	0	; select bank0
 12554  0B3C  086F               	movf	_DimmerLights,w
 12555  0B3D  3E0A               	addlw	10
 12556  0B3E  0086               	movwf	6
 12557  0B3F  3001               	movlw	1	; select bank2/3
 12558  0B40  0087               	movwf	7
 12559  0B41  1C81               	btfss	1,1
 12560  0B42  2B64               	goto	l9248
 12561                           
 12562                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12563  0B43  086E               	movf	setDimmerLights_Main@lights,w
 12564  0B44  319E  26B1  318B   	fcall	_getDimmerLights_Allow_Condition
 12565  0B47  3800               	iorlw	0
 12566  0B48  1D03               	skipz
 12567  0B49  0008               	return
 12568                           
 12569                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12570  0B4A  0020               	movlb	0	; select bank0
 12571  0B4B  086F               	movf	_DimmerLights,w
 12572  0B4C  3E0A               	addlw	10
 12573  0B4D  0086               	movwf	6
 12574  0B4E  3001               	movlw	1	; select bank2/3
 12575  0B4F  0087               	movwf	7
 12576  0B50  1081               	bcf	1,1
 12577                           
 12578                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12579  0B51  086F               	movf	_DimmerLights,w
 12580  0B52  3E0A               	addlw	10
 12581  0B53  0086               	movwf	6
 12582  0B54  3001               	movlw	1	; select bank2/3
 12583  0B55  0087               	movwf	7
 12584  0B56  1C01               	btfss	1,0
 12585  0B57  2B5E               	goto	l9246
 12586                           
 12587                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12588  0B58  01EB               	clrf	setDimmerLights@status
 12589  0B59  0AEB               	incf	setDimmerLights@status,f
 12590  0B5A  086E               	movf	setDimmerLights_Main@lights,w
 12591  0B5B  3195  25FD         	fcall	_setDimmerLights
 12592                           
 12593                           ;Dimmer_B1.c: 544: } else {
 12594  0B5D  0008               	return
 12595  0B5E                     l9246:	
 12596                           
 12597                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12598  0B5E  0020               	movlb	0	; select bank0
 12599  0B5F  01EB               	clrf	setDimmerLights@status
 12600  0B60  086E               	movf	setDimmerLights_Main@lights,w
 12601  0B61  3195  25FD         	fcall	_setDimmerLights
 12602                           
 12603                           ;Dimmer_B1.c: 546: }
 12604                           ;Dimmer_B1.c: 547: }
 12605                           ;Dimmer_B1.c: 548: } else {
 12606  0B63  0008               	return
 12607  0B64                     l9248:	
 12608                           
 12609                           ;Dimmer_B1.c: 549: if (getMain_LightsStatus() == 1) {
 12610  0B64  319C  24A9  318B   	fcall	_getMain_LightsStatus
 12611  0B67  3A01               	xorlw	1
 12612  0B68  1D03               	skipz
 12613  0B69  2B93               	goto	l9260
 12614                           
 12615                           ;Dimmer_B1.c: 550: if (DimmerLights->TriggerAdj == 1) {
 12616  0B6A  0020               	movlb	0	; select bank0
 12617  0B6B  086F               	movf	_DimmerLights,w
 12618  0B6C  3E0A               	addlw	10
 12619  0B6D  0086               	movwf	6
 12620  0B6E  3001               	movlw	1	; select bank2/3
 12621  0B6F  0087               	movwf	7
 12622  0B70  1D81               	btfss	1,3
 12623  0B71  0008               	return
 12624                           
 12625                           ;Dimmer_B1.c: 551: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12626  0B72  086E               	movf	setDimmerLights_Main@lights,w
 12627  0B73  319E  26B1  318B   	fcall	_getDimmerLights_Allow_Condition
 12628  0B76  3800               	iorlw	0
 12629  0B77  1D03               	skipz
 12630  0B78  0008               	return
 12631                           
 12632                           ;Dimmer_B1.c: 552: DimmerLights->TriggerAdj = 0;
 12633  0B79  0020               	movlb	0	; select bank0
 12634  0B7A  086F               	movf	_DimmerLights,w
 12635  0B7B  3E0A               	addlw	10
 12636  0B7C  0086               	movwf	6
 12637  0B7D  3001               	movlw	1	; select bank2/3
 12638  0B7E  0087               	movwf	7
 12639  0B7F  1181               	bcf	1,3
 12640                           
 12641                           ;Dimmer_B1.c: 553: if (DimmerLights->SwitchAdj == 1) {
 12642  0B80  086F               	movf	_DimmerLights,w
 12643  0B81  3E0A               	addlw	10
 12644  0B82  0086               	movwf	6
 12645  0B83  3001               	movlw	1	; select bank2/3
 12646  0B84  0087               	movwf	7
 12647  0B85  1D01               	btfss	1,2
 12648  0B86  2B8D               	goto	l9258
 12649                           
 12650                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 1);
 12651  0B87  01EB               	clrf	setDimmerLights_Adj@status
 12652  0B88  0AEB               	incf	setDimmerLights_Adj@status,f
 12653  0B89  086E               	movf	setDimmerLights_Main@lights,w
 12654  0B8A  3196  26F6         	fcall	_setDimmerLights_Adj
 12655                           
 12656                           ;Dimmer_B1.c: 555: } else {
 12657  0B8C  0008               	return
 12658  0B8D                     l9258:	
 12659                           
 12660                           ;Dimmer_B1.c: 556: setDimmerLights_Adj(lights, 0);
 12661  0B8D  0020               	movlb	0	; select bank0
 12662  0B8E  01EB               	clrf	setDimmerLights_Adj@status
 12663  0B8F  086E               	movf	setDimmerLights_Main@lights,w
 12664  0B90  3196  26F6         	fcall	_setDimmerLights_Adj
 12665                           
 12666                           ;Dimmer_B1.c: 557: }
 12667                           ;Dimmer_B1.c: 558: }
 12668                           ;Dimmer_B1.c: 559: }
 12669                           ;Dimmer_B1.c: 560: } else {
 12670  0B92  0008               	return
 12671  0B93                     l9260:	
 12672                           
 12673                           ;Dimmer_B1.c: 561: if (DimmerLights->TriggerAdj == 1) {
 12674  0B93  0020               	movlb	0	; select bank0
 12675  0B94  086F               	movf	_DimmerLights,w
 12676  0B95  3E0A               	addlw	10
 12677  0B96  0086               	movwf	6
 12678  0B97  3001               	movlw	1	; select bank2/3
 12679  0B98  0087               	movwf	7
 12680  0B99  1D81               	btfss	1,3
 12681  0B9A  0008               	return
 12682                           
 12683                           ;Dimmer_B1.c: 562: DimmerLights->TriggerAdj = 0;
 12684  0B9B  086F               	movf	_DimmerLights,w
 12685  0B9C  3E0A               	addlw	10
 12686  0B9D  0086               	movwf	6
 12687  0B9E  3001               	movlw	1	; select bank2/3
 12688  0B9F  0087               	movwf	7
 12689  0BA0  1181               	bcf	1,3
 12690  0BA1  0008               	return
 12691  0BA2                     __end_of_setDimmerLights_Main:	
 12692                           
 12693                           	psect	text76
 12694  16F6                     __ptext76:	
 12695 ;; *************** function _setDimmerLights_Adj *****************
 12696 ;; Defined at:
 12697 ;;		line 680 in file "../src/Dimmer_B1.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;  lights          1    wreg     unsigned char 
 12700 ;;  status          1   75[BANK0 ] unsigned char 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  lights          1   77[BANK0 ] unsigned char 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;		None               void
 12705 ;; Registers used:
 12706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12712 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;Total ram usage:        3 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    8
 12719 ;; This function calls:
 12720 ;;		_setBuz
 12721 ;;		_setDimmerLights_Line
 12722 ;;		_setPercentValue
 12723 ;;		_setProductData
 12724 ;;		_setRF_DimmerLights
 12725 ;;		_setTxData
 12726 ;; This function is called by:
 12727 ;;		_setDimmerLights_Main
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           
 12732                           ;psect for function _setDimmerLights_Adj
 12733  16F6                     _setDimmerLights_Adj:	
 12734                           
 12735                           ;incstack = 0
 12736                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12737                           ;setDimmerLights_Adj@lights stored from wreg
 12738  16F6  0020               	movlb	0	; select bank0
 12739  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12740                           
 12741                           ;Dimmer_B1.c: 682: if (status == 1) {
 12742  16F8  086B               	movf	setDimmerLights_Adj@status,w
 12743  16F9  3A01               	xorlw	1
 12744  16FA  1D03               	skipz
 12745  16FB  2F0E               	goto	l8940
 12746                           
 12747                           ;Dimmer_B1.c: 683: DimmerLights->AdjSw = 1;
 12748  16FC  0A6F               	incf	_DimmerLights,w
 12749  16FD  0086               	movwf	6
 12750  16FE  3001               	movlw	1	; select bank2/3
 12751  16FF  0087               	movwf	7
 12752  1700  1701               	bsf	1,6
 12753                           
 12754                           ;Dimmer_B1.c: 684: DimmerLights->Signal = 1;
 12755  1701  0A6F               	incf	_DimmerLights,w
 12756  1702  0086               	movwf	6
 12757  1703  3001               	movlw	1	; select bank2/3
 12758  1704  0087               	movwf	7
 12759  1705  1681               	bsf	1,5
 12760                           
 12761                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 12762  1706  3064               	movlw	100
 12763  1707  00A9               	movwf	setBuz@time
 12764  1708  3000               	movlw	0
 12765  1709  00AA               	movwf	setBuz@time+1
 12766  170A  3001               	movlw	1
 12767  170B  3197  274E         	fcall	_setBuz
 12768                           
 12769                           ;Dimmer_B1.c: 686: } else if (status == 0) {
 12770  170D  0008               	return
 12771  170E                     l8940:	
 12772  170E  0020               	movlb	0	; select bank0
 12773  170F  08EB               	movf	setDimmerLights_Adj@status,f
 12774  1710  1D03               	skipz
 12775  1711  0008               	return
 12776                           
 12777                           ;Dimmer_B1.c: 687: Dimmer.Load_Status = 0;
 12778  1712  0021               	movlb	1	; select bank1
 12779  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12780                           
 12781                           ;Dimmer_B1.c: 688: setDimmerLights_Line(lights);
 12782  1714  0020               	movlb	0	; select bank0
 12783  1715  086D               	movf	setDimmerLights_Adj@lights,w
 12784  1716  319D  2562  3196   	fcall	_setDimmerLights_Line
 12785                           
 12786                           ;Dimmer_B1.c: 689: DimmerLights->AdjSw = 0;
 12787  1719  0020               	movlb	0	; select bank0
 12788  171A  0A6F               	incf	_DimmerLights,w
 12789  171B  0086               	movwf	6
 12790  171C  3001               	movlw	1	; select bank2/3
 12791  171D  0087               	movwf	7
 12792  171E  1301               	bcf	1,6
 12793                           
 12794                           ;Dimmer_B1.c: 690: DimmerLights->Signal = 0;
 12795  171F  0A6F               	incf	_DimmerLights,w
 12796  1720  0086               	movwf	6
 12797  1721  3001               	movlw	1	; select bank2/3
 12798  1722  0087               	movwf	7
 12799  1723  1281               	bcf	1,5
 12800                           
 12801                           ;Dimmer_B1.c: 692: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12802  1724  086F               	movf	_DimmerLights,w
 12803  1725  3E04               	addlw	4
 12804  1726  0086               	movwf	6
 12805  1727  3001               	movlw	1	; select bank2/3
 12806  1728  0087               	movwf	7
 12807  1729  0801               	movf	1,w
 12808  172A  00EC               	movwf	??_setDimmerLights_Adj
 12809  172B  086F               	movf	_DimmerLights,w
 12810  172C  3E06               	addlw	6
 12811  172D  0086               	movwf	6
 12812  172E  3001               	movlw	1	; select bank2/3
 12813  172F  0087               	movwf	7
 12814  1730  086C               	movf	??_setDimmerLights_Adj,w
 12815  1731  0081               	movwf	1
 12816                           
 12817                           ;Dimmer_B1.c: 693: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12818  1732  086F               	movf	_DimmerLights,w
 12819  1733  3E04               	addlw	4
 12820  1734  0086               	movwf	6
 12821  1735  3001               	movlw	1	; select bank2/3
 12822  1736  0087               	movwf	7
 12823  1737  0801               	movf	1,w
 12824  1738  318A  226B  3196   	fcall	_setPercentValue
 12825  173B  0020               	movlb	0	; select bank0
 12826  173C  00EC               	movwf	??_setDimmerLights_Adj
 12827  173D  086C               	movf	??_setDimmerLights_Adj,w
 12828  173E  00E2               	movwf	setProductData@value
 12829  173F  086D               	movf	setDimmerLights_Adj@lights,w
 12830  1740  3E14               	addlw	20
 12831  1741  319D  2554  3196   	fcall	_setProductData
 12832                           
 12833                           ;Dimmer_B1.c: 708: setRF_DimmerLights(lights, 1);
 12834  1744  0020               	movlb	0	; select bank0
 12835  1745  01E6               	clrf	setRF_DimmerLights@on
 12836  1746  0AE6               	incf	setRF_DimmerLights@on,f
 12837  1747  086D               	movf	setDimmerLights_Adj@lights,w
 12838  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 12839                           
 12840                           ;Dimmer_B1.c: 709: setTxData();
 12841  174B  318E  2610         	fcall	_setTxData
 12842  174D  0008               	return
 12843  174E                     __end_of_setDimmerLights_Adj:	
 12844                           
 12845                           	psect	text77
 12846  15FD                     __ptext77:	
 12847 ;; *************** function _setDimmerLights *****************
 12848 ;; Defined at:
 12849 ;;		line 638 in file "../src/Dimmer_B1.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;  lights          1    wreg     unsigned char 
 12852 ;;  status          1   75[BANK0 ] unsigned char 
 12853 ;; Auto vars:     Size  Location     Type
 12854 ;;  lights          1   77[BANK0 ] unsigned char 
 12855 ;; Return value:  Size  Location     Type
 12856 ;;		None               void
 12857 ;; Registers used:
 12858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12859 ;; Tracked objects:
 12860 ;;		On entry : 0/0
 12861 ;;		On exit  : 0/0
 12862 ;;		Unchanged: 0/0
 12863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12864 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;Total ram usage:        3 bytes
 12869 ;; Hardware stack levels used:    1
 12870 ;; Hardware stack levels required when called:    8
 12871 ;; This function calls:
 12872 ;;		_setDimmerLights_Line
 12873 ;;		_setLED
 12874 ;;		_setPercentValue
 12875 ;;		_setProductData
 12876 ;;		_setRF_DimmerLights
 12877 ;;		_setTxData
 12878 ;; This function is called by:
 12879 ;;		_setDimmerLights_Main
 12880 ;; This function uses a non-reentrant model
 12881 ;;
 12882                           
 12883                           
 12884                           ;psect for function _setDimmerLights
 12885  15FD                     _setDimmerLights:	
 12886                           
 12887                           ;incstack = 0
 12888                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12889                           ;setDimmerLights@lights stored from wreg
 12890  15FD  0020               	movlb	0	; select bank0
 12891  15FE  00ED               	movwf	setDimmerLights@lights
 12892                           
 12893                           ;Dimmer_B1.c: 646: if (status == 1) {
 12894  15FF  086B               	movf	setDimmerLights@status,w
 12895  1600  3A01               	xorlw	1
 12896  1601  1D03               	skipz
 12897  1602  2E2D               	goto	l8920
 12898                           
 12899                           ;Dimmer_B1.c: 647: DimmerLights->StatusFlag = 1;
 12900  1603  0A6F               	incf	_DimmerLights,w
 12901  1604  0086               	movwf	6
 12902  1605  3001               	movlw	1	; select bank2/3
 12903  1606  0087               	movwf	7
 12904  1607  1501               	bsf	1,2
 12905                           
 12906                           ;Dimmer_B1.c: 650: Dimmer.Load_Status = 1;
 12907  1608  0021               	movlb	1	; select bank1
 12908  1609  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12909                           
 12910                           ;Dimmer_B1.c: 651: setDimmerLights_Line(lights);
 12911  160A  0020               	movlb	0	; select bank0
 12912  160B  086D               	movf	setDimmerLights@lights,w
 12913  160C  319D  2562  3195   	fcall	_setDimmerLights_Line
 12914                           
 12915                           ;Dimmer_B1.c: 653: setLED(lights, 0);
 12916  160F  0020               	movlb	0	; select bank0
 12917  1610  01A2               	clrf	setLED@command
 12918  1611  086D               	movf	setDimmerLights@lights,w
 12919  1612  3193  239D  3195   	fcall	_setLED
 12920                           
 12921                           ;Dimmer_B1.c: 654: ;;
 12922                           ;Dimmer_B1.c: 658: DimmerLights->DimmingValue = ((char)(70*0.8));
 12923  1615  3038               	movlw	56
 12924  1616  0020               	movlb	0	; select bank0
 12925  1617  00EC               	movwf	??_setDimmerLights
 12926  1618  086F               	movf	_DimmerLights,w
 12927  1619  3E04               	addlw	4
 12928  161A  0086               	movwf	6
 12929  161B  3001               	movlw	1	; select bank2/3
 12930  161C  0087               	movwf	7
 12931  161D  086C               	movf	??_setDimmerLights,w
 12932  161E  0081               	movwf	1
 12933                           
 12934                           ;Dimmer_B1.c: 660: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 12935  161F  3038               	movlw	56
 12936  1620  318A  226B  3195   	fcall	_setPercentValue
 12937  1623  0020               	movlb	0	; select bank0
 12938  1624  00EC               	movwf	??_setDimmerLights
 12939  1625  086C               	movf	??_setDimmerLights,w
 12940  1626  00E2               	movwf	setProductData@value
 12941  1627  086D               	movf	setDimmerLights@lights,w
 12942  1628  3E14               	addlw	20
 12943  1629  319D  2554  3195   	fcall	_setProductData
 12944                           
 12945                           ;Dimmer_B1.c: 662: } else if (status == 0) {
 12946  162C  2E43               	goto	l8930
 12947  162D                     l8920:	
 12948  162D  0020               	movlb	0	; select bank0
 12949  162E  08EB               	movf	setDimmerLights@status,f
 12950  162F  1D03               	skipz
 12951  1630  2E43               	goto	l8930
 12952                           
 12953                           ;Dimmer_B1.c: 663: DimmerLights->StatusFlag = 0;
 12954  1631  0A6F               	incf	_DimmerLights,w
 12955  1632  0086               	movwf	6
 12956  1633  3001               	movlw	1	; select bank2/3
 12957  1634  0087               	movwf	7
 12958  1635  1101               	bcf	1,2
 12959                           
 12960                           ;Dimmer_B1.c: 666: Dimmer.Load_Status = 0;
 12961  1636  0021               	movlb	1	; select bank1
 12962  1637  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12963                           
 12964                           ;Dimmer_B1.c: 667: setDimmerLights_Line(0);
 12965  1638  3000               	movlw	0
 12966  1639  319D  2562  3195   	fcall	_setDimmerLights_Line
 12967                           
 12968                           ;Dimmer_B1.c: 669: setLED(lights, 1);
 12969  163C  0020               	movlb	0	; select bank0
 12970  163D  01A2               	clrf	setLED@command
 12971  163E  0AA2               	incf	setLED@command,f
 12972  163F  086D               	movf	setDimmerLights@lights,w
 12973  1640  3193  239D  3195   	fcall	_setLED
 12974  1643                     l8930:	
 12975                           ;Dimmer_B1.c: 670: ;;
 12976                           
 12977                           
 12978                           ;Dimmer_B1.c: 671: }
 12979                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12980  1643  0020               	movlb	0	; select bank0
 12981  1644  086B               	movf	setDimmerLights@status,w
 12982  1645  00EC               	movwf	??_setDimmerLights
 12983  1646  086C               	movf	??_setDimmerLights,w
 12984  1647  00E6               	movwf	setRF_DimmerLights@on
 12985  1648  086D               	movf	setDimmerLights@lights,w
 12986  1649  3197  27A7  3195   	fcall	_setRF_DimmerLights
 12987                           
 12988                           ;Dimmer_B1.c: 675: setTxData();
 12989  164C  318E  2610         	fcall	_setTxData
 12990  164E  0008               	return
 12991  164F                     __end_of_setDimmerLights:	
 12992                           
 12993                           	psect	text78
 12994  0E10                     __ptext78:	
 12995 ;; *************** function _setTxData *****************
 12996 ;; Defined at:
 12997 ;;		line 171 in file "../src/RF_Control_B1.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;		None
 13000 ;; Auto vars:     Size  Location     Type
 13001 ;;  i               1    0        unsigned char 
 13002 ;; Return value:  Size  Location     Type
 13003 ;;		None               void
 13004 ;; Registers used:
 13005 ;;		wreg, fsr1l, fsr1h
 13006 ;; Tracked objects:
 13007 ;;		On entry : 0/0
 13008 ;;		On exit  : 0/0
 13009 ;;		Unchanged: 0/0
 13010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;Total ram usage:        1 bytes
 13016 ;; Hardware stack levels used:    1
 13017 ;; Hardware stack levels required when called:    5
 13018 ;; This function calls:
 13019 ;;		Nothing
 13020 ;; This function is called by:
 13021 ;;		_setDimmerLights
 13022 ;;		_setDimmerLights_Adj
 13023 ;;		_getRxData
 13024 ;;		_setControl_Lights_Table
 13025 ;;		_setRFSW_Control
 13026 ;;		_setRFSW_AdjControl
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           
 13031                           ;psect for function _setTxData
 13032  0E10                     _setTxData:	
 13033                           
 13034                           ;RF_Control_B1.c: 172: char i;
 13035                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13036                           
 13037                           ;incstack = 0
 13038                           ; Regs used in _setTxData: [wregfsr1]
 13039  0E10  0021               	movlb	1	; select bank1
 13040  0E11  1C3A               	btfss	_RF1^(0+128),0
 13041  0E12  0008               	return
 13042                           
 13043                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13044  0E13  193A               	btfsc	_RF1^(0+128),2
 13045  0E14  0008               	return
 13046                           
 13047                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13048  0E15  153A               	bsf	_RF1^(0+128),2
 13049                           
 13050                           ;RF_Control_B1.c: 188: RF_Data[0] = 0x63;
 13051  0E16  3063               	movlw	99
 13052  0E17  0020               	movlb	0	; select bank0
 13053  0E18  00A0               	movwf	??_setTxData
 13054  0E19  0820               	movf	??_setTxData,w
 13055  0E1A  0023               	movlb	3	; select bank3
 13056  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13057                           
 13058                           ;RF_Control_B1.c: 189: RF_Data[1] = 0x02;
 13059  0E1C  3002               	movlw	2
 13060  0E1D  0020               	movlb	0	; select bank0
 13061  0E1E  00A0               	movwf	??_setTxData
 13062  0E1F  0820               	movf	??_setTxData,w
 13063  0E20  0023               	movlb	3	; select bank3
 13064  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13065                           
 13066                           ;RF_Control_B1.c: 191: RF_Data[2] = product->Data[2];
 13067  0E22  0879               	movf	_product,w
 13068  0E23  0086               	movwf	6
 13069  0E24  3002               	movlw	2	; select bank4/5
 13070  0E25  0087               	movwf	7
 13071  0E26  3002               	movlw	2	; select bank4/5
 13072  0E27  3F42               	moviw [2]fsr1
 13073  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13074                           
 13075                           ;RF_Control_B1.c: 192: RF_Data[3] = product->Data[3];
 13076  0E29  0879               	movf	_product,w
 13077  0E2A  0086               	movwf	6
 13078  0E2B  3002               	movlw	2	; select bank4/5
 13079  0E2C  0087               	movwf	7
 13080  0E2D  3002               	movlw	2	; select bank4/5
 13081  0E2E  3F43               	moviw [3]fsr1
 13082  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13083                           
 13084                           ;RF_Control_B1.c: 193: RF_Data[4] = product->Data[4];
 13085  0E30  0879               	movf	_product,w
 13086  0E31  0086               	movwf	6
 13087  0E32  3002               	movlw	2	; select bank4/5
 13088  0E33  0087               	movwf	7
 13089  0E34  3002               	movlw	2	; select bank4/5
 13090  0E35  3F44               	moviw [4]fsr1
 13091  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13092                           
 13093                           ;RF_Control_B1.c: 194: RF_Data[5] = product->Data[5];
 13094  0E37  0879               	movf	_product,w
 13095  0E38  0086               	movwf	6
 13096  0E39  3002               	movlw	2	; select bank4/5
 13097  0E3A  0087               	movwf	7
 13098  0E3B  3002               	movlw	2	; select bank4/5
 13099  0E3C  3F45               	moviw [5]fsr1
 13100  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13101                           
 13102                           ;RF_Control_B1.c: 195: RF_Data[6] = product->Data[6];
 13103  0E3E  0879               	movf	_product,w
 13104  0E3F  0086               	movwf	6
 13105  0E40  3002               	movlw	2	; select bank4/5
 13106  0E41  0087               	movwf	7
 13107  0E42  3002               	movlw	2	; select bank4/5
 13108  0E43  3F46               	moviw [6]fsr1
 13109  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13110                           
 13111                           ;RF_Control_B1.c: 196: RF_Data[7] = product->Data[7];
 13112  0E45  0879               	movf	_product,w
 13113  0E46  0086               	movwf	6
 13114  0E47  3002               	movlw	2	; select bank4/5
 13115  0E48  0087               	movwf	7
 13116  0E49  3002               	movlw	2	; select bank4/5
 13117  0E4A  3F47               	moviw [7]fsr1
 13118  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13119                           
 13120                           ;RF_Control_B1.c: 197: RF_Data[8] = product->Data[8];
 13121  0E4C  0879               	movf	_product,w
 13122  0E4D  0086               	movwf	6
 13123  0E4E  3002               	movlw	2	; select bank4/5
 13124  0E4F  0087               	movwf	7
 13125  0E50  3002               	movlw	2	; select bank4/5
 13126  0E51  3F48               	moviw [8]fsr1
 13127  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13128                           
 13129                           ;RF_Control_B1.c: 198: RF_Data[9] = product->Data[9];
 13130  0E53  0879               	movf	_product,w
 13131  0E54  0086               	movwf	6
 13132  0E55  3002               	movlw	2	; select bank4/5
 13133  0E56  0087               	movwf	7
 13134  0E57  3002               	movlw	2	; select bank4/5
 13135  0E58  3F49               	moviw [9]fsr1
 13136  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13137                           
 13138                           ;RF_Control_B1.c: 199: RF_Data[10] = product->Data[10];
 13139  0E5A  0879               	movf	_product,w
 13140  0E5B  0086               	movwf	6
 13141  0E5C  3002               	movlw	2	; select bank4/5
 13142  0E5D  0087               	movwf	7
 13143  0E5E  3002               	movlw	2	; select bank4/5
 13144  0E5F  3F4A               	moviw [10]fsr1
 13145  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13146                           
 13147                           ;RF_Control_B1.c: 200: RF_Data[11] = product->Data[11];
 13148  0E61  0879               	movf	_product,w
 13149  0E62  0086               	movwf	6
 13150  0E63  3002               	movlw	2	; select bank4/5
 13151  0E64  0087               	movwf	7
 13152  0E65  3002               	movlw	2	; select bank4/5
 13153  0E66  3F4B               	moviw [11]fsr1
 13154  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13155                           
 13156                           ;RF_Control_B1.c: 201: RF_Data[12] = product->Data[12];
 13157  0E68  0879               	movf	_product,w
 13158  0E69  0086               	movwf	6
 13159  0E6A  3002               	movlw	2	; select bank4/5
 13160  0E6B  0087               	movwf	7
 13161  0E6C  3002               	movlw	2	; select bank4/5
 13162  0E6D  3F4C               	moviw [12]fsr1
 13163  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13164                           
 13165                           ;RF_Control_B1.c: 202: RF_Data[13] = product->Data[13];
 13166  0E6F  0879               	movf	_product,w
 13167  0E70  0086               	movwf	6
 13168  0E71  3002               	movlw	2	; select bank4/5
 13169  0E72  0087               	movwf	7
 13170  0E73  3002               	movlw	2	; select bank4/5
 13171  0E74  3F4D               	moviw [13]fsr1
 13172  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13173                           
 13174                           ;RF_Control_B1.c: 203: RF_Data[14] = product->Data[14];
 13175  0E76  0879               	movf	_product,w
 13176  0E77  0086               	movwf	6
 13177  0E78  3002               	movlw	2	; select bank4/5
 13178  0E79  0087               	movwf	7
 13179  0E7A  3002               	movlw	2	; select bank4/5
 13180  0E7B  3F4E               	moviw [14]fsr1
 13181  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13182                           
 13183                           ;RF_Control_B1.c: 204: RF_Data[15] = product->Data[15];
 13184  0E7D  0879               	movf	_product,w
 13185  0E7E  0086               	movwf	6
 13186  0E7F  3002               	movlw	2	; select bank4/5
 13187  0E80  0087               	movwf	7
 13188  0E81  3002               	movlw	2	; select bank4/5
 13189  0E82  3F4F               	moviw [15]fsr1
 13190  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13191                           
 13192                           ;RF_Control_B1.c: 205: RF_Data[16] = product->Data[16];
 13193  0E84  0879               	movf	_product,w
 13194  0E85  0086               	movwf	6
 13195  0E86  3002               	movlw	2	; select bank4/5
 13196  0E87  0087               	movwf	7
 13197  0E88  3002               	movlw	2	; select bank4/5
 13198  0E89  3F50               	moviw [16]fsr1
 13199  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13200                           
 13201                           ;RF_Control_B1.c: 206: RF_Data[17] = product->Data[17];
 13202  0E8B  0879               	movf	_product,w
 13203  0E8C  0086               	movwf	6
 13204  0E8D  3002               	movlw	2	; select bank4/5
 13205  0E8E  0087               	movwf	7
 13206  0E8F  3002               	movlw	2	; select bank4/5
 13207  0E90  3F51               	moviw [17]fsr1
 13208  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13209                           
 13210                           ;RF_Control_B1.c: 207: RF_Data[18] = product->Data[18];
 13211  0E92  0879               	movf	_product,w
 13212  0E93  0086               	movwf	6
 13213  0E94  3002               	movlw	2	; select bank4/5
 13214  0E95  0087               	movwf	7
 13215  0E96  3002               	movlw	2	; select bank4/5
 13216  0E97  3F52               	moviw [18]fsr1
 13217  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13218                           
 13219                           ;RF_Control_B1.c: 208: RF_Data[19] = product->Data[19];
 13220  0E99  0879               	movf	_product,w
 13221  0E9A  0086               	movwf	6
 13222  0E9B  3002               	movlw	2	; select bank4/5
 13223  0E9C  0087               	movwf	7
 13224  0E9D  3002               	movlw	2	; select bank4/5
 13225  0E9E  3F53               	moviw [19]fsr1
 13226  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13227                           
 13228                           ;RF_Control_B1.c: 209: RF_Data[20] = 209;
 13229  0EA0  30D1               	movlw	209
 13230  0EA1  0020               	movlb	0	; select bank0
 13231  0EA2  00A0               	movwf	??_setTxData
 13232  0EA3  0820               	movf	??_setTxData,w
 13233  0EA4  0023               	movlb	3	; select bank3
 13234  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13235  0EA6  0008               	return
 13236  0EA7                     __end_of_setTxData:	
 13237                           
 13238                           	psect	text79
 13239  17A7                     __ptext79:	
 13240 ;; *************** function _setRF_DimmerLights *****************
 13241 ;; Defined at:
 13242 ;;		line 436 in file "../src/RF_Control_B1.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  lights          1    wreg     unsigned char 
 13245 ;;  on              1   70[BANK0 ] unsigned char 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  lights          1   74[BANK0 ] unsigned char 
 13248 ;;  status          1   73[BANK0 ] unsigned char 
 13249 ;; Return value:  Size  Location     Type
 13250 ;;		None               void
 13251 ;; Registers used:
 13252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        5 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    6
 13265 ;; This function calls:
 13266 ;;		_setProductData
 13267 ;; This function is called by:
 13268 ;;		_setDimmerLights
 13269 ;;		_setDimmerLights_Adj
 13270 ;;		_setRFSW_Control
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _setRF_DimmerLights
 13276  17A7                     _setRF_DimmerLights:	
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13280                           ;setRF_DimmerLights@lights stored from wreg
 13281  17A7  0020               	movlb	0	; select bank0
 13282  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13283                           
 13284                           ;RF_Control_B1.c: 437: char status = 1;
 13285  17A9  01E9               	clrf	setRF_DimmerLights@status
 13286  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13287                           
 13288                           ;RF_Control_B1.c: 438: status <<= (lights - 1);
 13289  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13290  17AC  3EFF               	addlw	-1
 13291  17AD  0A89               	incf	9,f
 13292  17AE  2FB1               	goto	u9010
 13293  17AF                     u9015:	
 13294  17AF  1003               	clrc
 13295  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13296  17B1                     u9010:	
 13297  17B1  3EFF               	addlw	-1
 13298  17B2  1D03               	skipz
 13299  17B3  2FAF               	goto	u9015
 13300                           
 13301                           ;RF_Control_B1.c: 439: setProductData(11, lights);
 13302  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13303  17B5  00E7               	movwf	??_setRF_DimmerLights
 13304  17B6  0867               	movf	??_setRF_DimmerLights,w
 13305  17B7  00E2               	movwf	setProductData@value
 13306  17B8  300B               	movlw	11
 13307  17B9  319D  2554  3197   	fcall	_setProductData
 13308                           
 13309                           ;RF_Control_B1.c: 447: setProductData(9, product->Data[20 + lights]);
 13310  17BC  0020               	movlb	0	; select bank0
 13311  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13312  17BE  3E14               	addlw	20
 13313  17BF  0779               	addwf	_product,w
 13314  17C0  00E7               	movwf	??_setRF_DimmerLights
 13315  17C1  0867               	movf	??_setRF_DimmerLights,w
 13316  17C2  0086               	movwf	6
 13317  17C3  3002               	movlw	2	; select bank4/5
 13318  17C4  0087               	movwf	7
 13319  17C5  0801               	movf	1,w
 13320  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13321  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13322  17C8  00E2               	movwf	setProductData@value
 13323  17C9  3009               	movlw	9
 13324  17CA  319D  2554  3197   	fcall	_setProductData
 13325                           
 13326                           ;RF_Control_B1.c: 448: setProductData(17, product->Data[26 + lights]);
 13327  17CD  0020               	movlb	0	; select bank0
 13328  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13329  17CF  3E1A               	addlw	26
 13330  17D0  0779               	addwf	_product,w
 13331  17D1  00E7               	movwf	??_setRF_DimmerLights
 13332  17D2  0867               	movf	??_setRF_DimmerLights,w
 13333  17D3  0086               	movwf	6
 13334  17D4  3002               	movlw	2	; select bank4/5
 13335  17D5  0087               	movwf	7
 13336  17D6  0801               	movf	1,w
 13337  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13338  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13339  17D9  00E2               	movwf	setProductData@value
 13340  17DA  3011               	movlw	17
 13341  17DB  319D  2554  3197   	fcall	_setProductData
 13342                           
 13343                           ;RF_Control_B1.c: 449: if (on == 1) {
 13344  17DE  0020               	movlb	0	; select bank0
 13345  17DF  0866               	movf	setRF_DimmerLights@on,w
 13346  17E0  3A01               	xorlw	1
 13347  17E1  1D03               	skipz
 13348  17E2  2FF1               	goto	l8414
 13349                           
 13350                           ;RF_Control_B1.c: 450: setProductData(15, (product->Data[15] | status));
 13351  17E3  0879               	movf	_product,w
 13352  17E4  3E0F               	addlw	15
 13353  17E5  0086               	movwf	6
 13354  17E6  3002               	movlw	2	; select bank4/5
 13355  17E7  0087               	movwf	7
 13356  17E8  0801               	movf	1,w
 13357  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13358  17EA  00E7               	movwf	??_setRF_DimmerLights
 13359  17EB  0867               	movf	??_setRF_DimmerLights,w
 13360  17EC  00E2               	movwf	setProductData@value
 13361  17ED  300F               	movlw	15
 13362  17EE  319D  2554         	fcall	_setProductData
 13363                           
 13364                           ;RF_Control_B1.c: 451: } else {
 13365  17F0  0008               	return
 13366  17F1                     l8414:	
 13367                           
 13368                           ;RF_Control_B1.c: 452: setProductData(15, (product->Data[15]&(~status)));
 13369  17F1  0879               	movf	_product,w
 13370  17F2  3E0F               	addlw	15
 13371  17F3  0086               	movwf	6
 13372  17F4  3002               	movlw	2	; select bank4/5
 13373  17F5  0087               	movwf	7
 13374  17F6  0020               	movlb	0	; select bank0
 13375  17F7  0969               	comf	setRF_DimmerLights@status,w
 13376  17F8  0501               	andwf	1,w
 13377  17F9  00E7               	movwf	??_setRF_DimmerLights
 13378  17FA  0867               	movf	??_setRF_DimmerLights,w
 13379  17FB  00E2               	movwf	setProductData@value
 13380  17FC  300F               	movlw	15
 13381  17FD  319D  2554         	fcall	_setProductData
 13382  17FF  0008               	return
 13383  1800                     __end_of_setRF_DimmerLights:	
 13384                           
 13385                           	psect	text80
 13386  0A6B                     __ptext80:	
 13387 ;; *************** function _setPercentValue *****************
 13388 ;; Defined at:
 13389 ;;		line 1042 in file "../src/Dimmer_B1.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;  value           1    wreg     unsigned char 
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;  value           1   62[BANK0 ] unsigned char 
 13394 ;;  i               3   63[BANK0 ] float 
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  1    wreg      unsigned char 
 13397 ;; Registers used:
 13398 ;;		wreg, status,2, status,0, pclath, cstack
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;Total ram usage:        6 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    7
 13411 ;; This function calls:
 13412 ;;		___awtoft
 13413 ;;		___ftadd
 13414 ;;		___ftdiv
 13415 ;;		___ftneg
 13416 ;;		___fttol
 13417 ;; This function is called by:
 13418 ;;		_setDimmerLights
 13419 ;;		_setDimmerLights_Adj
 13420 ;;		_Flash_Memory_Initialization
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function _setPercentValue
 13426  0A6B                     _setPercentValue:	
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13430                           ;setPercentValue@value stored from wreg
 13431  0A6B  0020               	movlb	0	; select bank0
 13432  0A6C  00DE               	movwf	setPercentValue@value
 13433                           
 13434                           ;Dimmer_B1.c: 1050: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13435  0A6D  3000               	movlw	0
 13436  0A6E  00DF               	movwf	setPercentValue@i
 13437  0A6F  3030               	movlw	48
 13438  0A70  00E0               	movwf	setPercentValue@i+1
 13439  0A71  3042               	movlw	66
 13440  0A72  00E1               	movwf	setPercentValue@i+2
 13441                           
 13442                           ;Dimmer_B1.c: 1051: i /= 100;
 13443  0A73  3000               	movlw	0
 13444  0A74  00AE               	movwf	___ftdiv@f2
 13445  0A75  30C8               	movlw	200
 13446  0A76  00AF               	movwf	___ftdiv@f2+1
 13447  0A77  3042               	movlw	66
 13448  0A78  00B0               	movwf	___ftdiv@f2+2
 13449  0A79  085F               	movf	setPercentValue@i,w
 13450  0A7A  00B1               	movwf	___ftdiv@f1
 13451  0A7B  0860               	movf	setPercentValue@i+1,w
 13452  0A7C  00B2               	movwf	___ftdiv@f1+1
 13453  0A7D  0861               	movf	setPercentValue@i+2,w
 13454  0A7E  00B3               	movwf	___ftdiv@f1+2
 13455  0A7F  318E  26A7  318A   	fcall	___ftdiv
 13456  0A82  0020               	movlb	0	; select bank0
 13457  0A83  082E               	movf	?___ftdiv,w
 13458  0A84  00DF               	movwf	setPercentValue@i
 13459  0A85  082F               	movf	?___ftdiv+1,w
 13460  0A86  00E0               	movwf	setPercentValue@i+1
 13461  0A87  0830               	movf	?___ftdiv+2,w
 13462  0A88  00E1               	movwf	setPercentValue@i+2
 13463                           
 13464                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13465  0A89  085E               	movf	setPercentValue@value,w
 13466  0A8A  00DC               	movwf	??_setPercentValue
 13467  0A8B  01DD               	clrf	??_setPercentValue+1
 13468  0A8C  09DC               	comf	??_setPercentValue,f
 13469  0A8D  09DD               	comf	??_setPercentValue+1,f
 13470  0A8E  0ADC               	incf	??_setPercentValue,f
 13471  0A8F  1903               	skipnz
 13472  0A90  0ADD               	incf	??_setPercentValue+1,f
 13473  0A91  085C               	movf	??_setPercentValue,w
 13474  0A92  3E38               	addlw	56
 13475  0A93  00A8               	movwf	___awtoft@c
 13476  0A94  3000               	movlw	0
 13477  0A95  3D5D               	addwfc	??_setPercentValue+1,w
 13478  0A96  00A9               	movwf	___awtoft@c+1
 13479  0A97  3190  207B  318A   	fcall	___awtoft
 13480  0A9A  0020               	movlb	0	; select bank0
 13481  0A9B  0828               	movf	?___awtoft,w
 13482  0A9C  00B1               	movwf	___ftdiv@f1
 13483  0A9D  0829               	movf	?___awtoft+1,w
 13484  0A9E  00B2               	movwf	___ftdiv@f1+1
 13485  0A9F  082A               	movf	?___awtoft+2,w
 13486  0AA0  00B3               	movwf	___ftdiv@f1+2
 13487  0AA1  085F               	movf	setPercentValue@i,w
 13488  0AA2  00AE               	movwf	___ftdiv@f2
 13489  0AA3  0860               	movf	setPercentValue@i+1,w
 13490  0AA4  00AF               	movwf	___ftdiv@f2+1
 13491  0AA5  0861               	movf	setPercentValue@i+2,w
 13492  0AA6  00B0               	movwf	___ftdiv@f2+2
 13493  0AA7  318E  26A7  318A   	fcall	___ftdiv
 13494  0AAA  0020               	movlb	0	; select bank0
 13495  0AAB  082E               	movf	?___ftdiv,w
 13496  0AAC  00BE               	movwf	___ftneg@f1
 13497  0AAD  082F               	movf	?___ftdiv+1,w
 13498  0AAE  00BF               	movwf	___ftneg@f1+1
 13499  0AAF  0830               	movf	?___ftdiv+2,w
 13500  0AB0  00C0               	movwf	___ftneg@f1+2
 13501  0AB1  319C  247A  318A   	fcall	___ftneg
 13502  0AB4  0020               	movlb	0	; select bank0
 13503  0AB5  083E               	movf	?___ftneg,w
 13504  0AB6  00C4               	movwf	___ftadd@f2
 13505  0AB7  083F               	movf	?___ftneg+1,w
 13506  0AB8  00C5               	movwf	___ftadd@f2+1
 13507  0AB9  0840               	movf	?___ftneg+2,w
 13508  0ABA  00C6               	movwf	___ftadd@f2+2
 13509  0ABB  3000               	movlw	0
 13510  0ABC  00C1               	movwf	___ftadd@f1
 13511  0ABD  30C8               	movlw	200
 13512  0ABE  00C2               	movwf	___ftadd@f1+1
 13513  0ABF  3042               	movlw	66
 13514  0AC0  00C3               	movwf	___ftadd@f1+2
 13515  0AC1  3184  2456  318A   	fcall	___ftadd
 13516  0AC4  0020               	movlb	0	; select bank0
 13517  0AC5  0841               	movf	?___ftadd,w
 13518  0AC6  00CE               	movwf	___fttol@f1
 13519  0AC7  0842               	movf	?___ftadd+1,w
 13520  0AC8  00CF               	movwf	___fttol@f1+1
 13521  0AC9  0843               	movf	?___ftadd+2,w
 13522  0ACA  00D0               	movwf	___fttol@f1+2
 13523  0ACB  318D  2589         	fcall	___fttol
 13524  0ACD  0020               	movlb	0	; select bank0
 13525  0ACE  084E               	movf	?___fttol,w
 13526  0ACF  0008               	return
 13527  0AD0                     __end_of_setPercentValue:	
 13528                           
 13529                           	psect	text81
 13530  0D89                     __ptext81:	
 13531 ;; *************** function ___fttol *****************
 13532 ;; Defined at:
 13533 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  f1              3   46[BANK0 ] float 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  lval            4   55[BANK0 ] unsigned long 
 13538 ;;  exp1            1   59[BANK0 ] unsigned char 
 13539 ;;  sign1           1   54[BANK0 ] unsigned char 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  4   46[BANK0 ] long 
 13542 ;; Registers used:
 13543 ;;		wreg, status,2, status,0
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:       14 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    5
 13556 ;; This function calls:
 13557 ;;		Nothing
 13558 ;; This function is called by:
 13559 ;;		_getPercentValue
 13560 ;;		_setPercentValue
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           
 13565                           ;psect for function ___fttol
 13566  0D89                     ___fttol:	
 13567                           
 13568                           ;incstack = 0
 13569                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13570  0D89  0020               	movlb	0	; select bank0
 13571  0D8A  084E               	movf	___fttol@f1,w
 13572  0D8B  00D2               	movwf	??___fttol
 13573  0D8C  084F               	movf	___fttol@f1+1,w
 13574  0D8D  00D3               	movwf	??___fttol+1
 13575  0D8E  0850               	movf	___fttol@f1+2,w
 13576  0D8F  00D4               	movwf	??___fttol+2
 13577  0D90  1003               	clrc
 13578  0D91  0D53               	rlf	??___fttol+1,w
 13579  0D92  0D54               	rlf	??___fttol+2,w
 13580  0D93  00D5               	movwf	??___fttol+3
 13581  0D94  0855               	movf	??___fttol+3,w
 13582  0D95  00DB               	movwf	___fttol@exp1
 13583  0D96  08DB               	movf	___fttol@exp1,f
 13584  0D97  1D03               	skipz
 13585  0D98  2DA2               	goto	l8186
 13586  0D99  3000               	movlw	0
 13587  0D9A  00D1               	movwf	?___fttol+3
 13588  0D9B  3000               	movlw	0
 13589  0D9C  00D0               	movwf	?___fttol+2
 13590  0D9D  3000               	movlw	0
 13591  0D9E  00CF               	movwf	?___fttol+1
 13592  0D9F  3000               	movlw	0
 13593  0DA0  00CE               	movwf	?___fttol
 13594  0DA1  0008               	return
 13595  0DA2                     l8186:	
 13596  0DA2  084E               	movf	___fttol@f1,w
 13597  0DA3  00D2               	movwf	??___fttol
 13598  0DA4  084F               	movf	___fttol@f1+1,w
 13599  0DA5  00D3               	movwf	??___fttol+1
 13600  0DA6  0850               	movf	___fttol@f1+2,w
 13601  0DA7  00D4               	movwf	??___fttol+2
 13602  0DA8  3017               	movlw	23
 13603  0DA9                     u8645:	
 13604  0DA9  36D4               	lsrf	??___fttol+2,f
 13605  0DAA  0CD3               	rrf	??___fttol+1,f
 13606  0DAB  0CD2               	rrf	??___fttol,f
 13607  0DAC  0B89               	decfsz	9,f
 13608  0DAD  2DA9               	goto	u8645
 13609  0DAE  0852               	movf	??___fttol,w
 13610  0DAF  00D5               	movwf	??___fttol+3
 13611  0DB0  0855               	movf	??___fttol+3,w
 13612  0DB1  00D6               	movwf	___fttol@sign1
 13613  0DB2  17CF               	bsf	___fttol@f1+1,7
 13614  0DB3  30FF               	movlw	255
 13615  0DB4  05CE               	andwf	___fttol@f1,f
 13616  0DB5  30FF               	movlw	255
 13617  0DB6  05CF               	andwf	___fttol@f1+1,f
 13618  0DB7  3000               	movlw	0
 13619  0DB8  05D0               	andwf	___fttol@f1+2,f
 13620  0DB9  084E               	movf	___fttol@f1,w
 13621  0DBA  00D7               	movwf	___fttol@lval
 13622  0DBB  084F               	movf	___fttol@f1+1,w
 13623  0DBC  00D8               	movwf	___fttol@lval+1
 13624  0DBD  0850               	movf	___fttol@f1+2,w
 13625  0DBE  00D9               	movwf	___fttol@lval+2
 13626  0DBF  01DA               	clrf	___fttol@lval+3
 13627  0DC0  308E               	movlw	142
 13628  0DC1  02DB               	subwf	___fttol@exp1,f
 13629  0DC2  1FDB               	btfss	___fttol@exp1,7
 13630  0DC3  2DE0               	goto	l8206
 13631  0DC4  085B               	movf	___fttol@exp1,w
 13632  0DC5  3A80               	xorlw	128
 13633  0DC6  3E8F               	addlw	143
 13634  0DC7  1803               	skipnc
 13635  0DC8  2DD2               	goto	l8204
 13636  0DC9  3000               	movlw	0
 13637  0DCA  00D1               	movwf	?___fttol+3
 13638  0DCB  3000               	movlw	0
 13639  0DCC  00D0               	movwf	?___fttol+2
 13640  0DCD  3000               	movlw	0
 13641  0DCE  00CF               	movwf	?___fttol+1
 13642  0DCF  3000               	movlw	0
 13643  0DD0  00CE               	movwf	?___fttol
 13644  0DD1  0008               	return
 13645  0DD2                     l8204:	
 13646  0DD2  3001               	movlw	1
 13647  0DD3                     u8675:	
 13648  0DD3  36DA               	lsrf	___fttol@lval+3,f
 13649  0DD4  0CD9               	rrf	___fttol@lval+2,f
 13650  0DD5  0CD8               	rrf	___fttol@lval+1,f
 13651  0DD6  0CD7               	rrf	___fttol@lval,f
 13652  0DD7  0B89               	decfsz	9,f
 13653  0DD8  2DD3               	goto	u8675
 13654  0DD9  3001               	movlw	1
 13655  0DDA  00D2               	movwf	??___fttol
 13656  0DDB  0852               	movf	??___fttol,w
 13657  0DDC  07DB               	addwf	___fttol@exp1,f
 13658  0DDD  1903               	btfsc	3,2
 13659  0DDE  2DF9               	goto	l8216
 13660  0DDF  2DD2               	goto	l8204
 13661  0DE0                     l8206:	
 13662  0DE0  3018               	movlw	24
 13663  0DE1  025B               	subwf	___fttol@exp1,w
 13664  0DE2  1C03               	skipc
 13665  0DE3  2DF6               	goto	l8214
 13666  0DE4  3000               	movlw	0
 13667  0DE5  00D1               	movwf	?___fttol+3
 13668  0DE6  3000               	movlw	0
 13669  0DE7  00D0               	movwf	?___fttol+2
 13670  0DE8  3000               	movlw	0
 13671  0DE9  00CF               	movwf	?___fttol+1
 13672  0DEA  3000               	movlw	0
 13673  0DEB  00CE               	movwf	?___fttol
 13674  0DEC  0008               	return
 13675  0DED                     l8212:	
 13676  0DED  3001               	movlw	1
 13677  0DEE                     u8705:	
 13678  0DEE  35D7               	lslf	___fttol@lval,f
 13679  0DEF  0DD8               	rlf	___fttol@lval+1,f
 13680  0DF0  0DD9               	rlf	___fttol@lval+2,f
 13681  0DF1  0DDA               	rlf	___fttol@lval+3,f
 13682  0DF2  0B89               	decfsz	9,f
 13683  0DF3  2DEE               	goto	u8705
 13684  0DF4  3001               	movlw	1
 13685  0DF5  02DB               	subwf	___fttol@exp1,f
 13686  0DF6                     l8214:	
 13687  0DF6  08DB               	movf	___fttol@exp1,f
 13688  0DF7  1D03               	skipz
 13689  0DF8  2DED               	goto	l8212
 13690  0DF9                     l8216:	
 13691  0DF9  0856               	movf	___fttol@sign1,w
 13692  0DFA  1903               	btfsc	3,2
 13693  0DFB  2E07               	goto	l8220
 13694  0DFC  09D7               	comf	___fttol@lval,f
 13695  0DFD  09D8               	comf	___fttol@lval+1,f
 13696  0DFE  09D9               	comf	___fttol@lval+2,f
 13697  0DFF  09DA               	comf	___fttol@lval+3,f
 13698  0E00  0AD7               	incf	___fttol@lval,f
 13699  0E01  1903               	skipnz
 13700  0E02  0AD8               	incf	___fttol@lval+1,f
 13701  0E03  1903               	skipnz
 13702  0E04  0AD9               	incf	___fttol@lval+2,f
 13703  0E05  1903               	skipnz
 13704  0E06  0ADA               	incf	___fttol@lval+3,f
 13705  0E07                     l8220:	
 13706  0E07  085A               	movf	___fttol@lval+3,w
 13707  0E08  00D1               	movwf	?___fttol+3
 13708  0E09  0859               	movf	___fttol@lval+2,w
 13709  0E0A  00D0               	movwf	?___fttol+2
 13710  0E0B  0858               	movf	___fttol@lval+1,w
 13711  0E0C  00CF               	movwf	?___fttol+1
 13712  0E0D  0857               	movf	___fttol@lval,w
 13713  0E0E  00CE               	movwf	?___fttol
 13714  0E0F  0008               	return
 13715  0E10                     __end_of___fttol:	
 13716                           
 13717                           	psect	text82
 13718  1C7A                     __ptext82:	
 13719 ;; *************** function ___ftneg *****************
 13720 ;; Defined at:
 13721 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  f1              3   30[BANK0 ] float 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;		None
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  3   30[BANK0 ] float 
 13728 ;; Registers used:
 13729 ;;		wreg
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:        3 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    5
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_getPercentValue
 13746 ;;		_setPercentValue
 13747 ;; This function uses a non-reentrant model
 13748 ;;
 13749                           
 13750                           
 13751                           ;psect for function ___ftneg
 13752  1C7A                     ___ftneg:	
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in ___ftneg: [wreg]
 13756  1C7A  0020               	movlb	0	; select bank0
 13757  1C7B  0840               	movf	___ftneg@f1+2,w
 13758  1C7C  043F               	iorwf	___ftneg@f1+1,w
 13759  1C7D  043E               	iorwf	___ftneg@f1,w
 13760  1C7E  1903               	skipnz
 13761  1C7F  0008               	return
 13762  1C80  3080               	movlw	128
 13763  1C81  06C0               	xorwf	___ftneg@f1+2,f
 13764  1C82  0008               	return
 13765  1C83                     __end_of___ftneg:	
 13766                           
 13767                           	psect	text83
 13768  0EA7                     __ptext83:	
 13769 ;; *************** function ___ftdiv *****************
 13770 ;; Defined at:
 13771 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;  f2              3   14[BANK0 ] float 
 13774 ;;  f1              3   17[BANK0 ] float 
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;  f3              3   25[BANK0 ] float 
 13777 ;;  sign            1   29[BANK0 ] unsigned char 
 13778 ;;  exp             1   28[BANK0 ] unsigned char 
 13779 ;;  cntr            1   24[BANK0 ] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  3   14[BANK0 ] float 
 13782 ;; Registers used:
 13783 ;;		wreg, status,2, status,0, pclath, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:       16 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    6
 13796 ;; This function calls:
 13797 ;;		___ftpack
 13798 ;; This function is called by:
 13799 ;;		_getPercentValue
 13800 ;;		_setPercentValue
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           
 13805                           ;psect for function ___ftdiv
 13806  0EA7                     ___ftdiv:	
 13807                           
 13808                           ;incstack = 0
 13809                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13810  0EA7  0020               	movlb	0	; select bank0
 13811  0EA8  0831               	movf	___ftdiv@f1,w
 13812  0EA9  00B4               	movwf	??___ftdiv
 13813  0EAA  0832               	movf	___ftdiv@f1+1,w
 13814  0EAB  00B5               	movwf	??___ftdiv+1
 13815  0EAC  0833               	movf	___ftdiv@f1+2,w
 13816  0EAD  00B6               	movwf	??___ftdiv+2
 13817  0EAE  1003               	clrc
 13818  0EAF  0D35               	rlf	??___ftdiv+1,w
 13819  0EB0  0D36               	rlf	??___ftdiv+2,w
 13820  0EB1  00B7               	movwf	??___ftdiv+3
 13821  0EB2  0837               	movf	??___ftdiv+3,w
 13822  0EB3  00BC               	movwf	___ftdiv@exp
 13823  0EB4  08BC               	movf	___ftdiv@exp,f
 13824  0EB5  1D03               	skipz
 13825  0EB6  2EBE               	goto	l8086
 13826  0EB7  3000               	movlw	0
 13827  0EB8  00AE               	movwf	?___ftdiv
 13828  0EB9  3000               	movlw	0
 13829  0EBA  00AF               	movwf	?___ftdiv+1
 13830  0EBB  3000               	movlw	0
 13831  0EBC  00B0               	movwf	?___ftdiv+2
 13832  0EBD  0008               	return
 13833  0EBE                     l8086:	
 13834  0EBE  082E               	movf	___ftdiv@f2,w
 13835  0EBF  00B4               	movwf	??___ftdiv
 13836  0EC0  082F               	movf	___ftdiv@f2+1,w
 13837  0EC1  00B5               	movwf	??___ftdiv+1
 13838  0EC2  0830               	movf	___ftdiv@f2+2,w
 13839  0EC3  00B6               	movwf	??___ftdiv+2
 13840  0EC4  1003               	clrc
 13841  0EC5  0D35               	rlf	??___ftdiv+1,w
 13842  0EC6  0D36               	rlf	??___ftdiv+2,w
 13843  0EC7  00B7               	movwf	??___ftdiv+3
 13844  0EC8  0837               	movf	??___ftdiv+3,w
 13845  0EC9  00BD               	movwf	___ftdiv@sign
 13846  0ECA  08BD               	movf	___ftdiv@sign,f
 13847  0ECB  1D03               	skipz
 13848  0ECC  2ED4               	goto	l8092
 13849  0ECD  3000               	movlw	0
 13850  0ECE  00AE               	movwf	?___ftdiv
 13851  0ECF  3000               	movlw	0
 13852  0ED0  00AF               	movwf	?___ftdiv+1
 13853  0ED1  3000               	movlw	0
 13854  0ED2  00B0               	movwf	?___ftdiv+2
 13855  0ED3  0008               	return
 13856  0ED4                     l8092:	
 13857  0ED4  3000               	movlw	0
 13858  0ED5  00B9               	movwf	___ftdiv@f3
 13859  0ED6  3000               	movlw	0
 13860  0ED7  00BA               	movwf	___ftdiv@f3+1
 13861  0ED8  3000               	movlw	0
 13862  0ED9  00BB               	movwf	___ftdiv@f3+2
 13863  0EDA  3089               	movlw	137
 13864  0EDB  073D               	addwf	___ftdiv@sign,w
 13865  0EDC  00B4               	movwf	??___ftdiv
 13866  0EDD  0834               	movf	??___ftdiv,w
 13867  0EDE  02BC               	subwf	___ftdiv@exp,f
 13868  0EDF  0831               	movf	___ftdiv@f1,w
 13869  0EE0  00B4               	movwf	??___ftdiv
 13870  0EE1  0832               	movf	___ftdiv@f1+1,w
 13871  0EE2  00B5               	movwf	??___ftdiv+1
 13872  0EE3  0833               	movf	___ftdiv@f1+2,w
 13873  0EE4  00B6               	movwf	??___ftdiv+2
 13874  0EE5  3010               	movlw	16
 13875  0EE6                     u8445:	
 13876  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13877  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13878  0EE8  0CB4               	rrf	??___ftdiv,f
 13879  0EE9  0B89               	decfsz	9,f
 13880  0EEA  2EE6               	goto	u8445
 13881  0EEB  0834               	movf	??___ftdiv,w
 13882  0EEC  00B7               	movwf	??___ftdiv+3
 13883  0EED  0837               	movf	??___ftdiv+3,w
 13884  0EEE  00BD               	movwf	___ftdiv@sign
 13885  0EEF  082E               	movf	___ftdiv@f2,w
 13886  0EF0  00B4               	movwf	??___ftdiv
 13887  0EF1  082F               	movf	___ftdiv@f2+1,w
 13888  0EF2  00B5               	movwf	??___ftdiv+1
 13889  0EF3  0830               	movf	___ftdiv@f2+2,w
 13890  0EF4  00B6               	movwf	??___ftdiv+2
 13891  0EF5  3010               	movlw	16
 13892  0EF6                     u8455:	
 13893  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13894  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13895  0EF8  0CB4               	rrf	??___ftdiv,f
 13896  0EF9  0B89               	decfsz	9,f
 13897  0EFA  2EF6               	goto	u8455
 13898  0EFB  0834               	movf	??___ftdiv,w
 13899  0EFC  00B7               	movwf	??___ftdiv+3
 13900  0EFD  0837               	movf	??___ftdiv+3,w
 13901  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13902  0EFF  3080               	movlw	128
 13903  0F00  00B4               	movwf	??___ftdiv
 13904  0F01  0834               	movf	??___ftdiv,w
 13905  0F02  05BD               	andwf	___ftdiv@sign,f
 13906  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13907  0F04  30FF               	movlw	255
 13908  0F05  05B1               	andwf	___ftdiv@f1,f
 13909  0F06  30FF               	movlw	255
 13910  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13911  0F08  3000               	movlw	0
 13912  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13913  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13914  0F0B  30FF               	movlw	255
 13915  0F0C  05AE               	andwf	___ftdiv@f2,f
 13916  0F0D  30FF               	movlw	255
 13917  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13918  0F0F  3000               	movlw	0
 13919  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13920  0F11  3018               	movlw	24
 13921  0F12  00B4               	movwf	??___ftdiv
 13922  0F13  0834               	movf	??___ftdiv,w
 13923  0F14  00B8               	movwf	___ftdiv@cntr
 13924  0F15                     l8106:	
 13925  0F15  3001               	movlw	1
 13926  0F16                     u8465:	
 13927  0F16  35B9               	lslf	___ftdiv@f3,f
 13928  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13929  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13930  0F19  0B89               	decfsz	9,f
 13931  0F1A  2F16               	goto	u8465
 13932  0F1B  0830               	movf	___ftdiv@f2+2,w
 13933  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13934  0F1D  1D03               	skipz
 13935  0F1E  2F25               	goto	u8475
 13936  0F1F  082F               	movf	___ftdiv@f2+1,w
 13937  0F20  0232               	subwf	___ftdiv@f1+1,w
 13938  0F21  1D03               	skipz
 13939  0F22  2F25               	goto	u8475
 13940  0F23  082E               	movf	___ftdiv@f2,w
 13941  0F24  0231               	subwf	___ftdiv@f1,w
 13942  0F25                     u8475:	
 13943  0F25  1C03               	skipc
 13944  0F26  2F2E               	goto	l8114
 13945  0F27  082E               	movf	___ftdiv@f2,w
 13946  0F28  02B1               	subwf	___ftdiv@f1,f
 13947  0F29  082F               	movf	___ftdiv@f2+1,w
 13948  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13949  0F2B  0830               	movf	___ftdiv@f2+2,w
 13950  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13951  0F2D  1439               	bsf	___ftdiv@f3,0
 13952  0F2E                     l8114:	
 13953  0F2E  3001               	movlw	1
 13954  0F2F                     u8485:	
 13955  0F2F  35B1               	lslf	___ftdiv@f1,f
 13956  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13957  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13958  0F32  0B89               	decfsz	9,f
 13959  0F33  2F2F               	goto	u8485
 13960  0F34  3001               	movlw	1
 13961  0F35  02B8               	subwf	___ftdiv@cntr,f
 13962  0F36  1D03               	btfss	3,2
 13963  0F37  2F15               	goto	l8106
 13964  0F38  0839               	movf	___ftdiv@f3,w
 13965  0F39  00A0               	movwf	___ftpack@arg
 13966  0F3A  083A               	movf	___ftdiv@f3+1,w
 13967  0F3B  00A1               	movwf	___ftpack@arg+1
 13968  0F3C  083B               	movf	___ftdiv@f3+2,w
 13969  0F3D  00A2               	movwf	___ftpack@arg+2
 13970  0F3E  083C               	movf	___ftdiv@exp,w
 13971  0F3F  00B4               	movwf	??___ftdiv
 13972  0F40  0834               	movf	??___ftdiv,w
 13973  0F41  00A3               	movwf	___ftpack@exp
 13974  0F42  083D               	movf	___ftdiv@sign,w
 13975  0F43  00B5               	movwf	??___ftdiv+1
 13976  0F44  0835               	movf	??___ftdiv+1,w
 13977  0F45  00A4               	movwf	___ftpack@sign
 13978  0F46  3189  21A6         	fcall	___ftpack
 13979  0F48  0020               	movlb	0	; select bank0
 13980  0F49  0820               	movf	?___ftpack,w
 13981  0F4A  00AE               	movwf	?___ftdiv
 13982  0F4B  0821               	movf	?___ftpack+1,w
 13983  0F4C  00AF               	movwf	?___ftdiv+1
 13984  0F4D  0822               	movf	?___ftpack+2,w
 13985  0F4E  00B0               	movwf	?___ftdiv+2
 13986  0F4F  0008               	return
 13987  0F50                     __end_of___ftdiv:	
 13988                           
 13989                           	psect	text84
 13990  0456                     __ptext84:	
 13991 ;; *************** function ___ftadd *****************
 13992 ;; Defined at:
 13993 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13994 ;; Parameters:    Size  Location     Type
 13995 ;;  f1              3   33[BANK0 ] float 
 13996 ;;  f2              3   36[BANK0 ] float 
 13997 ;; Auto vars:     Size  Location     Type
 13998 ;;  exp1            1   45[BANK0 ] unsigned char 
 13999 ;;  exp2            1   44[BANK0 ] unsigned char 
 14000 ;;  sign            1   43[BANK0 ] unsigned char 
 14001 ;; Return value:  Size  Location     Type
 14002 ;;                  3   33[BANK0 ] float 
 14003 ;; Registers used:
 14004 ;;		wreg, status,2, status,0, pclath, cstack
 14005 ;; Tracked objects:
 14006 ;;		On entry : 0/0
 14007 ;;		On exit  : 0/0
 14008 ;;		Unchanged: 0/0
 14009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14010 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14012 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;Total ram usage:       13 bytes
 14015 ;; Hardware stack levels used:    1
 14016 ;; Hardware stack levels required when called:    6
 14017 ;; This function calls:
 14018 ;;		___ftpack
 14019 ;; This function is called by:
 14020 ;;		_getPercentValue
 14021 ;;		_setPercentValue
 14022 ;; This function uses a non-reentrant model
 14023 ;;
 14024                           
 14025                           
 14026                           ;psect for function ___ftadd
 14027  0456                     ___ftadd:	
 14028                           
 14029                           ;incstack = 0
 14030                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14031  0456  0020               	movlb	0	; select bank0
 14032  0457  0841               	movf	___ftadd@f1,w
 14033  0458  00C7               	movwf	??___ftadd
 14034  0459  0842               	movf	___ftadd@f1+1,w
 14035  045A  00C8               	movwf	??___ftadd+1
 14036  045B  0843               	movf	___ftadd@f1+2,w
 14037  045C  00C9               	movwf	??___ftadd+2
 14038  045D  1003               	clrc
 14039  045E  0D48               	rlf	??___ftadd+1,w
 14040  045F  0D49               	rlf	??___ftadd+2,w
 14041  0460  00CA               	movwf	??___ftadd+3
 14042  0461  084A               	movf	??___ftadd+3,w
 14043  0462  00CD               	movwf	___ftadd@exp1
 14044  0463  0844               	movf	___ftadd@f2,w
 14045  0464  00C7               	movwf	??___ftadd
 14046  0465  0845               	movf	___ftadd@f2+1,w
 14047  0466  00C8               	movwf	??___ftadd+1
 14048  0467  0846               	movf	___ftadd@f2+2,w
 14049  0468  00C9               	movwf	??___ftadd+2
 14050  0469  1003               	clrc
 14051  046A  0D48               	rlf	??___ftadd+1,w
 14052  046B  0D49               	rlf	??___ftadd+2,w
 14053  046C  00CA               	movwf	??___ftadd+3
 14054  046D  084A               	movf	??___ftadd+3,w
 14055  046E  00CC               	movwf	___ftadd@exp2
 14056  046F  084D               	movf	___ftadd@exp1,w
 14057  0470  1903               	btfsc	3,2
 14058  0471  2C7E               	goto	l8016
 14059  0472  084C               	movf	___ftadd@exp2,w
 14060  0473  024D               	subwf	___ftadd@exp1,w
 14061  0474  1803               	skipnc
 14062  0475  2C85               	goto	l8020
 14063  0476  034D               	decf	___ftadd@exp1,w
 14064  0477  3AFF               	xorlw	255
 14065  0478  074C               	addwf	___ftadd@exp2,w
 14066  0479  00C7               	movwf	??___ftadd
 14067  047A  3019               	movlw	25
 14068  047B  0247               	subwf	??___ftadd,w
 14069  047C  1C03               	skipc
 14070  047D  2C85               	goto	l8020
 14071  047E                     l8016:	
 14072  047E  0844               	movf	___ftadd@f2,w
 14073  047F  00C1               	movwf	?___ftadd
 14074  0480  0845               	movf	___ftadd@f2+1,w
 14075  0481  00C2               	movwf	?___ftadd+1
 14076  0482  0846               	movf	___ftadd@f2+2,w
 14077  0483  00C3               	movwf	?___ftadd+2
 14078  0484  0008               	return
 14079  0485                     l8020:	
 14080  0485  084C               	movf	___ftadd@exp2,w
 14081  0486  1903               	btfsc	3,2
 14082  0487  0008               	return
 14083  0488  084D               	movf	___ftadd@exp1,w
 14084  0489  024C               	subwf	___ftadd@exp2,w
 14085  048A  1803               	skipnc
 14086  048B  2C94               	goto	l8026
 14087  048C  034C               	decf	___ftadd@exp2,w
 14088  048D  3AFF               	xorlw	255
 14089  048E  074D               	addwf	___ftadd@exp1,w
 14090  048F  00C7               	movwf	??___ftadd
 14091  0490  3019               	movlw	25
 14092  0491  0247               	subwf	??___ftadd,w
 14093  0492  1803               	btfsc	3,0
 14094  0493  0008               	return
 14095  0494                     l8026:	
 14096  0494  3006               	movlw	6
 14097  0495  00C7               	movwf	??___ftadd
 14098  0496  0847               	movf	??___ftadd,w
 14099  0497  00CB               	movwf	___ftadd@sign
 14100  0498  1BC3               	btfsc	___ftadd@f1+2,7
 14101  0499  17CB               	bsf	___ftadd@sign,7
 14102  049A  1BC6               	btfsc	___ftadd@f2+2,7
 14103  049B  174B               	bsf	___ftadd@sign,6
 14104  049C  17C2               	bsf	___ftadd@f1+1,7
 14105  049D  30FF               	movlw	255
 14106  049E  05C1               	andwf	___ftadd@f1,f
 14107  049F  30FF               	movlw	255
 14108  04A0  05C2               	andwf	___ftadd@f1+1,f
 14109  04A1  3000               	movlw	0
 14110  04A2  05C3               	andwf	___ftadd@f1+2,f
 14111  04A3  17C5               	bsf	___ftadd@f2+1,7
 14112  04A4  30FF               	movlw	255
 14113  04A5  05C4               	andwf	___ftadd@f2,f
 14114  04A6  30FF               	movlw	255
 14115  04A7  05C5               	andwf	___ftadd@f2+1,f
 14116  04A8  3000               	movlw	0
 14117  04A9  05C6               	andwf	___ftadd@f2+2,f
 14118  04AA  084C               	movf	___ftadd@exp2,w
 14119  04AB  024D               	subwf	___ftadd@exp1,w
 14120  04AC  1803               	skipnc
 14121  04AD  2CD0               	goto	l8048
 14122  04AE                     l8038:	
 14123  04AE  3001               	movlw	1
 14124  04AF                     u8285:	
 14125  04AF  35C4               	lslf	___ftadd@f2,f
 14126  04B0  0DC5               	rlf	___ftadd@f2+1,f
 14127  04B1  0DC6               	rlf	___ftadd@f2+2,f
 14128  04B2  0B89               	decfsz	9,f
 14129  04B3  2CAF               	goto	u8285
 14130  04B4  3001               	movlw	1
 14131  04B5  02CC               	subwf	___ftadd@exp2,f
 14132  04B6  084C               	movf	___ftadd@exp2,w
 14133  04B7  064D               	xorwf	___ftadd@exp1,w
 14134  04B8  1903               	skipnz
 14135  04B9  2CCB               	goto	l8046
 14136  04BA  3001               	movlw	1
 14137  04BB  02CB               	subwf	___ftadd@sign,f
 14138  04BC  084B               	movf	___ftadd@sign,w
 14139  04BD  3907               	andlw	7
 14140  04BE  1903               	btfsc	3,2
 14141  04BF  2CCB               	goto	l8046
 14142  04C0  2CAE               	goto	l8038
 14143  04C1                     l8044:	
 14144  04C1  3001               	movlw	1
 14145  04C2                     u8315:	
 14146  04C2  36C3               	lsrf	___ftadd@f1+2,f
 14147  04C3  0CC2               	rrf	___ftadd@f1+1,f
 14148  04C4  0CC1               	rrf	___ftadd@f1,f
 14149  04C5  0B89               	decfsz	9,f
 14150  04C6  2CC2               	goto	u8315
 14151  04C7  3001               	movlw	1
 14152  04C8  00C7               	movwf	??___ftadd
 14153  04C9  0847               	movf	??___ftadd,w
 14154  04CA  07CD               	addwf	___ftadd@exp1,f
 14155  04CB                     l8046:	
 14156  04CB  084D               	movf	___ftadd@exp1,w
 14157  04CC  064C               	xorwf	___ftadd@exp2,w
 14158  04CD  1903               	btfsc	3,2
 14159  04CE  2CF5               	goto	l2781
 14160  04CF  2CC1               	goto	l8044
 14161  04D0                     l8048:	
 14162  04D0  084D               	movf	___ftadd@exp1,w
 14163  04D1  024C               	subwf	___ftadd@exp2,w
 14164  04D2  1803               	skipnc
 14165  04D3  2CF5               	goto	l2781
 14166  04D4                     l8050:	
 14167  04D4  3001               	movlw	1
 14168  04D5                     u8345:	
 14169  04D5  35C1               	lslf	___ftadd@f1,f
 14170  04D6  0DC2               	rlf	___ftadd@f1+1,f
 14171  04D7  0DC3               	rlf	___ftadd@f1+2,f
 14172  04D8  0B89               	decfsz	9,f
 14173  04D9  2CD5               	goto	u8345
 14174  04DA  3001               	movlw	1
 14175  04DB  02CD               	subwf	___ftadd@exp1,f
 14176  04DC  084C               	movf	___ftadd@exp2,w
 14177  04DD  064D               	xorwf	___ftadd@exp1,w
 14178  04DE  1903               	skipnz
 14179  04DF  2CF1               	goto	l8058
 14180  04E0  3001               	movlw	1
 14181  04E1  02CB               	subwf	___ftadd@sign,f
 14182  04E2  084B               	movf	___ftadd@sign,w
 14183  04E3  3907               	andlw	7
 14184  04E4  1903               	btfsc	3,2
 14185  04E5  2CF1               	goto	l8058
 14186  04E6  2CD4               	goto	l8050
 14187  04E7                     l8056:	
 14188  04E7  3001               	movlw	1
 14189  04E8                     u8375:	
 14190  04E8  36C6               	lsrf	___ftadd@f2+2,f
 14191  04E9  0CC5               	rrf	___ftadd@f2+1,f
 14192  04EA  0CC4               	rrf	___ftadd@f2,f
 14193  04EB  0B89               	decfsz	9,f
 14194  04EC  2CE8               	goto	u8375
 14195  04ED  3001               	movlw	1
 14196  04EE  00C7               	movwf	??___ftadd
 14197  04EF  0847               	movf	??___ftadd,w
 14198  04F0  07CC               	addwf	___ftadd@exp2,f
 14199  04F1                     l8058:	
 14200  04F1  084D               	movf	___ftadd@exp1,w
 14201  04F2  064C               	xorwf	___ftadd@exp2,w
 14202  04F3  1D03               	skipz
 14203  04F4  2CE7               	goto	l8056
 14204  04F5                     l2781:	
 14205  04F5  1FCB               	btfss	___ftadd@sign,7
 14206  04F6  2D07               	goto	l8062
 14207  04F7  30FF               	movlw	255
 14208  04F8  06C1               	xorwf	___ftadd@f1,f
 14209  04F9  30FF               	movlw	255
 14210  04FA  06C2               	xorwf	___ftadd@f1+1,f
 14211  04FB  30FF               	movlw	255
 14212  04FC  06C3               	xorwf	___ftadd@f1+2,f
 14213  04FD  3001               	movlw	1
 14214  04FE  07C1               	addwf	___ftadd@f1,f
 14215  04FF  3000               	movlw	0
 14216  0500  1803               	skipnc
 14217  0501  3001               	movlw	1
 14218  0502  07C2               	addwf	___ftadd@f1+1,f
 14219  0503  3000               	movlw	0
 14220  0504  1803               	skipnc
 14221  0505  3001               	movlw	1
 14222  0506  07C3               	addwf	___ftadd@f1+2,f
 14223  0507                     l8062:	
 14224  0507  1F4B               	btfss	___ftadd@sign,6
 14225  0508  2D19               	goto	l8066
 14226  0509  30FF               	movlw	255
 14227  050A  06C4               	xorwf	___ftadd@f2,f
 14228  050B  30FF               	movlw	255
 14229  050C  06C5               	xorwf	___ftadd@f2+1,f
 14230  050D  30FF               	movlw	255
 14231  050E  06C6               	xorwf	___ftadd@f2+2,f
 14232  050F  3001               	movlw	1
 14233  0510  07C4               	addwf	___ftadd@f2,f
 14234  0511  3000               	movlw	0
 14235  0512  1803               	skipnc
 14236  0513  3001               	movlw	1
 14237  0514  07C5               	addwf	___ftadd@f2+1,f
 14238  0515  3000               	movlw	0
 14239  0516  1803               	skipnc
 14240  0517  3001               	movlw	1
 14241  0518  07C6               	addwf	___ftadd@f2+2,f
 14242  0519                     l8066:	
 14243  0519  01CB               	clrf	___ftadd@sign
 14244  051A  0841               	movf	___ftadd@f1,w
 14245  051B  07C4               	addwf	___ftadd@f2,f
 14246  051C  0842               	movf	___ftadd@f1+1,w
 14247  051D  3DC5               	addwfc	___ftadd@f2+1,f
 14248  051E  0843               	movf	___ftadd@f1+2,w
 14249  051F  3DC6               	addwfc	___ftadd@f2+2,f
 14250  0520  1FC6               	btfss	___ftadd@f2+2,7
 14251  0521  2D34               	goto	l8076
 14252  0522  30FF               	movlw	255
 14253  0523  06C4               	xorwf	___ftadd@f2,f
 14254  0524  30FF               	movlw	255
 14255  0525  06C5               	xorwf	___ftadd@f2+1,f
 14256  0526  30FF               	movlw	255
 14257  0527  06C6               	xorwf	___ftadd@f2+2,f
 14258  0528  3001               	movlw	1
 14259  0529  07C4               	addwf	___ftadd@f2,f
 14260  052A  3000               	movlw	0
 14261  052B  1803               	skipnc
 14262  052C  3001               	movlw	1
 14263  052D  07C5               	addwf	___ftadd@f2+1,f
 14264  052E  3000               	movlw	0
 14265  052F  1803               	skipnc
 14266  0530  3001               	movlw	1
 14267  0531  07C6               	addwf	___ftadd@f2+2,f
 14268  0532  01CB               	clrf	___ftadd@sign
 14269  0533  0ACB               	incf	___ftadd@sign,f
 14270  0534                     l8076:	
 14271  0534  0844               	movf	___ftadd@f2,w
 14272  0535  00A0               	movwf	___ftpack@arg
 14273  0536  0845               	movf	___ftadd@f2+1,w
 14274  0537  00A1               	movwf	___ftpack@arg+1
 14275  0538  0846               	movf	___ftadd@f2+2,w
 14276  0539  00A2               	movwf	___ftpack@arg+2
 14277  053A  084D               	movf	___ftadd@exp1,w
 14278  053B  00C7               	movwf	??___ftadd
 14279  053C  0847               	movf	??___ftadd,w
 14280  053D  00A3               	movwf	___ftpack@exp
 14281  053E  084B               	movf	___ftadd@sign,w
 14282  053F  00C8               	movwf	??___ftadd+1
 14283  0540  0848               	movf	??___ftadd+1,w
 14284  0541  00A4               	movwf	___ftpack@sign
 14285  0542  3189  21A6         	fcall	___ftpack
 14286  0544  0020               	movlb	0	; select bank0
 14287  0545  0820               	movf	?___ftpack,w
 14288  0546  00C1               	movwf	?___ftadd
 14289  0547  0821               	movf	?___ftpack+1,w
 14290  0548  00C2               	movwf	?___ftadd+1
 14291  0549  0822               	movf	?___ftpack+2,w
 14292  054A  00C3               	movwf	?___ftadd+2
 14293  054B  0008               	return
 14294  054C                     __end_of___ftadd:	
 14295                           
 14296                           	psect	text85
 14297  107B                     __ptext85:	
 14298 ;; *************** function ___awtoft *****************
 14299 ;; Defined at:
 14300 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;  c               2    8[BANK0 ] int 
 14303 ;; Auto vars:     Size  Location     Type
 14304 ;;  sign            1   13[BANK0 ] unsigned char 
 14305 ;; Return value:  Size  Location     Type
 14306 ;;                  3    8[BANK0 ] float 
 14307 ;; Registers used:
 14308 ;;		wreg, status,2, status,0, pclath, cstack
 14309 ;; Tracked objects:
 14310 ;;		On entry : 0/0
 14311 ;;		On exit  : 0/0
 14312 ;;		Unchanged: 0/0
 14313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14314 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;Total ram usage:        6 bytes
 14319 ;; Hardware stack levels used:    1
 14320 ;; Hardware stack levels required when called:    6
 14321 ;; This function calls:
 14322 ;;		___ftpack
 14323 ;; This function is called by:
 14324 ;;		_getPercentValue
 14325 ;;		_setPercentValue
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function ___awtoft
 14331  107B                     ___awtoft:	
 14332                           
 14333                           ;incstack = 0
 14334                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14335  107B  0020               	movlb	0	; select bank0
 14336  107C  01AD               	clrf	___awtoft@sign
 14337  107D  1FA9               	btfss	___awtoft@c+1,7
 14338  107E  2886               	goto	l8004
 14339  107F  09A8               	comf	___awtoft@c,f
 14340  1080  09A9               	comf	___awtoft@c+1,f
 14341  1081  0AA8               	incf	___awtoft@c,f
 14342  1082  1903               	skipnz
 14343  1083  0AA9               	incf	___awtoft@c+1,f
 14344  1084  01AD               	clrf	___awtoft@sign
 14345  1085  0AAD               	incf	___awtoft@sign,f
 14346  1086                     l8004:	
 14347  1086  0828               	movf	___awtoft@c,w
 14348  1087  00A0               	movwf	___ftpack@arg
 14349  1088  0829               	movf	___awtoft@c+1,w
 14350  1089  00A1               	movwf	___ftpack@arg+1
 14351  108A  01A2               	clrf	___ftpack@arg+2
 14352  108B  308E               	movlw	142
 14353  108C  00AB               	movwf	??___awtoft
 14354  108D  082B               	movf	??___awtoft,w
 14355  108E  00A3               	movwf	___ftpack@exp
 14356  108F  082D               	movf	___awtoft@sign,w
 14357  1090  00AC               	movwf	??___awtoft+1
 14358  1091  082C               	movf	??___awtoft+1,w
 14359  1092  00A4               	movwf	___ftpack@sign
 14360  1093  3189  21A6         	fcall	___ftpack
 14361  1095  0020               	movlb	0	; select bank0
 14362  1096  0820               	movf	?___ftpack,w
 14363  1097  00A8               	movwf	?___awtoft
 14364  1098  0821               	movf	?___ftpack+1,w
 14365  1099  00A9               	movwf	?___awtoft+1
 14366  109A  0822               	movf	?___ftpack+2,w
 14367  109B  00AA               	movwf	?___awtoft+2
 14368  109C  0008               	return
 14369  109D                     __end_of___awtoft:	
 14370                           
 14371                           	psect	text86
 14372  09A6                     __ptext86:	
 14373 ;; *************** function ___ftpack *****************
 14374 ;; Defined at:
 14375 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14376 ;; Parameters:    Size  Location     Type
 14377 ;;  arg             3    0[BANK0 ] unsigned um
 14378 ;;  exp             1    3[BANK0 ] unsigned char 
 14379 ;;  sign            1    4[BANK0 ] unsigned char 
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;		None
 14382 ;; Return value:  Size  Location     Type
 14383 ;;                  3    0[BANK0 ] float 
 14384 ;; Registers used:
 14385 ;;		wreg, status,2, status,0
 14386 ;; Tracked objects:
 14387 ;;		On entry : 0/0
 14388 ;;		On exit  : 0/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14391 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;Total ram usage:        8 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    5
 14398 ;; This function calls:
 14399 ;;		Nothing
 14400 ;; This function is called by:
 14401 ;;		___awtoft
 14402 ;;		___ftadd
 14403 ;;		___ftdiv
 14404 ;;		___ftmul
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function ___ftpack
 14410  09A6                     ___ftpack:	
 14411                           
 14412                           ;incstack = 0
 14413                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14414  09A6  0020               	movlb	0	; select bank0
 14415  09A7  0823               	movf	___ftpack@exp,w
 14416  09A8  1903               	btfsc	3,2
 14417  09A9  29AF               	goto	l7954
 14418  09AA  0822               	movf	___ftpack@arg+2,w
 14419  09AB  0421               	iorwf	___ftpack@arg+1,w
 14420  09AC  0420               	iorwf	___ftpack@arg,w
 14421  09AD  1D03               	skipz
 14422  09AE  29C0               	goto	l7960
 14423  09AF                     l7954:	
 14424  09AF  3000               	movlw	0
 14425  09B0  00A0               	movwf	?___ftpack
 14426  09B1  3000               	movlw	0
 14427  09B2  00A1               	movwf	?___ftpack+1
 14428  09B3  3000               	movlw	0
 14429  09B4  00A2               	movwf	?___ftpack+2
 14430  09B5  0008               	return
 14431  09B6                     l7958:	
 14432  09B6  3001               	movlw	1
 14433  09B7  00A5               	movwf	??___ftpack
 14434  09B8  0825               	movf	??___ftpack,w
 14435  09B9  07A3               	addwf	___ftpack@exp,f
 14436  09BA  3001               	movlw	1
 14437  09BB                     u8075:	
 14438  09BB  36A2               	lsrf	___ftpack@arg+2,f
 14439  09BC  0CA1               	rrf	___ftpack@arg+1,f
 14440  09BD  0CA0               	rrf	___ftpack@arg,f
 14441  09BE  0B89               	decfsz	9,f
 14442  09BF  29BB               	goto	u8075
 14443  09C0                     l7960:	
 14444  09C0  30FE               	movlw	254
 14445  09C1  0522               	andwf	___ftpack@arg+2,w
 14446  09C2  1903               	btfsc	3,2
 14447  09C3  29D9               	goto	l2752
 14448  09C4  29B6               	goto	l7958
 14449  09C5                     l7962:	
 14450  09C5  3001               	movlw	1
 14451  09C6  00A5               	movwf	??___ftpack
 14452  09C7  0825               	movf	??___ftpack,w
 14453  09C8  07A3               	addwf	___ftpack@exp,f
 14454  09C9  3001               	movlw	1
 14455  09CA  07A0               	addwf	___ftpack@arg,f
 14456  09CB  3000               	movlw	0
 14457  09CC  1803               	skipnc
 14458  09CD  3001               	movlw	1
 14459  09CE  07A1               	addwf	___ftpack@arg+1,f
 14460  09CF  3000               	movlw	0
 14461  09D0  1803               	skipnc
 14462  09D1  3001               	movlw	1
 14463  09D2  07A2               	addwf	___ftpack@arg+2,f
 14464  09D3  3001               	movlw	1
 14465  09D4                     u8095:	
 14466  09D4  36A2               	lsrf	___ftpack@arg+2,f
 14467  09D5  0CA1               	rrf	___ftpack@arg+1,f
 14468  09D6  0CA0               	rrf	___ftpack@arg,f
 14469  09D7  0B89               	decfsz	9,f
 14470  09D8  29D4               	goto	u8095
 14471  09D9                     l2752:	
 14472  09D9  30FF               	movlw	255
 14473  09DA  0522               	andwf	___ftpack@arg+2,w
 14474  09DB  1903               	btfsc	3,2
 14475  09DC  29E6               	goto	l7970
 14476  09DD  29C5               	goto	l7962
 14477  09DE                     l7968:	
 14478  09DE  3001               	movlw	1
 14479  09DF  02A3               	subwf	___ftpack@exp,f
 14480  09E0  3001               	movlw	1
 14481  09E1                     u8115:	
 14482  09E1  35A0               	lslf	___ftpack@arg,f
 14483  09E2  0DA1               	rlf	___ftpack@arg+1,f
 14484  09E3  0DA2               	rlf	___ftpack@arg+2,f
 14485  09E4  0B89               	decfsz	9,f
 14486  09E5  29E1               	goto	u8115
 14487  09E6                     l7970:	
 14488  09E6  1FA1               	btfss	___ftpack@arg+1,7
 14489  09E7  29DE               	goto	l7968
 14490  09E8  1823               	btfsc	___ftpack@exp,0
 14491  09E9  29F0               	goto	l2758
 14492  09EA  30FF               	movlw	255
 14493  09EB  05A0               	andwf	___ftpack@arg,f
 14494  09EC  307F               	movlw	127
 14495  09ED  05A1               	andwf	___ftpack@arg+1,f
 14496  09EE  30FF               	movlw	255
 14497  09EF  05A2               	andwf	___ftpack@arg+2,f
 14498  09F0                     l2758:	
 14499  09F0  1003               	clrc
 14500  09F1  0CA3               	rrf	___ftpack@exp,f
 14501  09F2  0823               	movf	___ftpack@exp,w
 14502  09F3  00A5               	movwf	??___ftpack
 14503  09F4  01A6               	clrf	??___ftpack+1
 14504  09F5  01A7               	clrf	??___ftpack+2
 14505  09F6  3010               	movlw	16
 14506  09F7                     u8145:	
 14507  09F7  35A5               	lslf	??___ftpack,f
 14508  09F8  0DA6               	rlf	??___ftpack+1,f
 14509  09F9  0DA7               	rlf	??___ftpack+2,f
 14510  09FA  0B89               	decfsz	9,f
 14511  09FB  29F7               	goto	u8145
 14512  09FC  0825               	movf	??___ftpack,w
 14513  09FD  04A0               	iorwf	___ftpack@arg,f
 14514  09FE  0826               	movf	??___ftpack+1,w
 14515  09FF  04A1               	iorwf	___ftpack@arg+1,f
 14516  0A00  0827               	movf	??___ftpack+2,w
 14517  0A01  04A2               	iorwf	___ftpack@arg+2,f
 14518  0A02  0824               	movf	___ftpack@sign,w
 14519  0A03  1903               	btfsc	3,2
 14520  0A04  0008               	return
 14521  0A05  17A2               	bsf	___ftpack@arg+2,7
 14522  0A06  0008               	return
 14523  0A07                     __end_of___ftpack:	
 14524                           
 14525                           	psect	text87
 14526  139D                     __ptext87:	
 14527 ;; *************** function _setLED *****************
 14528 ;; Defined at:
 14529 ;;		line 76 in file "../src/LED_B1.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  led             1    wreg     unsigned char 
 14532 ;;  command         1    2[BANK0 ] unsigned char 
 14533 ;; Auto vars:     Size  Location     Type
 14534 ;;  led             1    3[BANK0 ] unsigned char 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;		None               void
 14537 ;; Registers used:
 14538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14539 ;; Tracked objects:
 14540 ;;		On entry : 0/0
 14541 ;;		On exit  : 0/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14544 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;Total ram usage:        2 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; Hardware stack levels required when called:    6
 14551 ;; This function calls:
 14552 ;;		_LedPointSelect
 14553 ;; This function is called by:
 14554 ;;		_setDimmerLights
 14555 ;;		_setLED_Initialization
 14556 ;;		_Exception_Main
 14557 ;;		_setSw_Initialization
 14558 ;; This function uses a non-reentrant model
 14559 ;;
 14560                           
 14561                           
 14562                           ;psect for function _setLED
 14563  139D                     _setLED:	
 14564                           
 14565                           ;incstack = 0
 14566                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14567                           ;setLED@led stored from wreg
 14568  139D  0020               	movlb	0	; select bank0
 14569  139E  00A3               	movwf	setLED@led
 14570                           
 14571                           ;LED_B1.c: 77: LedPointSelect(led);
 14572  139F  0823               	movf	setLED@led,w
 14573  13A0  319D  250C  3193   	fcall	_LedPointSelect
 14574                           
 14575                           ;LED_B1.c: 78: if (command == 0) {
 14576  13A3  0020               	movlb	0	; select bank0
 14577  13A4  08A2               	movf	setLED@command,f
 14578  13A5  1D03               	skipz
 14579  13A6  2BAC               	goto	l8676
 14580                           
 14581                           ;LED_B1.c: 107: if (led == 99) {
 14582  13A7  0823               	movf	setLED@led,w
 14583  13A8  3A63               	xorlw	99
 14584  13A9  1D03               	skipz
 14585  13AA  2BAC               	goto	l8676
 14586                           
 14587                           ;LED_B1.c: 111: RB5 = 1;
 14588  13AB  168D               	bsf	13,5	;volatile
 14589  13AC                     l8676:	
 14590                           
 14591                           ;LED_B1.c: 113: }
 14592                           ;LED_B1.c: 115: }
 14593                           ;LED_B1.c: 116: if (command == 1) {
 14594  13AC  0822               	movf	setLED@command,w
 14595  13AD  3A01               	xorlw	1
 14596  13AE  1D03               	skipz
 14597  13AF  2BB5               	goto	l8682
 14598                           
 14599                           ;LED_B1.c: 145: if (led == 99) {
 14600  13B0  0823               	movf	setLED@led,w
 14601  13B1  3A63               	xorlw	99
 14602  13B2  1D03               	skipz
 14603  13B3  2BB5               	goto	l8682
 14604                           
 14605                           ;LED_B1.c: 149: RB5 = 0;
 14606  13B4  128D               	bcf	13,5	;volatile
 14607  13B5                     l8682:	
 14608                           
 14609                           ;LED_B1.c: 151: }
 14610                           ;LED_B1.c: 153: }
 14611                           ;LED_B1.c: 154: if (command == 10) {
 14612  13B5  0822               	movf	setLED@command,w
 14613  13B6  3A0A               	xorlw	10
 14614  13B7  1D03               	skipz
 14615  13B8  2BCB               	goto	l8690
 14616                           
 14617                           ;LED_B1.c: 155: LED->GO = 0;
 14618  13B9  0021               	movlb	1	; select bank1
 14619  13BA  084E               	movf	_LED^(0+128),w
 14620  13BB  0086               	movwf	6
 14621  13BC  3001               	movlw	1	; select bank2/3
 14622  13BD  0087               	movwf	7
 14623  13BE  1081               	bcf	1,1
 14624                           
 14625                           ;LED_B1.c: 156: LED->Time = 0;
 14626  13BF  0A4E               	incf	_LED^(0+128),w
 14627  13C0  0086               	movwf	6
 14628  13C1  3001               	movlw	1	; select bank2/3
 14629  13C2  0087               	movwf	7
 14630  13C3  3000               	movlw	0
 14631  13C4  3FC0               	movwi [0]fsr1
 14632  13C5  3FC1               	movwi [1]fsr1
 14633                           
 14634                           ;LED_B1.c: 185: if (led == 99) {
 14635  13C6  0020               	movlb	0	; select bank0
 14636  13C7  0823               	movf	setLED@led,w
 14637  13C8  3A63               	xorlw	99
 14638  13C9  1903               	btfsc	3,2
 14639                           
 14640                           ;LED_B1.c: 189: RB5 = 1;
 14641  13CA  168D               	bsf	13,5	;volatile
 14642  13CB                     l8690:	
 14643                           
 14644                           ;LED_B1.c: 191: }
 14645                           ;LED_B1.c: 193: }
 14646                           ;LED_B1.c: 194: if (command == 11) {
 14647  13CB  0822               	movf	setLED@command,w
 14648  13CC  3A0B               	xorlw	11
 14649  13CD  1D03               	skipz
 14650  13CE  0008               	return
 14651                           
 14652                           ;LED_B1.c: 195: LED->GO = 1;
 14653  13CF  0021               	movlb	1	; select bank1
 14654  13D0  084E               	movf	_LED^(0+128),w
 14655  13D1  0086               	movwf	6
 14656  13D2  3001               	movlw	1	; select bank2/3
 14657  13D3  0087               	movwf	7
 14658  13D4  1481               	bsf	1,1
 14659  13D5  0008               	return
 14660  13D6                     __end_of_setLED:	
 14661                           
 14662                           	psect	text88
 14663  1D0C                     __ptext88:	
 14664 ;; *************** function _LedPointSelect *****************
 14665 ;; Defined at:
 14666 ;;		line 7 in file "../src/LED_B1.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;  led             1    wreg     unsigned char 
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  led             1    1[BANK0 ] unsigned char 
 14671 ;; Return value:  Size  Location     Type
 14672 ;;		None               void
 14673 ;; Registers used:
 14674 ;;		wreg
 14675 ;; Tracked objects:
 14676 ;;		On entry : 0/0
 14677 ;;		On exit  : 0/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;Total ram usage:        2 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    5
 14687 ;; This function calls:
 14688 ;;		Nothing
 14689 ;; This function is called by:
 14690 ;;		_setLED_Initialization
 14691 ;;		_setLED
 14692 ;;		_setLED_Main
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           
 14697                           ;psect for function _LedPointSelect
 14698  1D0C                     _LedPointSelect:	
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in _LedPointSelect: [wreg]
 14702                           ;LedPointSelect@led stored from wreg
 14703  1D0C  0020               	movlb	0	; select bank0
 14704  1D0D  00A1               	movwf	LedPointSelect@led
 14705                           
 14706                           ;LED_B1.c: 24: if (led == 99) {
 14707  1D0E  0821               	movf	LedPointSelect@led,w
 14708  1D0F  3A63               	xorlw	99
 14709  1D10  1D03               	skipz
 14710  1D11  0008               	return
 14711                           
 14712                           ;LED_B1.c: 25: LED = &VarErrLED;
 14713  1D12  3069               	movlw	_VarErrLED& (0+255)
 14714  1D13  00A0               	movwf	??_LedPointSelect
 14715  1D14  0820               	movf	??_LedPointSelect,w
 14716  1D15  0021               	movlb	1	; select bank1
 14717  1D16  00CE               	movwf	_LED^(0+128)
 14718  1D17  0008               	return
 14719  1D18                     __end_of_LedPointSelect:	
 14720                           
 14721                           	psect	text89
 14722  1D62                     __ptext89:	
 14723 ;; *************** function _setDimmerLights_Line *****************
 14724 ;; Defined at:
 14725 ;;		line 714 in file "../src/Dimmer_B1.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  lights          1    wreg     unsigned char 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;  lights          1    0[BANK0 ] unsigned char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;		None               void
 14732 ;; Registers used:
 14733 ;;		wreg
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;Total ram usage:        1 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    5
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		_setDimmerLights
 14750 ;;		_setDimmerLights_Adj
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754                           
 14755                           ;psect for function _setDimmerLights_Line
 14756  1D62                     _setDimmerLights_Line:	
 14757                           
 14758                           ;incstack = 0
 14759                           ; Regs used in _setDimmerLights_Line: [wreg]
 14760                           ;setDimmerLights_Line@lights stored from wreg
 14761  1D62  0020               	movlb	0	; select bank0
 14762  1D63  00A0               	movwf	setDimmerLights_Line@lights
 14763                           
 14764                           ;Dimmer_B1.c: 715: Dimmer.LoadGO = 1;
 14765  1D64  0021               	movlb	1	; select bank1
 14766  1D65  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14767                           
 14768                           ;Dimmer_B1.c: 717: DimmerLights1.Line = 0;
 14769  1D66  0022               	movlb	2	; select bank2
 14770  1D67  135D               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14771                           
 14772                           ;Dimmer_B1.c: 726: if (lights == 1) {
 14773  1D68  0020               	movlb	0	; select bank0
 14774  1D69  0820               	movf	setDimmerLights_Line@lights,w
 14775  1D6A  3A01               	xorlw	1
 14776  1D6B  1D03               	skipz
 14777  1D6C  0008               	return
 14778                           
 14779                           ;Dimmer_B1.c: 727: DimmerLights1.Line = 1;
 14780  1D6D  0022               	movlb	2	; select bank2
 14781  1D6E  175D               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14782  1D6F  0008               	return
 14783  1D70                     __end_of_setDimmerLights_Line:	
 14784                           
 14785                           	psect	text90
 14786  1CA9                     __ptext90:	
 14787 ;; *************** function _getMain_LightsStatus *****************
 14788 ;; Defined at:
 14789 ;;		line 375 in file "../src/Main_B1.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;		None
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  status          1    0[BANK0 ] unsigned char 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  1    wreg      unsigned char 
 14796 ;; Registers used:
 14797 ;;		wreg, status,2
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;Total ram usage:        1 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    5
 14810 ;; This function calls:
 14811 ;;		Nothing
 14812 ;; This function is called by:
 14813 ;;		_DimmerLights_Main
 14814 ;;		_setDimmerLights_Main
 14815 ;;		_Flash_Memory_Main
 14816 ;;		_Exception_Main
 14817 ;;		_Load_Main
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           
 14822                           ;psect for function _getMain_LightsStatus
 14823  1CA9                     _getMain_LightsStatus:	
 14824                           
 14825                           ;Main_B1.c: 376: char status = 0;
 14826                           
 14827                           ;incstack = 0
 14828                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14829  1CA9  0020               	movlb	0	; select bank0
 14830  1CAA  01A0               	clrf	getMain_LightsStatus@status
 14831                           
 14832                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14833  1CAB  3000               	movlw	0
 14834  1CAC  0022               	movlb	2	; select bank2
 14835  1CAD  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 14836  1CAE  3001               	movlw	1
 14837  1CAF  0020               	movlb	0	; select bank0
 14838  1CB0  00A0               	movwf	getMain_LightsStatus@status
 14839                           
 14840                           ;Main_B1.c: 422: return status;
 14841  1CB1  0820               	movf	getMain_LightsStatus@status,w
 14842  1CB2  0008               	return
 14843  1CB3                     __end_of_getMain_LightsStatus:	
 14844                           
 14845                           	psect	text91
 14846  1EB1                     __ptext91:	
 14847 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14848 ;; Defined at:
 14849 ;;		line 594 in file "../src/Dimmer_B1.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;  lights          1    wreg     unsigned char 
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;  lights          1    0[COMMON] unsigned char 
 14854 ;;  allow           1    2[BANK0 ] unsigned char 
 14855 ;; Return value:  Size  Location     Type
 14856 ;;                  1    wreg      unsigned char 
 14857 ;; Registers used:
 14858 ;;		wreg, status,2, pclath, cstack
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;Total ram usage:        3 bytes
 14869 ;; Hardware stack levels used:    1
 14870 ;; Hardware stack levels required when called:    6
 14871 ;; This function calls:
 14872 ;;		_getLoad_OK
 14873 ;; This function is called by:
 14874 ;;		_setDimmerLights_Main
 14875 ;; This function uses a non-reentrant model
 14876 ;;
 14877                           
 14878                           
 14879                           ;psect for function _getDimmerLights_Allow_Condition
 14880  1EB1                     _getDimmerLights_Allow_Condition:	
 14881                           
 14882                           ;Dimmer_B1.c: 595: char allow = 0;
 14883                           
 14884                           ;incstack = 0
 14885                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14886  1EB1  0020               	movlb	0	; select bank0
 14887  1EB2  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14888                           
 14889                           ;Dimmer_B1.c: 602: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14890  1EB3  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14891  1EB4  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14892  1EB5  319C  2462  319E   	fcall	_getLoad_OK
 14893  1EB8  3800               	iorlw	0
 14894  1EB9  1D03               	skipz
 14895  1EBA  2EC0               	goto	l8900
 14896  1EBB  0021               	movlb	1	; select bank1
 14897  1EBC  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14898  1EBD  2EC0               	goto	l8900
 14899  1EBE  0020               	movlb	0	; select bank0
 14900  1EBF  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14901  1EC0                     l8900:	
 14902  1EC0  0020               	movlb	0	; select bank0
 14903  1EC1  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14904  1EC2  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14905  1EC3  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14906  1EC4  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14907                           
 14908                           ;Dimmer_B1.c: 627: return allow;
 14909  1EC5  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14910  1EC6  0008               	return
 14911  1EC7                     __end_of_getDimmerLights_Allow_Condition:	
 14912                           
 14913                           	psect	text92
 14914  1C62                     __ptext92:	
 14915 ;; *************** function _getLoad_OK *****************
 14916 ;; Defined at:
 14917 ;;		line 265 in file "../src/OverLoad_B1.c"
 14918 ;; Parameters:    Size  Location     Type
 14919 ;;		None
 14920 ;; Auto vars:     Size  Location     Type
 14921 ;;  ok              1    0[BANK0 ] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  1    wreg      unsigned char 
 14924 ;; Registers used:
 14925 ;;		wreg, status,2
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;Total ram usage:        1 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; Hardware stack levels required when called:    5
 14938 ;; This function calls:
 14939 ;;		Nothing
 14940 ;; This function is called by:
 14941 ;;		_DimmerLights_Main
 14942 ;;		_getDimmerLights_Allow_Condition
 14943 ;; This function uses a non-reentrant model
 14944 ;;
 14945                           
 14946                           
 14947                           ;psect for function _getLoad_OK
 14948  1C62                     _getLoad_OK:	
 14949                           
 14950                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14951                           
 14952                           ;incstack = 0
 14953                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14954  1C62  3000               	movlw	0
 14955  1C63  0022               	movlb	2	; select bank2
 14956  1C64  1BA5               	btfsc	_Load^(0+256),7
 14957  1C65  3001               	movlw	1
 14958  1C66  0020               	movlb	0	; select bank0
 14959  1C67  00A0               	movwf	getLoad_OK@ok
 14960                           
 14961                           ;OverLoad_B1.c: 267: return ok;
 14962  1C68  0820               	movf	getLoad_OK@ok,w
 14963  1C69  0008               	return
 14964  1C6A                     __end_of_getLoad_OK:	
 14965                           
 14966                           	psect	text93
 14967  125F                     __ptext93:	
 14968 ;; *************** function _getMain_All_Error_Status *****************
 14969 ;; Defined at:
 14970 ;;		line 426 in file "../src/Main_B1.c"
 14971 ;; Parameters:    Size  Location     Type
 14972 ;;  command         1    wreg     unsigned char 
 14973 ;; Auto vars:     Size  Location     Type
 14974 ;;  command         1    5[BANK0 ] unsigned char 
 14975 ;;  status          1    6[BANK0 ] unsigned char 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;                  1    wreg      unsigned char 
 14978 ;; Registers used:
 14979 ;;		wreg, status,2, status,0
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        7 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    5
 14992 ;; This function calls:
 14993 ;;		Nothing
 14994 ;; This function is called by:
 14995 ;;		_DimmerLights_Main
 14996 ;;		_Exception_Main
 14997 ;;		_Load_Main
 14998 ;;		_setTemp_Main
 14999 ;;		_setRF_Main
 15000 ;;		_getRxData
 15001 ;;		_setSw_Main
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           
 15006                           ;psect for function _getMain_All_Error_Status
 15007  125F                     _getMain_All_Error_Status:	
 15008                           
 15009                           ;incstack = 0
 15010                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15011                           ;getMain_All_Error_Status@command stored from wreg
 15012  125F  0020               	movlb	0	; select bank0
 15013  1260  00A5               	movwf	getMain_All_Error_Status@command
 15014                           
 15015                           ;Main_B1.c: 427: char status = 0;
 15016  1261  01A6               	clrf	getMain_All_Error_Status@status
 15017                           
 15018                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15019  1262  08A6               	movf	getMain_All_Error_Status@status,f
 15020  1263  1D03               	skipz
 15021  1264  2A79               	goto	l8650
 15022  1265  0825               	movf	getMain_All_Error_Status@command,w
 15023  1266  3A02               	xorlw	2
 15024  1267  1903               	skipnz
 15025  1268  2A79               	goto	l8650
 15026                           
 15027                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15028  1269  0021               	movlb	1	; select bank1
 15029  126A  18D7               	btfsc	_Temp^(0+128),1
 15030  126B  2A70               	goto	l8648
 15031  126C  0020               	movlb	0	; select bank0
 15032  126D  01A1               	clrf	_getMain_All_Error_Status$3422
 15033  126E  01A2               	clrf	_getMain_All_Error_Status$3422+1
 15034  126F  2A75               	goto	l1424
 15035  1270                     l8648:	
 15036  1270  3002               	movlw	2
 15037  1271  0020               	movlb	0	; select bank0
 15038  1272  00A1               	movwf	_getMain_All_Error_Status$3422
 15039  1273  3000               	movlw	0
 15040  1274  00A2               	movwf	_getMain_All_Error_Status$3422+1
 15041  1275                     l1424:	
 15042  1275  0821               	movf	_getMain_All_Error_Status$3422,w
 15043  1276  00A0               	movwf	??_getMain_All_Error_Status
 15044  1277  0820               	movf	??_getMain_All_Error_Status,w
 15045  1278  00A6               	movwf	getMain_All_Error_Status@status
 15046  1279                     l8650:	
 15047                           
 15048                           ;Main_B1.c: 440: }
 15049                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15050  1279  08A6               	movf	getMain_All_Error_Status@status,f
 15051  127A  1D03               	skipz
 15052  127B  2A90               	goto	l1425
 15053  127C  0825               	movf	getMain_All_Error_Status@command,w
 15054  127D  3A03               	xorlw	3
 15055  127E  1903               	skipnz
 15056  127F  2A90               	goto	l1425
 15057                           
 15058                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15059  1280  0022               	movlb	2	; select bank2
 15060  1281  1AA5               	btfsc	_Load^(0+256),5
 15061  1282  2A87               	goto	l8658
 15062  1283  0020               	movlb	0	; select bank0
 15063  1284  01A3               	clrf	_getMain_All_Error_Status$3423
 15064  1285  01A4               	clrf	_getMain_All_Error_Status$3423+1
 15065  1286  2A8C               	goto	l1429
 15066  1287                     l8658:	
 15067  1287  3003               	movlw	3
 15068  1288  0020               	movlb	0	; select bank0
 15069  1289  00A3               	movwf	_getMain_All_Error_Status$3423
 15070  128A  3000               	movlw	0
 15071  128B  00A4               	movwf	_getMain_All_Error_Status$3423+1
 15072  128C                     l1429:	
 15073  128C  0823               	movf	_getMain_All_Error_Status$3423,w
 15074  128D  00A0               	movwf	??_getMain_All_Error_Status
 15075  128E  0820               	movf	??_getMain_All_Error_Status,w
 15076  128F  00A6               	movwf	getMain_All_Error_Status@status
 15077  1290                     l1425:	
 15078                           
 15079                           ;Main_B1.c: 447: }
 15080                           ;Main_B1.c: 463: return status;
 15081  1290  0826               	movf	getMain_All_Error_Status@status,w
 15082  1291  0008               	return
 15083  1292                     __end_of_getMain_All_Error_Status:	
 15084                           
 15085                           	psect	text94
 15086  1C9F                     __ptext94:	
 15087 ;; *************** function _DimmerLights_Initialization *****************
 15088 ;; Defined at:
 15089 ;;		line 341 in file "../src/Dimmer_B1.c"
 15090 ;; Parameters:    Size  Location     Type
 15091 ;;		None
 15092 ;; Auto vars:     Size  Location     Type
 15093 ;;		None
 15094 ;; Return value:  Size  Location     Type
 15095 ;;		None               void
 15096 ;; Registers used:
 15097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15107 ;;Total ram usage:        1 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:    7
 15110 ;; This function calls:
 15111 ;;		_setDimmerLights_Initialization
 15112 ;; This function is called by:
 15113 ;;		_main
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           
 15118                           ;psect for function _DimmerLights_Initialization
 15119  1C9F                     _DimmerLights_Initialization:	
 15120                           
 15121                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15122                           
 15123                           ;incstack = 0
 15124                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15125  1C9F  3053               	movlw	_DimmerLights1& (0+255)
 15126  1CA0  0020               	movlb	0	; select bank0
 15127  1CA1  00A4               	movwf	??_DimmerLights_Initialization
 15128  1CA2  0824               	movf	??_DimmerLights_Initialization,w
 15129  1CA3  0021               	movlb	1	; select bank1
 15130  1CA4  00CC               	movwf	_DimmerLights11^(0+128)
 15131                           
 15132                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15133  1CA5  3001               	movlw	1
 15134  1CA6  3188  2000         	fcall	_setDimmerLights_Initialization
 15135  1CA8  0008               	return
 15136  1CA9                     __end_of_DimmerLights_Initialization:	
 15137                           
 15138                           	psect	text95
 15139  0800                     __ptext95:	
 15140 ;; *************** function _setDimmerLights_Initialization *****************
 15141 ;; Defined at:
 15142 ;;		line 365 in file "../src/Dimmer_B1.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;  lights          1    wreg     unsigned char 
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;  lights          1    3[BANK0 ] unsigned char 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;		None               void
 15149 ;; Registers used:
 15150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;Total ram usage:        2 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    6
 15163 ;; This function calls:
 15164 ;;		_DimmerLightsPointSelect
 15165 ;; This function is called by:
 15166 ;;		_DimmerLights_Initialization
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           
 15171                           ;psect for function _setDimmerLights_Initialization
 15172  0800                     _setDimmerLights_Initialization:	
 15173                           
 15174                           ;incstack = 0
 15175                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15176                           ;setDimmerLights_Initialization@lights stored from wreg
 15177  0800  0020               	movlb	0	; select bank0
 15178  0801  00A3               	movwf	setDimmerLights_Initialization@lights
 15179                           
 15180                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15181  0802  0823               	movf	setDimmerLights_Initialization@lights,w
 15182  0803  319C  24C9  3188   	fcall	_DimmerLightsPointSelect
 15183                           
 15184                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15185  0806  3007               	movlw	7
 15186  0807  0020               	movlb	0	; select bank0
 15187  0808  00A2               	movwf	??_setDimmerLights_Initialization
 15188  0809  086F               	movf	_DimmerLights,w
 15189  080A  3E08               	addlw	8
 15190  080B  0086               	movwf	6
 15191  080C  3001               	movlw	1	; select bank2/3
 15192  080D  0087               	movwf	7
 15193  080E  0822               	movf	??_setDimmerLights_Initialization,w
 15194  080F  0081               	movwf	1
 15195                           
 15196                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15197  0810  3038               	movlw	56
 15198  0811  00A2               	movwf	??_setDimmerLights_Initialization
 15199  0812  086F               	movf	_DimmerLights,w
 15200  0813  3E06               	addlw	6
 15201  0814  0086               	movwf	6
 15202  0815  3001               	movlw	1	; select bank2/3
 15203  0816  0087               	movwf	7
 15204  0817  0822               	movf	??_setDimmerLights_Initialization,w
 15205  0818  0081               	movwf	1
 15206                           
 15207                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15208  0819  300C               	movlw	12
 15209  081A  00A2               	movwf	??_setDimmerLights_Initialization
 15210  081B  086F               	movf	_DimmerLights,w
 15211  081C  3E09               	addlw	9
 15212  081D  0086               	movwf	6
 15213  081E  3001               	movlw	1	; select bank2/3
 15214  081F  0087               	movwf	7
 15215  0820  0822               	movf	??_setDimmerLights_Initialization,w
 15216  0821  0081               	movwf	1
 15217                           
 15218                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15219  0822  086F               	movf	_DimmerLights,w
 15220  0823  3E06               	addlw	6
 15221  0824  0086               	movwf	6
 15222  0825  3001               	movlw	1	; select bank2/3
 15223  0826  0087               	movwf	7
 15224  0827  0801               	movf	1,w
 15225  0828  00A2               	movwf	??_setDimmerLights_Initialization
 15226  0829  086F               	movf	_DimmerLights,w
 15227  082A  3E04               	addlw	4
 15228  082B  0086               	movwf	6
 15229  082C  3001               	movlw	1	; select bank2/3
 15230  082D  0087               	movwf	7
 15231  082E  0822               	movf	??_setDimmerLights_Initialization,w
 15232  082F  0081               	movwf	1
 15233  0830  0008               	return
 15234  0831                     __end_of_setDimmerLights_Initialization:	
 15235                           
 15236                           	psect	text96
 15237  1C31                     __ptext96:	
 15238 ;; *************** function _DelayOff_Main *****************
 15239 ;; Defined at:
 15240 ;;		line 41 in file "../src/DelayOff_B1.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;		None
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;		None               void
 15247 ;; Registers used:
 15248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;Total ram usage:        0 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:   11
 15261 ;; This function calls:
 15262 ;;		_DlyOff_Main
 15263 ;; This function is called by:
 15264 ;;		_main
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           
 15269                           ;psect for function _DelayOff_Main
 15270  1C31                     _DelayOff_Main:	
 15271                           
 15272                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15273                           
 15274                           ;incstack = 0
 15275                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15276  1C31  3001               	movlw	1
 15277  1C32  3188  208C         	fcall	_DlyOff_Main
 15278  1C34  0008               	return
 15279  1C35                     __end_of_DelayOff_Main:	
 15280                           
 15281                           	psect	text97
 15282  088C                     __ptext97:	
 15283 ;; *************** function _DlyOff_Main *****************
 15284 ;; Defined at:
 15285 ;;		line 61 in file "../src/DelayOff_B1.c"
 15286 ;; Parameters:    Size  Location     Type
 15287 ;;  sw              1    wreg     unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  sw              1   78[BANK0 ] unsigned char 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;		None               void
 15292 ;; Registers used:
 15293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;Total ram usage:        3 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:   10
 15306 ;; This function calls:
 15307 ;;		_DelayOffPointSelect
 15308 ;;		_setBuz
 15309 ;;		_setDimmerLights_ErrorClose
 15310 ;; This function is called by:
 15311 ;;		_DelayOff_Main
 15312 ;; This function uses a non-reentrant model
 15313 ;;
 15314                           
 15315                           
 15316                           ;psect for function _DlyOff_Main
 15317  088C                     _DlyOff_Main:	
 15318                           
 15319                           ;incstack = 0
 15320                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15321                           ;DlyOff_Main@sw stored from wreg
 15322  088C  0020               	movlb	0	; select bank0
 15323  088D  00EE               	movwf	DlyOff_Main@sw
 15324                           
 15325                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15326  088E  086E               	movf	DlyOff_Main@sw,w
 15327  088F  319C  24BE  3188   	fcall	_DelayOffPointSelect
 15328                           
 15329                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15330  0892  0875               	movf	_DelayOff,w
 15331  0893  0086               	movwf	6
 15332  0894  3001               	movlw	1	; select bank2/3
 15333  0895  0087               	movwf	7
 15334  0896  1C81               	btfss	1,1
 15335  0897  0008               	return
 15336                           
 15337                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15338  0898  0875               	movf	_DelayOff,w
 15339  0899  3E02               	addlw	2
 15340  089A  0086               	movwf	6
 15341  089B  3001               	movlw	1	; select bank2/3
 15342  089C  0087               	movwf	7
 15343  089D  3001               	movlw	1
 15344  089E  0781               	addwf	1,f
 15345  089F  3141               	addfsr 1,1
 15346  08A0  1803               	skipnc
 15347  08A1  0A81               	incf	1,f
 15348                           
 15349                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15350  08A2  0875               	movf	_DelayOff,w
 15351  08A3  3E02               	addlw	2
 15352  08A4  0086               	movwf	6
 15353  08A5  3001               	movlw	1	; select bank2/3
 15354  08A6  0087               	movwf	7
 15355  08A7  3F40               	moviw [0]fsr1
 15356  08A8  0020               	movlb	0	; select bank0
 15357  08A9  00EC               	movwf	??_DlyOff_Main
 15358  08AA  3F41               	moviw [1]fsr1
 15359  08AB  00ED               	movwf	??_DlyOff_Main+1
 15360  08AC  3017               	movlw	23
 15361  08AD  026D               	subwf	??_DlyOff_Main+1,w
 15362  08AE  3070               	movlw	112
 15363  08AF  1903               	skipnz
 15364  08B0  026C               	subwf	??_DlyOff_Main,w
 15365  08B1  1C03               	skipc
 15366  08B2  0008               	return
 15367                           
 15368                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15369  08B3  0875               	movf	_DelayOff,w
 15370  08B4  3E02               	addlw	2
 15371  08B5  0086               	movwf	6
 15372  08B6  3001               	movlw	1	; select bank2/3
 15373  08B7  0087               	movwf	7
 15374  08B8  3000               	movlw	0
 15375  08B9  3FC0               	movwi [0]fsr1
 15376  08BA  3FC1               	movwi [1]fsr1
 15377                           
 15378                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15379  08BB  3001               	movlw	1
 15380  08BC  00EC               	movwf	??_DlyOff_Main
 15381  08BD  0875               	movf	_DelayOff,w
 15382  08BE  3E04               	addlw	4
 15383  08BF  0086               	movwf	6
 15384  08C0  3001               	movlw	1	; select bank2/3
 15385  08C1  0087               	movwf	7
 15386  08C2  086C               	movf	??_DlyOff_Main,w
 15387  08C3  0781               	addwf	1,f
 15388                           
 15389                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15390  08C4  0875               	movf	_DelayOff,w
 15391  08C5  3E04               	addlw	4
 15392  08C6  0086               	movwf	6
 15393  08C7  3001               	movlw	1	; select bank2/3
 15394  08C8  0087               	movwf	7
 15395  08C9  0A75               	incf	_DelayOff,w
 15396  08CA  0084               	movwf	4
 15397  08CB  3001               	movlw	1	; select bank2/3
 15398  08CC  0085               	movwf	5
 15399  08CD  0800               	movf	0,w
 15400  08CE  0201               	subwf	1,w
 15401  08CF  1C03               	skipc
 15402  08D0  0008               	return
 15403                           
 15404                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15405  08D1  0875               	movf	_DelayOff,w
 15406  08D2  3E04               	addlw	4
 15407  08D3  0086               	movwf	6
 15408  08D4  3001               	movlw	1	; select bank2/3
 15409  08D5  0087               	movwf	7
 15410  08D6  0181               	clrf	1
 15411                           
 15412                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15413  08D7  0875               	movf	_DelayOff,w
 15414  08D8  0086               	movwf	6
 15415  08D9  3001               	movlw	1	; select bank2/3
 15416  08DA  0087               	movwf	7
 15417  08DB  1081               	bcf	1,1
 15418                           
 15419                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15420  08DC  3064               	movlw	100
 15421  08DD  00A9               	movwf	setBuz@time
 15422  08DE  3000               	movlw	0
 15423  08DF  00AA               	movwf	setBuz@time+1
 15424  08E0  3001               	movlw	1
 15425  08E1  3197  274E  3188   	fcall	_setBuz
 15426                           
 15427                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15428  08E4  0020               	movlb	0	; select bank0
 15429  08E5  086E               	movf	DlyOff_Main@sw,w
 15430  08E6  3188  20E9         	fcall	_setDimmerLights_ErrorClose
 15431  08E8  0008               	return
 15432  08E9                     __end_of_DlyOff_Main:	
 15433                           
 15434                           	psect	text98
 15435  08E9                     __ptext98:	
 15436 ;; *************** function _setDimmerLights_ErrorClose *****************
 15437 ;; Defined at:
 15438 ;;		line 854 in file "../src/Dimmer_B1.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;  lights          1    wreg     unsigned char 
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;  lights          1    1[BANK1 ] unsigned char 
 15443 ;;  i               2    2[BANK1 ] int 
 15444 ;;  count           1    0[BANK1 ] unsigned char 
 15445 ;; Return value:  Size  Location     Type
 15446 ;;		None               void
 15447 ;; Registers used:
 15448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15449 ;; Tracked objects:
 15450 ;;		On entry : 0/0
 15451 ;;		On exit  : 0/0
 15452 ;;		Unchanged: 0/0
 15453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;Total ram usage:        5 bytes
 15459 ;; Hardware stack levels used:    1
 15460 ;; Hardware stack levels required when called:    9
 15461 ;; This function calls:
 15462 ;;		_DimmerLightsPointSelect
 15463 ;;		_getDimmerLights_Status
 15464 ;;		_setDimmerLights_SwOff
 15465 ;; This function is called by:
 15466 ;;		_DlyOff_Main
 15467 ;;		_setControl_Lights_Table
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           
 15472                           ;psect for function _setDimmerLights_ErrorClose
 15473  08E9                     _setDimmerLights_ErrorClose:	
 15474                           
 15475                           ;incstack = 0
 15476                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15477                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15478  08E9  0021               	movlb	1	; select bank1
 15479  08EA  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15480                           
 15481                           ;Dimmer_B1.c: 855: if (lights == 255) {
 15482  08EB  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15483  08EC  3AFF               	xorlw	255
 15484  08ED  1D03               	skipz
 15485  08EE  2928               	goto	l8548
 15486                           
 15487                           ;Dimmer_B1.c: 857: char count = 1;
 15488  08EF  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15489  08F0  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15490                           
 15491                           ;Dimmer_B1.c: 865: for (int i = 0; i < count; i++) {
 15492  08F1  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15493  08F2  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15494  08F3                     l8546:	
 15495  08F3  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15496  08F4  3A80               	xorlw	128
 15497  08F5  0020               	movlb	0	; select bank0
 15498  08F6  00EB               	movwf	??_setDimmerLights_ErrorClose
 15499  08F7  3080               	movlw	128
 15500  08F8  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15501  08F9  1D03               	skipz
 15502  08FA  28FE               	goto	u9155
 15503  08FB  0021               	movlb	1	; select bank1
 15504  08FC  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15505  08FD  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15506  08FE                     u9155:	
 15507  08FE  1803               	btfsc	3,0
 15508  08FF  0008               	return
 15509                           
 15510                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(i + 1);
 15511  0900  0021               	movlb	1	; select bank1
 15512  0901  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15513  0902  3E01               	addlw	1
 15514  0903  319C  24C9  3188   	fcall	_DimmerLightsPointSelect
 15515                           
 15516                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(i + 1) == 1) {
 15517  0906  0021               	movlb	1	; select bank1
 15518  0907  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15519  0908  3E01               	addlw	1
 15520  0909  319D  25AE  3188   	fcall	_getDimmerLights_Status
 15521  090C  3A01               	xorlw	1
 15522  090D  1D03               	skipz
 15523  090E  2922               	goto	l8544
 15524                           
 15525                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15526  090F  0020               	movlb	0	; select bank0
 15527  0910  086F               	movf	_DimmerLights,w
 15528  0911  3E0B               	addlw	11
 15529  0912  0086               	movwf	6
 15530  0913  3001               	movlw	1	; select bank2/3
 15531  0914  0087               	movwf	7
 15532  0915  1481               	bsf	1,1
 15533                           
 15534                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15535  0916  086F               	movf	_DimmerLights,w
 15536  0917  3E02               	addlw	2
 15537  0918  0086               	movwf	6
 15538  0919  3001               	movlw	1	; select bank2/3
 15539  091A  0087               	movwf	7
 15540  091B  1081               	bcf	1,1
 15541                           
 15542                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(i + 1);
 15543  091C  0021               	movlb	1	; select bank1
 15544  091D  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15545  091E  3E01               	addlw	1
 15546  091F  3195  255F  3188   	fcall	_setDimmerLights_SwOff
 15547  0922                     l8544:	
 15548  0922  3001               	movlw	1
 15549  0923  0021               	movlb	1	; select bank1
 15550  0924  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15551  0925  3000               	movlw	0
 15552  0926  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15553  0927  28F3               	goto	l8546
 15554  0928                     l8548:	
 15555                           ;Dimmer_B1.c: 871: }
 15556                           ;Dimmer_B1.c: 872: }
 15557                           ;Dimmer_B1.c: 873: } else {
 15558                           
 15559                           
 15560                           ;Dimmer_B1.c: 874: DimmerLightsPointSelect(lights);
 15561  0928  0021               	movlb	1	; select bank1
 15562  0929  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15563  092A  319C  24C9  3188   	fcall	_DimmerLightsPointSelect
 15564                           
 15565                           ;Dimmer_B1.c: 875: if (getDimmerLights_Status(lights) == 1) {
 15566  092D  0021               	movlb	1	; select bank1
 15567  092E  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15568  092F  319D  25AE  3188   	fcall	_getDimmerLights_Status
 15569  0932  3A01               	xorlw	1
 15570  0933  1D03               	skipz
 15571  0934  0008               	return
 15572                           
 15573                           ;Dimmer_B1.c: 876: DimmerLights->SwFlag = 1;
 15574  0935  0020               	movlb	0	; select bank0
 15575  0936  086F               	movf	_DimmerLights,w
 15576  0937  3E0B               	addlw	11
 15577  0938  0086               	movwf	6
 15578  0939  3001               	movlw	1	; select bank2/3
 15579  093A  0087               	movwf	7
 15580  093B  1481               	bsf	1,1
 15581                           
 15582                           ;Dimmer_B1.c: 877: DimmerLights->Status = 0;
 15583  093C  086F               	movf	_DimmerLights,w
 15584  093D  3E02               	addlw	2
 15585  093E  0086               	movwf	6
 15586  093F  3001               	movlw	1	; select bank2/3
 15587  0940  0087               	movwf	7
 15588  0941  1081               	bcf	1,1
 15589                           
 15590                           ;Dimmer_B1.c: 878: setDimmerLights_SwOff(lights);
 15591  0942  0021               	movlb	1	; select bank1
 15592  0943  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15593  0944  3195  255F         	fcall	_setDimmerLights_SwOff
 15594  0946  0008               	return
 15595  0947                     __end_of_setDimmerLights_ErrorClose:	
 15596                           
 15597                           	psect	text99
 15598  155F                     __ptext99:	
 15599 ;; *************** function _setDimmerLights_SwOff *****************
 15600 ;; Defined at:
 15601 ;;		line 450 in file "../src/Dimmer_B1.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  sw              1    wreg     unsigned char 
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;  sw              1   74[BANK0 ] unsigned char 
 15606 ;; Return value:  Size  Location     Type
 15607 ;;		None               void
 15608 ;; Registers used:
 15609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15610 ;; Tracked objects:
 15611 ;;		On entry : 0/0
 15612 ;;		On exit  : 0/0
 15613 ;;		Unchanged: 0/0
 15614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;Total ram usage:        1 bytes
 15620 ;; Hardware stack levels used:    1
 15621 ;; Hardware stack levels required when called:    8
 15622 ;; This function calls:
 15623 ;;		_DimmerLightsPointSelect
 15624 ;;		_getDelayOff_GO
 15625 ;;		_setDelayOff_GO
 15626 ;; This function is called by:
 15627 ;;		_setDimmerLights_ErrorClose
 15628 ;;		_Exception_Main
 15629 ;;		_setRFSW_Control
 15630 ;;		_setSw_Main
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           
 15635                           ;psect for function _setDimmerLights_SwOff
 15636  155F                     _setDimmerLights_SwOff:	
 15637                           
 15638                           ;incstack = 0
 15639                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15640                           ;setDimmerLights_SwOff@sw stored from wreg
 15641  155F  0020               	movlb	0	; select bank0
 15642  1560  00EA               	movwf	setDimmerLights_SwOff@sw
 15643                           
 15644                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15645  1561  086A               	movf	setDimmerLights_SwOff@sw,w
 15646  1562  319C  24C9  3195   	fcall	_DimmerLightsPointSelect
 15647                           
 15648                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15649  1565  0020               	movlb	0	; select bank0
 15650  1566  086F               	movf	_DimmerLights,w
 15651  1567  3E0B               	addlw	11
 15652  1568  0086               	movwf	6
 15653  1569  3001               	movlw	1	; select bank2/3
 15654  156A  0087               	movwf	7
 15655  156B  1C81               	btfss	1,1
 15656  156C  0008               	return
 15657                           
 15658                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15659  156D  086F               	movf	_DimmerLights,w
 15660  156E  3E0B               	addlw	11
 15661  156F  0086               	movwf	6
 15662  1570  3001               	movlw	1	; select bank2/3
 15663  1571  0087               	movwf	7
 15664  1572  1081               	bcf	1,1
 15665                           
 15666                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15667  1573  086F               	movf	_DimmerLights,w
 15668  1574  3E02               	addlw	2
 15669  1575  0086               	movwf	6
 15670  1576  3001               	movlw	1	; select bank2/3
 15671  1577  0087               	movwf	7
 15672  1578  1C81               	btfss	1,1
 15673  1579  2D94               	goto	l8394
 15674                           
 15675                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15676  157A  086F               	movf	_DimmerLights,w
 15677  157B  3E0B               	addlw	11
 15678  157C  0086               	movwf	6
 15679  157D  3001               	movlw	1	; select bank2/3
 15680  157E  0087               	movwf	7
 15681  157F  1D01               	btfss	1,2
 15682  1580  0008               	return
 15683                           
 15684                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15685  1581  086F               	movf	_DimmerLights,w
 15686  1582  3E0B               	addlw	11
 15687  1583  0086               	movwf	6
 15688  1584  3001               	movlw	1	; select bank2/3
 15689  1585  0087               	movwf	7
 15690  1586  1101               	bcf	1,2
 15691                           
 15692                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15693  1587  086F               	movf	_DimmerLights,w
 15694  1588  3E0A               	addlw	10
 15695  1589  0086               	movwf	6
 15696  158A  3001               	movlw	1	; select bank2/3
 15697  158B  0087               	movwf	7
 15698  158C  1581               	bsf	1,3
 15699                           
 15700                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15701  158D  086F               	movf	_DimmerLights,w
 15702  158E  3E0A               	addlw	10
 15703  158F  0086               	movwf	6
 15704  1590  3001               	movlw	1	; select bank2/3
 15705  1591  0087               	movwf	7
 15706  1592  1101               	bcf	1,2
 15707                           
 15708                           ;Dimmer_B1.c: 462: }
 15709                           ;Dimmer_B1.c: 463: } else {
 15710  1593  0008               	return
 15711  1594                     l8394:	
 15712                           
 15713                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15714  1594  086F               	movf	_DimmerLights,w
 15715  1595  3E0A               	addlw	10
 15716  1596  0086               	movwf	6
 15717  1597  3001               	movlw	1	; select bank2/3
 15718  1598  0087               	movwf	7
 15719  1599  1481               	bsf	1,1
 15720                           
 15721                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15722  159A  086F               	movf	_DimmerLights,w
 15723  159B  3E0A               	addlw	10
 15724  159C  0086               	movwf	6
 15725  159D  3001               	movlw	1	; select bank2/3
 15726  159E  0087               	movwf	7
 15727  159F  1001               	bcf	1,0
 15728                           
 15729                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15730  15A0  086A               	movf	setDimmerLights_SwOff@sw,w
 15731  15A1  319D  258E  3195   	fcall	_getDelayOff_GO
 15732  15A4  3A01               	xorlw	1
 15733  15A5  1D03               	skipz
 15734  15A6  0008               	return
 15735                           
 15736                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15737  15A7  0020               	movlb	0	; select bank0
 15738  15A8  01E6               	clrf	setDelayOff_GO@command
 15739  15A9  01E7               	clrf	setDelayOff_GO@value
 15740  15AA  086A               	movf	setDimmerLights_SwOff@sw,w
 15741  15AB  3196  264F         	fcall	_setDelayOff_GO
 15742  15AD  0008               	return
 15743  15AE                     __end_of_setDimmerLights_SwOff:	
 15744                           
 15745                           	psect	text100
 15746  164F                     __ptext100:	
 15747 ;; *************** function _setDelayOff_GO *****************
 15748 ;; Defined at:
 15749 ;;		line 83 in file "../src/DelayOff_B1.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;  sw              1    wreg     unsigned char 
 15752 ;;  command         1   70[BANK0 ] unsigned char 
 15753 ;;  value           1   71[BANK0 ] unsigned char 
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;  sw              1   73[BANK0 ] unsigned char 
 15756 ;; Return value:  Size  Location     Type
 15757 ;;		None               void
 15758 ;; Registers used:
 15759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;Total ram usage:        4 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    7
 15772 ;; This function calls:
 15773 ;;		_DelayOffPointSelect
 15774 ;;		_DelayTimejudge
 15775 ;;		_setProductData
 15776 ;; This function is called by:
 15777 ;;		_setDimmerLights_SwOff
 15778 ;;		_setRFSW_Control
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           
 15783                           ;psect for function _setDelayOff_GO
 15784  164F                     _setDelayOff_GO:	
 15785                           
 15786                           ;incstack = 0
 15787                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15788                           ;setDelayOff_GO@sw stored from wreg
 15789  164F  0020               	movlb	0	; select bank0
 15790  1650  00E9               	movwf	setDelayOff_GO@sw
 15791                           
 15792                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15793  1651  0869               	movf	setDelayOff_GO@sw,w
 15794  1652  319C  24BE  3196   	fcall	_DelayOffPointSelect
 15795                           
 15796                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15797  1655  0020               	movlb	0	; select bank0
 15798  1656  0866               	movf	setDelayOff_GO@command,w
 15799  1657  3A01               	xorlw	1
 15800  1658  3000               	movlw	0
 15801  1659  1903               	skipnz
 15802  165A  3001               	movlw	1
 15803  165B  00E8               	movwf	??_setDelayOff_GO
 15804  165C  0875               	movf	_DelayOff,w
 15805  165D  0086               	movwf	6
 15806  165E  3001               	movlw	1	; select bank2/3
 15807  165F  0087               	movwf	7
 15808  1660  0DE8               	rlf	??_setDelayOff_GO,f
 15809  1661  0801               	movf	1,w
 15810  1662  0668               	xorwf	??_setDelayOff_GO,w
 15811  1663  39FD               	andlw	-3
 15812  1664  0668               	xorwf	??_setDelayOff_GO,w
 15813  1665  0081               	movwf	1
 15814                           
 15815                           ;DelayOff_B1.c: 89: if (command == 1) {
 15816  1666  0866               	movf	setDelayOff_GO@command,w
 15817  1667  3A01               	xorlw	1
 15818  1668  1D03               	skipz
 15819  1669  2E8D               	goto	l8348
 15820                           
 15821                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15822  166A  0867               	movf	setDelayOff_GO@value,w
 15823  166B  3191  217E  3196   	fcall	_DelayTimejudge
 15824  166E  0020               	movlb	0	; select bank0
 15825  166F  00E8               	movwf	??_setDelayOff_GO
 15826  1670  0A75               	incf	_DelayOff,w
 15827  1671  0086               	movwf	6
 15828  1672  3001               	movlw	1	; select bank2/3
 15829  1673  0087               	movwf	7
 15830  1674  0868               	movf	??_setDelayOff_GO,w
 15831  1675  0081               	movwf	1
 15832                           
 15833                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15834  1676  300F               	movlw	15
 15835  1677  0567               	andwf	setDelayOff_GO@value,w
 15836  1678  00E8               	movwf	??_setDelayOff_GO
 15837  1679  0868               	movf	??_setDelayOff_GO,w
 15838  167A  3A05               	xorlw	5
 15839  167B  1903               	skipnz
 15840  167C  2E81               	goto	l8342
 15841  167D  0867               	movf	setDelayOff_GO@value,w
 15842  167E  390F               	andlw	15
 15843  167F  1D03               	btfss	3,2
 15844  1680  2E87               	goto	l8346
 15845  1681                     l8342:	
 15846  1681  3026               	movlw	38
 15847  1682  0267               	subwf	setDelayOff_GO@value,w
 15848  1683  1803               	skipnc
 15849  1684  2E87               	goto	l8346
 15850                           
 15851                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15852  1685  0867               	movf	setDelayOff_GO@value,w
 15853  1686  2E89               	goto	L6
 15854  1687                     l8346:	
 15855                           ;DelayOff_B1.c: 93: } else {
 15856                           
 15857                           
 15858                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15859  1687  3005               	movlw	5
 15860  1688  0020               	movlb	0	; select bank0
 15861  1689                     L6:	
 15862  1689  00E8               	movwf	??_setDelayOff_GO
 15863  168A  0868               	movf	??_setDelayOff_GO,w
 15864  168B  00E2               	movwf	setProductData@value
 15865  168C  2E8F               	goto	L5
 15866  168D                     l8348:	
 15867                           ;DelayOff_B1.c: 95: }
 15868                           ;DelayOff_B1.c: 96: } else {
 15869                           
 15870                           
 15871                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15872  168D  0020               	movlb	0	; select bank0
 15873  168E  01E2               	clrf	setProductData@value
 15874  168F                     L5:	
 15875  168F  0869               	movf	setDelayOff_GO@sw,w
 15876  1690  3E1A               	addlw	26
 15877  1691  319D  2554         	fcall	_setProductData
 15878                           
 15879                           ;DelayOff_B1.c: 98: }
 15880                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15881  1693  0875               	movf	_DelayOff,w
 15882  1694  3E02               	addlw	2
 15883  1695  0086               	movwf	6
 15884  1696  3001               	movlw	1	; select bank2/3
 15885  1697  0087               	movwf	7
 15886  1698  3000               	movlw	0
 15887  1699  3FC0               	movwi [0]fsr1
 15888  169A  3FC1               	movwi [1]fsr1
 15889                           
 15890                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15891  169B  0875               	movf	_DelayOff,w
 15892  169C  3E04               	addlw	4
 15893  169D  0086               	movwf	6
 15894  169E  3001               	movlw	1	; select bank2/3
 15895  169F  0087               	movwf	7
 15896  16A0  0181               	clrf	1
 15897  16A1  0008               	return
 15898  16A2                     __end_of_setDelayOff_GO:	
 15899                           
 15900                           	psect	text101
 15901  1D54                     __ptext101:	
 15902 ;; *************** function _setProductData *****************
 15903 ;; Defined at:
 15904 ;;		line 605 in file "../src/Main_B1.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;  address         1    wreg     unsigned char 
 15907 ;;  value           1   66[BANK0 ] unsigned char 
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;  address         1   69[BANK0 ] unsigned char 
 15910 ;; Return value:  Size  Location     Type
 15911 ;;		None               void
 15912 ;; Registers used:
 15913 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15914 ;; Tracked objects:
 15915 ;;		On entry : 0/0
 15916 ;;		On exit  : 0/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15919 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;Total ram usage:        4 bytes
 15924 ;; Hardware stack levels used:    1
 15925 ;; Hardware stack levels required when called:    5
 15926 ;; This function calls:
 15927 ;;		Nothing
 15928 ;; This function is called by:
 15929 ;;		_setDelayOff_GO
 15930 ;;		_setDimmerLights
 15931 ;;		_setDimmerLights_Adj
 15932 ;;		_setTemp_Main
 15933 ;;		_setLog_Code
 15934 ;;		_setControl_Lights_Table
 15935 ;;		_setRFSW_AdjControl
 15936 ;;		_setRF_DimmerValue
 15937 ;;		_setRF_DimmerLights
 15938 ;; This function uses a non-reentrant model
 15939 ;;
 15940                           
 15941                           
 15942                           ;psect for function _setProductData
 15943  1D54                     _setProductData:	
 15944                           
 15945                           ;incstack = 0
 15946                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15947                           ;setProductData@address stored from wreg
 15948  1D54  0020               	movlb	0	; select bank0
 15949  1D55  00E5               	movwf	setProductData@address
 15950                           
 15951                           ;Main_B1.c: 606: product->Data[address] = value;
 15952  1D56  0862               	movf	setProductData@value,w
 15953  1D57  00E3               	movwf	??_setProductData
 15954  1D58  0865               	movf	setProductData@address,w
 15955  1D59  0779               	addwf	_product,w
 15956  1D5A  00E4               	movwf	??_setProductData+1
 15957  1D5B  0864               	movf	??_setProductData+1,w
 15958  1D5C  0086               	movwf	6
 15959  1D5D  3002               	movlw	2	; select bank4/5
 15960  1D5E  0087               	movwf	7
 15961  1D5F  0863               	movf	??_setProductData,w
 15962  1D60  0081               	movwf	1
 15963  1D61  0008               	return
 15964  1D62                     __end_of_setProductData:	
 15965                           
 15966                           	psect	text102
 15967  117E                     __ptext102:	
 15968 ;; *************** function _DelayTimejudge *****************
 15969 ;; Defined at:
 15970 ;;		line 112 in file "../src/DelayOff_B1.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;  value           1    wreg     unsigned char 
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;  value           1    9[BANK0 ] unsigned char 
 15975 ;;  k               1    8[BANK0 ] unsigned char 
 15976 ;;  j               1    7[BANK0 ] unsigned char 
 15977 ;;  i               1    6[BANK0 ] unsigned char 
 15978 ;; Return value:  Size  Location     Type
 15979 ;;                  1    wreg      unsigned char 
 15980 ;; Registers used:
 15981 ;;		wreg, status,2, status,0, pclath, cstack
 15982 ;; Tracked objects:
 15983 ;;		On entry : 0/0
 15984 ;;		On exit  : 0/0
 15985 ;;		Unchanged: 0/0
 15986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15990 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15991 ;;Total ram usage:        6 bytes
 15992 ;; Hardware stack levels used:    1
 15993 ;; Hardware stack levels required when called:    6
 15994 ;; This function calls:
 15995 ;;		___bmul
 15996 ;; This function is called by:
 15997 ;;		_setDelayOff_GO
 15998 ;; This function uses a non-reentrant model
 15999 ;;
 16000                           
 16001                           
 16002                           ;psect for function _DelayTimejudge
 16003  117E                     _DelayTimejudge:	
 16004                           
 16005                           ;incstack = 0
 16006                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16007                           ;DelayTimejudge@value stored from wreg
 16008  117E  0020               	movlb	0	; select bank0
 16009  117F  00A9               	movwf	DelayTimejudge@value
 16010                           
 16011                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16012  1180  3005               	movlw	5
 16013  1181  00A4               	movwf	??_DelayTimejudge
 16014  1182  0824               	movf	??_DelayTimejudge,w
 16015  1183  00A6               	movwf	DelayTimejudge@i
 16016  1184  01A7               	clrf	DelayTimejudge@j
 16017  1185  01A8               	clrf	DelayTimejudge@k
 16018                           
 16019                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16020  1186  3031               	movlw	49
 16021  1187  0229               	subwf	DelayTimejudge@value,w
 16022  1188  1803               	skipnc
 16023  1189  29A6               	goto	l8240
 16024                           
 16025                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16026  118A  0829               	movf	DelayTimejudge@value,w
 16027  118B  390F               	andlw	15
 16028  118C  00A4               	movwf	??_DelayTimejudge
 16029  118D  0824               	movf	??_DelayTimejudge,w
 16030  118E  00A7               	movwf	DelayTimejudge@j
 16031                           
 16032                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16033  118F  0829               	movf	DelayTimejudge@value,w
 16034  1190  00A4               	movwf	??_DelayTimejudge
 16035  1191  3004               	movlw	4
 16036  1192                     u8755:	
 16037  1192  36A4               	lsrf	??_DelayTimejudge,f
 16038  1193  0B89               	decfsz	9,f
 16039  1194  2992               	goto	u8755
 16040  1195  0824               	movf	??_DelayTimejudge,w
 16041  1196  390F               	andlw	15
 16042  1197  00A5               	movwf	??_DelayTimejudge+1
 16043  1198  0825               	movf	??_DelayTimejudge+1,w
 16044  1199  00A8               	movwf	DelayTimejudge@k
 16045                           
 16046                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16047  119A  300A               	movlw	10
 16048  119B  00A4               	movwf	??_DelayTimejudge
 16049  119C  0824               	movf	??_DelayTimejudge,w
 16050  119D  00A0               	movwf	___bmul@multiplicand
 16051  119E  0828               	movf	DelayTimejudge@k,w
 16052  119F  319D  25F2         	fcall	___bmul
 16053  11A1  0020               	movlb	0	; select bank0
 16054  11A2  0727               	addwf	DelayTimejudge@j,w
 16055  11A3  00A5               	movwf	??_DelayTimejudge+1
 16056  11A4  0825               	movf	??_DelayTimejudge+1,w
 16057  11A5  00A6               	movwf	DelayTimejudge@i
 16058  11A6                     l8240:	
 16059                           
 16060                           ;DelayOff_B1.c: 118: }
 16061                           ;DelayOff_B1.c: 139: return i;
 16062  11A6  0826               	movf	DelayTimejudge@i,w
 16063  11A7  0008               	return
 16064  11A8                     __end_of_DelayTimejudge:	
 16065                           
 16066                           	psect	text103
 16067  1DF2                     __ptext103:	
 16068 ;; *************** function ___bmul *****************
 16069 ;; Defined at:
 16070 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;  multiplier      1    wreg     unsigned char 
 16073 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16076 ;;  product         1    2[BANK0 ] unsigned char 
 16077 ;; Return value:  Size  Location     Type
 16078 ;;                  1    wreg      unsigned char 
 16079 ;; Registers used:
 16080 ;;		wreg, status,2, status,0
 16081 ;; Tracked objects:
 16082 ;;		On entry : 0/0
 16083 ;;		On exit  : 0/0
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16086 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;Total ram usage:        4 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:    5
 16093 ;; This function calls:
 16094 ;;		Nothing
 16095 ;; This function is called by:
 16096 ;;		_DelayTimejudge
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           
 16101                           ;psect for function ___bmul
 16102  1DF2                     ___bmul:	
 16103                           
 16104                           ;incstack = 0
 16105                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16106                           ;___bmul@multiplier stored from wreg
 16107  1DF2  0020               	movlb	0	; select bank0
 16108  1DF3  00A3               	movwf	___bmul@multiplier
 16109  1DF4  01A2               	clrf	___bmul@product
 16110  1DF5                     l7982:	
 16111  1DF5  1C23               	btfss	___bmul@multiplier,0
 16112  1DF6  2DFB               	goto	l7986
 16113  1DF7  0820               	movf	___bmul@multiplicand,w
 16114  1DF8  00A1               	movwf	??___bmul
 16115  1DF9  0821               	movf	??___bmul,w
 16116  1DFA  07A2               	addwf	___bmul@product,f
 16117  1DFB                     l7986:	
 16118  1DFB  1003               	clrc
 16119  1DFC  0DA0               	rlf	___bmul@multiplicand,f
 16120  1DFD  1003               	clrc
 16121  1DFE  0CA3               	rrf	___bmul@multiplier,f
 16122  1DFF  08A3               	movf	___bmul@multiplier,f
 16123  1E00  1D03               	skipz
 16124  1E01  2DF5               	goto	l7982
 16125  1E02  0822               	movf	___bmul@product,w
 16126  1E03  0008               	return
 16127  1E04                     __end_of___bmul:	
 16128                           
 16129                           	psect	text104
 16130  1D8E                     __ptext104:	
 16131 ;; *************** function _getDelayOff_GO *****************
 16132 ;; Defined at:
 16133 ;;		line 105 in file "../src/DelayOff_B1.c"
 16134 ;; Parameters:    Size  Location     Type
 16135 ;;  sw              1    wreg     unsigned char 
 16136 ;; Auto vars:     Size  Location     Type
 16137 ;;  sw              1    2[BANK0 ] unsigned char 
 16138 ;;  go              1    3[BANK0 ] unsigned char 
 16139 ;; Return value:  Size  Location     Type
 16140 ;;                  1    wreg      unsigned char 
 16141 ;; Registers used:
 16142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;Total ram usage:        2 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    6
 16155 ;; This function calls:
 16156 ;;		_DelayOffPointSelect
 16157 ;; This function is called by:
 16158 ;;		_setDimmerLights_SwOff
 16159 ;;		_setRFSW_Control
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           
 16164                           ;psect for function _getDelayOff_GO
 16165  1D8E                     _getDelayOff_GO:	
 16166                           
 16167                           ;incstack = 0
 16168                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16169                           ;getDelayOff_GO@sw stored from wreg
 16170  1D8E  0020               	movlb	0	; select bank0
 16171  1D8F  00A2               	movwf	getDelayOff_GO@sw
 16172                           
 16173                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16174  1D90  0822               	movf	getDelayOff_GO@sw,w
 16175  1D91  319C  24BE         	fcall	_DelayOffPointSelect
 16176                           
 16177                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16178  1D93  0875               	movf	_DelayOff,w
 16179  1D94  0086               	movwf	6
 16180  1D95  3001               	movlw	1	; select bank2/3
 16181  1D96  0087               	movwf	7
 16182  1D97  3000               	movlw	0
 16183  1D98  1881               	btfsc	1,1
 16184  1D99  3001               	movlw	1
 16185  1D9A  0020               	movlb	0	; select bank0
 16186  1D9B  00A3               	movwf	getDelayOff_GO@go
 16187                           
 16188                           ;DelayOff_B1.c: 108: return go;
 16189  1D9C  0823               	movf	getDelayOff_GO@go,w
 16190  1D9D  0008               	return
 16191  1D9E                     __end_of_getDelayOff_GO:	
 16192                           
 16193                           	psect	text105
 16194  1DAE                     __ptext105:	
 16195 ;; *************** function _getDimmerLights_Status *****************
 16196 ;; Defined at:
 16197 ;;		line 765 in file "../src/Dimmer_B1.c"
 16198 ;; Parameters:    Size  Location     Type
 16199 ;;  lights          1    wreg     unsigned char 
 16200 ;; Auto vars:     Size  Location     Type
 16201 ;;  lights          1    2[BANK0 ] unsigned char 
 16202 ;;  status          1    3[BANK0 ] unsigned char 
 16203 ;; Return value:  Size  Location     Type
 16204 ;;                  1    wreg      unsigned char 
 16205 ;; Registers used:
 16206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16207 ;; Tracked objects:
 16208 ;;		On entry : 0/0
 16209 ;;		On exit  : 0/0
 16210 ;;		Unchanged: 0/0
 16211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;Total ram usage:        2 bytes
 16217 ;; Hardware stack levels used:    1
 16218 ;; Hardware stack levels required when called:    6
 16219 ;; This function calls:
 16220 ;;		_DimmerLightsPointSelect
 16221 ;; This function is called by:
 16222 ;;		_setDimmerLights_ErrorClose
 16223 ;;		_Exception_Main
 16224 ;;		_setRFSW_Control
 16225 ;;		_setRFSW_AdjControl
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function _getDimmerLights_Status
 16231  1DAE                     _getDimmerLights_Status:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16235                           ;getDimmerLights_Status@lights stored from wreg
 16236  1DAE  0020               	movlb	0	; select bank0
 16237  1DAF  00A2               	movwf	getDimmerLights_Status@lights
 16238                           
 16239                           ;Dimmer_B1.c: 766: DimmerLightsPointSelect(lights);
 16240  1DB0  0822               	movf	getDimmerLights_Status@lights,w
 16241  1DB1  319C  24C9         	fcall	_DimmerLightsPointSelect
 16242                           
 16243                           ;Dimmer_B1.c: 767: char status = DimmerLights->Status == 1 ? 1 : 0;
 16244  1DB3  0020               	movlb	0	; select bank0
 16245  1DB4  086F               	movf	_DimmerLights,w
 16246  1DB5  3E02               	addlw	2
 16247  1DB6  0086               	movwf	6
 16248  1DB7  3001               	movlw	1	; select bank2/3
 16249  1DB8  0087               	movwf	7
 16250  1DB9  3000               	movlw	0
 16251  1DBA  1881               	btfsc	1,1
 16252  1DBB  3001               	movlw	1
 16253  1DBC  00A3               	movwf	getDimmerLights_Status@status
 16254                           
 16255                           ;Dimmer_B1.c: 768: return status;
 16256  1DBD  0823               	movf	getDimmerLights_Status@status,w
 16257  1DBE  0008               	return
 16258  1DBF                     __end_of_getDimmerLights_Status:	
 16259                           
 16260                           	psect	text106
 16261  1CC9                     __ptext106:	
 16262 ;; *************** function _DimmerLightsPointSelect *****************
 16263 ;; Defined at:
 16264 ;;		line 321 in file "../src/Dimmer_B1.c"
 16265 ;; Parameters:    Size  Location     Type
 16266 ;;  lights          1    wreg     unsigned char 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  lights          1    1[BANK0 ] unsigned char 
 16269 ;; Return value:  Size  Location     Type
 16270 ;;		None               void
 16271 ;; Registers used:
 16272 ;;		wreg
 16273 ;; Tracked objects:
 16274 ;;		On entry : 0/0
 16275 ;;		On exit  : 0/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;Total ram usage:        2 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:    5
 16285 ;; This function calls:
 16286 ;;		Nothing
 16287 ;; This function is called by:
 16288 ;;		_setDimmerLights_Initialization
 16289 ;;		_setDimmerLights_SwOn
 16290 ;;		_setDimmerLights_SwOff
 16291 ;;		_setDimmerLights_AdjOn
 16292 ;;		_setDimmerLights_Main
 16293 ;;		_getDimmerLights_Status
 16294 ;;		_getAll_DimmerLights_AdjSw
 16295 ;;		_setDimmerLights_ErrorClose
 16296 ;;		_setDimmerLights_AdjRF
 16297 ;;		_setDimmerLights_Status
 16298 ;;		_setDimmerLights_GO
 16299 ;;		_setDimmerLights_MaxmumValue
 16300 ;;		_setDimmerLights_Trigger
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           
 16305                           ;psect for function _DimmerLightsPointSelect
 16306  1CC9                     _DimmerLightsPointSelect:	
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16310                           ;DimmerLightsPointSelect@lights stored from wreg
 16311  1CC9  0020               	movlb	0	; select bank0
 16312  1CCA  00A1               	movwf	DimmerLightsPointSelect@lights
 16313                           
 16314                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16315  1CCB  0821               	movf	DimmerLightsPointSelect@lights,w
 16316  1CCC  3A01               	xorlw	1
 16317  1CCD  1D03               	skipz
 16318  1CCE  0008               	return
 16319                           
 16320                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16321  1CCF  3053               	movlw	_DimmerLights1& (0+255)
 16322  1CD0  00A0               	movwf	??_DimmerLightsPointSelect
 16323  1CD1  0820               	movf	??_DimmerLightsPointSelect,w
 16324  1CD2  00EF               	movwf	_DimmerLights
 16325  1CD3  0008               	return
 16326  1CD4                     __end_of_DimmerLightsPointSelect:	
 16327                           
 16328                           	psect	text107
 16329  174E                     __ptext107:	
 16330 ;; *************** function _setBuz *****************
 16331 ;; Defined at:
 16332 ;;		line 22 in file "../src/Buzzer_B1.c"
 16333 ;; Parameters:    Size  Location     Type
 16334 ;;  count           1    wreg     unsigned char 
 16335 ;;  time            2    9[BANK0 ] int 
 16336 ;; Auto vars:     Size  Location     Type
 16337 ;;  count           1   12[BANK0 ] unsigned char 
 16338 ;; Return value:  Size  Location     Type
 16339 ;;		None               void
 16340 ;; Registers used:
 16341 ;;		wreg, status,2, status,0, pclath, cstack
 16342 ;; Tracked objects:
 16343 ;;		On entry : 0/0
 16344 ;;		On exit  : 0/0
 16345 ;;		Unchanged: 0/0
 16346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16347 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;Total ram usage:        4 bytes
 16352 ;; Hardware stack levels used:    1
 16353 ;; Hardware stack levels required when called:    6
 16354 ;; This function calls:
 16355 ;;		___awdiv
 16356 ;; This function is called by:
 16357 ;;		_DlyOff_Main
 16358 ;;		_setDimmerLights_SwOn
 16359 ;;		_setDimmerLights_Adj
 16360 ;;		_my_MainTimer
 16361 ;;		_Exception_Main
 16362 ;;		_setTemp_Main
 16363 ;;		_setLog_Code
 16364 ;;		_setControl_Lights_Table
 16365 ;;		_setRFSW_Control
 16366 ;;		_setSw_Main
 16367 ;; This function uses a non-reentrant model
 16368 ;;
 16369                           
 16370                           
 16371                           ;psect for function _setBuz
 16372  174E                     _setBuz:	
 16373                           
 16374                           ;incstack = 0
 16375                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16376                           ;setBuz@count stored from wreg
 16377  174E  0020               	movlb	0	; select bank0
 16378  174F  00AC               	movwf	setBuz@count
 16379                           
 16380                           ;Buzzer_B1.c: 23: time /= 10;
 16381  1750  300A               	movlw	10
 16382  1751  00A0               	movwf	___awdiv@divisor
 16383  1752  3000               	movlw	0
 16384  1753  00A1               	movwf	___awdiv@divisor+1
 16385  1754  082A               	movf	setBuz@time+1,w
 16386  1755  01A3               	clrf	___awdiv@dividend+1
 16387  1756  07A3               	addwf	___awdiv@dividend+1,f
 16388  1757  0829               	movf	setBuz@time,w
 16389  1758  01A2               	clrf	___awdiv@dividend
 16390  1759  07A2               	addwf	___awdiv@dividend,f
 16391  175A  3196  26A2  3197   	fcall	___awdiv
 16392  175D  0020               	movlb	0	; select bank0
 16393  175E  0821               	movf	?___awdiv+1,w
 16394  175F  01AA               	clrf	setBuz@time+1
 16395  1760  07AA               	addwf	setBuz@time+1,f
 16396  1761  0820               	movf	?___awdiv,w
 16397  1762  01A9               	clrf	setBuz@time
 16398  1763  07A9               	addwf	setBuz@time,f
 16399                           
 16400                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16401  1764  0021               	movlb	1	; select bank1
 16402  1765  1C2E               	btfss	_Buz1^(0+128),0
 16403  1766  0008               	return
 16404                           
 16405                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16406  1767  18AE               	btfsc	_Buz1^(0+128),1
 16407  1768  2F7F               	goto	l84
 16408                           
 16409                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16410  1769  14AE               	bsf	_Buz1^(0+128),1
 16411                           
 16412                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16413  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16414  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16415                           
 16416                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16417  176C  0020               	movlb	0	; select bank0
 16418  176D  082C               	movf	setBuz@count,w
 16419  176E  00AB               	movwf	??_setBuz
 16420  176F  082B               	movf	??_setBuz,w
 16421  1770  0021               	movlb	1	; select bank1
 16422  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16423                           
 16424                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16425  1772  0020               	movlb	0	; select bank0
 16426  1773  082A               	movf	setBuz@time+1,w
 16427  1774  0021               	movlb	1	; select bank1
 16428  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16429  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16430  1777  0020               	movlb	0	; select bank0
 16431  1778  0829               	movf	setBuz@time,w
 16432  1779  0021               	movlb	1	; select bank1
 16433  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16434  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16435                           
 16436                           ;Buzzer_B1.c: 30: RB3 = 1;
 16437  177C  0020               	movlb	0	; select bank0
 16438  177D  158D               	bsf	13,3	;volatile
 16439                           
 16440                           ;Buzzer_B1.c: 31: } else {
 16441  177E  0008               	return
 16442  177F                     l84:	
 16443                           
 16444                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16445  177F  19AE               	btfsc	_Buz1^(0+128),3
 16446  1780  2F93               	goto	l86
 16447                           
 16448                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16449  1781  15AE               	bsf	_Buz1^(0+128),3
 16450                           
 16451                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16452  1782  0020               	movlb	0	; select bank0
 16453  1783  082C               	movf	setBuz@count,w
 16454  1784  00AB               	movwf	??_setBuz
 16455  1785  082B               	movf	??_setBuz,w
 16456  1786  0021               	movlb	1	; select bank1
 16457  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16458                           
 16459                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16460  1788  0020               	movlb	0	; select bank0
 16461  1789  082A               	movf	setBuz@time+1,w
 16462  178A  0021               	movlb	1	; select bank1
 16463  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16464  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16465  178D  0020               	movlb	0	; select bank0
 16466  178E  0829               	movf	setBuz@time,w
 16467  178F  0021               	movlb	1	; select bank1
 16468  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16469  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16470                           
 16471                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16472  1792  0008               	return
 16473  1793                     l86:	
 16474  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16475  1794  0008               	return
 16476                           
 16477                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16478  1795  162E               	bsf	_Buz1^(0+128),4
 16479                           
 16480                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16481  1796  0020               	movlb	0	; select bank0
 16482  1797  082C               	movf	setBuz@count,w
 16483  1798  00AB               	movwf	??_setBuz
 16484  1799  082B               	movf	??_setBuz,w
 16485  179A  0021               	movlb	1	; select bank1
 16486  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16487                           
 16488                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16489  179C  0020               	movlb	0	; select bank0
 16490  179D  082A               	movf	setBuz@time+1,w
 16491  179E  0021               	movlb	1	; select bank1
 16492  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16493  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16494  17A1  0020               	movlb	0	; select bank0
 16495  17A2  0829               	movf	setBuz@time,w
 16496  17A3  0021               	movlb	1	; select bank1
 16497  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16498  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16499  17A6  0008               	return
 16500  17A7                     __end_of_setBuz:	
 16501                           
 16502                           	psect	text108
 16503  16A2                     __ptext108:	
 16504 ;; *************** function ___awdiv *****************
 16505 ;; Defined at:
 16506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;  divisor         2    0[BANK0 ] int 
 16509 ;;  dividend        2    2[BANK0 ] int 
 16510 ;; Auto vars:     Size  Location     Type
 16511 ;;  quotient        2    7[BANK0 ] int 
 16512 ;;  sign            1    6[BANK0 ] unsigned char 
 16513 ;;  counter         1    5[BANK0 ] unsigned char 
 16514 ;; Return value:  Size  Location     Type
 16515 ;;                  2    0[BANK0 ] int 
 16516 ;; Registers used:
 16517 ;;		wreg, status,2, status,0
 16518 ;; Tracked objects:
 16519 ;;		On entry : 0/0
 16520 ;;		On exit  : 0/0
 16521 ;;		Unchanged: 0/0
 16522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;Total ram usage:        9 bytes
 16528 ;; Hardware stack levels used:    1
 16529 ;; Hardware stack levels required when called:    5
 16530 ;; This function calls:
 16531 ;;		Nothing
 16532 ;; This function is called by:
 16533 ;;		_setBuz
 16534 ;; This function uses a non-reentrant model
 16535 ;;
 16536                           
 16537                           
 16538                           ;psect for function ___awdiv
 16539  16A2                     ___awdiv:	
 16540                           
 16541                           ;incstack = 0
 16542                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16543  16A2  0020               	movlb	0	; select bank0
 16544  16A3  01A6               	clrf	___awdiv@sign
 16545  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 16546  16A5  2EAD               	goto	l8266
 16547  16A6  09A0               	comf	___awdiv@divisor,f
 16548  16A7  09A1               	comf	___awdiv@divisor+1,f
 16549  16A8  0AA0               	incf	___awdiv@divisor,f
 16550  16A9  1903               	skipnz
 16551  16AA  0AA1               	incf	___awdiv@divisor+1,f
 16552  16AB  01A6               	clrf	___awdiv@sign
 16553  16AC  0AA6               	incf	___awdiv@sign,f
 16554  16AD                     l8266:	
 16555  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 16556  16AE  2EB8               	goto	l8272
 16557  16AF  09A2               	comf	___awdiv@dividend,f
 16558  16B0  09A3               	comf	___awdiv@dividend+1,f
 16559  16B1  0AA2               	incf	___awdiv@dividend,f
 16560  16B2  1903               	skipnz
 16561  16B3  0AA3               	incf	___awdiv@dividend+1,f
 16562  16B4  3001               	movlw	1
 16563  16B5  00A4               	movwf	??___awdiv
 16564  16B6  0824               	movf	??___awdiv,w
 16565  16B7  06A6               	xorwf	___awdiv@sign,f
 16566  16B8                     l8272:	
 16567  16B8  01A7               	clrf	___awdiv@quotient
 16568  16B9  01A8               	clrf	___awdiv@quotient+1
 16569  16BA  0821               	movf	___awdiv@divisor+1,w
 16570  16BB  0420               	iorwf	___awdiv@divisor,w
 16571  16BC  1903               	skipnz
 16572  16BD  2EE7               	goto	l8294
 16573  16BE  01A5               	clrf	___awdiv@counter
 16574  16BF  0AA5               	incf	___awdiv@counter,f
 16575  16C0                     l8282:	
 16576  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 16577  16C1  2ECC               	goto	l8284
 16578  16C2  3001               	movlw	1
 16579  16C3                     u8805:	
 16580  16C3  35A0               	lslf	___awdiv@divisor,f
 16581  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 16582  16C5  0B89               	decfsz	9,f
 16583  16C6  2EC3               	goto	u8805
 16584  16C7  3001               	movlw	1
 16585  16C8  00A4               	movwf	??___awdiv
 16586  16C9  0824               	movf	??___awdiv,w
 16587  16CA  07A5               	addwf	___awdiv@counter,f
 16588  16CB  2EC0               	goto	l8282
 16589  16CC                     l8284:	
 16590  16CC  3001               	movlw	1
 16591  16CD                     u8825:	
 16592  16CD  35A7               	lslf	___awdiv@quotient,f
 16593  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 16594  16CF  0B89               	decfsz	9,f
 16595  16D0  2ECD               	goto	u8825
 16596  16D1  0821               	movf	___awdiv@divisor+1,w
 16597  16D2  0223               	subwf	___awdiv@dividend+1,w
 16598  16D3  1D03               	skipz
 16599  16D4  2ED7               	goto	u8835
 16600  16D5  0820               	movf	___awdiv@divisor,w
 16601  16D6  0222               	subwf	___awdiv@dividend,w
 16602  16D7                     u8835:	
 16603  16D7  1C03               	skipc
 16604  16D8  2EDE               	goto	l8290
 16605  16D9  0820               	movf	___awdiv@divisor,w
 16606  16DA  02A2               	subwf	___awdiv@dividend,f
 16607  16DB  0821               	movf	___awdiv@divisor+1,w
 16608  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 16609  16DD  1427               	bsf	___awdiv@quotient,0
 16610  16DE                     l8290:	
 16611  16DE  3001               	movlw	1
 16612  16DF                     u8845:	
 16613  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 16614  16E0  0CA0               	rrf	___awdiv@divisor,f
 16615  16E1  0B89               	decfsz	9,f
 16616  16E2  2EDF               	goto	u8845
 16617  16E3  3001               	movlw	1
 16618  16E4  02A5               	subwf	___awdiv@counter,f
 16619  16E5  1D03               	btfss	3,2
 16620  16E6  2ECC               	goto	l8284
 16621  16E7                     l8294:	
 16622  16E7  0826               	movf	___awdiv@sign,w
 16623  16E8  1903               	btfsc	3,2
 16624  16E9  2EEF               	goto	l8298
 16625  16EA  09A7               	comf	___awdiv@quotient,f
 16626  16EB  09A8               	comf	___awdiv@quotient+1,f
 16627  16EC  0AA7               	incf	___awdiv@quotient,f
 16628  16ED  1903               	skipnz
 16629  16EE  0AA8               	incf	___awdiv@quotient+1,f
 16630  16EF                     l8298:	
 16631  16EF  0828               	movf	___awdiv@quotient+1,w
 16632  16F0  01A1               	clrf	?___awdiv+1
 16633  16F1  07A1               	addwf	?___awdiv+1,f
 16634  16F2  0827               	movf	___awdiv@quotient,w
 16635  16F3  01A0               	clrf	?___awdiv
 16636  16F4  07A0               	addwf	?___awdiv,f
 16637  16F5  0008               	return
 16638  16F6                     __end_of___awdiv:	
 16639                           
 16640                           	psect	text109
 16641  1C2D                     __ptext109:	
 16642 ;; *************** function _DelayOff_Initialization *****************
 16643 ;; Defined at:
 16644 ;;		line 26 in file "../src/DelayOff_B1.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;		None
 16647 ;; Auto vars:     Size  Location     Type
 16648 ;;		None
 16649 ;; Return value:  Size  Location     Type
 16650 ;;		None               void
 16651 ;; Registers used:
 16652 ;;		wreg, status,2, status,0, pclath, cstack
 16653 ;; Tracked objects:
 16654 ;;		On entry : 0/0
 16655 ;;		On exit  : 0/0
 16656 ;;		Unchanged: 0/0
 16657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;Total ram usage:        0 bytes
 16663 ;; Hardware stack levels used:    1
 16664 ;; Hardware stack levels required when called:    7
 16665 ;; This function calls:
 16666 ;;		_DlyOff_Initialization
 16667 ;; This function is called by:
 16668 ;;		_main
 16669 ;; This function uses a non-reentrant model
 16670 ;;
 16671                           
 16672                           
 16673                           ;psect for function _DelayOff_Initialization
 16674  1C2D                     _DelayOff_Initialization:	
 16675                           
 16676                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16677                           
 16678                           ;incstack = 0
 16679                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16680  1C2D  3001               	movlw	1
 16681  1C2E  319C  2442         	fcall	_DlyOff_Initialization
 16682  1C30  0008               	return
 16683  1C31                     __end_of_DelayOff_Initialization:	
 16684                           
 16685                           	psect	text110
 16686  1C42                     __ptext110:	
 16687 ;; *************** function _DlyOff_Initialization *****************
 16688 ;; Defined at:
 16689 ;;		line 56 in file "../src/DelayOff_B1.c"
 16690 ;; Parameters:    Size  Location     Type
 16691 ;;  sw              1    wreg     unsigned char 
 16692 ;; Auto vars:     Size  Location     Type
 16693 ;;  sw              1    2[BANK0 ] unsigned char 
 16694 ;; Return value:  Size  Location     Type
 16695 ;;		None               void
 16696 ;; Registers used:
 16697 ;;		wreg, status,2, status,0, pclath, cstack
 16698 ;; Tracked objects:
 16699 ;;		On entry : 0/0
 16700 ;;		On exit  : 0/0
 16701 ;;		Unchanged: 0/0
 16702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;Total ram usage:        1 bytes
 16708 ;; Hardware stack levels used:    1
 16709 ;; Hardware stack levels required when called:    6
 16710 ;; This function calls:
 16711 ;;		_DelayOffPointSelect
 16712 ;; This function is called by:
 16713 ;;		_DelayOff_Initialization
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           
 16718                           ;psect for function _DlyOff_Initialization
 16719  1C42                     _DlyOff_Initialization:	
 16720                           
 16721                           ;incstack = 0
 16722                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16723                           ;DlyOff_Initialization@sw stored from wreg
 16724  1C42  0020               	movlb	0	; select bank0
 16725  1C43  00A2               	movwf	DlyOff_Initialization@sw
 16726                           
 16727                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16728  1C44  0822               	movf	DlyOff_Initialization@sw,w
 16729  1C45  319C  24BE         	fcall	_DelayOffPointSelect
 16730  1C47  0008               	return
 16731  1C48                     __end_of_DlyOff_Initialization:	
 16732                           
 16733                           	psect	text111
 16734  1CBE                     __ptext111:	
 16735 ;; *************** function _DelayOffPointSelect *****************
 16736 ;; Defined at:
 16737 ;;		line 7 in file "../src/DelayOff_B1.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  sw              1    wreg     unsigned char 
 16740 ;; Auto vars:     Size  Location     Type
 16741 ;;  sw              1    1[BANK0 ] unsigned char 
 16742 ;; Return value:  Size  Location     Type
 16743 ;;		None               void
 16744 ;; Registers used:
 16745 ;;		wreg
 16746 ;; Tracked objects:
 16747 ;;		On entry : 0/0
 16748 ;;		On exit  : 0/0
 16749 ;;		Unchanged: 0/0
 16750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;Total ram usage:        2 bytes
 16756 ;; Hardware stack levels used:    1
 16757 ;; Hardware stack levels required when called:    5
 16758 ;; This function calls:
 16759 ;;		Nothing
 16760 ;; This function is called by:
 16761 ;;		_DlyOff_Initialization
 16762 ;;		_DlyOff_Main
 16763 ;;		_setDelayOff_GO
 16764 ;;		_getDelayOff_GO
 16765 ;; This function uses a non-reentrant model
 16766 ;;
 16767                           
 16768                           
 16769                           ;psect for function _DelayOffPointSelect
 16770  1CBE                     _DelayOffPointSelect:	
 16771                           
 16772                           ;incstack = 0
 16773                           ; Regs used in _DelayOffPointSelect: [wreg]
 16774                           ;DelayOffPointSelect@sw stored from wreg
 16775  1CBE  0020               	movlb	0	; select bank0
 16776  1CBF  00A1               	movwf	DelayOffPointSelect@sw
 16777                           
 16778                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16779  1CC0  0821               	movf	DelayOffPointSelect@sw,w
 16780  1CC1  3A01               	xorlw	1
 16781  1CC2  1D03               	skipz
 16782  1CC3  0008               	return
 16783                           
 16784                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16785  1CC4  3064               	movlw	_DlySw1& (0+255)
 16786  1CC5  00A0               	movwf	??_DelayOffPointSelect
 16787  1CC6  0820               	movf	??_DelayOffPointSelect,w
 16788  1CC7  00F5               	movwf	_DelayOff
 16789  1CC8  0008               	return
 16790  1CC9                     __end_of_DelayOffPointSelect:	
 16791                           
 16792                           	psect	text112
 16793  1E9C                     __ptext112:	
 16794 ;; *************** function _CC2500_PowerOnInitial *****************
 16795 ;; Defined at:
 16796 ;;		line 119 in file "../src/CC2500_B1.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;		None
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;		None
 16801 ;; Return value:  Size  Location     Type
 16802 ;;		None               void
 16803 ;; Registers used:
 16804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;Total ram usage:        0 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    8
 16817 ;; This function calls:
 16818 ;;		_CC2500_ClearRXFIFO
 16819 ;;		_CC2500_ClearTXFIFO
 16820 ;;		_CC2500_FrequencyCabr
 16821 ;;		_CC2500_InitPATable
 16822 ;;		_CC2500_InitSetREG
 16823 ;;		_CC2500_PowerRST
 16824 ;;		_CC2500_SIDLEMode
 16825 ;; This function is called by:
 16826 ;;		_main
 16827 ;; This function uses a non-reentrant model
 16828 ;;
 16829                           
 16830                           
 16831                           ;psect for function _CC2500_PowerOnInitial
 16832  1E9C                     _CC2500_PowerOnInitial:	
 16833                           
 16834                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16835                           
 16836                           ;incstack = 0
 16837                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16838  1E9C  3187  27B8  319E   	fcall	_CC2500_PowerRST
 16839                           
 16840                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16841  1E9F  3191  2154  319E   	fcall	_CC2500_InitSetREG
 16842                           
 16843                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16844  1EA2  319F  27A1  319E   	fcall	_CC2500_InitPATable
 16845                           
 16846                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16847  1EA5  319C  2425  319E   	fcall	_CC2500_ClearTXFIFO
 16848                           
 16849                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16850  1EA8  319C  2421  319E   	fcall	_CC2500_ClearRXFIFO
 16851                           
 16852                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16853  1EAB  319D  2500  319E   	fcall	_CC2500_FrequencyCabr
 16854                           
 16855                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16856  1EAE  319C  2429         	fcall	_CC2500_SIDLEMode
 16857  1EB0  0008               	return
 16858  1EB1                     __end_of_CC2500_PowerOnInitial:	
 16859                           
 16860                           	psect	text113
 16861  1C29                     __ptext113:	
 16862 ;; *************** function _CC2500_SIDLEMode *****************
 16863 ;; Defined at:
 16864 ;;		line 209 in file "../src/CC2500_B1.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;		None
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;		None
 16869 ;; Return value:  Size  Location     Type
 16870 ;;		None               void
 16871 ;; Registers used:
 16872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16873 ;; Tracked objects:
 16874 ;;		On entry : 0/0
 16875 ;;		On exit  : 0/0
 16876 ;;		Unchanged: 0/0
 16877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;Total ram usage:        0 bytes
 16883 ;; Hardware stack levels used:    1
 16884 ;; Hardware stack levels required when called:    7
 16885 ;; This function calls:
 16886 ;;		_CC2500_WriteCommand
 16887 ;; This function is called by:
 16888 ;;		_CC2500_PowerOnInitial
 16889 ;; This function uses a non-reentrant model
 16890 ;;
 16891                           
 16892                           
 16893                           ;psect for function _CC2500_SIDLEMode
 16894  1C29                     _CC2500_SIDLEMode:	
 16895                           
 16896                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16897                           
 16898                           ;incstack = 0
 16899                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16900  1C29  3036               	movlw	54
 16901  1C2A  319E  26E0         	fcall	_CC2500_WriteCommand
 16902  1C2C  0008               	return
 16903  1C2D                     __end_of_CC2500_SIDLEMode:	
 16904                           
 16905                           	psect	text114
 16906  07B8                     __ptext114:	
 16907 ;; *************** function _CC2500_PowerRST *****************
 16908 ;; Defined at:
 16909 ;;		line 132 in file "../src/CC2500_B1.c"
 16910 ;; Parameters:    Size  Location     Type
 16911 ;;		None
 16912 ;; Auto vars:     Size  Location     Type
 16913 ;;		None
 16914 ;; Return value:  Size  Location     Type
 16915 ;;		None               void
 16916 ;; Registers used:
 16917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16918 ;; Tracked objects:
 16919 ;;		On entry : 0/0
 16920 ;;		On exit  : 0/0
 16921 ;;		Unchanged: 0/0
 16922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16927 ;;Total ram usage:        1 bytes
 16928 ;; Hardware stack levels used:    1
 16929 ;; Hardware stack levels required when called:    6
 16930 ;; This function calls:
 16931 ;;		_CC2500_WriteByte
 16932 ;;		_DelayTime_1us
 16933 ;;		_Timeout_Counter
 16934 ;;		_set_TimeoutCleared
 16935 ;; This function is called by:
 16936 ;;		_CC2500_PowerOnInitial
 16937 ;; This function uses a non-reentrant model
 16938 ;;
 16939                           
 16940                           
 16941                           ;psect for function _CC2500_PowerRST
 16942  07B8                     _CC2500_PowerRST:	
 16943                           
 16944                           ;CC2500_B1.c: 133: RC3 = 0;
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16948  07B8  0020               	movlb	0	; select bank0
 16949  07B9  118E               	bcf	14,3	;volatile
 16950                           
 16951                           ;CC2500_B1.c: 134: RC4 = 0;
 16952  07BA  120E               	bcf	14,4	;volatile
 16953                           
 16954                           ;CC2500_B1.c: 135: RC0 = 1;
 16955  07BB  140E               	bsf	14,0	;volatile
 16956                           
 16957                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16958  07BC  300A               	movlw	10
 16959  07BD  00A0               	movwf	DelayTime_1us@count
 16960  07BE  3000               	movlw	0
 16961  07BF  00A1               	movwf	DelayTime_1us@count+1
 16962  07C0  3191  212E  3187   	fcall	_DelayTime_1us
 16963                           
 16964                           ;CC2500_B1.c: 137: RC0 = 0;
 16965  07C3  0020               	movlb	0	; select bank0
 16966  07C4  100E               	bcf	14,0	;volatile
 16967                           
 16968                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16969  07C5  300A               	movlw	10
 16970  07C6  00A0               	movwf	DelayTime_1us@count
 16971  07C7  3000               	movlw	0
 16972  07C8  00A1               	movwf	DelayTime_1us@count+1
 16973  07C9  3191  212E  3187   	fcall	_DelayTime_1us
 16974                           
 16975                           ;CC2500_B1.c: 139: RC0 = 1;
 16976  07CC  0020               	movlb	0	; select bank0
 16977  07CD  140E               	bsf	14,0	;volatile
 16978                           
 16979                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16980  07CE  3028               	movlw	40
 16981  07CF  00A0               	movwf	DelayTime_1us@count
 16982  07D0  3000               	movlw	0
 16983  07D1  00A1               	movwf	DelayTime_1us@count+1
 16984  07D2  3191  212E  3187   	fcall	_DelayTime_1us
 16985                           
 16986                           ;CC2500_B1.c: 141: RC0 = 0;
 16987  07D5  0020               	movlb	0	; select bank0
 16988  07D6  100E               	bcf	14,0	;volatile
 16989                           
 16990                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16991  07D7  3030               	movlw	48
 16992  07D8  00A6               	movwf	??_CC2500_PowerRST
 16993  07D9  0826               	movf	??_CC2500_PowerRST,w
 16994  07DA  0021               	movlb	1	; select bank1
 16995  07DB  00D1               	movwf	_SPI0Buffer^(0+128)
 16996                           
 16997                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16998  07DC  2FE0               	goto	l9144
 16999  07DD                     l9142:	
 17000                           
 17001                           ;CC2500_B1.c: 144: Timeout_Counter();
 17002  07DD  319E  2687  3187   	fcall	_Timeout_Counter
 17003  07E0                     l9144:	
 17004  07E0  0020               	movlb	0	; select bank0
 17005  07E1  1E8E               	btfss	14,5	;volatile
 17006  07E2  2FE6               	goto	l9148
 17007  07E3  0021               	movlb	1	; select bank1
 17008  07E4  1D2B               	btfss	(_myMain^(0+128)+11),2
 17009  07E5  2FDD               	goto	l9142
 17010  07E6                     l9148:	
 17011                           
 17012                           ;CC2500_B1.c: 145: };
 17013                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17014  07E6  319C  243D  3187   	fcall	_set_TimeoutCleared
 17015                           
 17016                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17017  07E9  319E  26C7  3187   	fcall	_CC2500_WriteByte
 17018                           
 17019                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17020  07EC  2FF0               	goto	l9154
 17021  07ED                     l9152:	
 17022                           
 17023                           ;CC2500_B1.c: 149: Timeout_Counter();
 17024  07ED  319E  2687  3187   	fcall	_Timeout_Counter
 17025  07F0                     l9154:	
 17026  07F0  0020               	movlb	0	; select bank0
 17027  07F1  1E8E               	btfss	14,5	;volatile
 17028  07F2  2FF6               	goto	l9158
 17029  07F3  0021               	movlb	1	; select bank1
 17030  07F4  1D2B               	btfss	(_myMain^(0+128)+11),2
 17031  07F5  2FED               	goto	l9152
 17032  07F6                     l9158:	
 17033                           
 17034                           ;CC2500_B1.c: 150: };
 17035                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17036  07F6  319C  243D         	fcall	_set_TimeoutCleared
 17037                           
 17038                           ;CC2500_B1.c: 152: RC4 = 0;
 17039  07F8  0020               	movlb	0	; select bank0
 17040  07F9  120E               	bcf	14,4	;volatile
 17041                           
 17042                           ;CC2500_B1.c: 153: RC0 = 1;
 17043  07FA  140E               	bsf	14,0	;volatile
 17044  07FB  0008               	return
 17045  07FC                     __end_of_CC2500_PowerRST:	
 17046                           
 17047                           	psect	text115
 17048  1154                     __ptext115:	
 17049 ;; *************** function _CC2500_InitSetREG *****************
 17050 ;; Defined at:
 17051 ;;		line 159 in file "../src/CC2500_B1.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;		None
 17054 ;; Auto vars:     Size  Location     Type
 17055 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17056 ;;  temp2           1    7[BANK0 ] unsigned char 
 17057 ;;  temp1           1    6[BANK0 ] unsigned char 
 17058 ;; Return value:  Size  Location     Type
 17059 ;;		None               void
 17060 ;; Registers used:
 17061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;Total ram usage:        4 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    7
 17074 ;; This function calls:
 17075 ;;		_CC2500_WriteREG
 17076 ;; This function is called by:
 17077 ;;		_CC2500_PowerOnInitial
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           
 17082                           ;psect for function _CC2500_InitSetREG
 17083  1154                     _CC2500_InitSetREG:	
 17084                           
 17085                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17086                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17087                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17088                           
 17089                           ;incstack = 0
 17090                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17091  1154  0020               	movlb	0	; select bank0
 17092  1155  01A8               	clrf	CC2500_InitSetREG@loop_c
 17093  1156                     L7:	
 17094  1156  302F               	movlw	47
 17095  1157  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17096  1158  1803               	btfsc	3,0
 17097  1159  0008               	return
 17098                           
 17099                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17100  115A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17101  115B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17102  115C  0084               	movwf	4
 17103  115D  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17104  115E  1803               	skipnc
 17105  115F  3E01               	addlw	1
 17106  1160  0085               	movwf	5
 17107  1161  0800               	movf	0,w	;code access
 17108  1162  00A5               	movwf	??_CC2500_InitSetREG
 17109  1163  0825               	movf	??_CC2500_InitSetREG,w
 17110  1164  00A6               	movwf	CC2500_InitSetREG@temp1
 17111                           
 17112                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17113  1165  0828               	movf	CC2500_InitSetREG@loop_c,w
 17114  1166  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17115  1167  0084               	movwf	4
 17116  1168  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17117  1169  1803               	skipnc
 17118  116A  3E01               	addlw	1
 17119  116B  0085               	movwf	5
 17120  116C  0800               	movf	0,w	;code access
 17121  116D  00A5               	movwf	??_CC2500_InitSetREG
 17122  116E  0825               	movf	??_CC2500_InitSetREG,w
 17123  116F  00A7               	movwf	CC2500_InitSetREG@temp2
 17124                           
 17125                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17126  1170  0827               	movf	CC2500_InitSetREG@temp2,w
 17127  1171  00A5               	movwf	??_CC2500_InitSetREG
 17128  1172  0825               	movf	??_CC2500_InitSetREG,w
 17129  1173  00A2               	movwf	CC2500_WriteREG@value
 17130  1174  0826               	movf	CC2500_InitSetREG@temp1,w
 17131  1175  3190  209D  3191   	fcall	_CC2500_WriteREG
 17132  1178  3001               	movlw	1
 17133  1179  0020               	movlb	0	; select bank0
 17134  117A  00A5               	movwf	??_CC2500_InitSetREG
 17135  117B  0825               	movf	??_CC2500_InitSetREG,w
 17136  117C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17137  117D  2956               	goto	L7
 17138  117E                     __end_of_CC2500_InitSetREG:	
 17139                           
 17140                           	psect	text116
 17141  1FA1                     __ptext116:	
 17142 ;; *************** function _CC2500_InitPATable *****************
 17143 ;; Defined at:
 17144 ;;		line 174 in file "../src/CC2500_B1.c"
 17145 ;; Parameters:    Size  Location     Type
 17146 ;;		None
 17147 ;; Auto vars:     Size  Location     Type
 17148 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17149 ;;  temp            1    6[BANK0 ] unsigned char 
 17150 ;; Return value:  Size  Location     Type
 17151 ;;		None               void
 17152 ;; Registers used:
 17153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17154 ;; Tracked objects:
 17155 ;;		On entry : 0/0
 17156 ;;		On exit  : 0/0
 17157 ;;		Unchanged: 0/0
 17158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;Total ram usage:        3 bytes
 17164 ;; Hardware stack levels used:    1
 17165 ;; Hardware stack levels required when called:    7
 17166 ;; This function calls:
 17167 ;;		_CC2500_WriteREG
 17168 ;; This function is called by:
 17169 ;;		_CC2500_PowerOnInitial
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           
 17174                           ;psect for function _CC2500_InitPATable
 17175  1FA1                     _CC2500_InitPATable:	
 17176                           
 17177                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17178                           ;CC2500_B1.c: 176: unsigned char temp;
 17179                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17180                           
 17181                           ;incstack = 0
 17182                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17183  1FA1  0020               	movlb	0	; select bank0
 17184  1FA2  01A7               	clrf	CC2500_InitPATable@loop_d
 17185  1FA3                     L8:	
 17186  1FA3  3008               	movlw	8
 17187  1FA4  0227               	subwf	CC2500_InitPATable@loop_d,w
 17188  1FA5  1803               	btfsc	3,0
 17189  1FA6  0008               	return
 17190                           
 17191                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17192  1FA7  0827               	movf	CC2500_InitPATable@loop_d,w
 17193  1FA8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17194  1FA9  0084               	movwf	4
 17195  1FAA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17196  1FAB  1803               	skipnc
 17197  1FAC  3E01               	addlw	1
 17198  1FAD  0085               	movwf	5
 17199  1FAE  0800               	movf	0,w	;code access
 17200  1FAF  00A5               	movwf	??_CC2500_InitPATable
 17201  1FB0  0825               	movf	??_CC2500_InitPATable,w
 17202  1FB1  00A6               	movwf	CC2500_InitPATable@temp
 17203                           
 17204                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17205  1FB2  0826               	movf	CC2500_InitPATable@temp,w
 17206  1FB3  00A5               	movwf	??_CC2500_InitPATable
 17207  1FB4  0825               	movf	??_CC2500_InitPATable,w
 17208  1FB5  00A2               	movwf	CC2500_WriteREG@value
 17209  1FB6  303E               	movlw	62
 17210  1FB7  3190  209D  319F   	fcall	_CC2500_WriteREG
 17211  1FBA  3001               	movlw	1
 17212  1FBB  0020               	movlb	0	; select bank0
 17213  1FBC  00A5               	movwf	??_CC2500_InitPATable
 17214  1FBD  0825               	movf	??_CC2500_InitPATable,w
 17215  1FBE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17216  1FBF  2FA3               	goto	L8
 17217  1FC0                     __end_of_CC2500_InitPATable:	
 17218                           
 17219                           	psect	text117
 17220  109D                     __ptext117:	
 17221 ;; *************** function _CC2500_WriteREG *****************
 17222 ;; Defined at:
 17223 ;;		line 251 in file "../src/CC2500_B1.c"
 17224 ;; Parameters:    Size  Location     Type
 17225 ;;  w_addr          1    wreg     unsigned char 
 17226 ;;  value           1    2[BANK0 ] unsigned char 
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;		None               void
 17231 ;; Registers used:
 17232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:        3 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    6
 17245 ;; This function calls:
 17246 ;;		_CC2500_WriteByte
 17247 ;;		_Timeout_Counter
 17248 ;;		_set_TimeoutCleared
 17249 ;; This function is called by:
 17250 ;;		_CC2500_InitSetREG
 17251 ;;		_CC2500_InitPATable
 17252 ;; This function uses a non-reentrant model
 17253 ;;
 17254                           
 17255                           
 17256                           ;psect for function _CC2500_WriteREG
 17257  109D                     _CC2500_WriteREG:	
 17258                           
 17259                           ;incstack = 0
 17260                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17261                           ;CC2500_WriteREG@w_addr stored from wreg
 17262  109D  0020               	movlb	0	; select bank0
 17263  109E  00A4               	movwf	CC2500_WriteREG@w_addr
 17264                           
 17265                           ;CC2500_B1.c: 252: RC0 = 0;
 17266  109F  100E               	bcf	14,0	;volatile
 17267                           
 17268                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17269  10A0  0824               	movf	CC2500_WriteREG@w_addr,w
 17270  10A1  00A3               	movwf	??_CC2500_WriteREG
 17271  10A2  0823               	movf	??_CC2500_WriteREG,w
 17272  10A3  0021               	movlb	1	; select bank1
 17273  10A4  00D1               	movwf	_SPI0Buffer^(0+128)
 17274                           
 17275                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17276  10A5  28A9               	goto	l8864
 17277  10A6                     l8862:	
 17278                           
 17279                           ;CC2500_B1.c: 255: Timeout_Counter();
 17280  10A6  319E  2687  3190   	fcall	_Timeout_Counter
 17281  10A9                     l8864:	
 17282  10A9  0020               	movlb	0	; select bank0
 17283  10AA  1E8E               	btfss	14,5	;volatile
 17284  10AB  28AF               	goto	l8868
 17285  10AC  0021               	movlb	1	; select bank1
 17286  10AD  1D2B               	btfss	(_myMain^(0+128)+11),2
 17287  10AE  28A6               	goto	l8862
 17288  10AF                     l8868:	
 17289                           
 17290                           ;CC2500_B1.c: 256: };
 17291                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17292  10AF  319C  243D  3190   	fcall	_set_TimeoutCleared
 17293                           
 17294                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17295  10B2  319E  26C7  3190   	fcall	_CC2500_WriteByte
 17296                           
 17297                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17298  10B5  0020               	movlb	0	; select bank0
 17299  10B6  0822               	movf	CC2500_WriteREG@value,w
 17300  10B7  00A3               	movwf	??_CC2500_WriteREG
 17301  10B8  0823               	movf	??_CC2500_WriteREG,w
 17302  10B9  0021               	movlb	1	; select bank1
 17303  10BA  00D1               	movwf	_SPI0Buffer^(0+128)
 17304                           
 17305                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17306  10BB  319E  26C7         	fcall	_CC2500_WriteByte
 17307                           
 17308                           ;CC2500_B1.c: 262: RC0 = 1;
 17309  10BD  0020               	movlb	0	; select bank0
 17310  10BE  140E               	bsf	14,0	;volatile
 17311  10BF  0008               	return
 17312  10C0                     __end_of_CC2500_WriteREG:	
 17313                           
 17314                           	psect	text118
 17315  1D00                     __ptext118:	
 17316 ;; *************** function _CC2500_FrequencyCabr *****************
 17317 ;; Defined at:
 17318 ;;		line 201 in file "../src/CC2500_B1.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;		None               void
 17325 ;; Registers used:
 17326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;Total ram usage:        0 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; Hardware stack levels required when called:    7
 17339 ;; This function calls:
 17340 ;;		_CC2500_WriteCommand
 17341 ;;		_DelayTime_1us
 17342 ;; This function is called by:
 17343 ;;		_CC2500_PowerOnInitial
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           
 17348                           ;psect for function _CC2500_FrequencyCabr
 17349  1D00                     _CC2500_FrequencyCabr:	
 17350                           
 17351                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17352                           
 17353                           ;incstack = 0
 17354                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17355  1D00  3033               	movlw	51
 17356  1D01  319E  26E0  319D   	fcall	_CC2500_WriteCommand
 17357                           
 17358                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17359  1D04  30E8               	movlw	232
 17360  1D05  0020               	movlb	0	; select bank0
 17361  1D06  00A0               	movwf	DelayTime_1us@count
 17362  1D07  3003               	movlw	3
 17363  1D08  00A1               	movwf	DelayTime_1us@count+1
 17364  1D09  3191  212E         	fcall	_DelayTime_1us
 17365  1D0B  0008               	return
 17366  1D0C                     __end_of_CC2500_FrequencyCabr:	
 17367                           
 17368                           	psect	text119
 17369  112E                     __ptext119:	
 17370 ;; *************** function _DelayTime_1us *****************
 17371 ;; Defined at:
 17372 ;;		line 320 in file "../src/CC2500_B1.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;  count           2    0[BANK0 ] int 
 17375 ;; Auto vars:     Size  Location     Type
 17376 ;;  j               2    4[BANK0 ] unsigned int 
 17377 ;;  i               2    2[BANK0 ] unsigned int 
 17378 ;; Return value:  Size  Location     Type
 17379 ;;		None               void
 17380 ;; Registers used:
 17381 ;;		wreg, status,2
 17382 ;; Tracked objects:
 17383 ;;		On entry : 0/0
 17384 ;;		On exit  : 0/0
 17385 ;;		Unchanged: 0/0
 17386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17388 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;Total ram usage:        6 bytes
 17392 ;; Hardware stack levels used:    1
 17393 ;; Hardware stack levels required when called:    5
 17394 ;; This function calls:
 17395 ;;		Nothing
 17396 ;; This function is called by:
 17397 ;;		_CC2500_PowerRST
 17398 ;;		_CC2500_FrequencyCabr
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           
 17403                           ;psect for function _DelayTime_1us
 17404  112E                     _DelayTime_1us:	
 17405                           
 17406                           ;CC2500_B1.c: 321: unsigned int i, j;
 17407                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17408                           
 17409                           ;incstack = 0
 17410                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17411  112E  3001               	movlw	1
 17412  112F  0020               	movlb	0	; select bank0
 17413  1130  00A2               	movwf	DelayTime_1us@i
 17414  1131  3000               	movlw	0
 17415  1132  00A3               	movwf	DelayTime_1us@i+1
 17416  1133                     l348:	
 17417  1133  0821               	movf	DelayTime_1us@count+1,w
 17418  1134  0223               	subwf	DelayTime_1us@i+1,w
 17419  1135  1D03               	skipz
 17420  1136  2939               	goto	u9595
 17421  1137  0820               	movf	DelayTime_1us@count,w
 17422  1138  0222               	subwf	DelayTime_1us@i,w
 17423  1139                     u9595:	
 17424  1139  1803               	btfsc	3,0
 17425  113A  0008               	return
 17426                           
 17427                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17428  113B  01A4               	clrf	DelayTime_1us@j
 17429  113C  01A5               	clrf	DelayTime_1us@j+1
 17430  113D  3000               	movlw	0
 17431  113E  0225               	subwf	DelayTime_1us@j+1,w
 17432  113F  3002               	movlw	2
 17433  1140  1903               	skipnz
 17434  1141  0224               	subwf	DelayTime_1us@j,w
 17435  1142  1803               	btfsc	3,0
 17436  1143  294F               	goto	l8856
 17437  1144                     l8854:	
 17438  1144  3001               	movlw	1
 17439  1145  07A4               	addwf	DelayTime_1us@j,f
 17440  1146  3000               	movlw	0
 17441  1147  3DA5               	addwfc	DelayTime_1us@j+1,f
 17442  1148  3000               	movlw	0
 17443  1149  0225               	subwf	DelayTime_1us@j+1,w
 17444  114A  3002               	movlw	2
 17445  114B  1903               	skipnz
 17446  114C  0224               	subwf	DelayTime_1us@j,w
 17447  114D  1C03               	skipc
 17448  114E  2944               	goto	l8854
 17449  114F                     l8856:	
 17450  114F  3001               	movlw	1
 17451  1150  07A2               	addwf	DelayTime_1us@i,f
 17452  1151  3000               	movlw	0
 17453  1152  3DA3               	addwfc	DelayTime_1us@i+1,f
 17454  1153  2933               	goto	l348
 17455  1154                     __end_of_DelayTime_1us:	
 17456                           
 17457                           	psect	text120
 17458  1C25                     __ptext120:	
 17459 ;; *************** function _CC2500_ClearTXFIFO *****************
 17460 ;; Defined at:
 17461 ;;		line 187 in file "../src/CC2500_B1.c"
 17462 ;; Parameters:    Size  Location     Type
 17463 ;;		None
 17464 ;; Auto vars:     Size  Location     Type
 17465 ;;		None
 17466 ;; Return value:  Size  Location     Type
 17467 ;;		None               void
 17468 ;; Registers used:
 17469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17470 ;; Tracked objects:
 17471 ;;		On entry : 0/0
 17472 ;;		On exit  : 0/0
 17473 ;;		Unchanged: 0/0
 17474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;Total ram usage:        0 bytes
 17480 ;; Hardware stack levels used:    1
 17481 ;; Hardware stack levels required when called:    7
 17482 ;; This function calls:
 17483 ;;		_CC2500_WriteCommand
 17484 ;; This function is called by:
 17485 ;;		_CC2500_PowerOnInitial
 17486 ;; This function uses a non-reentrant model
 17487 ;;
 17488                           
 17489                           
 17490                           ;psect for function _CC2500_ClearTXFIFO
 17491  1C25                     _CC2500_ClearTXFIFO:	
 17492                           
 17493                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17494                           
 17495                           ;incstack = 0
 17496                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17497  1C25  303B               	movlw	59
 17498  1C26  319E  26E0         	fcall	_CC2500_WriteCommand
 17499  1C28  0008               	return
 17500  1C29                     __end_of_CC2500_ClearTXFIFO:	
 17501                           
 17502                           	psect	text121
 17503  1C21                     __ptext121:	
 17504 ;; *************** function _CC2500_ClearRXFIFO *****************
 17505 ;; Defined at:
 17506 ;;		line 194 in file "../src/CC2500_B1.c"
 17507 ;; Parameters:    Size  Location     Type
 17508 ;;		None
 17509 ;; Auto vars:     Size  Location     Type
 17510 ;;		None
 17511 ;; Return value:  Size  Location     Type
 17512 ;;		None               void
 17513 ;; Registers used:
 17514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17515 ;; Tracked objects:
 17516 ;;		On entry : 0/0
 17517 ;;		On exit  : 0/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;Total ram usage:        0 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; Hardware stack levels required when called:    7
 17527 ;; This function calls:
 17528 ;;		_CC2500_WriteCommand
 17529 ;; This function is called by:
 17530 ;;		_CC2500_PowerOnInitial
 17531 ;; This function uses a non-reentrant model
 17532 ;;
 17533                           
 17534                           
 17535                           ;psect for function _CC2500_ClearRXFIFO
 17536  1C21                     _CC2500_ClearRXFIFO:	
 17537                           
 17538                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17539                           
 17540                           ;incstack = 0
 17541                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17542  1C21  303A               	movlw	58
 17543  1C22  319E  26E0         	fcall	_CC2500_WriteCommand
 17544  1C24  0008               	return
 17545  1C25                     __end_of_CC2500_ClearRXFIFO:	
 17546                           
 17547                           	psect	text122
 17548  1EE0                     __ptext122:	
 17549 ;; *************** function _CC2500_WriteCommand *****************
 17550 ;; Defined at:
 17551 ;;		line 285 in file "../src/CC2500_B1.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;  command         1    wreg     unsigned char 
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;  command         1    3[BANK0 ] unsigned char 
 17556 ;; Return value:  Size  Location     Type
 17557 ;;		None               void
 17558 ;; Registers used:
 17559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;Total ram usage:        2 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    6
 17572 ;; This function calls:
 17573 ;;		_CC2500_WriteByte
 17574 ;;		_Timeout_Counter
 17575 ;;		_set_TimeoutCleared
 17576 ;; This function is called by:
 17577 ;;		_CC2500_TxData
 17578 ;;		_CC2500_ClearTXFIFO
 17579 ;;		_CC2500_ClearRXFIFO
 17580 ;;		_CC2500_FrequencyCabr
 17581 ;;		_CC2500_SIDLEMode
 17582 ;;		_setRF_Main
 17583 ;;		_RF_RxDisable
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           
 17588                           ;psect for function _CC2500_WriteCommand
 17589  1EE0                     _CC2500_WriteCommand:	
 17590                           
 17591                           ;incstack = 0
 17592                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17593                           ;CC2500_WriteCommand@command stored from wreg
 17594  1EE0  0020               	movlb	0	; select bank0
 17595  1EE1  00A3               	movwf	CC2500_WriteCommand@command
 17596                           
 17597                           ;CC2500_B1.c: 286: RC0 = 0;
 17598  1EE2  100E               	bcf	14,0	;volatile
 17599                           
 17600                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17601  1EE3  0823               	movf	CC2500_WriteCommand@command,w
 17602  1EE4  00A2               	movwf	??_CC2500_WriteCommand
 17603  1EE5  0822               	movf	??_CC2500_WriteCommand,w
 17604  1EE6  0021               	movlb	1	; select bank1
 17605  1EE7  00D1               	movwf	_SPI0Buffer^(0+128)
 17606                           
 17607                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17608  1EE8  2EEC               	goto	l8602
 17609  1EE9                     l8600:	
 17610                           
 17611                           ;CC2500_B1.c: 290: Timeout_Counter();
 17612  1EE9  319E  2687  319E   	fcall	_Timeout_Counter
 17613  1EEC                     l8602:	
 17614  1EEC  0020               	movlb	0	; select bank0
 17615  1EED  1E8E               	btfss	14,5	;volatile
 17616  1EEE  2EF2               	goto	l8606
 17617  1EEF  0021               	movlb	1	; select bank1
 17618  1EF0  1D2B               	btfss	(_myMain^(0+128)+11),2
 17619  1EF1  2EE9               	goto	l8600
 17620  1EF2                     l8606:	
 17621                           
 17622                           ;CC2500_B1.c: 291: };
 17623                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17624  1EF2  319C  243D  319E   	fcall	_set_TimeoutCleared
 17625                           
 17626                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17627  1EF5  319E  26C7         	fcall	_CC2500_WriteByte
 17628                           
 17629                           ;CC2500_B1.c: 295: RC0 = 1;
 17630  1EF7  0020               	movlb	0	; select bank0
 17631  1EF8  140E               	bsf	14,0	;volatile
 17632  1EF9  0008               	return
 17633  1EFA                     __end_of_CC2500_WriteCommand:	
 17634                           
 17635                           	psect	text123
 17636  1C3D                     __ptext123:	
 17637 ;; *************** function _set_TimeoutCleared *****************
 17638 ;; Defined at:
 17639 ;;		line 283 in file "../src/Main_B1.c"
 17640 ;; Parameters:    Size  Location     Type
 17641 ;;		None
 17642 ;; Auto vars:     Size  Location     Type
 17643 ;;		None
 17644 ;; Return value:  Size  Location     Type
 17645 ;;		None               void
 17646 ;; Registers used:
 17647 ;;		status,2
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;Total ram usage:        0 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; Hardware stack levels required when called:    5
 17660 ;; This function calls:
 17661 ;;		Nothing
 17662 ;; This function is called by:
 17663 ;;		_CC2500_TxData
 17664 ;;		_CC2500_RxData
 17665 ;;		_CC2500_PowerRST
 17666 ;;		_CC2500_WriteREG
 17667 ;;		_CC2500_WriteCommand
 17668 ;;		_CC2500_ReadStatus
 17669 ;;		_getAD
 17670 ;;		_TouchPower
 17671 ;;		_CC2500_ReadREG
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           
 17676                           ;psect for function _set_TimeoutCleared
 17677  1C3D                     _set_TimeoutCleared:	
 17678                           
 17679                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _set_TimeoutCleared: [status,2]
 17683  1C3D  0021               	movlb	1	; select bank1
 17684  1C3E  112B               	bcf	(_myMain^(0+128)+11),2
 17685                           
 17686                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17687  1C3F  01AC               	clrf	(_myMain^(0+128)+12)
 17688  1C40  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17689  1C41  0008               	return
 17690  1C42                     __end_of_set_TimeoutCleared:	
 17691                           
 17692                           	psect	text124
 17693  1E87                     __ptext124:	
 17694 ;; *************** function _Timeout_Counter *****************
 17695 ;; Defined at:
 17696 ;;		line 274 in file "../src/Main_B1.c"
 17697 ;; Parameters:    Size  Location     Type
 17698 ;;		None
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;		None
 17701 ;; Return value:  Size  Location     Type
 17702 ;;		None               void
 17703 ;; Registers used:
 17704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;Total ram usage:        0 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    5
 17717 ;; This function calls:
 17718 ;;		Nothing
 17719 ;; This function is called by:
 17720 ;;		_CC2500_TxData
 17721 ;;		_CC2500_RxData
 17722 ;;		_CC2500_PowerRST
 17723 ;;		_CC2500_WriteREG
 17724 ;;		_CC2500_WriteCommand
 17725 ;;		_CC2500_ReadStatus
 17726 ;;		_getAD
 17727 ;;		_TouchPower
 17728 ;;		_CC2500_ReadREG
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           
 17733                           ;psect for function _Timeout_Counter
 17734  1E87                     _Timeout_Counter:	
 17735                           
 17736                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17737                           
 17738                           ;incstack = 0
 17739                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17740  1E87  3001               	movlw	1
 17741  1E88  0021               	movlb	1	; select bank1
 17742  1E89  07AC               	addwf	(_myMain^(0+128)+12),f
 17743  1E8A  3000               	movlw	0
 17744  1E8B  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17745                           
 17746                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
 17747  1E8C  300C               	movlw	12
 17748  1E8D  3EA0               	addlw	_myMain& (0+255)
 17749  1E8E  0086               	movwf	6
 17750  1E8F  0187               	clrf	7
 17751  1E90  3F40               	moviw [0]fsr1
 17752  1E91  3AA8               	xorlw	168
 17753  1E92  1D03               	skipz
 17754  1E93  2E96               	goto	u9065
 17755  1E94  3F41               	moviw [1]fsr1
 17756  1E95  3A61               	xorlw	97
 17757  1E96                     u9065:	
 17758  1E96  1D03               	skipz
 17759  1E97  0008               	return
 17760                           
 17761                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17762  1E98  01AC               	clrf	(_myMain^(0+128)+12)
 17763  1E99  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17764                           
 17765                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17766  1E9A  152B               	bsf	(_myMain^(0+128)+11),2
 17767  1E9B  0008               	return
 17768  1E9C                     __end_of_Timeout_Counter:	
 17769                           
 17770                           	psect	text125
 17771  1EC7                     __ptext125:	
 17772 ;; *************** function _CC2500_WriteByte *****************
 17773 ;; Defined at:
 17774 ;;		line 219 in file "../src/CC2500_B1.c"
 17775 ;; Parameters:    Size  Location     Type
 17776 ;;		None
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;		None               void
 17781 ;; Registers used:
 17782 ;;		wreg, status,2, status,0
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;Total ram usage:        2 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    5
 17795 ;; This function calls:
 17796 ;;		Nothing
 17797 ;; This function is called by:
 17798 ;;		_CC2500_TxData
 17799 ;;		_CC2500_RxData
 17800 ;;		_CC2500_PowerRST
 17801 ;;		_CC2500_WriteREG
 17802 ;;		_CC2500_WriteCommand
 17803 ;;		_CC2500_ReadStatus
 17804 ;;		_CC2500_ReadREG
 17805 ;; This function uses a non-reentrant model
 17806 ;;
 17807                           
 17808                           
 17809                           ;psect for function _CC2500_WriteByte
 17810  1EC7                     _CC2500_WriteByte:	
 17811                           
 17812                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17813                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17814                           
 17815                           ;incstack = 0
 17816                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17817  1EC7  0020               	movlb	0	; select bank0
 17818  1EC8  01A1               	clrf	CC2500_WriteByte@loop_a
 17819  1EC9                     L9:	
 17820  1EC9  3008               	movlw	8
 17821  1ECA  0221               	subwf	CC2500_WriteByte@loop_a,w
 17822  1ECB  1803               	btfsc	3,0
 17823  1ECC  0008               	return
 17824                           
 17825                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17826  1ECD  0021               	movlb	1	; select bank1
 17827  1ECE  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17828  1ECF  2ED3               	goto	l304
 17829                           
 17830                           ;CC2500_B1.c: 223: RC4 = 1;
 17831  1ED0  0020               	movlb	0	; select bank0
 17832  1ED1  160E               	bsf	14,4	;volatile
 17833  1ED2  2ED5               	goto	l305
 17834  1ED3                     l304:	
 17835                           
 17836                           ;CC2500_B1.c: 224: else
 17837                           ;CC2500_B1.c: 225: RC4 = 0;
 17838  1ED3  0020               	movlb	0	; select bank0
 17839  1ED4  120E               	bcf	14,4	;volatile
 17840  1ED5                     l305:	
 17841                           
 17842                           ;CC2500_B1.c: 226: RC3 = 1;
 17843  1ED5  158E               	bsf	14,3	;volatile
 17844                           
 17845                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17846  1ED6  1003               	clrc
 17847  1ED7  0021               	movlb	1	; select bank1
 17848  1ED8  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17849                           
 17850                           ;CC2500_B1.c: 228: RC3 = 0;
 17851  1ED9  0020               	movlb	0	; select bank0
 17852  1EDA  118E               	bcf	14,3	;volatile
 17853  1EDB  3001               	movlw	1
 17854  1EDC  00A0               	movwf	??_CC2500_WriteByte
 17855  1EDD  0820               	movf	??_CC2500_WriteByte,w
 17856  1EDE  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17857  1EDF  2EC9               	goto	L9
 17858  1EE0                     __end_of_CC2500_WriteByte:	
 17859                           
 17860                           	psect	text126
 17861  14C7                     __ptext126:	
 17862 ;; *************** function _Buzzer_Main *****************
 17863 ;; Defined at:
 17864 ;;		line 46 in file "../src/Buzzer_B1.c"
 17865 ;; Parameters:    Size  Location     Type
 17866 ;;		None
 17867 ;; Auto vars:     Size  Location     Type
 17868 ;;		None
 17869 ;; Return value:  Size  Location     Type
 17870 ;;		None               void
 17871 ;; Registers used:
 17872 ;;		wreg, status,2, status,0
 17873 ;; Tracked objects:
 17874 ;;		On entry : 0/0
 17875 ;;		On exit  : 0/0
 17876 ;;		Unchanged: 0/0
 17877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17882 ;;Total ram usage:        1 bytes
 17883 ;; Hardware stack levels used:    1
 17884 ;; Hardware stack levels required when called:    5
 17885 ;; This function calls:
 17886 ;;		Nothing
 17887 ;; This function is called by:
 17888 ;;		_main
 17889 ;; This function uses a non-reentrant model
 17890 ;;
 17891                           
 17892                           
 17893                           ;psect for function _Buzzer_Main
 17894  14C7                     _Buzzer_Main:	
 17895                           
 17896                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17897                           
 17898                           ;incstack = 0
 17899                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17900  14C7  0021               	movlb	1	; select bank1
 17901  14C8  1CAE               	btfss	_Buz1^(0+128),1
 17902  14C9  0008               	return
 17903                           
 17904                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17905  14CA  3001               	movlw	1
 17906  14CB  07AF               	addwf	(_Buz1^(0+128)+1),f
 17907  14CC  3000               	movlw	0
 17908  14CD  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17909                           
 17910                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17911  14CE  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17912  14CF  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17913  14D0  1D03               	skipz
 17914  14D1  2CD4               	goto	u10945
 17915  14D2  0834               	movf	(_Buz1^(0+128)+6),w
 17916  14D3  022F               	subwf	(_Buz1^(0+128)+1),w
 17917  14D4                     u10945:	
 17918  14D4  1C03               	skipc
 17919  14D5  0008               	return
 17920                           
 17921                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17922  14D6  01AF               	clrf	(_Buz1^(0+128)+1)
 17923  14D7  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17924                           
 17925                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17926  14D8  12AE               	bcf	_Buz1^(0+128),5
 17927  14D9  0020               	movlb	0	; select bank0
 17928  14DA  1D8D               	btfss	13,3	;volatile
 17929  14DB  2CDE               	goto	l9716
 17930  14DC  0021               	movlb	1	; select bank1
 17931  14DD  16AE               	bsf	_Buz1^(0+128),5
 17932  14DE                     l9716:	
 17933                           
 17934                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17935  14DE  0021               	movlb	1	; select bank1
 17936  14DF  1AAE               	btfsc	_Buz1^(0+128),5
 17937  14E0  2D0A               	goto	l94
 17938                           
 17939                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17940  14E1  08B1               	movf	(_Buz1^(0+128)+3),f
 17941  14E2  1D03               	skipz
 17942  14E3  2D06               	goto	l95
 17943                           
 17944                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17945  14E4  1DAE               	btfss	_Buz1^(0+128),3
 17946  14E5  2CF4               	goto	l96
 17947                           
 17948                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17949  14E6  11AE               	bcf	_Buz1^(0+128),3
 17950                           
 17951                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17952  14E7  0832               	movf	(_Buz1^(0+128)+4),w
 17953  14E8  0020               	movlb	0	; select bank0
 17954  14E9  00A0               	movwf	??_Buzzer_Main
 17955  14EA  0820               	movf	??_Buzzer_Main,w
 17956  14EB  0021               	movlb	1	; select bank1
 17957  14EC  00B1               	movwf	(_Buz1^(0+128)+3)
 17958                           
 17959                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17960  14ED  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17961  14EE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17962  14EF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17963  14F0  0836               	movf	(_Buz1^(0+128)+8),w
 17964  14F1  01B4               	clrf	(_Buz1^(0+128)+6)
 17965  14F2  07B4               	addwf	(_Buz1^(0+128)+6),f
 17966                           
 17967                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17968  14F3  0008               	return
 17969  14F4                     l96:	
 17970  14F4  1E2E               	btfss	_Buz1^(0+128),4
 17971  14F5  2D04               	goto	l98
 17972                           
 17973                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17974  14F6  122E               	bcf	_Buz1^(0+128),4
 17975                           
 17976                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17977  14F7  0833               	movf	(_Buz1^(0+128)+5),w
 17978  14F8  0020               	movlb	0	; select bank0
 17979  14F9  00A0               	movwf	??_Buzzer_Main
 17980  14FA  0820               	movf	??_Buzzer_Main,w
 17981  14FB  0021               	movlb	1	; select bank1
 17982  14FC  00B1               	movwf	(_Buz1^(0+128)+3)
 17983                           
 17984                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17985  14FD  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17986  14FE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17987  14FF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17988  1500  0838               	movf	(_Buz1^(0+128)+10),w
 17989  1501  01B4               	clrf	(_Buz1^(0+128)+6)
 17990  1502  07B4               	addwf	(_Buz1^(0+128)+6),f
 17991                           
 17992                           ;Buzzer_B1.c: 62: } else {
 17993  1503  0008               	return
 17994  1504                     l98:	
 17995                           
 17996                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17997  1504  10AE               	bcf	_Buz1^(0+128),1
 17998                           
 17999                           ;Buzzer_B1.c: 64: }
 18000                           ;Buzzer_B1.c: 65: } else {
 18001  1505  0008               	return
 18002  1506                     l95:	
 18003                           
 18004                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18005  1506  16AE               	bsf	_Buz1^(0+128),5
 18006                           
 18007                           ;Buzzer_B1.c: 68: RB3 = 1;
 18008  1507  0020               	movlb	0	; select bank0
 18009  1508  158D               	bsf	13,3	;volatile
 18010                           
 18011                           ;Buzzer_B1.c: 69: }
 18012                           ;Buzzer_B1.c: 70: } else {
 18013  1509  0008               	return
 18014  150A                     l94:	
 18015                           
 18016                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18017  150A  12AE               	bcf	_Buz1^(0+128),5
 18018                           
 18019                           ;Buzzer_B1.c: 73: RB3 = 0;
 18020  150B  0020               	movlb	0	; select bank0
 18021  150C  118D               	bcf	13,3	;volatile
 18022                           
 18023                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18024  150D  3001               	movlw	1
 18025  150E  0021               	movlb	1	; select bank1
 18026  150F  02B1               	subwf	(_Buz1^(0+128)+3),f
 18027  1510  0008               	return
 18028  1511                     __end_of_Buzzer_Main:	
 18029                           
 18030                           	psect	text127
 18031  1C0B                     __ptext127:	
 18032 ;; *************** function _Buzzer_Initialization *****************
 18033 ;; Defined at:
 18034 ;;		line 11 in file "../src/Buzzer_B1.c"
 18035 ;; Parameters:    Size  Location     Type
 18036 ;;		None
 18037 ;; Auto vars:     Size  Location     Type
 18038 ;;		None
 18039 ;; Return value:  Size  Location     Type
 18040 ;;		None               void
 18041 ;; Registers used:
 18042 ;;		None
 18043 ;; Tracked objects:
 18044 ;;		On entry : 0/0
 18045 ;;		On exit  : 0/0
 18046 ;;		Unchanged: 0/0
 18047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18052 ;;Total ram usage:        0 bytes
 18053 ;; Hardware stack levels used:    1
 18054 ;; Hardware stack levels required when called:    5
 18055 ;; This function calls:
 18056 ;;		Nothing
 18057 ;; This function is called by:
 18058 ;;		_main
 18059 ;; This function uses a non-reentrant model
 18060 ;;
 18061                           
 18062                           
 18063                           ;psect for function _Buzzer_Initialization
 18064  1C0B                     _Buzzer_Initialization:	
 18065                           
 18066                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18067                           
 18068                           ;incstack = 0
 18069                           ; Regs used in _Buzzer_Initialization: []
 18070  1C0B  0021               	movlb	1	; select bank1
 18071  1C0C  142E               	bsf	_Buz1^(0+128),0
 18072  1C0D  0008               	return
 18073  1C0E                     __end_of_Buzzer_Initialization:	
 18074                           
 18075                           	psect	intentry
 18076  0004                     __pintentry:	
 18077 ;; *************** function _ISR *****************
 18078 ;; Defined at:
 18079 ;;		line 108 in file "../src/MCU_B1.c"
 18080 ;; Parameters:    Size  Location     Type
 18081 ;;		None
 18082 ;; Auto vars:     Size  Location     Type
 18083 ;;		None
 18084 ;; Return value:  Size  Location     Type
 18085 ;;		None               void
 18086 ;; Registers used:
 18087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18088 ;; Tracked objects:
 18089 ;;		On entry : 0/0
 18090 ;;		On exit  : 0/0
 18091 ;;		Unchanged: 0/0
 18092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18096 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;Total ram usage:        1 bytes
 18098 ;; Hardware stack levels used:    1
 18099 ;; Hardware stack levels required when called:    4
 18100 ;; This function calls:
 18101 ;;		_IOC_ISR
 18102 ;;		_TMR1_ISR
 18103 ;; This function is called by:
 18104 ;;		Interrupt level 1
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108  0004                     _ISR:	
 18109                           
 18110                           ;incstack = 0
 18111                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18112  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18113  0005  3180               	pagesel	$
 18114  0006  0020               	movlb	0	; select bank0
 18115  0007  087F               	movf	127,w
 18116  0008  00F4               	movwf	??_ISR
 18117                           
 18118                           ;MCU_B1.c: 110: IOC_ISR();
 18119  0009  319D  2570  3180   	fcall	_IOC_ISR
 18120                           
 18121                           ;MCU_B1.c: 112: ;;
 18122                           ;MCU_B1.c: 114: TMR1_ISR();
 18123  000C  3190  20E4         	fcall	_TMR1_ISR
 18124  000E  0874               	movf	??_ISR,w
 18125  000F  0020               	movlb	0	; select bank0
 18126  0010  00FF               	movwf	127
 18127  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18128  0012  0009               	retfie
 18129  0013                     __end_of_ISR:	
 18130                           
 18131                           	psect	text129
 18132  10E4                     __ptext129:	
 18133 ;; *************** function _TMR1_ISR *****************
 18134 ;; Defined at:
 18135 ;;		line 210 in file "../src/MCU_B1.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;		None
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;		None               void
 18142 ;; Registers used:
 18143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;Total ram usage:        0 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; Hardware stack levels required when called:    2
 18156 ;; This function calls:
 18157 ;;		_setDimmerLights_IntrControl
 18158 ;; This function is called by:
 18159 ;;		_ISR
 18160 ;; This function uses a non-reentrant model
 18161 ;;
 18162                           
 18163                           
 18164                           ;psect for function _TMR1_ISR
 18165  10E4                     _TMR1_ISR:	
 18166                           
 18167                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18168                           
 18169                           ;incstack = 0
 18170                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18171  10E4  0021               	movlb	1	; select bank1
 18172  10E5  1C11               	btfss	17,0	;volatile
 18173  10E6  0008               	return
 18174  10E7  0020               	movlb	0	; select bank0
 18175  10E8  1C11               	btfss	17,0	;volatile
 18176  10E9  0008               	return
 18177                           
 18178                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18179  10EA  30FA               	movlw	250
 18180  10EB  0097               	movwf	23	;volatile
 18181                           
 18182                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18183  10EC  3038               	movlw	56
 18184  10ED  0096               	movwf	22	;volatile
 18185                           
 18186                           ;MCU_B1.c: 215: TMR1IF = 0;
 18187  10EE  1011               	bcf	17,0	;volatile
 18188                           
 18189                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18190  10EF  3001               	movlw	1
 18191  10F0  3183  235C  3190   	fcall	_setDimmerLights_IntrControl
 18192                           
 18193                           ;MCU_B1.c: 236: Timer1.Count++;
 18194  10F3  3001               	movlw	1
 18195  10F4  0022               	movlb	2	; select bank2
 18196  10F5  07A1               	addwf	(_Timer1^(0+256)+1),f
 18197  10F6  3000               	movlw	0
 18198  10F7  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18199                           
 18200                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18201  10F8  3001               	movlw	1
 18202  10F9  3E20               	addlw	_Timer1& (0+255)
 18203  10FA  0086               	movwf	6
 18204  10FB  3001               	movlw	1	; select bank2/3
 18205  10FC  0087               	movwf	7
 18206  10FD  3F40               	moviw [0]fsr1
 18207  10FE  3A64               	xorlw	100
 18208  10FF  1D03               	skipz
 18209  1100  2903               	goto	u729_25
 18210  1101  3F41               	moviw [1]fsr1
 18211  1102  3A00               	xorlw	0
 18212  1103                     u729_25:	
 18213  1103  1D03               	skipz
 18214  1104  0008               	return
 18215                           
 18216                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18217  1105  01A1               	clrf	(_Timer1^(0+256)+1)
 18218  1106  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18219                           
 18220                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18221  1107  1420               	bsf	_Timer1^(0+256),0
 18222  1108  0008               	return
 18223  1109                     __end_of_TMR1_ISR:	
 18224                           
 18225                           	psect	text130
 18226  035C                     __ptext130:	
 18227 ;; *************** function _setDimmerLights_IntrControl *****************
 18228 ;; Defined at:
 18229 ;;		line 96 in file "../src/Dimmer_B1.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;  lights          1    wreg     unsigned char 
 18232 ;; Auto vars:     Size  Location     Type
 18233 ;;  lights          1    3[COMMON] unsigned char 
 18234 ;; Return value:  Size  Location     Type
 18235 ;;		None               void
 18236 ;; Registers used:
 18237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18238 ;; Tracked objects:
 18239 ;;		On entry : 0/0
 18240 ;;		On exit  : 0/0
 18241 ;;		Unchanged: 0/0
 18242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;Total ram usage:        2 bytes
 18248 ;; Hardware stack levels used:    1
 18249 ;; Hardware stack levels required when called:    1
 18250 ;; This function calls:
 18251 ;;		_DimmerIntrPointSelect
 18252 ;; This function is called by:
 18253 ;;		_TMR1_ISR
 18254 ;; This function uses a non-reentrant model
 18255 ;;
 18256                           
 18257                           
 18258                           ;psect for function _setDimmerLights_IntrControl
 18259  035C                     _setDimmerLights_IntrControl:	
 18260                           
 18261                           ;incstack = 0
 18262                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18263                           ;setDimmerLights_IntrControl@lights stored from wreg
 18264  035C  00F3               	movwf	setDimmerLights_IntrControl@lights
 18265                           
 18266                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18267  035D  0873               	movf	setDimmerLights_IntrControl@lights,w
 18268  035E  319C  2495  3183   	fcall	_DimmerIntrPointSelect
 18269                           
 18270                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18271  0361  0876               	movf	_DimmerLightsIntr,w
 18272  0362  3E02               	addlw	2
 18273  0363  0086               	movwf	6
 18274  0364  3001               	movlw	1	; select bank2/3
 18275  0365  0087               	movwf	7
 18276  0366  1D01               	btfss	1,2
 18277  0367  2B86               	goto	i1l6778
 18278                           
 18279                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18280  0368  3001               	movlw	1
 18281  0369  00F2               	movwf	??_setDimmerLights_IntrControl
 18282  036A  0876               	movf	_DimmerLightsIntr,w
 18283  036B  3E03               	addlw	3
 18284  036C  0086               	movwf	6
 18285  036D  3001               	movlw	1	; select bank2/3
 18286  036E  0087               	movwf	7
 18287  036F  0872               	movf	??_setDimmerLights_IntrControl,w
 18288  0370  0781               	addwf	1,f
 18289                           
 18290                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18291  0371  0876               	movf	_DimmerLightsIntr,w
 18292  0372  3E03               	addlw	3
 18293  0373  0086               	movwf	6
 18294  0374  3001               	movlw	1	; select bank2/3
 18295  0375  0087               	movwf	7
 18296  0376  3039               	movlw	57
 18297  0377  0201               	subwf	1,w
 18298  0378  1C03               	skipc
 18299  0379  2B86               	goto	i1l6778
 18300                           
 18301                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18302  037A  0876               	movf	_DimmerLightsIntr,w
 18303  037B  3E03               	addlw	3
 18304  037C  0086               	movwf	6
 18305  037D  3001               	movlw	1	; select bank2/3
 18306  037E  0087               	movwf	7
 18307  037F  0181               	clrf	1
 18308                           
 18309                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18310  0380  0876               	movf	_DimmerLightsIntr,w
 18311  0381  3E02               	addlw	2
 18312  0382  0086               	movwf	6
 18313  0383  3001               	movlw	1	; select bank2/3
 18314  0384  0087               	movwf	7
 18315  0385  1101               	bcf	1,2
 18316  0386                     i1l6778:	
 18317                           
 18318                           ;Dimmer_B1.c: 241: }
 18319                           ;Dimmer_B1.c: 242: }
 18320                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18321  0386  0A76               	incf	_DimmerLightsIntr,w
 18322  0387  0086               	movwf	6
 18323  0388  3001               	movlw	1	; select bank2/3
 18324  0389  0087               	movwf	7
 18325  038A  1C01               	btfss	1,0
 18326  038B  2BB6               	goto	i1l6790
 18327                           
 18328                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18329  038C  0876               	movf	_DimmerLightsIntr,w
 18330  038D  3E03               	addlw	3
 18331  038E  0086               	movwf	6
 18332  038F  3001               	movlw	1	; select bank2/3
 18333  0390  0087               	movwf	7
 18334  0391  0876               	movf	_DimmerLightsIntr,w
 18335  0392  3E04               	addlw	4
 18336  0393  0084               	movwf	4
 18337  0394  3001               	movlw	1	; select bank2/3
 18338  0395  0085               	movwf	5
 18339  0396  0800               	movf	0,w
 18340  0397  0201               	subwf	1,w
 18341  0398  1C03               	skipc
 18342  0399  0008               	return
 18343                           
 18344                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18345  039A  0A76               	incf	_DimmerLightsIntr,w
 18346  039B  0086               	movwf	6
 18347  039C  3001               	movlw	1	; select bank2/3
 18348  039D  0087               	movwf	7
 18349  039E  1001               	bcf	1,0
 18350                           
 18351                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18352  039F  0A76               	incf	_DimmerLightsIntr,w
 18353  03A0  0086               	movwf	6
 18354  03A1  3001               	movlw	1	; select bank2/3
 18355  03A2  0087               	movwf	7
 18356  03A3  1581               	bsf	1,3
 18357                           
 18358                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18359  03A4  0876               	movf	_DimmerLightsIntr,w
 18360  03A5  0086               	movwf	6
 18361  03A6  3001               	movlw	1	; select bank2/3
 18362  03A7  0087               	movwf	7
 18363  03A8  1C01               	btfss	1,0
 18364  03A9  0008               	return
 18365                           
 18366                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18367  03AA  0876               	movf	_DimmerLightsIntr,w
 18368  03AB  0086               	movwf	6
 18369  03AC  3001               	movlw	1	; select bank2/3
 18370  03AD  0087               	movwf	7
 18371  03AE  1001               	bcf	1,0
 18372                           
 18373                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18374  03AF  0873               	movf	setDimmerLights_IntrControl@lights,w
 18375  03B0  3A01               	xorlw	1
 18376  03B1  1D03               	skipz
 18377  03B2  0008               	return
 18378                           
 18379                           ;Dimmer_B1.c: 253: RB1 = 0;
 18380  03B3  0020               	movlb	0	; select bank0
 18381  03B4  108D               	bcf	13,1	;volatile
 18382                           
 18383                           ;Dimmer_B1.c: 255: }
 18384                           ;Dimmer_B1.c: 262: }
 18385                           ;Dimmer_B1.c: 263: }
 18386                           ;Dimmer_B1.c: 264: } else {
 18387  03B5  0008               	return
 18388  03B6                     i1l6790:	
 18389                           
 18390                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18391  03B6  0A76               	incf	_DimmerLightsIntr,w
 18392  03B7  0086               	movwf	6
 18393  03B8  3001               	movlw	1	; select bank2/3
 18394  03B9  0087               	movwf	7
 18395  03BA  1D81               	btfss	1,3
 18396  03BB  0008               	return
 18397                           
 18398                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18399  03BC  0A76               	incf	_DimmerLightsIntr,w
 18400  03BD  0086               	movwf	6
 18401  03BE  3001               	movlw	1	; select bank2/3
 18402  03BF  0087               	movwf	7
 18403  03C0  1181               	bcf	1,3
 18404                           
 18405                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18406  03C1  3001               	movlw	1
 18407  03C2  00F2               	movwf	??_setDimmerLights_IntrControl
 18408  03C3  0876               	movf	_DimmerLightsIntr,w
 18409  03C4  3E05               	addlw	5
 18410  03C5  0086               	movwf	6
 18411  03C6  3001               	movlw	1	; select bank2/3
 18412  03C7  0087               	movwf	7
 18413  03C8  0872               	movf	??_setDimmerLights_IntrControl,w
 18414  03C9  0781               	addwf	1,f
 18415                           
 18416                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18417  03CA  0876               	movf	_DimmerLightsIntr,w
 18418  03CB  3E05               	addlw	5
 18419  03CC  0086               	movwf	6
 18420  03CD  3001               	movlw	1	; select bank2/3
 18421  03CE  0087               	movwf	7
 18422  03CF  0876               	movf	_DimmerLightsIntr,w
 18423  03D0  3E08               	addlw	8
 18424  03D1  0084               	movwf	4
 18425  03D2  3001               	movlw	1	; select bank2/3
 18426  03D3  0085               	movwf	5
 18427  03D4  0800               	movf	0,w
 18428  03D5  0201               	subwf	1,w
 18429  03D6  1C03               	skipc
 18430  03D7  2C1A               	goto	i1l6816
 18431                           
 18432                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18433  03D8  0876               	movf	_DimmerLightsIntr,w
 18434  03D9  3E05               	addlw	5
 18435  03DA  0086               	movwf	6
 18436  03DB  3001               	movlw	1	; select bank2/3
 18437  03DC  0087               	movwf	7
 18438  03DD  0181               	clrf	1
 18439                           
 18440                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18441  03DE  0A76               	incf	_DimmerLightsIntr,w
 18442  03DF  0086               	movwf	6
 18443  03E0  3001               	movlw	1	; select bank2/3
 18444  03E1  0087               	movwf	7
 18445  03E2  1F01               	btfss	1,6
 18446  03E3  0008               	return
 18447                           
 18448                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18449  03E4  0A76               	incf	_DimmerLightsIntr,w
 18450  03E5  0086               	movwf	6
 18451  03E6  3001               	movlw	1	; select bank2/3
 18452  03E7  0087               	movwf	7
 18453  03E8  1B81               	btfsc	1,7
 18454  03E9  2C03               	goto	i1l6810
 18455                           
 18456                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18457  03EA  0876               	movf	_DimmerLightsIntr,w
 18458  03EB  3E04               	addlw	4
 18459  03EC  0086               	movwf	6
 18460  03ED  3001               	movlw	1	; select bank2/3
 18461  03EE  0087               	movwf	7
 18462  03EF  3038               	movlw	56
 18463  03F0  0201               	subwf	1,w
 18464  03F1  1803               	skipnc
 18465  03F2  2BFD               	goto	i1l6808
 18466                           
 18467                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18468  03F3  3001               	movlw	1
 18469  03F4  00F2               	movwf	??_setDimmerLights_IntrControl
 18470  03F5  0876               	movf	_DimmerLightsIntr,w
 18471  03F6  3E04               	addlw	4
 18472  03F7  0086               	movwf	6
 18473  03F8  3001               	movlw	1	; select bank2/3
 18474  03F9  0087               	movwf	7
 18475  03FA  0872               	movf	??_setDimmerLights_IntrControl,w
 18476  03FB  0781               	addwf	1,f
 18477                           
 18478                           ;Dimmer_B1.c: 274: } else {
 18479  03FC  0008               	return
 18480  03FD                     i1l6808:	
 18481                           
 18482                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18483  03FD  0A76               	incf	_DimmerLightsIntr,w
 18484  03FE  0086               	movwf	6
 18485  03FF  3001               	movlw	1	; select bank2/3
 18486  0400  0087               	movwf	7
 18487  0401  1781               	bsf	1,7
 18488                           
 18489                           ;Dimmer_B1.c: 276: }
 18490                           ;Dimmer_B1.c: 277: } else {
 18491  0402  0008               	return
 18492  0403                     i1l6810:	
 18493                           
 18494                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18495  0403  0876               	movf	_DimmerLightsIntr,w
 18496  0404  3E04               	addlw	4
 18497  0405  0086               	movwf	6
 18498  0406  3001               	movlw	1	; select bank2/3
 18499  0407  0087               	movwf	7
 18500  0408  300D               	movlw	13
 18501  0409  0201               	subwf	1,w
 18502  040A  1C03               	skipc
 18503  040B  2C14               	goto	i1l6814
 18504                           
 18505                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18506  040C  0876               	movf	_DimmerLightsIntr,w
 18507  040D  3E04               	addlw	4
 18508  040E  0086               	movwf	6
 18509  040F  3001               	movlw	1	; select bank2/3
 18510  0410  0087               	movwf	7
 18511  0411  3001               	movlw	1
 18512  0412  0281               	subwf	1,f
 18513                           
 18514                           ;Dimmer_B1.c: 280: } else
 18515  0413  0008               	return
 18516  0414                     i1l6814:	
 18517                           
 18518                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18519  0414  0A76               	incf	_DimmerLightsIntr,w
 18520  0415  0086               	movwf	6
 18521  0416  3001               	movlw	1	; select bank2/3
 18522  0417  0087               	movwf	7
 18523  0418  1381               	bcf	1,7
 18524                           
 18525                           ;Dimmer_B1.c: 282: }
 18526                           ;Dimmer_B1.c: 283: }
 18527                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18528  0419  0008               	return
 18529  041A                     i1l6816:	
 18530  041A  0876               	movf	_DimmerLightsIntr,w
 18531  041B  3E02               	addlw	2
 18532  041C  0086               	movwf	6
 18533  041D  3001               	movlw	1	; select bank2/3
 18534  041E  0087               	movwf	7
 18535  041F  1C01               	btfss	1,0
 18536  0420  0008               	return
 18537                           
 18538                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18539  0421  0876               	movf	_DimmerLightsIntr,w
 18540  0422  3E04               	addlw	4
 18541  0423  0086               	movwf	6
 18542  0424  3001               	movlw	1	; select bank2/3
 18543  0425  0087               	movwf	7
 18544  0426  0876               	movf	_DimmerLightsIntr,w
 18545  0427  3E06               	addlw	6
 18546  0428  0084               	movwf	4
 18547  0429  3001               	movlw	1	; select bank2/3
 18548  042A  0085               	movwf	5
 18549  042B  0800               	movf	0,w
 18550  042C  0201               	subwf	1,w
 18551  042D  1803               	skipnc
 18552  042E  2C39               	goto	i1l6822
 18553                           
 18554                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18555  042F  3001               	movlw	1
 18556  0430  00F2               	movwf	??_setDimmerLights_IntrControl
 18557  0431  0876               	movf	_DimmerLightsIntr,w
 18558  0432  3E04               	addlw	4
 18559  0433  0086               	movwf	6
 18560  0434  3001               	movlw	1	; select bank2/3
 18561  0435  0087               	movwf	7
 18562  0436  0872               	movf	??_setDimmerLights_IntrControl,w
 18563  0437  0781               	addwf	1,f
 18564                           
 18565                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18566  0438  0008               	return
 18567  0439                     i1l6822:	
 18568  0439  0876               	movf	_DimmerLightsIntr,w
 18569  043A  3E06               	addlw	6
 18570  043B  0086               	movwf	6
 18571  043C  3001               	movlw	1	; select bank2/3
 18572  043D  0087               	movwf	7
 18573  043E  0876               	movf	_DimmerLightsIntr,w
 18574  043F  3E04               	addlw	4
 18575  0440  0084               	movwf	4
 18576  0441  3001               	movlw	1	; select bank2/3
 18577  0442  0085               	movwf	5
 18578  0443  0800               	movf	0,w
 18579  0444  0201               	subwf	1,w
 18580  0445  1803               	skipnc
 18581  0446  2C4F               	goto	i1l6826
 18582                           
 18583                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18584  0447  0876               	movf	_DimmerLightsIntr,w
 18585  0448  3E04               	addlw	4
 18586  0449  0086               	movwf	6
 18587  044A  3001               	movlw	1	; select bank2/3
 18588  044B  0087               	movwf	7
 18589  044C  3001               	movlw	1
 18590  044D  0281               	subwf	1,f
 18591                           
 18592                           ;Dimmer_B1.c: 289: } else {
 18593  044E  0008               	return
 18594  044F                     i1l6826:	
 18595                           
 18596                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18597  044F  0876               	movf	_DimmerLightsIntr,w
 18598  0450  3E02               	addlw	2
 18599  0451  0086               	movwf	6
 18600  0452  3001               	movlw	1	; select bank2/3
 18601  0453  0087               	movwf	7
 18602  0454  1001               	bcf	1,0
 18603  0455  0008               	return
 18604  0456                     __end_of_setDimmerLights_IntrControl:	
 18605                           
 18606                           	psect	text131
 18607  1C95                     __ptext131:	
 18608 ;; *************** function _DimmerIntrPointSelect *****************
 18609 ;; Defined at:
 18610 ;;		line 74 in file "../src/Dimmer_B1.c"
 18611 ;; Parameters:    Size  Location     Type
 18612 ;;  lights          1    wreg     unsigned char 
 18613 ;; Auto vars:     Size  Location     Type
 18614 ;;  lights          1    1[COMMON] unsigned char 
 18615 ;; Return value:  Size  Location     Type
 18616 ;;		None               void
 18617 ;; Registers used:
 18618 ;;		wreg
 18619 ;; Tracked objects:
 18620 ;;		On entry : 0/0
 18621 ;;		On exit  : 0/0
 18622 ;;		Unchanged: 0/0
 18623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18628 ;;Total ram usage:        2 bytes
 18629 ;; Hardware stack levels used:    1
 18630 ;; This function calls:
 18631 ;;		Nothing
 18632 ;; This function is called by:
 18633 ;;		_setDimmerLights_IntrControl
 18634 ;; This function uses a non-reentrant model
 18635 ;;
 18636                           
 18637                           
 18638                           ;psect for function _DimmerIntrPointSelect
 18639  1C95                     _DimmerIntrPointSelect:	
 18640                           
 18641                           ;incstack = 0
 18642                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18643                           ;DimmerIntrPointSelect@lights stored from wreg
 18644  1C95  00F1               	movwf	DimmerIntrPointSelect@lights
 18645                           
 18646                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18647  1C96  0871               	movf	DimmerIntrPointSelect@lights,w
 18648  1C97  3A01               	xorlw	1
 18649  1C98  1D03               	skipz
 18650  1C99  0008               	return
 18651                           
 18652                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18653  1C9A  3053               	movlw	_DimmerLights1& (0+255)
 18654  1C9B  00F0               	movwf	??_DimmerIntrPointSelect
 18655  1C9C  0870               	movf	??_DimmerIntrPointSelect,w
 18656  1C9D  00F6               	movwf	_DimmerLightsIntr
 18657  1C9E  0008               	return
 18658  1C9F                     __end_of_DimmerIntrPointSelect:	
 18659                           
 18660                           	psect	text132
 18661  1D70                     __ptext132:	
 18662 ;; *************** function _IOC_ISR *****************
 18663 ;; Defined at:
 18664 ;;		line 401 in file "../src/MCU_B1.c"
 18665 ;; Parameters:    Size  Location     Type
 18666 ;;		None
 18667 ;; Auto vars:     Size  Location     Type
 18668 ;;		None
 18669 ;; Return value:  Size  Location     Type
 18670 ;;		None               void
 18671 ;; Registers used:
 18672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18673 ;; Tracked objects:
 18674 ;;		On entry : 0/0
 18675 ;;		On exit  : 0/0
 18676 ;;		Unchanged: 0/0
 18677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;Total ram usage:        0 bytes
 18683 ;; Hardware stack levels used:    1
 18684 ;; Hardware stack levels required when called:    3
 18685 ;; This function calls:
 18686 ;;		_setDimmerReClock
 18687 ;; This function is called by:
 18688 ;;		_ISR
 18689 ;; This function uses a non-reentrant model
 18690 ;;
 18691                           
 18692                           
 18693                           ;psect for function _IOC_ISR
 18694  1D70                     _IOC_ISR:	
 18695                           
 18696                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18697                           
 18698                           ;incstack = 0
 18699                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18700  1D70  1D8B               	btfss	11,3	;volatile
 18701  1D71  0008               	return
 18702  1D72  1C0B               	btfss	11,0	;volatile
 18703  1D73  0008               	return
 18704  1D74  0027               	movlb	7	; select bank7
 18705  1D75  1D16               	btfss	22,2	;volatile
 18706  1D76  0008               	return
 18707                           
 18708                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18709  1D77  1116               	bcf	22,2	;volatile
 18710                           
 18711                           ;MCU_B1.c: 404: IOCIF = 0;
 18712  1D78  100B               	bcf	11,0	;volatile
 18713                           
 18714                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18715  1D79  0021               	movlb	1	; select bank1
 18716  1D7A  1C20               	btfss	_myMain^(0+128),0
 18717  1D7B  0008               	return
 18718                           
 18719                           ;MCU_B1.c: 408: setDimmerReClock();
 18720  1D7C  319C  241D         	fcall	_setDimmerReClock
 18721  1D7E  0008               	return
 18722  1D7F                     __end_of_IOC_ISR:	
 18723                           
 18724                           	psect	text133
 18725  1C1D                     __ptext133:	
 18726 ;; *************** function _setDimmerReClock *****************
 18727 ;; Defined at:
 18728 ;;		line 244 in file "../src/MCU_B1.c"
 18729 ;; Parameters:    Size  Location     Type
 18730 ;;		None
 18731 ;; Auto vars:     Size  Location     Type
 18732 ;;		None
 18733 ;; Return value:  Size  Location     Type
 18734 ;;		None               void
 18735 ;; Registers used:
 18736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18737 ;; Tracked objects:
 18738 ;;		On entry : 0/0
 18739 ;;		On exit  : 0/0
 18740 ;;		Unchanged: 0/0
 18741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;Total ram usage:        0 bytes
 18747 ;; Hardware stack levels used:    1
 18748 ;; Hardware stack levels required when called:    2
 18749 ;; This function calls:
 18750 ;;		_setDimmerLights_IntrIOC_GO
 18751 ;; This function is called by:
 18752 ;;		_IOC_ISR
 18753 ;; This function uses a non-reentrant model
 18754 ;;
 18755                           
 18756                           
 18757                           ;psect for function _setDimmerReClock
 18758  1C1D                     _setDimmerReClock:	
 18759                           
 18760                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18761                           
 18762                           ;incstack = 0
 18763                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18764  1C1D  3001               	movlw	1
 18765  1C1E  3192  2292         	fcall	_setDimmerLights_IntrIOC_GO
 18766  1C20  0008               	return
 18767  1C21                     __end_of_setDimmerReClock:	
 18768                           
 18769                           	psect	text134
 18770  1292                     __ptext134:	
 18771 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18772 ;; Defined at:
 18773 ;;		line 28 in file "../src/Dimmer_B1.c"
 18774 ;; Parameters:    Size  Location     Type
 18775 ;;  lights          1    wreg     unsigned char 
 18776 ;; Auto vars:     Size  Location     Type
 18777 ;;  lights          1    2[COMMON] unsigned char 
 18778 ;; Return value:  Size  Location     Type
 18779 ;;		None               void
 18780 ;; Registers used:
 18781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18782 ;; Tracked objects:
 18783 ;;		On entry : 0/0
 18784 ;;		On exit  : 0/0
 18785 ;;		Unchanged: 0/0
 18786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18791 ;;Total ram usage:        1 bytes
 18792 ;; Hardware stack levels used:    1
 18793 ;; Hardware stack levels required when called:    1
 18794 ;; This function calls:
 18795 ;;		_DimmerIntrIOCPointSelect
 18796 ;; This function is called by:
 18797 ;;		_setDimmerReClock
 18798 ;; This function uses a non-reentrant model
 18799 ;;
 18800                           
 18801                           
 18802                           ;psect for function _setDimmerLights_IntrIOC_GO
 18803  1292                     _setDimmerLights_IntrIOC_GO:	
 18804                           
 18805                           ;incstack = 0
 18806                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18807                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18808  1292  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18809                           
 18810                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18811  1293  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18812  1294  319C  24B3  3192   	fcall	_DimmerIntrIOCPointSelect
 18813                           
 18814                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18815  1297  0021               	movlb	1	; select bank1
 18816  1298  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18817  1299  3E02               	addlw	2
 18818  129A  0086               	movwf	6
 18819  129B  3001               	movlw	1	; select bank2/3
 18820  129C  0087               	movwf	7
 18821  129D  1901               	btfsc	1,2
 18822  129E  0008               	return
 18823  129F  0020               	movlb	0	; select bank0
 18824  12A0  1D0D               	btfss	13,2	;volatile
 18825  12A1  0008               	return
 18826                           
 18827                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18828  12A2  0021               	movlb	1	; select bank1
 18829  12A3  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18830  12A4  3E02               	addlw	2
 18831  12A5  0086               	movwf	6
 18832  12A6  3001               	movlw	1	; select bank2/3
 18833  12A7  0087               	movwf	7
 18834  12A8  1501               	bsf	1,2
 18835                           
 18836                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18837  12A9  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18838  12AA  0086               	movwf	6
 18839  12AB  3001               	movlw	1	; select bank2/3
 18840  12AC  0087               	movwf	7
 18841  12AD  1401               	bsf	1,0
 18842                           
 18843                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18844  12AE  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18845  12AF  0086               	movwf	6
 18846  12B0  3001               	movlw	1	; select bank2/3
 18847  12B1  0087               	movwf	7
 18848  12B2  1481               	bsf	1,1
 18849                           
 18850                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18851  12B3  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18852                           
 18853                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18854  12B4  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18855  12B5  0086               	movwf	6
 18856  12B6  3001               	movlw	1	; select bank2/3
 18857  12B7  0087               	movwf	7
 18858  12B8  1D01               	btfss	1,2
 18859  12B9  0008               	return
 18860                           
 18861                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18862  12BA  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18863  12BB  0086               	movwf	6
 18864  12BC  3001               	movlw	1	; select bank2/3
 18865  12BD  0087               	movwf	7
 18866  12BE  1401               	bsf	1,0
 18867                           
 18868                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18869  12BF  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18870  12C0  3A01               	xorlw	1
 18871  12C1  1D03               	skipz
 18872  12C2  0008               	return
 18873                           
 18874                           ;Dimmer_B1.c: 56: RB1 = 1;
 18875  12C3  0020               	movlb	0	; select bank0
 18876  12C4  148D               	bsf	13,1	;volatile
 18877  12C5  0008               	return
 18878  12C6                     __end_of_setDimmerLights_IntrIOC_GO:	
 18879                           
 18880                           	psect	text135
 18881  1CB3                     __ptext135:	
 18882 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18883 ;; Defined at:
 18884 ;;		line 8 in file "../src/Dimmer_B1.c"
 18885 ;; Parameters:    Size  Location     Type
 18886 ;;  lights          1    wreg     unsigned char 
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;  lights          1    1[COMMON] unsigned char 
 18889 ;; Return value:  Size  Location     Type
 18890 ;;		None               void
 18891 ;; Registers used:
 18892 ;;		wreg
 18893 ;; Tracked objects:
 18894 ;;		On entry : 0/0
 18895 ;;		On exit  : 0/0
 18896 ;;		Unchanged: 0/0
 18897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;Total ram usage:        2 bytes
 18903 ;; Hardware stack levels used:    1
 18904 ;; This function calls:
 18905 ;;		Nothing
 18906 ;; This function is called by:
 18907 ;;		_setDimmerLights_IntrIOC_GO
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           
 18912                           ;psect for function _DimmerIntrIOCPointSelect
 18913  1CB3                     _DimmerIntrIOCPointSelect:	
 18914                           
 18915                           ;incstack = 0
 18916                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18917                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18918  1CB3  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18919                           
 18920                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18921  1CB4  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18922  1CB5  3A01               	xorlw	1
 18923  1CB6  1D03               	skipz
 18924  1CB7  0008               	return
 18925                           
 18926                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18927  1CB8  3053               	movlw	_DimmerLights1& (0+255)
 18928  1CB9  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18929  1CBA  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18930  1CBB  0021               	movlb	1	; select bank1
 18931  1CBC  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18932  1CBD  0008               	return
 18933  1CBE                     __end_of_DimmerIntrIOCPointSelect:	
 18934  007E                     btemp	set	126	;btemp
 18935  007E                     pic14e$flags	set	126
 18936  007E                     wtemp	set	126
 18937  007E                     wtemp0	set	126
 18938  0080                     wtemp1	set	128
 18939  0082                     wtemp2	set	130
 18940  0084                     wtemp3	set	132
 18941  0086                     wtemp4	set	134
 18942  0088                     wtemp5	set	136
 18943  007F                     wtemp6	set	127
 18944  007E                     ttemp	set	126
 18945  007E                     ttemp0	set	126
 18946  0081                     ttemp1	set	129
 18947  0084                     ttemp2	set	132
 18948  0087                     ttemp3	set	135
 18949  007F                     ttemp4	set	127
 18950  007E                     ltemp	set	126
 18951  007E                     ltemp0	set	126
 18952  0082                     ltemp1	set	130
 18953  0086                     ltemp2	set	134
 18954  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127245
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7631
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7631
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      62
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45365
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45365
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35347
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35038
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 22 10:29:20 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 177F  
                                      l94 150A                                        l86 1793  
                                      l95 1506                                        l96 14F4  
                                      l98 1504                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10C0                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CD4  
                  __end_of_setDelayOff_GO 16A2                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0B35  
                    _setDimmerLights_Line 1D62                              ___ftadd@sign 004B  
                                     l231 0A43                                       l304 1ED3  
                                     l305 1ED5                      _setDimmerLights_SwOn 13D6  
                                     l348 1133                                       l730 1F44  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1EE0                     _Buzzer_Initialization 1C0B  
                         __end_of_ADC_Set 1C5B                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 15FD  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 10C0  
                   _setDimmerLights_AdjOn 11D3                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D7F                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l1212 1229  
                                    l1221 1557                                      l2102 12F6  
                                    l2041 0D04                                      l2051 0CE0  
                                    l2116 09A5                                      l2053 0CF5  
                                    l2045 0CCA                                      l1424 1275  
                                    l2080 1E3F                                      l2128 1475  
                                    l1425 1290                  ?_DimmerLightsPointSelect 0070  
                                    l1429 128C                                      l1198 132A  
                                    l2416 0353                                      l1570 0073  
                                    l2418 0230                                      l1459 0703  
                                    l1571 006E                                      l1723 0FFC  
                         __end_of_IOC_Set 1D48                                      l1398 1449  
                                    l1567 01E7                                      l1728 0FF6  
                                    l1577 01C3                                      l1569 0077  
                                    l1578 01C1                                      l2396 106D  
                                    l2591 1F8C                                      l2752 09D9  
                                    l2781 04F5                                      l2758 09F0  
                                    l8004 1086                                      l8020 0485  
                                    l8016 047E                                      l8050 04D4  
                                    l8026 0494                                      l8114 0F2E  
                                    l8106 0F15                                      l8044 04C1  
                                    l8220 0E07                                      l8212 0DED  
                                    l8204 0DD2                                      l9100 0C81  
                   _setDimmerLights_SwOff 155F                                      l8062 0507  
                                    l8046 04CB                                      l8038 04AE  
                                    l8214 0DF6                                      l8206 0DE0  
                                    l8150 0774                                      l8134 0731  
                                    l8240 11A6                                      l8056 04E7  
                                    l8048 04D0                                      l8216 0DF9  
                                    l8128 071B                                      l8066 0519  
                                    l8058 04F1                                      l9042 1DDB  
                                    l8162 0790                                      l8146 076C  
                                    l8076 0534                                      l8092 0ED4  
                                    l9124 1DEC                                      l9142 07DD  
                                    l8342 1681                                      l8086 0EBE  
                                    l8414 17F1                                      l8158 0788  
                                    l8600 1EE9                                      l9152 07ED  
                                    l9144 07E0                                      l8272 16B8  
                                    l9064 0C30                                      l8602 1EEC  
                                    l9154 07F0                                      l8290 16DE  
                                    l8282 16C0                                      l8266 16AD  
                                    l8346 1687                                      l8186 0DA2  
                                    l9402 152D                                      l9074 0C41  
                                    l9148 07E6                                      l8284 16CC  
                                    l8348 168D                                      l9260 0B93  
                                    l8524 1F76                                      l8380 1401  
                                    l8606 1EF2                                      l9158 07F6  
                                    l8294 16E7                                      l9246 0B5E  
                                    l8526 1F7C                                      l8622 111C  
                                    l8382 1407                                      l9086 0C57  
                                    l9094 0C76                                      l8544 0922  
                                    l9248 0B64                                      l8616 1113  
                                    l8800 0BAF                                      l8298 16EF  
                                    l8394 1594                                      l8546 08F3  
                                    l8650 1279                                      l9258 0B8D  
                                    l9290 11CB                                      l8618 1116  
                                    l8810 0BC2                                      l8802 0BB2  
                                    l8730 0986                                      l8722 0948  
                                    l8548 0928                                      l8900 1EC0  
                                    l9276 1CDC                                      l9292 11AE  
                                    l8812 0BC5                                      l8476 123D  
                                    l8580 15F0                                      l9532 0CD0  
                                    l9516 0CB1                                      l9380 1FCE  
                   _myMain_Initialization 1D7F                                      l9702 1396  
                                    l9294 11D0                                      l8750 0A18  
                                    l8726 096D                                      l8734 098A  
                                    l9630 02CE                                      l9606 025E  
                                    l9446 0F6C                                      l8648 1270  
                                    l7960 09C0                                      l8920 162D  
                                    l8832 0BDD                                      l8816 0BCB  
                                    l8744 0A0F                                      l8576 15E1  
                                    l8728 0982                                      l9616 0290  
                                    l9640 0300                                      l9384 1FD3  
                                    l8658 1287                                      l8690 13CB  
                                    l8682 13B5                                      l7970 09E6  
                                    l7962 09C5                                      l7954 09AF  
                                    l8930 1643                                      l8834 0BF6  
                                    l8770 0A4C                                      l8746 0A12  
                                    l8594 1464                                      l9490 0FE3  
                                    l9378 1FCB                                      l9716 14DE  
                                    l8676 13AC                                      l8940 170E  
                                    l9396 1518                                      l8764 0A2A  
                                    l9548 0CE6                                      l9572 1072  
                                    l9476 0FCB                                      l8854 1144  
                                    l8862 10A6                                      l7982 1DF5  
                                    l7958 09B6                                      l9670 1F86  
                                    l8782 0A5F                                      l8774 0A52  
                                    l9590 021B                                      l9478 0FCD  
                                    l8856 114F                                      l8864 10A9  
                                    l7968 09DE                                      l8776 0A56  
                                    l8768 0A49                                      l9576 1078  
                                    l9488 0FE2                                      l9920 14B8  
                                    _CFGS 0CAE                                      l7986 1DFB  
                                    l9690 136F                                      l8794 0BA6  
                                    l8778 0A59                                      l9906 0D83  
                                    l8868 10AF                                      l9692 137B  
                                    l8796 0BA9                                      l9758 1F46  
                            __CFG_WDTE$ON 0000                                      l9698 138D  
                                    l9890 0D56                                      l9938 1429  
                                    l9788 05BE                                      l8998 1211  
                                    l9966 0055                                      l9886 0D4E  
                                    l9878 0D29                                      l9984 0076  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9010 17B1  
                                    u8115 09E1                                      u9015 17AF  
                                    u8145 09F7                                      u8075 09BB  
                                    u8315 04C2                                      u8095 09D4  
                                    u9065 1E96                                      u8345 04D5  
                                    u9155 08FE                                      u8285 04AF  
                                    u8445 0EE6                                      u8605 0797  
                                    u8525 073D                                      u8375 04E8  
                                    u8455 0EF6                                      u8535 074D  
                                    u8465 0F16                                      u8705 0DEE  
                                    u8475 0F25                                      u8555 0775  
                                    u8805 16C3                                      u8485 0F2F  
                                    u8645 0DA9                                      u8565 077B  
                                    u8825 16CD                                      u8835 16D7  
                                    u8755 1192                                      u8675 0DD3  
                                    u8595 0791                                      u8845 16DF  
                                    u9595 1139                                      _LWLO 0CAD  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _WPUB 020D                                      _Buz1 00AE  
                                    _Load 0125                                      _Temp 00D7  
                                    _main 0831                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 08E9                           __end_of_RF_Main 1C17  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1CEA                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                          _setDimmerReClock 1C1D  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
              __end_of_setRFSW_AdjControl 1489                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
          getAll_DimmerLights_AdjSw@adjsw 0026              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2172 0023                         ?_getDimmer_LoadGO 0070  
          getAll_DimmerLights_AdjSw@count 0023                                     ??_ISR 0074  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
 __end_of_getDimmerLights_Allow_Condition 1EC7  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1EB1                    _getDimmerLights_Status 1DAE  
                      ??_getDimmer_LoadGO 0020            __size_of_DimmerIntrPointSelect 000A  
                        __end_of_LED_Main 1C3D          setDimmerLights_ErrorClose@lights 00EA  
           __end_of_DimmerIntrPointSelect 1C9F                     ?_getDimmerLights_Line 0070  
                                   l10000 009A                                     l10006 00CC  
                                   l10032 0155                                     l10122 0643  
                                   l10042 0181                                     l10140 068D  
                                   l10132 0661                                     l10142 0664  
                                   l10038 0162                                     l10046 018D  
                                   l10230 0855                                     l10160 06AB  
                                   l10144 0695                                     l10128 0652  
                                   l10056 01A3                                     l10162 06DC  
                                   l10170 06F9                                     l10234 0860  
                                   l10164 06E6                                     l10158 06D4  
                                   l10094 01D6                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01EC  
                         __end_of___awdiv 16F6                           __end_of___ftadd 054C  
                         __end_of___ftdiv 0F50                           __end_of___ftneg 1C83  
                                   u11105 1321                                     u10225 11B7  
                         __end_of___ftmul 07B8                                     u10405 0FB3  
                                   u11215 0D70                                     u10425 0FD3  
                                   u11315 1441                           ___awdiv@divisor 0020  
                                   u10525 0CC4                                     u11165 0D3C  
                                   _T1CON 0018                                     u11265 14AF  
                                   u11275 14BE                           __end_of___fttol 0E10  
                                   u11710 06DA                                     u11455 0098  
                                   u10905 1386                                     u11465 00CA  
                                   u11715 06B6                                     u10915 138E  
                                   u10835 1F8D                                     u11555 0194  
                                   u11475 010E                                     u10845 1F92  
                                   u11680 0693                                     u10945 14D4  
                                   u10875 1372                                     u11685 066F  
                                   u10895 137C                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 139D                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1E9C  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 12C6  
              _setDimmerLights_IntrIOC_GO 1292                          __end_of_TMR1_ISR 1109  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 0947                _setDimmerLights_ErrorClose 08E9  
                        __end_of_TMR1_Set 1D54                                     _getAD 1FC0  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1E3A  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D3C                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
            __end_of_getMain_LightsStatus 1CB3             __end_of_setLED_Initialization 1E16  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 17A7               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0AD0                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 088C  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 0800  
                      ??_setMemory_Modify 0020                            _Exception_Main 0628  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 164F                      _setSw_Initialization 1D9E  
                                  ??_main 006F                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0947  
                          _setMemory_Data 1D18                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 000B                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1CD4                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 088C  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1C72  
                               ??_WDT_Set 0020                          __end_of___awtoft 109D  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0A07  
                _getMain_All_Error_Status 125F                                    _IOCBF2 1CB2  
                                  i1l6810 0403                                    i1l6822 0439  
                                  i1l6814 0414                                    i1l6808 03FD  
                                  i1l6816 041A                                    i1l6826 044F  
                                  i1l6790 03B6                                    i1l6778 0386  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01AC                                    u729_25 1103  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1F14                                    _WDTCON 0097  
                    Exception_Main@i_3436 00ED                        DelayTime_1us@count 0020  
          __size_of_CC2500_PowerOnInitial 0015             __end_of_CC2500_PowerOnInitial 1EB1  
                                  _Dimmer 00C6                                    _DlySw1 0164  
              __end_of_Mcu_Initialization 1E28                       __end_of_Buzzer_Main 1511  
                                  _Memory 01BE                                    _Timer1 0120  
                                  ___bmul 1DF2                    __end_of_Exception_Main 0704  
                    Load_Main@Load_Status 002B                      Exception_Main@lights 00EF  
                                  ___wmul 1F83                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000B  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
             setDimmerLights_AdjRF@lights 0063                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D5  
                                  _s_data 00D6                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 139D                                    _myMain 00A0  
                  __end_of_setMemory_Data 1D24                          _DimmerLightsIntr 0076  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1C11  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0456  
             _setDimmerLights_IntrControl 035C                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1E73  
             getMain_Lights_Count@status1 0021                     __end_of_SwPointSelect 1D00  
            __size_of_Flash_Memory_Modify 004E         setDimmerLights_IntrControl@lights 0073  
                 __size_of_LedPointSelect 000C                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0020  
                              _TouchPower 1066               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025                ?_getAll_DimmerLights_AdjSw 0070  
                 __end_of_getPercentValue 0B35          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 003D                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5046 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070            DimmerIntrIOCPointSelect@lights 0071  
                         ?_Exception_Main 0070                              __pidataBANK4 1FE0  
                           __end_of_getAD 1FE0                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021              __size_of_setDimmerLights_Adj 0058  
                      _LED_Initialization 1C35                           _getSw_KeyStatus 1DE1  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0021  
                        ??_DelayTimejudge 0024                           ?_setMemory_Data 0020  
           ??_Flash_Memory_Initialization 0062                          ?_setDimmerLights 006B  
                    _getMain_Lights_Count 1D30                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01ED                        __size_of_getBuz_GO 0011  
                    _getMain_LightsStatus 1CA9                __end_of_set_TimeoutCleared 1C42  
                __end_of_setDimmerReClock 1C21                        __size_of_getRxData 007A  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1D54                            _DimmerLights11 00CC  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1C17  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 14C7                         ??_setRFSW_Control 006B  
                       __end_of_Temp_Main 1C1D                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1C2D  
                              __pnvCOMMON 0079                             ??_Switch_Main 006E  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 006F  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 0831  
                          _getDelayOff_GO 1D8E                       _CC2500_WriteCommand 1EE0  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 000B                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                   ?___wmul 0020  
                              ??_TMR1_ISR 0074                             ?_setTemp_Main 0070  
                              _getLoad_AD 0D08                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1C62                        __size_of_setTxData 0097  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1C54  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 1489  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1CF5                        _setRFSW_AdjControl 144B  
                  __end_of_setProductData 1D62                                   _IOC_ISR 1D70  
                                 _IOC_Set 1D3C                      __size_of_setLog_Code 0034  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 12FA                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1EFA                getAll_DimmerLights_AdjSw@i 0024  
             ?_setDimmerLights_IntrIOC_GO 0070                    __size_of_CC2500_RxData 006F  
                  __size_of_CC2500_TxData 0064               ?_setDimmerLights_ErrorClose 0070  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1C14                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1CDF  
         __end_of_setControl_Lights_Table 09A6                           setRF_Main@error 016F  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
                         _setPercentValue 0A6B                   ??_setLoad_AH_AL_Restore 0020  
                        ?_getPercentValue 0070              __end_of_CC2500_FrequencyCabr 1D0C  
                         __size_of_IO_Set 001A                         __end_of_getBuz_GO 1DD0  
                     ??_Flash_Memory_Main 0026                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1D9E            __end_of_getDimmerLights_Status 1DBF  
                       __end_of_getRxData 0C8B                   __end_of_getSw_KeyStatus 1DF2  
                _CC2500_registers_address 1000          __end_of_DimmerIntrIOCPointSelect 1CBE  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0068  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 16A2  
                                 ___ftadd 0456                                   ___ftdiv 0EA7  
                                 ___ftneg 1C7A                           __size_of___wmul 001E  
                                 ___ftmul 0704                                   ___fttol 0D89  
                     __end_of_Switch_Main 1C62                                   ___lwdiv 1366  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1DD0  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 006B  
                         __size_of_setBuz 0059                                   __ptext1 140F  
                                 __ptext2 1D7F                                   __ptext3 1489  
                                 __ptext4 0D08                                   __ptext5 1FC0  
                                 __ptext6 1E28                                   __ptext7 0002  
                                 __ptext8 1C1A                                   __ptext9 0F50  
                 ??_setDimmerLights_AdjRF 0062                   ??_setDimmerLights_AdjOn 0022  
               __size_of_CC2500_SIDLEMode 0004                     _DimmerIntrPointSelect 1C95  
                            __size_of_ISR 000F                ??_getMain_All_Error_Status 0020  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 1330  
               __end_of_Flash_Memory_Read 1F14                   ??_setDimmerLights_SwOff 006A  
                              _setRF_Main 0C8B                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1C31                         _DimmerLights_Main 1F2E  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1C48  
              __end_of_CC2500_ClearRXFIFO 1C25                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1C29             DimmerLightsPointSelect@lights 0021  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 0079                            _LedPointSelect 1D0C  
                     _DelayOffPointSelect 1CBE                                   clrloop0 1C4F  
          __size_of_Switch_Initialization 0009             __end_of_Switch_Initialization 1C95  
                    end_of_initialization 003D                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1154                             _DelayTime_1us 112E  
                       __end_of_setTxData 0EA7                __end_of_Flash_Memory_Write 1230  
                                 init_ram 1C48                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006F                      Flash_Memory_Read@ret 0023  
                                 initloop 1C49                                _setSw_Main 01ED  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 1109                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1E04                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0BA2  
                           _CC2500_TxData 0A07                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 1511                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1C83  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0020  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1F4A  
                      _Mcu_Initialization 1E16                  __size_of_CC2500_PowerRST 0044  
                    __end_of_my_MainTimer 144B                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1D18  
                 __end_of_setPercentValue 0AD0                  __size_of_CC2500_WriteREG 0023  
               __end_of_CC2500_InitSetREG 117E                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0059  
                          ?_DelayTime_1us 0020                       _setDimmerLights_Adj 16F6  
                    ?_Flash_Memory_Unlock 0070                 __end_of_CC2500_ReadStatus 112E  
                           ?_RF_RxDisable 0070           getMain_All_Error_Status@command 0025  
             ??_getAll_DimmerLights_AdjSw 0022                               ___ftdiv@exp 003C  
                        ??_Exception_Main 006B                            __end_of_IO_Set 1F2E  
                    _setRF_Initialization 1CEA                        _setMemory_LoopSave 1E60  
                             _Switch_Main 1C5B                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   _DimmerLightsPointSelect 1CC9  
                 __end_of_getRF_KeyStatus 1DE1                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1E9C  
                    ??_Mcu_Initialization 0021                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                    ?_setDimmerLights_Adj 006B                            __end_of___bmul 1E04  
                    setRF_DimmerLights@on 0066                  _DimmerIntrIOCPointSelect 1CB3  
                          __end_of___wmul 1FA1                         getSw_KeyStatus@sw 0070  
                       __size_of_TMR1_ISR 0025             __size_of_getDimmerLights_Line 000B  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 13D6  
           __size_of_setDimmerLights_Line 000E             __size_of_setDimmerLights_SwOn 0039  
                          __end_of_setBuz 17A7                      _CC2500_FrequencyCabr 1D00  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 15AE                         __size_of_WDT_Main 0012  
                       ?_setDimmerReClock 0070                       start_initialization 0015  
                       _setRF_DimmerValue 1230                           ?_LedPointSelect 0070  
                               _Load_Main 0041                               __end_of_ISR 0013  
                        _getDimmer_LoadGO 1C6A                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                        ??_setDimmerReClock 0073  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 1FC0  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 1000  
                          ??_RF_RxDisable 0024                       __size_of_getLoad_AD 0081  
                            ?_Buzzer_Main 0070                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1C3D                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0169  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0066  
                     __size_of_getTemp_AD 003E                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1C1A  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D0                     setProductData@address 0065  
                     Exception_Main@count 00E9                   setRF_DimmerValue@lights 0067  
                     Exception_Main@error 00EA                                  ??___bmul 0021  
                   ??_setDimmerLights_Adj 006C                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000B                                 _Tx_Length 00D3  
                             __pdataBANK4 0220                                  ??_setLED 0023  
               _getAll_DimmerLights_AdjSw 11A8                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 006F  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 1292  
                        _CC2500_SIDLEMode 1C29                __size_of_DimmerLights_Main 001C  
               __end_of_setRF_DimmerValue 125F                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0075  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1E4D                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E9  
                           __pcstackBANK2 016D                             __pcstackBANK3 01EC  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0153                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0066                 ??_DimmerLightsPointSelect 0020  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F66                  setRFSW_AdjControl@status 006A  
                         ??_CC2500_TxData 0024                            getRxData@error 00ED  
             __size_of_LED_Initialization 0004                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 00EB                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 007D                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                                setBuz@time 0029  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1C0A                                 _getBuz_GO 1DBF  
     __end_of_Flash_Memory_Initialization 0628               _Flash_Memory_Initialization 054C  
                                ?___awdiv 0020                                 __ptext100 164F  
                               __ptext101 1D54                                 __ptext110 1C42  
                               __ptext102 117E                                 __ptext111 1CBE  
                               __ptext103 1DF2                                 __ptext120 1C25  
                               __ptext112 1E9C                                 __ptext104 1D8E  
                               __ptext121 1C21                                 __ptext113 1C29  
                               __ptext105 1DAE                                 __ptext130 035C  
                               __ptext122 1EE0                                 __ptext114 07B8  
                               __ptext106 1CC9                                 __ptext131 1C95  
                               __ptext123 1C3D                                 __ptext115 1154  
                               __ptext107 174E                                 __ptext132 1D70  
                               __ptext124 1E87                                 __ptext116 1FA1  
                               __ptext108 16A2                                 __ptext133 1C1D  
                               __ptext125 1EC7                                 __ptext117 109D  
                               __ptext109 1C2D                                  ?___ftadd 0041  
                               __ptext134 1292                                 __ptext126 14C7  
                               __ptext118 1D00                                 __ptext135 1CB3  
                               __ptext127 1C0B                                 __ptext119 112E  
                               __ptext129 10E4                                 _getRxData 0C11  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 15FD                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1C0E                          getPercentValue@i 005F  
                        setPercentValue@i 005F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 107B  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 016F  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 002E             __end_of_setDimmerLights_AdjRF 10E4  
           __end_of_setDimmerLights_AdjOn 1201                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00D4            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 15AE  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1D8E  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1CF5  
                     __end_of_setLED_Main 1366                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00CD                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1C1A                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1C39  
                         SwPointSelect@sw 0021                                 clear_ram0 1C4E  
                CC2500_InitPATable@loop_d 0027                              _my_MainTimer 140F  
                               _setTxData 0E10       __end_of_DimmerLights_Initialization 1CA9  
             _DimmerLights_Initialization 1C9F                        _CC2500_ClearRXFIFO 1C21  
                      _CC2500_ClearTXFIFO 1C25                  setRF_DimmerLights@lights 006A  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E87  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                __size_of_getPercentValue 0065                  setRF_DimmerLights@status 0069  
             __size_of_setRFSW_AdjControl 003E                        _Flash_Memory_Write 1201  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 10E4                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1D48                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                                  _RF_Count 0123  
                    __end_of_RF_RxDisable 1E4D                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1EFA                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1E28                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                __size_of_setRF_DimmerValue 002F  
                     ?_Flash_Memory_Write 0070                          setRF_Main@loop_f 016D  
                   __size_of_setTemp_Main 00B0                   __size_of_setDelayOff_GO 0053  
                                _DelayOff 0075                              setSw_Main@sw 006D  
        setDimmerLights_IntrIOC_GO@lights 0072                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 000F              ?_setDimmerLights_IntrControl 0070  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000C  
            __end_of_Flash_Memory_Erasing 1D30                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 12FA                     _DlyOff_Initialization 1C42  
                    ??_CC2500_ClearRXFIFO 0024                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                                _Fosc_Set 07FC                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 006C                        __end_of_getLoad_AD 0D89  
                      __end_of_getLoad_OK 1C6A                     _Switch_Initialization 1C8C  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
                       ??_setDimmerLights 006C                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 14C7  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
              ??_DimmerIntrIOCPointSelect 0070                          _CC2500_WriteByte 1EC7  
                       getLoad_AD@channel 0026              Flash_Memory_Initialization@i 0063  
                                _SwDetect 00D2                               ??_Temp_Main 0069  
                       setRFSW_Control@sw 006D             _getMain_All_Error_Status$3422 0021  
           _getMain_All_Error_Status$3423 0023                  __end_of_getDimmer_LoadGO 1C72  
                     _Load_Initialization 1C0E                                 setLED@led 0023  
                 ??_DimmerIntrPointSelect 0070                              _setTemp_Main 0F50  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 107B  
                        ??_LedPointSelect 0020                                  ___ftpack 09A6  
           __size_of_getMain_Lights_Count 000C                    getDimmer_LoadGO@loadgo 0020  
           __size_of_getMain_LightsStatus 000A                         getTemp_AD@channel 0025  
                            ??_setRF_Main 006F                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1330                __end_of_setRF_DimmerLights 1800  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1C7A                          setDelayOff_GO@sw 0069  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
      __size_of_getAll_DimmerLights_AdjSw 002B                           ___lwdiv@counter 0025  
                                __ptext10 1C17                                  __ptext11 1C0A  
                                __ptext20 1066                                  __ptext12 1C5B  
                                __ptext21 1C14                                  __ptext13 01ED  
                                __ptext30 1230                                  __ptext22 0C8B  
                                __ptext14 1E73                                  __ptext31 10C0  
                                __ptext23 0C11                                  __ptext15 11D3  
                                __ptext40 1109                                  __ptext32 0AD0  
                                __ptext24 12C6                                  __ptext16 1DE1  
                                __ptext41 1F66                                  __ptext33 0704  
                                __ptext25 1E60                                  __ptext17 1CF5  
                                __ptext50 1C54                                  __ptext42 1C11  
                                __ptext34 1E4D                                  __ptext26 0947  
                                __ptext18 1C8C                                  __ptext51 0041  
                                __ptext43 1CEA                                  __ptext35 1DD0  
                                __ptext27 15AE                                  __ptext19 1D9E  
                                __ptext60 1C39                                  __ptext52 1D30  
                                __ptext44 1E16                                  __ptext36 1DBF  
                                __ptext28 13D6                                  __ptext61 1330  
                                __ptext53 1C72                                  __ptext45 1CDF  
                                __ptext37 1E3A                                  __ptext29 144B  
                                __ptext70 1C83                                  __ptext62 1C35  
                                __ptext54 1C6A                                  __ptext46 1D48  
                                __ptext38 0A07                                  __ptext71 1EFA  
                                __ptext63 1E04                                  __ptext55 11A8  
                                __ptext47 1F14                                  __ptext39 0BA2  
                                __ptext80 0A6B                                  __ptext72 0628  
                                __ptext64 12FA                                  __ptext56 1F83  
                                __ptext48 1D3C                                  __ptext81 0D89  
                                __ptext73 1CD4                                  __ptext65 1511  
                                __ptext57 1366                                  __ptext49 07FC  
                                __ptext90 1CA9                                  __ptext82 1C7A  
                                __ptext74 1F2E                                  __ptext66 1D24  
                                __ptext58 1C0E                                  __ptext91 1EB1  
                                __ptext83 0EA7                                  __ptext75 0B35  
                                __ptext67 054C                                  __ptext59 1F4A  
                                __ptext92 1C62                                  __ptext84 0456  
                                __ptext76 16F6                                  __ptext68 1D18  
                                __ptext93 125F                                  __ptext85 107B  
                                __ptext77 15FD                                  __ptext69 1201  
                                __ptext94 1C9F                                  __ptext86 09A6  
                                __ptext78 0E10                                  __ptext95 0800  
                                __ptext87 139D                                  __ptext79 17A7  
                                __ptext96 1C31                                  __ptext88 1D0C  
                                __ptext97 088C                                  __ptext89 1D62  
                                __ptext98 08E9                                  __ptext99 155F  
                                __product 0220             ??_setDimmerLights_IntrControl 0072  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1CDF              __end_of_setDimmerLights_Main 0BA2  
            __end_of_setDimmerLights_Line 1D70              __end_of_setDimmerLights_SwOn 140F  
                            ??_setSw_Main 006B                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1E73  
                __end_of_CC2500_SIDLEMode 1C2D                setDimmerLights_Main@lights 006E  
             __end_of_DelayOffPointSelect 1CC9                CC2500_WriteCommand@command 0023  
                    setRF_Main@Receive_OK 016E                 __size_of_setDimmerReClock 0004  
                 setDimmerLights_AdjOn@sw 0022                           _CC2500_ReadByte 1F66  
                      _CC2500_InitPATable 1FA1                  __end_of_setMemory_Modify 1E60  
                      __end_of_setRF_Main 0D08                               ??_getBuz_GO 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 00EB  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                                  main@argc 01EC  
                                main@argv 01EE                      _getSw_KeyStatus$6012 0022  
                     ?_CC2500_InitPATable 0070                           _CC2500_PowerRST 07B8  
                __size_of_getSw_KeyStatus 0011               __end_of_Flash_Memory_Modify 155F  
                       ??_getPercentValue 005C                               _setLog_Code 12C6  
             __end_of_Flash_Memory_Unlock 1C8C                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 109D                        __end_of_setSw_Main 035C  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 117E  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 11D3                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 0831  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 0800  
             __end_of_setDimmerLights_Adj 174E                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 0013                         _RF_Initialization 1C11  
    __size_of_setDimmerLights_IntrControl 00FA                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1D24                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D1                   __size_of_Exception_Main 00DC  
         __end_of_DelayOff_Initialization 1C31       __size_of_setDimmerLights_IntrIOC_GO 0034  
     __size_of_setDimmerLights_ErrorClose 005E                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1C35                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 164F  
        __size_of_setControl_Lights_Table 005F                    __end_of_DelayTimejudge 11A8  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1154  
                 __end_of_CC2500_ReadByte 1F83              __end_of_setSw_Initialization 1DAE  
                         _Timeout_Counter 1E87           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1E3A  
              __end_of_LED_Initialization 1C39            __end_of_setTemp_Initialization 1C0B  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1C14  
                   __end_of_CC2500_RxData 0C11                     __end_of_CC2500_TxData 0A6B  
                   _setLoad_AH_AL_Restore 1F4A                   __end_of_CC2500_PowerRST 07FC  
