

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Mar 13 16:21:30 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	intentry,global,class=CODE,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,delta=2
   170                           	dabs	1,0x7E,2
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000D                     	;# 
   185  000E                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  011D                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  018E                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0194                     	;# 
   229  0195                     	;# 
   230  0196                     	;# 
   231  0197                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020D                     	;# 
   244  0210                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0291                     	;# 
   261  0291                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0298                     	;# 
   265  0298                     	;# 
   266  0299                     	;# 
   267  029A                     	;# 
   268  0394                     	;# 
   269  0395                     	;# 
   270  0396                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  0090                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0095                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  0116                     	;# 
   329  0117                     	;# 
   330  011D                     	;# 
   331  018C                     	;# 
   332  018D                     	;# 
   333  018E                     	;# 
   334  0191                     	;# 
   335  0191                     	;# 
   336  0192                     	;# 
   337  0193                     	;# 
   338  0193                     	;# 
   339  0194                     	;# 
   340  0195                     	;# 
   341  0196                     	;# 
   342  0197                     	;# 
   343  0199                     	;# 
   344  019A                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019C                     	;# 
   350  019C                     	;# 
   351  019D                     	;# 
   352  019E                     	;# 
   353  019F                     	;# 
   354  020D                     	;# 
   355  0210                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0291                     	;# 
   372  0291                     	;# 
   373  0292                     	;# 
   374  0293                     	;# 
   375  0298                     	;# 
   376  0298                     	;# 
   377  0299                     	;# 
   378  029A                     	;# 
   379  0394                     	;# 
   380  0395                     	;# 
   381  0396                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  0010                     	;# 
   409  0011                     	;# 
   410  0012                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  0090                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  010C                     	;# 
   437  010D                     	;# 
   438  010E                     	;# 
   439  0116                     	;# 
   440  0117                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0197                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019C                     	;# 
   461  019C                     	;# 
   462  019D                     	;# 
   463  019E                     	;# 
   464  019F                     	;# 
   465  020D                     	;# 
   466  0210                     	;# 
   467  0211                     	;# 
   468  0211                     	;# 
   469  0212                     	;# 
   470  0212                     	;# 
   471  0213                     	;# 
   472  0213                     	;# 
   473  0214                     	;# 
   474  0214                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0216                     	;# 
   479  0216                     	;# 
   480  0217                     	;# 
   481  0217                     	;# 
   482  0291                     	;# 
   483  0291                     	;# 
   484  0292                     	;# 
   485  0293                     	;# 
   486  0298                     	;# 
   487  0298                     	;# 
   488  0299                     	;# 
   489  029A                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE9                     	;# 
   499  0FEA                     	;# 
   500  0FEB                     	;# 
   501  0FED                     	;# 
   502  0FEE                     	;# 
   503  0FEF                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  0010                     	;# 
   520  0011                     	;# 
   521  0012                     	;# 
   522  0015                     	;# 
   523  0016                     	;# 
   524  0016                     	;# 
   525  0017                     	;# 
   526  0018                     	;# 
   527  0019                     	;# 
   528  001A                     	;# 
   529  001B                     	;# 
   530  001C                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0095                     	;# 
   538  0096                     	;# 
   539  0097                     	;# 
   540  0099                     	;# 
   541  009A                     	;# 
   542  009B                     	;# 
   543  009B                     	;# 
   544  009C                     	;# 
   545  009D                     	;# 
   546  009E                     	;# 
   547  010C                     	;# 
   548  010D                     	;# 
   549  010E                     	;# 
   550  0116                     	;# 
   551  0117                     	;# 
   552  011D                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  018E                     	;# 
   556  0191                     	;# 
   557  0191                     	;# 
   558  0192                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0197                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019C                     	;# 
   572  019C                     	;# 
   573  019D                     	;# 
   574  019E                     	;# 
   575  019F                     	;# 
   576  020D                     	;# 
   577  0210                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0291                     	;# 
   594  0291                     	;# 
   595  0292                     	;# 
   596  0293                     	;# 
   597  0298                     	;# 
   598  0298                     	;# 
   599  0299                     	;# 
   600  029A                     	;# 
   601  0394                     	;# 
   602  0395                     	;# 
   603  0396                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0010                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  001A                     	;# 
   640  001B                     	;# 
   641  001C                     	;# 
   642  008C                     	;# 
   643  008D                     	;# 
   644  008E                     	;# 
   645  0090                     	;# 
   646  0091                     	;# 
   647  0092                     	;# 
   648  0095                     	;# 
   649  0096                     	;# 
   650  0097                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  010C                     	;# 
   659  010D                     	;# 
   660  010E                     	;# 
   661  0116                     	;# 
   662  0117                     	;# 
   663  011D                     	;# 
   664  018C                     	;# 
   665  018D                     	;# 
   666  018E                     	;# 
   667  0191                     	;# 
   668  0191                     	;# 
   669  0192                     	;# 
   670  0193                     	;# 
   671  0193                     	;# 
   672  0194                     	;# 
   673  0195                     	;# 
   674  0196                     	;# 
   675  0197                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019C                     	;# 
   683  019C                     	;# 
   684  019D                     	;# 
   685  019E                     	;# 
   686  019F                     	;# 
   687  020D                     	;# 
   688  0210                     	;# 
   689  0211                     	;# 
   690  0211                     	;# 
   691  0212                     	;# 
   692  0212                     	;# 
   693  0213                     	;# 
   694  0213                     	;# 
   695  0214                     	;# 
   696  0214                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0216                     	;# 
   701  0216                     	;# 
   702  0217                     	;# 
   703  0217                     	;# 
   704  0291                     	;# 
   705  0291                     	;# 
   706  0292                     	;# 
   707  0293                     	;# 
   708  0298                     	;# 
   709  0298                     	;# 
   710  0299                     	;# 
   711  029A                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  0FE4                     	;# 
   716  0FE5                     	;# 
   717  0FE6                     	;# 
   718  0FE7                     	;# 
   719  0FE8                     	;# 
   720  0FE9                     	;# 
   721  0FEA                     	;# 
   722  0FEB                     	;# 
   723  0FED                     	;# 
   724  0FEE                     	;# 
   725  0FEF                     	;# 
   726  0000                     	;# 
   727  0001                     	;# 
   728  0002                     	;# 
   729  0003                     	;# 
   730  0004                     	;# 
   731  0005                     	;# 
   732  0006                     	;# 
   733  0007                     	;# 
   734  0008                     	;# 
   735  0009                     	;# 
   736  000A                     	;# 
   737  000B                     	;# 
   738  000C                     	;# 
   739  000D                     	;# 
   740  000E                     	;# 
   741  0010                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  0090                     	;# 
   757  0091                     	;# 
   758  0092                     	;# 
   759  0095                     	;# 
   760  0096                     	;# 
   761  0097                     	;# 
   762  0099                     	;# 
   763  009A                     	;# 
   764  009B                     	;# 
   765  009B                     	;# 
   766  009C                     	;# 
   767  009D                     	;# 
   768  009E                     	;# 
   769  010C                     	;# 
   770  010D                     	;# 
   771  010E                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  011D                     	;# 
   775  018C                     	;# 
   776  018D                     	;# 
   777  018E                     	;# 
   778  0191                     	;# 
   779  0191                     	;# 
   780  0192                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0197                     	;# 
   787  0199                     	;# 
   788  019A                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019C                     	;# 
   794  019C                     	;# 
   795  019D                     	;# 
   796  019E                     	;# 
   797  019F                     	;# 
   798  020D                     	;# 
   799  0210                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0213                     	;# 
   806  0214                     	;# 
   807  0214                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0216                     	;# 
   812  0216                     	;# 
   813  0217                     	;# 
   814  0217                     	;# 
   815  0291                     	;# 
   816  0291                     	;# 
   817  0292                     	;# 
   818  0293                     	;# 
   819  0298                     	;# 
   820  0298                     	;# 
   821  0299                     	;# 
   822  029A                     	;# 
   823  0394                     	;# 
   824  0395                     	;# 
   825  0396                     	;# 
   826  0FE4                     	;# 
   827  0FE5                     	;# 
   828  0FE6                     	;# 
   829  0FE7                     	;# 
   830  0FE8                     	;# 
   831  0FE9                     	;# 
   832  0FEA                     	;# 
   833  0FEB                     	;# 
   834  0FED                     	;# 
   835  0FEE                     	;# 
   836  0FEF                     	;# 
   837  0000                     	;# 
   838  0001                     	;# 
   839  0002                     	;# 
   840  0003                     	;# 
   841  0004                     	;# 
   842  0005                     	;# 
   843  0006                     	;# 
   844  0007                     	;# 
   845  0008                     	;# 
   846  0009                     	;# 
   847  000A                     	;# 
   848  000B                     	;# 
   849  000C                     	;# 
   850  000D                     	;# 
   851  000E                     	;# 
   852  0010                     	;# 
   853  0011                     	;# 
   854  0012                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0016                     	;# 
   858  0017                     	;# 
   859  0018                     	;# 
   860  0019                     	;# 
   861  001A                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  008C                     	;# 
   865  008D                     	;# 
   866  008E                     	;# 
   867  0090                     	;# 
   868  0091                     	;# 
   869  0092                     	;# 
   870  0095                     	;# 
   871  0096                     	;# 
   872  0097                     	;# 
   873  0099                     	;# 
   874  009A                     	;# 
   875  009B                     	;# 
   876  009B                     	;# 
   877  009C                     	;# 
   878  009D                     	;# 
   879  009E                     	;# 
   880  010C                     	;# 
   881  010D                     	;# 
   882  010E                     	;# 
   883  0116                     	;# 
   884  0117                     	;# 
   885  011D                     	;# 
   886  018C                     	;# 
   887  018D                     	;# 
   888  018E                     	;# 
   889  0191                     	;# 
   890  0191                     	;# 
   891  0192                     	;# 
   892  0193                     	;# 
   893  0193                     	;# 
   894  0194                     	;# 
   895  0195                     	;# 
   896  0196                     	;# 
   897  0197                     	;# 
   898  0199                     	;# 
   899  019A                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019C                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020D                     	;# 
   910  0210                     	;# 
   911  0211                     	;# 
   912  0211                     	;# 
   913  0212                     	;# 
   914  0212                     	;# 
   915  0213                     	;# 
   916  0213                     	;# 
   917  0214                     	;# 
   918  0214                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0216                     	;# 
   923  0216                     	;# 
   924  0217                     	;# 
   925  0217                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0298                     	;# 
   931  0298                     	;# 
   932  0299                     	;# 
   933  029A                     	;# 
   934  0394                     	;# 
   935  0395                     	;# 
   936  0396                     	;# 
   937  0FE4                     	;# 
   938  0FE5                     	;# 
   939  0FE6                     	;# 
   940  0FE7                     	;# 
   941  0FE8                     	;# 
   942  0FE9                     	;# 
   943  0FEA                     	;# 
   944  0FEB                     	;# 
   945  0FED                     	;# 
   946  0FEE                     	;# 
   947  0FEF                     	;# 
   948  0000                     	;# 
   949  0001                     	;# 
   950  0002                     	;# 
   951  0003                     	;# 
   952  0004                     	;# 
   953  0005                     	;# 
   954  0006                     	;# 
   955  0007                     	;# 
   956  0008                     	;# 
   957  0009                     	;# 
   958  000A                     	;# 
   959  000B                     	;# 
   960  000C                     	;# 
   961  000D                     	;# 
   962  000E                     	;# 
   963  0010                     	;# 
   964  0011                     	;# 
   965  0012                     	;# 
   966  0015                     	;# 
   967  0016                     	;# 
   968  0016                     	;# 
   969  0017                     	;# 
   970  0018                     	;# 
   971  0019                     	;# 
   972  001A                     	;# 
   973  001B                     	;# 
   974  001C                     	;# 
   975  008C                     	;# 
   976  008D                     	;# 
   977  008E                     	;# 
   978  0090                     	;# 
   979  0091                     	;# 
   980  0092                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  011D                     	;# 
   997  018C                     	;# 
   998  018D                     	;# 
   999  018E                     	;# 
  1000  0191                     	;# 
  1001  0191                     	;# 
  1002  0192                     	;# 
  1003  0193                     	;# 
  1004  0193                     	;# 
  1005  0194                     	;# 
  1006  0195                     	;# 
  1007  0196                     	;# 
  1008  0197                     	;# 
  1009  0199                     	;# 
  1010  019A                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019C                     	;# 
  1016  019C                     	;# 
  1017  019D                     	;# 
  1018  019E                     	;# 
  1019  019F                     	;# 
  1020  020D                     	;# 
  1021  0210                     	;# 
  1022  0211                     	;# 
  1023  0211                     	;# 
  1024  0212                     	;# 
  1025  0212                     	;# 
  1026  0213                     	;# 
  1027  0213                     	;# 
  1028  0214                     	;# 
  1029  0214                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  0291                     	;# 
  1038  0291                     	;# 
  1039  0292                     	;# 
  1040  0293                     	;# 
  1041  0298                     	;# 
  1042  0298                     	;# 
  1043  0299                     	;# 
  1044  029A                     	;# 
  1045  0394                     	;# 
  1046  0395                     	;# 
  1047  0396                     	;# 
  1048  0FE4                     	;# 
  1049  0FE5                     	;# 
  1050  0FE6                     	;# 
  1051  0FE7                     	;# 
  1052  0FE8                     	;# 
  1053  0FE9                     	;# 
  1054  0FEA                     	;# 
  1055  0FEB                     	;# 
  1056  0FED                     	;# 
  1057  0FEE                     	;# 
  1058  0FEF                     	;# 
  1059  0000                     	;# 
  1060  0001                     	;# 
  1061  0002                     	;# 
  1062  0003                     	;# 
  1063  0004                     	;# 
  1064  0005                     	;# 
  1065  0006                     	;# 
  1066  0007                     	;# 
  1067  0008                     	;# 
  1068  0009                     	;# 
  1069  000A                     	;# 
  1070  000B                     	;# 
  1071  000C                     	;# 
  1072  000D                     	;# 
  1073  000E                     	;# 
  1074  0010                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0015                     	;# 
  1078  0016                     	;# 
  1079  0016                     	;# 
  1080  0017                     	;# 
  1081  0018                     	;# 
  1082  0019                     	;# 
  1083  001A                     	;# 
  1084  001B                     	;# 
  1085  001C                     	;# 
  1086  008C                     	;# 
  1087  008D                     	;# 
  1088  008E                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0095                     	;# 
  1093  0096                     	;# 
  1094  0097                     	;# 
  1095  0099                     	;# 
  1096  009A                     	;# 
  1097  009B                     	;# 
  1098  009B                     	;# 
  1099  009C                     	;# 
  1100  009D                     	;# 
  1101  009E                     	;# 
  1102  010C                     	;# 
  1103  010D                     	;# 
  1104  010E                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  011D                     	;# 
  1108  018C                     	;# 
  1109  018D                     	;# 
  1110  018E                     	;# 
  1111  0191                     	;# 
  1112  0191                     	;# 
  1113  0192                     	;# 
  1114  0193                     	;# 
  1115  0193                     	;# 
  1116  0194                     	;# 
  1117  0195                     	;# 
  1118  0196                     	;# 
  1119  0197                     	;# 
  1120  0199                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019C                     	;# 
  1127  019C                     	;# 
  1128  019D                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  020D                     	;# 
  1132  0210                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0214                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0216                     	;# 
  1145  0216                     	;# 
  1146  0217                     	;# 
  1147  0217                     	;# 
  1148  0291                     	;# 
  1149  0291                     	;# 
  1150  0292                     	;# 
  1151  0293                     	;# 
  1152  0298                     	;# 
  1153  0298                     	;# 
  1154  0299                     	;# 
  1155  029A                     	;# 
  1156  0394                     	;# 
  1157  0395                     	;# 
  1158  0396                     	;# 
  1159  0FE4                     	;# 
  1160  0FE5                     	;# 
  1161  0FE6                     	;# 
  1162  0FE7                     	;# 
  1163  0FE8                     	;# 
  1164  0FE9                     	;# 
  1165  0FEA                     	;# 
  1166  0FEB                     	;# 
  1167  0FED                     	;# 
  1168  0FEE                     	;# 
  1169  0FEF                     	;# 
  1170  0000                     	;# 
  1171  0001                     	;# 
  1172  0002                     	;# 
  1173  0003                     	;# 
  1174  0004                     	;# 
  1175  0005                     	;# 
  1176  0006                     	;# 
  1177  0007                     	;# 
  1178  0008                     	;# 
  1179  0009                     	;# 
  1180  000A                     	;# 
  1181  000B                     	;# 
  1182  000C                     	;# 
  1183  000D                     	;# 
  1184  000E                     	;# 
  1185  0010                     	;# 
  1186  0011                     	;# 
  1187  0012                     	;# 
  1188  0015                     	;# 
  1189  0016                     	;# 
  1190  0016                     	;# 
  1191  0017                     	;# 
  1192  0018                     	;# 
  1193  0019                     	;# 
  1194  001A                     	;# 
  1195  001B                     	;# 
  1196  001C                     	;# 
  1197  008C                     	;# 
  1198  008D                     	;# 
  1199  008E                     	;# 
  1200  0090                     	;# 
  1201  0091                     	;# 
  1202  0092                     	;# 
  1203  0095                     	;# 
  1204  0096                     	;# 
  1205  0097                     	;# 
  1206  0099                     	;# 
  1207  009A                     	;# 
  1208  009B                     	;# 
  1209  009B                     	;# 
  1210  009C                     	;# 
  1211  009D                     	;# 
  1212  009E                     	;# 
  1213  010C                     	;# 
  1214  010D                     	;# 
  1215  010E                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  011D                     	;# 
  1219  018C                     	;# 
  1220  018D                     	;# 
  1221  018E                     	;# 
  1222  0191                     	;# 
  1223  0191                     	;# 
  1224  0192                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0194                     	;# 
  1228  0195                     	;# 
  1229  0196                     	;# 
  1230  0197                     	;# 
  1231  0199                     	;# 
  1232  019A                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019C                     	;# 
  1238  019C                     	;# 
  1239  019D                     	;# 
  1240  019E                     	;# 
  1241  019F                     	;# 
  1242  020D                     	;# 
  1243  0210                     	;# 
  1244  0211                     	;# 
  1245  0211                     	;# 
  1246  0212                     	;# 
  1247  0212                     	;# 
  1248  0213                     	;# 
  1249  0213                     	;# 
  1250  0214                     	;# 
  1251  0214                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0291                     	;# 
  1260  0291                     	;# 
  1261  0292                     	;# 
  1262  0293                     	;# 
  1263  0298                     	;# 
  1264  0298                     	;# 
  1265  0299                     	;# 
  1266  029A                     	;# 
  1267  0394                     	;# 
  1268  0395                     	;# 
  1269  0396                     	;# 
  1270  0FE4                     	;# 
  1271  0FE5                     	;# 
  1272  0FE6                     	;# 
  1273  0FE7                     	;# 
  1274  0FE8                     	;# 
  1275  0FE9                     	;# 
  1276  0FEA                     	;# 
  1277  0FEB                     	;# 
  1278  0FED                     	;# 
  1279  0FEE                     	;# 
  1280  0FEF                     	;# 
  1281  0000                     	;# 
  1282  0001                     	;# 
  1283  0002                     	;# 
  1284  0003                     	;# 
  1285  0004                     	;# 
  1286  0005                     	;# 
  1287  0006                     	;# 
  1288  0007                     	;# 
  1289  0008                     	;# 
  1290  0009                     	;# 
  1291  000A                     	;# 
  1292  000B                     	;# 
  1293  000C                     	;# 
  1294  000D                     	;# 
  1295  000E                     	;# 
  1296  0010                     	;# 
  1297  0011                     	;# 
  1298  0012                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  008C                     	;# 
  1309  008D                     	;# 
  1310  008E                     	;# 
  1311  0090                     	;# 
  1312  0091                     	;# 
  1313  0092                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0097                     	;# 
  1317  0099                     	;# 
  1318  009A                     	;# 
  1319  009B                     	;# 
  1320  009B                     	;# 
  1321  009C                     	;# 
  1322  009D                     	;# 
  1323  009E                     	;# 
  1324  010C                     	;# 
  1325  010D                     	;# 
  1326  010E                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  011D                     	;# 
  1330  018C                     	;# 
  1331  018D                     	;# 
  1332  018E                     	;# 
  1333  0191                     	;# 
  1334  0191                     	;# 
  1335  0192                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0194                     	;# 
  1339  0195                     	;# 
  1340  0196                     	;# 
  1341  0197                     	;# 
  1342  0199                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019C                     	;# 
  1350  019D                     	;# 
  1351  019E                     	;# 
  1352  019F                     	;# 
  1353  020D                     	;# 
  1354  0210                     	;# 
  1355  0211                     	;# 
  1356  0211                     	;# 
  1357  0212                     	;# 
  1358  0212                     	;# 
  1359  0213                     	;# 
  1360  0213                     	;# 
  1361  0214                     	;# 
  1362  0214                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0216                     	;# 
  1367  0216                     	;# 
  1368  0217                     	;# 
  1369  0217                     	;# 
  1370  0291                     	;# 
  1371  0291                     	;# 
  1372  0292                     	;# 
  1373  0293                     	;# 
  1374  0298                     	;# 
  1375  0298                     	;# 
  1376  0299                     	;# 
  1377  029A                     	;# 
  1378  0394                     	;# 
  1379  0395                     	;# 
  1380  0396                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0015                     	;# 
  1411  0016                     	;# 
  1412  0016                     	;# 
  1413  0017                     	;# 
  1414  0018                     	;# 
  1415  0019                     	;# 
  1416  001A                     	;# 
  1417  001B                     	;# 
  1418  001C                     	;# 
  1419  008C                     	;# 
  1420  008D                     	;# 
  1421  008E                     	;# 
  1422  0090                     	;# 
  1423  0091                     	;# 
  1424  0092                     	;# 
  1425  0095                     	;# 
  1426  0096                     	;# 
  1427  0097                     	;# 
  1428  0099                     	;# 
  1429  009A                     	;# 
  1430  009B                     	;# 
  1431  009B                     	;# 
  1432  009C                     	;# 
  1433  009D                     	;# 
  1434  009E                     	;# 
  1435  010C                     	;# 
  1436  010D                     	;# 
  1437  010E                     	;# 
  1438  0116                     	;# 
  1439  0117                     	;# 
  1440  011D                     	;# 
  1441  018C                     	;# 
  1442  018D                     	;# 
  1443  018E                     	;# 
  1444  0191                     	;# 
  1445  0191                     	;# 
  1446  0192                     	;# 
  1447  0193                     	;# 
  1448  0193                     	;# 
  1449  0194                     	;# 
  1450  0195                     	;# 
  1451  0196                     	;# 
  1452  0197                     	;# 
  1453  0199                     	;# 
  1454  019A                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019C                     	;# 
  1460  019C                     	;# 
  1461  019D                     	;# 
  1462  019E                     	;# 
  1463  019F                     	;# 
  1464  020D                     	;# 
  1465  0210                     	;# 
  1466  0211                     	;# 
  1467  0211                     	;# 
  1468  0212                     	;# 
  1469  0212                     	;# 
  1470  0213                     	;# 
  1471  0213                     	;# 
  1472  0214                     	;# 
  1473  0214                     	;# 
  1474  0215                     	;# 
  1475  0215                     	;# 
  1476  0215                     	;# 
  1477  0216                     	;# 
  1478  0216                     	;# 
  1479  0217                     	;# 
  1480  0217                     	;# 
  1481  0291                     	;# 
  1482  0291                     	;# 
  1483  0292                     	;# 
  1484  0293                     	;# 
  1485  0298                     	;# 
  1486  0298                     	;# 
  1487  0299                     	;# 
  1488  029A                     	;# 
  1489  0394                     	;# 
  1490  0395                     	;# 
  1491  0396                     	;# 
  1492  0FE4                     	;# 
  1493  0FE5                     	;# 
  1494  0FE6                     	;# 
  1495  0FE7                     	;# 
  1496  0FE8                     	;# 
  1497  0FE9                     	;# 
  1498  0FEA                     	;# 
  1499  0FEB                     	;# 
  1500  0FED                     	;# 
  1501  0FEE                     	;# 
  1502  0FEF                     	;# 
  1503  0000                     	;# 
  1504  0001                     	;# 
  1505  0002                     	;# 
  1506  0003                     	;# 
  1507  0004                     	;# 
  1508  0005                     	;# 
  1509  0006                     	;# 
  1510  0007                     	;# 
  1511  0008                     	;# 
  1512  0009                     	;# 
  1513  000A                     	;# 
  1514  000B                     	;# 
  1515  000C                     	;# 
  1516  000D                     	;# 
  1517  000E                     	;# 
  1518  0010                     	;# 
  1519  0011                     	;# 
  1520  0012                     	;# 
  1521  0015                     	;# 
  1522  0016                     	;# 
  1523  0016                     	;# 
  1524  0017                     	;# 
  1525  0018                     	;# 
  1526  0019                     	;# 
  1527  001A                     	;# 
  1528  001B                     	;# 
  1529  001C                     	;# 
  1530  008C                     	;# 
  1531  008D                     	;# 
  1532  008E                     	;# 
  1533  0090                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0095                     	;# 
  1537  0096                     	;# 
  1538  0097                     	;# 
  1539  0099                     	;# 
  1540  009A                     	;# 
  1541  009B                     	;# 
  1542  009B                     	;# 
  1543  009C                     	;# 
  1544  009D                     	;# 
  1545  009E                     	;# 
  1546  010C                     	;# 
  1547  010D                     	;# 
  1548  010E                     	;# 
  1549  0116                     	;# 
  1550  0117                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0197                     	;# 
  1564  0199                     	;# 
  1565  019A                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019C                     	;# 
  1571  019C                     	;# 
  1572  019D                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  020D                     	;# 
  1576  0210                     	;# 
  1577  0211                     	;# 
  1578  0211                     	;# 
  1579  0212                     	;# 
  1580  0212                     	;# 
  1581  0213                     	;# 
  1582  0213                     	;# 
  1583  0214                     	;# 
  1584  0214                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0216                     	;# 
  1589  0216                     	;# 
  1590  0217                     	;# 
  1591  0217                     	;# 
  1592  0291                     	;# 
  1593  0291                     	;# 
  1594  0292                     	;# 
  1595  0293                     	;# 
  1596  0298                     	;# 
  1597  0298                     	;# 
  1598  0299                     	;# 
  1599  029A                     	;# 
  1600  0394                     	;# 
  1601  0395                     	;# 
  1602  0396                     	;# 
  1603  0FE4                     	;# 
  1604  0FE5                     	;# 
  1605  0FE6                     	;# 
  1606  0FE7                     	;# 
  1607  0FE8                     	;# 
  1608  0FE9                     	;# 
  1609  0FEA                     	;# 
  1610  0FEB                     	;# 
  1611  0FED                     	;# 
  1612  0FEE                     	;# 
  1613  0FEF                     	;# 
  1614  0000                     	;# 
  1615  0001                     	;# 
  1616  0002                     	;# 
  1617  0003                     	;# 
  1618  0004                     	;# 
  1619  0005                     	;# 
  1620  0006                     	;# 
  1621  0007                     	;# 
  1622  0008                     	;# 
  1623  0009                     	;# 
  1624  000A                     	;# 
  1625  000B                     	;# 
  1626  000C                     	;# 
  1627  000D                     	;# 
  1628  000E                     	;# 
  1629  0010                     	;# 
  1630  0011                     	;# 
  1631  0012                     	;# 
  1632  0015                     	;# 
  1633  0016                     	;# 
  1634  0016                     	;# 
  1635  0017                     	;# 
  1636  0018                     	;# 
  1637  0019                     	;# 
  1638  001A                     	;# 
  1639  001B                     	;# 
  1640  001C                     	;# 
  1641  008C                     	;# 
  1642  008D                     	;# 
  1643  008E                     	;# 
  1644  0090                     	;# 
  1645  0091                     	;# 
  1646  0092                     	;# 
  1647  0095                     	;# 
  1648  0096                     	;# 
  1649  0097                     	;# 
  1650  0099                     	;# 
  1651  009A                     	;# 
  1652  009B                     	;# 
  1653  009B                     	;# 
  1654  009C                     	;# 
  1655  009D                     	;# 
  1656  009E                     	;# 
  1657  010C                     	;# 
  1658  010D                     	;# 
  1659  010E                     	;# 
  1660  0116                     	;# 
  1661  0117                     	;# 
  1662  011D                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0194                     	;# 
  1672  0195                     	;# 
  1673  0196                     	;# 
  1674  0197                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019C                     	;# 
  1682  019C                     	;# 
  1683  019D                     	;# 
  1684  019E                     	;# 
  1685  019F                     	;# 
  1686  020D                     	;# 
  1687  0210                     	;# 
  1688  0211                     	;# 
  1689  0211                     	;# 
  1690  0212                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0213                     	;# 
  1694  0214                     	;# 
  1695  0214                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0215                     	;# 
  1699  0216                     	;# 
  1700  0216                     	;# 
  1701  0217                     	;# 
  1702  0217                     	;# 
  1703  0291                     	;# 
  1704  0291                     	;# 
  1705  0292                     	;# 
  1706  0293                     	;# 
  1707  0298                     	;# 
  1708  0298                     	;# 
  1709  0299                     	;# 
  1710  029A                     	;# 
  1711  0394                     	;# 
  1712  0395                     	;# 
  1713  0396                     	;# 
  1714  0FE4                     	;# 
  1715  0FE5                     	;# 
  1716  0FE6                     	;# 
  1717  0FE7                     	;# 
  1718  0FE8                     	;# 
  1719  0FE9                     	;# 
  1720  0FEA                     	;# 
  1721  0FEB                     	;# 
  1722  0FED                     	;# 
  1723  0FEE                     	;# 
  1724  0FEF                     	;# 
  1725  0000                     	;# 
  1726  0001                     	;# 
  1727  0002                     	;# 
  1728  0003                     	;# 
  1729  0004                     	;# 
  1730  0005                     	;# 
  1731  0006                     	;# 
  1732  0007                     	;# 
  1733  0008                     	;# 
  1734  0009                     	;# 
  1735  000A                     	;# 
  1736  000B                     	;# 
  1737  000C                     	;# 
  1738  000D                     	;# 
  1739  000E                     	;# 
  1740  0010                     	;# 
  1741  0011                     	;# 
  1742  0012                     	;# 
  1743  0015                     	;# 
  1744  0016                     	;# 
  1745  0016                     	;# 
  1746  0017                     	;# 
  1747  0018                     	;# 
  1748  0019                     	;# 
  1749  001A                     	;# 
  1750  001B                     	;# 
  1751  001C                     	;# 
  1752  008C                     	;# 
  1753  008D                     	;# 
  1754  008E                     	;# 
  1755  0090                     	;# 
  1756  0091                     	;# 
  1757  0092                     	;# 
  1758  0095                     	;# 
  1759  0096                     	;# 
  1760  0097                     	;# 
  1761  0099                     	;# 
  1762  009A                     	;# 
  1763  009B                     	;# 
  1764  009B                     	;# 
  1765  009C                     	;# 
  1766  009D                     	;# 
  1767  009E                     	;# 
  1768  010C                     	;# 
  1769  010D                     	;# 
  1770  010E                     	;# 
  1771  0116                     	;# 
  1772  0117                     	;# 
  1773  011D                     	;# 
  1774  018C                     	;# 
  1775  018D                     	;# 
  1776  018E                     	;# 
  1777  0191                     	;# 
  1778  0191                     	;# 
  1779  0192                     	;# 
  1780  0193                     	;# 
  1781  0193                     	;# 
  1782  0194                     	;# 
  1783  0195                     	;# 
  1784  0196                     	;# 
  1785  0197                     	;# 
  1786  0199                     	;# 
  1787  019A                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019C                     	;# 
  1793  019C                     	;# 
  1794  019D                     	;# 
  1795  019E                     	;# 
  1796  019F                     	;# 
  1797  020D                     	;# 
  1798  0210                     	;# 
  1799  0211                     	;# 
  1800  0211                     	;# 
  1801  0212                     	;# 
  1802  0212                     	;# 
  1803  0213                     	;# 
  1804  0213                     	;# 
  1805  0214                     	;# 
  1806  0214                     	;# 
  1807  0215                     	;# 
  1808  0215                     	;# 
  1809  0215                     	;# 
  1810  0216                     	;# 
  1811  0216                     	;# 
  1812  0217                     	;# 
  1813  0217                     	;# 
  1814  0291                     	;# 
  1815  0291                     	;# 
  1816  0292                     	;# 
  1817  0293                     	;# 
  1818  0298                     	;# 
  1819  0298                     	;# 
  1820  0299                     	;# 
  1821  029A                     	;# 
  1822  0394                     	;# 
  1823  0395                     	;# 
  1824  0396                     	;# 
  1825  0FE4                     	;# 
  1826  0FE5                     	;# 
  1827  0FE6                     	;# 
  1828  0FE7                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEF                     	;# 
  1836  0000                     	;# 
  1837  0001                     	;# 
  1838  0002                     	;# 
  1839  0003                     	;# 
  1840  0004                     	;# 
  1841  0005                     	;# 
  1842  0006                     	;# 
  1843  0007                     	;# 
  1844  0008                     	;# 
  1845  0009                     	;# 
  1846  000A                     	;# 
  1847  000B                     	;# 
  1848  000C                     	;# 
  1849  000D                     	;# 
  1850  000E                     	;# 
  1851  0010                     	;# 
  1852  0011                     	;# 
  1853  0012                     	;# 
  1854  0015                     	;# 
  1855  0016                     	;# 
  1856  0016                     	;# 
  1857  0017                     	;# 
  1858  0018                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  008C                     	;# 
  1864  008D                     	;# 
  1865  008E                     	;# 
  1866  0090                     	;# 
  1867  0091                     	;# 
  1868  0092                     	;# 
  1869  0095                     	;# 
  1870  0096                     	;# 
  1871  0097                     	;# 
  1872  0099                     	;# 
  1873  009A                     	;# 
  1874  009B                     	;# 
  1875  009B                     	;# 
  1876  009C                     	;# 
  1877  009D                     	;# 
  1878  009E                     	;# 
  1879  010C                     	;# 
  1880  010D                     	;# 
  1881  010E                     	;# 
  1882  0116                     	;# 
  1883  0117                     	;# 
  1884  011D                     	;# 
  1885  018C                     	;# 
  1886  018D                     	;# 
  1887  018E                     	;# 
  1888  0191                     	;# 
  1889  0191                     	;# 
  1890  0192                     	;# 
  1891  0193                     	;# 
  1892  0193                     	;# 
  1893  0194                     	;# 
  1894  0195                     	;# 
  1895  0196                     	;# 
  1896  0197                     	;# 
  1897  0199                     	;# 
  1898  019A                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019C                     	;# 
  1904  019C                     	;# 
  1905  019D                     	;# 
  1906  019E                     	;# 
  1907  019F                     	;# 
  1908  020D                     	;# 
  1909  0210                     	;# 
  1910  0211                     	;# 
  1911  0211                     	;# 
  1912  0212                     	;# 
  1913  0212                     	;# 
  1914  0213                     	;# 
  1915  0213                     	;# 
  1916  0214                     	;# 
  1917  0214                     	;# 
  1918  0215                     	;# 
  1919  0215                     	;# 
  1920  0215                     	;# 
  1921  0216                     	;# 
  1922  0216                     	;# 
  1923  0217                     	;# 
  1924  0217                     	;# 
  1925  0291                     	;# 
  1926  0291                     	;# 
  1927  0292                     	;# 
  1928  0293                     	;# 
  1929  0298                     	;# 
  1930  0298                     	;# 
  1931  0299                     	;# 
  1932  029A                     	;# 
  1933  0394                     	;# 
  1934  0395                     	;# 
  1935  0396                     	;# 
  1936  0FE4                     	;# 
  1937  0FE5                     	;# 
  1938  0FE6                     	;# 
  1939  0FE7                     	;# 
  1940  0FE8                     	;# 
  1941  0FE9                     	;# 
  1942  0FEA                     	;# 
  1943  0FEB                     	;# 
  1944  0FED                     	;# 
  1945  0FEE                     	;# 
  1946  0FEF                     	;# 
  1947  0000                     	;# 
  1948  0001                     	;# 
  1949  0002                     	;# 
  1950  0003                     	;# 
  1951  0004                     	;# 
  1952  0005                     	;# 
  1953  0006                     	;# 
  1954  0007                     	;# 
  1955  0008                     	;# 
  1956  0009                     	;# 
  1957  000A                     	;# 
  1958  000B                     	;# 
  1959  000C                     	;# 
  1960  000D                     	;# 
  1961  000E                     	;# 
  1962  0010                     	;# 
  1963  0011                     	;# 
  1964  0012                     	;# 
  1965  0015                     	;# 
  1966  0016                     	;# 
  1967  0016                     	;# 
  1968  0017                     	;# 
  1969  0018                     	;# 
  1970  0019                     	;# 
  1971  001A                     	;# 
  1972  001B                     	;# 
  1973  001C                     	;# 
  1974  008C                     	;# 
  1975  008D                     	;# 
  1976  008E                     	;# 
  1977  0090                     	;# 
  1978  0091                     	;# 
  1979  0092                     	;# 
  1980  0095                     	;# 
  1981  0096                     	;# 
  1982  0097                     	;# 
  1983  0099                     	;# 
  1984  009A                     	;# 
  1985  009B                     	;# 
  1986  009B                     	;# 
  1987  009C                     	;# 
  1988  009D                     	;# 
  1989  009E                     	;# 
  1990  010C                     	;# 
  1991  010D                     	;# 
  1992  010E                     	;# 
  1993  0116                     	;# 
  1994  0117                     	;# 
  1995  011D                     	;# 
  1996  018C                     	;# 
  1997  018D                     	;# 
  1998  018E                     	;# 
  1999  0191                     	;# 
  2000  0191                     	;# 
  2001  0192                     	;# 
  2002  0193                     	;# 
  2003  0193                     	;# 
  2004  0194                     	;# 
  2005  0195                     	;# 
  2006  0196                     	;# 
  2007  0197                     	;# 
  2008  0199                     	;# 
  2009  019A                     	;# 
  2010  019B                     	;# 
  2011  019B                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019C                     	;# 
  2015  019C                     	;# 
  2016  019D                     	;# 
  2017  019E                     	;# 
  2018  019F                     	;# 
  2019  020D                     	;# 
  2020  0210                     	;# 
  2021  0211                     	;# 
  2022  0211                     	;# 
  2023  0212                     	;# 
  2024  0212                     	;# 
  2025  0213                     	;# 
  2026  0213                     	;# 
  2027  0214                     	;# 
  2028  0214                     	;# 
  2029  0215                     	;# 
  2030  0215                     	;# 
  2031  0215                     	;# 
  2032  0216                     	;# 
  2033  0216                     	;# 
  2034  0217                     	;# 
  2035  0217                     	;# 
  2036  0291                     	;# 
  2037  0291                     	;# 
  2038  0292                     	;# 
  2039  0293                     	;# 
  2040  0298                     	;# 
  2041  0298                     	;# 
  2042  0299                     	;# 
  2043  029A                     	;# 
  2044  0394                     	;# 
  2045  0395                     	;# 
  2046  0396                     	;# 
  2047  0FE4                     	;# 
  2048  0FE5                     	;# 
  2049  0FE6                     	;# 
  2050  0FE7                     	;# 
  2051  0FE8                     	;# 
  2052  0FE9                     	;# 
  2053  0FEA                     	;# 
  2054  0FEB                     	;# 
  2055  0FED                     	;# 
  2056  0FEE                     	;# 
  2057  0FEF                     	;# 
  2058  0000                     	;# 
  2059  0001                     	;# 
  2060  0002                     	;# 
  2061  0003                     	;# 
  2062  0004                     	;# 
  2063  0005                     	;# 
  2064  0006                     	;# 
  2065  0007                     	;# 
  2066  0008                     	;# 
  2067  0009                     	;# 
  2068  000A                     	;# 
  2069  000B                     	;# 
  2070  000C                     	;# 
  2071  000D                     	;# 
  2072  000E                     	;# 
  2073  0010                     	;# 
  2074  0011                     	;# 
  2075  0012                     	;# 
  2076  0015                     	;# 
  2077  0016                     	;# 
  2078  0016                     	;# 
  2079  0017                     	;# 
  2080  0018                     	;# 
  2081  0019                     	;# 
  2082  001A                     	;# 
  2083  001B                     	;# 
  2084  001C                     	;# 
  2085  008C                     	;# 
  2086  008D                     	;# 
  2087  008E                     	;# 
  2088  0090                     	;# 
  2089  0091                     	;# 
  2090  0092                     	;# 
  2091  0095                     	;# 
  2092  0096                     	;# 
  2093  0097                     	;# 
  2094  0099                     	;# 
  2095  009A                     	;# 
  2096  009B                     	;# 
  2097  009B                     	;# 
  2098  009C                     	;# 
  2099  009D                     	;# 
  2100  009E                     	;# 
  2101  010C                     	;# 
  2102  010D                     	;# 
  2103  010E                     	;# 
  2104  0116                     	;# 
  2105  0117                     	;# 
  2106  011D                     	;# 
  2107  018C                     	;# 
  2108  018D                     	;# 
  2109  018E                     	;# 
  2110  0191                     	;# 
  2111  0191                     	;# 
  2112  0192                     	;# 
  2113  0193                     	;# 
  2114  0193                     	;# 
  2115  0194                     	;# 
  2116  0195                     	;# 
  2117  0196                     	;# 
  2118  0197                     	;# 
  2119  0199                     	;# 
  2120  019A                     	;# 
  2121  019B                     	;# 
  2122  019B                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019C                     	;# 
  2126  019C                     	;# 
  2127  019D                     	;# 
  2128  019E                     	;# 
  2129  019F                     	;# 
  2130  020D                     	;# 
  2131  0210                     	;# 
  2132  0211                     	;# 
  2133  0211                     	;# 
  2134  0212                     	;# 
  2135  0212                     	;# 
  2136  0213                     	;# 
  2137  0213                     	;# 
  2138  0214                     	;# 
  2139  0214                     	;# 
  2140  0215                     	;# 
  2141  0215                     	;# 
  2142  0215                     	;# 
  2143  0216                     	;# 
  2144  0216                     	;# 
  2145  0217                     	;# 
  2146  0217                     	;# 
  2147  0291                     	;# 
  2148  0291                     	;# 
  2149  0292                     	;# 
  2150  0293                     	;# 
  2151  0298                     	;# 
  2152  0298                     	;# 
  2153  0299                     	;# 
  2154  029A                     	;# 
  2155  0394                     	;# 
  2156  0395                     	;# 
  2157  0396                     	;# 
  2158  0FE4                     	;# 
  2159  0FE5                     	;# 
  2160  0FE6                     	;# 
  2161  0FE7                     	;# 
  2162  0FE8                     	;# 
  2163  0FE9                     	;# 
  2164  0FEA                     	;# 
  2165  0FEB                     	;# 
  2166  0FED                     	;# 
  2167  0FEE                     	;# 
  2168  0FEF                     	;# 
  2169                           
  2170                           	psect	idataBANK3
  2171  1F33                     __pidataBANK3:	
  2172                           
  2173                           ;initializer for __product
  2174  1F33  3463               	retlw	99
  2175  1F34  3402               	retlw	2
  2176  1F35  3400               	retlw	0
  2177  1F36  3400               	retlw	0
  2178  1F37  3400               	retlw	0
  2179  1F38  3400               	retlw	0
  2180  1F39  3400               	retlw	0
  2181  1F3A  3400               	retlw	0
  2182  1F3B  3400               	retlw	0
  2183  1F3C  3400               	retlw	0
  2184  1F3D  3400               	retlw	0
  2185  1F3E  3400               	retlw	0
  2186  1F3F  34FF               	retlw	255
  2187  1F40  34FF               	retlw	255
  2188  1F41  34FF               	retlw	255
  2189  1F42  3400               	retlw	0
  2190  1F43  3400               	retlw	0
  2191  1F44  3400               	retlw	0
  2192  1F45  3400               	retlw	0
  2193  1F46  3400               	retlw	0
  2194  1F47  3400               	retlw	0
  2195  1F48  3400               	retlw	0
  2196  1F49  3400               	retlw	0
  2197  1F4A  3400               	retlw	0
  2198  1F4B  3400               	retlw	0
  2199  1F4C  3400               	retlw	0
  2200  1F4D  3400               	retlw	0
  2201  1F4E  3400               	retlw	0
  2202  1F4F  3400               	retlw	0
  2203  1F50  3400               	retlw	0
  2204  1F51  3400               	retlw	0
  2205  1F52  3400               	retlw	0
  2206                           
  2207                           	psect	stringtext
  2208  1800                     __pstringtext:	
  2209  1800                     _CC2500_registers_address:	
  2210  1800  3403               	retlw	3
  2211  1801  3416               	retlw	22
  2212  1802  3417               	retlw	23
  2213  1803  341E               	retlw	30
  2214  1804  341F               	retlw	31
  2215  1805  3420               	retlw	32
  2216  1806  342A               	retlw	42
  2217  1807  342B               	retlw	43
  2218  1808  340B               	retlw	11
  2219  1809  340C               	retlw	12
  2220  180A  340D               	retlw	13
  2221  180B  340E               	retlw	14
  2222  180C  340F               	retlw	15
  2223  180D  3410               	retlw	16
  2224  180E  3411               	retlw	17
  2225  180F  3412               	retlw	18
  2226  1810  3413               	retlw	19
  2227  1811  3414               	retlw	20
  2228  1812  340A               	retlw	10
  2229  1813  3415               	retlw	21
  2230  1814  3421               	retlw	33
  2231  1815  3422               	retlw	34
  2232  1816  3418               	retlw	24
  2233  1817  3419               	retlw	25
  2234  1818  341A               	retlw	26
  2235  1819  341B               	retlw	27
  2236  181A  341C               	retlw	28
  2237  181B  341D               	retlw	29
  2238  181C  3423               	retlw	35
  2239  181D  3424               	retlw	36
  2240  181E  3425               	retlw	37
  2241  181F  3426               	retlw	38
  2242  1820  3429               	retlw	41
  2243  1821  342C               	retlw	44
  2244  1822  342D               	retlw	45
  2245  1823  342E               	retlw	46
  2246  1824  3400               	retlw	0
  2247  1825  3401               	retlw	1
  2248  1826  3402               	retlw	2
  2249  1827  3407               	retlw	7
  2250  1828  3408               	retlw	8
  2251  1829  3409               	retlw	9
  2252  182A  3406               	retlw	6
  2253  182B  3404               	retlw	4
  2254  182C  3405               	retlw	5
  2255  182D  3427               	retlw	39
  2256  182E  3428               	retlw	40
  2257  182F                     __end_of_CC2500_registers_address:	
  2258  182F                     _CC2500_rfSettings:	
  2259  182F  3407               	retlw	7
  2260  1830  3407               	retlw	7
  2261  1831  3430               	retlw	48
  2262  1832  3487               	retlw	135
  2263  1833  346B               	retlw	107
  2264  1834  34F8               	retlw	248
  2265  1835  347F               	retlw	127
  2266  1836  343F               	retlw	63
  2267  1837  3409               	retlw	9
  2268  1838  3400               	retlw	0
  2269  1839  345C               	retlw	92
  2270  183A  34A7               	retlw	167
  2271  183B  3462               	retlw	98
  2272  183C  3486               	retlw	134
  2273  183D  3483               	retlw	131
  2274  183E  3403               	retlw	3
  2275  183F  3422               	retlw	34
  2276  1840  34F8               	retlw	248
  2277  1841  3400               	retlw	0
  2278  1842  3444               	retlw	68
  2279  1843  34B6               	retlw	182
  2280  1844  3410               	retlw	16
  2281  1845  3418               	retlw	24
  2282  1846  341D               	retlw	29
  2283  1847  341C               	retlw	28
  2284  1848  34C7               	retlw	199
  2285  1849  3400               	retlw	0
  2286  184A  34B2               	retlw	178
  2287  184B  34EA               	retlw	234
  2288  184C  340A               	retlw	10
  2289  184D  3400               	retlw	0
  2290  184E  3411               	retlw	17
  2291  184F  3459               	retlw	89
  2292  1850  3488               	retlw	136
  2293  1851  3431               	retlw	49
  2294  1852  340B               	retlw	11
  2295  1853  342F               	retlw	47
  2296  1854  342E               	retlw	46
  2297  1855  3406               	retlw	6
  2298  1856  3404               	retlw	4
  2299  1857  3405               	retlw	5
  2300  1858  3400               	retlw	0
  2301  1859  3430               	retlw	48
  2302  185A  34D3               	retlw	211
  2303  185B  3491               	retlw	145
  2304  185C  3441               	retlw	65
  2305  185D  3400               	retlw	0
  2306  185E                     __end_of_CC2500_rfSettings:	
  2307  185E                     _CC2500_patable_vaule:	
  2308  185E  34FE               	retlw	254
  2309  185F  34FE               	retlw	254
  2310  1860  34FE               	retlw	254
  2311  1861  34FE               	retlw	254
  2312  1862  34FE               	retlw	254
  2313  1863  34FE               	retlw	254
  2314  1864  34FE               	retlw	254
  2315  1865  34FE               	retlw	254
  2316  1866                     __end_of_CC2500_patable_vaule:	
  2317                           
  2318                           	psect	nvBANK1
  2319  00EE                     __pnvBANK1:	
  2320  00EE                     _product:	
  2321  00EE                     	ds	1
  2322  000C                     _PORTA	set	12
  2323  000D                     _PORTB	set	13
  2324  000E                     _PORTC	set	14
  2325  0018                     _T1CON	set	24
  2326  0017                     _TMR1H	set	23
  2327  0016                     _TMR1L	set	22
  2328  005F                     _GIE	set	95
  2329  005B                     _IOCIE	set	91
  2330  0058                     _IOCIF	set	88
  2331  005E                     _PEIE	set	94
  2332  0060                     _RA0	set	96
  2333  0064                     _RA4	set	100
  2334  0066                     _RA6	set	102
  2335  0067                     _RA7	set	103
  2336  0068                     _RB0	set	104
  2337  0069                     _RB1	set	105
  2338  006A                     _RB2	set	106
  2339  006B                     _RB3	set	107
  2340  006D                     _RB5	set	109
  2341  0070                     _RC0	set	112
  2342  0071                     _RC1	set	113
  2343  0073                     _RC3	set	115
  2344  0074                     _RC4	set	116
  2345  0075                     _RC5	set	117
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0021                     start_initialization:	
  2386  0021                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITCOMMON
  2389  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BITBANK1
  2392  0022  0021               	movlb	1	; select bank1
  2393  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0024  30A0               	movlw	low __pbssBANK1
  2397  0025  0084               	movwf	4
  2398  0026  3000               	movlw	high __pbssBANK1
  2399  0027  0085               	movwf	5
  2400  0028  3046               	movlw	70
  2401  0029  319A  2274  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002C  3020               	movlw	low __pbssBANK2
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK2
  2407  002F  0085               	movwf	5
  2408  0030  304C               	movlw	76
  2409  0031  319A  2274  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0034  30A0               	movlw	low __pbssBANK3
  2413  0035  0084               	movwf	4
  2414  0036  3001               	movlw	high __pbssBANK3
  2415  0037  0085               	movwf	5
  2416  0038  302C               	movlw	44
  2417  0039  319A  2274  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003C  3020               	movlw	low __pbssBANK4
  2421  003D  0084               	movwf	4
  2422  003E  3002               	movlw	high __pbssBANK4
  2423  003F  0085               	movwf	5
  2424  0040  3025               	movlw	37
  2425  0041  319A  2274  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK3
  2428  0044  3033               	movlw	low __pidataBANK3
  2429  0045  0084               	movwf	4
  2430  0046  309F               	movlw	(high __pidataBANK3)| (0+128)
  2431  0047  0085               	movwf	5
  2432  0048  30CC               	movlw	low __pdataBANK3
  2433  0049  0086               	movwf	6
  2434  004A  3001               	movlw	high __pdataBANK3
  2435  004B  0087               	movwf	7
  2436  004C  3020               	movlw	32
  2437  004D  319A  226E         	fcall	init_ram
  2438  004F                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  004F                     __end_of__initialization:	
  2442  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0050  0020               	movlb	0
  2444  0051  3194  2C7E         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03E8                     __pbitbssCOMMON:	
  2448  03E8                     _Transceive_OK:	
  2449  03E8                     	ds	1
  2450                           
  2451                           	psect	bitbssBANK1
  2452  0778                     __pbitbssBANK1:	
  2453  0778                     _Receive_OK:	
  2454  0778                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _RF1:	
  2459  00A0                     	ds	15
  2460  00AF                     _myMain:	
  2461  00AF                     	ds	13
  2462  00BC                     _DimmerIntr1:	
  2463  00BC                     	ds	12
  2464  00C8                     _CRC:	
  2465  00C8                     	ds	1
  2466  00C9                     _Cmd:	
  2467  00C9                     	ds	1
  2468  00CA                     _DelayOff:	
  2469  00CA                     	ds	1
  2470  00CB                     _DimmerIntr:	
  2471  00CB                     	ds	1
  2472  00CC                     _DimmerLights:	
  2473  00CC                     	ds	1
  2474  00CD                     _LED:	
  2475  00CD                     	ds	1
  2476  00CE                     _Light:	
  2477  00CE                     	ds	1
  2478  00CF                     _RSSI:	
  2479  00CF                     	ds	1
  2480  00D0                     _Rx_Length:	
  2481  00D0                     	ds	1
  2482  00D1                     _SPI0Buffer:	
  2483  00D1                     	ds	1
  2484  00D2                     _Sw:	
  2485  00D2                     	ds	1
  2486  00D3                     _SwDetect:	
  2487  00D3                     	ds	1
  2488  00D4                     _Tx_Length:	
  2489  00D4                     	ds	1
  2490  00D5                     _r_address:	
  2491  00D5                     	ds	1
  2492  00D6                     _r_data:	
  2493  00D6                     	ds	1
  2494  00D7                     _s_data:	
  2495  00D7                     	ds	1
  2496  00D8                     _Temp:	
  2497  00D8                     	ds	14
  2498                           
  2499                           	psect	bssBANK2
  2500  0120                     __pbssBANK2:	
  2501  0120                     _Buz1:	
  2502  0120                     	ds	12
  2503  012C                     _Dimmer:	
  2504  012C                     	ds	5
  2505  0131                     _Timer1:	
  2506  0131                     	ds	3
  2507  0134                     _RF_Count:	
  2508  0134                     	ds	2
  2509  0136                     _WDT:	
  2510  0136                     	ds	2
  2511  0138                     _Load:	
  2512  0138                     	ds	40
  2513  0160                     _DimmerLights1:	
  2514  0160                     	ds	8
  2515  0168                     _VarErrLED:	
  2516  0168                     	ds	4
  2517                           
  2518                           	psect	bssBANK3
  2519  01A0                     __pbssBANK3:	
  2520  01A0                     _RF_Data:	
  2521  01A0                     	ds	30
  2522  01BE                     _Sw1:	
  2523  01BE                     	ds	9
  2524  01C7                     _DlySw1:	
  2525  01C7                     	ds	5
  2526                           
  2527                           	psect	dataBANK3
  2528  01CC                     __pdataBANK3:	
  2529  01CC                     __product:	
  2530  01CC                     	ds	32
  2531                           
  2532                           	psect	bssBANK4
  2533  0220                     __pbssBANK4:	
  2534  0220                     _Memory:	
  2535  0220                     	ds	37
  2536                           
  2537                           	psect	clrtext
  2538  1A74                     clear_ram0:	
  2539                           ;	Called with FSR0 containing the base address, and
  2540                           ;	WREG with the size to clear
  2541                           
  2542  1A74  0064               	clrwdt	;clear the watchdog before getting into this loop
  2543  1A75                     clrloop0:	
  2544  1A75  0180               	clrf	0	;clear RAM location pointed to by FSR
  2545  1A76  3101               	addfsr 0,1
  2546  1A77  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2547  1A78  2A75               	goto	clrloop0	;have we reached the end yet?
  2548  1A79  3400               	retlw	0	;all done for this memory range, return
  2549                           
  2550                           	psect	inittext
  2551  1A6E                     init_ram:	
  2552  1A6E  00FE               	movwf	126
  2553  1A6F                     initloop:	
  2554  1A6F  0012               	moviw fsr0++
  2555  1A70  001E               	movwi fsr1++
  2556  1A71  0BFE               	decfsz	126,f
  2557  1A72  2A6F               	goto	initloop
  2558  1A73  3400               	retlw	0
  2559                           
  2560                           	psect	cstackBANK1
  2561  00E6                     __pcstackBANK1:	
  2562  00E6                     ??_getRxData:	
  2563  00E6                     setDimmerLights_OnOff@lights:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566                           
  2567                           ; 1 bytes @ 0x0
  2568  00E6                     	ds	1
  2569  00E7                     setDimmerLights_Main@lights:	
  2570  00E7                     getRxData@error:	
  2571                           ; 1 bytes @ 0x1
  2572                           
  2573                           
  2574                           ; 1 bytes @ 0x1
  2575  00E7                     	ds	1
  2576  00E8                     ??_setRF_Main:	
  2577                           
  2578                           ; 0 bytes @ 0x2
  2579  00E8                     	ds	1
  2580  00E9                     setRF_Main@error:	
  2581                           
  2582                           ; 1 bytes @ 0x3
  2583  00E9                     	ds	1
  2584  00EA                     ?_main:	
  2585  00EA                     main@argc:	
  2586                           ; 2 bytes @ 0x4
  2587                           
  2588                           
  2589                           ; 2 bytes @ 0x4
  2590  00EA                     	ds	2
  2591  00EC                     main@argv:	
  2592                           
  2593                           ; 2 bytes @ 0x6
  2594  00EC                     	ds	2
  2595                           
  2596                           	psect	cstackCOMMON
  2597  0070                     __pcstackCOMMON:	
  2598  0070                     ?_CC2500_WriteCommand:	
  2599  0070                     ?_RF_Timeout_Counter:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setRF_TimeoutCleared:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadStatus:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_PowerRST:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitSetREG:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitPATable:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearTXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearRXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_FrequencyCabr:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_SIDLEMode:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_SwOn:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_SwOff:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setMemory_Modify:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Line:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_DimmingClose:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setTxData:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setRF_TransceiveGO:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setLED_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Fosc_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IO_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_ADC_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IOC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_WDT_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_TMR1_ISR:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Timeout_Counter:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_set_TimeoutCleared:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Flash_Memory_Write:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Flash_Memory_Modify:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_WDT_Clearing:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_myMain_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Temp_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Load_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Switch_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_RF_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_getLoad_AD:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_getTemp_AD:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_my_MainTimer:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Temp_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Load_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Switch_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_RF_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Exception_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setLoad_AH_AL_Restore:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setTemp_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setTemp_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setOverTemp_ADV_Restore:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setRF_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRF_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_RF_RxDisable:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_getRxData:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setLog_Code:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setControl_Lights_Table:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setRFSW_Control:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setRFSW_AdjControl:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setRF_AdjControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setSw_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setSw_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_Buzzer_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_Buzzer_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_CC2500_TxData:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_CC2500_RxData:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_CC2500_PowerOnInitial:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayOffPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DelayOff_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DelayOff_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntr_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_SelectPointer:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_DimmingOn:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_TMR_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ??_DimmerLights_TMR_1:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_IOC_1:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_LedPointSelect:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_LED_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LED_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Mcu_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_ISR:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Flash_Memory_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setMemory_LoopSave:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_WDT_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_setRF_Learn:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_TouchPower:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_SwPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_getDimmerLights_Status:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_getDimmerLights_ValueToPercent:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_PercentToValue:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getLoad_OK:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_All_Error_Status:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getMain_All_LightsStatus:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_Allow_Condition:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getCmd_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_Flash_Memory_Read:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getAll_Sw_KeyStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getRF_KeyStatus:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getSw_KeyStatus:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDelayOff_GO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerIntr_DimmingValue:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmerLights_Line:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmer_LoadGO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmer_Load_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getMain_Lights_Count:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?i1___lbdiv:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     setDimmerLights_Initialization@lights:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     getDimmerLights_Allow_Condition@lights:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getSw_KeyStatus@sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     i1___lbdiv@divisor:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959                           
  2960                           ; 1 bytes @ 0x0
  2961  0070                     	ds	1
  2962  0071                     ??_TMR1_ISR:	
  2963  0071                     ??i1___lbdiv:	
  2964                           ; 0 bytes @ 0x1
  2965                           
  2966                           
  2967                           ; 0 bytes @ 0x1
  2968  0071                     	ds	1
  2969  0072                     i1___lbdiv@dividend:	
  2970                           
  2971                           ; 1 bytes @ 0x2
  2972  0072                     	ds	1
  2973  0073                     i1___lbdiv@counter:	
  2974                           
  2975                           ; 1 bytes @ 0x3
  2976  0073                     	ds	1
  2977  0074                     i1___lbdiv@quotient:	
  2978                           
  2979                           ; 1 bytes @ 0x4
  2980  0074                     	ds	1
  2981  0075                     ?i1_Division:	
  2982  0075                     i1Division@num:	
  2983                           ; 1 bytes @ 0x5
  2984                           
  2985                           
  2986                           ; 1 bytes @ 0x5
  2987  0075                     	ds	1
  2988  0076                     ??i1_Division:	
  2989                           
  2990                           ; 0 bytes @ 0x6
  2991  0076                     	ds	2
  2992  0078                     i1Division@value:	
  2993                           
  2994                           ; 1 bytes @ 0x8
  2995  0078                     	ds	1
  2996  0079                     i1Division@result:	
  2997                           
  2998                           ; 1 bytes @ 0x9
  2999  0079                     	ds	1
  3000  007A                     ??_DimmerLights_IOC_1:	
  3001                           
  3002                           ; 0 bytes @ 0xA
  3003  007A                     	ds	2
  3004  007C                     ??_IOC_ISR:	
  3005  007C                     ??_ISR:	
  3006                           ; 0 bytes @ 0xC
  3007                           
  3008                           
  3009                           ; 0 bytes @ 0xC
  3010  007C                     	ds	1
  3011                           
  3012                           	psect	cstackBANK0
  3013  0020                     __pcstackBANK0:	
  3014  0020                     ??_RF_Timeout_Counter:	
  3015  0020                     ??_setRF_TimeoutCleared:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_CC2500_WriteByte:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_CC2500_ReadByte:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ?_DelayTime_1us:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_setMemory_Modify:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_setDimmerLights_Initialization:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_getLoad_OK:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_getMain_All_Error_Status:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_getMain_All_LightsStatus:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setDimmerLights_Line:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getCmd_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ?_setCmd_Status:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setTxData:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setRF_TransceiveGO:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Fosc_Set:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_IO_Set:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_TMR1_Set:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_ADC_Set:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_IOC_Set:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_WDT_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Timeout_Counter:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_set_TimeoutCleared:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_Flash_Memory_Read:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ?_setMemory_Data:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_Flash_Memory_Write:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getAll_Sw_KeyStatus:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_WDT_Clearing:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_myMain_Initialization:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Temp_Initialization:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_setLoad_AH_AL_Restore:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setTemp_Initialization:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setOverTemp_ADV_Restore:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setRF_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_getRF_KeyStatus:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getSw_KeyStatus:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_Buzzer_Initialization:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_Buzzer_Main:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_DelayOffPointSelect:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?_setDimmerIntr_ControlStatus:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getDimmerIntr_DimmingValue:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ?_setDimmerIntr_Dimming_RF:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ??_DimmerLights_SelectPointer:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getDimmerLights_Line:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_getDimmer_LoadGO:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmer_Load_Status:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_LedPointSelect:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_Flash_Memory_Unlock:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_Flash_Memory_Erasing:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_setMemory_LoopSave:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_WDT_Main:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_getMain_Lights_Count:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_setRF_Learn:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_TouchPower:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_SwPointSelect:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ?___bmul:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ?___lbdiv:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0020                     ?_getBuz_GO:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0020                     ?_getAD:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195  0020                     ?___wmul:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ?___awdiv:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ?___lwdiv:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204  0020                     ?___ftpack:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207  0020                     setDimmerIntr_ControlStatus@command:	
  3208                           ; 3 bytes @ 0x0
  3209                           
  3210  0020                     setDimmerIntr_Dimming_Sw@command:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0020                     setDimmerIntr_Dimming_RF@command:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setDimmerLights_Line@lights:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getDimmerLights_Line@line:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getDimmer_LoadGO@loadgo:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     getDimmer_Load_Status@status:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     getAD@adcon1:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     setMemory_Data@data:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getMain_All_LightsStatus@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     getMain_Lights_Count@count:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     setCmd_Status@cmd:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getCmd_Status@number:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     getLoad_OK@ok:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     ___bmul@multiplicand:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     ___lbdiv@divisor:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0020                     DelayTime_1us@count:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0020                     ___wmul@multiplier:	
  3262                           ; 2 bytes @ 0x0
  3263                           
  3264  0020                     ___awdiv@divisor:	
  3265                           ; 2 bytes @ 0x0
  3266                           
  3267  0020                     ___lwdiv@divisor:	
  3268                           ; 2 bytes @ 0x0
  3269                           
  3270  0020                     ___ftpack@arg:	
  3271                           ; 2 bytes @ 0x0
  3272                           
  3273                           
  3274                           ; 3 bytes @ 0x0
  3275  0020                     	ds	1
  3276  0021                     ??_getDimmerLights_Allow_Condition:	
  3277  0021                     ??_setCmd_Status:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_setMemory_Data:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??_RF_Initialization:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??_setDimmerIntr_ControlStatus:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     ??_setDimmerIntr_Dimming_RF:	
  3293                           ; 0 bytes @ 0x1
  3294                           
  3295  0021                     ??_Mcu_Initialization:	
  3296                           ; 0 bytes @ 0x1
  3297                           
  3298  0021                     ??___bmul:	
  3299                           ; 0 bytes @ 0x1
  3300                           
  3301  0021                     ??___lbdiv:	
  3302                           ; 0 bytes @ 0x1
  3303                           
  3304  0021                     CC2500_WriteByte@loop_a:	
  3305                           ; 0 bytes @ 0x1
  3306                           
  3307  0021                     CC2500_ReadByte@loop_b:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     DelayOffPointSelect@sw:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getDimmerIntr_DimmingValue@lights:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     DimmerLights_SelectPointer@lights:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     LedPointSelect@led:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     Flash_Memory_Read@i:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     Flash_Memory_Write@i:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setMemory_Modify@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     setMemory_LoopSave@command:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     getMain_Lights_Count@status1:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getCmd_Status@cmd:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     setLoad_AH_AL_Restore@i:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     setRF_Learn@command:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     getRF_KeyStatus@key:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     setRF_TransceiveGO@command:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     SwPointSelect@sw:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     getSw_KeyStatus@status:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     getAll_Sw_KeyStatus@status:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361  0021                     _getMain_All_Error_Status$3612:	
  3362                           ; 1 bytes @ 0x1
  3363                           
  3364  0021                     setOverTemp_ADV_Restore@i:	
  3365                           ; 2 bytes @ 0x1
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x1
  3369  0021                     	ds	1
  3370  0022                     ??_CC2500_WriteCommand:	
  3371  0022                     ??_CC2500_ReadStatus:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_DelayTime_1us:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ?_CC2500_WriteREG:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_DlyOff_Initialization:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ??_getDimmerLights_Status:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setDimmerLights_SwOff:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ?_setLED:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     ??_setLED_Main:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     ??_Load_Initialization:	
  3396                           ; 0 bytes @ 0x2
  3397                           
  3398  0022                     ??_getBuz_GO:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_getDelayOff_GO:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     ??_setDimmerLights_DimmingOn:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     ?_setDimmerLights_DimmingRun:	
  3408                           ; 0 bytes @ 0x2
  3409                           
  3410  0022                     CC2500_WriteREG@value:	
  3411                           ; 0 bytes @ 0x2
  3412                           
  3413  0022                     DlyOff_Initialization@sw:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     getDelayOff_GO@sw:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     setDimmerIntr_ControlStatus@lights:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     getDimmerIntr_DimmingValue@value:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setDimmerIntr_Dimming_RF@lights:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     setDimmerLights_SwOff@sw:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     setDimmerLights_DimmingOn@sw:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     getDimmerLights_Allow_Condition@allow:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     getDimmerLights_Status@lights:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     setDimmerLights_DimmingRun@command:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     setLED@command:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     Flash_Memory_Read@address:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     setMemory_Data@address:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     setCmd_Status@number:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     _getRF_KeyStatus$5410:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     _getSw_KeyStatus$6464:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     _getAll_Sw_KeyStatus$6467:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     ___lbdiv@dividend:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     DelayTime_1us@i:	
  3474                           ; 1 bytes @ 0x2
  3475                           
  3476  0022                     ___wmul@multiplicand:	
  3477                           ; 2 bytes @ 0x2
  3478                           
  3479  0022                     ___awdiv@dividend:	
  3480                           ; 2 bytes @ 0x2
  3481                           
  3482  0022                     ___lwdiv@dividend:	
  3483                           ; 2 bytes @ 0x2
  3484                           
  3485                           
  3486                           ; 2 bytes @ 0x2
  3487  0022                     	ds	1
  3488  0023                     ??_CC2500_WriteREG:	
  3489  0023                     ??_setLED:	
  3490                           ; 0 bytes @ 0x3
  3491                           
  3492  0023                     ??_setDimmerLights_DimmingClose:	
  3493                           ; 0 bytes @ 0x3
  3494                           
  3495  0023                     ??_DelayOff_Initialization:	
  3496                           ; 0 bytes @ 0x3
  3497                           
  3498  0023                     ??_setDimmerLights_DimmingRun:	
  3499                           ; 0 bytes @ 0x3
  3500                           
  3501  0023                     ??_getAD:	
  3502                           ; 0 bytes @ 0x3
  3503                           
  3504  0023                     CC2500_WriteCommand@command:	
  3505                           ; 0 bytes @ 0x3
  3506                           
  3507  0023                     CC2500_ReadStatus@status_addr:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     getDelayOff_GO@go:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     _getDimmerLights_Allow_Condition$2283:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     getDimmerLights_Status@status:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     setLED@led:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     getAD@adcon0:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     Flash_Memory_Read@ret:	
  3526                           ; 1 bytes @ 0x3
  3527                           
  3528  0023                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x3
  3530                           
  3531  0023                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     ___lbdiv@counter:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537  0023                     _getMain_All_Error_Status$3613:	
  3538                           ; 1 bytes @ 0x3
  3539                           
  3540                           
  3541                           ; 2 bytes @ 0x3
  3542  0023                     	ds	1
  3543  0024                     ??_CC2500_ClearTXFIFO:	
  3544  0024                     ??_CC2500_ClearRXFIFO:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_CC2500_SIDLEMode:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_setLED_Initialization:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_Flash_Memory_Modify:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??_getLoad_AD:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??_getTemp_AD:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??_RF_RxDisable:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     ??_setRF_AdjControl:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     ??_setSw_Initialization:	
  3569                           ; 0 bytes @ 0x4
  3570                           
  3571  0024                     ??_CC2500_TxData:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??_CC2500_RxData:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??_Flash_Memory_Initialization:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??___wmul:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     ??___awdiv:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     ??___lwdiv:	
  3587                           ; 0 bytes @ 0x4
  3588                           
  3589  0024                     CC2500_WriteREG@w_addr:	
  3590                           ; 0 bytes @ 0x4
  3591                           
  3592  0024                     setDimmerLights_DimmingRun@lights:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     setLED_Initialization@led:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     setLED_Main@led:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601  0024                     setSw_Initialization@sw:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0024                     ___ftpack@sign:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0024                     ___lbdiv@quotient:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610  0024                     getBuz_GO@i:	
  3611                           ; 1 bytes @ 0x4
  3612                           
  3613  0024                     DelayTime_1us@j:	
  3614                           ; 2 bytes @ 0x4
  3615                           
  3616  0024                     ___wmul@product:	
  3617                           ; 2 bytes @ 0x4
  3618                           
  3619                           
  3620                           ; 2 bytes @ 0x4
  3621  0024                     	ds	1
  3622  0025                     ??_CC2500_InitSetREG:	
  3623  0025                     ??_CC2500_InitPATable:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??_Switch_Initialization:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??___ftpack:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??_LED_Initialization:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     ??_LED_Main:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     ?_Division:	
  3639                           ; 0 bytes @ 0x5
  3640                           
  3641  0025                     CC2500_TxData@loop_e:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     CC2500_RxData@loop_f:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     Division@num:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     Flash_Memory_Initialization@value:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     Flash_Memory_Modify@i:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     getMain_All_Error_Status@command:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     getTemp_AD@channel:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662  0025                     setRF_AdjControl@status:	
  3663                           ; 1 bytes @ 0x5
  3664                           
  3665  0025                     ___awdiv@counter:	
  3666                           ; 1 bytes @ 0x5
  3667                           
  3668  0025                     ___lwdiv@quotient:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671                           
  3672                           ; 2 bytes @ 0x5
  3673  0025                     	ds	1
  3674  0026                     ??_CC2500_PowerRST:	
  3675  0026                     ??_CC2500_FrequencyCabr:	
  3676                           ; 0 bytes @ 0x6
  3677                           
  3678  0026                     ??_Division:	
  3679                           ; 0 bytes @ 0x6
  3680                           
  3681  0026                     ??_Flash_Memory_Main:	
  3682                           ; 0 bytes @ 0x6
  3683                           
  3684  0026                     CC2500_InitSetREG@temp1:	
  3685                           ; 0 bytes @ 0x6
  3686                           
  3687  0026                     CC2500_InitPATable@temp:	
  3688                           ; 1 bytes @ 0x6
  3689                           
  3690  0026                     getMain_All_Error_Status@status:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693  0026                     getLoad_AD@channel:	
  3694                           ; 1 bytes @ 0x6
  3695                           
  3696  0026                     setRF_AdjControl@sw:	
  3697                           ; 1 bytes @ 0x6
  3698                           
  3699  0026                     ___awdiv@sign:	
  3700                           ; 1 bytes @ 0x6
  3701                           
  3702  0026                     getTemp_AD@ADRES:	
  3703                           ; 1 bytes @ 0x6
  3704                           
  3705                           
  3706                           ; 2 bytes @ 0x6
  3707  0026                     	ds	1
  3708  0027                     CC2500_InitSetREG@temp2:	
  3709  0027                     CC2500_InitPATable@loop_d:	
  3710                           ; 1 bytes @ 0x7
  3711                           
  3712  0027                     Flash_Memory_Main@key_Status:	
  3713                           ; 1 bytes @ 0x7
  3714                           
  3715  0027                     getLoad_AD@k:	
  3716                           ; 1 bytes @ 0x7
  3717                           
  3718  0027                     ___lwdiv@counter:	
  3719                           ; 1 bytes @ 0x7
  3720                           
  3721  0027                     ___awdiv@quotient:	
  3722                           ; 1 bytes @ 0x7
  3723                           
  3724                           
  3725                           ; 2 bytes @ 0x7
  3726  0027                     	ds	1
  3727  0028                     ??_Load_Main:	
  3728  0028                     ?___awtoft:	
  3729                           ; 0 bytes @ 0x8
  3730                           
  3731  0028                     CC2500_InitSetREG@loop_c:	
  3732                           ; 3 bytes @ 0x8
  3733                           
  3734  0028                     Division@value:	
  3735                           ; 1 bytes @ 0x8
  3736                           
  3737  0028                     _Flash_Memory_Main$3152:	
  3738                           ; 1 bytes @ 0x8
  3739                           
  3740  0028                     getLoad_AD@j:	
  3741                           ; 1 bytes @ 0x8
  3742                           
  3743  0028                     ___awtoft@c:	
  3744                           ; 1 bytes @ 0x8
  3745                           
  3746                           
  3747                           ; 2 bytes @ 0x8
  3748  0028                     	ds	1
  3749  0029                     ?_setBuz:	
  3750  0029                     ??_CC2500_PowerOnInitial:	
  3751                           ; 0 bytes @ 0x9
  3752                           
  3753  0029                     Division@result:	
  3754                           ; 0 bytes @ 0x9
  3755                           
  3756  0029                     setBuz@time:	
  3757                           ; 1 bytes @ 0x9
  3758                           
  3759  0029                     getLoad_AD@ADRES:	
  3760                           ; 2 bytes @ 0x9
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x9
  3764  0029                     	ds	1
  3765  002A                     _Load_Main$3987:	
  3766                           
  3767                           ; 2 bytes @ 0xA
  3768  002A                     	ds	1
  3769  002B                     ??_setBuz:	
  3770  002B                     ??___awtoft:	
  3771                           ; 0 bytes @ 0xB
  3772                           
  3773  002B                     getLoad_AD@i:	
  3774                           ; 0 bytes @ 0xB
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0xB
  3778  002B                     	ds	1
  3779  002C                     setBuz@count:	
  3780  002C                     Load_Main@error:	
  3781                           ; 1 bytes @ 0xC
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0xC
  3785  002C                     	ds	1
  3786  002D                     ??_setDimmerLights_SwOn:	
  3787  002D                     ??_my_MainTimer:	
  3788                           ; 0 bytes @ 0xD
  3789                           
  3790  002D                     ??_Exception_Main:	
  3791                           ; 0 bytes @ 0xD
  3792                           
  3793  002D                     setDimmerLights_SwOn@sw:	
  3794                           ; 0 bytes @ 0xD
  3795                           
  3796  002D                     Load_Main@ErrorCountValue:	
  3797                           ; 1 bytes @ 0xD
  3798                           
  3799  002D                     ___awtoft@sign:	
  3800                           ; 1 bytes @ 0xD
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0xD
  3804  002D                     	ds	1
  3805  002E                     ?___ftdiv:	
  3806  002E                     ?___ftmul:	
  3807                           ; 3 bytes @ 0xE
  3808                           
  3809  002E                     setDimmerLights_SwOn@idle:	
  3810                           ; 3 bytes @ 0xE
  3811                           
  3812  002E                     Exception_Main@status:	
  3813                           ; 1 bytes @ 0xE
  3814                           
  3815  002E                     Load_Main@Load_RunStatus:	
  3816                           ; 1 bytes @ 0xE
  3817                           
  3818  002E                     ___ftdiv@f2:	
  3819                           ; 1 bytes @ 0xE
  3820                           
  3821  002E                     ___ftmul@f1:	
  3822                           ; 3 bytes @ 0xE
  3823                           
  3824                           
  3825                           ; 3 bytes @ 0xE
  3826  002E                     	ds	1
  3827  002F                     ??_setSw_Main:	
  3828  002F                     Exception_Main@count:	
  3829                           ; 0 bytes @ 0xF
  3830                           
  3831  002F                     Load_Main@LightsCount:	
  3832                           ; 1 bytes @ 0xF
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0xF
  3836  002F                     	ds	1
  3837  0030                     Exception_Main@i:	
  3838  0030                     Load_Main@i:	
  3839                           ; 2 bytes @ 0x10
  3840                           
  3841                           
  3842                           ; 2 bytes @ 0x10
  3843  0030                     	ds	1
  3844  0031                     setSw_Main@sw:	
  3845  0031                     ___ftdiv@f1:	
  3846                           ; 1 bytes @ 0x11
  3847                           
  3848  0031                     ___ftmul@f2:	
  3849                           ; 3 bytes @ 0x11
  3850                           
  3851                           
  3852                           ; 3 bytes @ 0x11
  3853  0031                     	ds	1
  3854  0032                     ??_Switch_Main:	
  3855  0032                     Exception_Main@i_3624:	
  3856                           ; 0 bytes @ 0x12
  3857                           
  3858                           
  3859                           ; 2 bytes @ 0x12
  3860  0032                     	ds	2
  3861  0034                     ??___ftdiv:	
  3862  0034                     ??___ftmul:	
  3863                           ; 0 bytes @ 0x14
  3864                           
  3865  0034                     Exception_Main@error:	
  3866                           ; 0 bytes @ 0x14
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x14
  3870  0034                     	ds	1
  3871  0035                     Exception_Main@lights:	
  3872                           
  3873                           ; 1 bytes @ 0x15
  3874  0035                     	ds	3
  3875  0038                     ___ftdiv@cntr:	
  3876  0038                     ___ftmul@exp:	
  3877                           ; 1 bytes @ 0x18
  3878                           
  3879                           
  3880                           ; 1 bytes @ 0x18
  3881  0038                     	ds	1
  3882  0039                     ___ftdiv@f3:	
  3883  0039                     ___ftmul@f3_as_product:	
  3884                           ; 3 bytes @ 0x19
  3885                           
  3886                           
  3887                           ; 3 bytes @ 0x19
  3888  0039                     	ds	3
  3889  003C                     ___ftdiv@exp:	
  3890  003C                     ___ftmul@cntr:	
  3891                           ; 1 bytes @ 0x1C
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x1C
  3895  003C                     	ds	1
  3896  003D                     ___ftdiv@sign:	
  3897  003D                     ___ftmul@sign:	
  3898                           ; 1 bytes @ 0x1D
  3899                           
  3900                           
  3901                           ; 1 bytes @ 0x1D
  3902  003D                     	ds	1
  3903  003E                     ?___ftneg:	
  3904  003E                     ___ftneg@f1:	
  3905                           ; 3 bytes @ 0x1E
  3906                           
  3907                           
  3908                           ; 3 bytes @ 0x1E
  3909  003E                     	ds	3
  3910  0041                     ??___ftneg:	
  3911  0041                     ?___ftadd:	
  3912                           ; 0 bytes @ 0x21
  3913                           
  3914  0041                     ___ftadd@f1:	
  3915                           ; 3 bytes @ 0x21
  3916                           
  3917                           
  3918                           ; 3 bytes @ 0x21
  3919  0041                     	ds	3
  3920  0044                     ___ftadd@f2:	
  3921                           
  3922                           ; 3 bytes @ 0x24
  3923  0044                     	ds	3
  3924  0047                     ??___ftadd:	
  3925                           
  3926                           ; 0 bytes @ 0x27
  3927  0047                     	ds	4
  3928  004B                     ___ftadd@sign:	
  3929                           
  3930                           ; 1 bytes @ 0x2B
  3931  004B                     	ds	1
  3932  004C                     ___ftadd@exp2:	
  3933                           
  3934                           ; 1 bytes @ 0x2C
  3935  004C                     	ds	1
  3936  004D                     ___ftadd@exp1:	
  3937                           
  3938                           ; 1 bytes @ 0x2D
  3939  004D                     	ds	1
  3940  004E                     ?___fttol:	
  3941  004E                     ___fttol@f1:	
  3942                           ; 4 bytes @ 0x2E
  3943                           
  3944                           
  3945                           ; 3 bytes @ 0x2E
  3946  004E                     	ds	4
  3947  0052                     ??___fttol:	
  3948                           
  3949                           ; 0 bytes @ 0x32
  3950  0052                     	ds	4
  3951  0056                     ___fttol@sign1:	
  3952                           
  3953                           ; 1 bytes @ 0x36
  3954  0056                     	ds	1
  3955  0057                     ___fttol@lval:	
  3956                           
  3957                           ; 4 bytes @ 0x37
  3958  0057                     	ds	4
  3959  005B                     ___fttol@exp1:	
  3960                           
  3961                           ; 1 bytes @ 0x3B
  3962  005B                     	ds	1
  3963  005C                     ??_getDimmerLights_ValueToPercent:	
  3964  005C                     ??_getDimmerLights_PercentToValue:	
  3965                           ; 0 bytes @ 0x3C
  3966                           
  3967                           
  3968                           ; 0 bytes @ 0x3C
  3969  005C                     	ds	2
  3970  005E                     getDimmerLights_PercentToValue@value:	
  3971  005E                     getDimmerLights_ValueToPercent@value:	
  3972                           ; 1 bytes @ 0x3E
  3973                           
  3974                           
  3975                           ; 1 bytes @ 0x3E
  3976  005E                     	ds	1
  3977  005F                     getDimmerLights_PercentToValue@i:	
  3978  005F                     getDimmerLights_ValueToPercent@i:	
  3979                           ; 3 bytes @ 0x3F
  3980                           
  3981                           
  3982                           ; 3 bytes @ 0x3F
  3983  005F                     	ds	3
  3984  0062                     ?_setProductData:	
  3985  0062                     ??_DimmerIntr_Initialization:	
  3986                           ; 0 bytes @ 0x42
  3987                           
  3988  0062                     ?_setDimmerIntr_DimmingValue:	
  3989                           ; 0 bytes @ 0x42
  3990                           
  3991  0062                     ?_setDimmerIntr_MaxmumValue:	
  3992                           ; 0 bytes @ 0x42
  3993                           
  3994  0062                     setDimmerIntr_DimmingValue@value:	
  3995                           ; 0 bytes @ 0x42
  3996                           
  3997  0062                     setDimmerIntr_MaxmumValue@value:	
  3998                           ; 1 bytes @ 0x42
  3999                           
  4000  0062                     setProductData@value:	
  4001                           ; 1 bytes @ 0x42
  4002                           
  4003                           
  4004                           ; 1 bytes @ 0x42
  4005  0062                     	ds	1
  4006  0063                     ??_setProductData:	
  4007  0063                     ??_setDimmerIntr_DimmingValue:	
  4008                           ; 0 bytes @ 0x43
  4009                           
  4010  0063                     ??_setDimmerIntr_MaxmumValue:	
  4011                           ; 0 bytes @ 0x43
  4012                           
  4013                           
  4014                           ; 0 bytes @ 0x43
  4015  0063                     	ds	1
  4016  0064                     ??_DimmerLights_Initialization:	
  4017  0064                     setDimmerIntr_DimmingValue@lights:	
  4018                           ; 0 bytes @ 0x44
  4019                           
  4020  0064                     setDimmerIntr_MaxmumValue@lights:	
  4021                           ; 1 bytes @ 0x44
  4022                           
  4023  0064                     setProductData@address:	
  4024                           ; 1 bytes @ 0x44
  4025                           
  4026                           
  4027                           ; 1 bytes @ 0x44
  4028  0064                     	ds	1
  4029  0065                     ??_DlyOff_Main:	
  4030  0065                     ?_setRF_DimmerLights:	
  4031                           ; 0 bytes @ 0x45
  4032                           
  4033  0065                     ??_setTemp_Main:	
  4034                           ; 0 bytes @ 0x45
  4035                           
  4036  0065                     ??_setLog_Code:	
  4037                           ; 0 bytes @ 0x45
  4038                           
  4039  0065                     ??_setRFSW_AdjControl:	
  4040                           ; 0 bytes @ 0x45
  4041                           
  4042  0065                     ?_setDelayOff_GO:	
  4043                           ; 0 bytes @ 0x45
  4044                           
  4045  0065                     setDelayOff_GO@command:	
  4046                           ; 0 bytes @ 0x45
  4047                           
  4048  0065                     setRF_DimmerLights@on:	
  4049                           ; 1 bytes @ 0x45
  4050                           
  4051                           
  4052                           ; 1 bytes @ 0x45
  4053  0065                     	ds	1
  4054  0066                     ??_setRF_DimmerLights:	
  4055  0066                     setDelayOff_GO@value:	
  4056                           ; 0 bytes @ 0x46
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x46
  4060  0066                     	ds	1
  4061  0067                     ??_setDelayOff_GO:	
  4062  0067                     DlyOff_Main@sw:	
  4063                           ; 0 bytes @ 0x47
  4064                           
  4065  0067                     setTemp_Main@error:	
  4066                           ; 1 bytes @ 0x47
  4067                           
  4068  0067                     setRFSW_AdjControl@status:	
  4069                           ; 1 bytes @ 0x47
  4070                           
  4071                           
  4072                           ; 1 bytes @ 0x47
  4073  0067                     	ds	1
  4074  0068                     ??_DelayOff_Main:	
  4075  0068                     setRFSW_AdjControl@sw:	
  4076                           ; 0 bytes @ 0x48
  4077                           
  4078  0068                     setRF_DimmerLights@status:	
  4079                           ; 1 bytes @ 0x48
  4080                           
  4081  0068                     setTemp_Main@SafeValue:	
  4082                           ; 1 bytes @ 0x48
  4083                           
  4084                           
  4085                           ; 2 bytes @ 0x48
  4086  0068                     	ds	1
  4087  0069                     setDelayOff_GO@i:	
  4088  0069                     setRF_DimmerLights@lights:	
  4089                           ; 1 bytes @ 0x49
  4090                           
  4091                           
  4092                           ; 1 bytes @ 0x49
  4093  0069                     	ds	1
  4094  006A                     ?_setDimmerLights_Dimming:	
  4095  006A                     setDelayOff_GO@j:	
  4096                           ; 0 bytes @ 0x4A
  4097                           
  4098  006A                     setDimmerLights_Dimming@status:	
  4099                           ; 1 bytes @ 0x4A
  4100                           
  4101  006A                     setTemp_Main@DangerValue:	
  4102                           ; 1 bytes @ 0x4A
  4103                           
  4104                           
  4105                           ; 2 bytes @ 0x4A
  4106  006A                     	ds	1
  4107  006B                     ??_setDimmerLights_Dimming:	
  4108  006B                     setDelayOff_GO@k:	
  4109                           ; 0 bytes @ 0x4B
  4110                           
  4111                           
  4112                           ; 1 bytes @ 0x4B
  4113  006B                     	ds	1
  4114  006C                     setDelayOff_GO@sw:	
  4115  006C                     setDimmerLights_Dimming@value:	
  4116                           ; 1 bytes @ 0x4C
  4117                           
  4118  006C                     setTemp_Main@TempGO:	
  4119                           ; 1 bytes @ 0x4C
  4120                           
  4121                           
  4122                           ; 1 bytes @ 0x4C
  4123  006C                     	ds	1
  4124  006D                     ?_setDimmerLights_OnOff:	
  4125  006D                     ??_setRFSW_Control:	
  4126                           ; 0 bytes @ 0x4D
  4127                           
  4128  006D                     setDimmerLights_OnOff@command:	
  4129                           ; 0 bytes @ 0x4D
  4130                           
  4131  006D                     setDimmerLights_Dimming@lights:	
  4132                           ; 1 bytes @ 0x4D
  4133                           
  4134  006D                     setTemp_Main@AD:	
  4135                           ; 1 bytes @ 0x4D
  4136                           
  4137                           
  4138                           ; 2 bytes @ 0x4D
  4139  006D                     	ds	1
  4140  006E                     ??_setDimmerLights_OnOff:	
  4141  006E                     setRFSW_Control@status:	
  4142                           ; 0 bytes @ 0x4E
  4143                           
  4144                           
  4145                           ; 1 bytes @ 0x4E
  4146  006E                     	ds	1
  4147  006F                     ??_Temp_Main:	
  4148  006F                     setRFSW_Control@sw:	
  4149                           ; 0 bytes @ 0x4F
  4150                           
  4151                           
  4152                           ; 1 bytes @ 0x4F
  4153  006F                     	ds	1
  4154  0070                     ??_setDimmerLights_Main:	
  4155  0070                     ??_RF_Main:	
  4156                           ; 0 bytes @ 0x50
  4157                           
  4158  0070                     ??_setControl_Lights_Table:	
  4159                           ; 0 bytes @ 0x50
  4160                           
  4161  0070                     ??_DimmerLights_Main:	
  4162                           ; 0 bytes @ 0x50
  4163                           
  4164  0070                     ??_main:	
  4165                           ; 0 bytes @ 0x50
  4166                           
  4167                           
  4168                           	psect	maintext
  4169  147E                     __pmaintext:	
  4170                           ; 0 bytes @ 0x50
  4171 ;;
  4172 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4173 ;;
  4174 ;; *************** function _main *****************
  4175 ;; Defined at:
  4176 ;;		line 7 in file "../src/Main_B1.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  argc            2    4[BANK1 ] int 
  4179 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  2    4[BANK1 ] int 
  4184 ;; Registers used:
  4185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 17F/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4191 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;Total ram usage:        4 bytes
  4196 ;; Hardware stack levels required when called:   13
  4197 ;; This function calls:
  4198 ;;		_Buzzer_Initialization
  4199 ;;		_Buzzer_Main
  4200 ;;		_CC2500_PowerOnInitial
  4201 ;;		_DelayOff_Initialization
  4202 ;;		_DelayOff_Main
  4203 ;;		_DimmerLights_Initialization
  4204 ;;		_DimmerLights_Main
  4205 ;;		_Exception_Main
  4206 ;;		_Flash_Memory_Initialization
  4207 ;;		_Flash_Memory_Main
  4208 ;;		_LED_Initialization
  4209 ;;		_LED_Main
  4210 ;;		_Load_Initialization
  4211 ;;		_Load_Main
  4212 ;;		_Mcu_Initialization
  4213 ;;		_RF_Initialization
  4214 ;;		_RF_Main
  4215 ;;		_Switch_Initialization
  4216 ;;		_Switch_Main
  4217 ;;		_Temp_Initialization
  4218 ;;		_Temp_Main
  4219 ;;		_WDT_Main
  4220 ;;		_getLoad_AD
  4221 ;;		_getTemp_AD
  4222 ;;		_myMain_Initialization
  4223 ;;		_my_MainTimer
  4224 ;; This function is called by:
  4225 ;;		Startup code after reset
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function _main
  4231  147E                     _main:	
  4232                           
  4233                           ;Main_B1.c: 8: myMain_Initialization();
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4237  147E  319C  24EF  3194   	fcall	_myMain_Initialization
  4238                           
  4239                           ;Main_B1.c: 9: Mcu_Initialization();
  4240  1481  319C  247F  3194   	fcall	_Mcu_Initialization
  4241                           
  4242                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4243  1484  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4244                           
  4245                           ;Main_B1.c: 11: LED_Initialization();
  4246  1487  319A  223D  3194   	fcall	_LED_Initialization
  4247                           
  4248                           ;Main_B1.c: 12: Buzzer_Initialization();
  4249  148A  319A  2223  3194   	fcall	_Buzzer_Initialization
  4250                           
  4251                           ;Main_B1.c: 14: ;;
  4252                           ;Main_B1.c: 15: Temp_Initialization();
  4253  148D  319A  222F  3194   	fcall	_Temp_Initialization
  4254                           
  4255                           ;Main_B1.c: 16: Load_Initialization();
  4256  1490  319A  2226  3194   	fcall	_Load_Initialization
  4257                           
  4258                           ;Main_B1.c: 17: ;;
  4259                           ;Main_B1.c: 18: DelayOff_Initialization();
  4260  1493  319A  2235  3194   	fcall	_DelayOff_Initialization
  4261                           
  4262                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4263  1496  319A  227A  3194   	fcall	_DimmerLights_Initialization
  4264                           
  4265                           ;Main_B1.c: 21: ;;
  4266                           ;Main_B1.c: 22: ;;
  4267                           ;Main_B1.c: 23: ;;
  4268                           ;Main_B1.c: 24: Switch_Initialization();
  4269  1499  319A  2259  3194   	fcall	_Switch_Initialization
  4270                           
  4271                           ;Main_B1.c: 25: RF_Initialization();
  4272  149C  319A  2229  3194   	fcall	_RF_Initialization
  4273                           
  4274                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4275  149F  319D  252B  3194   	fcall	_CC2500_PowerOnInitial
  4276  14A2                     l8900:	
  4277                           ;Main_B1.c: 27: ;;
  4278                           ;Main_B1.c: 28: ;;
  4279                           ;Main_B1.c: 30: while (1) {
  4280                           
  4281                           
  4282                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4283  14A2  0021               	movlb	1	; select bank1
  4284  14A3  1C2F               	btfss	_myMain^(0+128),0
  4285  14A4  2CAD               	goto	l8904
  4286                           
  4287                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4288  14A5  3005               	movlw	5
  4289  14A6  3189  2191  3194   	fcall	_getLoad_AD
  4290                           
  4291                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4292  14A9  3009               	movlw	9
  4293  14AA  318C  2495  3194   	fcall	_getTemp_AD
  4294  14AD                     l8904:	
  4295                           
  4296                           ;Main_B1.c: 57: }
  4297                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4298  14AD  0022               	movlb	2	; select bank2
  4299  14AE  1C31               	btfss	_Timer1^(0+256),0
  4300  14AF  2CA2               	goto	l8900
  4301                           
  4302                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4303  14B0  1031               	bcf	_Timer1^(0+256),0
  4304                           
  4305                           ;Main_B1.c: 96: my_MainTimer();
  4306  14B1  3192  2237  3194   	fcall	_my_MainTimer
  4307                           
  4308                           ;Main_B1.c: 97: WDT_Main();
  4309  14B4  319C  2491  3194   	fcall	_WDT_Main
  4310                           
  4311                           ;Main_B1.c: 98: ;;
  4312                           ;Main_B1.c: 99: ;;
  4313                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4314  14B7  0021               	movlb	1	; select bank1
  4315  14B8  1C2F               	btfss	_myMain^(0+128),0
  4316  14B9  2CA2               	goto	l8900
  4317                           
  4318                           ;Main_B1.c: 101: Flash_Memory_Main();
  4319  14BA  3192  22F0  3194   	fcall	_Flash_Memory_Main
  4320                           
  4321                           ;Main_B1.c: 103: LED_Main();
  4322  14BD  319A  2241  3194   	fcall	_LED_Main
  4323                           
  4324                           ;Main_B1.c: 104: Buzzer_Main();
  4325  14C0  3193  2331  3194   	fcall	_Buzzer_Main
  4326                           
  4327                           ;Main_B1.c: 106: ;;
  4328                           ;Main_B1.c: 107: Temp_Main();
  4329  14C3  319A  2232  3194   	fcall	_Temp_Main
  4330                           
  4331                           ;Main_B1.c: 108: Load_Main();
  4332  14C6  3180  2053  3194   	fcall	_Load_Main
  4333                           
  4334                           ;Main_B1.c: 109: ;;
  4335                           ;Main_B1.c: 111: ;;
  4336                           ;Main_B1.c: 112: DimmerLights_Main();
  4337  14C9  319E  2662  3194   	fcall	_DimmerLights_Main
  4338                           
  4339                           ;Main_B1.c: 113: Switch_Main();
  4340  14CC  319A  2288  3194   	fcall	_Switch_Main
  4341                           
  4342                           ;Main_B1.c: 114: ;;
  4343                           ;Main_B1.c: 115: ;;
  4344                           ;Main_B1.c: 117: RF_Main();
  4345  14CF  319A  222C  3194   	fcall	_RF_Main
  4346                           
  4347                           ;Main_B1.c: 118: DelayOff_Main();
  4348  14D2  319A  2239  3194   	fcall	_DelayOff_Main
  4349                           
  4350                           ;Main_B1.c: 119: ;;
  4351                           ;Main_B1.c: 120: ;;
  4352                           ;Main_B1.c: 121: Exception_Main();
  4353  14D5  3185  2554  3194   	fcall	_Exception_Main
  4354  14D8  2CA2               	goto	l8900
  4355  14D9                     __end_of_main:	
  4356                           ;Main_B1.c: 128: }
  4357                           ;Main_B1.c: 129: }
  4358                           ;Main_B1.c: 163: }
  4359                           ;Main_B1.c: 164: return (0);
  4360                           ;	Return value of _main is never used
  4361                           
  4362                           
  4363                           	psect	text1
  4364  1237                     __ptext1:	
  4365 ;; *************** function _my_MainTimer *****************
  4366 ;; Defined at:
  4367 ;;		line 185 in file "../src/Main_B1.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;		None
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;		None
  4372 ;; Return value:  Size  Location     Type
  4373 ;;		None               void
  4374 ;; Registers used:
  4375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;Total ram usage:        1 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    7
  4388 ;; This function calls:
  4389 ;;		_setBuz
  4390 ;; This function is called by:
  4391 ;;		_main
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function _my_MainTimer
  4397  1237                     _my_MainTimer:	
  4398                           
  4399                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4403  1237  0021               	movlb	1	; select bank1
  4404  1238  182F               	btfsc	_myMain^(0+128),0
  4405  1239  2A51               	goto	l8092
  4406                           
  4407                           ;Main_B1.c: 188: myMain.PowerCount++;
  4408  123A  3001               	movlw	1
  4409  123B  0020               	movlb	0	; select bank0
  4410  123C  00AD               	movwf	??_my_MainTimer
  4411  123D  082D               	movf	??_my_MainTimer,w
  4412  123E  0021               	movlb	1	; select bank1
  4413  123F  07B0               	addwf	(_myMain^(0+128)+1),f
  4414                           
  4415                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4416  1240  0830               	movf	(_myMain^(0+128)+1),w
  4417  1241  3A4B               	xorlw	75
  4418  1242  1D03               	skipz
  4419  1243  0008               	return
  4420                           
  4421                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4422  1244  01B0               	clrf	(_myMain^(0+128)+1)
  4423                           
  4424                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4425  1245  142F               	bsf	_myMain^(0+128),0
  4426                           
  4427                           ;Main_B1.c: 196: setBuz(3, 50);
  4428  1246  3032               	movlw	50
  4429  1247  0020               	movlb	0	; select bank0
  4430  1248  00A9               	movwf	setBuz@time
  4431  1249  3000               	movlw	0
  4432  124A  00AA               	movwf	setBuz@time+1
  4433  124B  3003               	movlw	3
  4434  124C  3194  2425         	fcall	_setBuz
  4435                           
  4436                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4437  124E  0021               	movlb	1	; select bank1
  4438  124F  162F               	bsf	_myMain^(0+128),4
  4439                           
  4440                           ;Main_B1.c: 206: }
  4441                           ;Main_B1.c: 207: } else {
  4442  1250  0008               	return
  4443  1251                     l8092:	
  4444                           
  4445                           ;Main_B1.c: 208: myMain.PowerCount++;
  4446  1251  3001               	movlw	1
  4447  1252  0020               	movlb	0	; select bank0
  4448  1253  00AD               	movwf	??_my_MainTimer
  4449  1254  082D               	movf	??_my_MainTimer,w
  4450  1255  0021               	movlb	1	; select bank1
  4451  1256  07B0               	addwf	(_myMain^(0+128)+1),f
  4452                           
  4453                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4454  1257  0830               	movf	(_myMain^(0+128)+1),w
  4455  1258  3A32               	xorlw	50
  4456  1259  1903               	btfsc	3,2
  4457                           
  4458                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4459  125A  01B0               	clrf	(_myMain^(0+128)+1)
  4460                           
  4461                           ;Main_B1.c: 226: }
  4462                           ;Main_B1.c: 228: myMain.Count1++;
  4463  125B  3001               	movlw	1
  4464  125C  07B3               	addwf	(_myMain^(0+128)+4),f
  4465  125D  3000               	movlw	0
  4466  125E  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4467                           
  4468                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4469  125F  3004               	movlw	4
  4470  1260  3EAF               	addlw	_myMain& (0+255)
  4471  1261  0086               	movwf	6
  4472  1262  0187               	clrf	7
  4473  1263  3F40               	moviw [0]fsr1
  4474  1264  3A32               	xorlw	50
  4475  1265  1D03               	skipz
  4476  1266  2A69               	goto	u8215
  4477  1267  3F41               	moviw [1]fsr1
  4478  1268  3A00               	xorlw	0
  4479  1269                     u8215:	
  4480  1269  1D03               	skipz
  4481  126A  0008               	return
  4482                           
  4483                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4484  126B  01B3               	clrf	(_myMain^(0+128)+4)
  4485  126C  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4486                           
  4487                           ;Main_B1.c: 242: if (myMain.Flag) {
  4488  126D  1CAF               	btfss	_myMain^(0+128),1
  4489  126E  2A71               	goto	l1450
  4490                           
  4491                           ;Main_B1.c: 243: myMain.Flag = 0;
  4492  126F  10AF               	bcf	_myMain^(0+128),1
  4493                           
  4494                           ;Main_B1.c: 252: } else {
  4495  1270  0008               	return
  4496  1271                     l1450:	
  4497                           
  4498                           ;Main_B1.c: 253: myMain.Flag = 1;
  4499  1271  14AF               	bsf	_myMain^(0+128),1
  4500  1272  0008               	return
  4501  1273                     __end_of_my_MainTimer:	
  4502                           
  4503                           	psect	text2
  4504  1CEF                     __ptext2:	
  4505 ;; *************** function _myMain_Initialization *****************
  4506 ;; Defined at:
  4507 ;;		line 170 in file "../src/Main_B1.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    5
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _myMain_Initialization
  4537  1CEF                     _myMain_Initialization:	
  4538                           
  4539                           ;Main_B1.c: 173: product = &_product;
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4543  1CEF  30CC               	movlw	__product& (0+255)
  4544  1CF0  0020               	movlb	0	; select bank0
  4545  1CF1  00A0               	movwf	??_myMain_Initialization
  4546  1CF2  0820               	movf	??_myMain_Initialization,w
  4547  1CF3  0021               	movlb	1	; select bank1
  4548  1CF4  00EE               	movwf	_product^(0+128)
  4549                           
  4550                           ;Main_B1.c: 174: product->Data[20] = 209;
  4551  1CF5  30D1               	movlw	209
  4552  1CF6  0020               	movlb	0	; select bank0
  4553  1CF7  00A0               	movwf	??_myMain_Initialization
  4554  1CF8  0021               	movlb	1	; select bank1
  4555  1CF9  086E               	movf	_product^(0+128),w
  4556  1CFA  3E14               	addlw	20
  4557  1CFB  0086               	movwf	6
  4558  1CFC  3001               	movlw	1	; select bank2/3
  4559  1CFD  0087               	movwf	7
  4560  1CFE  0020               	movlb	0	; select bank0
  4561  1CFF  0820               	movf	??_myMain_Initialization,w
  4562  1D00  0081               	movwf	1
  4563  1D01  0008               	return
  4564  1D02                     __end_of_myMain_Initialization:	
  4565                           
  4566                           	psect	text3
  4567  0C95                     __ptext3:	
  4568 ;; *************** function _getTemp_AD *****************
  4569 ;; Defined at:
  4570 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  channel         1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  channel         1    5[BANK0 ] unsigned char 
  4575 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;Total ram usage:        4 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    7
  4592 ;; This function calls:
  4593 ;;		_getAD
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           
  4600                           ;psect for function _getTemp_AD
  4601  0C95                     _getTemp_AD:	
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4605                           ;getTemp_AD@channel stored from wreg
  4606  0C95  0020               	movlb	0	; select bank0
  4607  0C96  00A5               	movwf	getTemp_AD@channel
  4608                           
  4609                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4610  0C97  01A6               	clrf	getTemp_AD@ADRES
  4611  0C98  01A7               	clrf	getTemp_AD@ADRES+1
  4612                           
  4613                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4614  0C99  0021               	movlb	1	; select bank1
  4615  0C9A  1D58               	btfss	_Temp^(0+128),2
  4616  0C9B  0008               	return
  4617                           
  4618                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4619  0C9C  30F0               	movlw	240
  4620  0C9D  0020               	movlb	0	; select bank0
  4621  0C9E  00A4               	movwf	??_getTemp_AD
  4622  0C9F  0824               	movf	??_getTemp_AD,w
  4623  0CA0  00A0               	movwf	getAD@adcon1
  4624  0CA1  0825               	movf	getTemp_AD@channel,w
  4625  0CA2  319F  2713  318C   	fcall	_getAD
  4626  0CA5  0020               	movlb	0	; select bank0
  4627  0CA6  0821               	movf	?_getAD+1,w
  4628  0CA7  01A7               	clrf	getTemp_AD@ADRES+1
  4629  0CA8  07A7               	addwf	getTemp_AD@ADRES+1,f
  4630  0CA9  0820               	movf	?_getAD,w
  4631  0CAA  01A6               	clrf	getTemp_AD@ADRES
  4632  0CAB  07A6               	addwf	getTemp_AD@ADRES,f
  4633                           
  4634                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4635  0CAC  0827               	movf	getTemp_AD@ADRES+1,w
  4636  0CAD  0426               	iorwf	getTemp_AD@ADRES,w
  4637  0CAE  1903               	skipnz
  4638  0CAF  0008               	return
  4639                           
  4640                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4641  0CB0  0827               	movf	getTemp_AD@ADRES+1,w
  4642  0CB1  0021               	movlb	1	; select bank1
  4643  0CB2  025D               	subwf	((_Temp+1)^(0+128)+4),w
  4644  0CB3  1D03               	skipz
  4645  0CB4  2CB9               	goto	u8135
  4646  0CB5  0020               	movlb	0	; select bank0
  4647  0CB6  0826               	movf	getTemp_AD@ADRES,w
  4648  0CB7  0021               	movlb	1	; select bank1
  4649  0CB8  025C               	subwf	(_Temp^(0+128)+4),w
  4650  0CB9                     u8135:	
  4651  0CB9  1803               	skipnc
  4652  0CBA  2CC6               	goto	l8062
  4653                           
  4654                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4655  0CBB  0020               	movlb	0	; select bank0
  4656  0CBC  0827               	movf	getTemp_AD@ADRES+1,w
  4657  0CBD  0021               	movlb	1	; select bank1
  4658  0CBE  01DD               	clrf	((_Temp+1)^(0+128)+4)
  4659  0CBF  07DD               	addwf	((_Temp+1)^(0+128)+4),f
  4660  0CC0  0020               	movlb	0	; select bank0
  4661  0CC1  0826               	movf	getTemp_AD@ADRES,w
  4662  0CC2  0021               	movlb	1	; select bank1
  4663  0CC3  01DC               	clrf	(_Temp^(0+128)+4)
  4664  0CC4  07DC               	addwf	(_Temp^(0+128)+4),f
  4665                           
  4666                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4667  0CC5  0008               	return
  4668  0CC6                     l8062:	
  4669  0CC6  0020               	movlb	0	; select bank0
  4670  0CC7  0827               	movf	getTemp_AD@ADRES+1,w
  4671  0CC8  0021               	movlb	1	; select bank1
  4672  0CC9  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4673  0CCA  1D03               	skipz
  4674  0CCB  2CD0               	goto	u8145
  4675  0CCC  0020               	movlb	0	; select bank0
  4676  0CCD  0826               	movf	getTemp_AD@ADRES,w
  4677  0CCE  0021               	movlb	1	; select bank1
  4678  0CCF  025E               	subwf	(_Temp^(0+128)+6),w
  4679  0CD0                     u8145:	
  4680  0CD0  1803               	skipnc
  4681  0CD1  2CDD               	goto	l8066
  4682                           
  4683                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4684  0CD2  0020               	movlb	0	; select bank0
  4685  0CD3  0827               	movf	getTemp_AD@ADRES+1,w
  4686  0CD4  0021               	movlb	1	; select bank1
  4687  0CD5  01DF               	clrf	((_Temp+1)^(0+128)+6)
  4688  0CD6  07DF               	addwf	((_Temp+1)^(0+128)+6),f
  4689  0CD7  0020               	movlb	0	; select bank0
  4690  0CD8  0826               	movf	getTemp_AD@ADRES,w
  4691  0CD9  0021               	movlb	1	; select bank1
  4692  0CDA  01DE               	clrf	(_Temp^(0+128)+6)
  4693  0CDB  07DE               	addwf	(_Temp^(0+128)+6),f
  4694                           
  4695                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4696  0CDC  0008               	return
  4697  0CDD                     l8066:	
  4698  0CDD  0020               	movlb	0	; select bank0
  4699  0CDE  0827               	movf	getTemp_AD@ADRES+1,w
  4700  0CDF  0021               	movlb	1	; select bank1
  4701  0CE0  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4702  0CE1  1D03               	skipz
  4703  0CE2  2CE7               	goto	u8155
  4704  0CE3  0020               	movlb	0	; select bank0
  4705  0CE4  0826               	movf	getTemp_AD@ADRES,w
  4706  0CE5  0021               	movlb	1	; select bank1
  4707  0CE6  0260               	subwf	(_Temp^(0+128)+8),w
  4708  0CE7                     u8155:	
  4709  0CE7  1803               	skipnc
  4710  0CE8  2CF4               	goto	l8070
  4711                           
  4712                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4713  0CE9  0020               	movlb	0	; select bank0
  4714  0CEA  0827               	movf	getTemp_AD@ADRES+1,w
  4715  0CEB  0021               	movlb	1	; select bank1
  4716  0CEC  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4717  0CED  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4718  0CEE  0020               	movlb	0	; select bank0
  4719  0CEF  0826               	movf	getTemp_AD@ADRES,w
  4720  0CF0  0021               	movlb	1	; select bank1
  4721  0CF1  01E0               	clrf	(_Temp^(0+128)+8)
  4722  0CF2  07E0               	addwf	(_Temp^(0+128)+8),f
  4723                           
  4724                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4725  0CF3  0008               	return
  4726  0CF4                     l8070:	
  4727  0CF4  0020               	movlb	0	; select bank0
  4728  0CF5  0827               	movf	getTemp_AD@ADRES+1,w
  4729  0CF6  0021               	movlb	1	; select bank1
  4730  0CF7  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4731  0CF8  1D03               	skipz
  4732  0CF9  2CFE               	goto	u8165
  4733  0CFA  0020               	movlb	0	; select bank0
  4734  0CFB  0826               	movf	getTemp_AD@ADRES,w
  4735  0CFC  0021               	movlb	1	; select bank1
  4736  0CFD  0262               	subwf	(_Temp^(0+128)+10),w
  4737  0CFE                     u8165:	
  4738  0CFE  1803               	skipnc
  4739  0CFF  2D0B               	goto	l8074
  4740                           
  4741                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4742  0D00  0020               	movlb	0	; select bank0
  4743  0D01  0827               	movf	getTemp_AD@ADRES+1,w
  4744  0D02  0021               	movlb	1	; select bank1
  4745  0D03  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4746  0D04  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4747  0D05  0020               	movlb	0	; select bank0
  4748  0D06  0826               	movf	getTemp_AD@ADRES,w
  4749  0D07  0021               	movlb	1	; select bank1
  4750  0D08  01E2               	clrf	(_Temp^(0+128)+10)
  4751  0D09  07E2               	addwf	(_Temp^(0+128)+10),f
  4752                           
  4753                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4754  0D0A  0008               	return
  4755  0D0B                     l8074:	
  4756  0D0B  0020               	movlb	0	; select bank0
  4757  0D0C  0827               	movf	getTemp_AD@ADRES+1,w
  4758  0D0D  0021               	movlb	1	; select bank1
  4759  0D0E  0265               	subwf	((_Temp+1)^(0+128)+12),w
  4760  0D0F  1D03               	skipz
  4761  0D10  2D15               	goto	u8175
  4762  0D11  0020               	movlb	0	; select bank0
  4763  0D12  0826               	movf	getTemp_AD@ADRES,w
  4764  0D13  0021               	movlb	1	; select bank1
  4765  0D14  0264               	subwf	(_Temp^(0+128)+12),w
  4766  0D15                     u8175:	
  4767  0D15  1803               	skipnc
  4768  0D16  0008               	return
  4769                           
  4770                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4771  0D17  0020               	movlb	0	; select bank0
  4772  0D18  0827               	movf	getTemp_AD@ADRES+1,w
  4773  0D19  0021               	movlb	1	; select bank1
  4774  0D1A  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4775  0D1B  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4776  0D1C  0020               	movlb	0	; select bank0
  4777  0D1D  0826               	movf	getTemp_AD@ADRES,w
  4778  0D1E  0021               	movlb	1	; select bank1
  4779  0D1F  01E4               	clrf	(_Temp^(0+128)+12)
  4780  0D20  07E4               	addwf	(_Temp^(0+128)+12),f
  4781  0D21  0008               	return
  4782  0D22                     __end_of_getTemp_AD:	
  4783                           
  4784                           	psect	text4
  4785  0991                     __ptext4:	
  4786 ;; *************** function _getLoad_AD *****************
  4787 ;; Defined at:
  4788 ;;		line 16 in file "../src/OverLoad_B1.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  channel         1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  channel         1    6[BANK0 ] unsigned char 
  4793 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4794 ;;  i               1   11[BANK0 ] unsigned char 
  4795 ;;  j               1    8[BANK0 ] unsigned char 
  4796 ;;  k               1    7[BANK0 ] unsigned char 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;Total ram usage:        8 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    7
  4813 ;; This function calls:
  4814 ;;		_getAD
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _getLoad_AD
  4822  0991                     _getLoad_AD:	
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4826                           ;getLoad_AD@channel stored from wreg
  4827  0991  0020               	movlb	0	; select bank0
  4828  0992  00A6               	movwf	getLoad_AD@channel
  4829                           
  4830                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4831  0993  01AB               	clrf	getLoad_AD@i
  4832  0994  01A8               	clrf	getLoad_AD@j
  4833  0995  01A7               	clrf	getLoad_AD@k
  4834                           
  4835                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4836  0996  01A9               	clrf	getLoad_AD@ADRES
  4837  0997  01AA               	clrf	getLoad_AD@ADRES+1
  4838                           
  4839                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4840  0998  0022               	movlb	2	; select bank2
  4841  0999  1E38               	btfss	_Load^(0+256),4
  4842  099A  0008               	return
  4843                           
  4844                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4845  099B  30F3               	movlw	243
  4846  099C  0020               	movlb	0	; select bank0
  4847  099D  00A4               	movwf	??_getLoad_AD
  4848  099E  0824               	movf	??_getLoad_AD,w
  4849  099F  00A0               	movwf	getAD@adcon1
  4850  09A0  0826               	movf	getLoad_AD@channel,w
  4851  09A1  319F  2713  3189   	fcall	_getAD
  4852  09A4  0020               	movlb	0	; select bank0
  4853  09A5  0821               	movf	?_getAD+1,w
  4854  09A6  01AA               	clrf	getLoad_AD@ADRES+1
  4855  09A7  07AA               	addwf	getLoad_AD@ADRES+1,f
  4856  09A8  0820               	movf	?_getAD,w
  4857  09A9  01A9               	clrf	getLoad_AD@ADRES
  4858  09AA  07A9               	addwf	getLoad_AD@ADRES,f
  4859                           
  4860                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4861  09AB  01AB               	clrf	getLoad_AD@i
  4862  09AC  3004               	movlw	4
  4863  09AD  022B               	subwf	getLoad_AD@i,w
  4864  09AE  1803               	btfsc	3,0
  4865  09AF  29D7               	goto	l8030
  4866  09B0                     l8018:	
  4867                           
  4868                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4869  09B0  352B               	lslf	getLoad_AD@i,w
  4870  09B1  3E43               	addlw	(_Load+11)& (0+255)
  4871  09B2  0086               	movwf	6
  4872  09B3  3001               	movlw	1	; select bank2/3
  4873  09B4  0087               	movwf	7
  4874  09B5  3F40               	moviw [0]fsr1
  4875  09B6  00A4               	movwf	??_getLoad_AD
  4876  09B7  3F41               	moviw [1]fsr1
  4877  09B8  00A5               	movwf	??_getLoad_AD+1
  4878  09B9  082A               	movf	getLoad_AD@ADRES+1,w
  4879  09BA  0225               	subwf	??_getLoad_AD+1,w
  4880  09BB  1D03               	skipz
  4881  09BC  29BF               	goto	u8035
  4882  09BD  0829               	movf	getLoad_AD@ADRES,w
  4883  09BE  0224               	subwf	??_getLoad_AD,w
  4884  09BF                     u8035:	
  4885  09BF  1803               	skipnc
  4886  09C0  29CF               	goto	l8026
  4887  09C1  08A8               	movf	getLoad_AD@j,f
  4888  09C2  1D03               	skipz
  4889  09C3  29CF               	goto	l8026
  4890                           
  4891                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4892  09C4  352B               	lslf	getLoad_AD@i,w
  4893  09C5  3E43               	addlw	(_Load+11)& (0+255)
  4894  09C6  0086               	movwf	6
  4895  09C7  3001               	movlw	1	; select bank2/3
  4896  09C8  0087               	movwf	7
  4897  09C9  0829               	movf	getLoad_AD@ADRES,w
  4898  09CA  3FC0               	movwi [0]fsr1
  4899  09CB  082A               	movf	getLoad_AD@ADRES+1,w
  4900  09CC  3FC1               	movwi [1]fsr1
  4901                           
  4902                           ;OverLoad_B1.c: 25: j = 1;
  4903  09CD  01A8               	clrf	getLoad_AD@j
  4904  09CE  0AA8               	incf	getLoad_AD@j,f
  4905  09CF                     l8026:	
  4906  09CF  3001               	movlw	1
  4907  09D0  00A4               	movwf	??_getLoad_AD
  4908  09D1  0824               	movf	??_getLoad_AD,w
  4909  09D2  07AB               	addwf	getLoad_AD@i,f
  4910  09D3  3004               	movlw	4
  4911  09D4  022B               	subwf	getLoad_AD@i,w
  4912  09D5  1C03               	skipc
  4913  09D6  29B0               	goto	l8018
  4914  09D7                     l8030:	
  4915                           
  4916                           ;OverLoad_B1.c: 26: }
  4917                           ;OverLoad_B1.c: 27: }
  4918                           ;OverLoad_B1.c: 28: if (j == 0) {
  4919  09D7  08A8               	movf	getLoad_AD@j,f
  4920  09D8  1D03               	skipz
  4921  09D9  0008               	return
  4922                           
  4923                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4924  09DA  01AB               	clrf	getLoad_AD@i
  4925  09DB                     L1:	
  4926  09DB  3004               	movlw	4
  4927  09DC  022B               	subwf	getLoad_AD@i,w
  4928  09DD  1803               	btfsc	3,0
  4929  09DE  0008               	return
  4930                           
  4931                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4932  09DF  352B               	lslf	getLoad_AD@i,w
  4933  09E0  3E4D               	addlw	(_Load+21)& (0+255)
  4934  09E1  0086               	movwf	6
  4935  09E2  3001               	movlw	1	; select bank2/3
  4936  09E3  0087               	movwf	7
  4937  09E4  3F40               	moviw [0]fsr1
  4938  09E5  00A4               	movwf	??_getLoad_AD
  4939  09E6  3F41               	moviw [1]fsr1
  4940  09E7  00A5               	movwf	??_getLoad_AD+1
  4941  09E8  0825               	movf	??_getLoad_AD+1,w
  4942  09E9  022A               	subwf	getLoad_AD@ADRES+1,w
  4943  09EA  1D03               	skipz
  4944  09EB  29EE               	goto	u8085
  4945  09EC  0824               	movf	??_getLoad_AD,w
  4946  09ED  0229               	subwf	getLoad_AD@ADRES,w
  4947  09EE                     u8085:	
  4948  09EE  1803               	skipnc
  4949  09EF  29FE               	goto	l8046
  4950  09F0  08A7               	movf	getLoad_AD@k,f
  4951  09F1  1D03               	skipz
  4952  09F2  29FE               	goto	l8046
  4953                           
  4954                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4955  09F3  352B               	lslf	getLoad_AD@i,w
  4956  09F4  3E4D               	addlw	(_Load+21)& (0+255)
  4957  09F5  0086               	movwf	6
  4958  09F6  3001               	movlw	1	; select bank2/3
  4959  09F7  0087               	movwf	7
  4960  09F8  0829               	movf	getLoad_AD@ADRES,w
  4961  09F9  3FC0               	movwi [0]fsr1
  4962  09FA  082A               	movf	getLoad_AD@ADRES+1,w
  4963  09FB  3FC1               	movwi [1]fsr1
  4964                           
  4965                           ;OverLoad_B1.c: 32: k = 1;
  4966  09FC  01A7               	clrf	getLoad_AD@k
  4967  09FD  0AA7               	incf	getLoad_AD@k,f
  4968  09FE                     l8046:	
  4969  09FE  3001               	movlw	1
  4970  09FF  00A4               	movwf	??_getLoad_AD
  4971  0A00  0824               	movf	??_getLoad_AD,w
  4972  0A01  07AB               	addwf	getLoad_AD@i,f
  4973  0A02  29DB               	goto	L1
  4974  0A03                     __end_of_getLoad_AD:	
  4975                           
  4976                           	psect	text5
  4977  1F13                     __ptext5:	
  4978 ;; *************** function _getAD *****************
  4979 ;; Defined at:
  4980 ;;		line 461 in file "../src/MCU_B1.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  adcon0          1    wreg     unsigned char 
  4983 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2    0[BANK0 ] int 
  4988 ;; Registers used:
  4989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4995 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;Total ram usage:        4 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    6
  5002 ;; This function calls:
  5003 ;;		_Timeout_Counter
  5004 ;;		_set_TimeoutCleared
  5005 ;; This function is called by:
  5006 ;;		_getLoad_AD
  5007 ;;		_getTemp_AD
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _getAD
  5013  1F13                     _getAD:	
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5017                           ;getAD@adcon0 stored from wreg
  5018  1F13  0020               	movlb	0	; select bank0
  5019  1F14  00A3               	movwf	getAD@adcon0
  5020                           
  5021                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5022  1F15  0823               	movf	getAD@adcon0,w
  5023  1F16  0021               	movlb	1	; select bank1
  5024  1F17  009D               	movwf	29	;volatile
  5025                           
  5026                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5027  1F18  0020               	movlb	0	; select bank0
  5028  1F19  0820               	movf	getAD@adcon1,w
  5029  1F1A  0021               	movlb	1	; select bank1
  5030  1F1B  009E               	movwf	30	;volatile
  5031                           
  5032                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5033  1F1C  149D               	bsf	29,1	;volatile
  5034                           
  5035                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5036  1F1D  2F21               	goto	l7496
  5037  1F1E                     l7494:	
  5038                           
  5039                           ;MCU_B1.c: 466: Timeout_Counter();
  5040  1F1E  319D  2540  319F   	fcall	_Timeout_Counter
  5041  1F21                     l7496:	
  5042  1F21  0021               	movlb	1	; select bank1
  5043  1F22  1C9D               	btfss	29,1	;volatile
  5044  1F23  2F26               	goto	l7500
  5045  1F24  1D39               	btfss	(_myMain^(0+128)+10),2
  5046  1F25  2F1E               	goto	l7494
  5047  1F26                     l7500:	
  5048                           
  5049                           ;MCU_B1.c: 467: };
  5050                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5051  1F26  319A  225D         	fcall	_set_TimeoutCleared
  5052                           
  5053                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5054  1F28  0021               	movlb	1	; select bank1
  5055  1F29  081C               	movf	28,w	;volatile
  5056  1F2A  0020               	movlb	0	; select bank0
  5057  1F2B  01A1               	clrf	?_getAD+1
  5058  1F2C  07A1               	addwf	?_getAD+1,f
  5059  1F2D  0021               	movlb	1	; select bank1
  5060  1F2E  081B               	movf	27,w	;volatile
  5061  1F2F  0020               	movlb	0	; select bank0
  5062  1F30  01A0               	clrf	?_getAD
  5063  1F31  07A0               	addwf	?_getAD,f
  5064  1F32  0008               	return
  5065  1F33                     __end_of_getAD:	
  5066                           
  5067                           	psect	text6
  5068  1C91                     __ptext6:	
  5069 ;; *************** function _WDT_Main *****************
  5070 ;; Defined at:
  5071 ;;		line 1116 in file "../src/MCU_B1.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;		None               void
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        1 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    6
  5092 ;; This function calls:
  5093 ;;		_WDT_Clearing
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _WDT_Main
  5101  1C91                     _WDT_Main:	
  5102                           
  5103                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5107  1C91  0022               	movlb	2	; select bank2
  5108  1C92  1C36               	btfss	_WDT^(0+256),0
  5109  1C93  0008               	return
  5110                           
  5111                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5112  1C94  3001               	movlw	1
  5113  1C95  02B7               	subwf	(_WDT^(0+256)+1),f
  5114  1C96  0837               	movf	(_WDT^(0+256)+1),w
  5115  1C97  3AFF               	xorlw	255
  5116  1C98  1903               	skipnz
  5117  1C99  0008               	return
  5118                           
  5119                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5120  1C9A  3064               	movlw	100
  5121  1C9B  0020               	movlb	0	; select bank0
  5122  1C9C  00A0               	movwf	??_WDT_Main
  5123  1C9D  0820               	movf	??_WDT_Main,w
  5124  1C9E  0022               	movlb	2	; select bank2
  5125  1C9F  00B7               	movwf	(_WDT^(0+256)+1)
  5126                           
  5127                           ;MCU_B1.c: 1120: WDT_Clearing();
  5128  1CA0  3180  2002         	fcall	_WDT_Clearing
  5129  1CA2  0008               	return
  5130  1CA3                     __end_of_WDT_Main:	
  5131                           
  5132                           	psect	text7
  5133  0002                     __ptext7:	
  5134 ;; *************** function _WDT_Clearing *****************
  5135 ;; Defined at:
  5136 ;;		line 1126 in file "../src/MCU_B1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		None
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;Total ram usage:        0 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    5
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_WDT_Main
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _WDT_Clearing
  5166  0002                     _WDT_Clearing:	
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _WDT_Clearing: []
  5170  0002  0064               	clrwdt	;# 
  5171  0003  0008               	return
  5172  0004                     __end_of_WDT_Clearing:	
  5173                           
  5174                           	psect	text8
  5175  1A32                     __ptext8:	
  5176 ;; *************** function _Temp_Main *****************
  5177 ;; Defined at:
  5178 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    8
  5199 ;; This function calls:
  5200 ;;		_setTemp_Main
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _Temp_Main
  5208  1A32                     _Temp_Main:	
  5209                           
  5210                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5214  1A32  3186  2629         	fcall	_setTemp_Main
  5215  1A34  0008               	return
  5216  1A35                     __end_of_Temp_Main:	
  5217                           
  5218                           	psect	text9
  5219  0629                     __ptext9:	
  5220 ;; *************** function _setTemp_Main *****************
  5221 ;; Defined at:
  5222 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  AD              2   77[BANK0 ] int 
  5227 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5228 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5229 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5230 ;;  error           1   71[BANK0 ] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;		None               void
  5233 ;; Registers used:
  5234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;Total ram usage:       10 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    7
  5247 ;; This function calls:
  5248 ;;		___lwdiv
  5249 ;;		_getMain_All_Error_Status
  5250 ;;		_getMain_All_LightsStatus
  5251 ;;		_setBuz
  5252 ;;		_setOverTemp_ADV_Restore
  5253 ;;		_setProductData
  5254 ;; This function is called by:
  5255 ;;		_Temp_Main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _setTemp_Main
  5261  0629                     _setTemp_Main:	
  5262                           
  5263                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5267  0629  3000               	movlw	0
  5268  062A  3190  20C1  3186   	fcall	_getMain_All_Error_Status
  5269  062D  0020               	movlb	0	; select bank0
  5270  062E  00E5               	movwf	??_setTemp_Main
  5271  062F  0865               	movf	??_setTemp_Main,w
  5272  0630  00E7               	movwf	setTemp_Main@error
  5273                           
  5274                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5275  0631  01E8               	clrf	setTemp_Main@SafeValue
  5276  0632  01E9               	clrf	setTemp_Main@SafeValue+1
  5277  0633  01EA               	clrf	setTemp_Main@DangerValue
  5278  0634  01EB               	clrf	setTemp_Main@DangerValue+1
  5279                           
  5280                           ;OverTemperature_B1.c: 75: int AD = 0;
  5281  0635  01ED               	clrf	setTemp_Main@AD
  5282  0636  01EE               	clrf	setTemp_Main@AD+1
  5283                           
  5284                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5285  0637  319A  22C2  3186   	fcall	_getMain_All_LightsStatus
  5286  063A  0020               	movlb	0	; select bank0
  5287  063B  00E5               	movwf	??_setTemp_Main
  5288  063C  0865               	movf	??_setTemp_Main,w
  5289  063D  00EC               	movwf	setTemp_Main@TempGO
  5290                           
  5291                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5292  063E  0021               	movlb	1	; select bank1
  5293  063F  1C58               	btfss	_Temp^(0+128),0
  5294  0640  2EF8               	goto	l1799
  5295                           
  5296                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5297  0641  1958               	btfsc	_Temp^(0+128),2
  5298  0642  2E60               	goto	l7602
  5299                           
  5300                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5301  0643  0020               	movlb	0	; select bank0
  5302  0644  086C               	movf	setTemp_Main@TempGO,w
  5303  0645  3A01               	xorlw	1
  5304  0646  1D03               	skipz
  5305  0647  2E4B               	goto	l1805
  5306  0648  0021               	movlb	1	; select bank1
  5307  0649  1CD8               	btfss	_Temp^(0+128),1
  5308  064A  2E4E               	goto	l7594
  5309  064B                     l1805:	
  5310  064B  0021               	movlb	1	; select bank1
  5311  064C  1CD8               	btfss	_Temp^(0+128),1
  5312  064D  2E5D               	goto	l7600
  5313  064E                     l7594:	
  5314                           
  5315                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5316  064E  3001               	movlw	1
  5317  064F  07D9               	addwf	(_Temp^(0+128)+1),f
  5318  0650  3000               	movlw	0
  5319  0651  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5320                           
  5321                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5322  0652  3000               	movlw	0
  5323  0653  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5324  0654  30FA               	movlw	250
  5325  0655  1903               	skipnz
  5326  0656  0259               	subwf	(_Temp^(0+128)+1),w
  5327  0657  1C03               	skipc
  5328  0658  0008               	return
  5329                           
  5330                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5331  0659  01D9               	clrf	(_Temp^(0+128)+1)
  5332  065A  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5333                           
  5334                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5335  065B  1558               	bsf	_Temp^(0+128),2
  5336                           
  5337                           ;OverTemperature_B1.c: 92: }
  5338                           ;OverTemperature_B1.c: 93: } else {
  5339  065C  0008               	return
  5340  065D                     l7600:	
  5341                           
  5342                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5343  065D  01D9               	clrf	(_Temp^(0+128)+1)
  5344  065E  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5345                           
  5346                           ;OverTemperature_B1.c: 95: }
  5347                           ;OverTemperature_B1.c: 96: } else {
  5348  065F  0008               	return
  5349  0660                     l7602:	
  5350                           
  5351                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5352  0660  3001               	movlw	1
  5353  0661  07D9               	addwf	(_Temp^(0+128)+1),f
  5354  0662  3000               	movlw	0
  5355  0663  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5356                           
  5357                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5358  0664  3000               	movlw	0
  5359  0665  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5360  0666  3005               	movlw	5
  5361  0667  1903               	skipnz
  5362  0668  0259               	subwf	(_Temp^(0+128)+1),w
  5363  0669  1C03               	skipc
  5364  066A  0008               	return
  5365                           
  5366                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5367  066B  01D9               	clrf	(_Temp^(0+128)+1)
  5368  066C  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5369                           
  5370                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5371  066D  3003               	movlw	3
  5372  066E  0020               	movlb	0	; select bank0
  5373  066F  00A0               	movwf	___lwdiv@divisor
  5374  0670  3000               	movlw	0
  5375  0671  00A1               	movwf	___lwdiv@divisor+1
  5376  0672  300A               	movlw	10
  5377  0673  3ED8               	addlw	_Temp& (0+255)
  5378  0674  0086               	movwf	6
  5379  0675  0187               	clrf	7
  5380  0676  3008               	movlw	8
  5381  0677  3ED8               	addlw	_Temp& (0+255)
  5382  0678  0084               	movwf	4
  5383  0679  0185               	clrf	5
  5384  067A  3F00               	moviw [0]fsr0
  5385  067B  0021               	movlb	1	; select bank1
  5386  067C  075E               	addwf	(_Temp^(0+128)+6),w
  5387  067D  0020               	movlb	0	; select bank0
  5388  067E  00E5               	movwf	??_setTemp_Main
  5389  067F  3F01               	moviw [1]fsr0
  5390  0680  0021               	movlb	1	; select bank1
  5391  0681  3D5F               	addwfc	((_Temp+1)^(0+128)+6),w
  5392  0682  0020               	movlb	0	; select bank0
  5393  0683  00E6               	movwf	??_setTemp_Main+1
  5394  0684  3F40               	moviw [0]fsr1
  5395  0685  0765               	addwf	??_setTemp_Main,w
  5396  0686  00A2               	movwf	___lwdiv@dividend
  5397  0687  3F41               	moviw [1]fsr1
  5398  0688  3D66               	addwfc	??_setTemp_Main+1,w
  5399  0689  00A3               	movwf	___lwdiv@dividend+1
  5400  068A  3191  21C7  3186   	fcall	___lwdiv
  5401  068D  0020               	movlb	0	; select bank0
  5402  068E  0821               	movf	?___lwdiv+1,w
  5403  068F  01EE               	clrf	setTemp_Main@AD+1
  5404  0690  07EE               	addwf	setTemp_Main@AD+1,f
  5405  0691  0820               	movf	?___lwdiv,w
  5406  0692  01ED               	clrf	setTemp_Main@AD
  5407  0693  07ED               	addwf	setTemp_Main@AD,f
  5408                           
  5409                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5410  0694  319E  2647  3186   	fcall	_setOverTemp_ADV_Restore
  5411                           
  5412                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5413  0697  0020               	movlb	0	; select bank0
  5414  0698  086E               	movf	setTemp_Main@AD+1,w
  5415  0699  3A80               	xorlw	128
  5416  069A  00E5               	movwf	??_setTemp_Main
  5417  069B  3080               	movlw	128
  5418  069C  0265               	subwf	??_setTemp_Main,w
  5419  069D  1D03               	skipz
  5420  069E  2EA1               	goto	u7325
  5421  069F  3001               	movlw	1
  5422  06A0  026D               	subwf	setTemp_Main@AD,w
  5423  06A1                     u7325:	
  5424  06A1  1C03               	skipc
  5425  06A2  0008               	return
  5426                           
  5427                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5428  06A3  0021               	movlb	1	; select bank1
  5429  06A4  1158               	bcf	_Temp^(0+128),2
  5430                           
  5431                           ;OverTemperature_B1.c: 123: SafeValue = 400;
  5432  06A5  3090               	movlw	144
  5433  06A6  0020               	movlb	0	; select bank0
  5434  06A7  00E8               	movwf	setTemp_Main@SafeValue
  5435  06A8  3001               	movlw	1
  5436  06A9  00E9               	movwf	setTemp_Main@SafeValue+1
  5437                           
  5438                           ;OverTemperature_B1.c: 124: DangerValue = 345;
  5439  06AA  3059               	movlw	89
  5440  06AB  00EA               	movwf	setTemp_Main@DangerValue
  5441  06AC  3001               	movlw	1
  5442  06AD  00EB               	movwf	setTemp_Main@DangerValue+1
  5443                           
  5444                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5445  06AE  0021               	movlb	1	; select bank1
  5446  06AF  1CD8               	btfss	_Temp^(0+128),1
  5447  06B0  2ECF               	goto	l7632
  5448                           
  5449                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5450  06B1  0020               	movlb	0	; select bank0
  5451  06B2  0869               	movf	setTemp_Main@SafeValue+1,w
  5452  06B3  026E               	subwf	setTemp_Main@AD+1,w
  5453  06B4  1D03               	skipz
  5454  06B5  2EB8               	goto	u7345
  5455  06B6  0868               	movf	setTemp_Main@SafeValue,w
  5456  06B7  026D               	subwf	setTemp_Main@AD,w
  5457  06B8                     u7345:	
  5458  06B8  1C03               	skipc
  5459  06B9  2EE4               	goto	l7642
  5460                           
  5461                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5462  06BA  3001               	movlw	1
  5463  06BB  00E5               	movwf	??_setTemp_Main
  5464  06BC  0865               	movf	??_setTemp_Main,w
  5465  06BD  0021               	movlb	1	; select bank1
  5466  06BE  07DB               	addwf	(_Temp^(0+128)+3),f
  5467                           
  5468                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5469  06BF  3003               	movlw	3
  5470  06C0  025B               	subwf	(_Temp^(0+128)+3),w
  5471  06C1  1C03               	skipc
  5472  06C2  2EE6               	goto	l7644
  5473                           
  5474                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5475  06C3  01DB               	clrf	(_Temp^(0+128)+3)
  5476                           
  5477                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5478  06C4  10D8               	bcf	_Temp^(0+128),1
  5479                           
  5480                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5481  06C5  3064               	movlw	100
  5482  06C6  0020               	movlb	0	; select bank0
  5483  06C7  00A9               	movwf	setBuz@time
  5484  06C8  3000               	movlw	0
  5485  06C9  00AA               	movwf	setBuz@time+1
  5486  06CA  3002               	movlw	2
  5487  06CB  3194  2425  3186   	fcall	_setBuz
  5488                           
  5489                           ;OverTemperature_B1.c: 137: }
  5490                           ;OverTemperature_B1.c: 138: } else {
  5491  06CE  2EE6               	goto	l7644
  5492  06CF                     l7632:	
  5493                           ;OverTemperature_B1.c: 140: }
  5494                           ;OverTemperature_B1.c: 141: } else {
  5495                           
  5496                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5497                           
  5498                           
  5499                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5500  06CF  0020               	movlb	0	; select bank0
  5501  06D0  086E               	movf	setTemp_Main@AD+1,w
  5502  06D1  026B               	subwf	setTemp_Main@DangerValue+1,w
  5503  06D2  1D03               	skipz
  5504  06D3  2ED6               	goto	u7365
  5505  06D4  086D               	movf	setTemp_Main@AD,w
  5506  06D5  026A               	subwf	setTemp_Main@DangerValue,w
  5507  06D6                     u7365:	
  5508  06D6  1C03               	skipc
  5509  06D7  2EE4               	goto	l7642
  5510                           
  5511                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5512  06D8  3001               	movlw	1
  5513  06D9  00E5               	movwf	??_setTemp_Main
  5514  06DA  0865               	movf	??_setTemp_Main,w
  5515  06DB  0021               	movlb	1	; select bank1
  5516  06DC  07DB               	addwf	(_Temp^(0+128)+3),f
  5517                           
  5518                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5519  06DD  3003               	movlw	3
  5520  06DE  025B               	subwf	(_Temp^(0+128)+3),w
  5521  06DF  1C03               	skipc
  5522  06E0  2EE6               	goto	l7644
  5523                           
  5524                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5525  06E1  01DB               	clrf	(_Temp^(0+128)+3)
  5526                           
  5527                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5528  06E2  14D8               	bsf	_Temp^(0+128),1
  5529                           
  5530                           ;OverTemperature_B1.c: 147: }
  5531                           ;OverTemperature_B1.c: 148: } else {
  5532  06E3  2EE6               	goto	l7644
  5533  06E4                     l7642:	
  5534                           
  5535                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5536  06E4  0021               	movlb	1	; select bank1
  5537  06E5  01DB               	clrf	(_Temp^(0+128)+3)
  5538  06E6                     l7644:	
  5539                           
  5540                           ;OverTemperature_B1.c: 150: }
  5541                           ;OverTemperature_B1.c: 151: }
  5542                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5543  06E6  0020               	movlb	0	; select bank0
  5544  06E7  086E               	movf	setTemp_Main@AD+1,w
  5545  06E8  00E5               	movwf	??_setTemp_Main
  5546  06E9  0865               	movf	??_setTemp_Main,w
  5547  06EA  00E2               	movwf	setProductData@value
  5548  06EB  3018               	movlw	24
  5549  06EC  319B  2310  3186   	fcall	_setProductData
  5550                           
  5551                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5552  06EF  0020               	movlb	0	; select bank0
  5553  06F0  086D               	movf	setTemp_Main@AD,w
  5554  06F1  00E5               	movwf	??_setTemp_Main
  5555  06F2  0865               	movf	??_setTemp_Main,w
  5556  06F3  00E2               	movwf	setProductData@value
  5557  06F4  3019               	movlw	25
  5558  06F5  319B  2310         	fcall	_setProductData
  5559                           
  5560                           ;OverTemperature_B1.c: 169: }
  5561                           ;OverTemperature_B1.c: 170: }
  5562                           ;OverTemperature_B1.c: 171: }
  5563                           ;OverTemperature_B1.c: 174: } else {
  5564  06F7  0008               	return
  5565  06F8                     l1799:	
  5566                           
  5567                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5568  06F8  1C2F               	btfss	_myMain^(0+128),0
  5569  06F9  0008               	return
  5570                           
  5571                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5572  06FA  1458               	bsf	_Temp^(0+128),0
  5573  06FB  0008               	return
  5574  06FC                     __end_of_setTemp_Main:	
  5575                           
  5576                           	psect	text10
  5577  1E47                     __ptext10:	
  5578 ;; *************** function _setOverTemp_ADV_Restore *****************
  5579 ;; Defined at:
  5580 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  i               2    1[BANK0 ] int 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        3 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    5
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_setTemp_Main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _setOverTemp_ADV_Restore
  5610  1E47                     _setOverTemp_ADV_Restore:	
  5611                           
  5612                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5616  1E47  0020               	movlb	0	; select bank0
  5617  1E48  01A1               	clrf	setOverTemp_ADV_Restore@i
  5618  1E49  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5619  1E4A                     L2:	
  5620  1E4A  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5621  1E4B  3A80               	xorlw	128
  5622  1E4C  00A0               	movwf	??_setOverTemp_ADV_Restore
  5623  1E4D  3080               	movlw	128
  5624  1E4E  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5625  1E4F  1D03               	skipz
  5626  1E50  2E53               	goto	u6345
  5627  1E51  3005               	movlw	5
  5628  1E52  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5629  1E53                     u6345:	
  5630  1E53  1803               	btfsc	3,0
  5631  1E54  0008               	return
  5632                           
  5633                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5634  1E55  0020               	movlb	0	; select bank0
  5635  1E56  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5636  1E57  3EDC               	addlw	(_Temp+4)& (0+255)
  5637  1E58  0086               	movwf	6
  5638  1E59  0187               	clrf	7
  5639  1E5A  3000               	movlw	0
  5640  1E5B  3FC0               	movwi [0]fsr1
  5641  1E5C  3FC1               	movwi [1]fsr1
  5642  1E5D  3001               	movlw	1
  5643  1E5E  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5644  1E5F  3000               	movlw	0
  5645  1E60  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5646  1E61  2E4A               	goto	L2
  5647  1E62                     __end_of_setOverTemp_ADV_Restore:	
  5648                           
  5649                           	psect	text11
  5650  1A2F                     __ptext11:	
  5651 ;; *************** function _Temp_Initialization *****************
  5652 ;; Defined at:
  5653 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;		None
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;		None
  5658 ;; Return value:  Size  Location     Type
  5659 ;;		None               void
  5660 ;; Registers used:
  5661 ;;		status,2, status,0, pclath, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;Total ram usage:        0 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    6
  5674 ;; This function calls:
  5675 ;;		_setTemp_Initialization
  5676 ;; This function is called by:
  5677 ;;		_main
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           
  5682                           ;psect for function _Temp_Initialization
  5683  1A2F                     _Temp_Initialization:	
  5684                           
  5685                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5686                           
  5687                           ;incstack = 0
  5688                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5689  1A2F  3187  27FF         	fcall	_setTemp_Initialization
  5690  1A31  0008               	return
  5691  1A32                     __end_of_Temp_Initialization:	
  5692                           
  5693                           	psect	text12
  5694  07FF                     __ptext12:	
  5695 ;; *************** function _setTemp_Initialization *****************
  5696 ;; Defined at:
  5697 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;		None
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;		None
  5702 ;; Return value:  Size  Location     Type
  5703 ;;		None               void
  5704 ;; Registers used:
  5705 ;;		None
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;Total ram usage:        0 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    5
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_Temp_Initialization
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           
  5726                           ;psect for function _setTemp_Initialization
  5727  07FF                     _setTemp_Initialization:	
  5728                           
  5729                           ;incstack = 0
  5730                           ; Regs used in _setTemp_Initialization: []
  5731  07FF  0008               	return
  5732  0800                     __end_of_setTemp_Initialization:	
  5733                           
  5734                           	psect	text13
  5735  1A88                     __ptext13:	
  5736 ;; *************** function _Switch_Main *****************
  5737 ;; Defined at:
  5738 ;;		line 76 in file "../src/Switch_B1.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;		None               void
  5745 ;; Registers used:
  5746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    9
  5759 ;; This function calls:
  5760 ;;		_TouchPower
  5761 ;;		_setSw_Main
  5762 ;; This function is called by:
  5763 ;;		_main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           
  5768                           ;psect for function _Switch_Main
  5769  1A88                     _Switch_Main:	
  5770                           
  5771                           ;Switch_B1.c: 79: setSw_Main(1);
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5775  1A88  3001               	movlw	1
  5776  1A89  3182  2205  319A   	fcall	_setSw_Main
  5777                           
  5778                           ;Switch_B1.c: 91: TouchPower();
  5779  1A8C  319D  2555         	fcall	_TouchPower
  5780  1A8E  0008               	return
  5781  1A8F                     __end_of_Switch_Main:	
  5782                           
  5783                           	psect	text14
  5784  0205                     __ptext14:	
  5785 ;; *************** function _setSw_Main *****************
  5786 ;; Defined at:
  5787 ;;		line 117 in file "../src/Switch_B1.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  sw              1    wreg     unsigned char 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  sw              1   17[BANK0 ] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;		None               void
  5794 ;; Registers used:
  5795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;Total ram usage:        3 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    8
  5808 ;; This function calls:
  5809 ;;		_SwPointSelect
  5810 ;;		_getMain_All_Error_Status
  5811 ;;		_getSw_KeyStatus
  5812 ;;		_setBuz
  5813 ;;		_setDimmerLights_DimmingOn
  5814 ;;		_setDimmerLights_SwOff
  5815 ;;		_setDimmerLights_SwOn
  5816 ;;		_setRF_Learn
  5817 ;; This function is called by:
  5818 ;;		_Switch_Main
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _setSw_Main
  5824  0205                     _setSw_Main:	
  5825                           
  5826                           ;incstack = 0
  5827                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5828                           ;setSw_Main@sw stored from wreg
  5829  0205  0020               	movlb	0	; select bank0
  5830  0206  00B1               	movwf	setSw_Main@sw
  5831                           
  5832                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5833  0207  0831               	movf	setSw_Main@sw,w
  5834  0208  319B  237C  3182   	fcall	_SwPointSelect
  5835                           
  5836                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5837  020B  0021               	movlb	1	; select bank1
  5838  020C  0852               	movf	_Sw^(0+128),w
  5839  020D  0086               	movwf	6
  5840  020E  3001               	movlw	1	; select bank2/3
  5841  020F  0087               	movwf	7
  5842  0210  1C01               	btfss	1,0
  5843  0211  2B81               	goto	l2529
  5844                           
  5845                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5846  0212  3000               	movlw	0
  5847  0213  3190  20C1  3182   	fcall	_getMain_All_Error_Status
  5848  0216  3800               	iorlw	0
  5849  0217  1D03               	skipz
  5850  0218  2A37               	goto	l7756
  5851                           
  5852                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5853  0219  0021               	movlb	1	; select bank1
  5854  021A  0A52               	incf	_Sw^(0+128),w
  5855  021B  0086               	movwf	6
  5856  021C  3001               	movlw	1	; select bank2/3
  5857  021D  0087               	movwf	7
  5858  021E  1081               	bcf	1,1
  5859                           
  5860                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5861  021F  0020               	movlb	0	; select bank0
  5862  0220  0831               	movf	setSw_Main@sw,w
  5863  0221  319C  2438  3182   	fcall	_getSw_KeyStatus
  5864  0224  3A01               	xorlw	1
  5865  0225  3000               	movlw	0
  5866  0226  1903               	skipnz
  5867  0227  3001               	movlw	1
  5868  0228  0020               	movlb	0	; select bank0
  5869  0229  00AF               	movwf	??_setSw_Main
  5870  022A  0021               	movlb	1	; select bank1
  5871  022B  0852               	movf	_Sw^(0+128),w
  5872  022C  0086               	movwf	6
  5873  022D  3001               	movlw	1	; select bank2/3
  5874  022E  0087               	movwf	7
  5875  022F  0020               	movlb	0	; select bank0
  5876  0230  0DAF               	rlf	??_setSw_Main,f
  5877  0231  0801               	movf	1,w
  5878  0232  062F               	xorwf	??_setSw_Main,w
  5879  0233  39FD               	andlw	-3
  5880  0234  062F               	xorwf	??_setSw_Main,w
  5881  0235  0081               	movwf	1
  5882                           
  5883                           ;Switch_B1.c: 124: } else {
  5884  0236  2A4D               	goto	l2531
  5885  0237                     l7756:	
  5886                           
  5887                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5888  0237  0021               	movlb	1	; select bank1
  5889  0238  0A52               	incf	_Sw^(0+128),w
  5890  0239  0086               	movwf	6
  5891  023A  3001               	movlw	1	; select bank2/3
  5892  023B  0087               	movwf	7
  5893  023C  1881               	btfsc	1,1
  5894  023D  2A4D               	goto	l2531
  5895                           
  5896                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5897  023E  0A52               	incf	_Sw^(0+128),w
  5898  023F  0086               	movwf	6
  5899  0240  3001               	movlw	1	; select bank2/3
  5900  0241  0087               	movwf	7
  5901  0242  1481               	bsf	1,1
  5902                           
  5903                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5904  0243  0852               	movf	_Sw^(0+128),w
  5905  0244  0086               	movwf	6
  5906  0245  3001               	movlw	1	; select bank2/3
  5907  0246  0087               	movwf	7
  5908  0247  1081               	bcf	1,1
  5909                           
  5910                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5911  0248  0852               	movf	_Sw^(0+128),w
  5912  0249  0086               	movwf	6
  5913  024A  3001               	movlw	1	; select bank2/3
  5914  024B  0087               	movwf	7
  5915  024C  1501               	bsf	1,2
  5916  024D                     l2531:	
  5917                           
  5918                           ;Switch_B1.c: 130: }
  5919                           ;Switch_B1.c: 131: }
  5920                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5921  024D  0021               	movlb	1	; select bank1
  5922  024E  0852               	movf	_Sw^(0+128),w
  5923  024F  0086               	movwf	6
  5924  0250  3001               	movlw	1	; select bank2/3
  5925  0251  0087               	movwf	7
  5926  0252  1C81               	btfss	1,1
  5927  0253  2B29               	goto	l7806
  5928                           
  5929                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5930  0254  0852               	movf	_Sw^(0+128),w
  5931  0255  0086               	movwf	6
  5932  0256  3001               	movlw	1	; select bank2/3
  5933  0257  0087               	movwf	7
  5934  0258  1901               	btfsc	1,2
  5935  0259  2A80               	goto	l7772
  5936                           
  5937                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5938  025A  3001               	movlw	1
  5939  025B  0020               	movlb	0	; select bank0
  5940  025C  00AF               	movwf	??_setSw_Main
  5941  025D  0021               	movlb	1	; select bank1
  5942  025E  0852               	movf	_Sw^(0+128),w
  5943  025F  3E02               	addlw	2
  5944  0260  0086               	movwf	6
  5945  0261  3001               	movlw	1	; select bank2/3
  5946  0262  0087               	movwf	7
  5947  0263  0020               	movlb	0	; select bank0
  5948  0264  082F               	movf	??_setSw_Main,w
  5949  0265  0781               	addwf	1,f
  5950                           
  5951                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5952  0266  0021               	movlb	1	; select bank1
  5953  0267  0852               	movf	_Sw^(0+128),w
  5954  0268  3E02               	addlw	2
  5955  0269  0086               	movwf	6
  5956  026A  3001               	movlw	1	; select bank2/3
  5957  026B  0087               	movwf	7
  5958  026C  3003               	movlw	3
  5959  026D  0201               	subwf	1,w
  5960  026E  1C03               	skipc
  5961  026F  0008               	return
  5962                           
  5963                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5964  0270  0852               	movf	_Sw^(0+128),w
  5965  0271  3E02               	addlw	2
  5966  0272  0086               	movwf	6
  5967  0273  3001               	movlw	1	; select bank2/3
  5968  0274  0087               	movwf	7
  5969  0275  0181               	clrf	1
  5970                           
  5971                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5972  0276  0852               	movf	_Sw^(0+128),w
  5973  0277  0086               	movwf	6
  5974  0278  3001               	movlw	1	; select bank2/3
  5975  0279  0087               	movwf	7
  5976  027A  1501               	bsf	1,2
  5977                           
  5978                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5979  027B  0020               	movlb	0	; select bank0
  5980  027C  0831               	movf	setSw_Main@sw,w
  5981  027D  3191  215C         	fcall	_setDimmerLights_SwOn
  5982                           
  5983                           ;Switch_B1.c: 147: }
  5984                           ;Switch_B1.c: 148: } else {
  5985  027F  0008               	return
  5986  0280                     l7772:	
  5987                           
  5988                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5989  0280  0021               	movlb	1	; select bank1
  5990  0281  0852               	movf	_Sw^(0+128),w
  5991  0282  0086               	movwf	6
  5992  0283  3001               	movlw	1	; select bank2/3
  5993  0284  0087               	movwf	7
  5994  0285  1981               	btfsc	1,3
  5995  0286  2AB5               	goto	l7782
  5996                           
  5997                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5998  0287  0852               	movf	_Sw^(0+128),w
  5999  0288  3E03               	addlw	3
  6000  0289  0086               	movwf	6
  6001  028A  3001               	movlw	1	; select bank2/3
  6002  028B  0087               	movwf	7
  6003  028C  3001               	movlw	1
  6004  028D  0781               	addwf	1,f
  6005  028E  3141               	addfsr 1,1
  6006  028F  1803               	skipnc
  6007  0290  0A81               	incf	1,f
  6008                           
  6009                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6010  0291  0852               	movf	_Sw^(0+128),w
  6011  0292  3E03               	addlw	3
  6012  0293  0086               	movwf	6
  6013  0294  3001               	movlw	1	; select bank2/3
  6014  0295  0087               	movwf	7
  6015  0296  3F40               	moviw [0]fsr1
  6016  0297  0020               	movlb	0	; select bank0
  6017  0298  00AF               	movwf	??_setSw_Main
  6018  0299  3F41               	moviw [1]fsr1
  6019  029A  00B0               	movwf	??_setSw_Main+1
  6020  029B  3000               	movlw	0
  6021  029C  0230               	subwf	??_setSw_Main+1,w
  6022  029D  304B               	movlw	75
  6023  029E  1903               	skipnz
  6024  029F  022F               	subwf	??_setSw_Main,w
  6025  02A0  1C03               	skipc
  6026  02A1  0008               	return
  6027                           
  6028                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6029  02A2  0021               	movlb	1	; select bank1
  6030  02A3  0852               	movf	_Sw^(0+128),w
  6031  02A4  3E03               	addlw	3
  6032  02A5  0086               	movwf	6
  6033  02A6  3001               	movlw	1	; select bank2/3
  6034  02A7  0087               	movwf	7
  6035  02A8  3000               	movlw	0
  6036  02A9  3FC0               	movwi [0]fsr1
  6037  02AA  3FC1               	movwi [1]fsr1
  6038                           
  6039                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6040  02AB  0852               	movf	_Sw^(0+128),w
  6041  02AC  0086               	movwf	6
  6042  02AD  3001               	movlw	1	; select bank2/3
  6043  02AE  0087               	movwf	7
  6044  02AF  1581               	bsf	1,3
  6045                           
  6046                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6047  02B0  0020               	movlb	0	; select bank0
  6048  02B1  0831               	movf	setSw_Main@sw,w
  6049  02B2  3190  2040         	fcall	_setDimmerLights_DimmingOn
  6050                           
  6051                           ;Switch_B1.c: 162: }
  6052                           ;Switch_B1.c: 163: } else {
  6053  02B4  0008               	return
  6054  02B5                     l7782:	
  6055                           
  6056                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6057  02B5  0021               	movlb	1	; select bank1
  6058  02B6  0852               	movf	_Sw^(0+128),w
  6059  02B7  0086               	movwf	6
  6060  02B8  3001               	movlw	1	; select bank2/3
  6061  02B9  0087               	movwf	7
  6062  02BA  1A01               	btfsc	1,4
  6063  02BB  2AF5               	goto	l7796
  6064                           
  6065                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6066  02BC  0852               	movf	_Sw^(0+128),w
  6067  02BD  3E05               	addlw	5
  6068  02BE  0086               	movwf	6
  6069  02BF  3001               	movlw	1	; select bank2/3
  6070  02C0  0087               	movwf	7
  6071  02C1  3001               	movlw	1
  6072  02C2  0781               	addwf	1,f
  6073  02C3  3141               	addfsr 1,1
  6074  02C4  1803               	skipnc
  6075  02C5  0A81               	incf	1,f
  6076                           
  6077                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6078  02C6  0852               	movf	_Sw^(0+128),w
  6079  02C7  3E05               	addlw	5
  6080  02C8  0086               	movwf	6
  6081  02C9  3001               	movlw	1	; select bank2/3
  6082  02CA  0087               	movwf	7
  6083  02CB  3F40               	moviw [0]fsr1
  6084  02CC  0020               	movlb	0	; select bank0
  6085  02CD  00AF               	movwf	??_setSw_Main
  6086  02CE  3F41               	moviw [1]fsr1
  6087  02CF  00B0               	movwf	??_setSw_Main+1
  6088  02D0  3000               	movlw	0
  6089  02D1  0230               	subwf	??_setSw_Main+1,w
  6090  02D2  304B               	movlw	75
  6091  02D3  1903               	skipnz
  6092  02D4  022F               	subwf	??_setSw_Main,w
  6093  02D5  1C03               	skipc
  6094  02D6  0008               	return
  6095                           
  6096                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6097  02D7  0021               	movlb	1	; select bank1
  6098  02D8  0852               	movf	_Sw^(0+128),w
  6099  02D9  3E05               	addlw	5
  6100  02DA  0086               	movwf	6
  6101  02DB  3001               	movlw	1	; select bank2/3
  6102  02DC  0087               	movwf	7
  6103  02DD  3000               	movlw	0
  6104  02DE  3FC0               	movwi [0]fsr1
  6105  02DF  3FC1               	movwi [1]fsr1
  6106                           
  6107                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6108  02E0  0852               	movf	_Sw^(0+128),w
  6109  02E1  0086               	movwf	6
  6110  02E2  3001               	movlw	1	; select bank2/3
  6111  02E3  0087               	movwf	7
  6112  02E4  1601               	bsf	1,4
  6113                           
  6114                           ;Switch_B1.c: 172: setRF_Learn(1);
  6115  02E5  3001               	movlw	1
  6116  02E6  319D  2502  3182   	fcall	_setRF_Learn
  6117                           
  6118                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6119  02E9  0021               	movlb	1	; select bank1
  6120  02EA  1EAF               	btfss	_myMain^(0+128),5
  6121  02EB  0008               	return
  6122                           
  6123                           ;Switch_B1.c: 174: setBuz(2, 100);
  6124  02EC  3064               	movlw	100
  6125  02ED  0020               	movlb	0	; select bank0
  6126  02EE  00A9               	movwf	setBuz@time
  6127  02EF  3000               	movlw	0
  6128  02F0  00AA               	movwf	setBuz@time+1
  6129  02F1  3002               	movlw	2
  6130  02F2  3194  2425         	fcall	_setBuz
  6131                           
  6132                           ;Switch_B1.c: 175: }
  6133                           ;Switch_B1.c: 179: }
  6134                           ;Switch_B1.c: 180: } else {
  6135  02F4  0008               	return
  6136  02F5                     l7796:	
  6137                           
  6138                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6139  02F5  0021               	movlb	1	; select bank1
  6140  02F6  0852               	movf	_Sw^(0+128),w
  6141  02F7  0086               	movwf	6
  6142  02F8  3001               	movlw	1	; select bank2/3
  6143  02F9  0087               	movwf	7
  6144  02FA  1A81               	btfsc	1,5
  6145  02FB  0008               	return
  6146                           
  6147                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6148  02FC  0852               	movf	_Sw^(0+128),w
  6149  02FD  3E07               	addlw	7
  6150  02FE  0086               	movwf	6
  6151  02FF  3001               	movlw	1	; select bank2/3
  6152  0300  0087               	movwf	7
  6153  0301  3001               	movlw	1
  6154  0302  0781               	addwf	1,f
  6155  0303  3141               	addfsr 1,1
  6156  0304  1803               	skipnc
  6157  0305  0A81               	incf	1,f
  6158                           
  6159                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6160  0306  0852               	movf	_Sw^(0+128),w
  6161  0307  3E07               	addlw	7
  6162  0308  0086               	movwf	6
  6163  0309  3001               	movlw	1	; select bank2/3
  6164  030A  0087               	movwf	7
  6165  030B  3F40               	moviw [0]fsr1
  6166  030C  0020               	movlb	0	; select bank0
  6167  030D  00AF               	movwf	??_setSw_Main
  6168  030E  3F41               	moviw [1]fsr1
  6169  030F  00B0               	movwf	??_setSw_Main+1
  6170  0310  3000               	movlw	0
  6171  0311  0230               	subwf	??_setSw_Main+1,w
  6172  0312  3096               	movlw	150
  6173  0313  1903               	skipnz
  6174  0314  022F               	subwf	??_setSw_Main,w
  6175  0315  1C03               	skipc
  6176  0316  0008               	return
  6177                           
  6178                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6179  0317  0021               	movlb	1	; select bank1
  6180  0318  0852               	movf	_Sw^(0+128),w
  6181  0319  3E07               	addlw	7
  6182  031A  0086               	movwf	6
  6183  031B  3001               	movlw	1	; select bank2/3
  6184  031C  0087               	movwf	7
  6185  031D  3000               	movlw	0
  6186  031E  3FC0               	movwi [0]fsr1
  6187  031F  3FC1               	movwi [1]fsr1
  6188                           
  6189                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6190  0320  0852               	movf	_Sw^(0+128),w
  6191  0321  0086               	movwf	6
  6192  0322  3001               	movlw	1	; select bank2/3
  6193  0323  0087               	movwf	7
  6194  0324  1681               	bsf	1,5
  6195                           
  6196                           ;Switch_B1.c: 188: setRF_Learn(0);
  6197  0325  3000               	movlw	0
  6198  0326  319D  2502         	fcall	_setRF_Learn
  6199                           
  6200                           ;Switch_B1.c: 191: }
  6201                           ;Switch_B1.c: 192: }
  6202                           ;Switch_B1.c: 193: }
  6203                           ;Switch_B1.c: 195: }
  6204                           ;Switch_B1.c: 196: }
  6205                           ;Switch_B1.c: 197: } else {
  6206  0328  0008               	return
  6207  0329                     l7806:	
  6208                           
  6209                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6210  0329  0021               	movlb	1	; select bank1
  6211  032A  0852               	movf	_Sw^(0+128),w
  6212  032B  0086               	movwf	6
  6213  032C  3001               	movlw	1	; select bank2/3
  6214  032D  0087               	movwf	7
  6215  032E  1D01               	btfss	1,2
  6216  032F  0008               	return
  6217                           
  6218                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6219  0330  3001               	movlw	1
  6220  0331  0020               	movlb	0	; select bank0
  6221  0332  00AF               	movwf	??_setSw_Main
  6222  0333  0021               	movlb	1	; select bank1
  6223  0334  0852               	movf	_Sw^(0+128),w
  6224  0335  3E02               	addlw	2
  6225  0336  0086               	movwf	6
  6226  0337  3001               	movlw	1	; select bank2/3
  6227  0338  0087               	movwf	7
  6228  0339  0020               	movlb	0	; select bank0
  6229  033A  082F               	movf	??_setSw_Main,w
  6230  033B  0781               	addwf	1,f
  6231                           
  6232                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (60 / 20)) {
  6233  033C  0021               	movlb	1	; select bank1
  6234  033D  0852               	movf	_Sw^(0+128),w
  6235  033E  3E02               	addlw	2
  6236  033F  0086               	movwf	6
  6237  0340  3001               	movlw	1	; select bank2/3
  6238  0341  0087               	movwf	7
  6239  0342  3003               	movlw	3
  6240  0343  0201               	subwf	1,w
  6241  0344  1C03               	skipc
  6242  0345  0008               	return
  6243                           
  6244                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6245  0346  0852               	movf	_Sw^(0+128),w
  6246  0347  3E02               	addlw	2
  6247  0348  0086               	movwf	6
  6248  0349  3001               	movlw	1	; select bank2/3
  6249  034A  0087               	movwf	7
  6250  034B  0181               	clrf	1
  6251                           
  6252                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6253  034C  0852               	movf	_Sw^(0+128),w
  6254  034D  0086               	movwf	6
  6255  034E  3001               	movlw	1	; select bank2/3
  6256  034F  0087               	movwf	7
  6257  0350  1101               	bcf	1,2
  6258                           
  6259                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6260  0351  0852               	movf	_Sw^(0+128),w
  6261  0352  3E03               	addlw	3
  6262  0353  0086               	movwf	6
  6263  0354  3001               	movlw	1	; select bank2/3
  6264  0355  0087               	movwf	7
  6265  0356  3000               	movlw	0
  6266  0357  3FC0               	movwi [0]fsr1
  6267  0358  3FC1               	movwi [1]fsr1
  6268                           
  6269                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6270  0359  0852               	movf	_Sw^(0+128),w
  6271  035A  0086               	movwf	6
  6272  035B  3001               	movlw	1	; select bank2/3
  6273  035C  0087               	movwf	7
  6274  035D  1181               	bcf	1,3
  6275                           
  6276                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6277  035E  0852               	movf	_Sw^(0+128),w
  6278  035F  0086               	movwf	6
  6279  0360  3001               	movlw	1	; select bank2/3
  6280  0361  0087               	movwf	7
  6281  0362  1201               	bcf	1,4
  6282                           
  6283                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6284  0363  0852               	movf	_Sw^(0+128),w
  6285  0364  0086               	movwf	6
  6286  0365  3001               	movlw	1	; select bank2/3
  6287  0366  0087               	movwf	7
  6288  0367  1281               	bcf	1,5
  6289                           
  6290                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6291  0368  0852               	movf	_Sw^(0+128),w
  6292  0369  3E05               	addlw	5
  6293  036A  0086               	movwf	6
  6294  036B  3001               	movlw	1	; select bank2/3
  6295  036C  0087               	movwf	7
  6296  036D  3000               	movlw	0
  6297  036E  3FC0               	movwi [0]fsr1
  6298  036F  3FC1               	movwi [1]fsr1
  6299                           
  6300                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6301  0370  0852               	movf	_Sw^(0+128),w
  6302  0371  3E07               	addlw	7
  6303  0372  0086               	movwf	6
  6304  0373  3001               	movlw	1	; select bank2/3
  6305  0374  0087               	movwf	7
  6306  0375  3000               	movlw	0
  6307  0376  3FC0               	movwi [0]fsr1
  6308  0377  3FC1               	movwi [1]fsr1
  6309                           
  6310                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6311  0378  0020               	movlb	0	; select bank0
  6312  0379  0831               	movf	setSw_Main@sw,w
  6313  037A  3191  21FE  3182   	fcall	_setDimmerLights_SwOff
  6314                           
  6315                           ;Switch_B1.c: 220: setRF_Learn(0);
  6316  037D  3000               	movlw	0
  6317  037E  319D  2502         	fcall	_setRF_Learn
  6318                           
  6319                           ;Switch_B1.c: 222: }
  6320                           ;Switch_B1.c: 223: }
  6321                           ;Switch_B1.c: 224: }
  6322                           ;Switch_B1.c: 225: } else {
  6323  0380  0008               	return
  6324  0381                     l2529:	
  6325                           
  6326                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6327  0381  1C2F               	btfss	_myMain^(0+128),0
  6328  0382  0008               	return
  6329                           
  6330                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6331  0383  0852               	movf	_Sw^(0+128),w
  6332  0384  0086               	movwf	6
  6333  0385  3001               	movlw	1	; select bank2/3
  6334  0386  0087               	movwf	7
  6335  0387  1401               	bsf	1,0
  6336  0388  0008               	return
  6337  0389                     __end_of_setSw_Main:	
  6338                           
  6339                           	psect	text15
  6340  1D02                     __ptext15:	
  6341 ;; *************** function _setRF_Learn *****************
  6342 ;; Defined at:
  6343 ;;		line 33 in file "../src/RF_Control_B1.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  command         1    wreg     unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  command         1    1[BANK0 ] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;		None               void
  6350 ;; Registers used:
  6351 ;;		wreg, status,2, status,0
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;Total ram usage:        2 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    5
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_setSw_Main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _setRF_Learn
  6373  1D02                     _setRF_Learn:	
  6374                           
  6375                           ;incstack = 0
  6376                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6377                           ;setRF_Learn@command stored from wreg
  6378  1D02  0020               	movlb	0	; select bank0
  6379  1D03  00A1               	movwf	setRF_Learn@command
  6380                           
  6381                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6382  1D04  0821               	movf	setRF_Learn@command,w
  6383  1D05  3A01               	xorlw	1
  6384  1D06  3000               	movlw	0
  6385  1D07  1903               	skipnz
  6386  1D08  3001               	movlw	1
  6387  1D09  00A0               	movwf	??_setRF_Learn
  6388  1D0A  0EA0               	swapf	??_setRF_Learn,f
  6389  1D0B  0DA0               	rlf	??_setRF_Learn,f
  6390  1D0C  0DA0               	rlf	??_setRF_Learn,f
  6391  1D0D  0021               	movlb	1	; select bank1
  6392  1D0E  0820               	movf	_RF1^(0+128),w
  6393  1D0F  0020               	movlb	0	; select bank0
  6394  1D10  0620               	xorwf	??_setRF_Learn,w
  6395  1D11  39BF               	andlw	-65
  6396  1D12  0620               	xorwf	??_setRF_Learn,w
  6397  1D13  0021               	movlb	1	; select bank1
  6398  1D14  00A0               	movwf	_RF1^(0+128)
  6399  1D15  0008               	return
  6400  1D16                     __end_of_setRF_Learn:	
  6401                           
  6402                           	psect	text16
  6403  1040                     __ptext16:	
  6404 ;; *************** function _setDimmerLights_DimmingOn *****************
  6405 ;; Defined at:
  6406 ;;		line 760 in file "../src/Dimmer_B1.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  sw              1    wreg     unsigned char 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  sw              1    2[BANK0 ] unsigned char 
  6411 ;; Return value:  Size  Location     Type
  6412 ;;		None               void
  6413 ;; Registers used:
  6414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;Total ram usage:        1 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    6
  6427 ;; This function calls:
  6428 ;;		_DimmerLights_SelectPointer
  6429 ;; This function is called by:
  6430 ;;		_setSw_Main
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _setDimmerLights_DimmingOn
  6436  1040                     _setDimmerLights_DimmingOn:	
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6440                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6441  1040  0020               	movlb	0	; select bank0
  6442  1041  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6443                           
  6444                           ;Dimmer_B1.c: 766: DimmerLights_SelectPointer(sw);
  6445  1042  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6446  1043  319B  2304  3190   	fcall	_DimmerLights_SelectPointer
  6447                           
  6448                           ;Dimmer_B1.c: 767: if (DimmerLights->Trigger == 0) {
  6449  1046  0021               	movlb	1	; select bank1
  6450  1047  084C               	movf	_DimmerLights^(0+128),w
  6451  1048  0086               	movwf	6
  6452  1049  3001               	movlw	1	; select bank2/3
  6453  104A  0087               	movwf	7
  6454  104B  1881               	btfsc	1,1
  6455  104C  0008               	return
  6456                           
  6457                           ;Dimmer_B1.c: 768: if (DimmerLights->SwFlag == 1) {
  6458  104D  084C               	movf	_DimmerLights^(0+128),w
  6459  104E  0086               	movwf	6
  6460  104F  3001               	movlw	1	; select bank2/3
  6461  1050  0087               	movwf	7
  6462  1051  1C01               	btfss	1,0
  6463  1052  0008               	return
  6464                           
  6465                           ;Dimmer_B1.c: 769: DimmerLights->Status = 1;
  6466  1053  0A4C               	incf	_DimmerLights^(0+128),w
  6467  1054  0086               	movwf	6
  6468  1055  3001               	movlw	1	; select bank2/3
  6469  1056  0087               	movwf	7
  6470  1057  1401               	bsf	1,0
  6471                           
  6472                           ;Dimmer_B1.c: 771: DimmerLights->DimmingSwFlag = 1;
  6473  1058  084C               	movf	_DimmerLights^(0+128),w
  6474  1059  0086               	movwf	6
  6475  105A  3001               	movlw	1	; select bank2/3
  6476  105B  0087               	movwf	7
  6477  105C  1581               	bsf	1,3
  6478                           
  6479                           ;Dimmer_B1.c: 772: DimmerLights->DimmingTrigger = 1;
  6480  105D  084C               	movf	_DimmerLights^(0+128),w
  6481  105E  0086               	movwf	6
  6482  105F  3001               	movlw	1	; select bank2/3
  6483  1060  0087               	movwf	7
  6484  1061  1601               	bsf	1,4
  6485                           
  6486                           ;Dimmer_B1.c: 773: DimmerLights->DimmingSwitch = 1;
  6487  1062  084C               	movf	_DimmerLights^(0+128),w
  6488  1063  0086               	movwf	6
  6489  1064  3001               	movlw	1	; select bank2/3
  6490  1065  0087               	movwf	7
  6491  1066  1681               	bsf	1,5
  6492  1067  0008               	return
  6493  1068                     __end_of_setDimmerLights_DimmingOn:	
  6494                           
  6495                           	psect	text17
  6496  1C38                     __ptext17:	
  6497 ;; *************** function _getSw_KeyStatus *****************
  6498 ;; Defined at:
  6499 ;;		line 238 in file "../src/Switch_B1.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  sw              1    wreg     unsigned char 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  sw              1    0[COMMON] unsigned char 
  6504 ;;  status          1    1[BANK0 ] unsigned char 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      unsigned char 
  6507 ;; Registers used:
  6508 ;;		wreg, status,2
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;Total ram usage:        3 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    5
  6521 ;; This function calls:
  6522 ;;		Nothing
  6523 ;; This function is called by:
  6524 ;;		_setSw_Main
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           
  6529                           ;psect for function _getSw_KeyStatus
  6530  1C38                     _getSw_KeyStatus:	
  6531                           
  6532                           ;Switch_B1.c: 239: char status = 0;
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6536  1C38  0020               	movlb	0	; select bank0
  6537  1C39  01A1               	clrf	getSw_KeyStatus@status
  6538                           
  6539                           ;Switch_B1.c: 272: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6540  1C3A  01A2               	clrf	_getSw_KeyStatus$6464
  6541  1C3B  0AA2               	incf	_getSw_KeyStatus$6464,f
  6542  1C3C  1F0C               	btfss	12,6	;volatile
  6543  1C3D  1A0C               	btfsc	12,4	;volatile
  6544  1C3E  2C43               	goto	l7182
  6545  1C3F  1C0C               	btfss	12,0	;volatile
  6546  1C40  1B8C               	btfsc	12,7	;volatile
  6547  1C41  2C43               	goto	l7182
  6548  1C42  01A2               	clrf	_getSw_KeyStatus$6464
  6549  1C43                     l7182:	
  6550  1C43  0822               	movf	_getSw_KeyStatus$6464,w
  6551  1C44  00A0               	movwf	??_getSw_KeyStatus
  6552  1C45  0820               	movf	??_getSw_KeyStatus,w
  6553  1C46  00A1               	movwf	getSw_KeyStatus@status
  6554                           
  6555                           ;Switch_B1.c: 276: return status;
  6556  1C47  0821               	movf	getSw_KeyStatus@status,w
  6557  1C48  0008               	return
  6558  1C49                     __end_of_getSw_KeyStatus:	
  6559                           
  6560                           	psect	text18
  6561  1B7C                     __ptext18:	
  6562 ;; *************** function _SwPointSelect *****************
  6563 ;; Defined at:
  6564 ;;		line 25 in file "../src/Switch_B1.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  sw              1    wreg     unsigned char 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  sw              1    1[BANK0 ] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;		None               void
  6571 ;; Registers used:
  6572 ;;		wreg
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        2 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    5
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_setSw_Main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _SwPointSelect
  6594  1B7C                     _SwPointSelect:	
  6595                           
  6596                           ;incstack = 0
  6597                           ; Regs used in _SwPointSelect: [wreg]
  6598                           ;SwPointSelect@sw stored from wreg
  6599  1B7C  0020               	movlb	0	; select bank0
  6600  1B7D  00A1               	movwf	SwPointSelect@sw
  6601                           
  6602                           ;Switch_B1.c: 28: if (sw == 1) {
  6603  1B7E  0821               	movf	SwPointSelect@sw,w
  6604  1B7F  3A01               	xorlw	1
  6605  1B80  1D03               	skipz
  6606  1B81  0008               	return
  6607                           
  6608                           ;Switch_B1.c: 29: Sw = &Sw1;
  6609  1B82  30BE               	movlw	_Sw1& (0+255)
  6610  1B83  00A0               	movwf	??_SwPointSelect
  6611  1B84  0820               	movf	??_SwPointSelect,w
  6612  1B85  0021               	movlb	1	; select bank1
  6613  1B86  00D2               	movwf	_Sw^(0+128)
  6614  1B87  0008               	return
  6615  1B88                     __end_of_SwPointSelect:	
  6616                           
  6617                           	psect	text19
  6618  1D55                     __ptext19:	
  6619 ;; *************** function _TouchPower *****************
  6620 ;; Defined at:
  6621 ;;		line 10 in file "../src/Switch_B1.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;		None               void
  6628 ;; Registers used:
  6629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;Total ram usage:        0 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    6
  6642 ;; This function calls:
  6643 ;;		_Timeout_Counter
  6644 ;;		_set_TimeoutCleared
  6645 ;; This function is called by:
  6646 ;;		_Switch_Main
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           
  6651                           ;psect for function _TouchPower
  6652  1D55                     _TouchPower:	
  6653                           
  6654                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6658  1D55  0021               	movlb	1	; select bank1
  6659  1D56  1C2F               	btfss	_myMain^(0+128),0
  6660  1D57  0008               	return
  6661                           
  6662                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6663  1D58  0020               	movlb	0	; select bank0
  6664  1D59  180D               	btfsc	13,0	;volatile
  6665  1D5A  0008               	return
  6666  1D5B  2D61               	goto	l7738
  6667  1D5C                     l2509:	
  6668                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6669                           
  6670                           
  6671                           ;Switch_B1.c: 14: RB0 = 1;
  6672  1D5C  0020               	movlb	0	; select bank0
  6673  1D5D  140D               	bsf	13,0	;volatile
  6674                           
  6675                           ;Switch_B1.c: 15: Timeout_Counter();
  6676  1D5E  319D  2540  319D   	fcall	_Timeout_Counter
  6677  1D61                     l7738:	
  6678  1D61  0020               	movlb	0	; select bank0
  6679  1D62  180D               	btfsc	13,0	;volatile
  6680  1D63  2D67               	goto	l7742
  6681  1D64  0021               	movlb	1	; select bank1
  6682  1D65  1D39               	btfss	(_myMain^(0+128)+10),2
  6683  1D66  2D5C               	goto	l2509
  6684  1D67                     l7742:	
  6685                           
  6686                           ;Switch_B1.c: 16: }
  6687                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6688  1D67  319A  225D         	fcall	_set_TimeoutCleared
  6689  1D69  0008               	return
  6690  1D6A                     __end_of_TouchPower:	
  6691                           
  6692                           	psect	text20
  6693  1A5D                     __ptext20:	
  6694 ;; *************** function _set_TimeoutCleared *****************
  6695 ;; Defined at:
  6696 ;;		line 281 in file "../src/Main_B1.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		status,2
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    5
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_getAD
  6721 ;;		_TouchPower
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           
  6726                           ;psect for function _set_TimeoutCleared
  6727  1A5D                     _set_TimeoutCleared:	
  6728                           
  6729                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6730                           
  6731                           ;incstack = 0
  6732                           ; Regs used in _set_TimeoutCleared: [status,2]
  6733  1A5D  0021               	movlb	1	; select bank1
  6734  1A5E  1139               	bcf	(_myMain^(0+128)+10),2
  6735                           
  6736                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6737  1A5F  01BA               	clrf	(_myMain^(0+128)+11)
  6738  1A60  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6739  1A61  0008               	return
  6740  1A62                     __end_of_set_TimeoutCleared:	
  6741                           
  6742                           	psect	text21
  6743  1D40                     __ptext21:	
  6744 ;; *************** function _Timeout_Counter *****************
  6745 ;; Defined at:
  6746 ;;		line 272 in file "../src/Main_B1.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;Total ram usage:        0 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    5
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_getAD
  6771 ;;		_TouchPower
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           
  6776                           ;psect for function _Timeout_Counter
  6777  1D40                     _Timeout_Counter:	
  6778                           
  6779                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6783  1D40  3001               	movlw	1
  6784  1D41  0021               	movlb	1	; select bank1
  6785  1D42  07BA               	addwf	(_myMain^(0+128)+11),f
  6786  1D43  3000               	movlw	0
  6787  1D44  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6788                           
  6789                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6790  1D45  300B               	movlw	11
  6791  1D46  3EAF               	addlw	_myMain& (0+255)
  6792  1D47  0086               	movwf	6
  6793  1D48  0187               	clrf	7
  6794  1D49  3F40               	moviw [0]fsr1
  6795  1D4A  3AA8               	xorlw	168
  6796  1D4B  1D03               	skipz
  6797  1D4C  2D4F               	goto	u6315
  6798  1D4D  3F41               	moviw [1]fsr1
  6799  1D4E  3A61               	xorlw	97
  6800  1D4F                     u6315:	
  6801  1D4F  1D03               	skipz
  6802  1D50  0008               	return
  6803                           
  6804                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6805  1D51  01BA               	clrf	(_myMain^(0+128)+11)
  6806  1D52  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6807                           
  6808                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6809  1D53  1539               	bsf	(_myMain^(0+128)+10),2
  6810  1D54  0008               	return
  6811  1D55                     __end_of_Timeout_Counter:	
  6812                           
  6813                           	psect	text22
  6814  1A59                     __ptext22:	
  6815 ;; *************** function _Switch_Initialization *****************
  6816 ;; Defined at:
  6817 ;;		line 46 in file "../src/Switch_B1.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;		None
  6822 ;; Return value:  Size  Location     Type
  6823 ;;		None               void
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;Total ram usage:        0 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    8
  6838 ;; This function calls:
  6839 ;;		_setSw_Initialization
  6840 ;; This function is called by:
  6841 ;;		_main
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           
  6846                           ;psect for function _Switch_Initialization
  6847  1A59                     _Switch_Initialization:	
  6848                           
  6849                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6850                           
  6851                           ;incstack = 0
  6852                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6853  1A59  3001               	movlw	1
  6854  1A5A  319B  23C2         	fcall	_setSw_Initialization
  6855  1A5C  0008               	return
  6856  1A5D                     __end_of_Switch_Initialization:	
  6857                           
  6858                           	psect	text23
  6859  1BC2                     __ptext23:	
  6860 ;; *************** function _setSw_Initialization *****************
  6861 ;; Defined at:
  6862 ;;		line 66 in file "../src/Switch_B1.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  sw              1    wreg     unsigned char 
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  sw              1    4[BANK0 ] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;		None               void
  6869 ;; Registers used:
  6870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;Total ram usage:        1 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    7
  6883 ;; This function calls:
  6884 ;;		_setLED
  6885 ;; This function is called by:
  6886 ;;		_Switch_Initialization
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _setSw_Initialization
  6892  1BC2                     _setSw_Initialization:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6896                           ;setSw_Initialization@sw stored from wreg
  6897  1BC2  0020               	movlb	0	; select bank0
  6898  1BC3  00A4               	movwf	setSw_Initialization@sw
  6899                           
  6900                           ;Switch_B1.c: 68: setLED(sw, 1);
  6901  1BC4  01A2               	clrf	setLED@command
  6902  1BC5  0AA2               	incf	setLED@command,f
  6903  1BC6  0824               	movf	setSw_Initialization@sw,w
  6904  1BC7  3187  27C6  319B   	fcall	_setLED
  6905                           
  6906                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6907  1BCA  0020               	movlb	0	; select bank0
  6908  1BCB  01A2               	clrf	setLED@command
  6909  1BCC  0AA2               	incf	setLED@command,f
  6910  1BCD  0824               	movf	setSw_Initialization@sw,w
  6911  1BCE  3E01               	addlw	1
  6912  1BCF  3187  27C6         	fcall	_setLED
  6913  1BD1  0008               	return
  6914  1BD2                     __end_of_setSw_Initialization:	
  6915                           
  6916                           	psect	text24
  6917  1A2C                     __ptext24:	
  6918 ;; *************** function _RF_Main *****************
  6919 ;; Defined at:
  6920 ;;		line 26 in file "../src/RF_Control_B1.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;		None
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;		None               void
  6927 ;; Registers used:
  6928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;Total ram usage:        0 bytes
  6939 ;; Hardware stack levels used:    1
  6940 ;; Hardware stack levels required when called:   12
  6941 ;; This function calls:
  6942 ;;		_setRF_Main
  6943 ;; This function is called by:
  6944 ;;		_main
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           
  6949                           ;psect for function _RF_Main
  6950  1A2C                     _RF_Main:	
  6951                           
  6952                           ;RF_Control_B1.c: 28: setRF_Main();
  6953                           
  6954                           ;incstack = 0
  6955                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6956  1A2C  3184  247F         	fcall	_setRF_Main
  6957  1A2E  0008               	return
  6958  1A2F                     __end_of_RF_Main:	
  6959                           
  6960                           	psect	text25
  6961  047F                     __ptext25:	
  6962 ;; *************** function _setRF_Main *****************
  6963 ;; Defined at:
  6964 ;;		line 53 in file "../src/RF_Control_B1.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  error           1    3[BANK1 ] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        2 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:   11
  6985 ;; This function calls:
  6986 ;;		_CC2500_PowerOnInitial
  6987 ;;		_CC2500_RxData
  6988 ;;		_CC2500_TxData
  6989 ;;		_CC2500_WriteCommand
  6990 ;;		_RF_RxDisable
  6991 ;;		___lwdiv
  6992 ;;		_getBuz_GO
  6993 ;;		_getRF_KeyStatus
  6994 ;;		_getRxData
  6995 ;; This function is called by:
  6996 ;;		_RF_Main
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _setRF_Main
  7002  047F                     _setRF_Main:	
  7003                           
  7004                           ;RF_Control_B1.c: 54: char error = 0;
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7008  047F  0021               	movlb	1	; select bank1
  7009  0480  01E9               	clrf	setRF_Main@error^(0+128)
  7010                           
  7011                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7012  0481  1C20               	btfss	_RF1^(0+128),0
  7013  0482  2D50               	goto	l2140
  7014                           
  7015                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7016  0483  319C  2416  3184   	fcall	_getBuz_GO
  7017  0486  0020               	movlb	0	; select bank0
  7018  0487  0821               	movf	?_getBuz_GO+1,w
  7019  0488  0420               	iorwf	?_getBuz_GO,w
  7020  0489  1D03               	skipz
  7021  048A  2D31               	goto	l8836
  7022                           
  7023                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7024  048B  319C  2427  3184   	fcall	_getRF_KeyStatus
  7025  048E  3A01               	xorlw	1
  7026  048F  3000               	movlw	0
  7027  0490  1903               	skipnz
  7028  0491  3001               	movlw	1
  7029  0492  0021               	movlb	1	; select bank1
  7030  0493  00E8               	movwf	??_setRF_Main^(0+128)
  7031  0494  0CE8               	rrf	??_setRF_Main^(0+128),f
  7032  0495  0CE8               	rrf	??_setRF_Main^(0+128),f
  7033  0496  0820               	movf	_RF1^(0+128),w
  7034  0497  0668               	xorwf	??_setRF_Main^(0+128),w
  7035  0498  397F               	andlw	-129
  7036  0499  0668               	xorwf	??_setRF_Main^(0+128),w
  7037  049A  00A0               	movwf	_RF1^(0+128)
  7038                           
  7039                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7040  049B  1FA0               	btfss	_RF1^(0+128),7
  7041  049C  2C9F               	goto	l2144
  7042  049D  1F20               	btfss	_RF1^(0+128),6
  7043  049E  2D31               	goto	l8836
  7044  049F                     l2144:	
  7045                           
  7046                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7047  049F  1D20               	btfss	_RF1^(0+128),2
  7048  04A0  2CF0               	goto	l2145
  7049                           
  7050                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7051  04A1  1B20               	btfsc	_RF1^(0+128),6
  7052  04A2  2CEB               	goto	l8808
  7053                           
  7054                           ;RF_Control_B1.c: 68: RF1.Count++;
  7055  04A3  3001               	movlw	1
  7056  04A4  07A3               	addwf	(_RF1^(0+128)+3),f
  7057  04A5  3000               	movlw	0
  7058  04A6  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7059                           
  7060                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7061  04A7  3014               	movlw	20
  7062  04A8  0020               	movlb	0	; select bank0
  7063  04A9  00A0               	movwf	___lwdiv@divisor
  7064  04AA  3000               	movlw	0
  7065  04AB  00A1               	movwf	___lwdiv@divisor+1
  7066  04AC  0021               	movlb	1	; select bank1
  7067  04AD  0829               	movf	((_RF1+1)^(0+128)+8),w
  7068  04AE  0020               	movlb	0	; select bank0
  7069  04AF  01A3               	clrf	___lwdiv@dividend+1
  7070  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  7071  04B1  0021               	movlb	1	; select bank1
  7072  04B2  0828               	movf	(_RF1^(0+128)+8),w
  7073  04B3  0020               	movlb	0	; select bank0
  7074  04B4  01A2               	clrf	___lwdiv@dividend
  7075  04B5  07A2               	addwf	___lwdiv@dividend,f
  7076  04B6  3191  21C7  3184   	fcall	___lwdiv
  7077  04B9  0020               	movlb	0	; select bank0
  7078  04BA  0821               	movf	?___lwdiv+1,w
  7079  04BB  0021               	movlb	1	; select bank1
  7080  04BC  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7081  04BD  1D03               	skipz
  7082  04BE  2CC3               	goto	u9215
  7083  04BF  0020               	movlb	0	; select bank0
  7084  04C0  0820               	movf	?___lwdiv,w
  7085  04C1  0021               	movlb	1	; select bank1
  7086  04C2  0223               	subwf	(_RF1^(0+128)+3),w
  7087  04C3                     u9215:	
  7088  04C3  1C03               	skipc
  7089  04C4  2D31               	goto	l8836
  7090                           
  7091                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7092  04C5  3014               	movlw	20
  7093  04C6  0020               	movlb	0	; select bank0
  7094  04C7  00A0               	movwf	___lwdiv@divisor
  7095  04C8  3000               	movlw	0
  7096  04C9  00A1               	movwf	___lwdiv@divisor+1
  7097  04CA  0021               	movlb	1	; select bank1
  7098  04CB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7099  04CC  0020               	movlb	0	; select bank0
  7100  04CD  01A3               	clrf	___lwdiv@dividend+1
  7101  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  7102  04CF  0021               	movlb	1	; select bank1
  7103  04D0  0828               	movf	(_RF1^(0+128)+8),w
  7104  04D1  0020               	movlb	0	; select bank0
  7105  04D2  01A2               	clrf	___lwdiv@dividend
  7106  04D3  07A2               	addwf	___lwdiv@dividend,f
  7107  04D4  3191  21C7  3184   	fcall	___lwdiv
  7108  04D7  0020               	movlb	0	; select bank0
  7109  04D8  0821               	movf	?___lwdiv+1,w
  7110  04D9  0021               	movlb	1	; select bank1
  7111  04DA  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7112  04DB  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7113  04DC  0020               	movlb	0	; select bank0
  7114  04DD  0820               	movf	?___lwdiv,w
  7115  04DE  0021               	movlb	1	; select bank1
  7116  04DF  01A3               	clrf	(_RF1^(0+128)+3)
  7117  04E0  07A3               	addwf	(_RF1^(0+128)+3),f
  7118                           
  7119                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7120  04E1  1120               	bcf	_RF1^(0+128),2
  7121                           
  7122                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7123  04E2  01AB               	clrf	(_RF1^(0+128)+11)
  7124  04E3  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7125                           
  7126                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7127  04E4  319B  23B3  3184   	fcall	_RF_RxDisable
  7128                           
  7129                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7130  04E7  3188  2046  3184   	fcall	_CC2500_TxData
  7131                           
  7132                           ;RF_Control_B1.c: 77: }
  7133                           ;RF_Control_B1.c: 78: } else {
  7134  04EA  2D31               	goto	l8836
  7135  04EB                     l8808:	
  7136                           
  7137                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7138  04EB  0021               	movlb	1	; select bank1
  7139  04EC  01A3               	clrf	(_RF1^(0+128)+3)
  7140  04ED  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7141                           
  7142                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7143  04EE  1120               	bcf	_RF1^(0+128),2
  7144                           
  7145                           ;RF_Control_B1.c: 81: }
  7146                           ;RF_Control_B1.c: 82: } else {
  7147  04EF  2D31               	goto	l8836
  7148  04F0                     l2145:	
  7149                           
  7150                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7151  04F0  1DA0               	btfss	_RF1^(0+128),3
  7152  04F1  2CFF               	goto	l8822
  7153                           
  7154                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7155  04F2  3197  2795  3184   	fcall	_CC2500_RxData
  7156                           
  7157                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7158  04F5  0021               	movlb	1	; select bank1
  7159  04F6  1CA0               	btfss	_RF1^(0+128),1
  7160  04F7  2D31               	goto	l8836
  7161                           
  7162                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7163  04F8  10A0               	bcf	_RF1^(0+128),1
  7164                           
  7165                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7166  04F9  01AB               	clrf	(_RF1^(0+128)+11)
  7167  04FA  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7168                           
  7169                           ;RF_Control_B1.c: 97: getRxData();
  7170  04FB  3195  2597  3184   	fcall	_getRxData
  7171                           
  7172                           ;RF_Control_B1.c: 100: }
  7173                           ;RF_Control_B1.c: 101: } else {
  7174  04FE  2D31               	goto	l8836
  7175  04FF                     l8822:	
  7176                           
  7177                           ;RF_Control_B1.c: 102: RF1.Count++;
  7178  04FF  3001               	movlw	1
  7179  0500  0021               	movlb	1	; select bank1
  7180  0501  07A3               	addwf	(_RF1^(0+128)+3),f
  7181  0502  3000               	movlw	0
  7182  0503  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7183                           
  7184                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7185  0504  3014               	movlw	20
  7186  0505  0020               	movlb	0	; select bank0
  7187  0506  00A0               	movwf	___lwdiv@divisor
  7188  0507  3000               	movlw	0
  7189  0508  00A1               	movwf	___lwdiv@divisor+1
  7190  0509  0021               	movlb	1	; select bank1
  7191  050A  0829               	movf	((_RF1+1)^(0+128)+8),w
  7192  050B  0020               	movlb	0	; select bank0
  7193  050C  01A3               	clrf	___lwdiv@dividend+1
  7194  050D  07A3               	addwf	___lwdiv@dividend+1,f
  7195  050E  0021               	movlb	1	; select bank1
  7196  050F  0828               	movf	(_RF1^(0+128)+8),w
  7197  0510  0020               	movlb	0	; select bank0
  7198  0511  01A2               	clrf	___lwdiv@dividend
  7199  0512  07A2               	addwf	___lwdiv@dividend,f
  7200  0513  3191  21C7  3184   	fcall	___lwdiv
  7201  0516  0020               	movlb	0	; select bank0
  7202  0517  0821               	movf	?___lwdiv+1,w
  7203  0518  0021               	movlb	1	; select bank1
  7204  0519  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7205  051A  1D03               	skipz
  7206  051B  2D20               	goto	u9245
  7207  051C  0020               	movlb	0	; select bank0
  7208  051D  0820               	movf	?___lwdiv,w
  7209  051E  0021               	movlb	1	; select bank1
  7210  051F  0223               	subwf	(_RF1^(0+128)+3),w
  7211  0520                     u9245:	
  7212  0520  1C03               	skipc
  7213  0521  2D31               	goto	l8836
  7214                           
  7215                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7216  0522  01A3               	clrf	(_RF1^(0+128)+3)
  7217  0523  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7218                           
  7219                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7220  0524  15A0               	bsf	_RF1^(0+128),3
  7221                           
  7222                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7223  0525  3036               	movlw	54
  7224  0526  3190  2000  3184   	fcall	_CC2500_WriteCommand
  7225                           
  7226                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7227  0529  303A               	movlw	58
  7228  052A  3190  2000  3184   	fcall	_CC2500_WriteCommand
  7229                           
  7230                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7231  052D  3034               	movlw	52
  7232  052E  3190  2000  3184   	fcall	_CC2500_WriteCommand
  7233  0531                     l8836:	
  7234                           
  7235                           ;RF_Control_B1.c: 111: }
  7236                           ;RF_Control_B1.c: 112: }
  7237                           ;RF_Control_B1.c: 113: }
  7238                           ;RF_Control_B1.c: 114: }
  7239                           ;RF_Control_B1.c: 115: }
  7240                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7241  0531  3001               	movlw	1
  7242  0532  0021               	movlb	1	; select bank1
  7243  0533  07AB               	addwf	(_RF1^(0+128)+11),f
  7244  0534  3000               	movlw	0
  7245  0535  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7246                           
  7247                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7248  0536  300B               	movlw	11
  7249  0537  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7250  0538  30B9               	movlw	185
  7251  0539  1903               	skipnz
  7252  053A  022B               	subwf	(_RF1^(0+128)+11),w
  7253  053B  1C03               	skipc
  7254  053C  2D49               	goto	l8850
  7255                           
  7256                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7257  053D  01AB               	clrf	(_RF1^(0+128)+11)
  7258  053E  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7259                           
  7260                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7261  053F  11A0               	bcf	_RF1^(0+128),3
  7262                           
  7263                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7264  0540  10A0               	bcf	_RF1^(0+128),1
  7265                           
  7266                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7267  0541  3036               	movlw	54
  7268  0542  3190  2000  3184   	fcall	_CC2500_WriteCommand
  7269                           
  7270                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7271  0545  303A               	movlw	58
  7272  0546  3190  2000  3184   	fcall	_CC2500_WriteCommand
  7273  0549                     l8850:	
  7274                           
  7275                           ;RF_Control_B1.c: 125: }
  7276                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7277  0549  0021               	movlb	1	; select bank1
  7278  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7279  054B  0008               	return
  7280                           
  7281                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7282  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7283                           
  7284                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7285  054D  319D  252B         	fcall	_CC2500_PowerOnInitial
  7286                           
  7287                           ;RF_Control_B1.c: 130: }
  7288                           ;RF_Control_B1.c: 132: } else {
  7289  054F  0008               	return
  7290  0550                     l2140:	
  7291                           
  7292                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7293  0550  1C2F               	btfss	_myMain^(0+128),0
  7294  0551  0008               	return
  7295                           
  7296                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7297  0552  1420               	bsf	_RF1^(0+128),0
  7298  0553  0008               	return
  7299  0554                     __end_of_setRF_Main:	
  7300                           
  7301                           	psect	text26
  7302  1597                     __ptext26:	
  7303 ;; *************** function _getRxData *****************
  7304 ;; Defined at:
  7305 ;;		line 227 in file "../src/RF_Control_B1.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;		None
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  error           1    1[BANK1 ] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;		None               void
  7312 ;; Registers used:
  7313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;Total ram usage:        2 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:   10
  7326 ;; This function calls:
  7327 ;;		_getMain_All_Error_Status
  7328 ;;		_setControl_Lights_Table
  7329 ;;		_setLog_Code
  7330 ;;		_setTxData
  7331 ;; This function is called by:
  7332 ;;		_setRF_Main
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           
  7337                           ;psect for function _getRxData
  7338  1597                     _getRxData:	
  7339                           
  7340                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7344  1597  0023               	movlb	3	; select bank3
  7345  1598  0820               	movf	_RF_Data^(0+384),w
  7346  1599  3AAA               	xorlw	170
  7347  159A  1D03               	skipz
  7348  159B  2DAD               	goto	l7136
  7349  159C  0821               	movf	(_RF_Data^(0+384)+1),w
  7350  159D  3A01               	xorlw	1
  7351  159E  1D03               	skipz
  7352  159F  2DAD               	goto	l7136
  7353                           
  7354                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7355  15A0  3055               	movlw	85
  7356  15A1  0021               	movlb	1	; select bank1
  7357  15A2  00E6               	movwf	??_getRxData^(0+128)
  7358  15A3  086E               	movf	_product^(0+128),w
  7359  15A4  3E02               	addlw	2
  7360  15A5  0086               	movwf	6
  7361  15A6  3001               	movlw	1	; select bank2/3
  7362  15A7  0087               	movwf	7
  7363  15A8  0866               	movf	??_getRxData^(0+128),w
  7364  15A9  0081               	movwf	1
  7365                           
  7366                           ;RF_Control_B1.c: 231: setTxData();
  7367  15AA  318E  267F         	fcall	_setTxData
  7368                           
  7369                           ;RF_Control_B1.c: 235: } else {
  7370  15AC  0008               	return
  7371  15AD                     l7136:	
  7372                           
  7373                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7374  15AD  3000               	movlw	0
  7375  15AE  3190  20C1  3195   	fcall	_getMain_All_Error_Status
  7376  15B1  0021               	movlb	1	; select bank1
  7377  15B2  00E6               	movwf	??_getRxData^(0+128)
  7378  15B3  0866               	movf	??_getRxData^(0+128),w
  7379  15B4  00E7               	movwf	getRxData@error^(0+128)
  7380                           
  7381                           ;RF_Control_B1.c: 237: if (error == 0) {
  7382  15B5  08E7               	movf	getRxData@error^(0+128),f
  7383  15B6  1D03               	skipz
  7384  15B7  2DF9               	goto	l2185
  7385                           
  7386                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7387  15B8  1F20               	btfss	_RF1^(0+128),6
  7388  15B9  2DC5               	goto	l7148
  7389                           
  7390                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7391  15BA  0023               	movlb	3	; select bank3
  7392  15BB  08A0               	movf	_RF_Data^(0+384),f
  7393  15BC  1D03               	skipz
  7394  15BD  0008               	return
  7395  15BE  0821               	movf	(_RF_Data^(0+384)+1),w
  7396  15BF  3A64               	xorlw	100
  7397  15C0  1D03               	skipz
  7398  15C1  0008               	return
  7399                           
  7400                           ;RF_Control_B1.c: 241: setLog_Code();
  7401  15C2  3191  2128         	fcall	_setLog_Code
  7402                           
  7403                           ;RF_Control_B1.c: 242: }
  7404                           ;RF_Control_B1.c: 243: } else {
  7405  15C4  0008               	return
  7406  15C5                     l7148:	
  7407                           
  7408                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7409  15C5  0023               	movlb	3	; select bank3
  7410  15C6  0834               	movf	(_RF_Data^(0+384)+20),w
  7411  15C7  3AD1               	xorlw	209
  7412  15C8  1903               	skipnz
  7413  15C9  2DCE               	goto	l7152
  7414  15CA  0834               	movf	(_RF_Data^(0+384)+20),w
  7415  15CB  3A0A               	xorlw	10
  7416  15CC  1D03               	skipz
  7417  15CD  0008               	return
  7418  15CE                     l7152:	
  7419                           
  7420                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7421  15CE  08A0               	movf	_RF_Data^(0+384),f
  7422  15CF  1D03               	skipz
  7423  15D0  0008               	return
  7424  15D1  0821               	movf	(_RF_Data^(0+384)+1),w
  7425  15D2  3A02               	xorlw	2
  7426  15D3  1D03               	skipz
  7427  15D4  0008               	return
  7428                           
  7429                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7430  15D5  0021               	movlb	1	; select bank1
  7431  15D6  086E               	movf	_product^(0+128),w
  7432  15D7  3E0C               	addlw	12
  7433  15D8  0086               	movwf	6
  7434  15D9  3001               	movlw	1	; select bank2/3
  7435  15DA  0087               	movwf	7
  7436  15DB  0023               	movlb	3	; select bank3
  7437  15DC  082C               	movf	(_RF_Data^(0+384)+12),w
  7438  15DD  0601               	xorwf	1,w
  7439  15DE  1D03               	skipz
  7440  15DF  0008               	return
  7441  15E0  0021               	movlb	1	; select bank1
  7442  15E1  086E               	movf	_product^(0+128),w
  7443  15E2  3E0D               	addlw	13
  7444  15E3  0086               	movwf	6
  7445  15E4  3001               	movlw	1	; select bank2/3
  7446  15E5  0087               	movwf	7
  7447  15E6  0023               	movlb	3	; select bank3
  7448  15E7  082D               	movf	(_RF_Data^(0+384)+13),w
  7449  15E8  0601               	xorwf	1,w
  7450  15E9  1D03               	skipz
  7451  15EA  0008               	return
  7452  15EB  0021               	movlb	1	; select bank1
  7453  15EC  086E               	movf	_product^(0+128),w
  7454  15ED  3E0E               	addlw	14
  7455  15EE  0086               	movwf	6
  7456  15EF  3001               	movlw	1	; select bank2/3
  7457  15F0  0087               	movwf	7
  7458  15F1  0023               	movlb	3	; select bank3
  7459  15F2  082E               	movf	(_RF_Data^(0+384)+14),w
  7460  15F3  0601               	xorwf	1,w
  7461  15F4  1D03               	skipz
  7462  15F5  0008               	return
  7463                           
  7464                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7465  15F6  318A  2203         	fcall	_setControl_Lights_Table
  7466                           
  7467                           ;RF_Control_B1.c: 250: }
  7468                           ;RF_Control_B1.c: 253: }
  7469                           ;RF_Control_B1.c: 264: }
  7470                           ;RF_Control_B1.c: 265: }
  7471                           ;RF_Control_B1.c: 266: } else {
  7472  15F8  0008               	return
  7473  15F9                     l2185:	
  7474                           
  7475                           ;RF_Control_B1.c: 267: __nop();
  7476  15F9  0000               	nop
  7477  15FA  0008               	return
  7478  15FB                     __end_of_getRxData:	
  7479                           
  7480                           	psect	text27
  7481  1128                     __ptext27:	
  7482 ;; *************** function _setLog_Code *****************
  7483 ;; Defined at:
  7484 ;;		line 273 in file "../src/RF_Control_B1.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;		None               void
  7491 ;; Registers used:
  7492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;Total ram usage:        1 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    7
  7505 ;; This function calls:
  7506 ;;		_setBuz
  7507 ;;		_setMemory_LoopSave
  7508 ;;		_setMemory_Modify
  7509 ;;		_setProductData
  7510 ;; This function is called by:
  7511 ;;		_getRxData
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function _setLog_Code
  7517  1128                     _setLog_Code:	
  7518                           
  7519                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7523  1128  0021               	movlb	1	; select bank1
  7524  1129  1320               	bcf	_RF1^(0+128),6
  7525                           
  7526                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7527  112A  0023               	movlb	3	; select bank3
  7528  112B  082C               	movf	(_RF_Data^(0+384)+12),w
  7529  112C  0020               	movlb	0	; select bank0
  7530  112D  00E5               	movwf	??_setLog_Code
  7531  112E  0865               	movf	??_setLog_Code,w
  7532  112F  00E2               	movwf	setProductData@value
  7533  1130  300C               	movlw	12
  7534  1131  319B  2310  3191   	fcall	_setProductData
  7535                           
  7536                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7537  1134  0023               	movlb	3	; select bank3
  7538  1135  082D               	movf	(_RF_Data^(0+384)+13),w
  7539  1136  0020               	movlb	0	; select bank0
  7540  1137  00E5               	movwf	??_setLog_Code
  7541  1138  0865               	movf	??_setLog_Code,w
  7542  1139  00E2               	movwf	setProductData@value
  7543  113A  300D               	movlw	13
  7544  113B  319B  2310  3191   	fcall	_setProductData
  7545                           
  7546                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7547  113E  0023               	movlb	3	; select bank3
  7548  113F  082E               	movf	(_RF_Data^(0+384)+14),w
  7549  1140  0020               	movlb	0	; select bank0
  7550  1141  00E5               	movwf	??_setLog_Code
  7551  1142  0865               	movf	??_setLog_Code,w
  7552  1143  00E2               	movwf	setProductData@value
  7553  1144  300E               	movlw	14
  7554  1145  319B  2310  3191   	fcall	_setProductData
  7555                           
  7556                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7557  1148  3064               	movlw	100
  7558  1149  0020               	movlb	0	; select bank0
  7559  114A  00A9               	movwf	setBuz@time
  7560  114B  3000               	movlw	0
  7561  114C  00AA               	movwf	setBuz@time+1
  7562  114D  3001               	movlw	1
  7563  114E  3194  2425  3191   	fcall	_setBuz
  7564                           
  7565                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7566  1151  0021               	movlb	1	; select bank1
  7567  1152  1EAF               	btfss	_myMain^(0+128),5
  7568  1153  2958               	goto	l2198
  7569                           
  7570                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7571  1154  3001               	movlw	1
  7572  1155  319C  24DC  3191   	fcall	_setMemory_LoopSave
  7573  1158                     l2198:	
  7574                           
  7575                           ;RF_Control_B1.c: 281: }
  7576                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7577  1158  3001               	movlw	1
  7578  1159  319C  24A3         	fcall	_setMemory_Modify
  7579  115B  0008               	return
  7580  115C                     __end_of_setLog_Code:	
  7581                           
  7582                           	psect	text28
  7583  1CDC                     __ptext28:	
  7584 ;; *************** function _setMemory_LoopSave *****************
  7585 ;; Defined at:
  7586 ;;		line 1089 in file "../src/MCU_B1.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  command         1    wreg     unsigned char 
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  command         1    1[BANK0 ] unsigned char 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, status,2, status,0
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:        2 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    5
  7607 ;; This function calls:
  7608 ;;		Nothing
  7609 ;; This function is called by:
  7610 ;;		_setLog_Code
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           
  7615                           ;psect for function _setMemory_LoopSave
  7616  1CDC                     _setMemory_LoopSave:	
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7620                           ;setMemory_LoopSave@command stored from wreg
  7621  1CDC  0020               	movlb	0	; select bank0
  7622  1CDD  00A1               	movwf	setMemory_LoopSave@command
  7623                           
  7624                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7625  1CDE  0821               	movf	setMemory_LoopSave@command,w
  7626  1CDF  3A01               	xorlw	1
  7627  1CE0  3000               	movlw	0
  7628  1CE1  1903               	skipnz
  7629  1CE2  3001               	movlw	1
  7630  1CE3  00A0               	movwf	??_setMemory_LoopSave
  7631  1CE4  0DA0               	rlf	??_setMemory_LoopSave,f
  7632  1CE5  0DA0               	rlf	??_setMemory_LoopSave,f
  7633  1CE6  0024               	movlb	4	; select bank4
  7634  1CE7  0844               	movf	(_Memory^(0+512)+36),w
  7635  1CE8  0020               	movlb	0	; select bank0
  7636  1CE9  0620               	xorwf	??_setMemory_LoopSave,w
  7637  1CEA  39FB               	andlw	-5
  7638  1CEB  0620               	xorwf	??_setMemory_LoopSave,w
  7639  1CEC  0024               	movlb	4	; select bank4
  7640  1CED  00C4               	movwf	(_Memory^(0+512)+36)
  7641  1CEE  0008               	return
  7642  1CEF                     __end_of_setMemory_LoopSave:	
  7643                           
  7644                           	psect	text29
  7645  0A03                     __ptext29:	
  7646 ;; *************** function _setControl_Lights_Table *****************
  7647 ;; Defined at:
  7648 ;;		line 286 in file "../src/RF_Control_B1.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;		None
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;		None
  7653 ;; Return value:  Size  Location     Type
  7654 ;;		None               void
  7655 ;; Registers used:
  7656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;Total ram usage:        0 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    9
  7669 ;; This function calls:
  7670 ;;		_getDimmerLights_Status
  7671 ;;		_getMain_All_LightsStatus
  7672 ;;		_setCmd_Status
  7673 ;;		_setDimmerLights_SwOff
  7674 ;;		_setDimmerLights_SwOn
  7675 ;;		_setProductData
  7676 ;;		_setRFSW_AdjControl
  7677 ;;		_setRFSW_Control
  7678 ;;		_setRF_AdjControl
  7679 ;;		_setTxData
  7680 ;; This function is called by:
  7681 ;;		_getRxData
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function _setControl_Lights_Table
  7687  0A03                     _setControl_Lights_Table:	
  7688                           
  7689                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7693  0A03  2A69               	goto	l6736
  7694  0A04                     l6716:	
  7695                           ;RF_Control_B1.c: 290: case 0x00:
  7696                           
  7697                           
  7698                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7699  0A04  319A  22C2  318A   	fcall	_getMain_All_LightsStatus
  7700  0A07  3A01               	xorlw	1
  7701  0A08  1D03               	skipz
  7702  0A09  2A20               	goto	l6724
  7703                           
  7704                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7705  0A0A  3001               	movlw	1
  7706  0A0B  319B  23D2  318A   	fcall	_getDimmerLights_Status
  7707  0A0E  3A01               	xorlw	1
  7708  0A0F  1D03               	skipz
  7709  0A10  2A19               	goto	l6722
  7710                           
  7711                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7712  0A11  3001               	movlw	1
  7713  0A12  3191  215C  318A   	fcall	_setDimmerLights_SwOn
  7714                           
  7715                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7716  0A15  3001               	movlw	1
  7717  0A16  3191  21FE  318A   	fcall	_setDimmerLights_SwOff
  7718  0A19                     l6722:	
  7719                           
  7720                           ;RF_Control_B1.c: 297: }
  7721                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7722  0A19  0020               	movlb	0	; select bank0
  7723  0A1A  01A0               	clrf	setCmd_Status@cmd
  7724  0A1B  0AA0               	incf	setCmd_Status@cmd,f
  7725  0A1C  3001               	movlw	1
  7726  0A1D  319D  25C6         	fcall	_setCmd_Status
  7727                           
  7728                           ;RF_Control_B1.c: 313: } else {
  7729  0A1F  0008               	return
  7730  0A20                     l6724:	
  7731                           
  7732                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7733  0A20  0020               	movlb	0	; select bank0
  7734  0A21  01E2               	clrf	setProductData@value
  7735  0A22  3009               	movlw	9
  7736  0A23  319B  2310  318A   	fcall	_setProductData
  7737                           
  7738                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7739  0A26  0020               	movlb	0	; select bank0
  7740  0A27  01E2               	clrf	setProductData@value
  7741  0A28  300B               	movlw	11
  7742  0A29  319B  2310  318A   	fcall	_setProductData
  7743                           
  7744                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7745  0A2C  0020               	movlb	0	; select bank0
  7746  0A2D  01E2               	clrf	setProductData@value
  7747  0A2E  300F               	movlw	15
  7748  0A2F  319B  2310  318A   	fcall	_setProductData
  7749                           
  7750                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7751  0A32  0020               	movlb	0	; select bank0
  7752  0A33  01E2               	clrf	setProductData@value
  7753  0A34  3011               	movlw	17
  7754  0A35  319B  2310  318A   	fcall	_setProductData
  7755                           
  7756                           ;RF_Control_B1.c: 318: setTxData();
  7757  0A38  318E  267F         	fcall	_setTxData
  7758                           
  7759                           ;RF_Control_B1.c: 319: }
  7760                           ;RF_Control_B1.c: 320: break;
  7761  0A3A  0008               	return
  7762  0A3B                     l6726:	
  7763                           ;RF_Control_B1.c: 322: case 0x20:
  7764                           
  7765                           
  7766                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7767  0A3B  0020               	movlb	0	; select bank0
  7768  0A3C  01E2               	clrf	setProductData@value
  7769  0A3D  3009               	movlw	9
  7770  0A3E  319B  2310  318A   	fcall	_setProductData
  7771                           
  7772                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7773  0A41  0020               	movlb	0	; select bank0
  7774  0A42  01E2               	clrf	setProductData@value
  7775  0A43  300B               	movlw	11
  7776  0A44  319B  2310  318A   	fcall	_setProductData
  7777                           
  7778                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7779  0A47  0021               	movlb	1	; select bank1
  7780  0A48  086E               	movf	_product^(0+128),w
  7781  0A49  0086               	movwf	6
  7782  0A4A  3001               	movlw	1	; select bank2/3
  7783  0A4B  0087               	movwf	7
  7784  0A4C  3001               	movlw	1	; select bank2/3
  7785  0A4D  3F4F               	moviw [15]fsr1
  7786  0A4E  0020               	movlb	0	; select bank0
  7787  0A4F  00E2               	movwf	setProductData@value
  7788  0A50  300F               	movlw	15
  7789  0A51  319B  2310  318A   	fcall	_setProductData
  7790                           
  7791                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7792  0A54  0020               	movlb	0	; select bank0
  7793  0A55  01E2               	clrf	setProductData@value
  7794  0A56  3011               	movlw	17
  7795  0A57  319B  2310  318A   	fcall	_setProductData
  7796                           
  7797                           ;RF_Control_B1.c: 327: setTxData();
  7798  0A5A  318E  267F         	fcall	_setTxData
  7799                           
  7800                           ;RF_Control_B1.c: 328: break;
  7801  0A5C  0008               	return
  7802  0A5D                     l6728:	
  7803                           ;RF_Control_B1.c: 331: case 0x01:
  7804                           
  7805                           
  7806                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7807  0A5D  3001               	movlw	1
  7808  0A5E  3192  22B0         	fcall	_setRFSW_Control
  7809                           
  7810                           ;RF_Control_B1.c: 333: break;
  7811  0A60  0008               	return
  7812  0A61                     l6730:	
  7813                           ;RF_Control_B1.c: 337: case 0x11:
  7814                           
  7815                           
  7816                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7817  0A61  3001               	movlw	1
  7818  0A62  318A  227C         	fcall	_setRFSW_AdjControl
  7819                           
  7820                           ;RF_Control_B1.c: 339: break;
  7821  0A64  0008               	return
  7822  0A65                     l6732:	
  7823                           ;RF_Control_B1.c: 341: case 0xd1:
  7824                           
  7825                           
  7826                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7827  0A65  3001               	movlw	1
  7828  0A66  3190  20F4         	fcall	_setRF_AdjControl
  7829                           
  7830                           ;RF_Control_B1.c: 372: }
  7831                           
  7832                           ;RF_Control_B1.c: 343: break;
  7833  0A68  0008               	return
  7834  0A69                     l6736:	
  7835  0A69  0023               	movlb	3	; select bank3
  7836  0A6A  082F               	movf	(_RF_Data^(0+384)+15),w
  7837                           
  7838                           ; Switch size 1, requested type "space"
  7839                           ; Number of cases is 5, Range of values is 0 to 209
  7840                           ; switch strategies available:
  7841                           ; Name         Instructions Cycles
  7842                           ; simple_byte           16     9 (average)
  7843                           ; jumptable            260     6 (fixed)
  7844                           ;	Chosen strategy is simple_byte
  7845  0A6B  3A00               	xorlw	0	; case 0
  7846  0A6C  1903               	skipnz
  7847  0A6D  2A04               	goto	l6716
  7848  0A6E  3A01               	xorlw	1	; case 1
  7849  0A6F  1903               	skipnz
  7850  0A70  2A5D               	goto	l6728
  7851  0A71  3A10               	xorlw	16	; case 17
  7852  0A72  1903               	skipnz
  7853  0A73  2A61               	goto	l6730
  7854  0A74  3A31               	xorlw	49	; case 32
  7855  0A75  1903               	skipnz
  7856  0A76  2A3B               	goto	l6726
  7857  0A77  3AF1               	xorlw	241	; case 209
  7858  0A78  1903               	skipnz
  7859  0A79  2A65               	goto	l6732
  7860  0A7A  2A7B               	goto	l2212
  7861  0A7B                     l2212:	
  7862  0A7B  0008               	return
  7863  0A7C                     __end_of_setControl_Lights_Table:	
  7864                           
  7865                           	psect	text30
  7866  10F4                     __ptext30:	
  7867 ;; *************** function _setRF_AdjControl *****************
  7868 ;; Defined at:
  7869 ;;		line 443 in file "../src/RF_Control_B1.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  sw              1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  sw              1    6[BANK0 ] unsigned char 
  7874 ;;  status          1    5[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;		None               void
  7877 ;; Registers used:
  7878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;Total ram usage:        3 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    7
  7891 ;; This function calls:
  7892 ;;		_DimmerLights_SelectPointer
  7893 ;;		_getDimmerLights_Status
  7894 ;; This function is called by:
  7895 ;;		_setControl_Lights_Table
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _setRF_AdjControl
  7901  10F4                     _setRF_AdjControl:	
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7905                           ;setRF_AdjControl@sw stored from wreg
  7906  10F4  0020               	movlb	0	; select bank0
  7907  10F5  00A6               	movwf	setRF_AdjControl@sw
  7908                           
  7909                           ;RF_Control_B1.c: 444: char status = 0;
  7910  10F6  01A5               	clrf	setRF_AdjControl@status
  7911                           
  7912                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7913  10F7  0826               	movf	setRF_AdjControl@sw,w
  7914  10F8  319B  23D2  3190   	fcall	_getDimmerLights_Status
  7915  10FB  0020               	movlb	0	; select bank0
  7916  10FC  00A4               	movwf	??_setRF_AdjControl
  7917  10FD  0824               	movf	??_setRF_AdjControl,w
  7918  10FE  00A5               	movwf	setRF_AdjControl@status
  7919                           
  7920                           ;RF_Control_B1.c: 448: if (status == 1) {
  7921  10FF  0825               	movf	setRF_AdjControl@status,w
  7922  1100  3A01               	xorlw	1
  7923  1101  1D03               	skipz
  7924  1102  0008               	return
  7925                           
  7926                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7927  1103  0021               	movlb	1	; select bank1
  7928  1104  1822               	btfsc	(_RF1^(0+128)+2),0
  7929  1105  291C               	goto	l2231
  7930                           
  7931                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7932  1106  1422               	bsf	(_RF1^(0+128)+2),0
  7933                           
  7934                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7935  1107  0020               	movlb	0	; select bank0
  7936  1108  0826               	movf	setRF_AdjControl@sw,w
  7937  1109  319B  2304         	fcall	_DimmerLights_SelectPointer
  7938                           
  7939                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7940  110B  0021               	movlb	1	; select bank1
  7941  110C  084C               	movf	_DimmerLights^(0+128),w
  7942  110D  0086               	movwf	6
  7943  110E  3001               	movlw	1	; select bank2/3
  7944  110F  0087               	movwf	7
  7945  1110  1581               	bsf	1,3
  7946                           
  7947                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7948  1111  084C               	movf	_DimmerLights^(0+128),w
  7949  1112  0086               	movwf	6
  7950  1113  3001               	movlw	1	; select bank2/3
  7951  1114  0087               	movwf	7
  7952  1115  1601               	bsf	1,4
  7953                           
  7954                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7955  1116  084C               	movf	_DimmerLights^(0+128),w
  7956  1117  0086               	movwf	6
  7957  1118  3001               	movlw	1	; select bank2/3
  7958  1119  0087               	movwf	7
  7959  111A  1681               	bsf	1,5
  7960                           
  7961                           ;RF_Control_B1.c: 457: } else {
  7962  111B  0008               	return
  7963  111C                     l2231:	
  7964                           
  7965                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7966  111C  1022               	bcf	(_RF1^(0+128)+2),0
  7967                           
  7968                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7969  111D  084C               	movf	_DimmerLights^(0+128),w
  7970  111E  0086               	movwf	6
  7971  111F  3001               	movlw	1	; select bank2/3
  7972  1120  0087               	movwf	7
  7973  1121  1601               	bsf	1,4
  7974                           
  7975                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7976  1122  084C               	movf	_DimmerLights^(0+128),w
  7977  1123  0086               	movwf	6
  7978  1124  3001               	movlw	1	; select bank2/3
  7979  1125  0087               	movwf	7
  7980  1126  1281               	bcf	1,5
  7981  1127  0008               	return
  7982  1128                     __end_of_setRF_AdjControl:	
  7983                           
  7984                           	psect	text31
  7985  12B0                     __ptext31:	
  7986 ;; *************** function _setRFSW_Control *****************
  7987 ;; Defined at:
  7988 ;;		line 380 in file "../src/RF_Control_B1.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  sw              1    wreg     unsigned char 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  sw              1   79[BANK0 ] unsigned char 
  7993 ;;  status          1   78[BANK0 ] unsigned char 
  7994 ;; Return value:  Size  Location     Type
  7995 ;;		None               void
  7996 ;; Registers used:
  7997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;Total ram usage:        3 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    8
  8010 ;; This function calls:
  8011 ;;		_getDimmerLights_Status
  8012 ;;		_setBuz
  8013 ;;		_setDelayOff_GO
  8014 ;;		_setDimmerLights_SwOff
  8015 ;;		_setDimmerLights_SwOn
  8016 ;;		_setRF_DimmerLights
  8017 ;;		_setTxData
  8018 ;; This function is called by:
  8019 ;;		_setControl_Lights_Table
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _setRFSW_Control
  8025  12B0                     _setRFSW_Control:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8029                           ;setRFSW_Control@sw stored from wreg
  8030  12B0  0020               	movlb	0	; select bank0
  8031  12B1  00EF               	movwf	setRFSW_Control@sw
  8032                           
  8033                           ;RF_Control_B1.c: 381: char status = 0;
  8034  12B2  01EE               	clrf	setRFSW_Control@status
  8035                           
  8036                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  8037  12B3  0023               	movlb	3	; select bank3
  8038  12B4  0830               	movf	(_RF_Data^(0+384)+16),w
  8039  12B5  3A80               	xorlw	128
  8040  12B6  1D03               	skipz
  8041  12B7  2AE3               	goto	l6442
  8042                           
  8043                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  8044  12B8  0020               	movlb	0	; select bank0
  8045  12B9  01E5               	clrf	setDelayOff_GO@command
  8046  12BA  0AE5               	incf	setDelayOff_GO@command,f
  8047  12BB  0023               	movlb	3	; select bank3
  8048  12BC  0831               	movf	(_RF_Data^(0+384)+17),w
  8049  12BD  0020               	movlb	0	; select bank0
  8050  12BE  00ED               	movwf	??_setRFSW_Control
  8051  12BF  086D               	movf	??_setRFSW_Control,w
  8052  12C0  00E6               	movwf	setDelayOff_GO@value
  8053  12C1  086F               	movf	setRFSW_Control@sw,w
  8054  12C2  318C  2409  3192   	fcall	_setDelayOff_GO
  8055                           
  8056                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  8057  12C5  0020               	movlb	0	; select bank0
  8058  12C6  086F               	movf	setRFSW_Control@sw,w
  8059  12C7  319B  23D2  3192   	fcall	_getDimmerLights_Status
  8060  12CA  3A01               	xorlw	1
  8061  12CB  1D03               	skipz
  8062  12CC  2AE3               	goto	l6442
  8063                           
  8064                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  8065  12CD  3064               	movlw	100
  8066  12CE  0020               	movlb	0	; select bank0
  8067  12CF  00A9               	movwf	setBuz@time
  8068  12D0  3000               	movlw	0
  8069  12D1  00AA               	movwf	setBuz@time+1
  8070  12D2  3001               	movlw	1
  8071  12D3  3194  2425  3192   	fcall	_setBuz
  8072                           
  8073                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  8074  12D6  0020               	movlb	0	; select bank0
  8075  12D7  01E5               	clrf	setRF_DimmerLights@on
  8076  12D8  0AE5               	incf	setRF_DimmerLights@on,f
  8077  12D9  086F               	movf	setRFSW_Control@sw,w
  8078  12DA  3196  26C5  3192   	fcall	_setRF_DimmerLights
  8079                           
  8080                           ;RF_Control_B1.c: 388: setTxData();
  8081  12DD  318E  267F  3192   	fcall	_setTxData
  8082                           
  8083                           ;RF_Control_B1.c: 389: status = 1;
  8084  12E0  0020               	movlb	0	; select bank0
  8085  12E1  01EE               	clrf	setRFSW_Control@status
  8086  12E2  0AEE               	incf	setRFSW_Control@status,f
  8087  12E3                     l6442:	
  8088                           
  8089                           ;RF_Control_B1.c: 390: }
  8090                           ;RF_Control_B1.c: 391: }
  8091                           ;RF_Control_B1.c: 393: if (status == 0) {
  8092  12E3  0020               	movlb	0	; select bank0
  8093  12E4  08EE               	movf	setRFSW_Control@status,f
  8094  12E5  1D03               	skipz
  8095  12E6  0008               	return
  8096                           
  8097                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  8098  12E7  086F               	movf	setRFSW_Control@sw,w
  8099  12E8  3191  215C  3192   	fcall	_setDimmerLights_SwOn
  8100                           
  8101                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  8102  12EB  0020               	movlb	0	; select bank0
  8103  12EC  086F               	movf	setRFSW_Control@sw,w
  8104  12ED  3191  21FE         	fcall	_setDimmerLights_SwOff
  8105  12EF  0008               	return
  8106  12F0                     __end_of_setRFSW_Control:	
  8107                           
  8108                           	psect	text32
  8109  0A7C                     __ptext32:	
  8110 ;; *************** function _setRFSW_AdjControl *****************
  8111 ;; Defined at:
  8112 ;;		line 402 in file "../src/RF_Control_B1.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  sw              1    wreg     unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  sw              1   72[BANK0 ] unsigned char 
  8117 ;;  status          1   71[BANK0 ] unsigned char 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;Total ram usage:        4 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    8
  8134 ;; This function calls:
  8135 ;;		_getDimmerLights_PercentToValue
  8136 ;;		_getDimmerLights_Status
  8137 ;;		_setDimmerIntr_Dimming_RF
  8138 ;;		_setDimmerIntr_MaxmumValue
  8139 ;;		_setDimmerLights_DimmingRun
  8140 ;;		_setDimmerLights_SwOff
  8141 ;;		_setDimmerLights_SwOn
  8142 ;;		_setMemory_Modify
  8143 ;;		_setProductData
  8144 ;;		_setTxData
  8145 ;; This function is called by:
  8146 ;;		_setControl_Lights_Table
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _setRFSW_AdjControl
  8152  0A7C                     _setRFSW_AdjControl:	
  8153                           
  8154                           ;incstack = 0
  8155                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8156                           ;setRFSW_AdjControl@sw stored from wreg
  8157  0A7C  0020               	movlb	0	; select bank0
  8158  0A7D  00E8               	movwf	setRFSW_AdjControl@sw
  8159                           
  8160                           ;RF_Control_B1.c: 403: char status = 0;
  8161  0A7E  01E7               	clrf	setRFSW_AdjControl@status
  8162                           
  8163                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  8164  0A7F  0868               	movf	setRFSW_AdjControl@sw,w
  8165  0A80  319B  23D2  318A   	fcall	_getDimmerLights_Status
  8166  0A83  0020               	movlb	0	; select bank0
  8167  0A84  00E5               	movwf	??_setRFSW_AdjControl
  8168  0A85  0865               	movf	??_setRFSW_AdjControl,w
  8169  0A86  00E7               	movwf	setRFSW_AdjControl@status
  8170                           
  8171                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  8172  0A87  3065               	movlw	101
  8173  0A88  0023               	movlb	3	; select bank3
  8174  0A89  0229               	subwf	(_RF_Data^(0+384)+9),w
  8175  0A8A  1C03               	skipc
  8176  0A8B  2A93               	goto	l6454
  8177                           
  8178                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  8179  0A8C  3064               	movlw	100
  8180  0A8D  0020               	movlb	0	; select bank0
  8181  0A8E  00E5               	movwf	??_setRFSW_AdjControl
  8182  0A8F  0865               	movf	??_setRFSW_AdjControl,w
  8183  0A90  0023               	movlb	3	; select bank3
  8184  0A91  00A9               	movwf	(_RF_Data^(0+384)+9)
  8185                           
  8186                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  8187  0A92  2A98               	goto	l6458
  8188  0A93                     l6454:	
  8189  0A93  08A9               	movf	(_RF_Data^(0+384)+9),f
  8190  0A94  1D03               	skipz
  8191  0A95  2A98               	goto	l6458
  8192                           
  8193                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  8194  0A96  01A9               	clrf	(_RF_Data^(0+384)+9)
  8195  0A97  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8196  0A98                     l6458:	
  8197                           
  8198                           ;RF_Control_B1.c: 411: }
  8199                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  8200  0A98  0829               	movf	(_RF_Data^(0+384)+9),w
  8201  0A99  0020               	movlb	0	; select bank0
  8202  0A9A  00E5               	movwf	??_setRFSW_AdjControl
  8203  0A9B  0865               	movf	??_setRFSW_AdjControl,w
  8204  0A9C  00E2               	movwf	setProductData@value
  8205  0A9D  3009               	movlw	9
  8206  0A9E  319B  2310  318A   	fcall	_setProductData
  8207                           
  8208                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  8209  0AA1  0020               	movlb	0	; select bank0
  8210  0AA2  0868               	movf	setRFSW_AdjControl@sw,w
  8211  0AA3  00E5               	movwf	??_setRFSW_AdjControl
  8212  0AA4  0865               	movf	??_setRFSW_AdjControl,w
  8213  0AA5  00E2               	movwf	setProductData@value
  8214  0AA6  300B               	movlw	11
  8215  0AA7  319B  2310  318A   	fcall	_setProductData
  8216                           
  8217                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  8218  0AAA  0020               	movlb	0	; select bank0
  8219  0AAB  0868               	movf	setRFSW_AdjControl@sw,w
  8220  0AAC  3E1A               	addlw	26
  8221  0AAD  0021               	movlb	1	; select bank1
  8222  0AAE  076E               	addwf	_product^(0+128),w
  8223  0AAF  0020               	movlb	0	; select bank0
  8224  0AB0  00E5               	movwf	??_setRFSW_AdjControl
  8225  0AB1  0865               	movf	??_setRFSW_AdjControl,w
  8226  0AB2  0086               	movwf	6
  8227  0AB3  3001               	movlw	1	; select bank2/3
  8228  0AB4  0087               	movwf	7
  8229  0AB5  0801               	movf	1,w
  8230  0AB6  00E6               	movwf	??_setRFSW_AdjControl+1
  8231  0AB7  0866               	movf	??_setRFSW_AdjControl+1,w
  8232  0AB8  00E2               	movwf	setProductData@value
  8233  0AB9  3011               	movlw	17
  8234  0ABA  319B  2310  318A   	fcall	_setProductData
  8235                           
  8236                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8237  0ABD  0023               	movlb	3	; select bank3
  8238  0ABE  0829               	movf	(_RF_Data^(0+384)+9),w
  8239  0ABF  0020               	movlb	0	; select bank0
  8240  0AC0  00E5               	movwf	??_setRFSW_AdjControl
  8241  0AC1  0865               	movf	??_setRFSW_AdjControl,w
  8242  0AC2  00E2               	movwf	setProductData@value
  8243  0AC3  0868               	movf	setRFSW_AdjControl@sw,w
  8244  0AC4  3E14               	addlw	20
  8245  0AC5  319B  2310  318A   	fcall	_setProductData
  8246                           
  8247                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8248  0AC8  3001               	movlw	1
  8249  0AC9  319C  24A3  318A   	fcall	_setMemory_Modify
  8250                           
  8251                           ;RF_Control_B1.c: 427: if (status == 1) {
  8252  0ACC  0020               	movlb	0	; select bank0
  8253  0ACD  0867               	movf	setRFSW_AdjControl@status,w
  8254  0ACE  3A01               	xorlw	1
  8255  0ACF  1D03               	skipz
  8256  0AD0  2AE8               	goto	l6468
  8257                           
  8258                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8259  0AD1  0023               	movlb	3	; select bank3
  8260  0AD2  0829               	movf	(_RF_Data^(0+384)+9),w
  8261  0AD3  3195  25FB  318A   	fcall	_getDimmerLights_PercentToValue
  8262  0AD6  0020               	movlb	0	; select bank0
  8263  0AD7  00E5               	movwf	??_setRFSW_AdjControl
  8264  0AD8  0865               	movf	??_setRFSW_AdjControl,w
  8265  0AD9  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8266  0ADA  0868               	movf	setRFSW_AdjControl@sw,w
  8267  0ADB  319B  231C  318A   	fcall	_setDimmerIntr_MaxmumValue
  8268                           
  8269                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8270  0ADE  0020               	movlb	0	; select bank0
  8271  0ADF  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8272  0AE0  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8273  0AE1  0868               	movf	setRFSW_AdjControl@sw,w
  8274  0AE2  319D  25AE  318A   	fcall	_setDimmerIntr_Dimming_RF
  8275                           
  8276                           ;RF_Control_B1.c: 430: setTxData();
  8277  0AE5  318E  267F         	fcall	_setTxData
  8278                           
  8279                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8280  0AE7  0008               	return
  8281  0AE8                     l6468:	
  8282  0AE8  0020               	movlb	0	; select bank0
  8283  0AE9  08E7               	movf	setRFSW_AdjControl@status,f
  8284  0AEA  1D03               	skipz
  8285  0AEB  0008               	return
  8286                           
  8287                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8288  0AEC  01A2               	clrf	setDimmerLights_DimmingRun@command
  8289  0AED  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8290  0AEE  0868               	movf	setRFSW_AdjControl@sw,w
  8291  0AEF  319E  262C  318A   	fcall	_setDimmerLights_DimmingRun
  8292                           
  8293                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8294  0AF2  0020               	movlb	0	; select bank0
  8295  0AF3  0868               	movf	setRFSW_AdjControl@sw,w
  8296  0AF4  3191  215C  318A   	fcall	_setDimmerLights_SwOn
  8297                           
  8298                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8299  0AF7  0020               	movlb	0	; select bank0
  8300  0AF8  0868               	movf	setRFSW_AdjControl@sw,w
  8301  0AF9  3191  21FE         	fcall	_setDimmerLights_SwOff
  8302  0AFB  0008               	return
  8303  0AFC                     __end_of_setRFSW_AdjControl:	
  8304                           
  8305                           	psect	text33
  8306  1E2C                     __ptext33:	
  8307 ;; *************** function _setDimmerLights_DimmingRun *****************
  8308 ;; Defined at:
  8309 ;;		line 1089 in file "../src/Dimmer_B1.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  lights          1    wreg     unsigned char 
  8312 ;;  command         1    2[BANK0 ] unsigned char 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;  lights          1    4[BANK0 ] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;		None               void
  8317 ;; Registers used:
  8318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8324 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;Total ram usage:        3 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    6
  8331 ;; This function calls:
  8332 ;;		_DimmerLights_SelectPointer
  8333 ;; This function is called by:
  8334 ;;		_setRFSW_AdjControl
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _setDimmerLights_DimmingRun
  8340  1E2C                     _setDimmerLights_DimmingRun:	
  8341                           
  8342                           ;incstack = 0
  8343                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8344                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8345  1E2C  0020               	movlb	0	; select bank0
  8346  1E2D  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8347                           
  8348                           ;Dimmer_B1.c: 1090: DimmerLights_SelectPointer(lights);
  8349  1E2E  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8350  1E2F  319B  2304         	fcall	_DimmerLights_SelectPointer
  8351                           
  8352                           ;Dimmer_B1.c: 1091: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8353  1E31  0020               	movlb	0	; select bank0
  8354  1E32  0822               	movf	setDimmerLights_DimmingRun@command,w
  8355  1E33  3A01               	xorlw	1
  8356  1E34  3000               	movlw	0
  8357  1E35  1903               	skipnz
  8358  1E36  3001               	movlw	1
  8359  1E37  00A3               	movwf	??_setDimmerLights_DimmingRun
  8360  1E38  0021               	movlb	1	; select bank1
  8361  1E39  0A4C               	incf	_DimmerLights^(0+128),w
  8362  1E3A  0086               	movwf	6
  8363  1E3B  3001               	movlw	1	; select bank2/3
  8364  1E3C  0087               	movwf	7
  8365  1E3D  0020               	movlb	0	; select bank0
  8366  1E3E  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8367  1E3F  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8368  1E40  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8369  1E41  0801               	movf	1,w
  8370  1E42  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8371  1E43  39BF               	andlw	-65
  8372  1E44  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8373  1E45  0081               	movwf	1
  8374  1E46  0008               	return
  8375  1E47                     __end_of_setDimmerLights_DimmingRun:	
  8376                           
  8377                           	psect	text34
  8378  1C27                     __ptext34:	
  8379 ;; *************** function _getRF_KeyStatus *****************
  8380 ;; Defined at:
  8381 ;;		line 166 in file "../src/RF_Control_B1.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  key             1    1[BANK0 ] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      unsigned char 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        3 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    5
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_setRF_Main
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _getRF_KeyStatus
  8411  1C27                     _getRF_KeyStatus:	
  8412                           
  8413                           ;RF_Control_B1.c: 167: char key = 0;
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8417  1C27  0020               	movlb	0	; select bank0
  8418  1C28  01A1               	clrf	getRF_KeyStatus@key
  8419                           
  8420                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8421  1C29  01A2               	clrf	_getRF_KeyStatus$5410
  8422  1C2A  0AA2               	incf	_getRF_KeyStatus$5410,f
  8423  1C2B  1F0C               	btfss	12,6	;volatile
  8424  1C2C  1A0C               	btfsc	12,4	;volatile
  8425  1C2D  2C32               	goto	l7116
  8426  1C2E  1C0C               	btfss	12,0	;volatile
  8427  1C2F  1B8C               	btfsc	12,7	;volatile
  8428  1C30  2C32               	goto	l7116
  8429  1C31  01A2               	clrf	_getRF_KeyStatus$5410
  8430  1C32                     l7116:	
  8431  1C32  0822               	movf	_getRF_KeyStatus$5410,w
  8432  1C33  00A0               	movwf	??_getRF_KeyStatus
  8433  1C34  0820               	movf	??_getRF_KeyStatus,w
  8434  1C35  00A1               	movwf	getRF_KeyStatus@key
  8435                           
  8436                           ;RF_Control_B1.c: 179: return key;
  8437  1C36  0821               	movf	getRF_KeyStatus@key,w
  8438  1C37  0008               	return
  8439  1C38                     __end_of_getRF_KeyStatus:	
  8440                           
  8441                           	psect	text35
  8442  1C16                     __ptext35:	
  8443 ;; *************** function _getBuz_GO *****************
  8444 ;; Defined at:
  8445 ;;		line 82 in file "../src/Buzzer_B1.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;		None
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  i               2    4[BANK0 ] int 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;                  2    0[BANK0 ] int 
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;Total ram usage:        6 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    5
  8466 ;; This function calls:
  8467 ;;		Nothing
  8468 ;; This function is called by:
  8469 ;;		_setRF_Main
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           
  8474                           ;psect for function _getBuz_GO
  8475  1C16                     _getBuz_GO:	
  8476                           
  8477                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8478                           
  8479                           ;incstack = 0
  8480                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8481  1C16  0022               	movlb	2	; select bank2
  8482  1C17  0C20               	rrf	_Buz1^(0+256),w
  8483  1C18  3901               	andlw	1
  8484  1C19  0020               	movlb	0	; select bank0
  8485  1C1A  00A2               	movwf	??_getBuz_GO
  8486  1C1B  01A3               	clrf	??_getBuz_GO+1
  8487  1C1C  0822               	movf	??_getBuz_GO,w
  8488  1C1D  00A4               	movwf	getBuz_GO@i
  8489  1C1E  0823               	movf	??_getBuz_GO+1,w
  8490  1C1F  00A5               	movwf	getBuz_GO@i+1
  8491                           
  8492                           ;Buzzer_B1.c: 84: return i;
  8493  1C20  0825               	movf	getBuz_GO@i+1,w
  8494  1C21  01A1               	clrf	?_getBuz_GO+1
  8495  1C22  07A1               	addwf	?_getBuz_GO+1,f
  8496  1C23  0824               	movf	getBuz_GO@i,w
  8497  1C24  01A0               	clrf	?_getBuz_GO
  8498  1C25  07A0               	addwf	?_getBuz_GO,f
  8499  1C26  0008               	return
  8500  1C27                     __end_of_getBuz_GO:	
  8501                           
  8502                           	psect	text36
  8503  1BB3                     __ptext36:	
  8504 ;; *************** function _RF_RxDisable *****************
  8505 ;; Defined at:
  8506 ;;		line 154 in file "../src/RF_Control_B1.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;		None
  8511 ;; Return value:  Size  Location     Type
  8512 ;;		None               void
  8513 ;; Registers used:
  8514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;Total ram usage:        0 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    7
  8527 ;; This function calls:
  8528 ;;		_CC2500_WriteCommand
  8529 ;; This function is called by:
  8530 ;;		_setRF_Main
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _RF_RxDisable
  8536  1BB3                     _RF_RxDisable:	
  8537                           
  8538                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8539                           
  8540                           ;incstack = 0
  8541                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8542  1BB3  0021               	movlb	1	; select bank1
  8543  1BB4  18A0               	btfsc	_RF1^(0+128),1
  8544  1BB5  2BB8               	goto	l2170
  8545  1BB6  1DA0               	btfss	_RF1^(0+128),3
  8546  1BB7  0008               	return
  8547  1BB8                     l2170:	
  8548                           
  8549                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8550  1BB8  11A0               	bcf	_RF1^(0+128),3
  8551                           
  8552                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8553  1BB9  10A0               	bcf	_RF1^(0+128),1
  8554                           
  8555                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8556  1BBA  3036               	movlw	54
  8557  1BBB  3190  2000  319B   	fcall	_CC2500_WriteCommand
  8558                           
  8559                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8560  1BBE  303A               	movlw	58
  8561  1BBF  3190  2000         	fcall	_CC2500_WriteCommand
  8562  1BC1  0008               	return
  8563  1BC2                     __end_of_RF_RxDisable:	
  8564                           
  8565                           	psect	text37
  8566  0846                     __ptext37:	
  8567 ;; *************** function _CC2500_TxData *****************
  8568 ;; Defined at:
  8569 ;;		line 32 in file "../src/CC2500_B1.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;		None
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;		None               void
  8576 ;; Registers used:
  8577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;Total ram usage:        2 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    7
  8590 ;; This function calls:
  8591 ;;		_CC2500_WriteByte
  8592 ;;		_CC2500_WriteCommand
  8593 ;;		_RF_Timeout_Counter
  8594 ;;		_setRF_TimeoutCleared
  8595 ;; This function is called by:
  8596 ;;		_setRF_Main
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function _CC2500_TxData
  8602  0846                     _CC2500_TxData:	
  8603                           
  8604                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8605                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8606                           
  8607                           ;incstack = 0
  8608                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8609  0846  3036               	movlw	54
  8610  0847  3190  2000  3188   	fcall	_CC2500_WriteCommand
  8611                           
  8612                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8613  084A  303B               	movlw	59
  8614  084B  3190  2000  3188   	fcall	_CC2500_WriteCommand
  8615                           
  8616                           ;CC2500_B1.c: 38: RC0 = 0;
  8617  084E  0020               	movlb	0	; select bank0
  8618  084F  100E               	bcf	14,0	;volatile
  8619                           
  8620                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8621  0850  307F               	movlw	127
  8622  0851  00A4               	movwf	??_CC2500_TxData
  8623  0852  0824               	movf	??_CC2500_TxData,w
  8624  0853  0021               	movlb	1	; select bank1
  8625  0854  00D1               	movwf	_SPI0Buffer^(0+128)
  8626                           
  8627                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8628  0855  2859               	goto	l8676
  8629  0856                     l8674:	
  8630                           
  8631                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8632  0856  319D  2516  3188   	fcall	_RF_Timeout_Counter
  8633  0859                     l8676:	
  8634  0859  0020               	movlb	0	; select bank0
  8635  085A  1E8E               	btfss	14,5	;volatile
  8636  085B  285F               	goto	l8680
  8637  085C  0021               	movlb	1	; select bank1
  8638  085D  1F21               	btfss	(_RF1^(0+128)+1),6
  8639  085E  2856               	goto	l8674
  8640  085F                     l8680:	
  8641                           
  8642                           ;CC2500_B1.c: 42: };
  8643                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8644  085F  319A  2249  3188   	fcall	_setRF_TimeoutCleared
  8645                           
  8646                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8647  0862  319D  25DF  3188   	fcall	_CC2500_WriteByte
  8648                           
  8649                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8650  0865  0021               	movlb	1	; select bank1
  8651  0866  0854               	movf	_Tx_Length^(0+128),w
  8652  0867  0020               	movlb	0	; select bank0
  8653  0868  00A4               	movwf	??_CC2500_TxData
  8654  0869  0824               	movf	??_CC2500_TxData,w
  8655  086A  0021               	movlb	1	; select bank1
  8656  086B  00D1               	movwf	_SPI0Buffer^(0+128)
  8657                           
  8658                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8659  086C  319D  25DF  3188   	fcall	_CC2500_WriteByte
  8660                           
  8661                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8662  086F  0020               	movlb	0	; select bank0
  8663  0870  01A5               	clrf	CC2500_TxData@loop_e
  8664  0871                     l8694:	
  8665  0871  0021               	movlb	1	; select bank1
  8666  0872  0854               	movf	_Tx_Length^(0+128),w
  8667  0873  0020               	movlb	0	; select bank0
  8668  0874  0225               	subwf	CC2500_TxData@loop_e,w
  8669  0875  1803               	btfsc	3,0
  8670  0876  288A               	goto	l235
  8671                           
  8672                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8673  0877  0825               	movf	CC2500_TxData@loop_e,w
  8674  0878  3EA0               	addlw	_RF_Data& (0+255)
  8675  0879  0086               	movwf	6
  8676  087A  3001               	movlw	1	; select bank3/4
  8677  087B  0087               	movwf	7
  8678  087C  0801               	movf	1,w
  8679  087D  00A4               	movwf	??_CC2500_TxData
  8680  087E  0824               	movf	??_CC2500_TxData,w
  8681  087F  0021               	movlb	1	; select bank1
  8682  0880  00D1               	movwf	_SPI0Buffer^(0+128)
  8683                           
  8684                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8685  0881  319D  25DF  3188   	fcall	_CC2500_WriteByte
  8686  0884  3001               	movlw	1
  8687  0885  0020               	movlb	0	; select bank0
  8688  0886  00A4               	movwf	??_CC2500_TxData
  8689  0887  0824               	movf	??_CC2500_TxData,w
  8690  0888  07A5               	addwf	CC2500_TxData@loop_e,f
  8691  0889  2871               	goto	l8694
  8692  088A                     l235:	
  8693                           
  8694                           ;CC2500_B1.c: 51: }
  8695                           ;CC2500_B1.c: 52: RC0 = 1;
  8696  088A  140E               	bsf	14,0	;volatile
  8697                           
  8698                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8699  088B  3035               	movlw	53
  8700  088C  3190  2000  3188   	fcall	_CC2500_WriteCommand
  8701                           
  8702                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8703  088F  2893               	goto	l8700
  8704  0890                     l8698:	
  8705                           
  8706                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8707  0890  319D  2516  3188   	fcall	_RF_Timeout_Counter
  8708  0893                     l8700:	
  8709  0893  0020               	movlb	0	; select bank0
  8710  0894  188E               	btfsc	14,1	;volatile
  8711  0895  2899               	goto	l8704
  8712  0896  0021               	movlb	1	; select bank1
  8713  0897  1F21               	btfss	(_RF1^(0+128)+1),6
  8714  0898  2890               	goto	l8698
  8715  0899                     l8704:	
  8716                           
  8717                           ;CC2500_B1.c: 56: };
  8718                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8719  0899  319A  2249  3188   	fcall	_setRF_TimeoutCleared
  8720                           
  8721                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8722  089C  28A0               	goto	l8708
  8723  089D                     l8706:	
  8724                           
  8725                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8726  089D  319D  2516  3188   	fcall	_RF_Timeout_Counter
  8727  08A0                     l8708:	
  8728  08A0  0020               	movlb	0	; select bank0
  8729  08A1  1C8E               	btfss	14,1	;volatile
  8730  08A2  28A6               	goto	l8712
  8731  08A3  0021               	movlb	1	; select bank1
  8732  08A4  1F21               	btfss	(_RF1^(0+128)+1),6
  8733  08A5  289D               	goto	l8706
  8734  08A6                     l8712:	
  8735                           
  8736                           ;CC2500_B1.c: 61: };
  8737                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8738  08A6  319A  2249  3188   	fcall	_setRF_TimeoutCleared
  8739                           
  8740                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8741  08A9  3036               	movlw	54
  8742  08AA  3190  2000  3188   	fcall	_CC2500_WriteCommand
  8743                           
  8744                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8745  08AD  303B               	movlw	59
  8746  08AE  3190  2000         	fcall	_CC2500_WriteCommand
  8747                           
  8748                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8749  08B0  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8750  08B1  0008               	return
  8751  08B2                     __end_of_CC2500_TxData:	
  8752                           
  8753                           	psect	text38
  8754  1795                     __ptext38:	
  8755 ;; *************** function _CC2500_RxData *****************
  8756 ;; Defined at:
  8757 ;;		line 73 in file "../src/CC2500_B1.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8762 ;; Return value:  Size  Location     Type
  8763 ;;		None               void
  8764 ;; Registers used:
  8765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;Total ram usage:        2 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    7
  8778 ;; This function calls:
  8779 ;;		_CC2500_ReadByte
  8780 ;;		_CC2500_ReadStatus
  8781 ;;		_CC2500_WriteByte
  8782 ;;		_CC2500_WriteCommand
  8783 ;;		_RF_Timeout_Counter
  8784 ;;		_setRF_TimeoutCleared
  8785 ;; This function is called by:
  8786 ;;		_setRF_Main
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function _CC2500_RxData
  8792  1795                     _CC2500_RxData:	
  8793                           
  8794                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8795                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8796                           
  8797                           ;incstack = 0
  8798                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8799  1795  0020               	movlb	0	; select bank0
  8800  1796  188E               	btfsc	14,1	;volatile
  8801  1797  0008               	return
  8802                           
  8803                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8804  1798  303B               	movlw	59
  8805  1799  319F  27DB  3197   	fcall	_CC2500_ReadStatus
  8806                           
  8807                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8808  179C  0021               	movlb	1	; select bank1
  8809  179D  0857               	movf	_s_data^(0+128),w
  8810  179E  1903               	btfsc	3,2
  8811  179F  0008               	return
  8812                           
  8813                           ;CC2500_B1.c: 90: RC0 = 0;
  8814  17A0  0020               	movlb	0	; select bank0
  8815  17A1  100E               	bcf	14,0	;volatile
  8816                           
  8817                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8818  17A2  30FF               	movlw	255
  8819  17A3  00A4               	movwf	??_CC2500_RxData
  8820  17A4  0824               	movf	??_CC2500_RxData,w
  8821  17A5  0021               	movlb	1	; select bank1
  8822  17A6  00D1               	movwf	_SPI0Buffer^(0+128)
  8823                           
  8824                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8825  17A7  2FAB               	goto	l8732
  8826  17A8                     l8730:	
  8827                           
  8828                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8829  17A8  319D  2516  3197   	fcall	_RF_Timeout_Counter
  8830  17AB                     l8732:	
  8831  17AB  0020               	movlb	0	; select bank0
  8832  17AC  1E8E               	btfss	14,5	;volatile
  8833  17AD  2FB1               	goto	l8736
  8834  17AE  0021               	movlb	1	; select bank1
  8835  17AF  1F21               	btfss	(_RF1^(0+128)+1),6
  8836  17B0  2FA8               	goto	l8730
  8837  17B1                     l8736:	
  8838                           
  8839                           ;CC2500_B1.c: 95: };
  8840                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8841  17B1  319A  2249  3197   	fcall	_setRF_TimeoutCleared
  8842                           
  8843                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8844  17B4  319D  25DF  3197   	fcall	_CC2500_WriteByte
  8845                           
  8846                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8847  17B7  319E  269A  3197   	fcall	_CC2500_ReadByte
  8848                           
  8849                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8850  17BA  0021               	movlb	1	; select bank1
  8851  17BB  0851               	movf	_SPI0Buffer^(0+128),w
  8852  17BC  0020               	movlb	0	; select bank0
  8853  17BD  00A4               	movwf	??_CC2500_RxData
  8854  17BE  0824               	movf	??_CC2500_RxData,w
  8855  17BF  0021               	movlb	1	; select bank1
  8856  17C0  00D0               	movwf	_Rx_Length^(0+128)
  8857                           
  8858                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8859  17C1  0020               	movlb	0	; select bank0
  8860  17C2  01A5               	clrf	CC2500_RxData@loop_f
  8861  17C3                     l8752:	
  8862  17C3  0021               	movlb	1	; select bank1
  8863  17C4  0850               	movf	_Rx_Length^(0+128),w
  8864  17C5  0020               	movlb	0	; select bank0
  8865  17C6  0225               	subwf	CC2500_RxData@loop_f,w
  8866  17C7  1803               	btfsc	3,0
  8867  17C8  2FDC               	goto	l8754
  8868                           
  8869                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8870  17C9  319E  269A  3197   	fcall	_CC2500_ReadByte
  8871                           
  8872                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8873  17CC  0021               	movlb	1	; select bank1
  8874  17CD  0851               	movf	_SPI0Buffer^(0+128),w
  8875  17CE  0020               	movlb	0	; select bank0
  8876  17CF  00A4               	movwf	??_CC2500_RxData
  8877  17D0  0825               	movf	CC2500_RxData@loop_f,w
  8878  17D1  3EA0               	addlw	_RF_Data& (0+255)
  8879  17D2  0086               	movwf	6
  8880  17D3  3001               	movlw	1	; select bank3/4
  8881  17D4  0087               	movwf	7
  8882  17D5  0824               	movf	??_CC2500_RxData,w
  8883  17D6  0081               	movwf	1
  8884  17D7  3001               	movlw	1
  8885  17D8  00A4               	movwf	??_CC2500_RxData
  8886  17D9  0824               	movf	??_CC2500_RxData,w
  8887  17DA  07A5               	addwf	CC2500_RxData@loop_f,f
  8888  17DB  2FC3               	goto	l8752
  8889  17DC                     l8754:	
  8890                           
  8891                           ;CC2500_B1.c: 104: }
  8892                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8893  17DC  319E  269A  3197   	fcall	_CC2500_ReadByte
  8894                           
  8895                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8896  17DF  0021               	movlb	1	; select bank1
  8897  17E0  0851               	movf	_SPI0Buffer^(0+128),w
  8898  17E1  0020               	movlb	0	; select bank0
  8899  17E2  00A4               	movwf	??_CC2500_RxData
  8900  17E3  0824               	movf	??_CC2500_RxData,w
  8901  17E4  0021               	movlb	1	; select bank1
  8902  17E5  00CF               	movwf	_RSSI^(0+128)
  8903                           
  8904                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8905  17E6  319E  269A  3197   	fcall	_CC2500_ReadByte
  8906                           
  8907                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8908  17E9  0021               	movlb	1	; select bank1
  8909  17EA  0851               	movf	_SPI0Buffer^(0+128),w
  8910  17EB  0020               	movlb	0	; select bank0
  8911  17EC  00A4               	movwf	??_CC2500_RxData
  8912  17ED  0824               	movf	??_CC2500_RxData,w
  8913  17EE  0021               	movlb	1	; select bank1
  8914  17EF  00C8               	movwf	_CRC^(0+128)
  8915                           
  8916                           ;CC2500_B1.c: 109: RC0 = 1;
  8917  17F0  0020               	movlb	0	; select bank0
  8918  17F1  140E               	bsf	14,0	;volatile
  8919                           
  8920                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8921  17F2  0021               	movlb	1	; select bank1
  8922  17F3  1BC8               	btfsc	_CRC^(0+128),7
  8923                           
  8924                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8925  17F4  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8926                           
  8927                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8928  17F5  11A0               	bcf	_RF1^(0+128),3
  8929                           
  8930                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8931  17F6  14A0               	bsf	_RF1^(0+128),1
  8932                           
  8933                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8934  17F7  3036               	movlw	54
  8935  17F8  3190  2000  3197   	fcall	_CC2500_WriteCommand
  8936                           
  8937                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8938  17FB  303A               	movlw	58
  8939  17FC  3190  2000         	fcall	_CC2500_WriteCommand
  8940  17FE  0021               	movlb	1	; select bank1
  8941  17FF  0008               	return
  8942  1800                     __end_of_CC2500_RxData:	
  8943                           
  8944                           	psect	text39
  8945  1FDB                     __ptext39:	
  8946 ;; *************** function _CC2500_ReadStatus *****************
  8947 ;; Defined at:
  8948 ;;		line 308 in file "../src/CC2500_B1.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  status_addr     1    wreg     unsigned char 
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;		None               void
  8955 ;; Registers used:
  8956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:        2 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    6
  8969 ;; This function calls:
  8970 ;;		_CC2500_ReadByte
  8971 ;;		_CC2500_WriteByte
  8972 ;;		_RF_Timeout_Counter
  8973 ;;		_setRF_TimeoutCleared
  8974 ;; This function is called by:
  8975 ;;		_CC2500_RxData
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _CC2500_ReadStatus
  8981  1FDB                     _CC2500_ReadStatus:	
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8985                           ;CC2500_ReadStatus@status_addr stored from wreg
  8986  1FDB  0020               	movlb	0	; select bank0
  8987  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  8988                           
  8989                           ;CC2500_B1.c: 309: RC0 = 0;
  8990  1FDD  100E               	bcf	14,0	;volatile
  8991                           
  8992                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8993  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  8994  1FDF  3EC0               	addlw	192
  8995  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  8996  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  8997  1FE2  0021               	movlb	1	; select bank1
  8998  1FE3  00D1               	movwf	_SPI0Buffer^(0+128)
  8999                           
  9000                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9001  1FE4  2FE8               	goto	l8582
  9002  1FE5                     l8580:	
  9003                           
  9004                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9005  1FE5  319D  2516  319F   	fcall	_RF_Timeout_Counter
  9006  1FE8                     l8582:	
  9007  1FE8  0020               	movlb	0	; select bank0
  9008  1FE9  1E8E               	btfss	14,5	;volatile
  9009  1FEA  2FEE               	goto	l8586
  9010  1FEB  0021               	movlb	1	; select bank1
  9011  1FEC  1F21               	btfss	(_RF1^(0+128)+1),6
  9012  1FED  2FE5               	goto	l8580
  9013  1FEE                     l8586:	
  9014                           
  9015                           ;CC2500_B1.c: 314: };
  9016                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9017  1FEE  319A  2249  319F   	fcall	_setRF_TimeoutCleared
  9018                           
  9019                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9020  1FF1  319D  25DF  319F   	fcall	_CC2500_WriteByte
  9021                           
  9022                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9023  1FF4  319E  269A         	fcall	_CC2500_ReadByte
  9024                           
  9025                           ;CC2500_B1.c: 319: RC0 = 1;
  9026  1FF6  0020               	movlb	0	; select bank0
  9027  1FF7  140E               	bsf	14,0	;volatile
  9028                           
  9029                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9030  1FF8  0021               	movlb	1	; select bank1
  9031  1FF9  0851               	movf	_SPI0Buffer^(0+128),w
  9032  1FFA  0020               	movlb	0	; select bank0
  9033  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  9034  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  9035  1FFD  0021               	movlb	1	; select bank1
  9036  1FFE  00D7               	movwf	_s_data^(0+128)
  9037  1FFF  0008               	return
  9038  2000                     __end_of_CC2500_ReadStatus:	
  9039                           
  9040                           	psect	text40
  9041  1E9A                     __ptext40:	
  9042 ;; *************** function _CC2500_ReadByte *****************
  9043 ;; Defined at:
  9044 ;;		line 242 in file "../src/CC2500_B1.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, status,2, status,0
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;Total ram usage:        2 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    5
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_CC2500_RxData
  9069 ;;		_CC2500_ReadStatus
  9070 ;;		_CC2500_ReadREG
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _CC2500_ReadByte
  9076  1E9A                     _CC2500_ReadByte:	
  9077                           
  9078                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9079                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9083  1E9A  0020               	movlb	0	; select bank0
  9084  1E9B  01A1               	clrf	CC2500_ReadByte@loop_b
  9085  1E9C                     L3:	
  9086  1E9C  3008               	movlw	8
  9087  1E9D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9088  1E9E  1803               	btfsc	3,0
  9089  1E9F  0008               	return
  9090                           
  9091                           ;CC2500_B1.c: 245: RC3 = 1;
  9092  1EA0  158E               	bsf	14,3	;volatile
  9093                           
  9094                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9095  1EA1  1003               	clrc
  9096  1EA2  0021               	movlb	1	; select bank1
  9097  1EA3  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9098                           
  9099                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9100  1EA4  0020               	movlb	0	; select bank0
  9101  1EA5  1E8E               	btfss	14,5	;volatile
  9102  1EA6  2EAA               	goto	l8552
  9103                           
  9104                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9105  1EA7  0021               	movlb	1	; select bank1
  9106  1EA8  1451               	bsf	_SPI0Buffer^(0+128),0
  9107  1EA9  2EB0               	goto	l8554
  9108  1EAA                     l8552:	
  9109                           
  9110                           ;CC2500_B1.c: 249: else
  9111                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9112  1EAA  30FE               	movlw	254
  9113  1EAB  0020               	movlb	0	; select bank0
  9114  1EAC  00A0               	movwf	??_CC2500_ReadByte
  9115  1EAD  0820               	movf	??_CC2500_ReadByte,w
  9116  1EAE  0021               	movlb	1	; select bank1
  9117  1EAF  05D1               	andwf	_SPI0Buffer^(0+128),f
  9118  1EB0                     l8554:	
  9119                           
  9120                           ;CC2500_B1.c: 251: RC3 = 0;
  9121  1EB0  0020               	movlb	0	; select bank0
  9122  1EB1  118E               	bcf	14,3	;volatile
  9123  1EB2  3001               	movlw	1
  9124  1EB3  00A0               	movwf	??_CC2500_ReadByte
  9125  1EB4  0820               	movf	??_CC2500_ReadByte,w
  9126  1EB5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9127  1EB6  2E9C               	goto	L3
  9128  1EB7                     __end_of_CC2500_ReadByte:	
  9129                           
  9130                           	psect	text41
  9131  1D2B                     __ptext41:	
  9132 ;; *************** function _CC2500_PowerOnInitial *****************
  9133 ;; Defined at:
  9134 ;;		line 126 in file "../src/CC2500_B1.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;		None
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;		None
  9139 ;; Return value:  Size  Location     Type
  9140 ;;		None               void
  9141 ;; Registers used:
  9142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        0 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    8
  9155 ;; This function calls:
  9156 ;;		_CC2500_ClearRXFIFO
  9157 ;;		_CC2500_ClearTXFIFO
  9158 ;;		_CC2500_FrequencyCabr
  9159 ;;		_CC2500_InitPATable
  9160 ;;		_CC2500_InitSetREG
  9161 ;;		_CC2500_PowerRST
  9162 ;;		_CC2500_SIDLEMode
  9163 ;; This function is called by:
  9164 ;;		_main
  9165 ;;		_setRF_Main
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           
  9170                           ;psect for function _CC2500_PowerOnInitial
  9171  1D2B                     _CC2500_PowerOnInitial:	
  9172                           
  9173                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9177  1D2B  3188  2002  319D   	fcall	_CC2500_PowerRST
  9178                           
  9179                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9180  1D2E  3190  2068  319D   	fcall	_CC2500_InitSetREG
  9181                           
  9182                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9183  1D31  319E  26F4  319D   	fcall	_CC2500_InitPATable
  9184                           
  9185                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9186  1D34  319A  2251  319D   	fcall	_CC2500_ClearTXFIFO
  9187                           
  9188                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9189  1D37  319A  224D  319D   	fcall	_CC2500_ClearRXFIFO
  9190                           
  9191                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9192  1D3A  319B  2370  319D   	fcall	_CC2500_FrequencyCabr
  9193                           
  9194                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9195  1D3D  319A  2255         	fcall	_CC2500_SIDLEMode
  9196  1D3F  0008               	return
  9197  1D40                     __end_of_CC2500_PowerOnInitial:	
  9198                           
  9199                           	psect	text42
  9200  1A55                     __ptext42:	
  9201 ;; *************** function _CC2500_SIDLEMode *****************
  9202 ;; Defined at:
  9203 ;;		line 216 in file "../src/CC2500_B1.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;		None
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;		None               void
  9210 ;; Registers used:
  9211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        0 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    7
  9224 ;; This function calls:
  9225 ;;		_CC2500_WriteCommand
  9226 ;; This function is called by:
  9227 ;;		_CC2500_PowerOnInitial
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _CC2500_SIDLEMode
  9233  1A55                     _CC2500_SIDLEMode:	
  9234                           
  9235                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9239  1A55  3036               	movlw	54
  9240  1A56  3190  2000         	fcall	_CC2500_WriteCommand
  9241  1A58  0008               	return
  9242  1A59                     __end_of_CC2500_SIDLEMode:	
  9243                           
  9244                           	psect	text43
  9245  0802                     __ptext43:	
  9246 ;; *************** function _CC2500_PowerRST *****************
  9247 ;; Defined at:
  9248 ;;		line 139 in file "../src/CC2500_B1.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;		None               void
  9255 ;; Registers used:
  9256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;Total ram usage:        1 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    6
  9269 ;; This function calls:
  9270 ;;		_CC2500_WriteByte
  9271 ;;		_DelayTime_1us
  9272 ;;		_RF_Timeout_Counter
  9273 ;;		_setRF_TimeoutCleared
  9274 ;; This function is called by:
  9275 ;;		_CC2500_PowerOnInitial
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _CC2500_PowerRST
  9281  0802                     _CC2500_PowerRST:	
  9282                           
  9283                           ;CC2500_B1.c: 140: RC3 = 0;
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9287  0802  0020               	movlb	0	; select bank0
  9288  0803  118E               	bcf	14,3	;volatile
  9289                           
  9290                           ;CC2500_B1.c: 141: RC4 = 0;
  9291  0804  120E               	bcf	14,4	;volatile
  9292                           
  9293                           ;CC2500_B1.c: 142: RC0 = 1;
  9294  0805  140E               	bsf	14,0	;volatile
  9295                           
  9296                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9297  0806  300A               	movlw	10
  9298  0807  00A0               	movwf	DelayTime_1us@count
  9299  0808  3000               	movlw	0
  9300  0809  00A1               	movwf	DelayTime_1us@count+1
  9301  080A  3190  201A  3188   	fcall	_DelayTime_1us
  9302                           
  9303                           ;CC2500_B1.c: 144: RC0 = 0;
  9304  080D  0020               	movlb	0	; select bank0
  9305  080E  100E               	bcf	14,0	;volatile
  9306                           
  9307                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9308  080F  300A               	movlw	10
  9309  0810  00A0               	movwf	DelayTime_1us@count
  9310  0811  3000               	movlw	0
  9311  0812  00A1               	movwf	DelayTime_1us@count+1
  9312  0813  3190  201A  3188   	fcall	_DelayTime_1us
  9313                           
  9314                           ;CC2500_B1.c: 146: RC0 = 1;
  9315  0816  0020               	movlb	0	; select bank0
  9316  0817  140E               	bsf	14,0	;volatile
  9317                           
  9318                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9319  0818  3028               	movlw	40
  9320  0819  00A0               	movwf	DelayTime_1us@count
  9321  081A  3000               	movlw	0
  9322  081B  00A1               	movwf	DelayTime_1us@count+1
  9323  081C  3190  201A  3188   	fcall	_DelayTime_1us
  9324                           
  9325                           ;CC2500_B1.c: 148: RC0 = 0;
  9326  081F  0020               	movlb	0	; select bank0
  9327  0820  100E               	bcf	14,0	;volatile
  9328                           
  9329                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9330  0821  3030               	movlw	48
  9331  0822  00A6               	movwf	??_CC2500_PowerRST
  9332  0823  0826               	movf	??_CC2500_PowerRST,w
  9333  0824  0021               	movlb	1	; select bank1
  9334  0825  00D1               	movwf	_SPI0Buffer^(0+128)
  9335                           
  9336                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9337  0826  282A               	goto	l8610
  9338  0827                     l8608:	
  9339                           
  9340                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9341  0827  319D  2516  3188   	fcall	_RF_Timeout_Counter
  9342  082A                     l8610:	
  9343  082A  0020               	movlb	0	; select bank0
  9344  082B  1E8E               	btfss	14,5	;volatile
  9345  082C  2830               	goto	l8614
  9346  082D  0021               	movlb	1	; select bank1
  9347  082E  1F21               	btfss	(_RF1^(0+128)+1),6
  9348  082F  2827               	goto	l8608
  9349  0830                     l8614:	
  9350                           
  9351                           ;CC2500_B1.c: 152: };
  9352                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9353  0830  319A  2249  3188   	fcall	_setRF_TimeoutCleared
  9354                           
  9355                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9356  0833  319D  25DF  3188   	fcall	_CC2500_WriteByte
  9357                           
  9358                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9359  0836  283A               	goto	l8620
  9360  0837                     l8618:	
  9361                           
  9362                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9363  0837  319D  2516  3188   	fcall	_RF_Timeout_Counter
  9364  083A                     l8620:	
  9365  083A  0020               	movlb	0	; select bank0
  9366  083B  1E8E               	btfss	14,5	;volatile
  9367  083C  2840               	goto	l8624
  9368  083D  0021               	movlb	1	; select bank1
  9369  083E  1F21               	btfss	(_RF1^(0+128)+1),6
  9370  083F  2837               	goto	l8618
  9371  0840                     l8624:	
  9372                           
  9373                           ;CC2500_B1.c: 157: };
  9374                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9375  0840  319A  2249         	fcall	_setRF_TimeoutCleared
  9376                           
  9377                           ;CC2500_B1.c: 159: RC4 = 0;
  9378  0842  0020               	movlb	0	; select bank0
  9379  0843  120E               	bcf	14,4	;volatile
  9380                           
  9381                           ;CC2500_B1.c: 160: RC0 = 1;
  9382  0844  140E               	bsf	14,0	;volatile
  9383  0845  0008               	return
  9384  0846                     __end_of_CC2500_PowerRST:	
  9385                           
  9386                           	psect	text44
  9387  1068                     __ptext44:	
  9388 ;; *************** function _CC2500_InitSetREG *****************
  9389 ;; Defined at:
  9390 ;;		line 166 in file "../src/CC2500_B1.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;		None
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9395 ;;  temp2           1    7[BANK0 ] unsigned char 
  9396 ;;  temp1           1    6[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        4 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    7
  9413 ;; This function calls:
  9414 ;;		_CC2500_WriteREG
  9415 ;; This function is called by:
  9416 ;;		_CC2500_PowerOnInitial
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _CC2500_InitSetREG
  9422  1068                     _CC2500_InitSetREG:	
  9423                           
  9424                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9425                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9426                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9427                           
  9428                           ;incstack = 0
  9429                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9430  1068  0020               	movlb	0	; select bank0
  9431  1069  01A8               	clrf	CC2500_InitSetREG@loop_c
  9432  106A                     L4:	
  9433  106A  302F               	movlw	47
  9434  106B  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9435  106C  1803               	btfsc	3,0
  9436  106D  0008               	return
  9437                           
  9438                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9439  106E  0828               	movf	CC2500_InitSetREG@loop_c,w
  9440  106F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9441  1070  0084               	movwf	4
  9442  1071  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9443  1072  1803               	skipnc
  9444  1073  3E01               	addlw	1
  9445  1074  0085               	movwf	5
  9446  1075  0800               	movf	0,w	;code access
  9447  1076  00A5               	movwf	??_CC2500_InitSetREG
  9448  1077  0825               	movf	??_CC2500_InitSetREG,w
  9449  1078  00A6               	movwf	CC2500_InitSetREG@temp1
  9450                           
  9451                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9452  1079  0828               	movf	CC2500_InitSetREG@loop_c,w
  9453  107A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9454  107B  0084               	movwf	4
  9455  107C  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9456  107D  1803               	skipnc
  9457  107E  3E01               	addlw	1
  9458  107F  0085               	movwf	5
  9459  1080  0800               	movf	0,w	;code access
  9460  1081  00A5               	movwf	??_CC2500_InitSetREG
  9461  1082  0825               	movf	??_CC2500_InitSetREG,w
  9462  1083  00A7               	movwf	CC2500_InitSetREG@temp2
  9463                           
  9464                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9465  1084  0827               	movf	CC2500_InitSetREG@temp2,w
  9466  1085  00A5               	movwf	??_CC2500_InitSetREG
  9467  1086  0825               	movf	??_CC2500_InitSetREG,w
  9468  1087  00A2               	movwf	CC2500_WriteREG@value
  9469  1088  0826               	movf	CC2500_InitSetREG@temp1,w
  9470  1089  319F  27B8  3190   	fcall	_CC2500_WriteREG
  9471  108C  3001               	movlw	1
  9472  108D  0020               	movlb	0	; select bank0
  9473  108E  00A5               	movwf	??_CC2500_InitSetREG
  9474  108F  0825               	movf	??_CC2500_InitSetREG,w
  9475  1090  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9476  1091  286A               	goto	L4
  9477  1092                     __end_of_CC2500_InitSetREG:	
  9478                           
  9479                           	psect	text45
  9480  1EF4                     __ptext45:	
  9481 ;; *************** function _CC2500_InitPATable *****************
  9482 ;; Defined at:
  9483 ;;		line 181 in file "../src/CC2500_B1.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9488 ;;  temp            1    6[BANK0 ] unsigned char 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;		None               void
  9491 ;; Registers used:
  9492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;Total ram usage:        3 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    7
  9505 ;; This function calls:
  9506 ;;		_CC2500_WriteREG
  9507 ;; This function is called by:
  9508 ;;		_CC2500_PowerOnInitial
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           
  9513                           ;psect for function _CC2500_InitPATable
  9514  1EF4                     _CC2500_InitPATable:	
  9515                           
  9516                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9517                           ;CC2500_B1.c: 183: unsigned char temp;
  9518                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9519                           
  9520                           ;incstack = 0
  9521                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9522  1EF4  0020               	movlb	0	; select bank0
  9523  1EF5  01A7               	clrf	CC2500_InitPATable@loop_d
  9524  1EF6                     L5:	
  9525  1EF6  3008               	movlw	8
  9526  1EF7  0227               	subwf	CC2500_InitPATable@loop_d,w
  9527  1EF8  1803               	btfsc	3,0
  9528  1EF9  0008               	return
  9529                           
  9530                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9531  1EFA  0827               	movf	CC2500_InitPATable@loop_d,w
  9532  1EFB  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9533  1EFC  0084               	movwf	4
  9534  1EFD  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9535  1EFE  1803               	skipnc
  9536  1EFF  3E01               	addlw	1
  9537  1F00  0085               	movwf	5
  9538  1F01  0800               	movf	0,w	;code access
  9539  1F02  00A5               	movwf	??_CC2500_InitPATable
  9540  1F03  0825               	movf	??_CC2500_InitPATable,w
  9541  1F04  00A6               	movwf	CC2500_InitPATable@temp
  9542                           
  9543                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9544  1F05  0826               	movf	CC2500_InitPATable@temp,w
  9545  1F06  00A5               	movwf	??_CC2500_InitPATable
  9546  1F07  0825               	movf	??_CC2500_InitPATable,w
  9547  1F08  00A2               	movwf	CC2500_WriteREG@value
  9548  1F09  303E               	movlw	62
  9549  1F0A  319F  27B8  319E   	fcall	_CC2500_WriteREG
  9550  1F0D  3001               	movlw	1
  9551  1F0E  0020               	movlb	0	; select bank0
  9552  1F0F  00A5               	movwf	??_CC2500_InitPATable
  9553  1F10  0825               	movf	??_CC2500_InitPATable,w
  9554  1F11  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9555  1F12  2EF6               	goto	L5
  9556  1F13                     __end_of_CC2500_InitPATable:	
  9557                           
  9558                           	psect	text46
  9559  1FB8                     __ptext46:	
  9560 ;; *************** function _CC2500_WriteREG *****************
  9561 ;; Defined at:
  9562 ;;		line 258 in file "../src/CC2500_B1.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  w_addr          1    wreg     unsigned char 
  9565 ;;  value           1    2[BANK0 ] unsigned char 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9568 ;; Return value:  Size  Location     Type
  9569 ;;		None               void
  9570 ;; Registers used:
  9571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;Total ram usage:        3 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:    6
  9584 ;; This function calls:
  9585 ;;		_CC2500_WriteByte
  9586 ;;		_RF_Timeout_Counter
  9587 ;;		_setRF_TimeoutCleared
  9588 ;; This function is called by:
  9589 ;;		_CC2500_InitSetREG
  9590 ;;		_CC2500_InitPATable
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           
  9595                           ;psect for function _CC2500_WriteREG
  9596  1FB8                     _CC2500_WriteREG:	
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9600                           ;CC2500_WriteREG@w_addr stored from wreg
  9601  1FB8  0020               	movlb	0	; select bank0
  9602  1FB9  00A4               	movwf	CC2500_WriteREG@w_addr
  9603                           
  9604                           ;CC2500_B1.c: 259: RC0 = 0;
  9605  1FBA  100E               	bcf	14,0	;volatile
  9606                           
  9607                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9608  1FBB  0824               	movf	CC2500_WriteREG@w_addr,w
  9609  1FBC  00A3               	movwf	??_CC2500_WriteREG
  9610  1FBD  0823               	movf	??_CC2500_WriteREG,w
  9611  1FBE  0021               	movlb	1	; select bank1
  9612  1FBF  00D1               	movwf	_SPI0Buffer^(0+128)
  9613                           
  9614                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9615  1FC0  2FC4               	goto	l8564
  9616  1FC1                     l8562:	
  9617                           
  9618                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9619  1FC1  319D  2516  319F   	fcall	_RF_Timeout_Counter
  9620  1FC4                     l8564:	
  9621  1FC4  0020               	movlb	0	; select bank0
  9622  1FC5  1E8E               	btfss	14,5	;volatile
  9623  1FC6  2FCA               	goto	l8568
  9624  1FC7  0021               	movlb	1	; select bank1
  9625  1FC8  1F21               	btfss	(_RF1^(0+128)+1),6
  9626  1FC9  2FC1               	goto	l8562
  9627  1FCA                     l8568:	
  9628                           
  9629                           ;CC2500_B1.c: 263: };
  9630                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9631  1FCA  319A  2249  319F   	fcall	_setRF_TimeoutCleared
  9632                           
  9633                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9634  1FCD  319D  25DF  319F   	fcall	_CC2500_WriteByte
  9635                           
  9636                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9637  1FD0  0020               	movlb	0	; select bank0
  9638  1FD1  0822               	movf	CC2500_WriteREG@value,w
  9639  1FD2  00A3               	movwf	??_CC2500_WriteREG
  9640  1FD3  0823               	movf	??_CC2500_WriteREG,w
  9641  1FD4  0021               	movlb	1	; select bank1
  9642  1FD5  00D1               	movwf	_SPI0Buffer^(0+128)
  9643                           
  9644                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9645  1FD6  319D  25DF         	fcall	_CC2500_WriteByte
  9646                           
  9647                           ;CC2500_B1.c: 269: RC0 = 1;
  9648  1FD8  0020               	movlb	0	; select bank0
  9649  1FD9  140E               	bsf	14,0	;volatile
  9650  1FDA  0008               	return
  9651  1FDB                     __end_of_CC2500_WriteREG:	
  9652                           
  9653                           	psect	text47
  9654  1B70                     __ptext47:	
  9655 ;; *************** function _CC2500_FrequencyCabr *****************
  9656 ;; Defined at:
  9657 ;;		line 208 in file "../src/CC2500_B1.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;		None
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;		None
  9662 ;; Return value:  Size  Location     Type
  9663 ;;		None               void
  9664 ;; Registers used:
  9665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;Total ram usage:        0 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    7
  9678 ;; This function calls:
  9679 ;;		_CC2500_WriteCommand
  9680 ;;		_DelayTime_1us
  9681 ;; This function is called by:
  9682 ;;		_CC2500_PowerOnInitial
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _CC2500_FrequencyCabr
  9688  1B70                     _CC2500_FrequencyCabr:	
  9689                           
  9690                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9694  1B70  3033               	movlw	51
  9695  1B71  3190  2000  319B   	fcall	_CC2500_WriteCommand
  9696                           
  9697                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9698  1B74  30E8               	movlw	232
  9699  1B75  0020               	movlb	0	; select bank0
  9700  1B76  00A0               	movwf	DelayTime_1us@count
  9701  1B77  3003               	movlw	3
  9702  1B78  00A1               	movwf	DelayTime_1us@count+1
  9703  1B79  3190  201A         	fcall	_DelayTime_1us
  9704  1B7B  0008               	return
  9705  1B7C                     __end_of_CC2500_FrequencyCabr:	
  9706                           
  9707                           	psect	text48
  9708  101A                     __ptext48:	
  9709 ;; *************** function _DelayTime_1us *****************
  9710 ;; Defined at:
  9711 ;;		line 327 in file "../src/CC2500_B1.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  count           2    0[BANK0 ] int 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  j               2    4[BANK0 ] unsigned int 
  9716 ;;  i               2    2[BANK0 ] unsigned int 
  9717 ;; Return value:  Size  Location     Type
  9718 ;;		None               void
  9719 ;; Registers used:
  9720 ;;		wreg, status,2
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        6 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    5
  9733 ;; This function calls:
  9734 ;;		Nothing
  9735 ;; This function is called by:
  9736 ;;		_CC2500_PowerRST
  9737 ;;		_CC2500_FrequencyCabr
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _DelayTime_1us
  9743  101A                     _DelayTime_1us:	
  9744                           
  9745                           ;CC2500_B1.c: 328: unsigned int i, j;
  9746                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9747                           
  9748                           ;incstack = 0
  9749                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9750  101A  3001               	movlw	1
  9751  101B  0020               	movlb	0	; select bank0
  9752  101C  00A2               	movwf	DelayTime_1us@i
  9753  101D  3000               	movlw	0
  9754  101E  00A3               	movwf	DelayTime_1us@i+1
  9755  101F                     l347:	
  9756  101F  0821               	movf	DelayTime_1us@count+1,w
  9757  1020  0223               	subwf	DelayTime_1us@i+1,w
  9758  1021  1D03               	skipz
  9759  1022  2825               	goto	u5515
  9760  1023  0820               	movf	DelayTime_1us@count,w
  9761  1024  0222               	subwf	DelayTime_1us@i,w
  9762  1025                     u5515:	
  9763  1025  1803               	btfsc	3,0
  9764  1026  0008               	return
  9765                           
  9766                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9767  1027  01A4               	clrf	DelayTime_1us@j
  9768  1028  01A5               	clrf	DelayTime_1us@j+1
  9769  1029  3000               	movlw	0
  9770  102A  0225               	subwf	DelayTime_1us@j+1,w
  9771  102B  3002               	movlw	2
  9772  102C  1903               	skipnz
  9773  102D  0224               	subwf	DelayTime_1us@j,w
  9774  102E  1803               	btfsc	3,0
  9775  102F  283B               	goto	l6384
  9776  1030                     l6382:	
  9777  1030  3001               	movlw	1
  9778  1031  07A4               	addwf	DelayTime_1us@j,f
  9779  1032  3000               	movlw	0
  9780  1033  3DA5               	addwfc	DelayTime_1us@j+1,f
  9781  1034  3000               	movlw	0
  9782  1035  0225               	subwf	DelayTime_1us@j+1,w
  9783  1036  3002               	movlw	2
  9784  1037  1903               	skipnz
  9785  1038  0224               	subwf	DelayTime_1us@j,w
  9786  1039  1C03               	skipc
  9787  103A  2830               	goto	l6382
  9788  103B                     l6384:	
  9789  103B  3001               	movlw	1
  9790  103C  07A2               	addwf	DelayTime_1us@i,f
  9791  103D  3000               	movlw	0
  9792  103E  3DA3               	addwfc	DelayTime_1us@i+1,f
  9793  103F  281F               	goto	l347
  9794  1040                     __end_of_DelayTime_1us:	
  9795                           
  9796                           	psect	text49
  9797  1A51                     __ptext49:	
  9798 ;; *************** function _CC2500_ClearTXFIFO *****************
  9799 ;; Defined at:
  9800 ;;		line 194 in file "../src/CC2500_B1.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;		None               void
  9807 ;; Registers used:
  9808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;Total ram usage:        0 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    7
  9821 ;; This function calls:
  9822 ;;		_CC2500_WriteCommand
  9823 ;; This function is called by:
  9824 ;;		_CC2500_PowerOnInitial
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           
  9829                           ;psect for function _CC2500_ClearTXFIFO
  9830  1A51                     _CC2500_ClearTXFIFO:	
  9831                           
  9832                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9836  1A51  303B               	movlw	59
  9837  1A52  3190  2000         	fcall	_CC2500_WriteCommand
  9838  1A54  0008               	return
  9839  1A55                     __end_of_CC2500_ClearTXFIFO:	
  9840                           
  9841                           	psect	text50
  9842  1A4D                     __ptext50:	
  9843 ;; *************** function _CC2500_ClearRXFIFO *****************
  9844 ;; Defined at:
  9845 ;;		line 201 in file "../src/CC2500_B1.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;		None
  9850 ;; Return value:  Size  Location     Type
  9851 ;;		None               void
  9852 ;; Registers used:
  9853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;Total ram usage:        0 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    7
  9866 ;; This function calls:
  9867 ;;		_CC2500_WriteCommand
  9868 ;; This function is called by:
  9869 ;;		_CC2500_PowerOnInitial
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           
  9874                           ;psect for function _CC2500_ClearRXFIFO
  9875  1A4D                     _CC2500_ClearRXFIFO:	
  9876                           
  9877                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9881  1A4D  303A               	movlw	58
  9882  1A4E  3190  2000         	fcall	_CC2500_WriteCommand
  9883  1A50  0008               	return
  9884  1A51                     __end_of_CC2500_ClearRXFIFO:	
  9885                           
  9886                           	psect	text51
  9887  1000                     __ptext51:	
  9888 ;; *************** function _CC2500_WriteCommand *****************
  9889 ;; Defined at:
  9890 ;;		line 292 in file "../src/CC2500_B1.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;  command         1    wreg     unsigned char 
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;  command         1    3[BANK0 ] unsigned char 
  9895 ;; Return value:  Size  Location     Type
  9896 ;;		None               void
  9897 ;; Registers used:
  9898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        2 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:    6
  9911 ;; This function calls:
  9912 ;;		_CC2500_WriteByte
  9913 ;;		_RF_Timeout_Counter
  9914 ;;		_setRF_TimeoutCleared
  9915 ;; This function is called by:
  9916 ;;		_CC2500_TxData
  9917 ;;		_CC2500_RxData
  9918 ;;		_CC2500_ClearTXFIFO
  9919 ;;		_CC2500_ClearRXFIFO
  9920 ;;		_CC2500_FrequencyCabr
  9921 ;;		_CC2500_SIDLEMode
  9922 ;;		_setRF_Main
  9923 ;;		_RF_RxDisable
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function _CC2500_WriteCommand
  9929  1000                     _CC2500_WriteCommand:	
  9930                           
  9931                           ;incstack = 0
  9932                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9933                           ;CC2500_WriteCommand@command stored from wreg
  9934  1000  0020               	movlb	0	; select bank0
  9935  1001  00A3               	movwf	CC2500_WriteCommand@command
  9936                           
  9937                           ;CC2500_B1.c: 293: RC0 = 0;
  9938  1002  100E               	bcf	14,0	;volatile
  9939                           
  9940                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9941  1003  0823               	movf	CC2500_WriteCommand@command,w
  9942  1004  00A2               	movwf	??_CC2500_WriteCommand
  9943  1005  0822               	movf	??_CC2500_WriteCommand,w
  9944  1006  0021               	movlb	1	; select bank1
  9945  1007  00D1               	movwf	_SPI0Buffer^(0+128)
  9946                           
  9947                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9948  1008  280C               	goto	l8530
  9949  1009                     l8528:	
  9950                           
  9951                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9952  1009  319D  2516  3190   	fcall	_RF_Timeout_Counter
  9953  100C                     l8530:	
  9954  100C  0020               	movlb	0	; select bank0
  9955  100D  1E8E               	btfss	14,5	;volatile
  9956  100E  2812               	goto	l8534
  9957  100F  0021               	movlb	1	; select bank1
  9958  1010  1F21               	btfss	(_RF1^(0+128)+1),6
  9959  1011  2809               	goto	l8528
  9960  1012                     l8534:	
  9961                           
  9962                           ;CC2500_B1.c: 298: };
  9963                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9964  1012  319A  2249  3190   	fcall	_setRF_TimeoutCleared
  9965                           
  9966                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9967  1015  319D  25DF         	fcall	_CC2500_WriteByte
  9968                           
  9969                           ;CC2500_B1.c: 302: RC0 = 1;
  9970  1017  0020               	movlb	0	; select bank0
  9971  1018  140E               	bsf	14,0	;volatile
  9972  1019  0008               	return
  9973  101A                     __end_of_CC2500_WriteCommand:	
  9974                           
  9975                           	psect	text52
  9976  1A49                     __ptext52:	
  9977 ;; *************** function _setRF_TimeoutCleared *****************
  9978 ;; Defined at:
  9979 ;;		line 149 in file "../src/RF_Control_B1.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;		None               void
  9986 ;; Registers used:
  9987 ;;		status,2
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:        0 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    5
 10000 ;; This function calls:
 10001 ;;		Nothing
 10002 ;; This function is called by:
 10003 ;;		_CC2500_TxData
 10004 ;;		_CC2500_RxData
 10005 ;;		_CC2500_PowerRST
 10006 ;;		_CC2500_WriteREG
 10007 ;;		_CC2500_WriteCommand
 10008 ;;		_CC2500_ReadStatus
 10009 ;;		_CC2500_ReadREG
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _setRF_TimeoutCleared
 10015  1A49                     _setRF_TimeoutCleared:	
 10016                           
 10017                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10021  1A49  0021               	movlb	1	; select bank1
 10022  1A4A  01AD               	clrf	(_RF1^(0+128)+13)
 10023  1A4B  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10024  1A4C  0008               	return
 10025  1A4D                     __end_of_setRF_TimeoutCleared:	
 10026                           
 10027                           	psect	text53
 10028  1D16                     __ptext53:	
 10029 ;; *************** function _RF_Timeout_Counter *****************
 10030 ;; Defined at:
 10031 ;;		line 141 in file "../src/RF_Control_B1.c"
 10032 ;; Parameters:    Size  Location     Type
 10033 ;;		None
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;		None
 10036 ;; Return value:  Size  Location     Type
 10037 ;;		None               void
 10038 ;; Registers used:
 10039 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10040 ;; Tracked objects:
 10041 ;;		On entry : 0/0
 10042 ;;		On exit  : 0/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;Total ram usage:        0 bytes
 10050 ;; Hardware stack levels used:    1
 10051 ;; Hardware stack levels required when called:    5
 10052 ;; This function calls:
 10053 ;;		Nothing
 10054 ;; This function is called by:
 10055 ;;		_CC2500_TxData
 10056 ;;		_CC2500_RxData
 10057 ;;		_CC2500_PowerRST
 10058 ;;		_CC2500_WriteREG
 10059 ;;		_CC2500_WriteCommand
 10060 ;;		_CC2500_ReadStatus
 10061 ;;		_CC2500_ReadREG
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function _RF_Timeout_Counter
 10067  1D16                     _RF_Timeout_Counter:	
 10068                           
 10069                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10070                           
 10071                           ;incstack = 0
 10072                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10073  1D16  3001               	movlw	1
 10074  1D17  0021               	movlb	1	; select bank1
 10075  1D18  07AD               	addwf	(_RF1^(0+128)+13),f
 10076  1D19  3000               	movlw	0
 10077  1D1A  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10078                           
 10079                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10080  1D1B  300D               	movlw	13
 10081  1D1C  3EA0               	addlw	_RF1& (0+255)
 10082  1D1D  0086               	movwf	6
 10083  1D1E  0187               	clrf	7
 10084  1D1F  3F40               	moviw [0]fsr1
 10085  1D20  3AA8               	xorlw	168
 10086  1D21  1D03               	skipz
 10087  1D22  2D25               	goto	u8795
 10088  1D23  3F41               	moviw [1]fsr1
 10089  1D24  3A61               	xorlw	97
 10090  1D25                     u8795:	
 10091  1D25  1D03               	skipz
 10092  1D26  0008               	return
 10093                           
 10094                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10095  1D27  01AD               	clrf	(_RF1^(0+128)+13)
 10096  1D28  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10097                           
 10098                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10099  1D29  1721               	bsf	(_RF1^(0+128)+1),6
 10100  1D2A  0008               	return
 10101  1D2B                     __end_of_RF_Timeout_Counter:	
 10102                           
 10103                           	psect	text54
 10104  1DDF                     __ptext54:	
 10105 ;; *************** function _CC2500_WriteByte *****************
 10106 ;; Defined at:
 10107 ;;		line 226 in file "../src/CC2500_B1.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10112 ;; Return value:  Size  Location     Type
 10113 ;;		None               void
 10114 ;; Registers used:
 10115 ;;		wreg, status,2, status,0
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;Total ram usage:        2 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    5
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_CC2500_TxData
 10132 ;;		_CC2500_RxData
 10133 ;;		_CC2500_PowerRST
 10134 ;;		_CC2500_WriteREG
 10135 ;;		_CC2500_WriteCommand
 10136 ;;		_CC2500_ReadStatus
 10137 ;;		_CC2500_ReadREG
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           
 10142                           ;psect for function _CC2500_WriteByte
 10143  1DDF                     _CC2500_WriteByte:	
 10144                           
 10145                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10146                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10150  1DDF  0020               	movlb	0	; select bank0
 10151  1DE0  01A1               	clrf	CC2500_WriteByte@loop_a
 10152  1DE1                     L6:	
 10153  1DE1  3008               	movlw	8
 10154  1DE2  0221               	subwf	CC2500_WriteByte@loop_a,w
 10155  1DE3  1803               	btfsc	3,0
 10156  1DE4  0008               	return
 10157                           
 10158                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10159  1DE5  0021               	movlb	1	; select bank1
 10160  1DE6  1FD1               	btfss	_SPI0Buffer^(0+128),7
 10161  1DE7  2DEB               	goto	l303
 10162                           
 10163                           ;CC2500_B1.c: 230: RC4 = 1;
 10164  1DE8  0020               	movlb	0	; select bank0
 10165  1DE9  160E               	bsf	14,4	;volatile
 10166  1DEA  2DED               	goto	l304
 10167  1DEB                     l303:	
 10168                           
 10169                           ;CC2500_B1.c: 231: else
 10170                           ;CC2500_B1.c: 232: RC4 = 0;
 10171  1DEB  0020               	movlb	0	; select bank0
 10172  1DEC  120E               	bcf	14,4	;volatile
 10173  1DED                     l304:	
 10174                           
 10175                           ;CC2500_B1.c: 233: RC3 = 1;
 10176  1DED  158E               	bsf	14,3	;volatile
 10177                           
 10178                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10179  1DEE  1003               	clrc
 10180  1DEF  0021               	movlb	1	; select bank1
 10181  1DF0  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10182                           
 10183                           ;CC2500_B1.c: 235: RC3 = 0;
 10184  1DF1  0020               	movlb	0	; select bank0
 10185  1DF2  118E               	bcf	14,3	;volatile
 10186  1DF3  3001               	movlw	1
 10187  1DF4  00A0               	movwf	??_CC2500_WriteByte
 10188  1DF5  0820               	movf	??_CC2500_WriteByte,w
 10189  1DF6  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10190  1DF7  2DE1               	goto	L6
 10191  1DF8                     __end_of_CC2500_WriteByte:	
 10192                           
 10193                           	psect	text55
 10194  1A29                     __ptext55:	
 10195 ;; *************** function _RF_Initialization *****************
 10196 ;; Defined at:
 10197 ;;		line 9 in file "../src/RF_Control_B1.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;		None
 10202 ;; Return value:  Size  Location     Type
 10203 ;;		None               void
 10204 ;; Registers used:
 10205 ;;		wreg, status,2, status,0, pclath, cstack
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;Total ram usage:        0 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    6
 10218 ;; This function calls:
 10219 ;;		_setRF_Initialization
 10220 ;; This function is called by:
 10221 ;;		_main
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           
 10226                           ;psect for function _RF_Initialization
 10227  1A29                     _RF_Initialization:	
 10228                           
 10229                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10230                           
 10231                           ;incstack = 0
 10232                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10233  1A29  319A  22ED         	fcall	_setRF_Initialization
 10234  1A2B  0008               	return
 10235  1A2C                     __end_of_RF_Initialization:	
 10236                           
 10237                           	psect	text56
 10238  1AED                     __ptext56:	
 10239 ;; *************** function _setRF_Initialization *****************
 10240 ;; Defined at:
 10241 ;;		line 17 in file "../src/RF_Control_B1.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;		None
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;		None
 10246 ;; Return value:  Size  Location     Type
 10247 ;;		None               void
 10248 ;; Registers used:
 10249 ;;		wreg
 10250 ;; Tracked objects:
 10251 ;;		On entry : 0/0
 10252 ;;		On exit  : 0/0
 10253 ;;		Unchanged: 0/0
 10254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;Total ram usage:        1 bytes
 10260 ;; Hardware stack levels used:    1
 10261 ;; Hardware stack levels required when called:    5
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_RF_Initialization
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           
 10270                           ;psect for function _setRF_Initialization
 10271  1AED                     _setRF_Initialization:	
 10272                           
 10273                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10274                           
 10275                           ;incstack = 0
 10276                           ; Regs used in _setRF_Initialization: [wreg]
 10277  1AED  3015               	movlw	21
 10278  1AEE  0020               	movlb	0	; select bank0
 10279  1AEF  00A0               	movwf	??_setRF_Initialization
 10280  1AF0  0820               	movf	??_setRF_Initialization,w
 10281  1AF1  0021               	movlb	1	; select bank1
 10282  1AF2  00D4               	movwf	_Tx_Length^(0+128)
 10283                           
 10284                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10285  1AF3  30C8               	movlw	200
 10286  1AF4  00A8               	movwf	(_RF1^(0+128)+8)
 10287  1AF5  3000               	movlw	0
 10288  1AF6  00A9               	movwf	(_RF1^(0+128)+9)
 10289  1AF7  0008               	return
 10290  1AF8                     __end_of_setRF_Initialization:	
 10291                           
 10292                           	psect	text57
 10293  1C7F                     __ptext57:	
 10294 ;; *************** function _Mcu_Initialization *****************
 10295 ;; Defined at:
 10296 ;;		line 30 in file "../src/MCU_B1.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;		None
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;		None
 10301 ;; Return value:  Size  Location     Type
 10302 ;;		None               void
 10303 ;; Registers used:
 10304 ;;		wreg, status,2, status,0, pclath, cstack
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;Total ram usage:        0 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    6
 10317 ;; This function calls:
 10318 ;;		_ADC_Set
 10319 ;;		_Fosc_Set
 10320 ;;		_IOC_Set
 10321 ;;		_IO_Set
 10322 ;;		_TMR1_Set
 10323 ;;		_WDT_Set
 10324 ;; This function is called by:
 10325 ;;		_main
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           
 10330                           ;psect for function _Mcu_Initialization
 10331  1C7F                     _Mcu_Initialization:	
 10332                           
 10333                           ;MCU_B1.c: 32: Fosc_Set();
 10334                           
 10335                           ;incstack = 0
 10336                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10337  1C7F  319A  2245  319C   	fcall	_Fosc_Set
 10338                           
 10339                           ;MCU_B1.c: 34: IO_Set();
 10340  1C82  319E  2612  319C   	fcall	_IO_Set
 10341                           
 10342                           ;MCU_B1.c: 36: ;;
 10343                           ;MCU_B1.c: 38: TMR1_Set();
 10344  1C85  319B  2358  319C   	fcall	_TMR1_Set
 10345                           
 10346                           ;MCU_B1.c: 40: ADC_Set();
 10347  1C88  319A  2281  319C   	fcall	_ADC_Set
 10348                           
 10349                           ;MCU_B1.c: 42: ;;
 10350                           ;MCU_B1.c: 44: ;;
 10351                           ;MCU_B1.c: 46: IOC_Set();
 10352  1C8B  319A  22E2  319C   	fcall	_IOC_Set
 10353                           
 10354                           ;MCU_B1.c: 48: ;;
 10355                           ;MCU_B1.c: 50: ;;
 10356                           ;MCU_B1.c: 52: WDT_Set();
 10357  1C8E  319B  2364         	fcall	_WDT_Set
 10358  1C90  0008               	return
 10359  1C91                     __end_of_Mcu_Initialization:	
 10360                           
 10361                           	psect	text58
 10362  1B64                     __ptext58:	
 10363 ;; *************** function _WDT_Set *****************
 10364 ;; Defined at:
 10365 ;;		line 1102 in file "../src/MCU_B1.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;		None
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;		None
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;Total ram usage:        1 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; Hardware stack levels required when called:    5
 10386 ;; This function calls:
 10387 ;;		Nothing
 10388 ;; This function is called by:
 10389 ;;		_Mcu_Initialization
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _WDT_Set
 10395  1B64                     _WDT_Set:	
 10396                           
 10397                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _WDT_Set: [wreg]
 10401  1B64  3017               	movlw	23
 10402  1B65  0021               	movlb	1	; select bank1
 10403  1B66  0097               	movwf	23	;volatile
 10404                           
 10405                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10406  1B67  0022               	movlb	2	; select bank2
 10407  1B68  1436               	bsf	_WDT^(0+256),0
 10408                           
 10409                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10410  1B69  300A               	movlw	10
 10411  1B6A  0020               	movlb	0	; select bank0
 10412  1B6B  00A0               	movwf	??_WDT_Set
 10413  1B6C  0820               	movf	??_WDT_Set,w
 10414  1B6D  0022               	movlb	2	; select bank2
 10415  1B6E  00B7               	movwf	(_WDT^(0+256)+1)
 10416  1B6F  0008               	return
 10417  1B70                     __end_of_WDT_Set:	
 10418                           
 10419                           	psect	text59
 10420  1B58                     __ptext59:	
 10421 ;; *************** function _TMR1_Set *****************
 10422 ;; Defined at:
 10423 ;;		line 226 in file "../src/MCU_B1.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;Total ram usage:        0 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    5
 10444 ;; This function calls:
 10445 ;;		Nothing
 10446 ;; This function is called by:
 10447 ;;		_Mcu_Initialization
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _TMR1_Set
 10453  1B58                     _TMR1_Set:	
 10454                           
 10455                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _TMR1_Set: [wreg]
 10459  1B58  3041               	movlw	65
 10460  1B59  0020               	movlb	0	; select bank0
 10461  1B5A  0098               	movwf	24	;volatile
 10462                           
 10463                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10464  1B5B  30FA               	movlw	250
 10465  1B5C  0097               	movwf	23	;volatile
 10466                           
 10467                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10468  1B5D  3038               	movlw	56
 10469  1B5E  0096               	movwf	22	;volatile
 10470                           
 10471                           ;MCU_B1.c: 230: TMR1IE = 1;
 10472  1B5F  0021               	movlb	1	; select bank1
 10473  1B60  1411               	bsf	17,0	;volatile
 10474                           
 10475                           ;MCU_B1.c: 231: PEIE = 1;
 10476  1B61  170B               	bsf	11,6	;volatile
 10477                           
 10478                           ;MCU_B1.c: 232: GIE = 1;
 10479  1B62  178B               	bsf	11,7	;volatile
 10480  1B63  0008               	return
 10481  1B64                     __end_of_TMR1_Set:	
 10482                           
 10483                           	psect	text60
 10484  1E12                     __ptext60:	
 10485 ;; *************** function _IO_Set *****************
 10486 ;; Defined at:
 10487 ;;		line 60 in file "../src/MCU_B1.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;		None
 10492 ;; Return value:  Size  Location     Type
 10493 ;;		None               void
 10494 ;; Registers used:
 10495 ;;		wreg, status,2
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        0 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    5
 10508 ;; This function calls:
 10509 ;;		Nothing
 10510 ;; This function is called by:
 10511 ;;		_Mcu_Initialization
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           
 10516                           ;psect for function _IO_Set
 10517  1E12                     _IO_Set:	
 10518                           
 10519                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _IO_Set: [wreg+status,2]
 10523  1E12  30F7               	movlw	247
 10524  1E13  0021               	movlb	1	; select bank1
 10525  1E14  008C               	movwf	12	;volatile
 10526                           
 10527                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10528  1E15  3004               	movlw	4
 10529  1E16  008D               	movwf	13	;volatile
 10530                           
 10531                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10532  1E17  3026               	movlw	38
 10533  1E18  008E               	movwf	14	;volatile
 10534                           
 10535                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10536  1E19  0022               	movlb	2	; select bank2
 10537  1E1A  018C               	clrf	12	;volatile
 10538                           
 10539                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10540  1E1B  018D               	clrf	13	;volatile
 10541                           
 10542                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10543  1E1C  018E               	clrf	14	;volatile
 10544                           
 10545                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10546  1E1D  300E               	movlw	14
 10547  1E1E  0023               	movlb	3	; select bank3
 10548  1E1F  008C               	movwf	12	;volatile
 10549                           
 10550                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10551  1E20  018D               	clrf	13	;volatile
 10552                           
 10553                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10554  1E21  018E               	clrf	14	;volatile
 10555                           
 10556                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10557  1E22  30F7               	movlw	247
 10558  1E23  0020               	movlb	0	; select bank0
 10559  1E24  008C               	movwf	12	;volatile
 10560                           
 10561                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10562  1E25  3004               	movlw	4
 10563  1E26  008D               	movwf	13	;volatile
 10564                           
 10565                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10566  1E27  3026               	movlw	38
 10567  1E28  008E               	movwf	14	;volatile
 10568                           
 10569                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10570  1E29  0024               	movlb	4	; select bank4
 10571  1E2A  018D               	clrf	13	;volatile
 10572  1E2B  0008               	return
 10573  1E2C                     __end_of_IO_Set:	
 10574                           
 10575                           	psect	text61
 10576  1AE2                     __ptext61:	
 10577 ;; *************** function _IOC_Set *****************
 10578 ;; Defined at:
 10579 ;;		line 380 in file "../src/MCU_B1.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;		None               void
 10586 ;; Registers used:
 10587 ;;		wreg, status,2
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;Total ram usage:        0 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    5
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_Mcu_Initialization
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _IOC_Set
 10609  1AE2                     _IOC_Set:	
 10610                           
 10611                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _IOC_Set: [wreg+status,2]
 10615  1AE2  3004               	movlw	4
 10616  1AE3  0027               	movlb	7	; select bank7
 10617  1AE4  0094               	movwf	20	;volatile
 10618                           
 10619                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10620  1AE5  3004               	movlw	4
 10621  1AE6  0095               	movwf	21	;volatile
 10622                           
 10623                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10624  1AE7  0196               	clrf	22	;volatile
 10625                           
 10626                           ;MCU_B1.c: 387: IOCIE = 1;
 10627  1AE8  158B               	bsf	11,3	;volatile
 10628                           
 10629                           ;MCU_B1.c: 388: IOCIF = 0;
 10630  1AE9  100B               	bcf	11,0	;volatile
 10631                           
 10632                           ;MCU_B1.c: 389: PEIE = 1;
 10633  1AEA  170B               	bsf	11,6	;volatile
 10634                           
 10635                           ;MCU_B1.c: 390: GIE = 1;
 10636  1AEB  178B               	bsf	11,7	;volatile
 10637  1AEC  0008               	return
 10638  1AED                     __end_of_IOC_Set:	
 10639                           
 10640                           	psect	text62
 10641  1A45                     __ptext62:	
 10642 ;; *************** function _Fosc_Set *****************
 10643 ;; Defined at:
 10644 ;;		line 56 in file "../src/MCU_B1.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;		None               void
 10651 ;; Registers used:
 10652 ;;		wreg
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    5
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_Mcu_Initialization
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function _Fosc_Set
 10674  1A45                     _Fosc_Set:	
 10675                           
 10676                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _Fosc_Set: [wreg]
 10680  1A45  3078               	movlw	120
 10681  1A46  0021               	movlb	1	; select bank1
 10682  1A47  0099               	movwf	25	;volatile
 10683  1A48  0008               	return
 10684  1A49                     __end_of_Fosc_Set:	
 10685                           
 10686                           	psect	text63
 10687  1A81                     __ptext63:	
 10688 ;; *************** function _ADC_Set *****************
 10689 ;; Defined at:
 10690 ;;		line 427 in file "../src/MCU_B1.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;		None               void
 10697 ;; Registers used:
 10698 ;;		wreg
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:        0 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    5
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_Mcu_Initialization
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function _ADC_Set
 10720  1A81                     _ADC_Set:	
 10721                           
 10722                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _ADC_Set: [wreg]
 10726  1A81  30F3               	movlw	243
 10727  1A82  0021               	movlb	1	; select bank1
 10728  1A83  009E               	movwf	30	;volatile
 10729                           
 10730                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10731  1A84  30C1               	movlw	193
 10732  1A85  0022               	movlb	2	; select bank2
 10733  1A86  0097               	movwf	23	;volatile
 10734  1A87  0008               	return
 10735  1A88                     __end_of_ADC_Set:	
 10736                           
 10737                           	psect	text64
 10738  0053                     __ptext64:	
 10739 ;; *************** function _Load_Main *****************
 10740 ;; Defined at:
 10741 ;;		line 40 in file "../src/OverLoad_B1.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;		None
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;  i               2   16[BANK0 ] int 
 10746 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10747 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10748 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10749 ;;  error           1   12[BANK0 ] unsigned char 
 10750 ;; Return value:  Size  Location     Type
 10751 ;;		None               void
 10752 ;; Registers used:
 10753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10754 ;; Tracked objects:
 10755 ;;		On entry : 0/0
 10756 ;;		On exit  : 0/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;Total ram usage:       10 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    6
 10766 ;; This function calls:
 10767 ;;		___lwdiv
 10768 ;;		___wmul
 10769 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10770 ;;		_getDimmer_LoadGO
 10771 ;;		_getDimmer_Load_Status
 10772 ;;		_getMain_All_Error_Status
 10773 ;;		_getMain_All_LightsStatus
 10774 ;;		_getMain_Lights_Count
 10775 ;;		_setLoad_AH_AL_Restore
 10776 ;; This function is called by:
 10777 ;;		_main
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _Load_Main
 10783  0053                     _Load_Main:	
 10784                           
 10785                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10786                           
 10787                           ;incstack = 0
 10788                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10789  0053  3000               	movlw	0
 10790  0054  3190  20C1  3180   	fcall	_getMain_All_Error_Status
 10791  0057  0020               	movlb	0	; select bank0
 10792  0058  00A8               	movwf	??_Load_Main
 10793  0059  0828               	movf	??_Load_Main,w
 10794  005A  00AC               	movwf	Load_Main@error
 10795                           
 10796                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10797  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10798  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10799  005D  01AF               	clrf	Load_Main@LightsCount
 10800                           
 10801                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10802  005E  0022               	movlb	2	; select bank2
 10803  005F  1C38               	btfss	_Load^(0+256),0
 10804  0060  29FF               	goto	l1627
 10805                           
 10806                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10807  0061  319A  22C2  3180   	fcall	_getMain_All_LightsStatus
 10808  0064  3800               	iorlw	0
 10809  0065  1D03               	skipz
 10810  0066  2869               	goto	l8124
 10811                           
 10812                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10813  0067  0022               	movlb	2	; select bank2
 10814  0068  288A               	goto	l8142
 10815  0069                     l8124:	
 10816                           ;OverLoad_B1.c: 47: } else {
 10817                           
 10818                           
 10819                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10820  0069  0020               	movlb	0	; select bank0
 10821  006A  08AC               	movf	Load_Main@error,f
 10822  006B  1D03               	skipz
 10823  006C  2887               	goto	l1630
 10824  006D  319C  24C9  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10825  0070  3800               	iorlw	0
 10826  0071  1D03               	skipz
 10827  0072  2887               	goto	l1630
 10828                           
 10829                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10830  0073  0022               	movlb	2	; select bank2
 10831  0074  14B8               	bsf	_Load^(0+256),1
 10832                           
 10833                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10834  0075  319A  2297  3180   	fcall	_getDimmer_LoadGO
 10835  0078  3A01               	xorlw	1
 10836  0079  1D03               	skipz
 10837  007A  2882               	goto	l1631
 10838                           
 10839                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10840  007B  0022               	movlb	2	; select bank2
 10841  007C  1DB8               	btfss	_Load^(0+256),3
 10842  007D  1BB8               	btfsc	_Load^(0+256),7
 10843  007E  288B               	goto	l1629
 10844                           
 10845                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10846  007F  15B8               	bsf	_Load^(0+256),3
 10847                           
 10848                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10849  0080  01DD               	clrf	(_Load^(0+256)+37)
 10850                           
 10851                           ;OverLoad_B1.c: 57: }
 10852                           ;OverLoad_B1.c: 58: } else {
 10853  0081  288B               	goto	l1629
 10854  0082                     l1631:	
 10855                           
 10856                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10857  0082  0022               	movlb	2	; select bank2
 10858  0083  1FB8               	btfss	_Load^(0+256),7
 10859  0084  288B               	goto	l1629
 10860                           
 10861                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10862  0085  13B8               	bcf	_Load^(0+256),7
 10863                           
 10864                           ;OverLoad_B1.c: 61: }
 10865                           ;OverLoad_B1.c: 62: }
 10866                           ;OverLoad_B1.c: 63: } else {
 10867  0086  288B               	goto	l1629
 10868  0087                     l1630:	
 10869                           
 10870                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10871  0087  0022               	movlb	2	; select bank2
 10872  0088  1CB8               	btfss	_Load^(0+256),1
 10873  0089  288B               	goto	l1629
 10874  008A                     l8142:	
 10875                           
 10876                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10877  008A  10B8               	bcf	_Load^(0+256),1
 10878  008B                     l1629:	
 10879                           
 10880                           ;OverLoad_B1.c: 66: }
 10881                           ;OverLoad_B1.c: 67: }
 10882                           ;OverLoad_B1.c: 89: }
 10883                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10884  008B  1CB8               	btfss	_Load^(0+256),1
 10885  008C  29DB               	goto	l1637
 10886                           
 10887                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10888  008D  1538               	bsf	_Load^(0+256),2
 10889                           
 10890                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10891  008E  1E38               	btfss	_Load^(0+256),4
 10892  008F  29D9               	goto	l1638
 10893                           
 10894                           ;OverLoad_B1.c: 96: Load.Time++;
 10895  0090  3001               	movlw	1
 10896  0091  07B9               	addwf	(_Load^(0+256)+1),f
 10897  0092  3000               	movlw	0
 10898  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 10899                           
 10900                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10901  0094  3000               	movlw	0
 10902  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 10903  0096  3002               	movlw	2
 10904  0097  1903               	skipnz
 10905  0098  0239               	subwf	(_Load^(0+256)+1),w
 10906  0099  1C03               	skipc
 10907  009A  0008               	return
 10908                           
 10909                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10910  009B  01B9               	clrf	(_Load^(0+256)+1)
 10911  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 10912                           
 10913                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10914  009D  1238               	bcf	_Load^(0+256),4
 10915                           
 10916                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10917  009E  3001               	movlw	1
 10918  009F  0020               	movlb	0	; select bank0
 10919  00A0  00B0               	movwf	Load_Main@i
 10920  00A1  3000               	movlw	0
 10921  00A2  00B1               	movwf	Load_Main@i+1
 10922  00A3  0831               	movf	Load_Main@i+1,w
 10923  00A4  3A80               	xorlw	128
 10924  00A5  00A8               	movwf	??_Load_Main
 10925  00A6  3080               	movlw	128
 10926  00A7  0228               	subwf	??_Load_Main,w
 10927  00A8  1D03               	skipz
 10928  00A9  28AC               	goto	u8355
 10929  00AA  3004               	movlw	4
 10930  00AB  0230               	subwf	Load_Main@i,w
 10931  00AC                     u8355:	
 10932  00AC  1803               	btfsc	3,0
 10933  00AD  28E0               	goto	l8164
 10934  00AE                     l8158:	
 10935                           
 10936                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10937  00AE  0020               	movlb	0	; select bank0
 10938  00AF  3530               	lslf	Load_Main@i,w
 10939  00B0  3E43               	addlw	(_Load+11)& (0+255)
 10940  00B1  0086               	movwf	6
 10941  00B2  3001               	movlw	1	; select bank2/3
 10942  00B3  0087               	movwf	7
 10943  00B4  3F40               	moviw [0]fsr1
 10944  00B5  00A8               	movwf	??_Load_Main
 10945  00B6  3F41               	moviw [1]fsr1
 10946  00B7  00A9               	movwf	??_Load_Main+1
 10947  00B8  0828               	movf	??_Load_Main,w
 10948  00B9  0022               	movlb	2	; select bank2
 10949  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 10950  00BB  0020               	movlb	0	; select bank0
 10951  00BC  0829               	movf	??_Load_Main+1,w
 10952  00BD  0022               	movlb	2	; select bank2
 10953  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 10954                           
 10955                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10956  00BF  0020               	movlb	0	; select bank0
 10957  00C0  3530               	lslf	Load_Main@i,w
 10958  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 10959  00C2  0086               	movwf	6
 10960  00C3  3001               	movlw	1	; select bank2/3
 10961  00C4  0087               	movwf	7
 10962  00C5  3F40               	moviw [0]fsr1
 10963  00C6  00A8               	movwf	??_Load_Main
 10964  00C7  3F41               	moviw [1]fsr1
 10965  00C8  00A9               	movwf	??_Load_Main+1
 10966  00C9  0828               	movf	??_Load_Main,w
 10967  00CA  0022               	movlb	2	; select bank2
 10968  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 10969  00CC  0020               	movlb	0	; select bank0
 10970  00CD  0829               	movf	??_Load_Main+1,w
 10971  00CE  0022               	movlb	2	; select bank2
 10972  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 10973  00D0  3001               	movlw	1
 10974  00D1  0020               	movlb	0	; select bank0
 10975  00D2  07B0               	addwf	Load_Main@i,f
 10976  00D3  3000               	movlw	0
 10977  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10978  00D5  0831               	movf	Load_Main@i+1,w
 10979  00D6  3A80               	xorlw	128
 10980  00D7  00A8               	movwf	??_Load_Main
 10981  00D8  3080               	movlw	128
 10982  00D9  0228               	subwf	??_Load_Main,w
 10983  00DA  1D03               	skipz
 10984  00DB  28DE               	goto	u8365
 10985  00DC  3004               	movlw	4
 10986  00DD  0230               	subwf	Load_Main@i,w
 10987  00DE                     u8365:	
 10988  00DE  1C03               	skipc
 10989  00DF  28AE               	goto	l8158
 10990  00E0                     l8164:	
 10991                           
 10992                           ;OverLoad_B1.c: 104: }
 10993                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10994  00E0  3003               	movlw	3
 10995  00E1  0020               	movlb	0	; select bank0
 10996  00E2  00A0               	movwf	___lwdiv@divisor
 10997  00E3  3000               	movlw	0
 10998  00E4  00A1               	movwf	___lwdiv@divisor+1
 10999  00E5  0022               	movlb	2	; select bank2
 11000  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11001  00E7  0020               	movlb	0	; select bank0
 11002  00E8  01A3               	clrf	___lwdiv@dividend+1
 11003  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11004  00EA  0022               	movlb	2	; select bank2
 11005  00EB  083D               	movf	(_Load^(0+256)+5),w
 11006  00EC  0020               	movlb	0	; select bank0
 11007  00ED  01A2               	clrf	___lwdiv@dividend
 11008  00EE  07A2               	addwf	___lwdiv@dividend,f
 11009  00EF  3191  21C7  3180   	fcall	___lwdiv
 11010  00F2  0020               	movlb	0	; select bank0
 11011  00F3  0821               	movf	?___lwdiv+1,w
 11012  00F4  0022               	movlb	2	; select bank2
 11013  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11014  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11015  00F7  0020               	movlb	0	; select bank0
 11016  00F8  0820               	movf	?___lwdiv,w
 11017  00F9  0022               	movlb	2	; select bank2
 11018  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11019  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11020                           
 11021                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11022  00FC  3003               	movlw	3
 11023  00FD  0020               	movlb	0	; select bank0
 11024  00FE  00A0               	movwf	___lwdiv@divisor
 11025  00FF  3000               	movlw	0
 11026  0100  00A1               	movwf	___lwdiv@divisor+1
 11027  0101  0022               	movlb	2	; select bank2
 11028  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11029  0103  0020               	movlb	0	; select bank0
 11030  0104  01A3               	clrf	___lwdiv@dividend+1
 11031  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11032  0106  0022               	movlb	2	; select bank2
 11033  0107  083F               	movf	(_Load^(0+256)+7),w
 11034  0108  0020               	movlb	0	; select bank0
 11035  0109  01A2               	clrf	___lwdiv@dividend
 11036  010A  07A2               	addwf	___lwdiv@dividend,f
 11037  010B  3191  21C7  3180   	fcall	___lwdiv
 11038  010E  0020               	movlb	0	; select bank0
 11039  010F  0821               	movf	?___lwdiv+1,w
 11040  0110  0022               	movlb	2	; select bank2
 11041  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11042  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11043  0113  0020               	movlb	0	; select bank0
 11044  0114  0820               	movf	?___lwdiv,w
 11045  0115  0022               	movlb	2	; select bank2
 11046  0116  01BF               	clrf	(_Load^(0+256)+7)
 11047  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11048                           
 11049                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11050  0118  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11051                           
 11052                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11053  011B  0022               	movlb	2	; select bank2
 11054  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11055  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11056  011E  1D03               	skipz
 11057  011F  2922               	goto	u8375
 11058  0120  083F               	movf	(_Load^(0+256)+7),w
 11059  0121  023D               	subwf	(_Load^(0+256)+5),w
 11060  0122                     u8375:	
 11061  0122  1C03               	skipc
 11062  0123  0008               	return
 11063                           
 11064                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11065  0124  3005               	movlw	5
 11066  0125  3E38               	addlw	_Load& (0+255)
 11067  0126  0086               	movwf	6
 11068  0127  3001               	movlw	1	; select bank2/3
 11069  0128  0087               	movwf	7
 11070  0129  093F               	comf	(_Load^(0+256)+7),w
 11071  012A  0020               	movlb	0	; select bank0
 11072  012B  00A8               	movwf	??_Load_Main
 11073  012C  0022               	movlb	2	; select bank2
 11074  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11075  012E  0020               	movlb	0	; select bank0
 11076  012F  00A9               	movwf	??_Load_Main+1
 11077  0130  0AA8               	incf	??_Load_Main,f
 11078  0131  1903               	skipnz
 11079  0132  0AA9               	incf	??_Load_Main+1,f
 11080  0133  3F40               	moviw [0]fsr1
 11081  0134  0728               	addwf	??_Load_Main,w
 11082  0135  0022               	movlb	2	; select bank2
 11083  0136  00D7               	movwf	(_Load^(0+256)+31)
 11084  0137  3F41               	moviw [1]fsr1
 11085  0138  0020               	movlb	0	; select bank0
 11086  0139  3D29               	addwfc	??_Load_Main+1,w
 11087  013A  0022               	movlb	2	; select bank2
 11088  013B  00D8               	movwf	(_Load^(0+256)+32)
 11089                           
 11090                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11091  013C  01BD               	clrf	(_Load^(0+256)+5)
 11092  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11093                           
 11094                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11095  013E  01BF               	clrf	(_Load^(0+256)+7)
 11096  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11097                           
 11098                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11099  0140  1DB8               	btfss	_Load^(0+256),3
 11100  0141  299B               	goto	l8204
 11101                           
 11102                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11103  0142  3002               	movlw	2
 11104  0143  025D               	subwf	(_Load^(0+256)+37),w
 11105  0144  1803               	skipnc
 11106  0145  299B               	goto	l8204
 11107                           
 11108                           ;OverLoad_B1.c: 117: Load.Count++;
 11109  0146  3001               	movlw	1
 11110  0147  0020               	movlb	0	; select bank0
 11111  0148  00A8               	movwf	??_Load_Main
 11112  0149  0828               	movf	??_Load_Main,w
 11113  014A  0022               	movlb	2	; select bank2
 11114  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11115                           
 11116                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11117  014C  319A  229F  3180   	fcall	_getDimmer_Load_Status
 11118  014F  0020               	movlb	0	; select bank0
 11119  0150  00A8               	movwf	??_Load_Main
 11120  0151  0828               	movf	??_Load_Main,w
 11121  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11122                           
 11123                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11124  0153  319A  22D7  3180   	fcall	_getMain_Lights_Count
 11125  0156  0020               	movlb	0	; select bank0
 11126  0157  00A8               	movwf	??_Load_Main
 11127  0158  0828               	movf	??_Load_Main,w
 11128  0159  00AF               	movwf	Load_Main@LightsCount
 11129                           
 11130                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11131  015A  0022               	movlb	2	; select bank2
 11132  015B  085D               	movf	(_Load^(0+256)+37),w
 11133  015C  3A01               	xorlw	1
 11134  015D  1D03               	skipz
 11135  015E  2963               	goto	l8190
 11136                           
 11137                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11138  015F  3014               	movlw	20
 11139  0160  00DB               	movwf	(_Load^(0+256)+35)
 11140  0161  3005               	movlw	5
 11141  0162  2970               	goto	L7
 11142  0163                     l8190:	
 11143                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11144                           
 11145  0163  085D               	movf	(_Load^(0+256)+37),w
 11146  0164  3A02               	xorlw	2
 11147  0165  1D03               	skipz
 11148  0166  299B               	goto	l8204
 11149                           
 11150                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11151  0167  0020               	movlb	0	; select bank0
 11152  0168  082F               	movf	Load_Main@LightsCount,w
 11153  0169  3A01               	xorlw	1
 11154  016A  1D03               	skipz
 11155  016B  2972               	goto	l8196
 11156                           
 11157                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11158  016C  3075               	movlw	117
 11159  016D  0022               	movlb	2	; select bank2
 11160  016E  00DB               	movwf	(_Load^(0+256)+35)
 11161  016F  3000               	movlw	0
 11162  0170                     L7:	
 11163  0170  00DC               	movwf	(_Load^(0+256)+36)
 11164                           
 11165                           ;OverLoad_B1.c: 132: } else {
 11166  0171  299B               	goto	l8204
 11167  0172                     l8196:	
 11168                           
 11169                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11170  0172  0020               	movlb	0	; select bank0
 11171  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11172  0174  1D03               	skipz
 11173  0175  298F               	goto	l8200
 11174                           
 11175                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11176  0176  082F               	movf	Load_Main@LightsCount,w
 11177  0177  00A8               	movwf	??_Load_Main
 11178  0178  01A9               	clrf	??_Load_Main+1
 11179  0179  0828               	movf	??_Load_Main,w
 11180  017A  00A0               	movwf	___wmul@multiplier
 11181  017B  0829               	movf	??_Load_Main+1,w
 11182  017C  00A1               	movwf	___wmul@multiplier+1
 11183  017D  3075               	movlw	117
 11184  017E  00A2               	movwf	___wmul@multiplicand
 11185  017F  3000               	movlw	0
 11186  0180  00A3               	movwf	___wmul@multiplicand+1
 11187  0181  319E  26B7  3180   	fcall	___wmul
 11188  0184  0020               	movlb	0	; select bank0
 11189  0185  0821               	movf	?___wmul+1,w
 11190  0186  0022               	movlb	2	; select bank2
 11191  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11192  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11193  0189  0020               	movlb	0	; select bank0
 11194  018A  0820               	movf	?___wmul,w
 11195  018B  0022               	movlb	2	; select bank2
 11196  018C  01DB               	clrf	(_Load^(0+256)+35)
 11197  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11198                           
 11199                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11200  018E  299B               	goto	l8204
 11201  018F                     l8200:	
 11202  018F  0020               	movlb	0	; select bank0
 11203  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11204  0191  3A01               	xorlw	1
 11205  0192  1D03               	skipz
 11206  0193  299B               	goto	l8204
 11207                           
 11208                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11209  0194  0022               	movlb	2	; select bank2
 11210  0195  0841               	movf	(_Load^(0+256)+9),w
 11211  0196  3E75               	addlw	117
 11212  0197  00DB               	movwf	(_Load^(0+256)+35)
 11213  0198  3000               	movlw	0
 11214  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11215  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11216  019B                     l8204:	
 11217                           
 11218                           ;OverLoad_B1.c: 137: }
 11219                           ;OverLoad_B1.c: 138: }
 11220                           ;OverLoad_B1.c: 139: }
 11221                           ;OverLoad_B1.c: 140: }
 11222                           ;OverLoad_B1.c: 141: }
 11223                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11224  019B  0022               	movlb	2	; select bank2
 11225  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11226  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11227  019E  1D03               	skipz
 11228  019F  29A2               	goto	u8455
 11229  01A0  085B               	movf	(_Load^(0+256)+35),w
 11230  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11231  01A2                     u8455:	
 11232  01A2  1C03               	skipc
 11233  01A3  29C1               	goto	l8220
 11234                           
 11235                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11236  01A4  0020               	movlb	0	; select bank0
 11237  01A5  082F               	movf	Load_Main@LightsCount,w
 11238  01A6  3A01               	xorlw	1
 11239  01A7  1903               	skipnz
 11240  01A8  29AB               	goto	l8210
 11241  01A9  3003               	movlw	3
 11242  01AA  29AC               	goto	L8
 11243  01AB                     l8210:	
 11244  01AB  3002               	movlw	2
 11245  01AC                     L8:	
 11246  01AC  00AA               	movwf	_Load_Main$3987
 11247  01AD  3000               	movlw	0
 11248  01AE  00AB               	movwf	_Load_Main$3987+1
 11249  01AF  082A               	movf	_Load_Main$3987,w
 11250  01B0  00A8               	movwf	??_Load_Main
 11251  01B1  0828               	movf	??_Load_Main,w
 11252  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11253                           
 11254                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11255  01B3  3001               	movlw	1
 11256  01B4  00A8               	movwf	??_Load_Main
 11257  01B5  0828               	movf	??_Load_Main,w
 11258  01B6  0022               	movlb	2	; select bank2
 11259  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11260                           
 11261                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11262  01B8  085E               	movf	(_Load^(0+256)+38),w
 11263  01B9  0020               	movlb	0	; select bank0
 11264  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11265  01BB  1803               	skipnc
 11266  01BC  0008               	return
 11267                           
 11268                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11269  01BD  0022               	movlb	2	; select bank2
 11270  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11271                           
 11272                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11273  01BF  16B8               	bsf	_Load^(0+256),5
 11274                           
 11275                           ;OverLoad_B1.c: 170: }
 11276                           ;OverLoad_B1.c: 171: } else {
 11277  01C0  0008               	return
 11278  01C1                     l8220:	
 11279                           
 11280                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11281  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11282                           
 11283                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11284  01C2  1DB8               	btfss	_Load^(0+256),3
 11285  01C3  0008               	return
 11286                           
 11287                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11288  01C4  3001               	movlw	1
 11289  01C5  0020               	movlb	0	; select bank0
 11290  01C6  00A8               	movwf	??_Load_Main
 11291  01C7  0828               	movf	??_Load_Main,w
 11292  01C8  0022               	movlb	2	; select bank2
 11293  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11294                           
 11295                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11296  01CA  3003               	movlw	3
 11297  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11298  01CC  1C03               	skipc
 11299  01CD  0008               	return
 11300                           
 11301                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11302  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11303                           
 11304                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11305  01CF  17B8               	bsf	_Load^(0+256),7
 11306                           
 11307                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11308  01D0  11B8               	bcf	_Load^(0+256),3
 11309                           
 11310                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11311  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11312                           
 11313                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11314  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11315  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11316  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11317  01D5  0857               	movf	(_Load^(0+256)+31),w
 11318  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11319  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11320                           
 11321                           ;OverLoad_B1.c: 184: }
 11322                           ;OverLoad_B1.c: 185: }
 11323                           ;OverLoad_B1.c: 208: }
 11324                           ;OverLoad_B1.c: 209: }
 11325                           ;OverLoad_B1.c: 210: }
 11326                           ;OverLoad_B1.c: 211: } else {
 11327  01D8  0008               	return
 11328  01D9                     l1638:	
 11329                           
 11330                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11331  01D9  1638               	bsf	_Load^(0+256),4
 11332                           
 11333                           ;OverLoad_B1.c: 213: }
 11334                           ;OverLoad_B1.c: 214: } else {
 11335  01DA  0008               	return
 11336  01DB                     l1637:	
 11337                           
 11338                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11339  01DB  1D38               	btfss	_Load^(0+256),2
 11340  01DC  29EE               	goto	l8256
 11341                           
 11342                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11343  01DD  1138               	bcf	_Load^(0+256),2
 11344                           
 11345                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11346  01DE  1238               	bcf	_Load^(0+256),4
 11347                           
 11348                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11349  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11350  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11351                           
 11352                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11353  01E1  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11354                           
 11355                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11356  01E4  0022               	movlb	2	; select bank2
 11357  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11358                           
 11359                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11360  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11361                           
 11362                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11363  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11364  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11365                           
 11366                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11367  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11368  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11369                           
 11370                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11371  01EB  11B8               	bcf	_Load^(0+256),3
 11372                           
 11373                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11374  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11375                           
 11376                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11377  01ED  13B8               	bcf	_Load^(0+256),7
 11378  01EE                     l8256:	
 11379                           
 11380                           ;OverLoad_B1.c: 257: }
 11381                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11382  01EE  1EB8               	btfss	_Load^(0+256),5
 11383  01EF  0008               	return
 11384                           
 11385                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11386  01F0  3001               	movlw	1
 11387  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11388  01F2  3000               	movlw	0
 11389  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11390                           
 11391                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11392  01F4  3001               	movlw	1
 11393  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11394  01F6  30F4               	movlw	244
 11395  01F7  1903               	skipnz
 11396  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11397  01F9  1C03               	skipc
 11398  01FA  0008               	return
 11399                           
 11400                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11401  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11402  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11403                           
 11404                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11405  01FD  12B8               	bcf	_Load^(0+256),5
 11406                           
 11407                           ;OverLoad_B1.c: 263: }
 11408                           ;OverLoad_B1.c: 264: }
 11409                           ;OverLoad_B1.c: 265: }
 11410                           ;OverLoad_B1.c: 266: } else {
 11411  01FE  0008               	return
 11412  01FF                     l1627:	
 11413                           
 11414                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11415  01FF  0021               	movlb	1	; select bank1
 11416  0200  1C2F               	btfss	_myMain^(0+128),0
 11417  0201  0008               	return
 11418                           
 11419                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11420  0202  0022               	movlb	2	; select bank2
 11421  0203  1438               	bsf	_Load^(0+256),0
 11422  0204  0008               	return
 11423  0205                     __end_of_Load_Main:	
 11424                           
 11425                           	psect	text65
 11426  1AD7                     __ptext65:	
 11427 ;; *************** function _getMain_Lights_Count *****************
 11428 ;; Defined at:
 11429 ;;		line 459 in file "../src/Main_B1.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  status1         1    1[BANK0 ] unsigned char 
 11434 ;;  count           1    0[BANK0 ] unsigned char 
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  1    wreg      unsigned char 
 11437 ;; Registers used:
 11438 ;;		wreg, status,2
 11439 ;; Tracked objects:
 11440 ;;		On entry : 0/0
 11441 ;;		On exit  : 0/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;Total ram usage:        2 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    5
 11451 ;; This function calls:
 11452 ;;		Nothing
 11453 ;; This function is called by:
 11454 ;;		_Load_Main
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _getMain_Lights_Count
 11460  1AD7                     _getMain_Lights_Count:	
 11461                           
 11462                           ;Main_B1.c: 460: char count = 0;
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11466  1AD7  0020               	movlb	0	; select bank0
 11467  1AD8  01A0               	clrf	getMain_Lights_Count@count
 11468                           
 11469                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11470  1AD9  3000               	movlw	0
 11471  1ADA  0021               	movlb	1	; select bank1
 11472  1ADB  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11473  1ADC  3001               	movlw	1
 11474  1ADD  0020               	movlb	0	; select bank0
 11475  1ADE  00A1               	movwf	getMain_Lights_Count@status1
 11476                           
 11477                           ;Main_B1.c: 487: return count = status1;
 11478  1ADF  0821               	movf	getMain_Lights_Count@status1,w
 11479  1AE0  00A0               	movwf	getMain_Lights_Count@count
 11480  1AE1  0008               	return
 11481  1AE2                     __end_of_getMain_Lights_Count:	
 11482                           
 11483                           	psect	text66
 11484  1A9F                     __ptext66:	
 11485 ;; *************** function _getDimmer_Load_Status *****************
 11486 ;; Defined at:
 11487 ;;		line 1161 in file "../src/Dimmer_B1.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  status          1    0[BANK0 ] unsigned char 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      unsigned char 
 11494 ;; Registers used:
 11495 ;;		wreg, status,2
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;Total ram usage:        1 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    5
 11508 ;; This function calls:
 11509 ;;		Nothing
 11510 ;; This function is called by:
 11511 ;;		_Load_Main
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function _getDimmer_Load_Status
 11517  1A9F                     _getDimmer_Load_Status:	
 11518                           
 11519                           ;Dimmer_B1.c: 1162: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11520                           
 11521                           ;incstack = 0
 11522                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11523  1A9F  3000               	movlw	0
 11524  1AA0  0022               	movlb	2	; select bank2
 11525  1AA1  192C               	btfsc	_Dimmer^(0+256),2
 11526  1AA2  3001               	movlw	1
 11527  1AA3  0020               	movlb	0	; select bank0
 11528  1AA4  00A0               	movwf	getDimmer_Load_Status@status
 11529                           
 11530                           ;Dimmer_B1.c: 1163: return status;
 11531  1AA5  0820               	movf	getDimmer_Load_Status@status,w
 11532  1AA6  0008               	return
 11533  1AA7                     __end_of_getDimmer_Load_Status:	
 11534                           
 11535                           	psect	text67
 11536  1A97                     __ptext67:	
 11537 ;; *************** function _getDimmer_LoadGO *****************
 11538 ;; Defined at:
 11539 ;;		line 1155 in file "../src/Dimmer_B1.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      unsigned char 
 11546 ;; Registers used:
 11547 ;;		wreg, status,2
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        1 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    5
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_Load_Main
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           
 11568                           ;psect for function _getDimmer_LoadGO
 11569  1A97                     _getDimmer_LoadGO:	
 11570                           
 11571                           ;Dimmer_B1.c: 1156: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11572                           
 11573                           ;incstack = 0
 11574                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11575  1A97  3000               	movlw	0
 11576  1A98  0022               	movlb	2	; select bank2
 11577  1A99  18AC               	btfsc	_Dimmer^(0+256),1
 11578  1A9A  3001               	movlw	1
 11579  1A9B  0020               	movlb	0	; select bank0
 11580  1A9C  00A0               	movwf	getDimmer_LoadGO@loadgo
 11581                           
 11582                           ;Dimmer_B1.c: 1157: return loadgo;
 11583  1A9D  0820               	movf	getDimmer_LoadGO@loadgo,w
 11584  1A9E  0008               	return
 11585  1A9F                     __end_of_getDimmer_LoadGO:	
 11586                           
 11587                           	psect	text68
 11588  1CC9                     __ptext68:	
 11589 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11590 ;; Defined at:
 11591 ;;		line 286 in file "../src/Dimmer_B1.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;  status          1    0[BANK0 ] unsigned char 
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  1    wreg      unsigned char 
 11598 ;; Registers used:
 11599 ;;		wreg, status,2, status,0
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;Total ram usage:        1 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    5
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_Load_Main
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           
 11620                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11621  1CC9                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11622                           
 11623                           ;Dimmer_B1.c: 287: char status = 0;
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11627  1CC9  0020               	movlb	0	; select bank0
 11628  1CCA  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11629                           
 11630                           ;Dimmer_B1.c: 298: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11631  1CCB  3000               	movlw	0
 11632  1CCC  0021               	movlb	1	; select bank1
 11633  1CCD  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11634  1CCE  3001               	movlw	1
 11635  1CCF  0020               	movlb	0	; select bank0
 11636  1CD0  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11637                           
 11638                           ;Dimmer_B1.c: 302: if (status == 0) {
 11639  1CD1  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11640  1CD2  1D03               	skipz
 11641  1CD3  2CDA               	goto	l7272
 11642                           
 11643                           ;Dimmer_B1.c: 312: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11644  1CD4  3000               	movlw	0
 11645  1CD5  0021               	movlb	1	; select bank1
 11646  1CD6  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11647  1CD7  3001               	movlw	1
 11648  1CD8  0020               	movlb	0	; select bank0
 11649  1CD9  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11650  1CDA                     l7272:	
 11651                           
 11652                           ;Dimmer_B1.c: 314: }
 11653                           ;Dimmer_B1.c: 316: return status;
 11654  1CDA  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11655  1CDB  0008               	return
 11656  1CDC                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11657                           
 11658                           	psect	text69
 11659  1EB7                     __ptext69:	
 11660 ;; *************** function ___wmul *****************
 11661 ;; Defined at:
 11662 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11665 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  product         2    4[BANK0 ] unsigned int 
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  2    0[BANK0 ] unsigned int 
 11670 ;; Registers used:
 11671 ;;		wreg, status,2, status,0
 11672 ;; Tracked objects:
 11673 ;;		On entry : 0/0
 11674 ;;		On exit  : 0/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;Total ram usage:        6 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    5
 11684 ;; This function calls:
 11685 ;;		Nothing
 11686 ;; This function is called by:
 11687 ;;		_Load_Main
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           
 11692                           ;psect for function ___wmul
 11693  1EB7                     ___wmul:	
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11697  1EB7  0020               	movlb	0	; select bank0
 11698  1EB8  01A4               	clrf	___wmul@product
 11699  1EB9  01A5               	clrf	___wmul@product+1
 11700  1EBA                     l7836:	
 11701  1EBA  1C20               	btfss	___wmul@multiplier,0
 11702  1EBB  2EC0               	goto	l2713
 11703  1EBC  0822               	movf	___wmul@multiplicand,w
 11704  1EBD  07A4               	addwf	___wmul@product,f
 11705  1EBE  0823               	movf	___wmul@multiplicand+1,w
 11706  1EBF  3DA5               	addwfc	___wmul@product+1,f
 11707  1EC0                     l2713:	
 11708  1EC0  3001               	movlw	1
 11709  1EC1                     u7735:	
 11710  1EC1  35A2               	lslf	___wmul@multiplicand,f
 11711  1EC2  0DA3               	rlf	___wmul@multiplicand+1,f
 11712  1EC3  0B89               	decfsz	9,f
 11713  1EC4  2EC1               	goto	u7735
 11714  1EC5  3001               	movlw	1
 11715  1EC6                     u7745:	
 11716  1EC6  36A1               	lsrf	___wmul@multiplier+1,f
 11717  1EC7  0CA0               	rrf	___wmul@multiplier,f
 11718  1EC8  0B89               	decfsz	9,f
 11719  1EC9  2EC6               	goto	u7745
 11720  1ECA  0821               	movf	___wmul@multiplier+1,w
 11721  1ECB  0420               	iorwf	___wmul@multiplier,w
 11722  1ECC  1D03               	skipz
 11723  1ECD  2EBA               	goto	l7836
 11724  1ECE  0825               	movf	___wmul@product+1,w
 11725  1ECF  01A1               	clrf	?___wmul+1
 11726  1ED0  07A1               	addwf	?___wmul+1,f
 11727  1ED1  0824               	movf	___wmul@product,w
 11728  1ED2  01A0               	clrf	?___wmul
 11729  1ED3  07A0               	addwf	?___wmul,f
 11730  1ED4  0008               	return
 11731  1ED5                     __end_of___wmul:	
 11732                           
 11733                           	psect	text70
 11734  11C7                     __ptext70:	
 11735 ;; *************** function ___lwdiv *****************
 11736 ;; Defined at:
 11737 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;  divisor         2    0[BANK0 ] unsigned int 
 11740 ;;  dividend        2    2[BANK0 ] unsigned int 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  quotient        2    5[BANK0 ] unsigned int 
 11743 ;;  counter         1    7[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  2    0[BANK0 ] unsigned int 
 11746 ;; Registers used:
 11747 ;;		wreg, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11753 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;Total ram usage:        8 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    5
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_Load_Main
 11764 ;;		_setTemp_Main
 11765 ;;		_setRF_Main
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           
 11770                           ;psect for function ___lwdiv
 11771  11C7                     ___lwdiv:	
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11775  11C7  0020               	movlb	0	; select bank0
 11776  11C8  01A5               	clrf	___lwdiv@quotient
 11777  11C9  01A6               	clrf	___lwdiv@quotient+1
 11778  11CA  0821               	movf	___lwdiv@divisor+1,w
 11779  11CB  0420               	iorwf	___lwdiv@divisor,w
 11780  11CC  1903               	skipnz
 11781  11CD  29F7               	goto	l7210
 11782  11CE  01A7               	clrf	___lwdiv@counter
 11783  11CF  0AA7               	incf	___lwdiv@counter,f
 11784  11D0                     l7198:	
 11785  11D0  1BA1               	btfsc	___lwdiv@divisor+1,7
 11786  11D1  29DC               	goto	l7200
 11787  11D2  3001               	movlw	1
 11788  11D3                     u6615:	
 11789  11D3  35A0               	lslf	___lwdiv@divisor,f
 11790  11D4  0DA1               	rlf	___lwdiv@divisor+1,f
 11791  11D5  0B89               	decfsz	9,f
 11792  11D6  29D3               	goto	u6615
 11793  11D7  3001               	movlw	1
 11794  11D8  00A4               	movwf	??___lwdiv
 11795  11D9  0824               	movf	??___lwdiv,w
 11796  11DA  07A7               	addwf	___lwdiv@counter,f
 11797  11DB  29D0               	goto	l7198
 11798  11DC                     l7200:	
 11799  11DC  3001               	movlw	1
 11800  11DD                     u6635:	
 11801  11DD  35A5               	lslf	___lwdiv@quotient,f
 11802  11DE  0DA6               	rlf	___lwdiv@quotient+1,f
 11803  11DF  0B89               	decfsz	9,f
 11804  11E0  29DD               	goto	u6635
 11805  11E1  0821               	movf	___lwdiv@divisor+1,w
 11806  11E2  0223               	subwf	___lwdiv@dividend+1,w
 11807  11E3  1D03               	skipz
 11808  11E4  29E7               	goto	u6645
 11809  11E5  0820               	movf	___lwdiv@divisor,w
 11810  11E6  0222               	subwf	___lwdiv@dividend,w
 11811  11E7                     u6645:	
 11812  11E7  1C03               	skipc
 11813  11E8  29EE               	goto	l7206
 11814  11E9  0820               	movf	___lwdiv@divisor,w
 11815  11EA  02A2               	subwf	___lwdiv@dividend,f
 11816  11EB  0821               	movf	___lwdiv@divisor+1,w
 11817  11EC  3BA3               	subwfb	___lwdiv@dividend+1,f
 11818  11ED  1425               	bsf	___lwdiv@quotient,0
 11819  11EE                     l7206:	
 11820  11EE  3001               	movlw	1
 11821  11EF                     u6655:	
 11822  11EF  36A1               	lsrf	___lwdiv@divisor+1,f
 11823  11F0  0CA0               	rrf	___lwdiv@divisor,f
 11824  11F1  0B89               	decfsz	9,f
 11825  11F2  29EF               	goto	u6655
 11826  11F3  3001               	movlw	1
 11827  11F4  02A7               	subwf	___lwdiv@counter,f
 11828  11F5  1D03               	btfss	3,2
 11829  11F6  29DC               	goto	l7200
 11830  11F7                     l7210:	
 11831  11F7  0826               	movf	___lwdiv@quotient+1,w
 11832  11F8  01A1               	clrf	?___lwdiv+1
 11833  11F9  07A1               	addwf	?___lwdiv+1,f
 11834  11FA  0825               	movf	___lwdiv@quotient,w
 11835  11FB  01A0               	clrf	?___lwdiv
 11836  11FC  07A0               	addwf	?___lwdiv,f
 11837  11FD  0008               	return
 11838  11FE                     __end_of___lwdiv:	
 11839                           
 11840                           	psect	text71
 11841  1A26                     __ptext71:	
 11842 ;; *************** function _Load_Initialization *****************
 11843 ;; Defined at:
 11844 ;;		line 9 in file "../src/OverLoad_B1.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;		None
 11847 ;; Auto vars:     Size  Location     Type
 11848 ;;		None
 11849 ;; Return value:  Size  Location     Type
 11850 ;;		None               void
 11851 ;; Registers used:
 11852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11853 ;; Tracked objects:
 11854 ;;		On entry : 0/0
 11855 ;;		On exit  : 0/0
 11856 ;;		Unchanged: 0/0
 11857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;Total ram usage:        0 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:    6
 11865 ;; This function calls:
 11866 ;;		_setLoad_AH_AL_Restore
 11867 ;; This function is called by:
 11868 ;;		_main
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           
 11873                           ;psect for function _Load_Initialization
 11874  1A26                     _Load_Initialization:	
 11875                           
 11876                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11877                           
 11878                           ;incstack = 0
 11879                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11880  1A26  319E  267E         	fcall	_setLoad_AH_AL_Restore
 11881  1A28  0008               	return
 11882  1A29                     __end_of_Load_Initialization:	
 11883                           
 11884                           	psect	text72
 11885  1E7E                     __ptext72:	
 11886 ;; *************** function _setLoad_AH_AL_Restore *****************
 11887 ;; Defined at:
 11888 ;;		line 294 in file "../src/OverLoad_B1.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;		None
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;  i               1    1[BANK0 ] unsigned char 
 11893 ;; Return value:  Size  Location     Type
 11894 ;;		None               void
 11895 ;; Registers used:
 11896 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;Total ram usage:        2 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:    5
 11909 ;; This function calls:
 11910 ;;		Nothing
 11911 ;; This function is called by:
 11912 ;;		_Load_Initialization
 11913 ;;		_Load_Main
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           
 11918                           ;psect for function _setLoad_AH_AL_Restore
 11919  1E7E                     _setLoad_AH_AL_Restore:	
 11920                           
 11921                           ;OverLoad_B1.c: 295: char i;
 11922                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11926  1E7E  0020               	movlb	0	; select bank0
 11927  1E7F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11928  1E80                     L9:	
 11929  1E80  3005               	movlw	5
 11930  1E81  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11931  1E82  1803               	btfsc	3,0
 11932  1E83  0008               	return
 11933                           
 11934                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11935  1E84  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11936  1E85  3E43               	addlw	(_Load+11)& (0+255)
 11937  1E86  0086               	movwf	6
 11938  1E87  3001               	movlw	1	; select bank2/3
 11939  1E88  0087               	movwf	7
 11940  1E89  3000               	movlw	0
 11941  1E8A  3FC0               	movwi [0]fsr1
 11942  1E8B  3FC1               	movwi [1]fsr1
 11943                           
 11944                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11945  1E8C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11946  1E8D  3E4D               	addlw	(_Load+21)& (0+255)
 11947  1E8E  0086               	movwf	6
 11948  1E8F  3001               	movlw	1	; select bank2/3
 11949  1E90  0087               	movwf	7
 11950  1E91  30FF               	movlw	255
 11951  1E92  3FC0               	movwi [0]fsr1
 11952  1E93  30FF               	movlw	255
 11953  1E94  3FC1               	movwi [1]fsr1
 11954  1E95  3001               	movlw	1
 11955  1E96  00A0               	movwf	??_setLoad_AH_AL_Restore
 11956  1E97  0820               	movf	??_setLoad_AH_AL_Restore,w
 11957  1E98  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11958  1E99  2E80               	goto	L9
 11959  1E9A                     __end_of_setLoad_AH_AL_Restore:	
 11960                           
 11961                           	psect	text73
 11962  1A41                     __ptext73:	
 11963 ;; *************** function _LED_Main *****************
 11964 ;; Defined at:
 11965 ;;		line 47 in file "../src/LED_B1.c"
 11966 ;; Parameters:    Size  Location     Type
 11967 ;;		None
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;		None
 11970 ;; Return value:  Size  Location     Type
 11971 ;;		None               void
 11972 ;; Registers used:
 11973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11974 ;; Tracked objects:
 11975 ;;		On entry : 0/0
 11976 ;;		On exit  : 0/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;Total ram usage:        0 bytes
 11984 ;; Hardware stack levels used:    1
 11985 ;; Hardware stack levels required when called:    7
 11986 ;; This function calls:
 11987 ;;		_setLED_Main
 11988 ;; This function is called by:
 11989 ;;		_main
 11990 ;; This function uses a non-reentrant model
 11991 ;;
 11992                           
 11993                           
 11994                           ;psect for function _LED_Main
 11995  1A41                     _LED_Main:	
 11996                           
 11997                           ;LED_B1.c: 67: setLED_Main(99);
 11998                           
 11999                           ;incstack = 0
 12000                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12001  1A41  3063               	movlw	99
 12002  1A42  3191  2191         	fcall	_setLED_Main
 12003  1A44  0008               	return
 12004  1A45                     __end_of_LED_Main:	
 12005                           
 12006                           	psect	text74
 12007  1191                     __ptext74:	
 12008 ;; *************** function _setLED_Main *****************
 12009 ;; Defined at:
 12010 ;;		line 229 in file "../src/LED_B1.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;  led             1    wreg     unsigned char 
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;  led             1    4[BANK0 ] unsigned char 
 12015 ;; Return value:  Size  Location     Type
 12016 ;;		None               void
 12017 ;; Registers used:
 12018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : 0/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;Total ram usage:        3 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    6
 12031 ;; This function calls:
 12032 ;;		_LedPointSelect
 12033 ;; This function is called by:
 12034 ;;		_LED_Main
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           
 12039                           ;psect for function _setLED_Main
 12040  1191                     _setLED_Main:	
 12041                           
 12042                           ;incstack = 0
 12043                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12044                           ;setLED_Main@led stored from wreg
 12045  1191  0020               	movlb	0	; select bank0
 12046  1192  00A4               	movwf	setLED_Main@led
 12047                           
 12048                           ;LED_B1.c: 230: LedPointSelect(led);
 12049  1193  0824               	movf	setLED_Main@led,w
 12050  1194  319B  2334  3191   	fcall	_LedPointSelect
 12051                           
 12052                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12053  1197  0021               	movlb	1	; select bank1
 12054  1198  084D               	movf	_LED^(0+128),w
 12055  1199  0086               	movwf	6
 12056  119A  3001               	movlw	1	; select bank2/3
 12057  119B  0087               	movwf	7
 12058  119C  1C81               	btfss	1,1
 12059  119D  0008               	return
 12060                           
 12061                           ;LED_B1.c: 232: LED->Time++;
 12062  119E  0A4D               	incf	_LED^(0+128),w
 12063  119F  0086               	movwf	6
 12064  11A0  3001               	movlw	1	; select bank2/3
 12065  11A1  0087               	movwf	7
 12066  11A2  3001               	movlw	1
 12067  11A3  0781               	addwf	1,f
 12068  11A4  3141               	addfsr 1,1
 12069  11A5  1803               	skipnc
 12070  11A6  0A81               	incf	1,f
 12071                           
 12072                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12073  11A7  0A4D               	incf	_LED^(0+128),w
 12074  11A8  0086               	movwf	6
 12075  11A9  3001               	movlw	1	; select bank2/3
 12076  11AA  0087               	movwf	7
 12077  11AB  3F40               	moviw [0]fsr1
 12078  11AC  0020               	movlb	0	; select bank0
 12079  11AD  00A2               	movwf	??_setLED_Main
 12080  11AE  3F41               	moviw [1]fsr1
 12081  11AF  00A3               	movwf	??_setLED_Main+1
 12082  11B0  3000               	movlw	0
 12083  11B1  0223               	subwf	??_setLED_Main+1,w
 12084  11B2  3019               	movlw	25
 12085  11B3  1903               	skipnz
 12086  11B4  0222               	subwf	??_setLED_Main,w
 12087  11B5  1C03               	skipc
 12088  11B6  0008               	return
 12089                           
 12090                           ;LED_B1.c: 234: LED->Time = 0;
 12091  11B7  0021               	movlb	1	; select bank1
 12092  11B8  0A4D               	incf	_LED^(0+128),w
 12093  11B9  0086               	movwf	6
 12094  11BA  3001               	movlw	1	; select bank2/3
 12095  11BB  0087               	movwf	7
 12096  11BC  3000               	movlw	0
 12097  11BD  3FC0               	movwi [0]fsr1
 12098  11BE  3FC1               	movwi [1]fsr1
 12099                           
 12100                           ;LED_B1.c: 252: if (led == 99) {
 12101  11BF  0020               	movlb	0	; select bank0
 12102  11C0  0824               	movf	setLED_Main@led,w
 12103  11C1  3A63               	xorlw	99
 12104  11C2  1D03               	skipz
 12105  11C3  0008               	return
 12106                           
 12107                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12108  11C4  3020               	movlw	32
 12109  11C5  068D               	xorwf	13,f
 12110  11C6  0008               	return
 12111  11C7                     __end_of_setLED_Main:	
 12112                           
 12113                           	psect	text75
 12114  1A3D                     __ptext75:	
 12115 ;; *************** function _LED_Initialization *****************
 12116 ;; Defined at:
 12117 ;;		line 31 in file "../src/LED_B1.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;		None
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;		None
 12122 ;; Return value:  Size  Location     Type
 12123 ;;		None               void
 12124 ;; Registers used:
 12125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12126 ;; Tracked objects:
 12127 ;;		On entry : 0/0
 12128 ;;		On exit  : 0/0
 12129 ;;		Unchanged: 0/0
 12130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;Total ram usage:        0 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; Hardware stack levels required when called:    8
 12138 ;; This function calls:
 12139 ;;		_setLED_Initialization
 12140 ;; This function is called by:
 12141 ;;		_main
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145                           
 12146                           ;psect for function _LED_Initialization
 12147  1A3D                     _LED_Initialization:	
 12148                           
 12149                           ;LED_B1.c: 42: setLED_Initialization(99);
 12150                           
 12151                           ;incstack = 0
 12152                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12153  1A3D  3063               	movlw	99
 12154  1A3E  319C  246D         	fcall	_setLED_Initialization
 12155  1A40  0008               	return
 12156  1A41                     __end_of_LED_Initialization:	
 12157                           
 12158                           	psect	text76
 12159  1C6D                     __ptext76:	
 12160 ;; *************** function _setLED_Initialization *****************
 12161 ;; Defined at:
 12162 ;;		line 74 in file "../src/LED_B1.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;  led             1    wreg     unsigned char 
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  led             1    4[BANK0 ] unsigned char 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;		None               void
 12169 ;; Registers used:
 12170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;Total ram usage:        1 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    7
 12183 ;; This function calls:
 12184 ;;		_LedPointSelect
 12185 ;;		_setLED
 12186 ;; This function is called by:
 12187 ;;		_LED_Initialization
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _setLED_Initialization
 12193  1C6D                     _setLED_Initialization:	
 12194                           
 12195                           ;incstack = 0
 12196                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12197                           ;setLED_Initialization@led stored from wreg
 12198  1C6D  0020               	movlb	0	; select bank0
 12199  1C6E  00A4               	movwf	setLED_Initialization@led
 12200                           
 12201                           ;LED_B1.c: 75: LedPointSelect(led);
 12202  1C6F  0824               	movf	setLED_Initialization@led,w
 12203  1C70  319B  2334  319C   	fcall	_LedPointSelect
 12204                           
 12205                           ;LED_B1.c: 76: LED->Enable = 1;
 12206  1C73  0021               	movlb	1	; select bank1
 12207  1C74  084D               	movf	_LED^(0+128),w
 12208  1C75  0086               	movwf	6
 12209  1C76  3001               	movlw	1	; select bank2/3
 12210  1C77  0087               	movwf	7
 12211  1C78  1401               	bsf	1,0
 12212                           
 12213                           ;LED_B1.c: 77: setLED(led, 0);
 12214  1C79  0020               	movlb	0	; select bank0
 12215  1C7A  01A2               	clrf	setLED@command
 12216  1C7B  0824               	movf	setLED_Initialization@led,w
 12217  1C7C  3187  27C6         	fcall	_setLED
 12218  1C7E  0008               	return
 12219  1C7F                     __end_of_setLED_Initialization:	
 12220                           
 12221                           	psect	text77
 12222  12F0                     __ptext77:	
 12223 ;; *************** function _Flash_Memory_Main *****************
 12224 ;; Defined at:
 12225 ;;		line 976 in file "../src/MCU_B1.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12230 ;; Return value:  Size  Location     Type
 12231 ;;		None               void
 12232 ;; Registers used:
 12233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        3 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    8
 12246 ;; This function calls:
 12247 ;;		_Flash_Memory_Modify
 12248 ;;		_getAll_Sw_KeyStatus
 12249 ;;		_getMain_All_LightsStatus
 12250 ;; This function is called by:
 12251 ;;		_main
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           
 12256                           ;psect for function _Flash_Memory_Main
 12257  12F0                     _Flash_Memory_Main:	
 12258                           
 12259                           ;MCU_B1.c: 977: char key_Status = 0;
 12260                           
 12261                           ;incstack = 0
 12262                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12263  12F0  0020               	movlb	0	; select bank0
 12264  12F1  01A7               	clrf	Flash_Memory_Main@key_Status
 12265                           
 12266                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12267  12F2  319C  2405  3192   	fcall	_getAll_Sw_KeyStatus
 12268  12F5  0020               	movlb	0	; select bank0
 12269  12F6  00A6               	movwf	??_Flash_Memory_Main
 12270  12F7  0826               	movf	??_Flash_Memory_Main,w
 12271  12F8  00A7               	movwf	Flash_Memory_Main@key_Status
 12272                           
 12273                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12274  12F9  0024               	movlb	4	; select bank4
 12275  12FA  1C44               	btfss	(_Memory^(0+512)+36),0
 12276  12FB  0008               	return
 12277                           
 12278                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12279  12FC  0020               	movlb	0	; select bank0
 12280  12FD  01A8               	clrf	_Flash_Memory_Main$3152
 12281  12FE  319A  22C2  3192   	fcall	_getMain_All_LightsStatus
 12282  1301  3800               	iorlw	0
 12283  1302  1D03               	skipz
 12284  1303  2B0A               	goto	l7964
 12285  1304  0020               	movlb	0	; select bank0
 12286  1305  08A7               	movf	Flash_Memory_Main@key_Status,f
 12287  1306  1D03               	skipz
 12288  1307  2B0A               	goto	l7964
 12289  1308  01A8               	clrf	_Flash_Memory_Main$3152
 12290  1309  0AA8               	incf	_Flash_Memory_Main$3152,f
 12291  130A                     l7964:	
 12292  130A  0020               	movlb	0	; select bank0
 12293  130B  0828               	movf	_Flash_Memory_Main$3152,w
 12294  130C  0024               	movlb	4	; select bank4
 12295  130D  10C4               	bcf	(_Memory^(0+512)+36),1
 12296  130E  1D03               	skipz
 12297  130F  14C4               	bsf	(_Memory^(0+512)+36),1
 12298                           
 12299                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12300  1310  1CC4               	btfss	(_Memory^(0+512)+36),1
 12301  1311  2B2B               	goto	l1249
 12302                           
 12303                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12304  1312  15C4               	bsf	(_Memory^(0+512)+36),3
 12305                           
 12306                           ;MCU_B1.c: 985: Memory.Time++;
 12307  1313  3001               	movlw	1
 12308  1314  07C2               	addwf	(_Memory^(0+512)+34),f
 12309  1315  3000               	movlw	0
 12310  1316  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12311                           
 12312                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12313  1317  3022               	movlw	34
 12314  1318  3E20               	addlw	_Memory& (0+255)
 12315  1319  0086               	movwf	6
 12316  131A  3002               	movlw	2	; select bank4/5
 12317  131B  0087               	movwf	7
 12318  131C  3F40               	moviw [0]fsr1
 12319  131D  3A0A               	xorlw	10
 12320  131E  1D03               	skipz
 12321  131F  2B22               	goto	u7975
 12322  1320  3F41               	moviw [1]fsr1
 12323  1321  3A00               	xorlw	0
 12324  1322                     u7975:	
 12325  1322  1D03               	skipz
 12326  1323  0008               	return
 12327                           
 12328                           ;MCU_B1.c: 987: Memory.Time = 0;
 12329  1324  01C2               	clrf	(_Memory^(0+512)+34)
 12330  1325  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12331                           
 12332                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12333  1326  1044               	bcf	(_Memory^(0+512)+36),0
 12334                           
 12335                           ;MCU_B1.c: 989: Memory.GO = 0;
 12336  1327  10C4               	bcf	(_Memory^(0+512)+36),1
 12337                           
 12338                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12339  1328  318A  22FC         	fcall	_Flash_Memory_Modify
 12340                           
 12341                           ;MCU_B1.c: 991: }
 12342                           ;MCU_B1.c: 992: } else {
 12343  132A  0008               	return
 12344  132B                     l1249:	
 12345                           
 12346                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12347  132B  1DC4               	btfss	(_Memory^(0+512)+36),3
 12348  132C  0008               	return
 12349                           
 12350                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12351  132D  11C4               	bcf	(_Memory^(0+512)+36),3
 12352                           
 12353                           ;MCU_B1.c: 995: Memory.Time = 0;
 12354  132E  01C2               	clrf	(_Memory^(0+512)+34)
 12355  132F  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12356  1330  0008               	return
 12357  1331                     __end_of_Flash_Memory_Main:	
 12358                           
 12359                           	psect	text78
 12360  1C05                     __ptext78:	
 12361 ;; *************** function _getAll_Sw_KeyStatus *****************
 12362 ;; Defined at:
 12363 ;;		line 279 in file "../src/Switch_B1.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;  status          1    1[BANK0 ] unsigned char 
 12368 ;; Return value:  Size  Location     Type
 12369 ;;                  1    wreg      unsigned char 
 12370 ;; Registers used:
 12371 ;;		wreg, status,2
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;Total ram usage:        3 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    5
 12384 ;; This function calls:
 12385 ;;		Nothing
 12386 ;; This function is called by:
 12387 ;;		_Flash_Memory_Main
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           
 12392                           ;psect for function _getAll_Sw_KeyStatus
 12393  1C05                     _getAll_Sw_KeyStatus:	
 12394                           
 12395                           ;Switch_B1.c: 280: char status = 0;
 12396                           
 12397                           ;incstack = 0
 12398                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12399  1C05  0020               	movlb	0	; select bank0
 12400  1C06  01A1               	clrf	getAll_Sw_KeyStatus@status
 12401                           
 12402                           ;Switch_B1.c: 299: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12403  1C07  01A2               	clrf	_getAll_Sw_KeyStatus$6467
 12404  1C08  0AA2               	incf	_getAll_Sw_KeyStatus$6467,f
 12405  1C09  1F0C               	btfss	12,6	;volatile
 12406  1C0A  1A0C               	btfsc	12,4	;volatile
 12407  1C0B  2C10               	goto	l7520
 12408  1C0C  1C0C               	btfss	12,0	;volatile
 12409  1C0D  1B8C               	btfsc	12,7	;volatile
 12410  1C0E  2C10               	goto	l7520
 12411  1C0F  01A2               	clrf	_getAll_Sw_KeyStatus$6467
 12412  1C10                     l7520:	
 12413  1C10  0822               	movf	_getAll_Sw_KeyStatus$6467,w
 12414  1C11  00A0               	movwf	??_getAll_Sw_KeyStatus
 12415  1C12  0820               	movf	??_getAll_Sw_KeyStatus,w
 12416  1C13  00A1               	movwf	getAll_Sw_KeyStatus@status
 12417                           
 12418                           ;Switch_B1.c: 303: return status;
 12419  1C14  0821               	movf	getAll_Sw_KeyStatus@status,w
 12420  1C15  0008               	return
 12421  1C16                     __end_of_getAll_Sw_KeyStatus:	
 12422                           
 12423                           	psect	text79
 12424  0AFC                     __ptext79:	
 12425 ;; *************** function _Flash_Memory_Modify *****************
 12426 ;; Defined at:
 12427 ;;		line 1053 in file "../src/MCU_B1.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;  i               1    5[BANK0 ] unsigned char 
 12432 ;; Return value:  Size  Location     Type
 12433 ;;		None               void
 12434 ;; Registers used:
 12435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;Total ram usage:        2 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    7
 12448 ;; This function calls:
 12449 ;;		_Flash_Memory_Erasing
 12450 ;;		_Flash_Memory_Read
 12451 ;;		_Flash_Memory_Write
 12452 ;;		_setMemory_Data
 12453 ;; This function is called by:
 12454 ;;		_Flash_Memory_Main
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _Flash_Memory_Modify
 12460  0AFC                     _Flash_Memory_Modify:	
 12461                           
 12462                           ;MCU_B1.c: 1054: char i = 0;
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12466  0AFC  0020               	movlb	0	; select bank0
 12467  0AFD  01A5               	clrf	Flash_Memory_Modify@i
 12468                           
 12469                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12470  0AFE  01A5               	clrf	Flash_Memory_Modify@i
 12471  0AFF  3020               	movlw	32
 12472  0B00  0225               	subwf	Flash_Memory_Modify@i,w
 12473  0B01  1803               	btfsc	3,0
 12474  0B02  2B18               	goto	l7538
 12475  0B03                     l7532:	
 12476                           
 12477                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12478  0B03  0825               	movf	Flash_Memory_Modify@i,w
 12479  0B04  319D  25F8  318A   	fcall	_Flash_Memory_Read
 12480  0B07  0020               	movlb	0	; select bank0
 12481  0B08  00A4               	movwf	??_Flash_Memory_Modify
 12482  0B09  0825               	movf	Flash_Memory_Modify@i,w
 12483  0B0A  3E20               	addlw	_Memory& (0+255)
 12484  0B0B  0086               	movwf	6
 12485  0B0C  3002               	movlw	2	; select bank4/5
 12486  0B0D  0087               	movwf	7
 12487  0B0E  0824               	movf	??_Flash_Memory_Modify,w
 12488  0B0F  0081               	movwf	1
 12489  0B10  3001               	movlw	1
 12490  0B11  00A4               	movwf	??_Flash_Memory_Modify
 12491  0B12  0824               	movf	??_Flash_Memory_Modify,w
 12492  0B13  07A5               	addwf	Flash_Memory_Modify@i,f
 12493  0B14  3020               	movlw	32
 12494  0B15  0225               	subwf	Flash_Memory_Modify@i,w
 12495  0B16  1C03               	skipc
 12496  0B17  2B03               	goto	l7532
 12497  0B18                     l7538:	
 12498                           
 12499                           ;MCU_B1.c: 1057: }
 12500                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12501  0B18  0021               	movlb	1	; select bank1
 12502  0B19  086E               	movf	_product^(0+128),w
 12503  0B1A  0086               	movwf	6
 12504  0B1B  3001               	movlw	1	; select bank2/3
 12505  0B1C  0087               	movwf	7
 12506  0B1D  3001               	movlw	1	; select bank2/3
 12507  0B1E  3F4C               	moviw [12]fsr1
 12508  0B1F  0020               	movlb	0	; select bank0
 12509  0B20  00A0               	movwf	setMemory_Data@data
 12510  0B21  3000               	movlw	0
 12511  0B22  319B  2340  318A   	fcall	_setMemory_Data
 12512                           
 12513                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12514  0B25  0021               	movlb	1	; select bank1
 12515  0B26  086E               	movf	_product^(0+128),w
 12516  0B27  0086               	movwf	6
 12517  0B28  3001               	movlw	1	; select bank2/3
 12518  0B29  0087               	movwf	7
 12519  0B2A  3001               	movlw	1	; select bank2/3
 12520  0B2B  3F4D               	moviw [13]fsr1
 12521  0B2C  0020               	movlb	0	; select bank0
 12522  0B2D  00A0               	movwf	setMemory_Data@data
 12523  0B2E  3001               	movlw	1
 12524  0B2F  319B  2340  318A   	fcall	_setMemory_Data
 12525                           
 12526                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12527  0B32  0021               	movlb	1	; select bank1
 12528  0B33  086E               	movf	_product^(0+128),w
 12529  0B34  0086               	movwf	6
 12530  0B35  3001               	movlw	1	; select bank2/3
 12531  0B36  0087               	movwf	7
 12532  0B37  3001               	movlw	1	; select bank2/3
 12533  0B38  3F4E               	moviw [14]fsr1
 12534  0B39  0020               	movlb	0	; select bank0
 12535  0B3A  00A0               	movwf	setMemory_Data@data
 12536  0B3B  3002               	movlw	2
 12537  0B3C  319B  2340  318A   	fcall	_setMemory_Data
 12538                           
 12539                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12540  0B3F  0021               	movlb	1	; select bank1
 12541  0B40  086E               	movf	_product^(0+128),w
 12542  0B41  0086               	movwf	6
 12543  0B42  3001               	movlw	1	; select bank2/3
 12544  0B43  0087               	movwf	7
 12545  0B44  3001               	movlw	1	; select bank2/3
 12546  0B45  3F55               	moviw [21]fsr1
 12547  0B46  0020               	movlb	0	; select bank0
 12548  0B47  00A0               	movwf	setMemory_Data@data
 12549  0B48  3003               	movlw	3
 12550  0B49  319B  2340  318A   	fcall	_setMemory_Data
 12551                           
 12552                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12553  0B4C  0021               	movlb	1	; select bank1
 12554  0B4D  086E               	movf	_product^(0+128),w
 12555  0B4E  0086               	movwf	6
 12556  0B4F  3001               	movlw	1	; select bank2/3
 12557  0B50  0087               	movwf	7
 12558  0B51  3001               	movlw	1	; select bank2/3
 12559  0B52  3F56               	moviw [22]fsr1
 12560  0B53  0020               	movlb	0	; select bank0
 12561  0B54  00A0               	movwf	setMemory_Data@data
 12562  0B55  3004               	movlw	4
 12563  0B56  319B  2340  318A   	fcall	_setMemory_Data
 12564                           
 12565                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12566  0B59  0021               	movlb	1	; select bank1
 12567  0B5A  086E               	movf	_product^(0+128),w
 12568  0B5B  0086               	movwf	6
 12569  0B5C  3001               	movlw	1	; select bank2/3
 12570  0B5D  0087               	movwf	7
 12571  0B5E  3001               	movlw	1	; select bank2/3
 12572  0B5F  3F57               	moviw [23]fsr1
 12573  0B60  0020               	movlb	0	; select bank0
 12574  0B61  00A0               	movwf	setMemory_Data@data
 12575  0B62  3005               	movlw	5
 12576  0B63  319B  2340  318A   	fcall	_setMemory_Data
 12577                           
 12578                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12579  0B66  0021               	movlb	1	; select bank1
 12580  0B67  1EB9               	btfss	(_myMain^(0+128)+10),5
 12581  0B68  2B73               	goto	l7546
 12582                           
 12583                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12584  0B69  12B9               	bcf	(_myMain^(0+128)+10),5
 12585                           
 12586                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12587  0B6A  30AA               	movlw	170
 12588  0B6B  0020               	movlb	0	; select bank0
 12589  0B6C  00A4               	movwf	??_Flash_Memory_Modify
 12590  0B6D  0824               	movf	??_Flash_Memory_Modify,w
 12591  0B6E  00A0               	movwf	setMemory_Data@data
 12592  0B6F  301E               	movlw	30
 12593  0B70  319B  2340  318A   	fcall	_setMemory_Data
 12594  0B73                     l7546:	
 12595                           
 12596                           ;MCU_B1.c: 1068: }
 12597                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12598  0B73  0024               	movlb	4	; select bank4
 12599  0B74  1D44               	btfss	(_Memory^(0+512)+36),2
 12600  0B75  2B7A               	goto	l1273
 12601                           
 12602                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12603  0B76  1144               	bcf	(_Memory^(0+512)+36),2
 12604                           
 12605                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12606  0B77  0021               	movlb	1	; select bank1
 12607  0B78  11AF               	bcf	_myMain^(0+128),3
 12608                           
 12609                           ;MCU_B1.c: 1073: myMain.First = 0;
 12610  0B79  12AF               	bcf	_myMain^(0+128),5
 12611  0B7A                     l1273:	
 12612                           
 12613                           ;MCU_B1.c: 1075: }
 12614                           ;MCU_B1.c: 1076: GIE = 0;
 12615  0B7A  138B               	bcf	11,7	;volatile
 12616                           
 12617                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12618  0B7B  319B  234C  318A   	fcall	_Flash_Memory_Erasing
 12619                           
 12620                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12621  0B7E  3190  2092         	fcall	_Flash_Memory_Write
 12622                           
 12623                           ;MCU_B1.c: 1079: GIE = 1;
 12624  0B80  178B               	bsf	11,7	;volatile
 12625  0B81  0008               	return
 12626  0B82                     __end_of_Flash_Memory_Modify:	
 12627                           
 12628                           	psect	text80
 12629  1B4C                     __ptext80:	
 12630 ;; *************** function _Flash_Memory_Erasing *****************
 12631 ;; Defined at:
 12632 ;;		line 1042 in file "../src/MCU_B1.c"
 12633 ;; Parameters:    Size  Location     Type
 12634 ;;		None
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;		None
 12637 ;; Return value:  Size  Location     Type
 12638 ;;		None               void
 12639 ;; Registers used:
 12640 ;;		wreg, status,2, status,0, pclath, cstack
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;Total ram usage:        0 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    6
 12653 ;; This function calls:
 12654 ;;		_Flash_Memory_Unlock
 12655 ;; This function is called by:
 12656 ;;		_Flash_Memory_Modify
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _Flash_Memory_Erasing
 12662  1B4C                     _Flash_Memory_Erasing:	
 12663                           
 12664                           ;MCU_B1.c: 1043: CFGS = 0;
 12665                           
 12666                           ;incstack = 0
 12667                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12668  1B4C  0023               	movlb	3	; select bank3
 12669  1B4D  1315               	bcf	21,6	;volatile
 12670                           
 12671                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12672  1B4E  3030               	movlw	48
 12673  1B4F  0092               	movwf	18	;volatile
 12674                           
 12675                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12676  1B50  0191               	clrf	17	;volatile
 12677                           
 12678                           ;MCU_B1.c: 1046: FREE = 1;
 12679  1B51  1615               	bsf	21,4	;volatile
 12680                           
 12681                           ;MCU_B1.c: 1047: WREN = 1;
 12682  1B52  1515               	bsf	21,2	;volatile
 12683                           
 12684                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12685  1B53  319A  22B9         	fcall	_Flash_Memory_Unlock
 12686                           
 12687                           ;MCU_B1.c: 1049: WREN = 0;
 12688  1B55  0023               	movlb	3	; select bank3
 12689  1B56  1115               	bcf	21,2	;volatile
 12690  1B57  0008               	return
 12691  1B58                     __end_of_Flash_Memory_Erasing:	
 12692                           
 12693                           	psect	text81
 12694  06FC                     __ptext81:	
 12695 ;; *************** function _Flash_Memory_Initialization *****************
 12696 ;; Defined at:
 12697 ;;		line 932 in file "../src/MCU_B1.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;  value           1    5[BANK0 ] unsigned char 
 12702 ;; Return value:  Size  Location     Type
 12703 ;;		None               void
 12704 ;; Registers used:
 12705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;Total ram usage:        2 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    7
 12718 ;; This function calls:
 12719 ;;		_Flash_Memory_Read
 12720 ;;		_Flash_Memory_Write
 12721 ;;		_setMemory_Data
 12722 ;; This function is called by:
 12723 ;;		_main
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           
 12728                           ;psect for function _Flash_Memory_Initialization
 12729  06FC                     _Flash_Memory_Initialization:	
 12730                           
 12731                           ;MCU_B1.c: 933: char value = 0;
 12732                           
 12733                           ;incstack = 0
 12734                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12735  06FC  0020               	movlb	0	; select bank0
 12736  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12737                           
 12738                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12739  06FE  301F               	movlw	31
 12740  06FF  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12741  0702  3AAA               	xorlw	170
 12742  0703  1D03               	skipz
 12743  0704  2F7E               	goto	l7938
 12744                           
 12745                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12746  0705  3000               	movlw	0
 12747  0706  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12748  0709  0020               	movlb	0	; select bank0
 12749  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12750  070B  0021               	movlb	1	; select bank1
 12751  070C  086E               	movf	_product^(0+128),w
 12752  070D  3E0C               	addlw	12
 12753  070E  0086               	movwf	6
 12754  070F  3001               	movlw	1	; select bank2/3
 12755  0710  0087               	movwf	7
 12756  0711  0020               	movlb	0	; select bank0
 12757  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12758  0713  0081               	movwf	1
 12759                           
 12760                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12761  0714  3001               	movlw	1
 12762  0715  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12763  0718  0020               	movlb	0	; select bank0
 12764  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12765  071A  0021               	movlb	1	; select bank1
 12766  071B  086E               	movf	_product^(0+128),w
 12767  071C  3E0D               	addlw	13
 12768  071D  0086               	movwf	6
 12769  071E  3001               	movlw	1	; select bank2/3
 12770  071F  0087               	movwf	7
 12771  0720  0020               	movlb	0	; select bank0
 12772  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12773  0722  0081               	movwf	1
 12774                           
 12775                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12776  0723  3002               	movlw	2
 12777  0724  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12778  0727  0020               	movlb	0	; select bank0
 12779  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12780  0729  0021               	movlb	1	; select bank1
 12781  072A  086E               	movf	_product^(0+128),w
 12782  072B  3E0E               	addlw	14
 12783  072C  0086               	movwf	6
 12784  072D  3001               	movlw	1	; select bank2/3
 12785  072E  0087               	movwf	7
 12786  072F  0020               	movlb	0	; select bank0
 12787  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12788  0731  0081               	movwf	1
 12789                           
 12790                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12791  0732  3003               	movlw	3
 12792  0733  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12793  0736  0020               	movlb	0	; select bank0
 12794  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12795  0738  0021               	movlb	1	; select bank1
 12796  0739  086E               	movf	_product^(0+128),w
 12797  073A  3E15               	addlw	21
 12798  073B  0086               	movwf	6
 12799  073C  3001               	movlw	1	; select bank2/3
 12800  073D  0087               	movwf	7
 12801  073E  0020               	movlb	0	; select bank0
 12802  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12803  0740  0081               	movwf	1
 12804                           
 12805                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12806  0741  3004               	movlw	4
 12807  0742  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12808  0745  0020               	movlb	0	; select bank0
 12809  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12810  0747  0021               	movlb	1	; select bank1
 12811  0748  086E               	movf	_product^(0+128),w
 12812  0749  3E16               	addlw	22
 12813  074A  0086               	movwf	6
 12814  074B  3001               	movlw	1	; select bank2/3
 12815  074C  0087               	movwf	7
 12816  074D  0020               	movlb	0	; select bank0
 12817  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12818  074F  0081               	movwf	1
 12819                           
 12820                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12821  0750  3005               	movlw	5
 12822  0751  319D  25F8  3186   	fcall	_Flash_Memory_Read
 12823  0754  0020               	movlb	0	; select bank0
 12824  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12825  0756  0021               	movlb	1	; select bank1
 12826  0757  086E               	movf	_product^(0+128),w
 12827  0758  3E17               	addlw	23
 12828  0759  0086               	movwf	6
 12829  075A  3001               	movlw	1	; select bank2/3
 12830  075B  0087               	movwf	7
 12831  075C  0020               	movlb	0	; select bank0
 12832  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12833  075E  0081               	movwf	1
 12834                           
 12835                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12836  075F  0021               	movlb	1	; select bank1
 12837  0760  086E               	movf	_product^(0+128),w
 12838  0761  3E0C               	addlw	12
 12839  0762  0086               	movwf	6
 12840  0763  3001               	movlw	1	; select bank2/3
 12841  0764  0087               	movwf	7
 12842  0765  0801               	movf	1,w
 12843  0766  3AFF               	xorlw	255
 12844  0767  1D03               	skipz
 12845  0768  0008               	return
 12846  0769  086E               	movf	_product^(0+128),w
 12847  076A  3E0D               	addlw	13
 12848  076B  0086               	movwf	6
 12849  076C  3001               	movlw	1	; select bank2/3
 12850  076D  0087               	movwf	7
 12851  076E  0801               	movf	1,w
 12852  076F  3AFF               	xorlw	255
 12853  0770  1D03               	skipz
 12854  0771  0008               	return
 12855  0772  086E               	movf	_product^(0+128),w
 12856  0773  3E0E               	addlw	14
 12857  0774  0086               	movwf	6
 12858  0775  3001               	movlw	1	; select bank2/3
 12859  0776  0087               	movwf	7
 12860  0777  0801               	movf	1,w
 12861  0778  3AFF               	xorlw	255
 12862  0779  1D03               	skipz
 12863  077A  0008               	return
 12864                           
 12865                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12866  077B  15AF               	bsf	_myMain^(0+128),3
 12867                           
 12868                           ;MCU_B1.c: 951: myMain.First = 1;
 12869  077C  16AF               	bsf	_myMain^(0+128),5
 12870                           
 12871                           ;MCU_B1.c: 952: }
 12872                           ;MCU_B1.c: 953: } else {
 12873  077D  0008               	return
 12874  077E                     l7938:	
 12875                           
 12876                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12877  077E  30FF               	movlw	255
 12878  077F  0020               	movlb	0	; select bank0
 12879  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12880  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12881  0782  00A0               	movwf	setMemory_Data@data
 12882  0783  3000               	movlw	0
 12883  0784  319B  2340  3186   	fcall	_setMemory_Data
 12884                           
 12885                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12886  0787  30FF               	movlw	255
 12887  0788  0020               	movlb	0	; select bank0
 12888  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12889  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12890  078B  00A0               	movwf	setMemory_Data@data
 12891  078C  3001               	movlw	1
 12892  078D  319B  2340  3186   	fcall	_setMemory_Data
 12893                           
 12894                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12895  0790  30FF               	movlw	255
 12896  0791  0020               	movlb	0	; select bank0
 12897  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12898  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12899  0794  00A0               	movwf	setMemory_Data@data
 12900  0795  3002               	movlw	2
 12901  0796  319B  2340  3186   	fcall	_setMemory_Data
 12902                           
 12903                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12904  0799  30FF               	movlw	255
 12905  079A  0020               	movlb	0	; select bank0
 12906  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12907  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12908  079D  00A0               	movwf	setMemory_Data@data
 12909  079E  3003               	movlw	3
 12910  079F  319B  2340  3186   	fcall	_setMemory_Data
 12911                           
 12912                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12913  07A2  30FF               	movlw	255
 12914  07A3  0020               	movlb	0	; select bank0
 12915  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 12916  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 12917  07A6  00A0               	movwf	setMemory_Data@data
 12918  07A7  3004               	movlw	4
 12919  07A8  319B  2340  3186   	fcall	_setMemory_Data
 12920                           
 12921                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12922  07AB  30FF               	movlw	255
 12923  07AC  0020               	movlb	0	; select bank0
 12924  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 12925  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 12926  07AF  00A0               	movwf	setMemory_Data@data
 12927  07B0  3005               	movlw	5
 12928  07B1  319B  2340  3186   	fcall	_setMemory_Data
 12929                           
 12930                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12931  07B4  30AA               	movlw	170
 12932  07B5  0020               	movlb	0	; select bank0
 12933  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 12934  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 12935  07B8  00A0               	movwf	setMemory_Data@data
 12936  07B9  301F               	movlw	31
 12937  07BA  319B  2340  3186   	fcall	_setMemory_Data
 12938                           
 12939                           ;MCU_B1.c: 966: GIE = 0;
 12940  07BD  138B               	bcf	11,7	;volatile
 12941                           
 12942                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12943  07BE  3190  2092         	fcall	_Flash_Memory_Write
 12944                           
 12945                           ;MCU_B1.c: 968: GIE = 1;
 12946  07C0  178B               	bsf	11,7	;volatile
 12947                           
 12948                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12949  07C1  0021               	movlb	1	; select bank1
 12950  07C2  15AF               	bsf	_myMain^(0+128),3
 12951                           
 12952                           ;MCU_B1.c: 970: myMain.First = 1;
 12953  07C3  16AF               	bsf	_myMain^(0+128),5
 12954                           
 12955                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12956  07C4  1639               	bsf	(_myMain^(0+128)+10),4
 12957  07C5  0008               	return
 12958  07C6                     __end_of_Flash_Memory_Initialization:	
 12959                           
 12960                           	psect	text82
 12961  1B40                     __ptext82:	
 12962 ;; *************** function _setMemory_Data *****************
 12963 ;; Defined at:
 12964 ;;		line 1094 in file "../src/MCU_B1.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;  address         1    wreg     unsigned char 
 12967 ;;  data            1    0[BANK0 ] unsigned char 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  address         1    2[BANK0 ] unsigned char 
 12970 ;; Return value:  Size  Location     Type
 12971 ;;		None               void
 12972 ;; Registers used:
 12973 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12979 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;Total ram usage:        3 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; Hardware stack levels required when called:    5
 12986 ;; This function calls:
 12987 ;;		Nothing
 12988 ;; This function is called by:
 12989 ;;		_Flash_Memory_Initialization
 12990 ;;		_Flash_Memory_Modify
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           
 12995                           ;psect for function _setMemory_Data
 12996  1B40                     _setMemory_Data:	
 12997                           
 12998                           ;incstack = 0
 12999                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13000                           ;setMemory_Data@address stored from wreg
 13001  1B40  0020               	movlb	0	; select bank0
 13002  1B41  00A2               	movwf	setMemory_Data@address
 13003                           
 13004                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13005  1B42  0820               	movf	setMemory_Data@data,w
 13006  1B43  00A1               	movwf	??_setMemory_Data
 13007  1B44  0822               	movf	setMemory_Data@address,w
 13008  1B45  3E20               	addlw	_Memory& (0+255)
 13009  1B46  0086               	movwf	6
 13010  1B47  3002               	movlw	2	; select bank4/5
 13011  1B48  0087               	movwf	7
 13012  1B49  0821               	movf	??_setMemory_Data,w
 13013  1B4A  0081               	movwf	1
 13014  1B4B  0008               	return
 13015  1B4C                     __end_of_setMemory_Data:	
 13016                           
 13017                           	psect	text83
 13018  1092                     __ptext83:	
 13019 ;; *************** function _Flash_Memory_Write *****************
 13020 ;; Defined at:
 13021 ;;		line 1023 in file "../src/MCU_B1.c"
 13022 ;; Parameters:    Size  Location     Type
 13023 ;;		None
 13024 ;; Auto vars:     Size  Location     Type
 13025 ;;  i               1    1[BANK0 ] unsigned char 
 13026 ;; Return value:  Size  Location     Type
 13027 ;;		None               void
 13028 ;; Registers used:
 13029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13030 ;; Tracked objects:
 13031 ;;		On entry : 0/0
 13032 ;;		On exit  : 0/0
 13033 ;;		Unchanged: 0/0
 13034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;Total ram usage:        2 bytes
 13040 ;; Hardware stack levels used:    1
 13041 ;; Hardware stack levels required when called:    6
 13042 ;; This function calls:
 13043 ;;		_Flash_Memory_Unlock
 13044 ;; This function is called by:
 13045 ;;		_Flash_Memory_Initialization
 13046 ;;		_Flash_Memory_Modify
 13047 ;; This function uses a non-reentrant model
 13048 ;;
 13049                           
 13050                           
 13051                           ;psect for function _Flash_Memory_Write
 13052  1092                     _Flash_Memory_Write:	
 13053                           
 13054                           ;MCU_B1.c: 1024: char i = 0;
 13055                           
 13056                           ;incstack = 0
 13057                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13058  1092  0020               	movlb	0	; select bank0
 13059  1093  01A1               	clrf	Flash_Memory_Write@i
 13060                           
 13061                           ;MCU_B1.c: 1025: CFGS = 0;
 13062  1094  0023               	movlb	3	; select bank3
 13063  1095  1315               	bcf	21,6	;volatile
 13064                           
 13065                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13066  1096  3030               	movlw	48
 13067  1097  0092               	movwf	18	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1027: PMDATH = 0;
 13070  1098  0194               	clrf	20	;volatile
 13071                           
 13072                           ;MCU_B1.c: 1028: FREE = 0;
 13073  1099  1215               	bcf	21,4	;volatile
 13074                           
 13075                           ;MCU_B1.c: 1029: LWLO = 1;
 13076  109A  1695               	bsf	21,5	;volatile
 13077                           
 13078                           ;MCU_B1.c: 1030: WREN = 1;
 13079  109B  1515               	bsf	21,2	;volatile
 13080                           
 13081                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13082  109C  0020               	movlb	0	; select bank0
 13083  109D  01A1               	clrf	Flash_Memory_Write@i
 13084  109E  3020               	movlw	32
 13085  109F  0221               	subwf	Flash_Memory_Write@i,w
 13086  10A0  1803               	btfsc	3,0
 13087  10A1  28BA               	goto	l1263
 13088  10A2                     l7060:	
 13089                           
 13090                           ;MCU_B1.c: 1032: PMADRL = i;
 13091  10A2  0821               	movf	Flash_Memory_Write@i,w
 13092  10A3  0023               	movlb	3	; select bank3
 13093  10A4  0091               	movwf	17	;volatile
 13094                           
 13095                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13096  10A5  0020               	movlb	0	; select bank0
 13097  10A6  0821               	movf	Flash_Memory_Write@i,w
 13098  10A7  3E20               	addlw	_Memory& (0+255)
 13099  10A8  0086               	movwf	6
 13100  10A9  3002               	movlw	2	; select bank4/5
 13101  10AA  0087               	movwf	7
 13102  10AB  0801               	movf	1,w
 13103  10AC  0023               	movlb	3	; select bank3
 13104  10AD  0093               	movwf	19	;volatile
 13105                           
 13106                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13107  10AE  319A  22B9  3190   	fcall	_Flash_Memory_Unlock
 13108  10B1  3001               	movlw	1
 13109  10B2  0020               	movlb	0	; select bank0
 13110  10B3  00A0               	movwf	??_Flash_Memory_Write
 13111  10B4  0820               	movf	??_Flash_Memory_Write,w
 13112  10B5  07A1               	addwf	Flash_Memory_Write@i,f
 13113  10B6  3020               	movlw	32
 13114  10B7  0221               	subwf	Flash_Memory_Write@i,w
 13115  10B8  1C03               	skipc
 13116  10B9  28A2               	goto	l7060
 13117  10BA                     l1263:	
 13118                           
 13119                           ;MCU_B1.c: 1035: }
 13120                           ;MCU_B1.c: 1036: LWLO = 0;
 13121  10BA  0023               	movlb	3	; select bank3
 13122  10BB  1295               	bcf	21,5	;volatile
 13123                           
 13124                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13125  10BC  319A  22B9         	fcall	_Flash_Memory_Unlock
 13126                           
 13127                           ;MCU_B1.c: 1038: WREN = 0;
 13128  10BE  0023               	movlb	3	; select bank3
 13129  10BF  1115               	bcf	21,2	;volatile
 13130  10C0  0008               	return
 13131  10C1                     __end_of_Flash_Memory_Write:	
 13132                           
 13133                           	psect	text84
 13134  1AB9                     __ptext84:	
 13135 ;; *************** function _Flash_Memory_Unlock *****************
 13136 ;; Defined at:
 13137 ;;		line 1002 in file "../src/MCU_B1.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;		None
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;		None
 13142 ;; Return value:  Size  Location     Type
 13143 ;;		None               void
 13144 ;; Registers used:
 13145 ;;		wreg
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;Total ram usage:        0 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    5
 13158 ;; This function calls:
 13159 ;;		Nothing
 13160 ;; This function is called by:
 13161 ;;		_Flash_Memory_Write
 13162 ;;		_Flash_Memory_Erasing
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           
 13167                           ;psect for function _Flash_Memory_Unlock
 13168  1AB9                     _Flash_Memory_Unlock:	
 13169                           
 13170                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13171                           
 13172                           ;incstack = 0
 13173                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13174  1AB9  3055               	movlw	85
 13175  1ABA  0023               	movlb	3	; select bank3
 13176  1ABB  0096               	movwf	22	;volatile
 13177                           
 13178                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13179  1ABC  30AA               	movlw	170
 13180  1ABD  0096               	movwf	22	;volatile
 13181                           
 13182                           ;MCU_B1.c: 1005: WR = 1;
 13183  1ABE  1495               	bsf	21,1	;volatile
 13184                           
 13185                           ;MCU_B1.c: 1006: __nop();
 13186  1ABF  0000               	nop
 13187                           
 13188                           ;MCU_B1.c: 1007: __nop();
 13189  1AC0  0000               	nop
 13190  1AC1  0008               	return
 13191  1AC2                     __end_of_Flash_Memory_Unlock:	
 13192                           
 13193                           	psect	text85
 13194  1DF8                     __ptext85:	
 13195 ;; *************** function _Flash_Memory_Read *****************
 13196 ;; Defined at:
 13197 ;;		line 1011 in file "../src/MCU_B1.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  address         1    wreg     unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  address         1    2[BANK0 ] unsigned char 
 13202 ;;  ret             1    3[BANK0 ] unsigned char 
 13203 ;;  i               1    1[BANK0 ] unsigned char 
 13204 ;; Return value:  Size  Location     Type
 13205 ;;                  1    wreg      unsigned char 
 13206 ;; Registers used:
 13207 ;;		wreg, status,2
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;Total ram usage:        4 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    5
 13220 ;; This function calls:
 13221 ;;		Nothing
 13222 ;; This function is called by:
 13223 ;;		_Flash_Memory_Initialization
 13224 ;;		_Flash_Memory_Modify
 13225 ;; This function uses a non-reentrant model
 13226 ;;
 13227                           
 13228                           
 13229                           ;psect for function _Flash_Memory_Read
 13230  1DF8                     _Flash_Memory_Read:	
 13231                           
 13232                           ;incstack = 0
 13233                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13234                           ;Flash_Memory_Read@address stored from wreg
 13235  1DF8  0020               	movlb	0	; select bank0
 13236  1DF9  00A2               	movwf	Flash_Memory_Read@address
 13237                           
 13238                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13239  1DFA  01A1               	clrf	Flash_Memory_Read@i
 13240  1DFB  01A3               	clrf	Flash_Memory_Read@ret
 13241                           
 13242                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13243  1DFC  3030               	movlw	48
 13244  1DFD  0023               	movlb	3	; select bank3
 13245  1DFE  0092               	movwf	18	;volatile
 13246                           
 13247                           ;MCU_B1.c: 1014: PMADRL = address;
 13248  1DFF  0020               	movlb	0	; select bank0
 13249  1E00  0822               	movf	Flash_Memory_Read@address,w
 13250  1E01  0023               	movlb	3	; select bank3
 13251  1E02  0091               	movwf	17	;volatile
 13252                           
 13253                           ;MCU_B1.c: 1015: CFGS = 0;
 13254  1E03  1315               	bcf	21,6	;volatile
 13255                           
 13256                           ;MCU_B1.c: 1016: RD = 1;
 13257  1E04  1415               	bsf	21,0	;volatile
 13258                           
 13259                           ;MCU_B1.c: 1017: i = PMDATH;
 13260  1E05  0814               	movf	20,w	;volatile
 13261  1E06  0020               	movlb	0	; select bank0
 13262  1E07  00A0               	movwf	??_Flash_Memory_Read
 13263  1E08  0820               	movf	??_Flash_Memory_Read,w
 13264  1E09  00A1               	movwf	Flash_Memory_Read@i
 13265                           
 13266                           ;MCU_B1.c: 1018: ret = PMDATL;
 13267  1E0A  0023               	movlb	3	; select bank3
 13268  1E0B  0813               	movf	19,w	;volatile
 13269  1E0C  0020               	movlb	0	; select bank0
 13270  1E0D  00A0               	movwf	??_Flash_Memory_Read
 13271  1E0E  0820               	movf	??_Flash_Memory_Read,w
 13272  1E0F  00A3               	movwf	Flash_Memory_Read@ret
 13273                           
 13274                           ;MCU_B1.c: 1019: return ret;
 13275  1E10  0823               	movf	Flash_Memory_Read@ret,w
 13276  1E11  0008               	return
 13277  1E12                     __end_of_Flash_Memory_Read:	
 13278                           
 13279                           	psect	text86
 13280  0554                     __ptext86:	
 13281 ;; *************** function _Exception_Main *****************
 13282 ;; Defined at:
 13283 ;;		line 499 in file "../src/Main_B1.c"
 13284 ;; Parameters:    Size  Location     Type
 13285 ;;		None
 13286 ;; Auto vars:     Size  Location     Type
 13287 ;;  i               2   18[BANK0 ] int 
 13288 ;;  i               2   16[BANK0 ] int 
 13289 ;;  lights          1   21[BANK0 ] unsigned char 
 13290 ;;  error           1   20[BANK0 ] unsigned char 
 13291 ;;  count           1   15[BANK0 ] unsigned char 
 13292 ;;  status          1   14[BANK0 ] unsigned char 
 13293 ;; Return value:  Size  Location     Type
 13294 ;;		None               void
 13295 ;; Registers used:
 13296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;Total ram usage:        9 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:    7
 13309 ;; This function calls:
 13310 ;;		_getDimmerLights_Line
 13311 ;;		_getDimmerLights_Status
 13312 ;;		_getMain_All_Error_Status
 13313 ;;		_getMain_All_LightsStatus
 13314 ;;		_setBuz
 13315 ;;		_setDimmerLights_SwOff
 13316 ;;		_setLED
 13317 ;; This function is called by:
 13318 ;;		_main
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           
 13323                           ;psect for function _Exception_Main
 13324  0554                     _Exception_Main:	
 13325                           
 13326                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13327                           
 13328                           ;incstack = 0
 13329                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13330  0554  3000               	movlw	0
 13331  0555  3190  20C1  3185   	fcall	_getMain_All_Error_Status
 13332  0558  0020               	movlb	0	; select bank0
 13333  0559  00AD               	movwf	??_Exception_Main
 13334  055A  082D               	movf	??_Exception_Main,w
 13335  055B  00B4               	movwf	Exception_Main@error
 13336                           
 13337                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13338  055C  01B5               	clrf	Exception_Main@lights
 13339  055D  01AF               	clrf	Exception_Main@count
 13340  055E  0AAF               	incf	Exception_Main@count,f
 13341                           
 13342                           ;Main_B1.c: 502: char status = 0;
 13343  055F  01AE               	clrf	Exception_Main@status
 13344                           
 13345                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13346  0560  0021               	movlb	1	; select bank1
 13347  0561  1DB9               	btfss	(_myMain^(0+128)+10),3
 13348  0562  2D72               	goto	l8286
 13349                           
 13350                           ;Main_B1.c: 505: if (error == 0) {
 13351  0563  0020               	movlb	0	; select bank0
 13352  0564  08B4               	movf	Exception_Main@error,f
 13353  0565  1D03               	skipz
 13354  0566  0008               	return
 13355                           
 13356                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13357  0567  0021               	movlb	1	; select bank1
 13358  0568  11B9               	bcf	(_myMain^(0+128)+10),3
 13359                           
 13360                           ;Main_B1.c: 509: setLED(99, 10);
 13361  0569  300A               	movlw	10
 13362  056A  0020               	movlb	0	; select bank0
 13363  056B  00AD               	movwf	??_Exception_Main
 13364  056C  082D               	movf	??_Exception_Main,w
 13365  056D  00A2               	movwf	setLED@command
 13366  056E  3063               	movlw	99
 13367  056F  3187  27C6         	fcall	_setLED
 13368                           
 13369                           ;Main_B1.c: 522: }
 13370                           ;Main_B1.c: 523: } else {
 13371  0571  0008               	return
 13372  0572                     l8286:	
 13373                           
 13374                           ;Main_B1.c: 524: if (error != 0) {
 13375  0572  0020               	movlb	0	; select bank0
 13376  0573  0834               	movf	Exception_Main@error,w
 13377  0574  1903               	btfsc	3,2
 13378  0575  0008               	return
 13379                           
 13380                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13381  0576  0021               	movlb	1	; select bank1
 13382  0577  15B9               	bsf	(_myMain^(0+128)+10),3
 13383                           
 13384                           ;Main_B1.c: 527: setLED(99, 11);
 13385  0578  300B               	movlw	11
 13386  0579  0020               	movlb	0	; select bank0
 13387  057A  00AD               	movwf	??_Exception_Main
 13388  057B  082D               	movf	??_Exception_Main,w
 13389  057C  00A2               	movwf	setLED@command
 13390  057D  3063               	movlw	99
 13391  057E  3187  27C6  3185   	fcall	_setLED
 13392                           
 13393                           ;Main_B1.c: 538: switch (error) {
 13394  0581  2E1E               	goto	l8334
 13395  0582                     l8292:	
 13396                           ;Main_B1.c: 539: case 2:
 13397                           
 13398                           
 13399                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13400  0582  319A  22C2  3185   	fcall	_getMain_All_LightsStatus
 13401  0585  3A01               	xorlw	1
 13402  0586  1D03               	skipz
 13403  0587  2D91               	goto	l8296
 13404                           
 13405                           ;Main_B1.c: 547: setBuz(10, 300);
 13406  0588  302C               	movlw	44
 13407  0589  0020               	movlb	0	; select bank0
 13408  058A  00A9               	movwf	setBuz@time
 13409  058B  3001               	movlw	1
 13410  058C  00AA               	movwf	setBuz@time+1
 13411  058D  300A               	movlw	10
 13412  058E  3194  2425  3185   	fcall	_setBuz
 13413  0591                     l8296:	
 13414                           
 13415                           ;Main_B1.c: 548: }
 13416                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13417  0591  0020               	movlb	0	; select bank0
 13418  0592  01B0               	clrf	Exception_Main@i
 13419  0593  01B1               	clrf	Exception_Main@i+1
 13420  0594                     l8306:	
 13421  0594  0831               	movf	Exception_Main@i+1,w
 13422  0595  3A80               	xorlw	128
 13423  0596  00AD               	movwf	??_Exception_Main
 13424  0597  3080               	movlw	128
 13425  0598  022D               	subwf	??_Exception_Main,w
 13426  0599  1D03               	skipz
 13427  059A  2D9D               	goto	u8595
 13428  059B  082F               	movf	Exception_Main@count,w
 13429  059C  0230               	subwf	Exception_Main@i,w
 13430  059D                     u8595:	
 13431  059D  1803               	btfsc	3,0
 13432  059E  2DBF               	goto	u8590
 13433                           
 13434                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13435  059F  0020               	movlb	0	; select bank0
 13436  05A0  0830               	movf	Exception_Main@i,w
 13437  05A1  3E01               	addlw	1
 13438  05A2  319B  23D2  3185   	fcall	_getDimmerLights_Status
 13439  05A5  3A01               	xorlw	1
 13440  05A6  1D03               	skipz
 13441  05A7  2DB9               	goto	l8304
 13442                           
 13443                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13444  05A8  0021               	movlb	1	; select bank1
 13445  05A9  084C               	movf	_DimmerLights^(0+128),w
 13446  05AA  0086               	movwf	6
 13447  05AB  3001               	movlw	1	; select bank2/3
 13448  05AC  0087               	movwf	7
 13449  05AD  1401               	bsf	1,0
 13450                           
 13451                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13452  05AE  0A4C               	incf	_DimmerLights^(0+128),w
 13453  05AF  0086               	movwf	6
 13454  05B0  3001               	movlw	1	; select bank2/3
 13455  05B1  0087               	movwf	7
 13456  05B2  1001               	bcf	1,0
 13457                           
 13458                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13459  05B3  0020               	movlb	0	; select bank0
 13460  05B4  0830               	movf	Exception_Main@i,w
 13461  05B5  3E01               	addlw	1
 13462  05B6  3191  21FE  3185   	fcall	_setDimmerLights_SwOff
 13463  05B9                     l8304:	
 13464  05B9  3001               	movlw	1
 13465  05BA  0020               	movlb	0	; select bank0
 13466  05BB  07B0               	addwf	Exception_Main@i,f
 13467  05BC  3000               	movlw	0
 13468  05BD  3DB1               	addwfc	Exception_Main@i+1,f
 13469  05BE  2D94               	goto	l8306
 13470  05BF                     u8590:	
 13471  05BF  0020               	movlb	0	; select bank0
 13472  05C0  0008               	return
 13473  05C1                     l8308:	
 13474                           ;Main_B1.c: 561: case 3:
 13475                           
 13476                           ;Main_B1.c: 556: }
 13477                           ;Main_B1.c: 557: }
 13478                           ;Main_B1.c: 560: break;
 13479                           
 13480                           
 13481                           ;Main_B1.c: 563: setBuz(5, 300);
 13482  05C1  302C               	movlw	44
 13483  05C2  0020               	movlb	0	; select bank0
 13484  05C3  00A9               	movwf	setBuz@time
 13485  05C4  3001               	movlw	1
 13486  05C5  00AA               	movwf	setBuz@time+1
 13487  05C6  3005               	movlw	5
 13488  05C7  3194  2425  3185   	fcall	_setBuz
 13489                           
 13490                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13491  05CA  319A  22CC  3185   	fcall	_getDimmerLights_Line
 13492  05CD  0020               	movlb	0	; select bank0
 13493  05CE  00AD               	movwf	??_Exception_Main
 13494  05CF  082D               	movf	??_Exception_Main,w
 13495  05D0  00B5               	movwf	Exception_Main@lights
 13496                           
 13497                           ;Main_B1.c: 565: if (lights == 0) {
 13498  05D1  08B5               	movf	Exception_Main@lights,f
 13499  05D2  1D03               	skipz
 13500  05D3  2E03               	goto	l8326
 13501                           
 13502                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13503  05D4  01B2               	clrf	Exception_Main@i_3624
 13504  05D5  01B3               	clrf	Exception_Main@i_3624+1
 13505  05D6                     l8324:	
 13506  05D6  0833               	movf	Exception_Main@i_3624+1,w
 13507  05D7  3A80               	xorlw	128
 13508  05D8  00AD               	movwf	??_Exception_Main
 13509  05D9  3080               	movlw	128
 13510  05DA  022D               	subwf	??_Exception_Main,w
 13511  05DB  1D03               	skipz
 13512  05DC  2DDF               	goto	u8625
 13513  05DD  082F               	movf	Exception_Main@count,w
 13514  05DE  0232               	subwf	Exception_Main@i_3624,w
 13515  05DF                     u8625:	
 13516  05DF  1803               	btfsc	3,0
 13517  05E0  2E01               	goto	u8620
 13518                           
 13519                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13520  05E1  0020               	movlb	0	; select bank0
 13521  05E2  0832               	movf	Exception_Main@i_3624,w
 13522  05E3  3E01               	addlw	1
 13523  05E4  319B  23D2  3185   	fcall	_getDimmerLights_Status
 13524  05E7  3A01               	xorlw	1
 13525  05E8  1D03               	skipz
 13526  05E9  2DFB               	goto	l8322
 13527                           
 13528                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13529  05EA  0021               	movlb	1	; select bank1
 13530  05EB  084C               	movf	_DimmerLights^(0+128),w
 13531  05EC  0086               	movwf	6
 13532  05ED  3001               	movlw	1	; select bank2/3
 13533  05EE  0087               	movwf	7
 13534  05EF  1401               	bsf	1,0
 13535                           
 13536                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13537  05F0  0A4C               	incf	_DimmerLights^(0+128),w
 13538  05F1  0086               	movwf	6
 13539  05F2  3001               	movlw	1	; select bank2/3
 13540  05F3  0087               	movwf	7
 13541  05F4  1001               	bcf	1,0
 13542                           
 13543                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13544  05F5  0020               	movlb	0	; select bank0
 13545  05F6  0832               	movf	Exception_Main@i_3624,w
 13546  05F7  3E01               	addlw	1
 13547  05F8  3191  21FE  3185   	fcall	_setDimmerLights_SwOff
 13548  05FB                     l8322:	
 13549  05FB  3001               	movlw	1
 13550  05FC  0020               	movlb	0	; select bank0
 13551  05FD  07B2               	addwf	Exception_Main@i_3624,f
 13552  05FE  3000               	movlw	0
 13553  05FF  3DB3               	addwfc	Exception_Main@i_3624+1,f
 13554  0600  2DD6               	goto	l8324
 13555  0601                     u8620:	
 13556  0601  0020               	movlb	0	; select bank0
 13557  0602  0008               	return
 13558  0603                     l8326:	
 13559                           ;Main_B1.c: 573: }
 13560                           ;Main_B1.c: 574: }
 13561                           ;Main_B1.c: 575: } else {
 13562                           
 13563                           
 13564                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13565  0603  0020               	movlb	0	; select bank0
 13566  0604  0835               	movf	Exception_Main@lights,w
 13567  0605  319B  23D2  3185   	fcall	_getDimmerLights_Status
 13568  0608  3A01               	xorlw	1
 13569  0609  1903               	btfsc	3,2
 13570  060A  2E0D               	goto	l8328
 13571  060B  0020               	movlb	0	; select bank0
 13572  060C  0008               	return
 13573  060D                     l8328:	
 13574                           
 13575                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13576  060D  0021               	movlb	1	; select bank1
 13577  060E  084C               	movf	_DimmerLights^(0+128),w
 13578  060F  0086               	movwf	6
 13579  0610  3001               	movlw	1	; select bank2/3
 13580  0611  0087               	movwf	7
 13581  0612  1401               	bsf	1,0
 13582                           
 13583                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13584  0613  0A4C               	incf	_DimmerLights^(0+128),w
 13585  0614  0086               	movwf	6
 13586  0615  3001               	movlw	1	; select bank2/3
 13587  0616  0087               	movwf	7
 13588  0617  1001               	bcf	1,0
 13589                           
 13590                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13591  0618  0020               	movlb	0	; select bank0
 13592  0619  0835               	movf	Exception_Main@lights,w
 13593  061A  3191  21FE         	fcall	_setDimmerLights_SwOff
 13594  061C  0020               	movlb	0	; select bank0
 13595  061D  0008               	return
 13596  061E                     l8334:	
 13597                           ;Main_B1.c: 586: }
 13598                           
 13599                           ;Main_B1.c: 582: }
 13600                           ;Main_B1.c: 583: }
 13601                           ;Main_B1.c: 585: break;
 13602                           
 13603  061E  0020               	movlb	0	; select bank0
 13604  061F  0834               	movf	Exception_Main@error,w
 13605                           
 13606                           ; Switch size 1, requested type "space"
 13607                           ; Number of cases is 2, Range of values is 2 to 3
 13608                           ; switch strategies available:
 13609                           ; Name         Instructions Cycles
 13610                           ; simple_byte            7     4 (average)
 13611                           ; direct_byte           13     9 (fixed)
 13612                           ; jumptable            263     9 (fixed)
 13613                           ;	Chosen strategy is simple_byte
 13614  0620  3A02               	xorlw	2	; case 2
 13615  0621  1903               	skipnz
 13616  0622  2D82               	goto	l8292
 13617  0623  3A01               	xorlw	1	; case 3
 13618  0624  1903               	skipnz
 13619  0625  2DC1               	goto	l8308
 13620  0626  2E28               	goto	l1505
 13621  0627  0008               	return
 13622  0628                     l1505:	
 13623  0628  0008               	return
 13624  0629                     __end_of_Exception_Main:	
 13625                           
 13626                           	psect	text87
 13627  1ACC                     __ptext87:	
 13628 ;; *************** function _getDimmerLights_Line *****************
 13629 ;; Defined at:
 13630 ;;		line 1055 in file "../src/Dimmer_B1.c"
 13631 ;; Parameters:    Size  Location     Type
 13632 ;;		None
 13633 ;; Auto vars:     Size  Location     Type
 13634 ;;  line            1    0[BANK0 ] unsigned char 
 13635 ;; Return value:  Size  Location     Type
 13636 ;;                  1    wreg      unsigned char 
 13637 ;; Registers used:
 13638 ;;		wreg, status,2
 13639 ;; Tracked objects:
 13640 ;;		On entry : 0/0
 13641 ;;		On exit  : 0/0
 13642 ;;		Unchanged: 0/0
 13643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;Total ram usage:        1 bytes
 13649 ;; Hardware stack levels used:    1
 13650 ;; Hardware stack levels required when called:    5
 13651 ;; This function calls:
 13652 ;;		Nothing
 13653 ;; This function is called by:
 13654 ;;		_Exception_Main
 13655 ;; This function uses a non-reentrant model
 13656 ;;
 13657                           
 13658                           
 13659                           ;psect for function _getDimmerLights_Line
 13660  1ACC                     _getDimmerLights_Line:	
 13661                           
 13662                           ;Dimmer_B1.c: 1056: char line = 0;
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13666  1ACC  0020               	movlb	0	; select bank0
 13667  1ACD  01A0               	clrf	getDimmerLights_Line@line
 13668                           
 13669                           ;Dimmer_B1.c: 1058: if (DimmerLights1.Line == 1) {
 13670  1ACE  0022               	movlb	2	; select bank2
 13671  1ACF  1CE1               	btfss	(_DimmerLights1^(0+256)+1),1
 13672  1AD0  2AD4               	goto	l7310
 13673                           
 13674                           ;Dimmer_B1.c: 1059: line = 1;
 13675  1AD1  0020               	movlb	0	; select bank0
 13676  1AD2  01A0               	clrf	getDimmerLights_Line@line
 13677  1AD3  0AA0               	incf	getDimmerLights_Line@line,f
 13678  1AD4                     l7310:	
 13679                           
 13680                           ;Dimmer_B1.c: 1060: }
 13681                           ;Dimmer_B1.c: 1072: return line;
 13682  1AD4  0020               	movlb	0	; select bank0
 13683  1AD5  0820               	movf	getDimmerLights_Line@line,w
 13684  1AD6  0008               	return
 13685  1AD7                     __end_of_getDimmerLights_Line:	
 13686                           
 13687                           	psect	text88
 13688  1E62                     __ptext88:	
 13689 ;; *************** function _DimmerLights_Main *****************
 13690 ;; Defined at:
 13691 ;;		line 781 in file "../src/Dimmer_B1.c"
 13692 ;; Parameters:    Size  Location     Type
 13693 ;;		None
 13694 ;; Auto vars:     Size  Location     Type
 13695 ;;		None
 13696 ;; Return value:  Size  Location     Type
 13697 ;;		None               void
 13698 ;; Registers used:
 13699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13700 ;; Tracked objects:
 13701 ;;		On entry : 0/0
 13702 ;;		On exit  : 0/0
 13703 ;;		Unchanged: 0/0
 13704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;Total ram usage:        0 bytes
 13710 ;; Hardware stack levels used:    1
 13711 ;; Hardware stack levels required when called:   10
 13712 ;; This function calls:
 13713 ;;		_getLoad_OK
 13714 ;;		_getMain_All_Error_Status
 13715 ;;		_getMain_All_LightsStatus
 13716 ;;		_setDimmerLights_Main
 13717 ;; This function is called by:
 13718 ;;		_main
 13719 ;; This function uses a non-reentrant model
 13720 ;;
 13721                           
 13722                           
 13723                           ;psect for function _DimmerLights_Main
 13724  1E62                     _DimmerLights_Main:	
 13725                           
 13726                           ;Dimmer_B1.c: 784: if (Dimmer.LoadGO == 1) {
 13727                           
 13728                           ;incstack = 0
 13729                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13730  1E62  0022               	movlb	2	; select bank2
 13731  1E63  1CAC               	btfss	_Dimmer^(0+256),1
 13732  1E64  2E7A               	goto	l7892
 13733                           
 13734                           ;Dimmer_B1.c: 785: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13735  1E65  319A  228F  319E   	fcall	_getLoad_OK
 13736  1E68  3A01               	xorlw	1
 13737  1E69  1903               	skipnz
 13738  1E6A  2E78               	goto	l760
 13739  1E6B  3000               	movlw	0
 13740  1E6C  3190  20C1  319E   	fcall	_getMain_All_Error_Status
 13741  1E6F  3800               	iorlw	0
 13742  1E70  1D03               	skipz
 13743  1E71  2E78               	goto	l760
 13744  1E72  319A  22C2  319E   	fcall	_getMain_All_LightsStatus
 13745  1E75  3800               	iorlw	0
 13746  1E76  1D03               	skipz
 13747  1E77  2E7A               	goto	l7892
 13748  1E78                     l760:	
 13749                           
 13750                           ;Dimmer_B1.c: 786: Dimmer.LoadGO = 0;
 13751  1E78  0022               	movlb	2	; select bank2
 13752  1E79  10AC               	bcf	_Dimmer^(0+256),1
 13753  1E7A                     l7892:	
 13754                           
 13755                           ;Dimmer_B1.c: 787: }
 13756                           ;Dimmer_B1.c: 788: }
 13757                           ;Dimmer_B1.c: 792: setDimmerLights_Main(1);
 13758  1E7A  3001               	movlw	1
 13759  1E7B  3197  272A         	fcall	_setDimmerLights_Main
 13760  1E7D  0008               	return
 13761  1E7E                     __end_of_DimmerLights_Main:	
 13762                           
 13763                           	psect	text89
 13764  172A                     __ptext89:	
 13765 ;; *************** function _setDimmerLights_Main *****************
 13766 ;; Defined at:
 13767 ;;		line 810 in file "../src/Dimmer_B1.c"
 13768 ;; Parameters:    Size  Location     Type
 13769 ;;  lights          1    wreg     unsigned char 
 13770 ;; Auto vars:     Size  Location     Type
 13771 ;;  lights          1    1[BANK1 ] unsigned char 
 13772 ;; Return value:  Size  Location     Type
 13773 ;;		None               void
 13774 ;; Registers used:
 13775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13776 ;; Tracked objects:
 13777 ;;		On entry : 0/0
 13778 ;;		On exit  : 0/0
 13779 ;;		Unchanged: 0/0
 13780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13785 ;;Total ram usage:        1 bytes
 13786 ;; Hardware stack levels used:    1
 13787 ;; Hardware stack levels required when called:    9
 13788 ;; This function calls:
 13789 ;;		_DimmerLights_SelectPointer
 13790 ;;		_getDimmerLights_Allow_Condition
 13791 ;;		_getMain_All_LightsStatus
 13792 ;;		_setDimmerLights_Dimming
 13793 ;;		_setDimmerLights_OnOff
 13794 ;; This function is called by:
 13795 ;;		_DimmerLights_Main
 13796 ;; This function uses a non-reentrant model
 13797 ;;
 13798                           
 13799                           
 13800                           ;psect for function _setDimmerLights_Main
 13801  172A                     _setDimmerLights_Main:	
 13802                           
 13803                           ;incstack = 0
 13804                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13805                           ;setDimmerLights_Main@lights stored from wreg
 13806  172A  0021               	movlb	1	; select bank1
 13807  172B  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13808                           
 13809                           ;Dimmer_B1.c: 812: DimmerLights_SelectPointer(lights);
 13810  172C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13811  172D  319B  2304  3197   	fcall	_DimmerLights_SelectPointer
 13812                           
 13813                           ;Dimmer_B1.c: 813: if (DimmerLights->Trigger == 1) {
 13814  1730  0021               	movlb	1	; select bank1
 13815  1731  084C               	movf	_DimmerLights^(0+128),w
 13816  1732  0086               	movwf	6
 13817  1733  3001               	movlw	1	; select bank2/3
 13818  1734  0087               	movwf	7
 13819  1735  1C81               	btfss	1,1
 13820  1736  2F59               	goto	l7288
 13821                           
 13822                           ;Dimmer_B1.c: 814: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13823  1737  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13824  1738  319D  256A  3197   	fcall	_getDimmerLights_Allow_Condition
 13825  173B  3800               	iorlw	0
 13826  173C  1D03               	skipz
 13827  173D  0008               	return
 13828                           
 13829                           ;Dimmer_B1.c: 815: DimmerLights->Trigger = 0;
 13830  173E  0021               	movlb	1	; select bank1
 13831  173F  084C               	movf	_DimmerLights^(0+128),w
 13832  1740  0086               	movwf	6
 13833  1741  3001               	movlw	1	; select bank2/3
 13834  1742  0087               	movwf	7
 13835  1743  1081               	bcf	1,1
 13836                           
 13837                           ;Dimmer_B1.c: 816: if (DimmerLights->Switch == 1) {
 13838  1744  084C               	movf	_DimmerLights^(0+128),w
 13839  1745  0086               	movwf	6
 13840  1746  3001               	movlw	1	; select bank2/3
 13841  1747  0087               	movwf	7
 13842  1748  1D01               	btfss	1,2
 13843  1749  2F52               	goto	l7286
 13844                           
 13845                           ;Dimmer_B1.c: 817: setDimmerLights_OnOff(lights, 1);
 13846  174A  0020               	movlb	0	; select bank0
 13847  174B  01ED               	clrf	setDimmerLights_OnOff@command
 13848  174C  0AED               	incf	setDimmerLights_OnOff@command,f
 13849  174D  0021               	movlb	1	; select bank1
 13850  174E  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13851  174F  318F  273A         	fcall	_setDimmerLights_OnOff
 13852                           
 13853                           ;Dimmer_B1.c: 818: } else {
 13854  1751  0008               	return
 13855  1752                     l7286:	
 13856                           
 13857                           ;Dimmer_B1.c: 819: setDimmerLights_OnOff(lights, 0);
 13858  1752  0020               	movlb	0	; select bank0
 13859  1753  01ED               	clrf	setDimmerLights_OnOff@command
 13860  1754  0021               	movlb	1	; select bank1
 13861  1755  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13862  1756  318F  273A         	fcall	_setDimmerLights_OnOff
 13863                           
 13864                           ;Dimmer_B1.c: 820: }
 13865                           ;Dimmer_B1.c: 821: }
 13866                           ;Dimmer_B1.c: 822: } else {
 13867  1758  0008               	return
 13868  1759                     l7288:	
 13869                           
 13870                           ;Dimmer_B1.c: 823: if (getMain_All_LightsStatus() == 1) {
 13871  1759  319A  22C2  3197   	fcall	_getMain_All_LightsStatus
 13872  175C  3A01               	xorlw	1
 13873  175D  1D03               	skipz
 13874  175E  2F88               	goto	l7300
 13875                           
 13876                           ;Dimmer_B1.c: 824: if (DimmerLights->DimmingTrigger == 1) {
 13877  175F  0021               	movlb	1	; select bank1
 13878  1760  084C               	movf	_DimmerLights^(0+128),w
 13879  1761  0086               	movwf	6
 13880  1762  3001               	movlw	1	; select bank2/3
 13881  1763  0087               	movwf	7
 13882  1764  1E01               	btfss	1,4
 13883  1765  0008               	return
 13884                           
 13885                           ;Dimmer_B1.c: 825: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13886  1766  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13887  1767  319D  256A  3197   	fcall	_getDimmerLights_Allow_Condition
 13888  176A  3800               	iorlw	0
 13889  176B  1D03               	skipz
 13890  176C  0008               	return
 13891                           
 13892                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13893  176D  0021               	movlb	1	; select bank1
 13894  176E  084C               	movf	_DimmerLights^(0+128),w
 13895  176F  0086               	movwf	6
 13896  1770  3001               	movlw	1	; select bank2/3
 13897  1771  0087               	movwf	7
 13898  1772  1201               	bcf	1,4
 13899                           
 13900                           ;Dimmer_B1.c: 827: if (DimmerLights->DimmingSwitch == 1) {
 13901  1773  084C               	movf	_DimmerLights^(0+128),w
 13902  1774  0086               	movwf	6
 13903  1775  3001               	movlw	1	; select bank2/3
 13904  1776  0087               	movwf	7
 13905  1777  1E81               	btfss	1,5
 13906  1778  2F81               	goto	l7298
 13907                           
 13908                           ;Dimmer_B1.c: 828: setDimmerLights_Dimming(lights, 1);
 13909  1779  0020               	movlb	0	; select bank0
 13910  177A  01EA               	clrf	setDimmerLights_Dimming@status
 13911  177B  0AEA               	incf	setDimmerLights_Dimming@status,f
 13912  177C  0021               	movlb	1	; select bank1
 13913  177D  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13914  177E  3193  23CF         	fcall	_setDimmerLights_Dimming
 13915                           
 13916                           ;Dimmer_B1.c: 829: } else {
 13917  1780  0008               	return
 13918  1781                     l7298:	
 13919                           
 13920                           ;Dimmer_B1.c: 830: setDimmerLights_Dimming(lights, 0);
 13921  1781  0020               	movlb	0	; select bank0
 13922  1782  01EA               	clrf	setDimmerLights_Dimming@status
 13923  1783  0021               	movlb	1	; select bank1
 13924  1784  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13925  1785  3193  23CF         	fcall	_setDimmerLights_Dimming
 13926                           
 13927                           ;Dimmer_B1.c: 831: }
 13928                           ;Dimmer_B1.c: 832: }
 13929                           ;Dimmer_B1.c: 833: }
 13930                           ;Dimmer_B1.c: 834: } else {
 13931  1787  0008               	return
 13932  1788                     l7300:	
 13933                           
 13934                           ;Dimmer_B1.c: 835: if (DimmerLights->DimmingTrigger == 1) {
 13935  1788  0021               	movlb	1	; select bank1
 13936  1789  084C               	movf	_DimmerLights^(0+128),w
 13937  178A  0086               	movwf	6
 13938  178B  3001               	movlw	1	; select bank2/3
 13939  178C  0087               	movwf	7
 13940  178D  1E01               	btfss	1,4
 13941  178E  0008               	return
 13942                           
 13943                           ;Dimmer_B1.c: 836: DimmerLights->DimmingTrigger = 0;
 13944  178F  084C               	movf	_DimmerLights^(0+128),w
 13945  1790  0086               	movwf	6
 13946  1791  3001               	movlw	1	; select bank2/3
 13947  1792  0087               	movwf	7
 13948  1793  1201               	bcf	1,4
 13949  1794  0008               	return
 13950  1795                     __end_of_setDimmerLights_Main:	
 13951                           
 13952                           	psect	text90
 13953  0F3A                     __ptext90:	
 13954 ;; *************** function _setDimmerLights_OnOff *****************
 13955 ;; Defined at:
 13956 ;;		line 844 in file "../src/Dimmer_B1.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  lights          1    wreg     unsigned char 
 13959 ;;  command         1   77[BANK0 ] unsigned char 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  lights          1    0[BANK1 ] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;		None               void
 13964 ;; Registers used:
 13965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;Total ram usage:        4 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    8
 13978 ;; This function calls:
 13979 ;;		_getCmd_Status
 13980 ;;		_getDelayOff_GO
 13981 ;;		_getDimmerLights_PercentToValue
 13982 ;;		_getMain_All_LightsStatus
 13983 ;;		_setCmd_Status
 13984 ;;		_setDelayOff_GO
 13985 ;;		_setDimmerIntr_ControlStatus
 13986 ;;		_setDimmerIntr_DimmingValue
 13987 ;;		_setDimmerIntr_Dimming_RF
 13988 ;;		_setDimmerIntr_MaxmumValue
 13989 ;;		_setDimmerLights_DimmingClose
 13990 ;;		_setDimmerLights_Line
 13991 ;;		_setLED
 13992 ;;		_setProductData
 13993 ;;		_setRF_DimmerLights
 13994 ;;		_setTxData
 13995 ;; This function is called by:
 13996 ;;		_setDimmerLights_Main
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           
 14001                           ;psect for function _setDimmerLights_OnOff
 14002  0F3A                     _setDimmerLights_OnOff:	
 14003                           
 14004                           ;incstack = 0
 14005                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14006                           ;setDimmerLights_OnOff@lights stored from wreg
 14007  0F3A  0021               	movlb	1	; select bank1
 14008  0F3B  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14009                           
 14010                           ;Dimmer_B1.c: 846: if (command == 1) {
 14011  0F3C  0020               	movlb	0	; select bank0
 14012  0F3D  086D               	movf	setDimmerLights_OnOff@command,w
 14013  0F3E  3A01               	xorlw	1
 14014  0F3F  1D03               	skipz
 14015  0F40  2F9F               	goto	l6954
 14016                           
 14017                           ;Dimmer_B1.c: 848: setDimmerIntr_ControlStatus(lights, 1);
 14018  0F41  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14019  0F42  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14020  0F43  0021               	movlb	1	; select bank1
 14021  0F44  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14022  0F45  319D  2596  318F   	fcall	_setDimmerIntr_ControlStatus
 14023                           
 14024                           ;Dimmer_B1.c: 851: Dimmer.Load_Status = 1;
 14025  0F48  0022               	movlb	2	; select bank2
 14026  0F49  152C               	bsf	_Dimmer^(0+256),2
 14027                           
 14028                           ;Dimmer_B1.c: 852: setDimmerLights_Line(lights);
 14029  0F4A  0021               	movlb	1	; select bank1
 14030  0F4B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14031  0F4C  319B  23E3  318F   	fcall	_setDimmerLights_Line
 14032                           
 14033                           ;Dimmer_B1.c: 858: setLED(lights, 0);
 14034  0F4F  0020               	movlb	0	; select bank0
 14035  0F50  01A2               	clrf	setLED@command
 14036  0F51  0021               	movlb	1	; select bank1
 14037  0F52  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14038  0F53  3187  27C6  318F   	fcall	_setLED
 14039                           
 14040                           ;Dimmer_B1.c: 859: ;;
 14041                           ;Dimmer_B1.c: 879: if (DimmerLights->DimmingRun == 1) {
 14042  0F56  0021               	movlb	1	; select bank1
 14043  0F57  0A4C               	incf	_DimmerLights^(0+128),w
 14044  0F58  0086               	movwf	6
 14045  0F59  3001               	movlw	1	; select bank2/3
 14046  0F5A  0087               	movwf	7
 14047  0F5B  1F01               	btfss	1,6
 14048  0F5C  2F81               	goto	l6946
 14049                           
 14050                           ;Dimmer_B1.c: 880: DimmerLights->DimmingRun = 0;
 14051  0F5D  0A4C               	incf	_DimmerLights^(0+128),w
 14052  0F5E  0086               	movwf	6
 14053  0F5F  3001               	movlw	1	; select bank2/3
 14054  0F60  0087               	movwf	7
 14055  0F61  1301               	bcf	1,6
 14056                           
 14057                           ;Dimmer_B1.c: 881: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14058  0F62  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14059  0F63  3E14               	addlw	20
 14060  0F64  076E               	addwf	_product^(0+128),w
 14061  0F65  0020               	movlb	0	; select bank0
 14062  0F66  00EE               	movwf	??_setDimmerLights_OnOff
 14063  0F67  086E               	movf	??_setDimmerLights_OnOff,w
 14064  0F68  0086               	movwf	6
 14065  0F69  3001               	movlw	1	; select bank2/3
 14066  0F6A  0087               	movwf	7
 14067  0F6B  0801               	movf	1,w
 14068  0F6C  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14069  0F6F  0020               	movlb	0	; select bank0
 14070  0F70  00EF               	movwf	??_setDimmerLights_OnOff+1
 14071  0F71  086F               	movf	??_setDimmerLights_OnOff+1,w
 14072  0F72  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14073  0F73  0021               	movlb	1	; select bank1
 14074  0F74  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14075  0F75  319B  231C  318F   	fcall	_setDimmerIntr_MaxmumValue
 14076                           
 14077                           ;Dimmer_B1.c: 882: setDimmerIntr_Dimming_RF(lights, 1);
 14078  0F78  0020               	movlb	0	; select bank0
 14079  0F79  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14080  0F7A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14081  0F7B  0021               	movlb	1	; select bank1
 14082  0F7C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14083  0F7D  319D  25AE  318F   	fcall	_setDimmerIntr_Dimming_RF
 14084                           
 14085                           ;Dimmer_B1.c: 883: } else {
 14086  0F80  2F98               	goto	l6948
 14087  0F81                     l6946:	
 14088                           
 14089                           ;Dimmer_B1.c: 884: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14090  0F81  0021               	movlb	1	; select bank1
 14091  0F82  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14092  0F83  3E14               	addlw	20
 14093  0F84  076E               	addwf	_product^(0+128),w
 14094  0F85  0020               	movlb	0	; select bank0
 14095  0F86  00EE               	movwf	??_setDimmerLights_OnOff
 14096  0F87  086E               	movf	??_setDimmerLights_OnOff,w
 14097  0F88  0086               	movwf	6
 14098  0F89  3001               	movlw	1	; select bank2/3
 14099  0F8A  0087               	movwf	7
 14100  0F8B  0801               	movf	1,w
 14101  0F8C  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14102  0F8F  0020               	movlb	0	; select bank0
 14103  0F90  00EF               	movwf	??_setDimmerLights_OnOff+1
 14104  0F91  086F               	movf	??_setDimmerLights_OnOff+1,w
 14105  0F92  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14106  0F93  0021               	movlb	1	; select bank1
 14107  0F94  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14108  0F95  319B  2328  318F   	fcall	_setDimmerIntr_DimmingValue
 14109  0F98                     l6948:	
 14110                           
 14111                           ;Dimmer_B1.c: 887: }
 14112                           ;Dimmer_B1.c: 889: if (lights == 1) {
 14113  0F98  0021               	movlb	1	; select bank1
 14114  0F99  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14115  0F9A  3A01               	xorlw	1
 14116  0F9B  1D03               	skipz
 14117  0F9C  2FCE               	goto	l6968
 14118                           
 14119                           ;Dimmer_B1.c: 891: DimmerIntr1.TuneGO = 1;
 14120  0F9D  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14121                           
 14122                           ;Dimmer_B1.c: 897: }
 14123                           ;Dimmer_B1.c: 903: } else if (command == 0) {
 14124                           
 14125                           ;Dimmer_B1.c: 893: } else if (lights == 2) {
 14126  0F9E  2FCE               	goto	l6968
 14127  0F9F                     l6954:	
 14128  0F9F  0020               	movlb	0	; select bank0
 14129  0FA0  08ED               	movf	setDimmerLights_OnOff@command,f
 14130  0FA1  1D03               	skipz
 14131  0FA2  2FCE               	goto	l6968
 14132                           
 14133                           ;Dimmer_B1.c: 905: setDimmerIntr_ControlStatus(lights, 0);
 14134  0FA3  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14135  0FA4  0021               	movlb	1	; select bank1
 14136  0FA5  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14137  0FA6  319D  2596  318F   	fcall	_setDimmerIntr_ControlStatus
 14138                           
 14139                           ;Dimmer_B1.c: 907: Dimmer.Load_Status = 0;
 14140  0FA9  0022               	movlb	2	; select bank2
 14141  0FAA  112C               	bcf	_Dimmer^(0+256),2
 14142                           
 14143                           ;Dimmer_B1.c: 908: setDimmerLights_Line(0);
 14144  0FAB  3000               	movlw	0
 14145  0FAC  319B  23E3  318F   	fcall	_setDimmerLights_Line
 14146                           
 14147                           ;Dimmer_B1.c: 912: if (getDelayOff_GO(lights) == 1) {
 14148  0FAF  0021               	movlb	1	; select bank1
 14149  0FB0  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14150  0FB1  319B  23F4  318F   	fcall	_getDelayOff_GO
 14151  0FB4  3A01               	xorlw	1
 14152  0FB5  1D03               	skipz
 14153  0FB6  2FBF               	goto	l787
 14154                           
 14155                           ;Dimmer_B1.c: 913: setDelayOff_GO(lights, 0, 0);
 14156  0FB7  0020               	movlb	0	; select bank0
 14157  0FB8  01E5               	clrf	setDelayOff_GO@command
 14158  0FB9  01E6               	clrf	setDelayOff_GO@value
 14159  0FBA  0021               	movlb	1	; select bank1
 14160  0FBB  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14161  0FBC  318C  2409  318F   	fcall	_setDelayOff_GO
 14162  0FBF                     l787:	
 14163                           
 14164                           ;Dimmer_B1.c: 914: }
 14165                           ;Dimmer_B1.c: 919: setLED(lights, 1);
 14166  0FBF  0020               	movlb	0	; select bank0
 14167  0FC0  01A2               	clrf	setLED@command
 14168  0FC1  0AA2               	incf	setLED@command,f
 14169  0FC2  0021               	movlb	1	; select bank1
 14170  0FC3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14171  0FC4  3187  27C6  318F   	fcall	_setLED
 14172                           
 14173                           ;Dimmer_B1.c: 920: ;;
 14174                           ;Dimmer_B1.c: 924: if (lights == 1) {
 14175  0FC7  0021               	movlb	1	; select bank1
 14176  0FC8  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14177  0FC9  3A01               	xorlw	1
 14178  0FCA  1D03               	skipz
 14179  0FCB  2FCE               	goto	l6968
 14180                           
 14181                           ;Dimmer_B1.c: 925: RB1 = 0;
 14182  0FCC  0020               	movlb	0	; select bank0
 14183  0FCD  108D               	bcf	13,1	;volatile
 14184  0FCE                     l6968:	
 14185                           
 14186                           ;Dimmer_B1.c: 927: }
 14187                           ;Dimmer_B1.c: 938: }
 14188                           ;Dimmer_B1.c: 940: setDimmerLights_DimmingClose();
 14189  0FCE  319A  2268  318F   	fcall	_setDimmerLights_DimmingClose
 14190                           
 14191                           ;Dimmer_B1.c: 942: setRF_DimmerLights(lights, command);
 14192  0FD1  0020               	movlb	0	; select bank0
 14193  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14194  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14195  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14196  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14197  0FD6  0021               	movlb	1	; select bank1
 14198  0FD7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14199  0FD8  3196  26C5  318F   	fcall	_setRF_DimmerLights
 14200                           
 14201                           ;Dimmer_B1.c: 944: if (getCmd_Status(1) == 1) {
 14202  0FDB  3001               	movlw	1
 14203  0FDC  319C  2449  318F   	fcall	_getCmd_Status
 14204  0FDF  3A01               	xorlw	1
 14205  0FE0  1D03               	skipz
 14206  0FE1  2FFD               	goto	l6984
 14207                           
 14208                           ;Dimmer_B1.c: 945: if (getMain_All_LightsStatus() == 0) {
 14209  0FE2  319A  22C2  318F   	fcall	_getMain_All_LightsStatus
 14210  0FE5  3800               	iorlw	0
 14211  0FE6  1D03               	skipz
 14212  0FE7  0008               	return
 14213                           
 14214                           ;Dimmer_B1.c: 946: setCmd_Status(1, 0);
 14215  0FE8  0020               	movlb	0	; select bank0
 14216  0FE9  01A0               	clrf	setCmd_Status@cmd
 14217  0FEA  3001               	movlw	1
 14218  0FEB  319D  25C6  318F   	fcall	_setCmd_Status
 14219                           
 14220                           ;Dimmer_B1.c: 947: setProductData(11, 0);
 14221  0FEE  0020               	movlb	0	; select bank0
 14222  0FEF  01E2               	clrf	setProductData@value
 14223  0FF0  300B               	movlw	11
 14224  0FF1  319B  2310  318F   	fcall	_setProductData
 14225                           
 14226                           ;Dimmer_B1.c: 948: setProductData(17, 0);
 14227  0FF4  0020               	movlb	0	; select bank0
 14228  0FF5  01E2               	clrf	setProductData@value
 14229  0FF6  3011               	movlw	17
 14230  0FF7  319B  2310  318F   	fcall	_setProductData
 14231                           
 14232                           ;Dimmer_B1.c: 949: setTxData();
 14233  0FFA  318E  267F         	fcall	_setTxData
 14234                           
 14235                           ;Dimmer_B1.c: 950: }
 14236                           ;Dimmer_B1.c: 951: } else {
 14237  0FFC  0008               	return
 14238  0FFD                     l6984:	
 14239                           
 14240                           ;Dimmer_B1.c: 952: setTxData();
 14241  0FFD  318E  267F         	fcall	_setTxData
 14242  0FFF  0008               	return
 14243  1000                     __end_of_setDimmerLights_OnOff:	
 14244                           
 14245                           	psect	text91
 14246  07C6                     __ptext91:	
 14247 ;; *************** function _setLED *****************
 14248 ;; Defined at:
 14249 ;;		line 81 in file "../src/LED_B1.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;  led             1    wreg     unsigned char 
 14252 ;;  command         1    2[BANK0 ] unsigned char 
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;  led             1    3[BANK0 ] unsigned char 
 14255 ;; Return value:  Size  Location     Type
 14256 ;;		None               void
 14257 ;; Registers used:
 14258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;Total ram usage:        2 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; Hardware stack levels required when called:    6
 14271 ;; This function calls:
 14272 ;;		_LedPointSelect
 14273 ;; This function is called by:
 14274 ;;		_setDimmerLights_OnOff
 14275 ;;		_setLED_Initialization
 14276 ;;		_Exception_Main
 14277 ;;		_setSw_Initialization
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           
 14282                           ;psect for function _setLED
 14283  07C6                     _setLED:	
 14284                           
 14285                           ;incstack = 0
 14286                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14287                           ;setLED@led stored from wreg
 14288  07C6  0020               	movlb	0	; select bank0
 14289  07C7  00A3               	movwf	setLED@led
 14290                           
 14291                           ;LED_B1.c: 82: LedPointSelect(led);
 14292  07C8  0823               	movf	setLED@led,w
 14293  07C9  319B  2334  3187   	fcall	_LedPointSelect
 14294                           
 14295                           ;LED_B1.c: 83: if (command == 0) {
 14296  07CC  0020               	movlb	0	; select bank0
 14297  07CD  08A2               	movf	setLED@command,f
 14298  07CE  1D03               	skipz
 14299  07CF  2FD5               	goto	l6662
 14300                           
 14301                           ;LED_B1.c: 112: if (led == 99) {
 14302  07D0  0823               	movf	setLED@led,w
 14303  07D1  3A63               	xorlw	99
 14304  07D2  1D03               	skipz
 14305  07D3  2FD5               	goto	l6662
 14306                           
 14307                           ;LED_B1.c: 116: RB5 = 1;
 14308  07D4  168D               	bsf	13,5	;volatile
 14309  07D5                     l6662:	
 14310                           
 14311                           ;LED_B1.c: 118: }
 14312                           ;LED_B1.c: 120: }
 14313                           ;LED_B1.c: 121: if (command == 1) {
 14314  07D5  0822               	movf	setLED@command,w
 14315  07D6  3A01               	xorlw	1
 14316  07D7  1D03               	skipz
 14317  07D8  2FDE               	goto	l6668
 14318                           
 14319                           ;LED_B1.c: 150: if (led == 99) {
 14320  07D9  0823               	movf	setLED@led,w
 14321  07DA  3A63               	xorlw	99
 14322  07DB  1D03               	skipz
 14323  07DC  2FDE               	goto	l6668
 14324                           
 14325                           ;LED_B1.c: 154: RB5 = 0;
 14326  07DD  128D               	bcf	13,5	;volatile
 14327  07DE                     l6668:	
 14328                           
 14329                           ;LED_B1.c: 156: }
 14330                           ;LED_B1.c: 158: }
 14331                           ;LED_B1.c: 159: if (command == 10) {
 14332  07DE  0822               	movf	setLED@command,w
 14333  07DF  3A0A               	xorlw	10
 14334  07E0  1D03               	skipz
 14335  07E1  2FF4               	goto	l6676
 14336                           
 14337                           ;LED_B1.c: 160: LED->GO = 0;
 14338  07E2  0021               	movlb	1	; select bank1
 14339  07E3  084D               	movf	_LED^(0+128),w
 14340  07E4  0086               	movwf	6
 14341  07E5  3001               	movlw	1	; select bank2/3
 14342  07E6  0087               	movwf	7
 14343  07E7  1081               	bcf	1,1
 14344                           
 14345                           ;LED_B1.c: 161: LED->Time = 0;
 14346  07E8  0A4D               	incf	_LED^(0+128),w
 14347  07E9  0086               	movwf	6
 14348  07EA  3001               	movlw	1	; select bank2/3
 14349  07EB  0087               	movwf	7
 14350  07EC  3000               	movlw	0
 14351  07ED  3FC0               	movwi [0]fsr1
 14352  07EE  3FC1               	movwi [1]fsr1
 14353                           
 14354                           ;LED_B1.c: 190: if (led == 99) {
 14355  07EF  0020               	movlb	0	; select bank0
 14356  07F0  0823               	movf	setLED@led,w
 14357  07F1  3A63               	xorlw	99
 14358  07F2  1903               	btfsc	3,2
 14359                           
 14360                           ;LED_B1.c: 194: RB5 = 1;
 14361  07F3  168D               	bsf	13,5	;volatile
 14362  07F4                     l6676:	
 14363                           
 14364                           ;LED_B1.c: 196: }
 14365                           ;LED_B1.c: 198: }
 14366                           ;LED_B1.c: 199: if (command == 11) {
 14367  07F4  0822               	movf	setLED@command,w
 14368  07F5  3A0B               	xorlw	11
 14369  07F6  1D03               	skipz
 14370  07F7  0008               	return
 14371                           
 14372                           ;LED_B1.c: 200: LED->GO = 1;
 14373  07F8  0021               	movlb	1	; select bank1
 14374  07F9  084D               	movf	_LED^(0+128),w
 14375  07FA  0086               	movwf	6
 14376  07FB  3001               	movlw	1	; select bank2/3
 14377  07FC  0087               	movwf	7
 14378  07FD  1481               	bsf	1,1
 14379  07FE  0008               	return
 14380  07FF                     __end_of_setLED:	
 14381                           
 14382                           	psect	text92
 14383  1B34                     __ptext92:	
 14384 ;; *************** function _LedPointSelect *****************
 14385 ;; Defined at:
 14386 ;;		line 7 in file "../src/LED_B1.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;  led             1    wreg     unsigned char 
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  led             1    1[BANK0 ] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;		None               void
 14393 ;; Registers used:
 14394 ;;		wreg
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;Total ram usage:        2 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    5
 14407 ;; This function calls:
 14408 ;;		Nothing
 14409 ;; This function is called by:
 14410 ;;		_setLED_Initialization
 14411 ;;		_setLED
 14412 ;;		_setLED_Main
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           
 14417                           ;psect for function _LedPointSelect
 14418  1B34                     _LedPointSelect:	
 14419                           
 14420                           ;incstack = 0
 14421                           ; Regs used in _LedPointSelect: [wreg]
 14422                           ;LedPointSelect@led stored from wreg
 14423  1B34  0020               	movlb	0	; select bank0
 14424  1B35  00A1               	movwf	LedPointSelect@led
 14425                           
 14426                           ;LED_B1.c: 24: if (led == 99) {
 14427  1B36  0821               	movf	LedPointSelect@led,w
 14428  1B37  3A63               	xorlw	99
 14429  1B38  1D03               	skipz
 14430  1B39  0008               	return
 14431                           
 14432                           ;LED_B1.c: 25: LED = &VarErrLED;
 14433  1B3A  3068               	movlw	_VarErrLED& (0+255)
 14434  1B3B  00A0               	movwf	??_LedPointSelect
 14435  1B3C  0820               	movf	??_LedPointSelect,w
 14436  1B3D  0021               	movlb	1	; select bank1
 14437  1B3E  00CD               	movwf	_LED^(0+128)
 14438  1B3F  0008               	return
 14439  1B40                     __end_of_LedPointSelect:	
 14440                           
 14441                           	psect	text93
 14442  1A68                     __ptext93:	
 14443 ;; *************** function _setDimmerLights_DimmingClose *****************
 14444 ;; Defined at:
 14445 ;;		line 1753 in file "../src/Dimmer_B1.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;		None
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;		None
 14450 ;; Return value:  Size  Location     Type
 14451 ;;		None               void
 14452 ;; Registers used:
 14453 ;;		wreg, status,2, status,0, pclath, cstack
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;Total ram usage:        0 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    6
 14466 ;; This function calls:
 14467 ;;		_setDimmerIntr_Dimming_Sw
 14468 ;; This function is called by:
 14469 ;;		_setDimmerLights_OnOff
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           
 14474                           ;psect for function _setDimmerLights_DimmingClose
 14475  1A68                     _setDimmerLights_DimmingClose:	
 14476                           
 14477                           ;Dimmer_B1.c: 1755: setDimmerIntr_Dimming_Sw(1, 0);
 14478                           
 14479                           ;incstack = 0
 14480                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14481  1A68  0020               	movlb	0	; select bank0
 14482  1A69  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14483  1A6A  3001               	movlw	1
 14484  1A6B  319D  2580         	fcall	_setDimmerIntr_Dimming_Sw
 14485  1A6D  0008               	return
 14486  1A6E                     __end_of_setDimmerLights_DimmingClose:	
 14487                           
 14488                           	psect	text94
 14489  1DAE                     __ptext94:	
 14490 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14491 ;; Defined at:
 14492 ;;		line 228 in file "../src/Dimmer_B1.c"
 14493 ;; Parameters:    Size  Location     Type
 14494 ;;  lights          1    wreg     unsigned char 
 14495 ;;  command         1    0[BANK0 ] unsigned char 
 14496 ;; Auto vars:     Size  Location     Type
 14497 ;;  lights          1    2[BANK0 ] unsigned char 
 14498 ;; Return value:  Size  Location     Type
 14499 ;;		None               void
 14500 ;; Registers used:
 14501 ;;		wreg, status,2, status,0
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;Total ram usage:        3 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; Hardware stack levels required when called:    5
 14514 ;; This function calls:
 14515 ;;		Nothing
 14516 ;; This function is called by:
 14517 ;;		_setDimmerLights_OnOff
 14518 ;;		_setRFSW_AdjControl
 14519 ;; This function uses a non-reentrant model
 14520 ;;
 14521                           
 14522                           
 14523                           ;psect for function _setDimmerIntr_Dimming_RF
 14524  1DAE                     _setDimmerIntr_Dimming_RF:	
 14525                           
 14526                           ;incstack = 0
 14527                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14528                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14529  1DAE  0020               	movlb	0	; select bank0
 14530  1DAF  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14531                           
 14532                           ;Dimmer_B1.c: 230: if (lights == 1) {
 14533  1DB0  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14534  1DB1  3A01               	xorlw	1
 14535  1DB2  1D03               	skipz
 14536  1DB3  0008               	return
 14537                           
 14538                           ;Dimmer_B1.c: 231: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14539  1DB4  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14540  1DB5  3A01               	xorlw	1
 14541  1DB6  3000               	movlw	0
 14542  1DB7  1903               	skipnz
 14543  1DB8  3001               	movlw	1
 14544  1DB9  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14545  1DBA  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14546  1DBB  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14547  1DBC  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14548  1DBD  0021               	movlb	1	; select bank1
 14549  1DBE  083C               	movf	_DimmerIntr1^(0+128),w
 14550  1DBF  0020               	movlb	0	; select bank0
 14551  1DC0  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14552  1DC1  39BF               	andlw	-65
 14553  1DC2  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14554  1DC3  0021               	movlb	1	; select bank1
 14555  1DC4  00BC               	movwf	_DimmerIntr1^(0+128)
 14556  1DC5  0008               	return
 14557  1DC6                     __end_of_setDimmerIntr_Dimming_RF:	
 14558                           
 14559                           	psect	text95
 14560  1B28                     __ptext95:	
 14561 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14562 ;; Defined at:
 14563 ;;		line 93 in file "../src/Dimmer_B1.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;  lights          1    wreg     unsigned char 
 14566 ;;  value           1   66[BANK0 ] unsigned char 
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;  lights          1   68[BANK0 ] unsigned char 
 14569 ;; Return value:  Size  Location     Type
 14570 ;;		None               void
 14571 ;; Registers used:
 14572 ;;		wreg
 14573 ;; Tracked objects:
 14574 ;;		On entry : 0/0
 14575 ;;		On exit  : 0/0
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        3 bytes
 14583 ;; Hardware stack levels used:    1
 14584 ;; Hardware stack levels required when called:    5
 14585 ;; This function calls:
 14586 ;;		Nothing
 14587 ;; This function is called by:
 14588 ;;		_setDimmerLights_OnOff
 14589 ;; This function uses a non-reentrant model
 14590 ;;
 14591                           
 14592                           
 14593                           ;psect for function _setDimmerIntr_DimmingValue
 14594  1B28                     _setDimmerIntr_DimmingValue:	
 14595                           
 14596                           ;incstack = 0
 14597                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14598                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14599  1B28  0020               	movlb	0	; select bank0
 14600  1B29  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14601                           
 14602                           ;Dimmer_B1.c: 95: if (lights == 1) {
 14603  1B2A  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14604  1B2B  3A01               	xorlw	1
 14605  1B2C  1D03               	skipz
 14606  1B2D  0008               	return
 14607                           
 14608                           ;Dimmer_B1.c: 96: DimmerIntr1.DimmingValue = value;
 14609  1B2E  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14610  1B2F  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14611  1B30  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14612  1B31  0021               	movlb	1	; select bank1
 14613  1B32  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14614  1B33  0008               	return
 14615  1B34                     __end_of_setDimmerIntr_DimmingValue:	
 14616                           
 14617                           	psect	text96
 14618  1D96                     __ptext96:	
 14619 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14620 ;; Defined at:
 14621 ;;		line 75 in file "../src/Dimmer_B1.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;  lights          1    wreg     unsigned char 
 14624 ;;  command         1    0[BANK0 ] unsigned char 
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;  lights          1    2[BANK0 ] unsigned char 
 14627 ;; Return value:  Size  Location     Type
 14628 ;;		None               void
 14629 ;; Registers used:
 14630 ;;		wreg, status,2, status,0
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14636 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;Total ram usage:        3 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    5
 14643 ;; This function calls:
 14644 ;;		Nothing
 14645 ;; This function is called by:
 14646 ;;		_setDimmerLights_OnOff
 14647 ;; This function uses a non-reentrant model
 14648 ;;
 14649                           
 14650                           
 14651                           ;psect for function _setDimmerIntr_ControlStatus
 14652  1D96                     _setDimmerIntr_ControlStatus:	
 14653                           
 14654                           ;incstack = 0
 14655                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14656                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14657  1D96  0020               	movlb	0	; select bank0
 14658  1D97  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14659                           
 14660                           ;Dimmer_B1.c: 77: if (lights == 1) {
 14661  1D98  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14662  1D99  3A01               	xorlw	1
 14663  1D9A  1D03               	skipz
 14664  1D9B  0008               	return
 14665                           
 14666                           ;Dimmer_B1.c: 78: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14667  1D9C  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14668  1D9D  3A01               	xorlw	1
 14669  1D9E  3000               	movlw	0
 14670  1D9F  1903               	skipnz
 14671  1DA0  3001               	movlw	1
 14672  1DA1  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14673  1DA2  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14674  1DA3  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14675  1DA4  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14676  1DA5  0021               	movlb	1	; select bank1
 14677  1DA6  083C               	movf	_DimmerIntr1^(0+128),w
 14678  1DA7  0020               	movlb	0	; select bank0
 14679  1DA8  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14680  1DA9  39F7               	andlw	-9
 14681  1DAA  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14682  1DAB  0021               	movlb	1	; select bank1
 14683  1DAC  00BC               	movwf	_DimmerIntr1^(0+128)
 14684  1DAD  0008               	return
 14685  1DAE                     __end_of_setDimmerIntr_ControlStatus:	
 14686                           
 14687                           	psect	text97
 14688  0C09                     __ptext97:	
 14689 ;; *************** function _setDelayOff_GO *****************
 14690 ;; Defined at:
 14691 ;;		line 87 in file "../src/DelayOff_B1.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;  sw              1    wreg     unsigned char 
 14694 ;;  command         1   69[BANK0 ] unsigned char 
 14695 ;;  value           1   70[BANK0 ] unsigned char 
 14696 ;; Auto vars:     Size  Location     Type
 14697 ;;  sw              1   76[BANK0 ] unsigned char 
 14698 ;;  k               1   75[BANK0 ] unsigned char 
 14699 ;;  j               1   74[BANK0 ] unsigned char 
 14700 ;;  i               1   73[BANK0 ] unsigned char 
 14701 ;; Return value:  Size  Location     Type
 14702 ;;		None               void
 14703 ;; Registers used:
 14704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14705 ;; Tracked objects:
 14706 ;;		On entry : 0/0
 14707 ;;		On exit  : 0/0
 14708 ;;		Unchanged: 0/0
 14709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14710 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;Total ram usage:        8 bytes
 14715 ;; Hardware stack levels used:    1
 14716 ;; Hardware stack levels required when called:    6
 14717 ;; This function calls:
 14718 ;;		_DelayOffPointSelect
 14719 ;;		___bmul
 14720 ;;		_setProductData
 14721 ;; This function is called by:
 14722 ;;		_setDimmerLights_OnOff
 14723 ;;		_setRFSW_Control
 14724 ;; This function uses a non-reentrant model
 14725 ;;
 14726                           
 14727                           
 14728                           ;psect for function _setDelayOff_GO
 14729  0C09                     _setDelayOff_GO:	
 14730                           
 14731                           ;incstack = 0
 14732                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14733                           ;setDelayOff_GO@sw stored from wreg
 14734  0C09  0020               	movlb	0	; select bank0
 14735  0C0A  00EC               	movwf	setDelayOff_GO@sw
 14736                           
 14737                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14738  0C0B  086C               	movf	setDelayOff_GO@sw,w
 14739  0C0C  319A  22F8  318C   	fcall	_DelayOffPointSelect
 14740                           
 14741                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14742  0C0F  0020               	movlb	0	; select bank0
 14743  0C10  0865               	movf	setDelayOff_GO@command,w
 14744  0C11  3A01               	xorlw	1
 14745  0C12  3000               	movlw	0
 14746  0C13  1903               	skipnz
 14747  0C14  3001               	movlw	1
 14748  0C15  00E7               	movwf	??_setDelayOff_GO
 14749  0C16  0021               	movlb	1	; select bank1
 14750  0C17  084A               	movf	_DelayOff^(0+128),w
 14751  0C18  0086               	movwf	6
 14752  0C19  3001               	movlw	1	; select bank2/3
 14753  0C1A  0087               	movwf	7
 14754  0C1B  0020               	movlb	0	; select bank0
 14755  0C1C  0DE7               	rlf	??_setDelayOff_GO,f
 14756  0C1D  0801               	movf	1,w
 14757  0C1E  0667               	xorwf	??_setDelayOff_GO,w
 14758  0C1F  39FD               	andlw	-3
 14759  0C20  0667               	xorwf	??_setDelayOff_GO,w
 14760  0C21  0081               	movwf	1
 14761                           
 14762                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14763  0C22  0021               	movlb	1	; select bank1
 14764  0C23  084A               	movf	_DelayOff^(0+128),w
 14765  0C24  3E02               	addlw	2
 14766  0C25  0086               	movwf	6
 14767  0C26  3001               	movlw	1	; select bank2/3
 14768  0C27  0087               	movwf	7
 14769  0C28  3000               	movlw	0
 14770  0C29  3FC0               	movwi [0]fsr1
 14771  0C2A  3FC1               	movwi [1]fsr1
 14772                           
 14773                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14774  0C2B  084A               	movf	_DelayOff^(0+128),w
 14775  0C2C  3E04               	addlw	4
 14776  0C2D  0086               	movwf	6
 14777  0C2E  3001               	movlw	1	; select bank2/3
 14778  0C2F  0087               	movwf	7
 14779  0C30  0181               	clrf	1
 14780                           
 14781                           ;DelayOff_B1.c: 94: if (command == 1) {
 14782  0C31  0020               	movlb	0	; select bank0
 14783  0C32  0865               	movf	setDelayOff_GO@command,w
 14784  0C33  3A01               	xorlw	1
 14785  0C34  1D03               	skipz
 14786  0C35  2C8B               	goto	l6250
 14787                           
 14788                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14789  0C36  3005               	movlw	5
 14790  0C37  00E7               	movwf	??_setDelayOff_GO
 14791  0C38  0867               	movf	??_setDelayOff_GO,w
 14792  0C39  00E9               	movwf	setDelayOff_GO@i
 14793  0C3A  01EA               	clrf	setDelayOff_GO@j
 14794  0C3B  01EB               	clrf	setDelayOff_GO@k
 14795                           
 14796                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14797  0C3C  300F               	movlw	15
 14798  0C3D  0566               	andwf	setDelayOff_GO@value,w
 14799  0C3E  00E7               	movwf	??_setDelayOff_GO
 14800  0C3F  0867               	movf	??_setDelayOff_GO,w
 14801  0C40  3A05               	xorlw	5
 14802  0C41  1903               	skipnz
 14803  0C42  2C47               	goto	l6236
 14804  0C43  0866               	movf	setDelayOff_GO@value,w
 14805  0C44  390F               	andlw	15
 14806  0C45  1D03               	btfss	3,2
 14807  0C46  2C77               	goto	l6246
 14808  0C47                     l6236:	
 14809  0C47  3031               	movlw	49
 14810  0C48  0266               	subwf	setDelayOff_GO@value,w
 14811  0C49  1803               	skipnc
 14812  0C4A  2C77               	goto	l6246
 14813                           
 14814                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14815  0C4B  0866               	movf	setDelayOff_GO@value,w
 14816  0C4C  390F               	andlw	15
 14817  0C4D  00E7               	movwf	??_setDelayOff_GO
 14818  0C4E  0867               	movf	??_setDelayOff_GO,w
 14819  0C4F  00EA               	movwf	setDelayOff_GO@j
 14820                           
 14821                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14822  0C50  0866               	movf	setDelayOff_GO@value,w
 14823  0C51  00E7               	movwf	??_setDelayOff_GO
 14824  0C52  3004               	movlw	4
 14825  0C53                     u5375:	
 14826  0C53  36E7               	lsrf	??_setDelayOff_GO,f
 14827  0C54  0B89               	decfsz	9,f
 14828  0C55  2C53               	goto	u5375
 14829  0C56  0867               	movf	??_setDelayOff_GO,w
 14830  0C57  390F               	andlw	15
 14831  0C58  00E8               	movwf	??_setDelayOff_GO+1
 14832  0C59  0868               	movf	??_setDelayOff_GO+1,w
 14833  0C5A  00EB               	movwf	setDelayOff_GO@k
 14834                           
 14835                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14836  0C5B  300A               	movlw	10
 14837  0C5C  00E7               	movwf	??_setDelayOff_GO
 14838  0C5D  0867               	movf	??_setDelayOff_GO,w
 14839  0C5E  00A0               	movwf	___bmul@multiplicand
 14840  0C5F  086B               	movf	setDelayOff_GO@k,w
 14841  0C60  319C  245B  318C   	fcall	___bmul
 14842  0C63  0020               	movlb	0	; select bank0
 14843  0C64  076A               	addwf	setDelayOff_GO@j,w
 14844  0C65  00E8               	movwf	??_setDelayOff_GO+1
 14845  0C66  0021               	movlb	1	; select bank1
 14846  0C67  0A4A               	incf	_DelayOff^(0+128),w
 14847  0C68  0086               	movwf	6
 14848  0C69  3001               	movlw	1	; select bank2/3
 14849  0C6A  0087               	movwf	7
 14850  0C6B  0020               	movlb	0	; select bank0
 14851  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14852  0C6D  0081               	movwf	1
 14853                           
 14854                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14855  0C6E  0866               	movf	setDelayOff_GO@value,w
 14856  0C6F  00E7               	movwf	??_setDelayOff_GO
 14857  0C70  0867               	movf	??_setDelayOff_GO,w
 14858  0C71  00E2               	movwf	setProductData@value
 14859  0C72  086C               	movf	setDelayOff_GO@sw,w
 14860  0C73  3E1A               	addlw	26
 14861  0C74  319B  2310         	fcall	_setProductData
 14862                           
 14863                           ;DelayOff_B1.c: 103: } else {
 14864  0C76  0008               	return
 14865  0C77                     l6246:	
 14866                           
 14867                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14868  0C77  3005               	movlw	5
 14869  0C78  0020               	movlb	0	; select bank0
 14870  0C79  00E7               	movwf	??_setDelayOff_GO
 14871  0C7A  0021               	movlb	1	; select bank1
 14872  0C7B  0A4A               	incf	_DelayOff^(0+128),w
 14873  0C7C  0086               	movwf	6
 14874  0C7D  3001               	movlw	1	; select bank2/3
 14875  0C7E  0087               	movwf	7
 14876  0C7F  0020               	movlb	0	; select bank0
 14877  0C80  0867               	movf	??_setDelayOff_GO,w
 14878  0C81  0081               	movwf	1
 14879                           
 14880                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14881  0C82  3005               	movlw	5
 14882  0C83  00E7               	movwf	??_setDelayOff_GO
 14883  0C84  0867               	movf	??_setDelayOff_GO,w
 14884  0C85  00E2               	movwf	setProductData@value
 14885  0C86  086C               	movf	setDelayOff_GO@sw,w
 14886  0C87  3E1A               	addlw	26
 14887  0C88  319B  2310         	fcall	_setProductData
 14888                           
 14889                           ;DelayOff_B1.c: 106: }
 14890                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14891  0C8A  0008               	return
 14892  0C8B                     l6250:	
 14893  0C8B  0020               	movlb	0	; select bank0
 14894  0C8C  08E5               	movf	setDelayOff_GO@command,f
 14895  0C8D  1D03               	skipz
 14896  0C8E  0008               	return
 14897                           
 14898                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14899  0C8F  01E2               	clrf	setProductData@value
 14900  0C90  086C               	movf	setDelayOff_GO@sw,w
 14901  0C91  3E1A               	addlw	26
 14902  0C92  319B  2310         	fcall	_setProductData
 14903  0C94  0008               	return
 14904  0C95                     __end_of_setDelayOff_GO:	
 14905                           
 14906                           	psect	text98
 14907  1C5B                     __ptext98:	
 14908 ;; *************** function ___bmul *****************
 14909 ;; Defined at:
 14910 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;  multiplier      1    wreg     unsigned char 
 14913 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14914 ;; Auto vars:     Size  Location     Type
 14915 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14916 ;;  product         1    2[BANK0 ] unsigned char 
 14917 ;; Return value:  Size  Location     Type
 14918 ;;                  1    wreg      unsigned char 
 14919 ;; Registers used:
 14920 ;;		wreg, status,2, status,0
 14921 ;; Tracked objects:
 14922 ;;		On entry : 0/0
 14923 ;;		On exit  : 0/0
 14924 ;;		Unchanged: 0/0
 14925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;Total ram usage:        4 bytes
 14931 ;; Hardware stack levels used:    1
 14932 ;; Hardware stack levels required when called:    5
 14933 ;; This function calls:
 14934 ;;		Nothing
 14935 ;; This function is called by:
 14936 ;;		_setDelayOff_GO
 14937 ;;		_DelayTimejudge
 14938 ;; This function uses a non-reentrant model
 14939 ;;
 14940                           
 14941                           
 14942                           ;psect for function ___bmul
 14943  1C5B                     ___bmul:	
 14944                           
 14945                           ;incstack = 0
 14946                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14947                           ;___bmul@multiplier stored from wreg
 14948  1C5B  0020               	movlb	0	; select bank0
 14949  1C5C  00A3               	movwf	___bmul@multiplier
 14950  1C5D  01A2               	clrf	___bmul@product
 14951  1C5E                     l5914:	
 14952  1C5E  1C23               	btfss	___bmul@multiplier,0
 14953  1C5F  2C64               	goto	l5918
 14954  1C60  0820               	movf	___bmul@multiplicand,w
 14955  1C61  00A1               	movwf	??___bmul
 14956  1C62  0821               	movf	??___bmul,w
 14957  1C63  07A2               	addwf	___bmul@product,f
 14958  1C64                     l5918:	
 14959  1C64  1003               	clrc
 14960  1C65  0DA0               	rlf	___bmul@multiplicand,f
 14961  1C66  1003               	clrc
 14962  1C67  0CA3               	rrf	___bmul@multiplier,f
 14963  1C68  08A3               	movf	___bmul@multiplier,f
 14964  1C69  1D03               	skipz
 14965  1C6A  2C5E               	goto	l5914
 14966  1C6B  0822               	movf	___bmul@product,w
 14967  1C6C  0008               	return
 14968  1C6D                     __end_of___bmul:	
 14969                           
 14970                           	psect	text99
 14971  1DC6                     __ptext99:	
 14972 ;; *************** function _setCmd_Status *****************
 14973 ;; Defined at:
 14974 ;;		line 651 in file "../src/Main_B1.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;  number          1    wreg     unsigned char 
 14977 ;;  cmd             1    0[BANK0 ] unsigned char 
 14978 ;; Auto vars:     Size  Location     Type
 14979 ;;  number          1    2[BANK0 ] unsigned char 
 14980 ;; Return value:  Size  Location     Type
 14981 ;;		None               void
 14982 ;; Registers used:
 14983 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14984 ;; Tracked objects:
 14985 ;;		On entry : 0/0
 14986 ;;		On exit  : 0/0
 14987 ;;		Unchanged: 0/0
 14988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;Total ram usage:        3 bytes
 14994 ;; Hardware stack levels used:    1
 14995 ;; Hardware stack levels required when called:    5
 14996 ;; This function calls:
 14997 ;;		Nothing
 14998 ;; This function is called by:
 14999 ;;		_setDimmerLights_OnOff
 15000 ;;		_setControl_Lights_Table
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           
 15005                           ;psect for function _setCmd_Status
 15006  1DC6                     _setCmd_Status:	
 15007                           
 15008                           ;incstack = 0
 15009                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15010                           ;setCmd_Status@number stored from wreg
 15011  1DC6  0020               	movlb	0	; select bank0
 15012  1DC7  00A2               	movwf	setCmd_Status@number
 15013                           
 15014                           ;Main_B1.c: 652: switch (number) {
 15015  1DC8  2DD8               	goto	l6420
 15016  1DC9                     l6416:	
 15017                           ;Main_B1.c: 653: case 1:
 15018                           
 15019                           
 15020                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15021  1DC9  0820               	movf	setCmd_Status@cmd,w
 15022  1DCA  3A01               	xorlw	1
 15023  1DCB  3000               	movlw	0
 15024  1DCC  1903               	skipnz
 15025  1DCD  3001               	movlw	1
 15026  1DCE  00A1               	movwf	??_setCmd_Status
 15027  1DCF  0021               	movlb	1	; select bank1
 15028  1DD0  0849               	movf	_Cmd^(0+128),w
 15029  1DD1  0020               	movlb	0	; select bank0
 15030  1DD2  0621               	xorwf	??_setCmd_Status,w
 15031  1DD3  39FE               	andlw	-2
 15032  1DD4  0621               	xorwf	??_setCmd_Status,w
 15033  1DD5  0021               	movlb	1	; select bank1
 15034  1DD6  00C9               	movwf	_Cmd^(0+128)
 15035                           
 15036                           ;Main_B1.c: 656: }
 15037                           
 15038                           ;Main_B1.c: 655: break;
 15039  1DD7  0008               	return
 15040  1DD8                     l6420:	
 15041  1DD8  0020               	movlb	0	; select bank0
 15042  1DD9  0822               	movf	setCmd_Status@number,w
 15043                           
 15044                           ; Switch size 1, requested type "space"
 15045                           ; Number of cases is 1, Range of values is 1 to 1
 15046                           ; switch strategies available:
 15047                           ; Name         Instructions Cycles
 15048                           ; simple_byte            4     3 (average)
 15049                           ; direct_byte           11     9 (fixed)
 15050                           ; jumptable            263     9 (fixed)
 15051                           ;	Chosen strategy is simple_byte
 15052  1DDA  3A01               	xorlw	1	; case 1
 15053  1DDB  1903               	skipnz
 15054  1DDC  2DC9               	goto	l6416
 15055  1DDD  2DDE               	goto	l1514
 15056  1DDE                     l1514:	
 15057  1DDE  0008               	return
 15058  1DDF                     __end_of_setCmd_Status:	
 15059                           
 15060                           	psect	text100
 15061  1AC2                     __ptext100:	
 15062 ;; *************** function _getMain_All_LightsStatus *****************
 15063 ;; Defined at:
 15064 ;;		line 373 in file "../src/Main_B1.c"
 15065 ;; Parameters:    Size  Location     Type
 15066 ;;		None
 15067 ;; Auto vars:     Size  Location     Type
 15068 ;;  status          1    0[BANK0 ] unsigned char 
 15069 ;; Return value:  Size  Location     Type
 15070 ;;                  1    wreg      unsigned char 
 15071 ;; Registers used:
 15072 ;;		wreg, status,2
 15073 ;; Tracked objects:
 15074 ;;		On entry : 0/0
 15075 ;;		On exit  : 0/0
 15076 ;;		Unchanged: 0/0
 15077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;Total ram usage:        1 bytes
 15083 ;; Hardware stack levels used:    1
 15084 ;; Hardware stack levels required when called:    5
 15085 ;; This function calls:
 15086 ;;		Nothing
 15087 ;; This function is called by:
 15088 ;;		_DimmerLights_Main
 15089 ;;		_setDimmerLights_Main
 15090 ;;		_setDimmerLights_OnOff
 15091 ;;		_Flash_Memory_Main
 15092 ;;		_Exception_Main
 15093 ;;		_Load_Main
 15094 ;;		_setTemp_Main
 15095 ;;		_setControl_Lights_Table
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _getMain_All_LightsStatus
 15101  1AC2                     _getMain_All_LightsStatus:	
 15102                           
 15103                           ;Main_B1.c: 374: char status = 0;
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15107  1AC2  0020               	movlb	0	; select bank0
 15108  1AC3  01A0               	clrf	getMain_All_LightsStatus@status
 15109                           
 15110                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15111  1AC4  3000               	movlw	0
 15112  1AC5  0022               	movlb	2	; select bank2
 15113  1AC6  1861               	btfsc	(_DimmerLights1^(0+256)+1),0
 15114  1AC7  3001               	movlw	1
 15115  1AC8  0020               	movlb	0	; select bank0
 15116  1AC9  00A0               	movwf	getMain_All_LightsStatus@status
 15117                           
 15118                           ;Main_B1.c: 420: return status;
 15119  1ACA  0820               	movf	getMain_All_LightsStatus@status,w
 15120  1ACB  0008               	return
 15121  1ACC                     __end_of_getMain_All_LightsStatus:	
 15122                           
 15123                           	psect	text101
 15124  1BF4                     __ptext101:	
 15125 ;; *************** function _getDelayOff_GO *****************
 15126 ;; Defined at:
 15127 ;;		line 114 in file "../src/DelayOff_B1.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;  sw              1    wreg     unsigned char 
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;  sw              1    2[BANK0 ] unsigned char 
 15132 ;;  go              1    3[BANK0 ] unsigned char 
 15133 ;; Return value:  Size  Location     Type
 15134 ;;                  1    wreg      unsigned char 
 15135 ;; Registers used:
 15136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15137 ;; Tracked objects:
 15138 ;;		On entry : 0/0
 15139 ;;		On exit  : 0/0
 15140 ;;		Unchanged: 0/0
 15141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;Total ram usage:        2 bytes
 15147 ;; Hardware stack levels used:    1
 15148 ;; Hardware stack levels required when called:    6
 15149 ;; This function calls:
 15150 ;;		_DelayOffPointSelect
 15151 ;; This function is called by:
 15152 ;;		_setDimmerLights_OnOff
 15153 ;; This function uses a non-reentrant model
 15154 ;;
 15155                           
 15156                           
 15157                           ;psect for function _getDelayOff_GO
 15158  1BF4                     _getDelayOff_GO:	
 15159                           
 15160                           ;incstack = 0
 15161                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15162                           ;getDelayOff_GO@sw stored from wreg
 15163  1BF4  0020               	movlb	0	; select bank0
 15164  1BF5  00A2               	movwf	getDelayOff_GO@sw
 15165                           
 15166                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15167  1BF6  0822               	movf	getDelayOff_GO@sw,w
 15168  1BF7  319A  22F8         	fcall	_DelayOffPointSelect
 15169                           
 15170                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15171  1BF9  0021               	movlb	1	; select bank1
 15172  1BFA  084A               	movf	_DelayOff^(0+128),w
 15173  1BFB  0086               	movwf	6
 15174  1BFC  3001               	movlw	1	; select bank2/3
 15175  1BFD  0087               	movwf	7
 15176  1BFE  3000               	movlw	0
 15177  1BFF  1881               	btfsc	1,1
 15178  1C00  3001               	movlw	1
 15179  1C01  0020               	movlb	0	; select bank0
 15180  1C02  00A3               	movwf	getDelayOff_GO@go
 15181                           
 15182                           ;DelayOff_B1.c: 117: return go;
 15183  1C03  0823               	movf	getDelayOff_GO@go,w
 15184  1C04  0008               	return
 15185  1C05                     __end_of_getDelayOff_GO:	
 15186                           
 15187                           	psect	text102
 15188  1C49                     __ptext102:	
 15189 ;; *************** function _getCmd_Status *****************
 15190 ;; Defined at:
 15191 ;;		line 659 in file "../src/Main_B1.c"
 15192 ;; Parameters:    Size  Location     Type
 15193 ;;  number          1    wreg     unsigned char 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  number          1    0[BANK0 ] unsigned char 
 15196 ;;  cmd             1    1[BANK0 ] unsigned char 
 15197 ;; Return value:  Size  Location     Type
 15198 ;;                  1    wreg      unsigned char 
 15199 ;; Registers used:
 15200 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;Total ram usage:        2 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    5
 15213 ;; This function calls:
 15214 ;;		Nothing
 15215 ;; This function is called by:
 15216 ;;		_setDimmerLights_OnOff
 15217 ;; This function uses a non-reentrant model
 15218 ;;
 15219                           
 15220                           
 15221                           ;psect for function _getCmd_Status
 15222  1C49                     _getCmd_Status:	
 15223                           
 15224                           ;incstack = 0
 15225                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15226                           ;getCmd_Status@number stored from wreg
 15227  1C49  0020               	movlb	0	; select bank0
 15228  1C4A  00A0               	movwf	getCmd_Status@number
 15229                           
 15230                           ;Main_B1.c: 660: char cmd = 0;
 15231  1C4B  01A1               	clrf	getCmd_Status@cmd
 15232                           
 15233                           ;Main_B1.c: 661: switch (number) {
 15234  1C4C  2C54               	goto	l6688
 15235  1C4D                     l6684:	
 15236                           ;Main_B1.c: 662: case 1:
 15237                           
 15238                           
 15239                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15240  1C4D  3000               	movlw	0
 15241  1C4E  0021               	movlb	1	; select bank1
 15242  1C4F  1849               	btfsc	_Cmd^(0+128),0
 15243  1C50  3001               	movlw	1
 15244  1C51  0020               	movlb	0	; select bank0
 15245  1C52  00A1               	movwf	getCmd_Status@cmd
 15246                           
 15247                           ;Main_B1.c: 665: }
 15248                           
 15249                           ;Main_B1.c: 664: break;
 15250  1C53  2C59               	goto	l6690
 15251  1C54                     l6688:	
 15252  1C54  0820               	movf	getCmd_Status@number,w
 15253                           
 15254                           ; Switch size 1, requested type "space"
 15255                           ; Number of cases is 1, Range of values is 1 to 1
 15256                           ; switch strategies available:
 15257                           ; Name         Instructions Cycles
 15258                           ; simple_byte            4     3 (average)
 15259                           ; direct_byte           11     9 (fixed)
 15260                           ; jumptable            263     9 (fixed)
 15261                           ;	Chosen strategy is simple_byte
 15262  1C55  3A01               	xorlw	1	; case 1
 15263  1C56  1903               	skipnz
 15264  1C57  2C4D               	goto	l6684
 15265  1C58  2C59               	goto	l6690
 15266  1C59                     l6690:	
 15267                           
 15268                           ;Main_B1.c: 666: return cmd;
 15269  1C59  0821               	movf	getCmd_Status@cmd,w
 15270  1C5A  0008               	return
 15271  1C5B                     __end_of_getCmd_Status:	
 15272                           
 15273                           	psect	text103
 15274  13CF                     __ptext103:	
 15275 ;; *************** function _setDimmerLights_Dimming *****************
 15276 ;; Defined at:
 15277 ;;		line 958 in file "../src/Dimmer_B1.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  lights          1    wreg     unsigned char 
 15280 ;;  status          1   74[BANK0 ] unsigned char 
 15281 ;; Auto vars:     Size  Location     Type
 15282 ;;  lights          1   77[BANK0 ] unsigned char 
 15283 ;;  value           1   76[BANK0 ] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15293 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;Total ram usage:        4 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    8
 15300 ;; This function calls:
 15301 ;;		_getDimmerIntr_DimmingValue
 15302 ;;		_getDimmerLights_ValueToPercent
 15303 ;;		_setBuz
 15304 ;;		_setDimmerIntr_Dimming_Sw
 15305 ;;		_setDimmerIntr_MaxmumValue
 15306 ;;		_setDimmerLights_Line
 15307 ;;		_setMemory_Modify
 15308 ;;		_setProductData
 15309 ;;		_setRF_DimmerLights
 15310 ;;		_setRF_TransceiveGO
 15311 ;;		_setTxData
 15312 ;; This function is called by:
 15313 ;;		_setDimmerLights_Main
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _setDimmerLights_Dimming
 15319  13CF                     _setDimmerLights_Dimming:	
 15320                           
 15321                           ;incstack = 0
 15322                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15323                           ;setDimmerLights_Dimming@lights stored from wreg
 15324  13CF  0020               	movlb	0	; select bank0
 15325  13D0  00ED               	movwf	setDimmerLights_Dimming@lights
 15326                           
 15327                           ;Dimmer_B1.c: 959: if (status == 1) {
 15328  13D1  086A               	movf	setDimmerLights_Dimming@status,w
 15329  13D2  3A01               	xorlw	1
 15330  13D3  1D03               	skipz
 15331  13D4  2BE8               	goto	l6990
 15332                           
 15333                           ;Dimmer_B1.c: 960: setDimmerIntr_Dimming_Sw(lights, 1);
 15334  13D5  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15335  13D6  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15336  13D7  086D               	movf	setDimmerLights_Dimming@lights,w
 15337  13D8  319D  2580  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15338                           
 15339                           ;Dimmer_B1.c: 963: setRF_TransceiveGO(0);
 15340  13DB  3000               	movlw	0
 15341  13DC  319C  24B6  3193   	fcall	_setRF_TransceiveGO
 15342                           
 15343                           ;Dimmer_B1.c: 965: setBuz(1, 100);
 15344  13DF  3064               	movlw	100
 15345  13E0  0020               	movlb	0	; select bank0
 15346  13E1  00A9               	movwf	setBuz@time
 15347  13E2  3000               	movlw	0
 15348  13E3  00AA               	movwf	setBuz@time+1
 15349  13E4  3001               	movlw	1
 15350  13E5  3194  2425         	fcall	_setBuz
 15351                           
 15352                           ;Dimmer_B1.c: 966: } else if (status == 0) {
 15353  13E7  0008               	return
 15354  13E8                     l6990:	
 15355  13E8  0020               	movlb	0	; select bank0
 15356  13E9  08EA               	movf	setDimmerLights_Dimming@status,f
 15357  13EA  1D03               	skipz
 15358  13EB  0008               	return
 15359                           
 15360                           ;Dimmer_B1.c: 967: setDimmerIntr_Dimming_Sw(lights, 0);
 15361  13EC  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15362  13ED  086D               	movf	setDimmerLights_Dimming@lights,w
 15363  13EE  319D  2580  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15364                           
 15365                           ;Dimmer_B1.c: 970: Dimmer.Load_Status = 0;
 15366  13F1  0022               	movlb	2	; select bank2
 15367  13F2  112C               	bcf	_Dimmer^(0+256),2
 15368                           
 15369                           ;Dimmer_B1.c: 971: setDimmerLights_Line(lights);
 15370  13F3  0020               	movlb	0	; select bank0
 15371  13F4  086D               	movf	setDimmerLights_Dimming@lights,w
 15372  13F5  319B  23E3  3193   	fcall	_setDimmerLights_Line
 15373                           
 15374                           ;Dimmer_B1.c: 973: char value = getDimmerIntr_DimmingValue(lights);
 15375  13F8  0020               	movlb	0	; select bank0
 15376  13F9  086D               	movf	setDimmerLights_Dimming@lights,w
 15377  13FA  319B  23A4  3193   	fcall	_getDimmerIntr_DimmingValue
 15378  13FD  0020               	movlb	0	; select bank0
 15379  13FE  00EB               	movwf	??_setDimmerLights_Dimming
 15380  13FF  086B               	movf	??_setDimmerLights_Dimming,w
 15381  1400  00EC               	movwf	setDimmerLights_Dimming@value
 15382                           
 15383                           ;Dimmer_B1.c: 974: setDimmerIntr_MaxmumValue(lights, value);
 15384  1401  086C               	movf	setDimmerLights_Dimming@value,w
 15385  1402  00EB               	movwf	??_setDimmerLights_Dimming
 15386  1403  086B               	movf	??_setDimmerLights_Dimming,w
 15387  1404  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15388  1405  086D               	movf	setDimmerLights_Dimming@lights,w
 15389  1406  319B  231C  3193   	fcall	_setDimmerIntr_MaxmumValue
 15390                           
 15391                           ;Dimmer_B1.c: 975: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15392  1409  0020               	movlb	0	; select bank0
 15393  140A  086C               	movf	setDimmerLights_Dimming@value,w
 15394  140B  3196  2660  3193   	fcall	_getDimmerLights_ValueToPercent
 15395  140E  0020               	movlb	0	; select bank0
 15396  140F  00EB               	movwf	??_setDimmerLights_Dimming
 15397  1410  086B               	movf	??_setDimmerLights_Dimming,w
 15398  1411  00E2               	movwf	setProductData@value
 15399  1412  086D               	movf	setDimmerLights_Dimming@lights,w
 15400  1413  3E14               	addlw	20
 15401  1414  319B  2310  3193   	fcall	_setProductData
 15402                           
 15403                           ;Dimmer_B1.c: 982: setMemory_Modify(1);
 15404  1417  3001               	movlw	1
 15405  1418  319C  24A3  3193   	fcall	_setMemory_Modify
 15406                           
 15407                           ;Dimmer_B1.c: 986: setRF_DimmerLights(lights, 1);
 15408  141B  0020               	movlb	0	; select bank0
 15409  141C  01E5               	clrf	setRF_DimmerLights@on
 15410  141D  0AE5               	incf	setRF_DimmerLights@on,f
 15411  141E  086D               	movf	setDimmerLights_Dimming@lights,w
 15412  141F  3196  26C5  3193   	fcall	_setRF_DimmerLights
 15413                           
 15414                           ;Dimmer_B1.c: 987: setTxData();
 15415  1422  318E  267F         	fcall	_setTxData
 15416  1424  0008               	return
 15417  1425                     __end_of_setDimmerLights_Dimming:	
 15418                           
 15419                           	psect	text104
 15420  0E7F                     __ptext104:	
 15421 ;; *************** function _setTxData *****************
 15422 ;; Defined at:
 15423 ;;		line 183 in file "../src/RF_Control_B1.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;		None
 15426 ;; Auto vars:     Size  Location     Type
 15427 ;;  i               1    0        unsigned char 
 15428 ;; Return value:  Size  Location     Type
 15429 ;;		None               void
 15430 ;; Registers used:
 15431 ;;		wreg, fsr1l, fsr1h, status,2
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        1 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    5
 15444 ;; This function calls:
 15445 ;;		Nothing
 15446 ;; This function is called by:
 15447 ;;		_setDimmerLights_OnOff
 15448 ;;		_setDimmerLights_Dimming
 15449 ;;		_getRxData
 15450 ;;		_setControl_Lights_Table
 15451 ;;		_setRFSW_Control
 15452 ;;		_setRFSW_AdjControl
 15453 ;; This function uses a non-reentrant model
 15454 ;;
 15455                           
 15456                           
 15457                           ;psect for function _setTxData
 15458  0E7F                     _setTxData:	
 15459                           
 15460                           ;RF_Control_B1.c: 184: char i;
 15461                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15462                           
 15463                           ;incstack = 0
 15464                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15465  0E7F  0021               	movlb	1	; select bank1
 15466  0E80  1C20               	btfss	_RF1^(0+128),0
 15467  0E81  0008               	return
 15468                           
 15469                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15470  0E82  1520               	bsf	_RF1^(0+128),2
 15471                           
 15472                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15473  0E83  01A3               	clrf	(_RF1^(0+128)+3)
 15474  0E84  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15475                           
 15476                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15477  0E85  3063               	movlw	99
 15478  0E86  0020               	movlb	0	; select bank0
 15479  0E87  00A0               	movwf	??_setTxData
 15480  0E88  0820               	movf	??_setTxData,w
 15481  0E89  0023               	movlb	3	; select bank3
 15482  0E8A  00A0               	movwf	_RF_Data^(0+384)
 15483                           
 15484                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15485  0E8B  3002               	movlw	2
 15486  0E8C  0020               	movlb	0	; select bank0
 15487  0E8D  00A0               	movwf	??_setTxData
 15488  0E8E  0820               	movf	??_setTxData,w
 15489  0E8F  0023               	movlb	3	; select bank3
 15490  0E90  00A1               	movwf	(_RF_Data^(0+384)+1)
 15491                           
 15492                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15493  0E91  0021               	movlb	1	; select bank1
 15494  0E92  086E               	movf	_product^(0+128),w
 15495  0E93  0086               	movwf	6
 15496  0E94  3001               	movlw	1	; select bank2/3
 15497  0E95  0087               	movwf	7
 15498  0E96  3001               	movlw	1	; select bank2/3
 15499  0E97  3F42               	moviw [2]fsr1
 15500  0E98  0023               	movlb	3	; select bank3
 15501  0E99  00A2               	movwf	(_RF_Data^(0+384)+2)
 15502                           
 15503                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15504  0E9A  0021               	movlb	1	; select bank1
 15505  0E9B  086E               	movf	_product^(0+128),w
 15506  0E9C  0086               	movwf	6
 15507  0E9D  3001               	movlw	1	; select bank2/3
 15508  0E9E  0087               	movwf	7
 15509  0E9F  3001               	movlw	1	; select bank2/3
 15510  0EA0  3F43               	moviw [3]fsr1
 15511  0EA1  0023               	movlb	3	; select bank3
 15512  0EA2  00A3               	movwf	(_RF_Data^(0+384)+3)
 15513                           
 15514                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15515  0EA3  0021               	movlb	1	; select bank1
 15516  0EA4  086E               	movf	_product^(0+128),w
 15517  0EA5  0086               	movwf	6
 15518  0EA6  3001               	movlw	1	; select bank2/3
 15519  0EA7  0087               	movwf	7
 15520  0EA8  3001               	movlw	1	; select bank2/3
 15521  0EA9  3F44               	moviw [4]fsr1
 15522  0EAA  0023               	movlb	3	; select bank3
 15523  0EAB  00A4               	movwf	(_RF_Data^(0+384)+4)
 15524                           
 15525                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15526  0EAC  0021               	movlb	1	; select bank1
 15527  0EAD  086E               	movf	_product^(0+128),w
 15528  0EAE  0086               	movwf	6
 15529  0EAF  3001               	movlw	1	; select bank2/3
 15530  0EB0  0087               	movwf	7
 15531  0EB1  3001               	movlw	1	; select bank2/3
 15532  0EB2  3F45               	moviw [5]fsr1
 15533  0EB3  0023               	movlb	3	; select bank3
 15534  0EB4  00A5               	movwf	(_RF_Data^(0+384)+5)
 15535                           
 15536                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15537  0EB5  0021               	movlb	1	; select bank1
 15538  0EB6  086E               	movf	_product^(0+128),w
 15539  0EB7  0086               	movwf	6
 15540  0EB8  3001               	movlw	1	; select bank2/3
 15541  0EB9  0087               	movwf	7
 15542  0EBA  3001               	movlw	1	; select bank2/3
 15543  0EBB  3F46               	moviw [6]fsr1
 15544  0EBC  0023               	movlb	3	; select bank3
 15545  0EBD  00A6               	movwf	(_RF_Data^(0+384)+6)
 15546                           
 15547                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15548  0EBE  0021               	movlb	1	; select bank1
 15549  0EBF  086E               	movf	_product^(0+128),w
 15550  0EC0  0086               	movwf	6
 15551  0EC1  3001               	movlw	1	; select bank2/3
 15552  0EC2  0087               	movwf	7
 15553  0EC3  3001               	movlw	1	; select bank2/3
 15554  0EC4  3F47               	moviw [7]fsr1
 15555  0EC5  0023               	movlb	3	; select bank3
 15556  0EC6  00A7               	movwf	(_RF_Data^(0+384)+7)
 15557                           
 15558                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15559  0EC7  0021               	movlb	1	; select bank1
 15560  0EC8  086E               	movf	_product^(0+128),w
 15561  0EC9  0086               	movwf	6
 15562  0ECA  3001               	movlw	1	; select bank2/3
 15563  0ECB  0087               	movwf	7
 15564  0ECC  3001               	movlw	1	; select bank2/3
 15565  0ECD  3F48               	moviw [8]fsr1
 15566  0ECE  0023               	movlb	3	; select bank3
 15567  0ECF  00A8               	movwf	(_RF_Data^(0+384)+8)
 15568                           
 15569                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15570  0ED0  0021               	movlb	1	; select bank1
 15571  0ED1  086E               	movf	_product^(0+128),w
 15572  0ED2  0086               	movwf	6
 15573  0ED3  3001               	movlw	1	; select bank2/3
 15574  0ED4  0087               	movwf	7
 15575  0ED5  3001               	movlw	1	; select bank2/3
 15576  0ED6  3F49               	moviw [9]fsr1
 15577  0ED7  0023               	movlb	3	; select bank3
 15578  0ED8  00A9               	movwf	(_RF_Data^(0+384)+9)
 15579                           
 15580                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15581  0ED9  0021               	movlb	1	; select bank1
 15582  0EDA  086E               	movf	_product^(0+128),w
 15583  0EDB  0086               	movwf	6
 15584  0EDC  3001               	movlw	1	; select bank2/3
 15585  0EDD  0087               	movwf	7
 15586  0EDE  3001               	movlw	1	; select bank2/3
 15587  0EDF  3F4A               	moviw [10]fsr1
 15588  0EE0  0023               	movlb	3	; select bank3
 15589  0EE1  00AA               	movwf	(_RF_Data^(0+384)+10)
 15590                           
 15591                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15592  0EE2  0021               	movlb	1	; select bank1
 15593  0EE3  086E               	movf	_product^(0+128),w
 15594  0EE4  0086               	movwf	6
 15595  0EE5  3001               	movlw	1	; select bank2/3
 15596  0EE6  0087               	movwf	7
 15597  0EE7  3001               	movlw	1	; select bank2/3
 15598  0EE8  3F4B               	moviw [11]fsr1
 15599  0EE9  0023               	movlb	3	; select bank3
 15600  0EEA  00AB               	movwf	(_RF_Data^(0+384)+11)
 15601                           
 15602                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15603  0EEB  0021               	movlb	1	; select bank1
 15604  0EEC  086E               	movf	_product^(0+128),w
 15605  0EED  0086               	movwf	6
 15606  0EEE  3001               	movlw	1	; select bank2/3
 15607  0EEF  0087               	movwf	7
 15608  0EF0  3001               	movlw	1	; select bank2/3
 15609  0EF1  3F4C               	moviw [12]fsr1
 15610  0EF2  0023               	movlb	3	; select bank3
 15611  0EF3  00AC               	movwf	(_RF_Data^(0+384)+12)
 15612                           
 15613                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15614  0EF4  0021               	movlb	1	; select bank1
 15615  0EF5  086E               	movf	_product^(0+128),w
 15616  0EF6  0086               	movwf	6
 15617  0EF7  3001               	movlw	1	; select bank2/3
 15618  0EF8  0087               	movwf	7
 15619  0EF9  3001               	movlw	1	; select bank2/3
 15620  0EFA  3F4D               	moviw [13]fsr1
 15621  0EFB  0023               	movlb	3	; select bank3
 15622  0EFC  00AD               	movwf	(_RF_Data^(0+384)+13)
 15623                           
 15624                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15625  0EFD  0021               	movlb	1	; select bank1
 15626  0EFE  086E               	movf	_product^(0+128),w
 15627  0EFF  0086               	movwf	6
 15628  0F00  3001               	movlw	1	; select bank2/3
 15629  0F01  0087               	movwf	7
 15630  0F02  3001               	movlw	1	; select bank2/3
 15631  0F03  3F4E               	moviw [14]fsr1
 15632  0F04  0023               	movlb	3	; select bank3
 15633  0F05  00AE               	movwf	(_RF_Data^(0+384)+14)
 15634                           
 15635                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15636  0F06  0021               	movlb	1	; select bank1
 15637  0F07  086E               	movf	_product^(0+128),w
 15638  0F08  0086               	movwf	6
 15639  0F09  3001               	movlw	1	; select bank2/3
 15640  0F0A  0087               	movwf	7
 15641  0F0B  3001               	movlw	1	; select bank2/3
 15642  0F0C  3F4F               	moviw [15]fsr1
 15643  0F0D  0023               	movlb	3	; select bank3
 15644  0F0E  00AF               	movwf	(_RF_Data^(0+384)+15)
 15645                           
 15646                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15647  0F0F  0021               	movlb	1	; select bank1
 15648  0F10  086E               	movf	_product^(0+128),w
 15649  0F11  0086               	movwf	6
 15650  0F12  3001               	movlw	1	; select bank2/3
 15651  0F13  0087               	movwf	7
 15652  0F14  3001               	movlw	1	; select bank2/3
 15653  0F15  3F50               	moviw [16]fsr1
 15654  0F16  0023               	movlb	3	; select bank3
 15655  0F17  00B0               	movwf	(_RF_Data^(0+384)+16)
 15656                           
 15657                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15658  0F18  0021               	movlb	1	; select bank1
 15659  0F19  086E               	movf	_product^(0+128),w
 15660  0F1A  0086               	movwf	6
 15661  0F1B  3001               	movlw	1	; select bank2/3
 15662  0F1C  0087               	movwf	7
 15663  0F1D  3001               	movlw	1	; select bank2/3
 15664  0F1E  3F51               	moviw [17]fsr1
 15665  0F1F  0023               	movlb	3	; select bank3
 15666  0F20  00B1               	movwf	(_RF_Data^(0+384)+17)
 15667                           
 15668                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15669  0F21  0021               	movlb	1	; select bank1
 15670  0F22  086E               	movf	_product^(0+128),w
 15671  0F23  0086               	movwf	6
 15672  0F24  3001               	movlw	1	; select bank2/3
 15673  0F25  0087               	movwf	7
 15674  0F26  3001               	movlw	1	; select bank2/3
 15675  0F27  3F52               	moviw [18]fsr1
 15676  0F28  0023               	movlb	3	; select bank3
 15677  0F29  00B2               	movwf	(_RF_Data^(0+384)+18)
 15678                           
 15679                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15680  0F2A  0021               	movlb	1	; select bank1
 15681  0F2B  086E               	movf	_product^(0+128),w
 15682  0F2C  0086               	movwf	6
 15683  0F2D  3001               	movlw	1	; select bank2/3
 15684  0F2E  0087               	movwf	7
 15685  0F2F  3001               	movlw	1	; select bank2/3
 15686  0F30  3F53               	moviw [19]fsr1
 15687  0F31  0023               	movlb	3	; select bank3
 15688  0F32  00B3               	movwf	(_RF_Data^(0+384)+19)
 15689                           
 15690                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15691  0F33  30D1               	movlw	209
 15692  0F34  0020               	movlb	0	; select bank0
 15693  0F35  00A0               	movwf	??_setTxData
 15694  0F36  0820               	movf	??_setTxData,w
 15695  0F37  0023               	movlb	3	; select bank3
 15696  0F38  00B4               	movwf	(_RF_Data^(0+384)+20)
 15697  0F39  0008               	return
 15698  0F3A                     __end_of_setTxData:	
 15699                           
 15700                           	psect	text105
 15701  1CB6                     __ptext105:	
 15702 ;; *************** function _setRF_TransceiveGO *****************
 15703 ;; Defined at:
 15704 ;;		line 505 in file "../src/RF_Control_B1.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;  command         1    wreg     unsigned char 
 15707 ;; Auto vars:     Size  Location     Type
 15708 ;;  command         1    1[BANK0 ] unsigned char 
 15709 ;; Return value:  Size  Location     Type
 15710 ;;		None               void
 15711 ;; Registers used:
 15712 ;;		wreg, status,2, status,0
 15713 ;; Tracked objects:
 15714 ;;		On entry : 0/0
 15715 ;;		On exit  : 0/0
 15716 ;;		Unchanged: 0/0
 15717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;Total ram usage:        2 bytes
 15723 ;; Hardware stack levels used:    1
 15724 ;; Hardware stack levels required when called:    5
 15725 ;; This function calls:
 15726 ;;		Nothing
 15727 ;; This function is called by:
 15728 ;;		_setDimmerLights_Dimming
 15729 ;; This function uses a non-reentrant model
 15730 ;;
 15731                           
 15732                           
 15733                           ;psect for function _setRF_TransceiveGO
 15734  1CB6                     _setRF_TransceiveGO:	
 15735                           
 15736                           ;incstack = 0
 15737                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15738                           ;setRF_TransceiveGO@command stored from wreg
 15739  1CB6  0020               	movlb	0	; select bank0
 15740  1CB7  00A1               	movwf	setRF_TransceiveGO@command
 15741                           
 15742                           ;RF_Control_B1.c: 506: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15743  1CB8  0821               	movf	setRF_TransceiveGO@command,w
 15744  1CB9  3A01               	xorlw	1
 15745  1CBA  3000               	movlw	0
 15746  1CBB  1903               	skipnz
 15747  1CBC  3001               	movlw	1
 15748  1CBD  00A0               	movwf	??_setRF_TransceiveGO
 15749  1CBE  0DA0               	rlf	??_setRF_TransceiveGO,f
 15750  1CBF  0DA0               	rlf	??_setRF_TransceiveGO,f
 15751  1CC0  0021               	movlb	1	; select bank1
 15752  1CC1  0820               	movf	_RF1^(0+128),w
 15753  1CC2  0020               	movlb	0	; select bank0
 15754  1CC3  0620               	xorwf	??_setRF_TransceiveGO,w
 15755  1CC4  39FB               	andlw	-5
 15756  1CC5  0620               	xorwf	??_setRF_TransceiveGO,w
 15757  1CC6  0021               	movlb	1	; select bank1
 15758  1CC7  00A0               	movwf	_RF1^(0+128)
 15759  1CC8  0008               	return
 15760  1CC9                     __end_of_setRF_TransceiveGO:	
 15761                           
 15762                           	psect	text106
 15763  16C5                     __ptext106:	
 15764 ;; *************** function _setRF_DimmerLights *****************
 15765 ;; Defined at:
 15766 ;;		line 490 in file "../src/RF_Control_B1.c"
 15767 ;; Parameters:    Size  Location     Type
 15768 ;;  lights          1    wreg     unsigned char 
 15769 ;;  on              1   69[BANK0 ] unsigned char 
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;  lights          1   73[BANK0 ] unsigned char 
 15772 ;;  status          1   72[BANK0 ] unsigned char 
 15773 ;; Return value:  Size  Location     Type
 15774 ;;		None               void
 15775 ;; Registers used:
 15776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15777 ;; Tracked objects:
 15778 ;;		On entry : 0/0
 15779 ;;		On exit  : 0/0
 15780 ;;		Unchanged: 0/0
 15781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15782 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;Total ram usage:        5 bytes
 15787 ;; Hardware stack levels used:    1
 15788 ;; Hardware stack levels required when called:    6
 15789 ;; This function calls:
 15790 ;;		_setProductData
 15791 ;; This function is called by:
 15792 ;;		_setDimmerLights_OnOff
 15793 ;;		_setDimmerLights_Dimming
 15794 ;;		_setRFSW_Control
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           
 15799                           ;psect for function _setRF_DimmerLights
 15800  16C5                     _setRF_DimmerLights:	
 15801                           
 15802                           ;incstack = 0
 15803                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15804                           ;setRF_DimmerLights@lights stored from wreg
 15805  16C5  0020               	movlb	0	; select bank0
 15806  16C6  00E9               	movwf	setRF_DimmerLights@lights
 15807                           
 15808                           ;RF_Control_B1.c: 491: char status = 1;
 15809  16C7  01E8               	clrf	setRF_DimmerLights@status
 15810  16C8  0AE8               	incf	setRF_DimmerLights@status,f
 15811                           
 15812                           ;RF_Control_B1.c: 492: status <<= (lights - 1);
 15813  16C9  0869               	movf	setRF_DimmerLights@lights,w
 15814  16CA  3EFF               	addlw	-1
 15815  16CB  0A89               	incf	9,f
 15816  16CC  2ECF               	goto	u5410
 15817  16CD                     u5415:	
 15818  16CD  1003               	clrc
 15819  16CE  0DE8               	rlf	setRF_DimmerLights@status,f
 15820  16CF                     u5410:	
 15821  16CF  3EFF               	addlw	-1
 15822  16D0  1D03               	skipz
 15823  16D1  2ECD               	goto	u5415
 15824                           
 15825                           ;RF_Control_B1.c: 493: setProductData(11, lights);
 15826  16D2  0869               	movf	setRF_DimmerLights@lights,w
 15827  16D3  00E6               	movwf	??_setRF_DimmerLights
 15828  16D4  0866               	movf	??_setRF_DimmerLights,w
 15829  16D5  00E2               	movwf	setProductData@value
 15830  16D6  300B               	movlw	11
 15831  16D7  319B  2310  3196   	fcall	_setProductData
 15832                           
 15833                           ;RF_Control_B1.c: 494: setProductData(17, product->Data[26 + lights]);
 15834  16DA  0020               	movlb	0	; select bank0
 15835  16DB  0869               	movf	setRF_DimmerLights@lights,w
 15836  16DC  3E1A               	addlw	26
 15837  16DD  0021               	movlb	1	; select bank1
 15838  16DE  076E               	addwf	_product^(0+128),w
 15839  16DF  0020               	movlb	0	; select bank0
 15840  16E0  00E6               	movwf	??_setRF_DimmerLights
 15841  16E1  0866               	movf	??_setRF_DimmerLights,w
 15842  16E2  0086               	movwf	6
 15843  16E3  3001               	movlw	1	; select bank2/3
 15844  16E4  0087               	movwf	7
 15845  16E5  0801               	movf	1,w
 15846  16E6  00E7               	movwf	??_setRF_DimmerLights+1
 15847  16E7  0867               	movf	??_setRF_DimmerLights+1,w
 15848  16E8  00E2               	movwf	setProductData@value
 15849  16E9  3011               	movlw	17
 15850  16EA  319B  2310  3196   	fcall	_setProductData
 15851                           
 15852                           ;RF_Control_B1.c: 495: if (on == 1) {
 15853  16ED  0020               	movlb	0	; select bank0
 15854  16EE  0865               	movf	setRF_DimmerLights@on,w
 15855  16EF  3A01               	xorlw	1
 15856  16F0  1D03               	skipz
 15857  16F1  2F14               	goto	l6286
 15858                           
 15859                           ;RF_Control_B1.c: 496: setProductData(9, product->Data[20 + lights]);
 15860  16F2  0869               	movf	setRF_DimmerLights@lights,w
 15861  16F3  3E14               	addlw	20
 15862  16F4  0021               	movlb	1	; select bank1
 15863  16F5  076E               	addwf	_product^(0+128),w
 15864  16F6  0020               	movlb	0	; select bank0
 15865  16F7  00E6               	movwf	??_setRF_DimmerLights
 15866  16F8  0866               	movf	??_setRF_DimmerLights,w
 15867  16F9  0086               	movwf	6
 15868  16FA  3001               	movlw	1	; select bank2/3
 15869  16FB  0087               	movwf	7
 15870  16FC  0801               	movf	1,w
 15871  16FD  00E7               	movwf	??_setRF_DimmerLights+1
 15872  16FE  0867               	movf	??_setRF_DimmerLights+1,w
 15873  16FF  00E2               	movwf	setProductData@value
 15874  1700  3009               	movlw	9
 15875  1701  319B  2310  3196   	fcall	_setProductData
 15876                           
 15877                           ;RF_Control_B1.c: 497: setProductData(15, (product->Data[15] | status));
 15878  1704  0021               	movlb	1	; select bank1
 15879  1705  086E               	movf	_product^(0+128),w
 15880  1706  3E0F               	addlw	15
 15881  1707  0086               	movwf	6
 15882  1708  3001               	movlw	1	; select bank2/3
 15883  1709  0087               	movwf	7
 15884  170A  0801               	movf	1,w
 15885  170B  0020               	movlb	0	; select bank0
 15886  170C  0468               	iorwf	setRF_DimmerLights@status,w
 15887  170D  00E6               	movwf	??_setRF_DimmerLights
 15888  170E  0866               	movf	??_setRF_DimmerLights,w
 15889  170F  00E2               	movwf	setProductData@value
 15890  1710  300F               	movlw	15
 15891  1711  319B  2310         	fcall	_setProductData
 15892                           
 15893                           ;RF_Control_B1.c: 498: } else {
 15894  1713  0008               	return
 15895  1714                     l6286:	
 15896                           
 15897                           ;RF_Control_B1.c: 499: setProductData(9, 0x00);
 15898  1714  0020               	movlb	0	; select bank0
 15899  1715  01E2               	clrf	setProductData@value
 15900  1716  3009               	movlw	9
 15901  1717  319B  2310  3196   	fcall	_setProductData
 15902                           
 15903                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 15904  171A  0021               	movlb	1	; select bank1
 15905  171B  086E               	movf	_product^(0+128),w
 15906  171C  3E0F               	addlw	15
 15907  171D  0086               	movwf	6
 15908  171E  3001               	movlw	1	; select bank2/3
 15909  171F  0087               	movwf	7
 15910  1720  0020               	movlb	0	; select bank0
 15911  1721  0968               	comf	setRF_DimmerLights@status,w
 15912  1722  0501               	andwf	1,w
 15913  1723  00E6               	movwf	??_setRF_DimmerLights
 15914  1724  0866               	movf	??_setRF_DimmerLights,w
 15915  1725  00E2               	movwf	setProductData@value
 15916  1726  300F               	movlw	15
 15917  1727  319B  2310         	fcall	_setProductData
 15918  1729  0008               	return
 15919  172A                     __end_of_setRF_DimmerLights:	
 15920                           
 15921                           	psect	text107
 15922  1BE3                     __ptext107:	
 15923 ;; *************** function _setDimmerLights_Line *****************
 15924 ;; Defined at:
 15925 ;;		line 1032 in file "../src/Dimmer_B1.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;  lights          1    wreg     unsigned char 
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;  lights          1    0[BANK0 ] unsigned char 
 15930 ;; Return value:  Size  Location     Type
 15931 ;;		None               void
 15932 ;; Registers used:
 15933 ;;		wreg
 15934 ;; Tracked objects:
 15935 ;;		On entry : 0/0
 15936 ;;		On exit  : 0/0
 15937 ;;		Unchanged: 0/0
 15938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;Total ram usage:        1 bytes
 15944 ;; Hardware stack levels used:    1
 15945 ;; Hardware stack levels required when called:    5
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_setDimmerLights_OnOff
 15950 ;;		_setDimmerLights_Dimming
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           
 15955                           ;psect for function _setDimmerLights_Line
 15956  1BE3                     _setDimmerLights_Line:	
 15957                           
 15958                           ;incstack = 0
 15959                           ; Regs used in _setDimmerLights_Line: [wreg]
 15960                           ;setDimmerLights_Line@lights stored from wreg
 15961  1BE3  0020               	movlb	0	; select bank0
 15962  1BE4  00A0               	movwf	setDimmerLights_Line@lights
 15963                           
 15964                           ;Dimmer_B1.c: 1033: Dimmer.LoadGO = 1;
 15965  1BE5  0022               	movlb	2	; select bank2
 15966  1BE6  14AC               	bsf	_Dimmer^(0+256),1
 15967                           
 15968                           ;Dimmer_B1.c: 1035: DimmerLights1.Line = 0;
 15969  1BE7  10E1               	bcf	(_DimmerLights1^(0+256)+1),1
 15970                           
 15971                           ;Dimmer_B1.c: 1036: if (lights == 1 && lights != 0) {
 15972  1BE8  0020               	movlb	0	; select bank0
 15973  1BE9  0820               	movf	setDimmerLights_Line@lights,w
 15974  1BEA  3A01               	xorlw	1
 15975  1BEB  1D03               	skipz
 15976  1BEC  0008               	return
 15977  1BED  0820               	movf	setDimmerLights_Line@lights,w
 15978  1BEE  1903               	btfsc	3,2
 15979  1BEF  0008               	return
 15980                           
 15981                           ;Dimmer_B1.c: 1037: DimmerLights1.Line = 1;
 15982  1BF0  0022               	movlb	2	; select bank2
 15983  1BF1  14E1               	bsf	(_DimmerLights1^(0+256)+1),1
 15984  1BF2  0020               	movlb	0	; select bank0
 15985  1BF3  0008               	return
 15986  1BF4                     __end_of_setDimmerLights_Line:	
 15987                           
 15988                           	psect	text108
 15989  1B1C                     __ptext108:	
 15990 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15991 ;; Defined at:
 15992 ;;		line 133 in file "../src/Dimmer_B1.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  lights          1    wreg     unsigned char 
 15995 ;;  value           1   66[BANK0 ] unsigned char 
 15996 ;; Auto vars:     Size  Location     Type
 15997 ;;  lights          1   68[BANK0 ] unsigned char 
 15998 ;; Return value:  Size  Location     Type
 15999 ;;		None               void
 16000 ;; Registers used:
 16001 ;;		wreg
 16002 ;; Tracked objects:
 16003 ;;		On entry : 0/0
 16004 ;;		On exit  : 0/0
 16005 ;;		Unchanged: 0/0
 16006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16007 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;Total ram usage:        3 bytes
 16012 ;; Hardware stack levels used:    1
 16013 ;; Hardware stack levels required when called:    5
 16014 ;; This function calls:
 16015 ;;		Nothing
 16016 ;; This function is called by:
 16017 ;;		_setDimmerLights_OnOff
 16018 ;;		_setDimmerLights_Dimming
 16019 ;;		_setRFSW_AdjControl
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _setDimmerIntr_MaxmumValue
 16025  1B1C                     _setDimmerIntr_MaxmumValue:	
 16026                           
 16027                           ;incstack = 0
 16028                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16029                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16030  1B1C  0020               	movlb	0	; select bank0
 16031  1B1D  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16032                           
 16033                           ;Dimmer_B1.c: 135: if (lights == 1) {
 16034  1B1E  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16035  1B1F  3A01               	xorlw	1
 16036  1B20  1D03               	skipz
 16037  1B21  0008               	return
 16038                           
 16039                           ;Dimmer_B1.c: 136: DimmerIntr1.MaxmumValue = value;
 16040  1B22  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16041  1B23  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16042  1B24  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16043  1B25  0021               	movlb	1	; select bank1
 16044  1B26  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16045  1B27  0008               	return
 16046  1B28                     __end_of_setDimmerIntr_MaxmumValue:	
 16047                           
 16048                           	psect	text109
 16049  1D80                     __ptext109:	
 16050 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16051 ;; Defined at:
 16052 ;;		line 210 in file "../src/Dimmer_B1.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;  lights          1    wreg     unsigned char 
 16055 ;;  command         1    0[BANK0 ] unsigned char 
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;  lights          1    2[BANK0 ] unsigned char 
 16058 ;; Return value:  Size  Location     Type
 16059 ;;		None               void
 16060 ;; Registers used:
 16061 ;;		wreg, status,2, status,0
 16062 ;; Tracked objects:
 16063 ;;		On entry : 0/0
 16064 ;;		On exit  : 0/0
 16065 ;;		Unchanged: 0/0
 16066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16067 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;Total ram usage:        3 bytes
 16072 ;; Hardware stack levels used:    1
 16073 ;; Hardware stack levels required when called:    5
 16074 ;; This function calls:
 16075 ;;		Nothing
 16076 ;; This function is called by:
 16077 ;;		_setDimmerLights_Dimming
 16078 ;;		_setDimmerLights_DimmingClose
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           
 16083                           ;psect for function _setDimmerIntr_Dimming_Sw
 16084  1D80                     _setDimmerIntr_Dimming_Sw:	
 16085                           
 16086                           ;incstack = 0
 16087                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16088                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16089  1D80  0020               	movlb	0	; select bank0
 16090  1D81  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16091                           
 16092                           ;Dimmer_B1.c: 212: if (lights == 1) {
 16093  1D82  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16094  1D83  3A01               	xorlw	1
 16095  1D84  1D03               	skipz
 16096  1D85  0008               	return
 16097                           
 16098                           ;Dimmer_B1.c: 213: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16099  1D86  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16100  1D87  3A01               	xorlw	1
 16101  1D88  3000               	movlw	0
 16102  1D89  1903               	skipnz
 16103  1D8A  3001               	movlw	1
 16104  1D8B  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16105  1D8C  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16106  1D8D  0021               	movlb	1	; select bank1
 16107  1D8E  083C               	movf	_DimmerIntr1^(0+128),w
 16108  1D8F  0020               	movlb	0	; select bank0
 16109  1D90  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16110  1D91  39EF               	andlw	-17
 16111  1D92  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16112  1D93  0021               	movlb	1	; select bank1
 16113  1D94  00BC               	movwf	_DimmerIntr1^(0+128)
 16114  1D95  0008               	return
 16115  1D96                     __end_of_setDimmerIntr_Dimming_Sw:	
 16116                           
 16117                           	psect	text110
 16118  1BA4                     __ptext110:	
 16119 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16120 ;; Defined at:
 16121 ;;		line 111 in file "../src/Dimmer_B1.c"
 16122 ;; Parameters:    Size  Location     Type
 16123 ;;  lights          1    wreg     unsigned char 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  lights          1    1[BANK0 ] unsigned char 
 16126 ;;  value           1    2[BANK0 ] unsigned char 
 16127 ;; Return value:  Size  Location     Type
 16128 ;;                  1    wreg      unsigned char 
 16129 ;; Registers used:
 16130 ;;		wreg, status,2
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;Total ram usage:        3 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    5
 16143 ;; This function calls:
 16144 ;;		Nothing
 16145 ;; This function is called by:
 16146 ;;		_setDimmerLights_Dimming
 16147 ;; This function uses a non-reentrant model
 16148 ;;
 16149                           
 16150                           
 16151                           ;psect for function _getDimmerIntr_DimmingValue
 16152  1BA4                     _getDimmerIntr_DimmingValue:	
 16153                           
 16154                           ;incstack = 0
 16155                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16156                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16157  1BA4  0020               	movlb	0	; select bank0
 16158  1BA5  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16159                           
 16160                           ;Dimmer_B1.c: 112: char value = 0;
 16161  1BA6  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16162                           
 16163                           ;Dimmer_B1.c: 114: if (lights == 1) {
 16164  1BA7  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16165  1BA8  3A01               	xorlw	1
 16166  1BA9  1D03               	skipz
 16167  1BAA  2BB1               	goto	l691
 16168                           
 16169                           ;Dimmer_B1.c: 115: value = DimmerIntr1.DimmingValue;
 16170  1BAB  0021               	movlb	1	; select bank1
 16171  1BAC  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16172  1BAD  0020               	movlb	0	; select bank0
 16173  1BAE  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16174  1BAF  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16175  1BB0  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16176  1BB1                     l691:	
 16177                           
 16178                           ;Dimmer_B1.c: 116: }
 16179                           ;Dimmer_B1.c: 128: return value;
 16180  1BB1  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16181  1BB2  0008               	return
 16182  1BB3                     __end_of_getDimmerIntr_DimmingValue:	
 16183                           
 16184                           	psect	text111
 16185  1D6A                     __ptext111:	
 16186 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16187 ;; Defined at:
 16188 ;;		line 993 in file "../src/Dimmer_B1.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;  lights          1    wreg     unsigned char 
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;  lights          1    0[COMMON] unsigned char 
 16193 ;;  allow           1    2[BANK0 ] unsigned char 
 16194 ;; Return value:  Size  Location     Type
 16195 ;;                  1    wreg      unsigned char 
 16196 ;; Registers used:
 16197 ;;		wreg, status,2, pclath, cstack
 16198 ;; Tracked objects:
 16199 ;;		On entry : 0/0
 16200 ;;		On exit  : 0/0
 16201 ;;		Unchanged: 0/0
 16202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;Total ram usage:        3 bytes
 16208 ;; Hardware stack levels used:    1
 16209 ;; Hardware stack levels required when called:    6
 16210 ;; This function calls:
 16211 ;;		_getLoad_OK
 16212 ;; This function is called by:
 16213 ;;		_setDimmerLights_Main
 16214 ;; This function uses a non-reentrant model
 16215 ;;
 16216                           
 16217                           
 16218                           ;psect for function _getDimmerLights_Allow_Condition
 16219  1D6A                     _getDimmerLights_Allow_Condition:	
 16220                           
 16221                           ;Dimmer_B1.c: 994: char allow = 0;
 16222                           
 16223                           ;incstack = 0
 16224                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16225  1D6A  0020               	movlb	0	; select bank0
 16226  1D6B  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16227                           
 16228                           ;Dimmer_B1.c: 1000: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16229  1D6C  01A3               	clrf	_getDimmerLights_Allow_Condition$2283
 16230  1D6D  0AA3               	incf	_getDimmerLights_Allow_Condition$2283,f
 16231  1D6E  319A  228F  319D   	fcall	_getLoad_OK
 16232  1D71  3800               	iorlw	0
 16233  1D72  1D03               	skipz
 16234  1D73  2D79               	goto	l6924
 16235  1D74  0022               	movlb	2	; select bank2
 16236  1D75  18AC               	btfsc	_Dimmer^(0+256),1
 16237  1D76  2D79               	goto	l6924
 16238  1D77  0020               	movlb	0	; select bank0
 16239  1D78  01A3               	clrf	_getDimmerLights_Allow_Condition$2283
 16240  1D79                     l6924:	
 16241  1D79  0020               	movlb	0	; select bank0
 16242  1D7A  0823               	movf	_getDimmerLights_Allow_Condition$2283,w
 16243  1D7B  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16244  1D7C  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16245  1D7D  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16246                           
 16247                           ;Dimmer_B1.c: 1027: return allow;
 16248  1D7E  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16249  1D7F  0008               	return
 16250  1D80                     __end_of_getDimmerLights_Allow_Condition:	
 16251                           
 16252                           	psect	text112
 16253  1A8F                     __ptext112:	
 16254 ;; *************** function _getLoad_OK *****************
 16255 ;; Defined at:
 16256 ;;		line 274 in file "../src/OverLoad_B1.c"
 16257 ;; Parameters:    Size  Location     Type
 16258 ;;		None
 16259 ;; Auto vars:     Size  Location     Type
 16260 ;;  ok              1    0[BANK0 ] unsigned char 
 16261 ;; Return value:  Size  Location     Type
 16262 ;;                  1    wreg      unsigned char 
 16263 ;; Registers used:
 16264 ;;		wreg, status,2
 16265 ;; Tracked objects:
 16266 ;;		On entry : 0/0
 16267 ;;		On exit  : 0/0
 16268 ;;		Unchanged: 0/0
 16269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;Total ram usage:        1 bytes
 16275 ;; Hardware stack levels used:    1
 16276 ;; Hardware stack levels required when called:    5
 16277 ;; This function calls:
 16278 ;;		Nothing
 16279 ;; This function is called by:
 16280 ;;		_DimmerLights_Main
 16281 ;;		_getDimmerLights_Allow_Condition
 16282 ;; This function uses a non-reentrant model
 16283 ;;
 16284                           
 16285                           
 16286                           ;psect for function _getLoad_OK
 16287  1A8F                     _getLoad_OK:	
 16288                           
 16289                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16290                           
 16291                           ;incstack = 0
 16292                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16293  1A8F  3000               	movlw	0
 16294  1A90  0022               	movlb	2	; select bank2
 16295  1A91  1BB8               	btfsc	_Load^(0+256),7
 16296  1A92  3001               	movlw	1
 16297  1A93  0020               	movlb	0	; select bank0
 16298  1A94  00A0               	movwf	getLoad_OK@ok
 16299                           
 16300                           ;OverLoad_B1.c: 276: return ok;
 16301  1A95  0820               	movf	getLoad_OK@ok,w
 16302  1A96  0008               	return
 16303  1A97                     __end_of_getLoad_OK:	
 16304                           
 16305                           	psect	text113
 16306  10C1                     __ptext113:	
 16307 ;; *************** function _getMain_All_Error_Status *****************
 16308 ;; Defined at:
 16309 ;;		line 424 in file "../src/Main_B1.c"
 16310 ;; Parameters:    Size  Location     Type
 16311 ;;  command         1    wreg     unsigned char 
 16312 ;; Auto vars:     Size  Location     Type
 16313 ;;  command         1    5[BANK0 ] unsigned char 
 16314 ;;  status          1    6[BANK0 ] unsigned char 
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  1    wreg      unsigned char 
 16317 ;; Registers used:
 16318 ;;		wreg, status,2, status,0
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;Total ram usage:        7 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    5
 16331 ;; This function calls:
 16332 ;;		Nothing
 16333 ;; This function is called by:
 16334 ;;		_DimmerLights_Main
 16335 ;;		_Exception_Main
 16336 ;;		_Load_Main
 16337 ;;		_setTemp_Main
 16338 ;;		_getRxData
 16339 ;;		_setSw_Main
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           
 16344                           ;psect for function _getMain_All_Error_Status
 16345  10C1                     _getMain_All_Error_Status:	
 16346                           
 16347                           ;incstack = 0
 16348                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16349                           ;getMain_All_Error_Status@command stored from wreg
 16350  10C1  0020               	movlb	0	; select bank0
 16351  10C2  00A5               	movwf	getMain_All_Error_Status@command
 16352                           
 16353                           ;Main_B1.c: 425: char status = 0;
 16354  10C3  01A6               	clrf	getMain_All_Error_Status@status
 16355                           
 16356                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16357  10C4  08A6               	movf	getMain_All_Error_Status@status,f
 16358  10C5  1D03               	skipz
 16359  10C6  28DB               	goto	l6634
 16360  10C7  0825               	movf	getMain_All_Error_Status@command,w
 16361  10C8  3A02               	xorlw	2
 16362  10C9  1903               	skipnz
 16363  10CA  28DB               	goto	l6634
 16364                           
 16365                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16366  10CB  0021               	movlb	1	; select bank1
 16367  10CC  18D8               	btfsc	_Temp^(0+128),1
 16368  10CD  28D2               	goto	l6632
 16369  10CE  0020               	movlb	0	; select bank0
 16370  10CF  01A1               	clrf	_getMain_All_Error_Status$3612
 16371  10D0  01A2               	clrf	_getMain_All_Error_Status$3612+1
 16372  10D1  28D7               	goto	l1473
 16373  10D2                     l6632:	
 16374  10D2  3002               	movlw	2
 16375  10D3  0020               	movlb	0	; select bank0
 16376  10D4  00A1               	movwf	_getMain_All_Error_Status$3612
 16377  10D5  3000               	movlw	0
 16378  10D6  00A2               	movwf	_getMain_All_Error_Status$3612+1
 16379  10D7                     l1473:	
 16380  10D7  0821               	movf	_getMain_All_Error_Status$3612,w
 16381  10D8  00A0               	movwf	??_getMain_All_Error_Status
 16382  10D9  0820               	movf	??_getMain_All_Error_Status,w
 16383  10DA  00A6               	movwf	getMain_All_Error_Status@status
 16384  10DB                     l6634:	
 16385                           
 16386                           ;Main_B1.c: 438: }
 16387                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16388  10DB  08A6               	movf	getMain_All_Error_Status@status,f
 16389  10DC  1D03               	skipz
 16390  10DD  28F2               	goto	l1474
 16391  10DE  0825               	movf	getMain_All_Error_Status@command,w
 16392  10DF  3A03               	xorlw	3
 16393  10E0  1903               	skipnz
 16394  10E1  28F2               	goto	l1474
 16395                           
 16396                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16397  10E2  0022               	movlb	2	; select bank2
 16398  10E3  1AB8               	btfsc	_Load^(0+256),5
 16399  10E4  28E9               	goto	l6642
 16400  10E5  0020               	movlb	0	; select bank0
 16401  10E6  01A3               	clrf	_getMain_All_Error_Status$3613
 16402  10E7  01A4               	clrf	_getMain_All_Error_Status$3613+1
 16403  10E8  28EE               	goto	l1478
 16404  10E9                     l6642:	
 16405  10E9  3003               	movlw	3
 16406  10EA  0020               	movlb	0	; select bank0
 16407  10EB  00A3               	movwf	_getMain_All_Error_Status$3613
 16408  10EC  3000               	movlw	0
 16409  10ED  00A4               	movwf	_getMain_All_Error_Status$3613+1
 16410  10EE                     l1478:	
 16411  10EE  0823               	movf	_getMain_All_Error_Status$3613,w
 16412  10EF  00A0               	movwf	??_getMain_All_Error_Status
 16413  10F0  0820               	movf	??_getMain_All_Error_Status,w
 16414  10F1  00A6               	movwf	getMain_All_Error_Status@status
 16415  10F2                     l1474:	
 16416                           
 16417                           ;Main_B1.c: 445: }
 16418                           ;Main_B1.c: 455: return status;
 16419  10F2  0826               	movf	getMain_All_Error_Status@status,w
 16420  10F3  0008               	return
 16421  10F4                     __end_of_getMain_All_Error_Status:	
 16422                           
 16423                           	psect	text114
 16424  1A7A                     __ptext114:	
 16425 ;; *************** function _DimmerLights_Initialization *****************
 16426 ;; Defined at:
 16427 ;;		line 641 in file "../src/Dimmer_B1.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;		None
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;		None
 16432 ;; Return value:  Size  Location     Type
 16433 ;;		None               void
 16434 ;; Registers used:
 16435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;Total ram usage:        0 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:    9
 16448 ;; This function calls:
 16449 ;;		_DimmerIntr_Initialization
 16450 ;;		_setDimmerLights_Initialization
 16451 ;; This function is called by:
 16452 ;;		_main
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           
 16457                           ;psect for function _DimmerLights_Initialization
 16458  1A7A                     _DimmerLights_Initialization:	
 16459                           
 16460                           ;Dimmer_B1.c: 643: setDimmerLights_Initialization(1);
 16461                           
 16462                           ;incstack = 0
 16463                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16464  1A7A  3001               	movlw	1
 16465  1A7B  3188  2001  319A   	fcall	_setDimmerLights_Initialization
 16466                           
 16467                           ;Dimmer_B1.c: 653: DimmerIntr_Initialization();
 16468  1A7E  3194  24D9         	fcall	_DimmerIntr_Initialization
 16469  1A80  0008               	return
 16470  1A81                     __end_of_DimmerLights_Initialization:	
 16471                           
 16472                           	psect	text115
 16473  0801                     __ptext115:	
 16474 ;; *************** function _setDimmerLights_Initialization *****************
 16475 ;; Defined at:
 16476 ;;		line 657 in file "../src/Dimmer_B1.c"
 16477 ;; Parameters:    Size  Location     Type
 16478 ;;  lights          1    wreg     unsigned char 
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;  lights          1    0[COMMON] unsigned char 
 16481 ;; Return value:  Size  Location     Type
 16482 ;;		None               void
 16483 ;; Registers used:
 16484 ;;		wreg
 16485 ;; Tracked objects:
 16486 ;;		On entry : 0/0
 16487 ;;		On exit  : 0/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;Total ram usage:        0 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; Hardware stack levels required when called:    5
 16497 ;; This function calls:
 16498 ;;		Nothing
 16499 ;; This function is called by:
 16500 ;;		_DimmerLights_Initialization
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function _setDimmerLights_Initialization
 16506  0801                     _setDimmerLights_Initialization:	
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16510  0801  0008               	return
 16511  0802                     __end_of_setDimmerLights_Initialization:	
 16512                           
 16513                           	psect	text116
 16514  14D9                     __ptext116:	
 16515 ;; *************** function _DimmerIntr_Initialization *****************
 16516 ;; Defined at:
 16517 ;;		line 7 in file "../src/Dimmer_B1.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;		None
 16520 ;; Auto vars:     Size  Location     Type
 16521 ;;		None
 16522 ;; Return value:  Size  Location     Type
 16523 ;;		None               void
 16524 ;; Registers used:
 16525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;Total ram usage:        2 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; Hardware stack levels required when called:    8
 16538 ;; This function calls:
 16539 ;;		_Division
 16540 ;;		_getDimmerLights_PercentToValue
 16541 ;;		_getDimmerLights_ValueToPercent
 16542 ;;		_setMemory_Modify
 16543 ;; This function is called by:
 16544 ;;		_DimmerLights_Initialization
 16545 ;; This function uses a non-reentrant model
 16546 ;;
 16547                           
 16548                           
 16549                           ;psect for function _DimmerIntr_Initialization
 16550  14D9                     _DimmerIntr_Initialization:	
 16551                           
 16552                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16553                           
 16554                           ;incstack = 0
 16555                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16556  14D9  3007               	movlw	7
 16557  14DA  0020               	movlb	0	; select bank0
 16558  14DB  00E2               	movwf	??_DimmerIntr_Initialization
 16559  14DC  0862               	movf	??_DimmerIntr_Initialization,w
 16560  14DD  0021               	movlb	1	; select bank1
 16561  14DE  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16562                           
 16563                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(84*0.6));
 16564  14DF  3032               	movlw	50
 16565  14E0  0020               	movlb	0	; select bank0
 16566  14E1  00E2               	movwf	??_DimmerIntr_Initialization
 16567  14E2  0862               	movf	??_DimmerIntr_Initialization,w
 16568  14E3  0021               	movlb	1	; select bank1
 16569  14E4  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16570                           
 16571                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16572  14E5  3006               	movlw	6
 16573  14E6  0020               	movlb	0	; select bank0
 16574  14E7  00E2               	movwf	??_DimmerIntr_Initialization
 16575  14E8  0862               	movf	??_DimmerIntr_Initialization,w
 16576  14E9  0021               	movlb	1	; select bank1
 16577  14EA  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16578                           
 16579                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16580  14EB  1E39               	btfss	(_myMain^(0+128)+10),4
 16581  14EC  2CFC               	goto	l678
 16582                           
 16583                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(84*0.6)));
 16584  14ED  3032               	movlw	50
 16585  14EE  3196  2660  3194   	fcall	_getDimmerLights_ValueToPercent
 16586  14F1  0020               	movlb	0	; select bank0
 16587  14F2  00E2               	movwf	??_DimmerIntr_Initialization
 16588  14F3  0021               	movlb	1	; select bank1
 16589  14F4  086E               	movf	_product^(0+128),w
 16590  14F5  3E15               	addlw	21
 16591  14F6  0086               	movwf	6
 16592  14F7  3001               	movlw	1	; select bank2/3
 16593  14F8  0087               	movwf	7
 16594  14F9  0020               	movlb	0	; select bank0
 16595  14FA  0862               	movf	??_DimmerIntr_Initialization,w
 16596  14FB  0081               	movwf	1
 16597  14FC                     l678:	
 16598                           
 16599                           ;Dimmer_B1.c: 18: }
 16600                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16601  14FC  0021               	movlb	1	; select bank1
 16602  14FD  086E               	movf	_product^(0+128),w
 16603  14FE  3E15               	addlw	21
 16604  14FF  0086               	movwf	6
 16605  1500  3001               	movlw	1	; select bank2/3
 16606  1501  0087               	movwf	7
 16607  1502  0801               	movf	1,w
 16608  1503  3195  25FB  3194   	fcall	_getDimmerLights_PercentToValue
 16609  1506  0020               	movlb	0	; select bank0
 16610  1507  00E2               	movwf	??_DimmerIntr_Initialization
 16611  1508  0862               	movf	??_DimmerIntr_Initialization,w
 16612  1509  0021               	movlb	1	; select bank1
 16613  150A  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16614                           
 16615                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(84*0.6)), 2);
 16616  150B  3002               	movlw	2
 16617  150C  0020               	movlb	0	; select bank0
 16618  150D  00E2               	movwf	??_DimmerIntr_Initialization
 16619  150E  0862               	movf	??_DimmerIntr_Initialization,w
 16620  150F  00A5               	movwf	Division@num
 16621  1510  3032               	movlw	50
 16622  1511  319B  2395  3194   	fcall	_Division
 16623  1514  0020               	movlb	0	; select bank0
 16624  1515  00E3               	movwf	??_DimmerIntr_Initialization+1
 16625  1516  0863               	movf	??_DimmerIntr_Initialization+1,w
 16626  1517  0021               	movlb	1	; select bank1
 16627  1518  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16628                           
 16629                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(84*0.6
      +                          )));
 16630  1519  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16631  151A  3E0A               	addlw	10
 16632  151B  0020               	movlb	0	; select bank0
 16633  151C  00E2               	movwf	??_DimmerIntr_Initialization
 16634  151D  0862               	movf	??_DimmerIntr_Initialization,w
 16635  151E  0021               	movlb	1	; select bank1
 16636  151F  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16637                           
 16638                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16639  1520  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16640  1521  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16641  1522  0020               	movlb	0	; select bank0
 16642  1523  00E2               	movwf	??_DimmerIntr_Initialization
 16643  1524  0862               	movf	??_DimmerIntr_Initialization,w
 16644  1525  0021               	movlb	1	; select bank1
 16645  1526  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16646                           
 16647                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16648  1527  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16649  1528  3E01               	addlw	1
 16650  1529  0020               	movlb	0	; select bank0
 16651  152A  00E2               	movwf	??_DimmerIntr_Initialization
 16652  152B  0862               	movf	??_DimmerIntr_Initialization,w
 16653  152C  0021               	movlb	1	; select bank1
 16654  152D  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16655                           
 16656                           ;Dimmer_B1.c: 67: if (myMain.InitDimmer == 1) {
 16657  152E  1E39               	btfss	(_myMain^(0+128)+10),4
 16658  152F  0008               	return
 16659                           
 16660                           ;Dimmer_B1.c: 68: myMain.InitDimmer = 0;
 16661  1530  1239               	bcf	(_myMain^(0+128)+10),4
 16662                           
 16663                           ;Dimmer_B1.c: 69: myMain.SaveDimmer = 1;
 16664  1531  16B9               	bsf	(_myMain^(0+128)+10),5
 16665                           
 16666                           ;Dimmer_B1.c: 70: setMemory_Modify(1);
 16667  1532  3001               	movlw	1
 16668  1533  319C  24A3         	fcall	_setMemory_Modify
 16669  1535  0008               	return
 16670  1536                     __end_of_DimmerIntr_Initialization:	
 16671                           
 16672                           	psect	text117
 16673  1CA3                     __ptext117:	
 16674 ;; *************** function _setMemory_Modify *****************
 16675 ;; Defined at:
 16676 ;;		line 1083 in file "../src/MCU_B1.c"
 16677 ;; Parameters:    Size  Location     Type
 16678 ;;  command         1    wreg     unsigned char 
 16679 ;; Auto vars:     Size  Location     Type
 16680 ;;  command         1    1[BANK0 ] unsigned char 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;		None               void
 16683 ;; Registers used:
 16684 ;;		wreg, status,2, status,0
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;Total ram usage:        2 bytes
 16695 ;; Hardware stack levels used:    1
 16696 ;; Hardware stack levels required when called:    5
 16697 ;; This function calls:
 16698 ;;		Nothing
 16699 ;; This function is called by:
 16700 ;;		_DimmerIntr_Initialization
 16701 ;;		_setDimmerLights_Dimming
 16702 ;;		_setLog_Code
 16703 ;;		_setRFSW_AdjControl
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           
 16708                           ;psect for function _setMemory_Modify
 16709  1CA3                     _setMemory_Modify:	
 16710                           
 16711                           ;incstack = 0
 16712                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16713                           ;setMemory_Modify@command stored from wreg
 16714  1CA3  0020               	movlb	0	; select bank0
 16715  1CA4  00A1               	movwf	setMemory_Modify@command
 16716                           
 16717                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16718  1CA5  0821               	movf	setMemory_Modify@command,w
 16719  1CA6  3A01               	xorlw	1
 16720  1CA7  3000               	movlw	0
 16721  1CA8  1903               	skipnz
 16722  1CA9  3001               	movlw	1
 16723  1CAA  00A0               	movwf	??_setMemory_Modify
 16724  1CAB  0024               	movlb	4	; select bank4
 16725  1CAC  0844               	movf	(_Memory^(0+512)+36),w
 16726  1CAD  0020               	movlb	0	; select bank0
 16727  1CAE  0620               	xorwf	??_setMemory_Modify,w
 16728  1CAF  39FE               	andlw	-2
 16729  1CB0  0620               	xorwf	??_setMemory_Modify,w
 16730  1CB1  0024               	movlb	4	; select bank4
 16731  1CB2  00C4               	movwf	(_Memory^(0+512)+36)
 16732                           
 16733                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16734  1CB3  01C2               	clrf	(_Memory^(0+512)+34)
 16735  1CB4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16736  1CB5  0008               	return
 16737  1CB6                     __end_of_setMemory_Modify:	
 16738                           
 16739                           	psect	text118
 16740  1660                     __ptext118:	
 16741 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16742 ;; Defined at:
 16743 ;;		line 1132 in file "../src/Dimmer_B1.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;  value           1    wreg     unsigned char 
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;  value           1   62[BANK0 ] unsigned char 
 16748 ;;  i               3   63[BANK0 ] float 
 16749 ;; Return value:  Size  Location     Type
 16750 ;;                  1    wreg      unsigned char 
 16751 ;; Registers used:
 16752 ;;		wreg, status,2, status,0, pclath, cstack
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        6 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; Hardware stack levels required when called:    7
 16765 ;; This function calls:
 16766 ;;		___awtoft
 16767 ;;		___ftadd
 16768 ;;		___ftdiv
 16769 ;;		___ftneg
 16770 ;;		___fttol
 16771 ;; This function is called by:
 16772 ;;		_DimmerIntr_Initialization
 16773 ;;		_setDimmerLights_Dimming
 16774 ;; This function uses a non-reentrant model
 16775 ;;
 16776                           
 16777                           
 16778                           ;psect for function _getDimmerLights_ValueToPercent
 16779  1660                     _getDimmerLights_ValueToPercent:	
 16780                           
 16781                           ;incstack = 0
 16782                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16783                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16784  1660  0020               	movlb	0	; select bank0
 16785  1661  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16786                           
 16787                           ;Dimmer_B1.c: 1140: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16788  1662  3000               	movlw	0
 16789  1663  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16790  1664  3030               	movlw	48
 16791  1665  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16792  1666  3042               	movlw	66
 16793  1667  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16794                           
 16795                           ;Dimmer_B1.c: 1141: i /= 100;
 16796  1668  3000               	movlw	0
 16797  1669  00AE               	movwf	___ftdiv@f2
 16798  166A  30C8               	movlw	200
 16799  166B  00AF               	movwf	___ftdiv@f2+1
 16800  166C  3042               	movlw	66
 16801  166D  00B0               	movwf	___ftdiv@f2+2
 16802  166E  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16803  166F  00B1               	movwf	___ftdiv@f1
 16804  1670  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16805  1671  00B2               	movwf	___ftdiv@f1+1
 16806  1672  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16807  1673  00B3               	movwf	___ftdiv@f1+2
 16808  1674  318D  2522  3196   	fcall	___ftdiv
 16809  1677  0020               	movlb	0	; select bank0
 16810  1678  082E               	movf	?___ftdiv,w
 16811  1679  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16812  167A  082F               	movf	?___ftdiv+1,w
 16813  167B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16814  167C  0830               	movf	?___ftdiv+2,w
 16815  167D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16816                           
 16817                           ;Dimmer_B1.c: 1143: return (char) (100 - ((((char)(84*0.6)) - value) / i));
 16818  167E  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16819  167F  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16820  1680  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16821  1681  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16822  1682  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16823  1683  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16824  1684  1903               	skipnz
 16825  1685  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16826  1686  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16827  1687  3E32               	addlw	50
 16828  1688  00A8               	movwf	___awtoft@c
 16829  1689  3000               	movlw	0
 16830  168A  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16831  168B  00A9               	movwf	___awtoft@c+1
 16832  168C  319F  2796  3196   	fcall	___awtoft
 16833  168F  0020               	movlb	0	; select bank0
 16834  1690  0828               	movf	?___awtoft,w
 16835  1691  00B1               	movwf	___ftdiv@f1
 16836  1692  0829               	movf	?___awtoft+1,w
 16837  1693  00B2               	movwf	___ftdiv@f1+1
 16838  1694  082A               	movf	?___awtoft+2,w
 16839  1695  00B3               	movwf	___ftdiv@f1+2
 16840  1696  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16841  1697  00AE               	movwf	___ftdiv@f2
 16842  1698  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16843  1699  00AF               	movwf	___ftdiv@f2+1
 16844  169A  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16845  169B  00B0               	movwf	___ftdiv@f2+2
 16846  169C  318D  2522  3196   	fcall	___ftdiv
 16847  169F  0020               	movlb	0	; select bank0
 16848  16A0  082E               	movf	?___ftdiv,w
 16849  16A1  00BE               	movwf	___ftneg@f1
 16850  16A2  082F               	movf	?___ftdiv+1,w
 16851  16A3  00BF               	movwf	___ftneg@f1+1
 16852  16A4  0830               	movf	?___ftdiv+2,w
 16853  16A5  00C0               	movwf	___ftneg@f1+2
 16854  16A6  319A  22B0  3196   	fcall	___ftneg
 16855  16A9  0020               	movlb	0	; select bank0
 16856  16AA  083E               	movf	?___ftneg,w
 16857  16AB  00C4               	movwf	___ftadd@f2
 16858  16AC  083F               	movf	?___ftneg+1,w
 16859  16AD  00C5               	movwf	___ftadd@f2+1
 16860  16AE  0840               	movf	?___ftneg+2,w
 16861  16AF  00C6               	movwf	___ftadd@f2+2
 16862  16B0  3000               	movlw	0
 16863  16B1  00C1               	movwf	___ftadd@f1
 16864  16B2  30C8               	movlw	200
 16865  16B3  00C2               	movwf	___ftadd@f1+1
 16866  16B4  3042               	movlw	66
 16867  16B5  00C3               	movwf	___ftadd@f1+2
 16868  16B6  3183  2389  3196   	fcall	___ftadd
 16869  16B9  0020               	movlb	0	; select bank0
 16870  16BA  0841               	movf	?___ftadd,w
 16871  16BB  00CE               	movwf	___fttol@f1
 16872  16BC  0842               	movf	?___ftadd+1,w
 16873  16BD  00CF               	movwf	___fttol@f1+1
 16874  16BE  0843               	movf	?___ftadd+2,w
 16875  16BF  00D0               	movwf	___fttol@f1+2
 16876  16C0  318B  2382         	fcall	___fttol
 16877  16C2  0020               	movlb	0	; select bank0
 16878  16C3  084E               	movf	?___fttol,w
 16879  16C4  0008               	return
 16880  16C5                     __end_of_getDimmerLights_ValueToPercent:	
 16881                           
 16882                           	psect	text119
 16883  15FB                     __ptext119:	
 16884 ;; *************** function _getDimmerLights_PercentToValue *****************
 16885 ;; Defined at:
 16886 ;;		line 1116 in file "../src/Dimmer_B1.c"
 16887 ;; Parameters:    Size  Location     Type
 16888 ;;  value           1    wreg     unsigned char 
 16889 ;; Auto vars:     Size  Location     Type
 16890 ;;  value           1   62[BANK0 ] unsigned char 
 16891 ;;  i               3   63[BANK0 ] float 
 16892 ;; Return value:  Size  Location     Type
 16893 ;;                  1    wreg      unsigned char 
 16894 ;; Registers used:
 16895 ;;		wreg, status,2, status,0, pclath, cstack
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;Total ram usage:        6 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    7
 16908 ;; This function calls:
 16909 ;;		___awtoft
 16910 ;;		___ftadd
 16911 ;;		___ftdiv
 16912 ;;		___ftmul
 16913 ;;		___ftneg
 16914 ;;		___fttol
 16915 ;; This function is called by:
 16916 ;;		_DimmerIntr_Initialization
 16917 ;;		_setDimmerLights_OnOff
 16918 ;;		_setRFSW_AdjControl
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           
 16923                           ;psect for function _getDimmerLights_PercentToValue
 16924  15FB                     _getDimmerLights_PercentToValue:	
 16925                           
 16926                           ;incstack = 0
 16927                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16928                           ;getDimmerLights_PercentToValue@value stored from wreg
 16929  15FB  0020               	movlb	0	; select bank0
 16930  15FC  00DE               	movwf	getDimmerLights_PercentToValue@value
 16931                           
 16932                           ;Dimmer_B1.c: 1124: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16933  15FD  3000               	movlw	0
 16934  15FE  00DF               	movwf	getDimmerLights_PercentToValue@i
 16935  15FF  3030               	movlw	48
 16936  1600  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16937  1601  3042               	movlw	66
 16938  1602  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16939                           
 16940                           ;Dimmer_B1.c: 1125: i /= 100;
 16941  1603  3000               	movlw	0
 16942  1604  00AE               	movwf	___ftdiv@f2
 16943  1605  30C8               	movlw	200
 16944  1606  00AF               	movwf	___ftdiv@f2+1
 16945  1607  3042               	movlw	66
 16946  1608  00B0               	movwf	___ftdiv@f2+2
 16947  1609  085F               	movf	getDimmerLights_PercentToValue@i,w
 16948  160A  00B1               	movwf	___ftdiv@f1
 16949  160B  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16950  160C  00B2               	movwf	___ftdiv@f1+1
 16951  160D  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16952  160E  00B3               	movwf	___ftdiv@f1+2
 16953  160F  318D  2522  3195   	fcall	___ftdiv
 16954  1612  0020               	movlb	0	; select bank0
 16955  1613  082E               	movf	?___ftdiv,w
 16956  1614  00DF               	movwf	getDimmerLights_PercentToValue@i
 16957  1615  082F               	movf	?___ftdiv+1,w
 16958  1616  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16959  1617  0830               	movf	?___ftdiv+2,w
 16960  1618  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16961                           
 16962                           ;Dimmer_B1.c: 1127: return (char) (((char)(84*0.6)) - ((100 - value) * i));
 16963  1619  085E               	movf	getDimmerLights_PercentToValue@value,w
 16964  161A  00DC               	movwf	??_getDimmerLights_PercentToValue
 16965  161B  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16966  161C  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16967  161D  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16968  161E  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16969  161F  1903               	skipnz
 16970  1620  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16971  1621  085C               	movf	??_getDimmerLights_PercentToValue,w
 16972  1622  3E64               	addlw	100
 16973  1623  00A8               	movwf	___awtoft@c
 16974  1624  3000               	movlw	0
 16975  1625  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16976  1626  00A9               	movwf	___awtoft@c+1
 16977  1627  319F  2796  3195   	fcall	___awtoft
 16978  162A  0020               	movlb	0	; select bank0
 16979  162B  0828               	movf	?___awtoft,w
 16980  162C  00B1               	movwf	___ftmul@f2
 16981  162D  0829               	movf	?___awtoft+1,w
 16982  162E  00B2               	movwf	___ftmul@f2+1
 16983  162F  082A               	movf	?___awtoft+2,w
 16984  1630  00B3               	movwf	___ftmul@f2+2
 16985  1631  085F               	movf	getDimmerLights_PercentToValue@i,w
 16986  1632  00AE               	movwf	___ftmul@f1
 16987  1633  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16988  1634  00AF               	movwf	___ftmul@f1+1
 16989  1635  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16990  1636  00B0               	movwf	___ftmul@f1+2
 16991  1637  318D  25CB  3195   	fcall	___ftmul
 16992  163A  0020               	movlb	0	; select bank0
 16993  163B  082E               	movf	?___ftmul,w
 16994  163C  00BE               	movwf	___ftneg@f1
 16995  163D  082F               	movf	?___ftmul+1,w
 16996  163E  00BF               	movwf	___ftneg@f1+1
 16997  163F  0830               	movf	?___ftmul+2,w
 16998  1640  00C0               	movwf	___ftneg@f1+2
 16999  1641  319A  22B0  3195   	fcall	___ftneg
 17000  1644  0020               	movlb	0	; select bank0
 17001  1645  083E               	movf	?___ftneg,w
 17002  1646  00C4               	movwf	___ftadd@f2
 17003  1647  083F               	movf	?___ftneg+1,w
 17004  1648  00C5               	movwf	___ftadd@f2+1
 17005  1649  0840               	movf	?___ftneg+2,w
 17006  164A  00C6               	movwf	___ftadd@f2+2
 17007  164B  3000               	movlw	0
 17008  164C  00C1               	movwf	___ftadd@f1
 17009  164D  3048               	movlw	72
 17010  164E  00C2               	movwf	___ftadd@f1+1
 17011  164F  3042               	movlw	66
 17012  1650  00C3               	movwf	___ftadd@f1+2
 17013  1651  3183  2389  3195   	fcall	___ftadd
 17014  1654  0020               	movlb	0	; select bank0
 17015  1655  0841               	movf	?___ftadd,w
 17016  1656  00CE               	movwf	___fttol@f1
 17017  1657  0842               	movf	?___ftadd+1,w
 17018  1658  00CF               	movwf	___fttol@f1+1
 17019  1659  0843               	movf	?___ftadd+2,w
 17020  165A  00D0               	movwf	___fttol@f1+2
 17021  165B  318B  2382         	fcall	___fttol
 17022  165D  0020               	movlb	0	; select bank0
 17023  165E  084E               	movf	?___fttol,w
 17024  165F  0008               	return
 17025  1660                     __end_of_getDimmerLights_PercentToValue:	
 17026                           
 17027                           	psect	text120
 17028  0B82                     __ptext120:	
 17029 ;; *************** function ___fttol *****************
 17030 ;; Defined at:
 17031 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;  f1              3   46[BANK0 ] float 
 17034 ;; Auto vars:     Size  Location     Type
 17035 ;;  lval            4   55[BANK0 ] unsigned long 
 17036 ;;  exp1            1   59[BANK0 ] unsigned char 
 17037 ;;  sign1           1   54[BANK0 ] unsigned char 
 17038 ;; Return value:  Size  Location     Type
 17039 ;;                  4   46[BANK0 ] long 
 17040 ;; Registers used:
 17041 ;;		wreg, status,2, status,0
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:       14 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    5
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		_getDimmerLights_PercentToValue
 17058 ;;		_getDimmerLights_ValueToPercent
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           
 17063                           ;psect for function ___fttol
 17064  0B82                     ___fttol:	
 17065                           
 17066                           ;incstack = 0
 17067                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17068  0B82  0020               	movlb	0	; select bank0
 17069  0B83  084E               	movf	___fttol@f1,w
 17070  0B84  00D2               	movwf	??___fttol
 17071  0B85  084F               	movf	___fttol@f1+1,w
 17072  0B86  00D3               	movwf	??___fttol+1
 17073  0B87  0850               	movf	___fttol@f1+2,w
 17074  0B88  00D4               	movwf	??___fttol+2
 17075  0B89  1003               	clrc
 17076  0B8A  0D53               	rlf	??___fttol+1,w
 17077  0B8B  0D54               	rlf	??___fttol+2,w
 17078  0B8C  00D5               	movwf	??___fttol+3
 17079  0B8D  0855               	movf	??___fttol+3,w
 17080  0B8E  00DB               	movwf	___fttol@exp1
 17081  0B8F  08DB               	movf	___fttol@exp1,f
 17082  0B90  1D03               	skipz
 17083  0B91  2B9B               	goto	l6118
 17084  0B92  3000               	movlw	0
 17085  0B93  00D1               	movwf	?___fttol+3
 17086  0B94  3000               	movlw	0
 17087  0B95  00D0               	movwf	?___fttol+2
 17088  0B96  3000               	movlw	0
 17089  0B97  00CF               	movwf	?___fttol+1
 17090  0B98  3000               	movlw	0
 17091  0B99  00CE               	movwf	?___fttol
 17092  0B9A  0008               	return
 17093  0B9B                     l6118:	
 17094  0B9B  084E               	movf	___fttol@f1,w
 17095  0B9C  00D2               	movwf	??___fttol
 17096  0B9D  084F               	movf	___fttol@f1+1,w
 17097  0B9E  00D3               	movwf	??___fttol+1
 17098  0B9F  0850               	movf	___fttol@f1+2,w
 17099  0BA0  00D4               	movwf	??___fttol+2
 17100  0BA1  3017               	movlw	23
 17101  0BA2                     u5155:	
 17102  0BA2  36D4               	lsrf	??___fttol+2,f
 17103  0BA3  0CD3               	rrf	??___fttol+1,f
 17104  0BA4  0CD2               	rrf	??___fttol,f
 17105  0BA5  0B89               	decfsz	9,f
 17106  0BA6  2BA2               	goto	u5155
 17107  0BA7  0852               	movf	??___fttol,w
 17108  0BA8  00D5               	movwf	??___fttol+3
 17109  0BA9  0855               	movf	??___fttol+3,w
 17110  0BAA  00D6               	movwf	___fttol@sign1
 17111  0BAB  17CF               	bsf	___fttol@f1+1,7
 17112  0BAC  30FF               	movlw	255
 17113  0BAD  05CE               	andwf	___fttol@f1,f
 17114  0BAE  30FF               	movlw	255
 17115  0BAF  05CF               	andwf	___fttol@f1+1,f
 17116  0BB0  3000               	movlw	0
 17117  0BB1  05D0               	andwf	___fttol@f1+2,f
 17118  0BB2  084E               	movf	___fttol@f1,w
 17119  0BB3  00D7               	movwf	___fttol@lval
 17120  0BB4  084F               	movf	___fttol@f1+1,w
 17121  0BB5  00D8               	movwf	___fttol@lval+1
 17122  0BB6  0850               	movf	___fttol@f1+2,w
 17123  0BB7  00D9               	movwf	___fttol@lval+2
 17124  0BB8  01DA               	clrf	___fttol@lval+3
 17125  0BB9  308E               	movlw	142
 17126  0BBA  02DB               	subwf	___fttol@exp1,f
 17127  0BBB  1FDB               	btfss	___fttol@exp1,7
 17128  0BBC  2BD9               	goto	l6138
 17129  0BBD  085B               	movf	___fttol@exp1,w
 17130  0BBE  3A80               	xorlw	128
 17131  0BBF  3E8F               	addlw	143
 17132  0BC0  1803               	skipnc
 17133  0BC1  2BCB               	goto	l6136
 17134  0BC2  3000               	movlw	0
 17135  0BC3  00D1               	movwf	?___fttol+3
 17136  0BC4  3000               	movlw	0
 17137  0BC5  00D0               	movwf	?___fttol+2
 17138  0BC6  3000               	movlw	0
 17139  0BC7  00CF               	movwf	?___fttol+1
 17140  0BC8  3000               	movlw	0
 17141  0BC9  00CE               	movwf	?___fttol
 17142  0BCA  0008               	return
 17143  0BCB                     l6136:	
 17144  0BCB  3001               	movlw	1
 17145  0BCC                     u5185:	
 17146  0BCC  36DA               	lsrf	___fttol@lval+3,f
 17147  0BCD  0CD9               	rrf	___fttol@lval+2,f
 17148  0BCE  0CD8               	rrf	___fttol@lval+1,f
 17149  0BCF  0CD7               	rrf	___fttol@lval,f
 17150  0BD0  0B89               	decfsz	9,f
 17151  0BD1  2BCC               	goto	u5185
 17152  0BD2  3001               	movlw	1
 17153  0BD3  00D2               	movwf	??___fttol
 17154  0BD4  0852               	movf	??___fttol,w
 17155  0BD5  07DB               	addwf	___fttol@exp1,f
 17156  0BD6  1903               	btfsc	3,2
 17157  0BD7  2BF2               	goto	l6148
 17158  0BD8  2BCB               	goto	l6136
 17159  0BD9                     l6138:	
 17160  0BD9  3018               	movlw	24
 17161  0BDA  025B               	subwf	___fttol@exp1,w
 17162  0BDB  1C03               	skipc
 17163  0BDC  2BEF               	goto	l6146
 17164  0BDD  3000               	movlw	0
 17165  0BDE  00D1               	movwf	?___fttol+3
 17166  0BDF  3000               	movlw	0
 17167  0BE0  00D0               	movwf	?___fttol+2
 17168  0BE1  3000               	movlw	0
 17169  0BE2  00CF               	movwf	?___fttol+1
 17170  0BE3  3000               	movlw	0
 17171  0BE4  00CE               	movwf	?___fttol
 17172  0BE5  0008               	return
 17173  0BE6                     l6144:	
 17174  0BE6  3001               	movlw	1
 17175  0BE7                     u5215:	
 17176  0BE7  35D7               	lslf	___fttol@lval,f
 17177  0BE8  0DD8               	rlf	___fttol@lval+1,f
 17178  0BE9  0DD9               	rlf	___fttol@lval+2,f
 17179  0BEA  0DDA               	rlf	___fttol@lval+3,f
 17180  0BEB  0B89               	decfsz	9,f
 17181  0BEC  2BE7               	goto	u5215
 17182  0BED  3001               	movlw	1
 17183  0BEE  02DB               	subwf	___fttol@exp1,f
 17184  0BEF                     l6146:	
 17185  0BEF  08DB               	movf	___fttol@exp1,f
 17186  0BF0  1D03               	skipz
 17187  0BF1  2BE6               	goto	l6144
 17188  0BF2                     l6148:	
 17189  0BF2  0856               	movf	___fttol@sign1,w
 17190  0BF3  1903               	btfsc	3,2
 17191  0BF4  2C00               	goto	l6152
 17192  0BF5  09D7               	comf	___fttol@lval,f
 17193  0BF6  09D8               	comf	___fttol@lval+1,f
 17194  0BF7  09D9               	comf	___fttol@lval+2,f
 17195  0BF8  09DA               	comf	___fttol@lval+3,f
 17196  0BF9  0AD7               	incf	___fttol@lval,f
 17197  0BFA  1903               	skipnz
 17198  0BFB  0AD8               	incf	___fttol@lval+1,f
 17199  0BFC  1903               	skipnz
 17200  0BFD  0AD9               	incf	___fttol@lval+2,f
 17201  0BFE  1903               	skipnz
 17202  0BFF  0ADA               	incf	___fttol@lval+3,f
 17203  0C00                     l6152:	
 17204  0C00  085A               	movf	___fttol@lval+3,w
 17205  0C01  00D1               	movwf	?___fttol+3
 17206  0C02  0859               	movf	___fttol@lval+2,w
 17207  0C03  00D0               	movwf	?___fttol+2
 17208  0C04  0858               	movf	___fttol@lval+1,w
 17209  0C05  00CF               	movwf	?___fttol+1
 17210  0C06  0857               	movf	___fttol@lval,w
 17211  0C07  00CE               	movwf	?___fttol
 17212  0C08  0008               	return
 17213  0C09                     __end_of___fttol:	
 17214                           
 17215                           	psect	text121
 17216  1AB0                     __ptext121:	
 17217 ;; *************** function ___ftneg *****************
 17218 ;; Defined at:
 17219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;  f1              3   30[BANK0 ] float 
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;		None
 17224 ;; Return value:  Size  Location     Type
 17225 ;;                  3   30[BANK0 ] float 
 17226 ;; Registers used:
 17227 ;;		wreg
 17228 ;; Tracked objects:
 17229 ;;		On entry : 0/0
 17230 ;;		On exit  : 0/0
 17231 ;;		Unchanged: 0/0
 17232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17233 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;Total ram usage:        3 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; Hardware stack levels required when called:    5
 17240 ;; This function calls:
 17241 ;;		Nothing
 17242 ;; This function is called by:
 17243 ;;		_getDimmerLights_PercentToValue
 17244 ;;		_getDimmerLights_ValueToPercent
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           
 17249                           ;psect for function ___ftneg
 17250  1AB0                     ___ftneg:	
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in ___ftneg: [wreg]
 17254  1AB0  0020               	movlb	0	; select bank0
 17255  1AB1  0840               	movf	___ftneg@f1+2,w
 17256  1AB2  043F               	iorwf	___ftneg@f1+1,w
 17257  1AB3  043E               	iorwf	___ftneg@f1,w
 17258  1AB4  1903               	skipnz
 17259  1AB5  0008               	return
 17260  1AB6  3080               	movlw	128
 17261  1AB7  06C0               	xorwf	___ftneg@f1+2,f
 17262  1AB8  0008               	return
 17263  1AB9                     __end_of___ftneg:	
 17264                           
 17265                           	psect	text122
 17266  0DCB                     __ptext122:	
 17267 ;; *************** function ___ftmul *****************
 17268 ;; Defined at:
 17269 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17270 ;; Parameters:    Size  Location     Type
 17271 ;;  f1              3   14[BANK0 ] float 
 17272 ;;  f2              3   17[BANK0 ] float 
 17273 ;; Auto vars:     Size  Location     Type
 17274 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17275 ;;  sign            1   29[BANK0 ] unsigned char 
 17276 ;;  cntr            1   28[BANK0 ] unsigned char 
 17277 ;;  exp             1   24[BANK0 ] unsigned char 
 17278 ;; Return value:  Size  Location     Type
 17279 ;;                  3   14[BANK0 ] float 
 17280 ;; Registers used:
 17281 ;;		wreg, status,2, status,0, pclath, cstack
 17282 ;; Tracked objects:
 17283 ;;		On entry : 0/0
 17284 ;;		On exit  : 0/0
 17285 ;;		Unchanged: 0/0
 17286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17287 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17288 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17290 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17291 ;;Total ram usage:       16 bytes
 17292 ;; Hardware stack levels used:    1
 17293 ;; Hardware stack levels required when called:    6
 17294 ;; This function calls:
 17295 ;;		___ftpack
 17296 ;; This function is called by:
 17297 ;;		_getDimmerLights_PercentToValue
 17298 ;; This function uses a non-reentrant model
 17299 ;;
 17300                           
 17301                           
 17302                           ;psect for function ___ftmul
 17303  0DCB                     ___ftmul:	
 17304                           
 17305                           ;incstack = 0
 17306                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17307  0DCB  0020               	movlb	0	; select bank0
 17308  0DCC  082E               	movf	___ftmul@f1,w
 17309  0DCD  00B4               	movwf	??___ftmul
 17310  0DCE  082F               	movf	___ftmul@f1+1,w
 17311  0DCF  00B5               	movwf	??___ftmul+1
 17312  0DD0  0830               	movf	___ftmul@f1+2,w
 17313  0DD1  00B6               	movwf	??___ftmul+2
 17314  0DD2  1003               	clrc
 17315  0DD3  0D35               	rlf	??___ftmul+1,w
 17316  0DD4  0D36               	rlf	??___ftmul+2,w
 17317  0DD5  00B7               	movwf	??___ftmul+3
 17318  0DD6  0837               	movf	??___ftmul+3,w
 17319  0DD7  00B8               	movwf	___ftmul@exp
 17320  0DD8  08B8               	movf	___ftmul@exp,f
 17321  0DD9  1D03               	skipz
 17322  0DDA  2DE2               	goto	l6060
 17323  0DDB  3000               	movlw	0
 17324  0DDC  00AE               	movwf	?___ftmul
 17325  0DDD  3000               	movlw	0
 17326  0DDE  00AF               	movwf	?___ftmul+1
 17327  0DDF  3000               	movlw	0
 17328  0DE0  00B0               	movwf	?___ftmul+2
 17329  0DE1  0008               	return
 17330  0DE2                     l6060:	
 17331  0DE2  0831               	movf	___ftmul@f2,w
 17332  0DE3  00B4               	movwf	??___ftmul
 17333  0DE4  0832               	movf	___ftmul@f2+1,w
 17334  0DE5  00B5               	movwf	??___ftmul+1
 17335  0DE6  0833               	movf	___ftmul@f2+2,w
 17336  0DE7  00B6               	movwf	??___ftmul+2
 17337  0DE8  1003               	clrc
 17338  0DE9  0D35               	rlf	??___ftmul+1,w
 17339  0DEA  0D36               	rlf	??___ftmul+2,w
 17340  0DEB  00B7               	movwf	??___ftmul+3
 17341  0DEC  0837               	movf	??___ftmul+3,w
 17342  0DED  00BD               	movwf	___ftmul@sign
 17343  0DEE  08BD               	movf	___ftmul@sign,f
 17344  0DEF  1D03               	skipz
 17345  0DF0  2DF8               	goto	l6066
 17346  0DF1  3000               	movlw	0
 17347  0DF2  00AE               	movwf	?___ftmul
 17348  0DF3  3000               	movlw	0
 17349  0DF4  00AF               	movwf	?___ftmul+1
 17350  0DF5  3000               	movlw	0
 17351  0DF6  00B0               	movwf	?___ftmul+2
 17352  0DF7  0008               	return
 17353  0DF8                     l6066:	
 17354  0DF8  083D               	movf	___ftmul@sign,w
 17355  0DF9  3E7B               	addlw	123
 17356  0DFA  00B4               	movwf	??___ftmul
 17357  0DFB  0834               	movf	??___ftmul,w
 17358  0DFC  07B8               	addwf	___ftmul@exp,f
 17359  0DFD  082E               	movf	___ftmul@f1,w
 17360  0DFE  00B4               	movwf	??___ftmul
 17361  0DFF  082F               	movf	___ftmul@f1+1,w
 17362  0E00  00B5               	movwf	??___ftmul+1
 17363  0E01  0830               	movf	___ftmul@f1+2,w
 17364  0E02  00B6               	movwf	??___ftmul+2
 17365  0E03  3010               	movlw	16
 17366  0E04                     u5035:	
 17367  0E04  36B6               	lsrf	??___ftmul+2,f
 17368  0E05  0CB5               	rrf	??___ftmul+1,f
 17369  0E06  0CB4               	rrf	??___ftmul,f
 17370  0E07  0B89               	decfsz	9,f
 17371  0E08  2E04               	goto	u5035
 17372  0E09  0834               	movf	??___ftmul,w
 17373  0E0A  00B7               	movwf	??___ftmul+3
 17374  0E0B  0837               	movf	??___ftmul+3,w
 17375  0E0C  00BD               	movwf	___ftmul@sign
 17376  0E0D  0831               	movf	___ftmul@f2,w
 17377  0E0E  00B4               	movwf	??___ftmul
 17378  0E0F  0832               	movf	___ftmul@f2+1,w
 17379  0E10  00B5               	movwf	??___ftmul+1
 17380  0E11  0833               	movf	___ftmul@f2+2,w
 17381  0E12  00B6               	movwf	??___ftmul+2
 17382  0E13  3010               	movlw	16
 17383  0E14                     u5045:	
 17384  0E14  36B6               	lsrf	??___ftmul+2,f
 17385  0E15  0CB5               	rrf	??___ftmul+1,f
 17386  0E16  0CB4               	rrf	??___ftmul,f
 17387  0E17  0B89               	decfsz	9,f
 17388  0E18  2E14               	goto	u5045
 17389  0E19  0834               	movf	??___ftmul,w
 17390  0E1A  00B7               	movwf	??___ftmul+3
 17391  0E1B  0837               	movf	??___ftmul+3,w
 17392  0E1C  06BD               	xorwf	___ftmul@sign,f
 17393  0E1D  3080               	movlw	128
 17394  0E1E  00B4               	movwf	??___ftmul
 17395  0E1F  0834               	movf	??___ftmul,w
 17396  0E20  05BD               	andwf	___ftmul@sign,f
 17397  0E21  17AF               	bsf	___ftmul@f1+1,7
 17398  0E22  17B2               	bsf	___ftmul@f2+1,7
 17399  0E23  30FF               	movlw	255
 17400  0E24  05B1               	andwf	___ftmul@f2,f
 17401  0E25  30FF               	movlw	255
 17402  0E26  05B2               	andwf	___ftmul@f2+1,f
 17403  0E27  3000               	movlw	0
 17404  0E28  05B3               	andwf	___ftmul@f2+2,f
 17405  0E29  3000               	movlw	0
 17406  0E2A  00B9               	movwf	___ftmul@f3_as_product
 17407  0E2B  3000               	movlw	0
 17408  0E2C  00BA               	movwf	___ftmul@f3_as_product+1
 17409  0E2D  3000               	movlw	0
 17410  0E2E  00BB               	movwf	___ftmul@f3_as_product+2
 17411  0E2F  3007               	movlw	7
 17412  0E30  00B4               	movwf	??___ftmul
 17413  0E31  0834               	movf	??___ftmul,w
 17414  0E32  00BC               	movwf	___ftmul@cntr
 17415  0E33                     l6078:	
 17416  0E33  1C2E               	btfss	___ftmul@f1,0
 17417  0E34  2E3B               	goto	l6082
 17418  0E35  0831               	movf	___ftmul@f2,w
 17419  0E36  07B9               	addwf	___ftmul@f3_as_product,f
 17420  0E37  0832               	movf	___ftmul@f2+1,w
 17421  0E38  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17422  0E39  0833               	movf	___ftmul@f2+2,w
 17423  0E3A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17424  0E3B                     l6082:	
 17425  0E3B  3001               	movlw	1
 17426  0E3C                     u5065:	
 17427  0E3C  36B0               	lsrf	___ftmul@f1+2,f
 17428  0E3D  0CAF               	rrf	___ftmul@f1+1,f
 17429  0E3E  0CAE               	rrf	___ftmul@f1,f
 17430  0E3F  0B89               	decfsz	9,f
 17431  0E40  2E3C               	goto	u5065
 17432  0E41  3001               	movlw	1
 17433  0E42                     u5075:	
 17434  0E42  35B1               	lslf	___ftmul@f2,f
 17435  0E43  0DB2               	rlf	___ftmul@f2+1,f
 17436  0E44  0DB3               	rlf	___ftmul@f2+2,f
 17437  0E45  0B89               	decfsz	9,f
 17438  0E46  2E42               	goto	u5075
 17439  0E47  3001               	movlw	1
 17440  0E48  02BC               	subwf	___ftmul@cntr,f
 17441  0E49  1D03               	btfss	3,2
 17442  0E4A  2E33               	goto	l6078
 17443  0E4B  3009               	movlw	9
 17444  0E4C  00B4               	movwf	??___ftmul
 17445  0E4D  0834               	movf	??___ftmul,w
 17446  0E4E  00BC               	movwf	___ftmul@cntr
 17447  0E4F                     l6090:	
 17448  0E4F  1C2E               	btfss	___ftmul@f1,0
 17449  0E50  2E57               	goto	l6094
 17450  0E51  0831               	movf	___ftmul@f2,w
 17451  0E52  07B9               	addwf	___ftmul@f3_as_product,f
 17452  0E53  0832               	movf	___ftmul@f2+1,w
 17453  0E54  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17454  0E55  0833               	movf	___ftmul@f2+2,w
 17455  0E56  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17456  0E57                     l6094:	
 17457  0E57  3001               	movlw	1
 17458  0E58                     u5105:	
 17459  0E58  36B0               	lsrf	___ftmul@f1+2,f
 17460  0E59  0CAF               	rrf	___ftmul@f1+1,f
 17461  0E5A  0CAE               	rrf	___ftmul@f1,f
 17462  0E5B  0B89               	decfsz	9,f
 17463  0E5C  2E58               	goto	u5105
 17464  0E5D  3001               	movlw	1
 17465  0E5E                     u5115:	
 17466  0E5E  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17467  0E5F  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17468  0E60  0CB9               	rrf	___ftmul@f3_as_product,f
 17469  0E61  0B89               	decfsz	9,f
 17470  0E62  2E5E               	goto	u5115
 17471  0E63  3001               	movlw	1
 17472  0E64  02BC               	subwf	___ftmul@cntr,f
 17473  0E65  1D03               	btfss	3,2
 17474  0E66  2E4F               	goto	l6090
 17475  0E67  0839               	movf	___ftmul@f3_as_product,w
 17476  0E68  00A0               	movwf	___ftpack@arg
 17477  0E69  083A               	movf	___ftmul@f3_as_product+1,w
 17478  0E6A  00A1               	movwf	___ftpack@arg+1
 17479  0E6B  083B               	movf	___ftmul@f3_as_product+2,w
 17480  0E6C  00A2               	movwf	___ftpack@arg+2
 17481  0E6D  0838               	movf	___ftmul@exp,w
 17482  0E6E  00B4               	movwf	??___ftmul
 17483  0E6F  0834               	movf	??___ftmul,w
 17484  0E70  00A3               	movwf	___ftpack@exp
 17485  0E71  083D               	movf	___ftmul@sign,w
 17486  0E72  00B5               	movwf	??___ftmul+1
 17487  0E73  0835               	movf	??___ftmul+1,w
 17488  0E74  00A4               	movwf	___ftpack@sign
 17489  0E75  3195  2536         	fcall	___ftpack
 17490  0E77  0020               	movlb	0	; select bank0
 17491  0E78  0820               	movf	?___ftpack,w
 17492  0E79  00AE               	movwf	?___ftmul
 17493  0E7A  0821               	movf	?___ftpack+1,w
 17494  0E7B  00AF               	movwf	?___ftmul+1
 17495  0E7C  0822               	movf	?___ftpack+2,w
 17496  0E7D  00B0               	movwf	?___ftmul+2
 17497  0E7E  0008               	return
 17498  0E7F                     __end_of___ftmul:	
 17499                           
 17500                           	psect	text123
 17501  0D22                     __ptext123:	
 17502 ;; *************** function ___ftdiv *****************
 17503 ;; Defined at:
 17504 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17505 ;; Parameters:    Size  Location     Type
 17506 ;;  f2              3   14[BANK0 ] float 
 17507 ;;  f1              3   17[BANK0 ] float 
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  f3              3   25[BANK0 ] float 
 17510 ;;  sign            1   29[BANK0 ] unsigned char 
 17511 ;;  exp             1   28[BANK0 ] unsigned char 
 17512 ;;  cntr            1   24[BANK0 ] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  3   14[BANK0 ] float 
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, status,0, pclath, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17522 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;Total ram usage:       16 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    6
 17529 ;; This function calls:
 17530 ;;		___ftpack
 17531 ;; This function is called by:
 17532 ;;		_getDimmerLights_PercentToValue
 17533 ;;		_getDimmerLights_ValueToPercent
 17534 ;; This function uses a non-reentrant model
 17535 ;;
 17536                           
 17537                           
 17538                           ;psect for function ___ftdiv
 17539  0D22                     ___ftdiv:	
 17540                           
 17541                           ;incstack = 0
 17542                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17543  0D22  0020               	movlb	0	; select bank0
 17544  0D23  0831               	movf	___ftdiv@f1,w
 17545  0D24  00B4               	movwf	??___ftdiv
 17546  0D25  0832               	movf	___ftdiv@f1+1,w
 17547  0D26  00B5               	movwf	??___ftdiv+1
 17548  0D27  0833               	movf	___ftdiv@f1+2,w
 17549  0D28  00B6               	movwf	??___ftdiv+2
 17550  0D29  1003               	clrc
 17551  0D2A  0D35               	rlf	??___ftdiv+1,w
 17552  0D2B  0D36               	rlf	??___ftdiv+2,w
 17553  0D2C  00B7               	movwf	??___ftdiv+3
 17554  0D2D  0837               	movf	??___ftdiv+3,w
 17555  0D2E  00BC               	movwf	___ftdiv@exp
 17556  0D2F  08BC               	movf	___ftdiv@exp,f
 17557  0D30  1D03               	skipz
 17558  0D31  2D39               	goto	l6018
 17559  0D32  3000               	movlw	0
 17560  0D33  00AE               	movwf	?___ftdiv
 17561  0D34  3000               	movlw	0
 17562  0D35  00AF               	movwf	?___ftdiv+1
 17563  0D36  3000               	movlw	0
 17564  0D37  00B0               	movwf	?___ftdiv+2
 17565  0D38  0008               	return
 17566  0D39                     l6018:	
 17567  0D39  082E               	movf	___ftdiv@f2,w
 17568  0D3A  00B4               	movwf	??___ftdiv
 17569  0D3B  082F               	movf	___ftdiv@f2+1,w
 17570  0D3C  00B5               	movwf	??___ftdiv+1
 17571  0D3D  0830               	movf	___ftdiv@f2+2,w
 17572  0D3E  00B6               	movwf	??___ftdiv+2
 17573  0D3F  1003               	clrc
 17574  0D40  0D35               	rlf	??___ftdiv+1,w
 17575  0D41  0D36               	rlf	??___ftdiv+2,w
 17576  0D42  00B7               	movwf	??___ftdiv+3
 17577  0D43  0837               	movf	??___ftdiv+3,w
 17578  0D44  00BD               	movwf	___ftdiv@sign
 17579  0D45  08BD               	movf	___ftdiv@sign,f
 17580  0D46  1D03               	skipz
 17581  0D47  2D4F               	goto	l6024
 17582  0D48  3000               	movlw	0
 17583  0D49  00AE               	movwf	?___ftdiv
 17584  0D4A  3000               	movlw	0
 17585  0D4B  00AF               	movwf	?___ftdiv+1
 17586  0D4C  3000               	movlw	0
 17587  0D4D  00B0               	movwf	?___ftdiv+2
 17588  0D4E  0008               	return
 17589  0D4F                     l6024:	
 17590  0D4F  3000               	movlw	0
 17591  0D50  00B9               	movwf	___ftdiv@f3
 17592  0D51  3000               	movlw	0
 17593  0D52  00BA               	movwf	___ftdiv@f3+1
 17594  0D53  3000               	movlw	0
 17595  0D54  00BB               	movwf	___ftdiv@f3+2
 17596  0D55  3089               	movlw	137
 17597  0D56  073D               	addwf	___ftdiv@sign,w
 17598  0D57  00B4               	movwf	??___ftdiv
 17599  0D58  0834               	movf	??___ftdiv,w
 17600  0D59  02BC               	subwf	___ftdiv@exp,f
 17601  0D5A  0831               	movf	___ftdiv@f1,w
 17602  0D5B  00B4               	movwf	??___ftdiv
 17603  0D5C  0832               	movf	___ftdiv@f1+1,w
 17604  0D5D  00B5               	movwf	??___ftdiv+1
 17605  0D5E  0833               	movf	___ftdiv@f1+2,w
 17606  0D5F  00B6               	movwf	??___ftdiv+2
 17607  0D60  3010               	movlw	16
 17608  0D61                     u4955:	
 17609  0D61  36B6               	lsrf	??___ftdiv+2,f
 17610  0D62  0CB5               	rrf	??___ftdiv+1,f
 17611  0D63  0CB4               	rrf	??___ftdiv,f
 17612  0D64  0B89               	decfsz	9,f
 17613  0D65  2D61               	goto	u4955
 17614  0D66  0834               	movf	??___ftdiv,w
 17615  0D67  00B7               	movwf	??___ftdiv+3
 17616  0D68  0837               	movf	??___ftdiv+3,w
 17617  0D69  00BD               	movwf	___ftdiv@sign
 17618  0D6A  082E               	movf	___ftdiv@f2,w
 17619  0D6B  00B4               	movwf	??___ftdiv
 17620  0D6C  082F               	movf	___ftdiv@f2+1,w
 17621  0D6D  00B5               	movwf	??___ftdiv+1
 17622  0D6E  0830               	movf	___ftdiv@f2+2,w
 17623  0D6F  00B6               	movwf	??___ftdiv+2
 17624  0D70  3010               	movlw	16
 17625  0D71                     u4965:	
 17626  0D71  36B6               	lsrf	??___ftdiv+2,f
 17627  0D72  0CB5               	rrf	??___ftdiv+1,f
 17628  0D73  0CB4               	rrf	??___ftdiv,f
 17629  0D74  0B89               	decfsz	9,f
 17630  0D75  2D71               	goto	u4965
 17631  0D76  0834               	movf	??___ftdiv,w
 17632  0D77  00B7               	movwf	??___ftdiv+3
 17633  0D78  0837               	movf	??___ftdiv+3,w
 17634  0D79  06BD               	xorwf	___ftdiv@sign,f
 17635  0D7A  3080               	movlw	128
 17636  0D7B  00B4               	movwf	??___ftdiv
 17637  0D7C  0834               	movf	??___ftdiv,w
 17638  0D7D  05BD               	andwf	___ftdiv@sign,f
 17639  0D7E  17B2               	bsf	___ftdiv@f1+1,7
 17640  0D7F  30FF               	movlw	255
 17641  0D80  05B1               	andwf	___ftdiv@f1,f
 17642  0D81  30FF               	movlw	255
 17643  0D82  05B2               	andwf	___ftdiv@f1+1,f
 17644  0D83  3000               	movlw	0
 17645  0D84  05B3               	andwf	___ftdiv@f1+2,f
 17646  0D85  17AF               	bsf	___ftdiv@f2+1,7
 17647  0D86  30FF               	movlw	255
 17648  0D87  05AE               	andwf	___ftdiv@f2,f
 17649  0D88  30FF               	movlw	255
 17650  0D89  05AF               	andwf	___ftdiv@f2+1,f
 17651  0D8A  3000               	movlw	0
 17652  0D8B  05B0               	andwf	___ftdiv@f2+2,f
 17653  0D8C  3018               	movlw	24
 17654  0D8D  00B4               	movwf	??___ftdiv
 17655  0D8E  0834               	movf	??___ftdiv,w
 17656  0D8F  00B8               	movwf	___ftdiv@cntr
 17657  0D90                     l6038:	
 17658  0D90  3001               	movlw	1
 17659  0D91                     u4975:	
 17660  0D91  35B9               	lslf	___ftdiv@f3,f
 17661  0D92  0DBA               	rlf	___ftdiv@f3+1,f
 17662  0D93  0DBB               	rlf	___ftdiv@f3+2,f
 17663  0D94  0B89               	decfsz	9,f
 17664  0D95  2D91               	goto	u4975
 17665  0D96  0830               	movf	___ftdiv@f2+2,w
 17666  0D97  0233               	subwf	___ftdiv@f1+2,w
 17667  0D98  1D03               	skipz
 17668  0D99  2DA0               	goto	u4985
 17669  0D9A  082F               	movf	___ftdiv@f2+1,w
 17670  0D9B  0232               	subwf	___ftdiv@f1+1,w
 17671  0D9C  1D03               	skipz
 17672  0D9D  2DA0               	goto	u4985
 17673  0D9E  082E               	movf	___ftdiv@f2,w
 17674  0D9F  0231               	subwf	___ftdiv@f1,w
 17675  0DA0                     u4985:	
 17676  0DA0  1C03               	skipc
 17677  0DA1  2DA9               	goto	l6046
 17678  0DA2  082E               	movf	___ftdiv@f2,w
 17679  0DA3  02B1               	subwf	___ftdiv@f1,f
 17680  0DA4  082F               	movf	___ftdiv@f2+1,w
 17681  0DA5  3BB2               	subwfb	___ftdiv@f1+1,f
 17682  0DA6  0830               	movf	___ftdiv@f2+2,w
 17683  0DA7  3BB3               	subwfb	___ftdiv@f1+2,f
 17684  0DA8  1439               	bsf	___ftdiv@f3,0
 17685  0DA9                     l6046:	
 17686  0DA9  3001               	movlw	1
 17687  0DAA                     u4995:	
 17688  0DAA  35B1               	lslf	___ftdiv@f1,f
 17689  0DAB  0DB2               	rlf	___ftdiv@f1+1,f
 17690  0DAC  0DB3               	rlf	___ftdiv@f1+2,f
 17691  0DAD  0B89               	decfsz	9,f
 17692  0DAE  2DAA               	goto	u4995
 17693  0DAF  3001               	movlw	1
 17694  0DB0  02B8               	subwf	___ftdiv@cntr,f
 17695  0DB1  1D03               	btfss	3,2
 17696  0DB2  2D90               	goto	l6038
 17697  0DB3  0839               	movf	___ftdiv@f3,w
 17698  0DB4  00A0               	movwf	___ftpack@arg
 17699  0DB5  083A               	movf	___ftdiv@f3+1,w
 17700  0DB6  00A1               	movwf	___ftpack@arg+1
 17701  0DB7  083B               	movf	___ftdiv@f3+2,w
 17702  0DB8  00A2               	movwf	___ftpack@arg+2
 17703  0DB9  083C               	movf	___ftdiv@exp,w
 17704  0DBA  00B4               	movwf	??___ftdiv
 17705  0DBB  0834               	movf	??___ftdiv,w
 17706  0DBC  00A3               	movwf	___ftpack@exp
 17707  0DBD  083D               	movf	___ftdiv@sign,w
 17708  0DBE  00B5               	movwf	??___ftdiv+1
 17709  0DBF  0835               	movf	??___ftdiv+1,w
 17710  0DC0  00A4               	movwf	___ftpack@sign
 17711  0DC1  3195  2536         	fcall	___ftpack
 17712  0DC3  0020               	movlb	0	; select bank0
 17713  0DC4  0820               	movf	?___ftpack,w
 17714  0DC5  00AE               	movwf	?___ftdiv
 17715  0DC6  0821               	movf	?___ftpack+1,w
 17716  0DC7  00AF               	movwf	?___ftdiv+1
 17717  0DC8  0822               	movf	?___ftpack+2,w
 17718  0DC9  00B0               	movwf	?___ftdiv+2
 17719  0DCA  0008               	return
 17720  0DCB                     __end_of___ftdiv:	
 17721                           
 17722                           	psect	text124
 17723  0389                     __ptext124:	
 17724 ;; *************** function ___ftadd *****************
 17725 ;; Defined at:
 17726 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17727 ;; Parameters:    Size  Location     Type
 17728 ;;  f1              3   33[BANK0 ] float 
 17729 ;;  f2              3   36[BANK0 ] float 
 17730 ;; Auto vars:     Size  Location     Type
 17731 ;;  exp1            1   45[BANK0 ] unsigned char 
 17732 ;;  exp2            1   44[BANK0 ] unsigned char 
 17733 ;;  sign            1   43[BANK0 ] unsigned char 
 17734 ;; Return value:  Size  Location     Type
 17735 ;;                  3   33[BANK0 ] float 
 17736 ;; Registers used:
 17737 ;;		wreg, status,2, status,0, pclath, cstack
 17738 ;; Tracked objects:
 17739 ;;		On entry : 0/0
 17740 ;;		On exit  : 0/0
 17741 ;;		Unchanged: 0/0
 17742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17743 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;Total ram usage:       13 bytes
 17748 ;; Hardware stack levels used:    1
 17749 ;; Hardware stack levels required when called:    6
 17750 ;; This function calls:
 17751 ;;		___ftpack
 17752 ;; This function is called by:
 17753 ;;		_getDimmerLights_PercentToValue
 17754 ;;		_getDimmerLights_ValueToPercent
 17755 ;; This function uses a non-reentrant model
 17756 ;;
 17757                           
 17758                           
 17759                           ;psect for function ___ftadd
 17760  0389                     ___ftadd:	
 17761                           
 17762                           ;incstack = 0
 17763                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17764  0389  0020               	movlb	0	; select bank0
 17765  038A  0841               	movf	___ftadd@f1,w
 17766  038B  00C7               	movwf	??___ftadd
 17767  038C  0842               	movf	___ftadd@f1+1,w
 17768  038D  00C8               	movwf	??___ftadd+1
 17769  038E  0843               	movf	___ftadd@f1+2,w
 17770  038F  00C9               	movwf	??___ftadd+2
 17771  0390  1003               	clrc
 17772  0391  0D48               	rlf	??___ftadd+1,w
 17773  0392  0D49               	rlf	??___ftadd+2,w
 17774  0393  00CA               	movwf	??___ftadd+3
 17775  0394  084A               	movf	??___ftadd+3,w
 17776  0395  00CD               	movwf	___ftadd@exp1
 17777  0396  0844               	movf	___ftadd@f2,w
 17778  0397  00C7               	movwf	??___ftadd
 17779  0398  0845               	movf	___ftadd@f2+1,w
 17780  0399  00C8               	movwf	??___ftadd+1
 17781  039A  0846               	movf	___ftadd@f2+2,w
 17782  039B  00C9               	movwf	??___ftadd+2
 17783  039C  1003               	clrc
 17784  039D  0D48               	rlf	??___ftadd+1,w
 17785  039E  0D49               	rlf	??___ftadd+2,w
 17786  039F  00CA               	movwf	??___ftadd+3
 17787  03A0  084A               	movf	??___ftadd+3,w
 17788  03A1  00CC               	movwf	___ftadd@exp2
 17789  03A2  084D               	movf	___ftadd@exp1,w
 17790  03A3  1903               	btfsc	3,2
 17791  03A4  2BB1               	goto	l5948
 17792  03A5  084C               	movf	___ftadd@exp2,w
 17793  03A6  024D               	subwf	___ftadd@exp1,w
 17794  03A7  1803               	skipnc
 17795  03A8  2BB8               	goto	l5952
 17796  03A9  034D               	decf	___ftadd@exp1,w
 17797  03AA  3AFF               	xorlw	255
 17798  03AB  074C               	addwf	___ftadd@exp2,w
 17799  03AC  00C7               	movwf	??___ftadd
 17800  03AD  3019               	movlw	25
 17801  03AE  0247               	subwf	??___ftadd,w
 17802  03AF  1C03               	skipc
 17803  03B0  2BB8               	goto	l5952
 17804  03B1                     l5948:	
 17805  03B1  0844               	movf	___ftadd@f2,w
 17806  03B2  00C1               	movwf	?___ftadd
 17807  03B3  0845               	movf	___ftadd@f2+1,w
 17808  03B4  00C2               	movwf	?___ftadd+1
 17809  03B5  0846               	movf	___ftadd@f2+2,w
 17810  03B6  00C3               	movwf	?___ftadd+2
 17811  03B7  0008               	return
 17812  03B8                     l5952:	
 17813  03B8  084C               	movf	___ftadd@exp2,w
 17814  03B9  1903               	btfsc	3,2
 17815  03BA  0008               	return
 17816  03BB  084D               	movf	___ftadd@exp1,w
 17817  03BC  024C               	subwf	___ftadd@exp2,w
 17818  03BD  1803               	skipnc
 17819  03BE  2BC7               	goto	l5958
 17820  03BF  034C               	decf	___ftadd@exp2,w
 17821  03C0  3AFF               	xorlw	255
 17822  03C1  074D               	addwf	___ftadd@exp1,w
 17823  03C2  00C7               	movwf	??___ftadd
 17824  03C3  3019               	movlw	25
 17825  03C4  0247               	subwf	??___ftadd,w
 17826  03C5  1803               	btfsc	3,0
 17827  03C6  0008               	return
 17828  03C7                     l5958:	
 17829  03C7  3006               	movlw	6
 17830  03C8  00C7               	movwf	??___ftadd
 17831  03C9  0847               	movf	??___ftadd,w
 17832  03CA  00CB               	movwf	___ftadd@sign
 17833  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17834  03CC  17CB               	bsf	___ftadd@sign,7
 17835  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17836  03CE  174B               	bsf	___ftadd@sign,6
 17837  03CF  17C2               	bsf	___ftadd@f1+1,7
 17838  03D0  30FF               	movlw	255
 17839  03D1  05C1               	andwf	___ftadd@f1,f
 17840  03D2  30FF               	movlw	255
 17841  03D3  05C2               	andwf	___ftadd@f1+1,f
 17842  03D4  3000               	movlw	0
 17843  03D5  05C3               	andwf	___ftadd@f1+2,f
 17844  03D6  17C5               	bsf	___ftadd@f2+1,7
 17845  03D7  30FF               	movlw	255
 17846  03D8  05C4               	andwf	___ftadd@f2,f
 17847  03D9  30FF               	movlw	255
 17848  03DA  05C5               	andwf	___ftadd@f2+1,f
 17849  03DB  3000               	movlw	0
 17850  03DC  05C6               	andwf	___ftadd@f2+2,f
 17851  03DD  084C               	movf	___ftadd@exp2,w
 17852  03DE  024D               	subwf	___ftadd@exp1,w
 17853  03DF  1803               	skipnc
 17854  03E0  2C03               	goto	l5980
 17855  03E1                     l5970:	
 17856  03E1  3001               	movlw	1
 17857  03E2                     u4795:	
 17858  03E2  35C4               	lslf	___ftadd@f2,f
 17859  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17860  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17861  03E5  0B89               	decfsz	9,f
 17862  03E6  2BE2               	goto	u4795
 17863  03E7  3001               	movlw	1
 17864  03E8  02CC               	subwf	___ftadd@exp2,f
 17865  03E9  084C               	movf	___ftadd@exp2,w
 17866  03EA  064D               	xorwf	___ftadd@exp1,w
 17867  03EB  1903               	skipnz
 17868  03EC  2BFE               	goto	l5978
 17869  03ED  3001               	movlw	1
 17870  03EE  02CB               	subwf	___ftadd@sign,f
 17871  03EF  084B               	movf	___ftadd@sign,w
 17872  03F0  3907               	andlw	7
 17873  03F1  1903               	btfsc	3,2
 17874  03F2  2BFE               	goto	l5978
 17875  03F3  2BE1               	goto	l5970
 17876  03F4                     l5976:	
 17877  03F4  3001               	movlw	1
 17878  03F5                     u4825:	
 17879  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17880  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17881  03F7  0CC1               	rrf	___ftadd@f1,f
 17882  03F8  0B89               	decfsz	9,f
 17883  03F9  2BF5               	goto	u4825
 17884  03FA  3001               	movlw	1
 17885  03FB  00C7               	movwf	??___ftadd
 17886  03FC  0847               	movf	??___ftadd,w
 17887  03FD  07CD               	addwf	___ftadd@exp1,f
 17888  03FE                     l5978:	
 17889  03FE  084D               	movf	___ftadd@exp1,w
 17890  03FF  064C               	xorwf	___ftadd@exp2,w
 17891  0400  1903               	btfsc	3,2
 17892  0401  2C28               	goto	l2903
 17893  0402  2BF4               	goto	l5976
 17894  0403                     l5980:	
 17895  0403  084D               	movf	___ftadd@exp1,w
 17896  0404  024C               	subwf	___ftadd@exp2,w
 17897  0405  1803               	skipnc
 17898  0406  2C28               	goto	l2903
 17899  0407                     l5982:	
 17900  0407  3001               	movlw	1
 17901  0408                     u4855:	
 17902  0408  35C1               	lslf	___ftadd@f1,f
 17903  0409  0DC2               	rlf	___ftadd@f1+1,f
 17904  040A  0DC3               	rlf	___ftadd@f1+2,f
 17905  040B  0B89               	decfsz	9,f
 17906  040C  2C08               	goto	u4855
 17907  040D  3001               	movlw	1
 17908  040E  02CD               	subwf	___ftadd@exp1,f
 17909  040F  084C               	movf	___ftadd@exp2,w
 17910  0410  064D               	xorwf	___ftadd@exp1,w
 17911  0411  1903               	skipnz
 17912  0412  2C24               	goto	l5990
 17913  0413  3001               	movlw	1
 17914  0414  02CB               	subwf	___ftadd@sign,f
 17915  0415  084B               	movf	___ftadd@sign,w
 17916  0416  3907               	andlw	7
 17917  0417  1903               	btfsc	3,2
 17918  0418  2C24               	goto	l5990
 17919  0419  2C07               	goto	l5982
 17920  041A                     l5988:	
 17921  041A  3001               	movlw	1
 17922  041B                     u4885:	
 17923  041B  36C6               	lsrf	___ftadd@f2+2,f
 17924  041C  0CC5               	rrf	___ftadd@f2+1,f
 17925  041D  0CC4               	rrf	___ftadd@f2,f
 17926  041E  0B89               	decfsz	9,f
 17927  041F  2C1B               	goto	u4885
 17928  0420  3001               	movlw	1
 17929  0421  00C7               	movwf	??___ftadd
 17930  0422  0847               	movf	??___ftadd,w
 17931  0423  07CC               	addwf	___ftadd@exp2,f
 17932  0424                     l5990:	
 17933  0424  084D               	movf	___ftadd@exp1,w
 17934  0425  064C               	xorwf	___ftadd@exp2,w
 17935  0426  1D03               	skipz
 17936  0427  2C1A               	goto	l5988
 17937  0428                     l2903:	
 17938  0428  1FCB               	btfss	___ftadd@sign,7
 17939  0429  2C3A               	goto	l5994
 17940  042A  30FF               	movlw	255
 17941  042B  06C1               	xorwf	___ftadd@f1,f
 17942  042C  30FF               	movlw	255
 17943  042D  06C2               	xorwf	___ftadd@f1+1,f
 17944  042E  30FF               	movlw	255
 17945  042F  06C3               	xorwf	___ftadd@f1+2,f
 17946  0430  3001               	movlw	1
 17947  0431  07C1               	addwf	___ftadd@f1,f
 17948  0432  3000               	movlw	0
 17949  0433  1803               	skipnc
 17950  0434  3001               	movlw	1
 17951  0435  07C2               	addwf	___ftadd@f1+1,f
 17952  0436  3000               	movlw	0
 17953  0437  1803               	skipnc
 17954  0438  3001               	movlw	1
 17955  0439  07C3               	addwf	___ftadd@f1+2,f
 17956  043A                     l5994:	
 17957  043A  1F4B               	btfss	___ftadd@sign,6
 17958  043B  2C4C               	goto	l5998
 17959  043C  30FF               	movlw	255
 17960  043D  06C4               	xorwf	___ftadd@f2,f
 17961  043E  30FF               	movlw	255
 17962  043F  06C5               	xorwf	___ftadd@f2+1,f
 17963  0440  30FF               	movlw	255
 17964  0441  06C6               	xorwf	___ftadd@f2+2,f
 17965  0442  3001               	movlw	1
 17966  0443  07C4               	addwf	___ftadd@f2,f
 17967  0444  3000               	movlw	0
 17968  0445  1803               	skipnc
 17969  0446  3001               	movlw	1
 17970  0447  07C5               	addwf	___ftadd@f2+1,f
 17971  0448  3000               	movlw	0
 17972  0449  1803               	skipnc
 17973  044A  3001               	movlw	1
 17974  044B  07C6               	addwf	___ftadd@f2+2,f
 17975  044C                     l5998:	
 17976  044C  01CB               	clrf	___ftadd@sign
 17977  044D  0841               	movf	___ftadd@f1,w
 17978  044E  07C4               	addwf	___ftadd@f2,f
 17979  044F  0842               	movf	___ftadd@f1+1,w
 17980  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17981  0451  0843               	movf	___ftadd@f1+2,w
 17982  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17983  0453  1FC6               	btfss	___ftadd@f2+2,7
 17984  0454  2C67               	goto	l6008
 17985  0455  30FF               	movlw	255
 17986  0456  06C4               	xorwf	___ftadd@f2,f
 17987  0457  30FF               	movlw	255
 17988  0458  06C5               	xorwf	___ftadd@f2+1,f
 17989  0459  30FF               	movlw	255
 17990  045A  06C6               	xorwf	___ftadd@f2+2,f
 17991  045B  3001               	movlw	1
 17992  045C  07C4               	addwf	___ftadd@f2,f
 17993  045D  3000               	movlw	0
 17994  045E  1803               	skipnc
 17995  045F  3001               	movlw	1
 17996  0460  07C5               	addwf	___ftadd@f2+1,f
 17997  0461  3000               	movlw	0
 17998  0462  1803               	skipnc
 17999  0463  3001               	movlw	1
 18000  0464  07C6               	addwf	___ftadd@f2+2,f
 18001  0465  01CB               	clrf	___ftadd@sign
 18002  0466  0ACB               	incf	___ftadd@sign,f
 18003  0467                     l6008:	
 18004  0467  0844               	movf	___ftadd@f2,w
 18005  0468  00A0               	movwf	___ftpack@arg
 18006  0469  0845               	movf	___ftadd@f2+1,w
 18007  046A  00A1               	movwf	___ftpack@arg+1
 18008  046B  0846               	movf	___ftadd@f2+2,w
 18009  046C  00A2               	movwf	___ftpack@arg+2
 18010  046D  084D               	movf	___ftadd@exp1,w
 18011  046E  00C7               	movwf	??___ftadd
 18012  046F  0847               	movf	??___ftadd,w
 18013  0470  00A3               	movwf	___ftpack@exp
 18014  0471  084B               	movf	___ftadd@sign,w
 18015  0472  00C8               	movwf	??___ftadd+1
 18016  0473  0848               	movf	??___ftadd+1,w
 18017  0474  00A4               	movwf	___ftpack@sign
 18018  0475  3195  2536         	fcall	___ftpack
 18019  0477  0020               	movlb	0	; select bank0
 18020  0478  0820               	movf	?___ftpack,w
 18021  0479  00C1               	movwf	?___ftadd
 18022  047A  0821               	movf	?___ftpack+1,w
 18023  047B  00C2               	movwf	?___ftadd+1
 18024  047C  0822               	movf	?___ftpack+2,w
 18025  047D  00C3               	movwf	?___ftadd+2
 18026  047E  0008               	return
 18027  047F                     __end_of___ftadd:	
 18028                           
 18029                           	psect	text125
 18030  1F96                     __ptext125:	
 18031 ;; *************** function ___awtoft *****************
 18032 ;; Defined at:
 18033 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18034 ;; Parameters:    Size  Location     Type
 18035 ;;  c               2    8[BANK0 ] int 
 18036 ;; Auto vars:     Size  Location     Type
 18037 ;;  sign            1   13[BANK0 ] unsigned char 
 18038 ;; Return value:  Size  Location     Type
 18039 ;;                  3    8[BANK0 ] float 
 18040 ;; Registers used:
 18041 ;;		wreg, status,2, status,0, pclath, cstack
 18042 ;; Tracked objects:
 18043 ;;		On entry : 0/0
 18044 ;;		On exit  : 0/0
 18045 ;;		Unchanged: 0/0
 18046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18047 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18050 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;Total ram usage:        6 bytes
 18052 ;; Hardware stack levels used:    1
 18053 ;; Hardware stack levels required when called:    6
 18054 ;; This function calls:
 18055 ;;		___ftpack
 18056 ;; This function is called by:
 18057 ;;		_getDimmerLights_PercentToValue
 18058 ;;		_getDimmerLights_ValueToPercent
 18059 ;; This function uses a non-reentrant model
 18060 ;;
 18061                           
 18062                           
 18063                           ;psect for function ___awtoft
 18064  1F96                     ___awtoft:	
 18065                           
 18066                           ;incstack = 0
 18067                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18068  1F96  0020               	movlb	0	; select bank0
 18069  1F97  01AD               	clrf	___awtoft@sign
 18070  1F98  1FA9               	btfss	___awtoft@c+1,7
 18071  1F99  2FA1               	goto	l5936
 18072  1F9A  09A8               	comf	___awtoft@c,f
 18073  1F9B  09A9               	comf	___awtoft@c+1,f
 18074  1F9C  0AA8               	incf	___awtoft@c,f
 18075  1F9D  1903               	skipnz
 18076  1F9E  0AA9               	incf	___awtoft@c+1,f
 18077  1F9F  01AD               	clrf	___awtoft@sign
 18078  1FA0  0AAD               	incf	___awtoft@sign,f
 18079  1FA1                     l5936:	
 18080  1FA1  0828               	movf	___awtoft@c,w
 18081  1FA2  00A0               	movwf	___ftpack@arg
 18082  1FA3  0829               	movf	___awtoft@c+1,w
 18083  1FA4  00A1               	movwf	___ftpack@arg+1
 18084  1FA5  01A2               	clrf	___ftpack@arg+2
 18085  1FA6  308E               	movlw	142
 18086  1FA7  00AB               	movwf	??___awtoft
 18087  1FA8  082B               	movf	??___awtoft,w
 18088  1FA9  00A3               	movwf	___ftpack@exp
 18089  1FAA  082D               	movf	___awtoft@sign,w
 18090  1FAB  00AC               	movwf	??___awtoft+1
 18091  1FAC  082C               	movf	??___awtoft+1,w
 18092  1FAD  00A4               	movwf	___ftpack@sign
 18093  1FAE  3195  2536         	fcall	___ftpack
 18094  1FB0  0020               	movlb	0	; select bank0
 18095  1FB1  0820               	movf	?___ftpack,w
 18096  1FB2  00A8               	movwf	?___awtoft
 18097  1FB3  0821               	movf	?___ftpack+1,w
 18098  1FB4  00A9               	movwf	?___awtoft+1
 18099  1FB5  0822               	movf	?___ftpack+2,w
 18100  1FB6  00AA               	movwf	?___awtoft+2
 18101  1FB7  0008               	return
 18102  1FB8                     __end_of___awtoft:	
 18103                           
 18104                           	psect	text126
 18105  1536                     __ptext126:	
 18106 ;; *************** function ___ftpack *****************
 18107 ;; Defined at:
 18108 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18109 ;; Parameters:    Size  Location     Type
 18110 ;;  arg             3    0[BANK0 ] unsigned um
 18111 ;;  exp             1    3[BANK0 ] unsigned char 
 18112 ;;  sign            1    4[BANK0 ] unsigned char 
 18113 ;; Auto vars:     Size  Location     Type
 18114 ;;		None
 18115 ;; Return value:  Size  Location     Type
 18116 ;;                  3    0[BANK0 ] float 
 18117 ;; Registers used:
 18118 ;;		wreg, status,2, status,0
 18119 ;; Tracked objects:
 18120 ;;		On entry : 0/0
 18121 ;;		On exit  : 0/0
 18122 ;;		Unchanged: 0/0
 18123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18124 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18126 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18127 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18128 ;;Total ram usage:        8 bytes
 18129 ;; Hardware stack levels used:    1
 18130 ;; Hardware stack levels required when called:    5
 18131 ;; This function calls:
 18132 ;;		Nothing
 18133 ;; This function is called by:
 18134 ;;		___awtoft
 18135 ;;		___ftadd
 18136 ;;		___ftdiv
 18137 ;;		___ftmul
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           
 18142                           ;psect for function ___ftpack
 18143  1536                     ___ftpack:	
 18144                           
 18145                           ;incstack = 0
 18146                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18147  1536  0020               	movlb	0	; select bank0
 18148  1537  0823               	movf	___ftpack@exp,w
 18149  1538  1903               	btfsc	3,2
 18150  1539  2D3F               	goto	l5804
 18151  153A  0822               	movf	___ftpack@arg+2,w
 18152  153B  0421               	iorwf	___ftpack@arg+1,w
 18153  153C  0420               	iorwf	___ftpack@arg,w
 18154  153D  1D03               	skipz
 18155  153E  2D50               	goto	l5810
 18156  153F                     l5804:	
 18157  153F  3000               	movlw	0
 18158  1540  00A0               	movwf	?___ftpack
 18159  1541  3000               	movlw	0
 18160  1542  00A1               	movwf	?___ftpack+1
 18161  1543  3000               	movlw	0
 18162  1544  00A2               	movwf	?___ftpack+2
 18163  1545  0008               	return
 18164  1546                     l5808:	
 18165  1546  3001               	movlw	1
 18166  1547  00A5               	movwf	??___ftpack
 18167  1548  0825               	movf	??___ftpack,w
 18168  1549  07A3               	addwf	___ftpack@exp,f
 18169  154A  3001               	movlw	1
 18170  154B                     u4425:	
 18171  154B  36A2               	lsrf	___ftpack@arg+2,f
 18172  154C  0CA1               	rrf	___ftpack@arg+1,f
 18173  154D  0CA0               	rrf	___ftpack@arg,f
 18174  154E  0B89               	decfsz	9,f
 18175  154F  2D4B               	goto	u4425
 18176  1550                     l5810:	
 18177  1550  30FE               	movlw	254
 18178  1551  0522               	andwf	___ftpack@arg+2,w
 18179  1552  1903               	btfsc	3,2
 18180  1553  2D69               	goto	l2874
 18181  1554  2D46               	goto	l5808
 18182  1555                     l5812:	
 18183  1555  3001               	movlw	1
 18184  1556  00A5               	movwf	??___ftpack
 18185  1557  0825               	movf	??___ftpack,w
 18186  1558  07A3               	addwf	___ftpack@exp,f
 18187  1559  3001               	movlw	1
 18188  155A  07A0               	addwf	___ftpack@arg,f
 18189  155B  3000               	movlw	0
 18190  155C  1803               	skipnc
 18191  155D  3001               	movlw	1
 18192  155E  07A1               	addwf	___ftpack@arg+1,f
 18193  155F  3000               	movlw	0
 18194  1560  1803               	skipnc
 18195  1561  3001               	movlw	1
 18196  1562  07A2               	addwf	___ftpack@arg+2,f
 18197  1563  3001               	movlw	1
 18198  1564                     u4445:	
 18199  1564  36A2               	lsrf	___ftpack@arg+2,f
 18200  1565  0CA1               	rrf	___ftpack@arg+1,f
 18201  1566  0CA0               	rrf	___ftpack@arg,f
 18202  1567  0B89               	decfsz	9,f
 18203  1568  2D64               	goto	u4445
 18204  1569                     l2874:	
 18205  1569  30FF               	movlw	255
 18206  156A  0522               	andwf	___ftpack@arg+2,w
 18207  156B  1903               	btfsc	3,2
 18208  156C  2D76               	goto	l5820
 18209  156D  2D55               	goto	l5812
 18210  156E                     l5818:	
 18211  156E  3001               	movlw	1
 18212  156F  02A3               	subwf	___ftpack@exp,f
 18213  1570  3001               	movlw	1
 18214  1571                     u4465:	
 18215  1571  35A0               	lslf	___ftpack@arg,f
 18216  1572  0DA1               	rlf	___ftpack@arg+1,f
 18217  1573  0DA2               	rlf	___ftpack@arg+2,f
 18218  1574  0B89               	decfsz	9,f
 18219  1575  2D71               	goto	u4465
 18220  1576                     l5820:	
 18221  1576  1FA1               	btfss	___ftpack@arg+1,7
 18222  1577  2D6E               	goto	l5818
 18223  1578  1823               	btfsc	___ftpack@exp,0
 18224  1579  2D80               	goto	l2880
 18225  157A  30FF               	movlw	255
 18226  157B  05A0               	andwf	___ftpack@arg,f
 18227  157C  307F               	movlw	127
 18228  157D  05A1               	andwf	___ftpack@arg+1,f
 18229  157E  30FF               	movlw	255
 18230  157F  05A2               	andwf	___ftpack@arg+2,f
 18231  1580                     l2880:	
 18232  1580  1003               	clrc
 18233  1581  0CA3               	rrf	___ftpack@exp,f
 18234  1582  0823               	movf	___ftpack@exp,w
 18235  1583  00A5               	movwf	??___ftpack
 18236  1584  01A6               	clrf	??___ftpack+1
 18237  1585  01A7               	clrf	??___ftpack+2
 18238  1586  3010               	movlw	16
 18239  1587                     u4495:	
 18240  1587  35A5               	lslf	??___ftpack,f
 18241  1588  0DA6               	rlf	??___ftpack+1,f
 18242  1589  0DA7               	rlf	??___ftpack+2,f
 18243  158A  0B89               	decfsz	9,f
 18244  158B  2D87               	goto	u4495
 18245  158C  0825               	movf	??___ftpack,w
 18246  158D  04A0               	iorwf	___ftpack@arg,f
 18247  158E  0826               	movf	??___ftpack+1,w
 18248  158F  04A1               	iorwf	___ftpack@arg+1,f
 18249  1590  0827               	movf	??___ftpack+2,w
 18250  1591  04A2               	iorwf	___ftpack@arg+2,f
 18251  1592  0824               	movf	___ftpack@sign,w
 18252  1593  1903               	btfsc	3,2
 18253  1594  0008               	return
 18254  1595  17A2               	bsf	___ftpack@arg+2,7
 18255  1596  0008               	return
 18256  1597                     __end_of___ftpack:	
 18257                           
 18258                           	psect	text127
 18259  1B95                     __ptext127:	
 18260 ;; *************** function _Division *****************
 18261 ;; Defined at:
 18262 ;;		line 1385 in file "../src/Dimmer_B1.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  value           1    wreg     unsigned char 
 18265 ;;  num             1    5[BANK0 ] unsigned char 
 18266 ;; Auto vars:     Size  Location     Type
 18267 ;;  value           1    8[BANK0 ] unsigned char 
 18268 ;;  result          1    9[BANK0 ] unsigned char 
 18269 ;; Return value:  Size  Location     Type
 18270 ;;                  1    wreg      unsigned char 
 18271 ;; Registers used:
 18272 ;;		wreg, status,2, status,0, pclath, cstack
 18273 ;; Tracked objects:
 18274 ;;		On entry : 0/0
 18275 ;;		On exit  : 0/0
 18276 ;;		Unchanged: 0/0
 18277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18278 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18282 ;;Total ram usage:        5 bytes
 18283 ;; Hardware stack levels used:    1
 18284 ;; Hardware stack levels required when called:    6
 18285 ;; This function calls:
 18286 ;;		___lbdiv
 18287 ;; This function is called by:
 18288 ;;		_DimmerIntr_Initialization
 18289 ;; This function uses a non-reentrant model
 18290 ;;
 18291                           
 18292                           
 18293                           ;psect for function _Division
 18294  1B95                     _Division:	
 18295                           
 18296                           ;incstack = 0
 18297                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18298                           ;Division@value stored from wreg
 18299  1B95  0020               	movlb	0	; select bank0
 18300  1B96  00A8               	movwf	Division@value
 18301                           
 18302                           ;Dimmer_B1.c: 1386: char result = (char) (value / num);
 18303  1B97  0825               	movf	Division@num,w
 18304  1B98  00A6               	movwf	??_Division
 18305  1B99  0826               	movf	??_Division,w
 18306  1B9A  00A0               	movwf	___lbdiv@divisor
 18307  1B9B  0828               	movf	Division@value,w
 18308  1B9C  319F  2774         	fcall	___lbdiv
 18309  1B9E  0020               	movlb	0	; select bank0
 18310  1B9F  00A7               	movwf	??_Division+1
 18311  1BA0  0827               	movf	??_Division+1,w
 18312  1BA1  00A9               	movwf	Division@result
 18313                           
 18314                           ;Dimmer_B1.c: 1387: return result;
 18315  1BA2  0829               	movf	Division@result,w
 18316  1BA3  0008               	return
 18317  1BA4                     __end_of_Division:	
 18318                           
 18319                           	psect	text128
 18320  1F74                     __ptext128:	
 18321 ;; *************** function ___lbdiv *****************
 18322 ;; Defined at:
 18323 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18324 ;; Parameters:    Size  Location     Type
 18325 ;;  dividend        1    wreg     unsigned char 
 18326 ;;  divisor         1    0[BANK0 ] unsigned char 
 18327 ;; Auto vars:     Size  Location     Type
 18328 ;;  dividend        1    2[BANK0 ] unsigned char 
 18329 ;;  quotient        1    4[BANK0 ] unsigned char 
 18330 ;;  counter         1    3[BANK0 ] unsigned char 
 18331 ;; Return value:  Size  Location     Type
 18332 ;;                  1    wreg      unsigned char 
 18333 ;; Registers used:
 18334 ;;		wreg, status,2, status,0
 18335 ;; Tracked objects:
 18336 ;;		On entry : 0/0
 18337 ;;		On exit  : 0/0
 18338 ;;		Unchanged: 0/0
 18339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18340 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18344 ;;Total ram usage:        5 bytes
 18345 ;; Hardware stack levels used:    1
 18346 ;; Hardware stack levels required when called:    5
 18347 ;; This function calls:
 18348 ;;		Nothing
 18349 ;; This function is called by:
 18350 ;;		_Division
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           
 18355                           ;psect for function ___lbdiv
 18356  1F74                     ___lbdiv:	
 18357                           
 18358                           ;incstack = 0
 18359                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18360                           ;___lbdiv@dividend stored from wreg
 18361  1F74  0020               	movlb	0	; select bank0
 18362  1F75  00A2               	movwf	___lbdiv@dividend
 18363  1F76  01A4               	clrf	___lbdiv@quotient
 18364  1F77  0820               	movf	___lbdiv@divisor,w
 18365  1F78  1903               	btfsc	3,2
 18366  1F79  2F94               	goto	l6760
 18367  1F7A  01A3               	clrf	___lbdiv@counter
 18368  1F7B  0AA3               	incf	___lbdiv@counter,f
 18369  1F7C                     l6748:	
 18370  1F7C  1BA0               	btfsc	___lbdiv@divisor,7
 18371  1F7D  2F85               	goto	l6750
 18372  1F7E  1003               	clrc
 18373  1F7F  0DA0               	rlf	___lbdiv@divisor,f
 18374  1F80  3001               	movlw	1
 18375  1F81  00A1               	movwf	??___lbdiv
 18376  1F82  0821               	movf	??___lbdiv,w
 18377  1F83  07A3               	addwf	___lbdiv@counter,f
 18378  1F84  2F7C               	goto	l6748
 18379  1F85                     l6750:	
 18380  1F85  1003               	clrc
 18381  1F86  0DA4               	rlf	___lbdiv@quotient,f
 18382  1F87  0820               	movf	___lbdiv@divisor,w
 18383  1F88  0222               	subwf	___lbdiv@dividend,w
 18384  1F89  1C03               	skipc
 18385  1F8A  2F8F               	goto	L10
 18386  1F8B  0820               	movf	___lbdiv@divisor,w
 18387  1F8C  02A2               	subwf	___lbdiv@dividend,f
 18388  1F8D  1424               	bsf	___lbdiv@quotient,0
 18389  1F8E  1003               	clrc
 18390  1F8F                     L10:	
 18391  1F8F  0CA0               	rrf	___lbdiv@divisor,f
 18392  1F90  3001               	movlw	1
 18393  1F91  02A3               	subwf	___lbdiv@counter,f
 18394  1F92  1D03               	btfss	3,2
 18395  1F93  2F85               	goto	l6750
 18396  1F94                     l6760:	
 18397  1F94  0824               	movf	___lbdiv@quotient,w
 18398  1F95  0008               	return
 18399  1F96                     __end_of___lbdiv:	
 18400                           
 18401                           	psect	text129
 18402  1A39                     __ptext129:	
 18403 ;; *************** function _DelayOff_Main *****************
 18404 ;; Defined at:
 18405 ;;		line 41 in file "../src/DelayOff_B1.c"
 18406 ;; Parameters:    Size  Location     Type
 18407 ;;		None
 18408 ;; Auto vars:     Size  Location     Type
 18409 ;;		None
 18410 ;; Return value:  Size  Location     Type
 18411 ;;		None               void
 18412 ;; Registers used:
 18413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18414 ;; Tracked objects:
 18415 ;;		On entry : 0/0
 18416 ;;		On exit  : 0/0
 18417 ;;		Unchanged: 0/0
 18418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18423 ;;Total ram usage:        0 bytes
 18424 ;; Hardware stack levels used:    1
 18425 ;; Hardware stack levels required when called:    9
 18426 ;; This function calls:
 18427 ;;		_DlyOff_Main
 18428 ;; This function is called by:
 18429 ;;		_main
 18430 ;; This function uses a non-reentrant model
 18431 ;;
 18432                           
 18433                           
 18434                           ;psect for function _DelayOff_Main
 18435  1A39                     _DelayOff_Main:	
 18436                           
 18437                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18438                           
 18439                           ;incstack = 0
 18440                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18441  1A39  3001               	movlw	1
 18442  1A3A  3188  20B2         	fcall	_DlyOff_Main
 18443  1A3C  0008               	return
 18444  1A3D                     __end_of_DelayOff_Main:	
 18445                           
 18446                           	psect	text130
 18447  08B2                     __ptext130:	
 18448 ;; *************** function _DlyOff_Main *****************
 18449 ;; Defined at:
 18450 ;;		line 61 in file "../src/DelayOff_B1.c"
 18451 ;; Parameters:    Size  Location     Type
 18452 ;;  sw              1    wreg     unsigned char 
 18453 ;; Auto vars:     Size  Location     Type
 18454 ;;  sw              1   71[BANK0 ] unsigned char 
 18455 ;; Return value:  Size  Location     Type
 18456 ;;		None               void
 18457 ;; Registers used:
 18458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18459 ;; Tracked objects:
 18460 ;;		On entry : 0/0
 18461 ;;		On exit  : 0/0
 18462 ;;		Unchanged: 0/0
 18463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18467 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18468 ;;Total ram usage:        3 bytes
 18469 ;; Hardware stack levels used:    1
 18470 ;; Hardware stack levels required when called:    8
 18471 ;; This function calls:
 18472 ;;		_DelayOffPointSelect
 18473 ;;		_getDimmerLights_Status
 18474 ;;		_setDimmerLights_SwOff
 18475 ;;		_setDimmerLights_SwOn
 18476 ;;		_setProductData
 18477 ;; This function is called by:
 18478 ;;		_DelayOff_Main
 18479 ;; This function uses a non-reentrant model
 18480 ;;
 18481                           
 18482                           
 18483                           ;psect for function _DlyOff_Main
 18484  08B2                     _DlyOff_Main:	
 18485                           
 18486                           ;incstack = 0
 18487                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18488                           ;DlyOff_Main@sw stored from wreg
 18489  08B2  0020               	movlb	0	; select bank0
 18490  08B3  00E7               	movwf	DlyOff_Main@sw
 18491                           
 18492                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18493  08B4  0867               	movf	DlyOff_Main@sw,w
 18494  08B5  319A  22F8  3188   	fcall	_DelayOffPointSelect
 18495                           
 18496                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18497  08B8  0021               	movlb	1	; select bank1
 18498  08B9  084A               	movf	_DelayOff^(0+128),w
 18499  08BA  0086               	movwf	6
 18500  08BB  3001               	movlw	1	; select bank2/3
 18501  08BC  0087               	movwf	7
 18502  08BD  1C81               	btfss	1,1
 18503  08BE  0008               	return
 18504                           
 18505                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18506  08BF  084A               	movf	_DelayOff^(0+128),w
 18507  08C0  3E02               	addlw	2
 18508  08C1  0086               	movwf	6
 18509  08C2  3001               	movlw	1	; select bank2/3
 18510  08C3  0087               	movwf	7
 18511  08C4  3001               	movlw	1
 18512  08C5  0781               	addwf	1,f
 18513  08C6  3141               	addfsr 1,1
 18514  08C7  1803               	skipnc
 18515  08C8  0A81               	incf	1,f
 18516                           
 18517                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18518  08C9  084A               	movf	_DelayOff^(0+128),w
 18519  08CA  3E02               	addlw	2
 18520  08CB  0086               	movwf	6
 18521  08CC  3001               	movlw	1	; select bank2/3
 18522  08CD  0087               	movwf	7
 18523  08CE  3F40               	moviw [0]fsr1
 18524  08CF  0020               	movlb	0	; select bank0
 18525  08D0  00E5               	movwf	??_DlyOff_Main
 18526  08D1  3F41               	moviw [1]fsr1
 18527  08D2  00E6               	movwf	??_DlyOff_Main+1
 18528  08D3  300B               	movlw	11
 18529  08D4  0266               	subwf	??_DlyOff_Main+1,w
 18530  08D5  30B8               	movlw	184
 18531  08D6  1903               	skipnz
 18532  08D7  0265               	subwf	??_DlyOff_Main,w
 18533  08D8  1C03               	skipc
 18534  08D9  0008               	return
 18535                           
 18536                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18537  08DA  0021               	movlb	1	; select bank1
 18538  08DB  084A               	movf	_DelayOff^(0+128),w
 18539  08DC  3E02               	addlw	2
 18540  08DD  0086               	movwf	6
 18541  08DE  3001               	movlw	1	; select bank2/3
 18542  08DF  0087               	movwf	7
 18543  08E0  3000               	movlw	0
 18544  08E1  3FC0               	movwi [0]fsr1
 18545  08E2  3FC1               	movwi [1]fsr1
 18546                           
 18547                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18548  08E3  3001               	movlw	1
 18549  08E4  0020               	movlb	0	; select bank0
 18550  08E5  00E5               	movwf	??_DlyOff_Main
 18551  08E6  0021               	movlb	1	; select bank1
 18552  08E7  084A               	movf	_DelayOff^(0+128),w
 18553  08E8  3E04               	addlw	4
 18554  08E9  0086               	movwf	6
 18555  08EA  3001               	movlw	1	; select bank2/3
 18556  08EB  0087               	movwf	7
 18557  08EC  0020               	movlb	0	; select bank0
 18558  08ED  0865               	movf	??_DlyOff_Main,w
 18559  08EE  0781               	addwf	1,f
 18560                           
 18561                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18562  08EF  0021               	movlb	1	; select bank1
 18563  08F0  084A               	movf	_DelayOff^(0+128),w
 18564  08F1  3E04               	addlw	4
 18565  08F2  0086               	movwf	6
 18566  08F3  3001               	movlw	1	; select bank2/3
 18567  08F4  0087               	movwf	7
 18568  08F5  0A4A               	incf	_DelayOff^(0+128),w
 18569  08F6  0084               	movwf	4
 18570  08F7  3001               	movlw	1	; select bank2/3
 18571  08F8  0085               	movwf	5
 18572  08F9  0800               	movf	0,w
 18573  08FA  0201               	subwf	1,w
 18574  08FB  1C03               	skipc
 18575  08FC  0008               	return
 18576                           
 18577                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18578  08FD  084A               	movf	_DelayOff^(0+128),w
 18579  08FE  3E04               	addlw	4
 18580  08FF  0086               	movwf	6
 18581  0900  3001               	movlw	1	; select bank2/3
 18582  0901  0087               	movwf	7
 18583  0902  0181               	clrf	1
 18584                           
 18585                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18586  0903  084A               	movf	_DelayOff^(0+128),w
 18587  0904  0086               	movwf	6
 18588  0905  3001               	movlw	1	; select bank2/3
 18589  0906  0087               	movwf	7
 18590  0907  1081               	bcf	1,1
 18591                           
 18592                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18593  0908  0020               	movlb	0	; select bank0
 18594  0909  0867               	movf	DlyOff_Main@sw,w
 18595  090A  319B  23D2  3188   	fcall	_getDimmerLights_Status
 18596  090D  3A01               	xorlw	1
 18597  090E  1D03               	skipz
 18598  090F  291A               	goto	l531
 18599                           
 18600                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18601  0910  0020               	movlb	0	; select bank0
 18602  0911  0867               	movf	DlyOff_Main@sw,w
 18603  0912  3191  215C  3188   	fcall	_setDimmerLights_SwOn
 18604                           
 18605                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18606  0915  0020               	movlb	0	; select bank0
 18607  0916  0867               	movf	DlyOff_Main@sw,w
 18608  0917  3191  21FE  3188   	fcall	_setDimmerLights_SwOff
 18609  091A                     l531:	
 18610                           
 18611                           ;DelayOff_B1.c: 78: }
 18612                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18613  091A  0020               	movlb	0	; select bank0
 18614  091B  01E2               	clrf	setProductData@value
 18615  091C  0867               	movf	DlyOff_Main@sw,w
 18616  091D  3E1A               	addlw	26
 18617  091E  319B  2310         	fcall	_setProductData
 18618  0920  0008               	return
 18619  0921                     __end_of_DlyOff_Main:	
 18620                           
 18621                           	psect	text131
 18622  1B10                     __ptext131:	
 18623 ;; *************** function _setProductData *****************
 18624 ;; Defined at:
 18625 ;;		line 645 in file "../src/Main_B1.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;  address         1    wreg     unsigned char 
 18628 ;;  value           1   66[BANK0 ] unsigned char 
 18629 ;; Auto vars:     Size  Location     Type
 18630 ;;  address         1   68[BANK0 ] unsigned char 
 18631 ;; Return value:  Size  Location     Type
 18632 ;;		None               void
 18633 ;; Registers used:
 18634 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18635 ;; Tracked objects:
 18636 ;;		On entry : 0/0
 18637 ;;		On exit  : 0/0
 18638 ;;		Unchanged: 0/0
 18639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18640 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18644 ;;Total ram usage:        3 bytes
 18645 ;; Hardware stack levels used:    1
 18646 ;; Hardware stack levels required when called:    5
 18647 ;; This function calls:
 18648 ;;		Nothing
 18649 ;; This function is called by:
 18650 ;;		_DlyOff_Main
 18651 ;;		_setDelayOff_GO
 18652 ;;		_setDimmerLights_OnOff
 18653 ;;		_setDimmerLights_Dimming
 18654 ;;		_setTemp_Main
 18655 ;;		_setLog_Code
 18656 ;;		_setControl_Lights_Table
 18657 ;;		_setRFSW_AdjControl
 18658 ;;		_setRF_DimmerLights
 18659 ;; This function uses a non-reentrant model
 18660 ;;
 18661                           
 18662                           
 18663                           ;psect for function _setProductData
 18664  1B10                     _setProductData:	
 18665                           
 18666                           ;incstack = 0
 18667                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18668                           ;setProductData@address stored from wreg
 18669  1B10  0020               	movlb	0	; select bank0
 18670  1B11  00E4               	movwf	setProductData@address
 18671                           
 18672                           ;Main_B1.c: 646: _product.Data[address] = value;
 18673  1B12  0862               	movf	setProductData@value,w
 18674  1B13  00E3               	movwf	??_setProductData
 18675  1B14  0864               	movf	setProductData@address,w
 18676  1B15  3ECC               	addlw	__product& (0+255)
 18677  1B16  0086               	movwf	6
 18678  1B17  3001               	movlw	1	; select bank3/4
 18679  1B18  0087               	movwf	7
 18680  1B19  0863               	movf	??_setProductData,w
 18681  1B1A  0081               	movwf	1
 18682  1B1B  0008               	return
 18683  1B1C                     __end_of_setProductData:	
 18684                           
 18685                           	psect	text132
 18686  115C                     __ptext132:	
 18687 ;; *************** function _setDimmerLights_SwOn *****************
 18688 ;; Defined at:
 18689 ;;		line 697 in file "../src/Dimmer_B1.c"
 18690 ;; Parameters:    Size  Location     Type
 18691 ;;  sw              1    wreg     unsigned char 
 18692 ;; Auto vars:     Size  Location     Type
 18693 ;;  sw              1   13[BANK0 ] unsigned char 
 18694 ;;  idle            1   14[BANK0 ] unsigned char 
 18695 ;; Return value:  Size  Location     Type
 18696 ;;		None               void
 18697 ;; Registers used:
 18698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18699 ;; Tracked objects:
 18700 ;;		On entry : 0/0
 18701 ;;		On exit  : 0/0
 18702 ;;		Unchanged: 0/0
 18703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18708 ;;Total ram usage:        2 bytes
 18709 ;; Hardware stack levels used:    1
 18710 ;; Hardware stack levels required when called:    7
 18711 ;; This function calls:
 18712 ;;		_DimmerLights_SelectPointer
 18713 ;;		_setBuz
 18714 ;; This function is called by:
 18715 ;;		_DlyOff_Main
 18716 ;;		_setControl_Lights_Table
 18717 ;;		_setRFSW_Control
 18718 ;;		_setRFSW_AdjControl
 18719 ;;		_setSw_Main
 18720 ;; This function uses a non-reentrant model
 18721 ;;
 18722                           
 18723                           
 18724                           ;psect for function _setDimmerLights_SwOn
 18725  115C                     _setDimmerLights_SwOn:	
 18726                           
 18727                           ;incstack = 0
 18728                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18729                           ;setDimmerLights_SwOn@sw stored from wreg
 18730  115C  0020               	movlb	0	; select bank0
 18731  115D  00AD               	movwf	setDimmerLights_SwOn@sw
 18732                           
 18733                           ;Dimmer_B1.c: 698: char idle = 0;
 18734  115E  01AE               	clrf	setDimmerLights_SwOn@idle
 18735                           
 18736                           ;Dimmer_B1.c: 723: DimmerLights_SelectPointer(sw);
 18737  115F  082D               	movf	setDimmerLights_SwOn@sw,w
 18738  1160  319B  2304  3191   	fcall	_DimmerLights_SelectPointer
 18739                           
 18740                           ;Dimmer_B1.c: 724: if (idle == 0) {
 18741  1163  0020               	movlb	0	; select bank0
 18742  1164  08AE               	movf	setDimmerLights_SwOn@idle,f
 18743  1165  1D03               	skipz
 18744  1166  0008               	return
 18745                           
 18746                           ;Dimmer_B1.c: 726: DimmerLights->SwFlag = 1;
 18747  1167  0021               	movlb	1	; select bank1
 18748  1168  084C               	movf	_DimmerLights^(0+128),w
 18749  1169  0086               	movwf	6
 18750  116A  3001               	movlw	1	; select bank2/3
 18751  116B  0087               	movwf	7
 18752  116C  1401               	bsf	1,0
 18753                           
 18754                           ;Dimmer_B1.c: 727: if (DimmerLights->Status == 0) {
 18755  116D  0A4C               	incf	_DimmerLights^(0+128),w
 18756  116E  0086               	movwf	6
 18757  116F  3001               	movlw	1	; select bank2/3
 18758  1170  0087               	movwf	7
 18759  1171  1801               	btfsc	1,0
 18760  1172  2983               	goto	l6200
 18761                           
 18762                           ;Dimmer_B1.c: 728: DimmerLights->Status = 1;
 18763  1173  0A4C               	incf	_DimmerLights^(0+128),w
 18764  1174  0086               	movwf	6
 18765  1175  3001               	movlw	1	; select bank2/3
 18766  1176  0087               	movwf	7
 18767  1177  1401               	bsf	1,0
 18768                           
 18769                           ;Dimmer_B1.c: 729: DimmerLights->Trigger = 1;
 18770  1178  084C               	movf	_DimmerLights^(0+128),w
 18771  1179  0086               	movwf	6
 18772  117A  3001               	movlw	1	; select bank2/3
 18773  117B  0087               	movwf	7
 18774  117C  1481               	bsf	1,1
 18775                           
 18776                           ;Dimmer_B1.c: 730: DimmerLights->Switch = 1;
 18777  117D  084C               	movf	_DimmerLights^(0+128),w
 18778  117E  0086               	movwf	6
 18779  117F  3001               	movlw	1	; select bank2/3
 18780  1180  0087               	movwf	7
 18781  1181  1501               	bsf	1,2
 18782                           
 18783                           ;Dimmer_B1.c: 731: } else {
 18784  1182  2988               	goto	l6202
 18785  1183                     l6200:	
 18786                           
 18787                           ;Dimmer_B1.c: 732: DimmerLights->Status = 0;
 18788  1183  0A4C               	incf	_DimmerLights^(0+128),w
 18789  1184  0086               	movwf	6
 18790  1185  3001               	movlw	1	; select bank2/3
 18791  1186  0087               	movwf	7
 18792  1187  1001               	bcf	1,0
 18793  1188                     l6202:	
 18794                           
 18795                           ;Dimmer_B1.c: 733: }
 18796                           ;Dimmer_B1.c: 734: setBuz(1, 100);
 18797  1188  3064               	movlw	100
 18798  1189  0020               	movlb	0	; select bank0
 18799  118A  00A9               	movwf	setBuz@time
 18800  118B  3000               	movlw	0
 18801  118C  00AA               	movwf	setBuz@time+1
 18802  118D  3001               	movlw	1
 18803  118E  3194  2425         	fcall	_setBuz
 18804  1190  0008               	return
 18805  1191                     __end_of_setDimmerLights_SwOn:	
 18806                           
 18807                           	psect	text133
 18808  1425                     __ptext133:	
 18809 ;; *************** function _setBuz *****************
 18810 ;; Defined at:
 18811 ;;		line 22 in file "../src/Buzzer_B1.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;  count           1    wreg     unsigned char 
 18814 ;;  time            2    9[BANK0 ] int 
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;  count           1   12[BANK0 ] unsigned char 
 18817 ;; Return value:  Size  Location     Type
 18818 ;;		None               void
 18819 ;; Registers used:
 18820 ;;		wreg, status,2, status,0, pclath, cstack
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;Total ram usage:        4 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; Hardware stack levels required when called:    6
 18833 ;; This function calls:
 18834 ;;		___awdiv
 18835 ;; This function is called by:
 18836 ;;		_setDimmerLights_SwOn
 18837 ;;		_setDimmerLights_Dimming
 18838 ;;		_my_MainTimer
 18839 ;;		_Exception_Main
 18840 ;;		_setTemp_Main
 18841 ;;		_setLog_Code
 18842 ;;		_setRFSW_Control
 18843 ;;		_setSw_Main
 18844 ;; This function uses a non-reentrant model
 18845 ;;
 18846                           
 18847                           
 18848                           ;psect for function _setBuz
 18849  1425                     _setBuz:	
 18850                           
 18851                           ;incstack = 0
 18852                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18853                           ;setBuz@count stored from wreg
 18854  1425  0020               	movlb	0	; select bank0
 18855  1426  00AC               	movwf	setBuz@count
 18856                           
 18857                           ;Buzzer_B1.c: 23: time /= 20;
 18858  1427  3014               	movlw	20
 18859  1428  00A0               	movwf	___awdiv@divisor
 18860  1429  3000               	movlw	0
 18861  142A  00A1               	movwf	___awdiv@divisor+1
 18862  142B  082A               	movf	setBuz@time+1,w
 18863  142C  01A3               	clrf	___awdiv@dividend+1
 18864  142D  07A3               	addwf	___awdiv@dividend+1,f
 18865  142E  0829               	movf	setBuz@time,w
 18866  142F  01A2               	clrf	___awdiv@dividend
 18867  1430  07A2               	addwf	___awdiv@dividend,f
 18868  1431  3193  237B  3194   	fcall	___awdiv
 18869  1434  0020               	movlb	0	; select bank0
 18870  1435  0821               	movf	?___awdiv+1,w
 18871  1436  01AA               	clrf	setBuz@time+1
 18872  1437  07AA               	addwf	setBuz@time+1,f
 18873  1438  0820               	movf	?___awdiv,w
 18874  1439  01A9               	clrf	setBuz@time
 18875  143A  07A9               	addwf	setBuz@time,f
 18876                           
 18877                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18878  143B  0022               	movlb	2	; select bank2
 18879  143C  1C20               	btfss	_Buz1^(0+256),0
 18880  143D  0008               	return
 18881                           
 18882                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18883  143E  18A0               	btfsc	_Buz1^(0+256),1
 18884  143F  2C56               	goto	l86
 18885                           
 18886                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18887  1440  14A0               	bsf	_Buz1^(0+256),1
 18888                           
 18889                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18890  1441  01A1               	clrf	(_Buz1^(0+256)+1)
 18891  1442  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18892                           
 18893                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18894  1443  0020               	movlb	0	; select bank0
 18895  1444  082C               	movf	setBuz@count,w
 18896  1445  00AB               	movwf	??_setBuz
 18897  1446  082B               	movf	??_setBuz,w
 18898  1447  0022               	movlb	2	; select bank2
 18899  1448  00A3               	movwf	(_Buz1^(0+256)+3)
 18900                           
 18901                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18902  1449  0020               	movlb	0	; select bank0
 18903  144A  082A               	movf	setBuz@time+1,w
 18904  144B  0022               	movlb	2	; select bank2
 18905  144C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18906  144D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18907  144E  0020               	movlb	0	; select bank0
 18908  144F  0829               	movf	setBuz@time,w
 18909  1450  0022               	movlb	2	; select bank2
 18910  1451  01A6               	clrf	(_Buz1^(0+256)+6)
 18911  1452  07A6               	addwf	(_Buz1^(0+256)+6),f
 18912                           
 18913                           ;Buzzer_B1.c: 30: RB3 = 1;
 18914  1453  0020               	movlb	0	; select bank0
 18915  1454  158D               	bsf	13,3	;volatile
 18916                           
 18917                           ;Buzzer_B1.c: 31: } else {
 18918  1455  0008               	return
 18919  1456                     l86:	
 18920                           
 18921                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18922  1456  19A0               	btfsc	_Buz1^(0+256),3
 18923  1457  2C6A               	goto	l88
 18924                           
 18925                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18926  1458  15A0               	bsf	_Buz1^(0+256),3
 18927                           
 18928                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18929  1459  0020               	movlb	0	; select bank0
 18930  145A  082C               	movf	setBuz@count,w
 18931  145B  00AB               	movwf	??_setBuz
 18932  145C  082B               	movf	??_setBuz,w
 18933  145D  0022               	movlb	2	; select bank2
 18934  145E  00A4               	movwf	(_Buz1^(0+256)+4)
 18935                           
 18936                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18937  145F  0020               	movlb	0	; select bank0
 18938  1460  082A               	movf	setBuz@time+1,w
 18939  1461  0022               	movlb	2	; select bank2
 18940  1462  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18941  1463  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18942  1464  0020               	movlb	0	; select bank0
 18943  1465  0829               	movf	setBuz@time,w
 18944  1466  0022               	movlb	2	; select bank2
 18945  1467  01A8               	clrf	(_Buz1^(0+256)+8)
 18946  1468  07A8               	addwf	(_Buz1^(0+256)+8),f
 18947                           
 18948                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18949  1469  0008               	return
 18950  146A                     l88:	
 18951  146A  1A20               	btfsc	_Buz1^(0+256),4
 18952  146B  0008               	return
 18953                           
 18954                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18955  146C  1620               	bsf	_Buz1^(0+256),4
 18956                           
 18957                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18958  146D  0020               	movlb	0	; select bank0
 18959  146E  082C               	movf	setBuz@count,w
 18960  146F  00AB               	movwf	??_setBuz
 18961  1470  082B               	movf	??_setBuz,w
 18962  1471  0022               	movlb	2	; select bank2
 18963  1472  00A5               	movwf	(_Buz1^(0+256)+5)
 18964                           
 18965                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18966  1473  0020               	movlb	0	; select bank0
 18967  1474  082A               	movf	setBuz@time+1,w
 18968  1475  0022               	movlb	2	; select bank2
 18969  1476  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18970  1477  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18971  1478  0020               	movlb	0	; select bank0
 18972  1479  0829               	movf	setBuz@time,w
 18973  147A  0022               	movlb	2	; select bank2
 18974  147B  01AA               	clrf	(_Buz1^(0+256)+10)
 18975  147C  07AA               	addwf	(_Buz1^(0+256)+10),f
 18976  147D  0008               	return
 18977  147E                     __end_of_setBuz:	
 18978                           
 18979                           	psect	text134
 18980  137B                     __ptext134:	
 18981 ;; *************** function ___awdiv *****************
 18982 ;; Defined at:
 18983 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;  divisor         2    0[BANK0 ] int 
 18986 ;;  dividend        2    2[BANK0 ] int 
 18987 ;; Auto vars:     Size  Location     Type
 18988 ;;  quotient        2    7[BANK0 ] int 
 18989 ;;  sign            1    6[BANK0 ] unsigned char 
 18990 ;;  counter         1    5[BANK0 ] unsigned char 
 18991 ;; Return value:  Size  Location     Type
 18992 ;;                  2    0[BANK0 ] int 
 18993 ;; Registers used:
 18994 ;;		wreg, status,2, status,0
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : 0/0
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19001 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19003 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;Total ram usage:        9 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:    5
 19007 ;; This function calls:
 19008 ;;		Nothing
 19009 ;; This function is called by:
 19010 ;;		_setBuz
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           
 19015                           ;psect for function ___awdiv
 19016  137B                     ___awdiv:	
 19017                           
 19018                           ;incstack = 0
 19019                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19020  137B  0020               	movlb	0	; select bank0
 19021  137C  01A6               	clrf	___awdiv@sign
 19022  137D  1FA1               	btfss	___awdiv@divisor+1,7
 19023  137E  2B86               	goto	l5838
 19024  137F  09A0               	comf	___awdiv@divisor,f
 19025  1380  09A1               	comf	___awdiv@divisor+1,f
 19026  1381  0AA0               	incf	___awdiv@divisor,f
 19027  1382  1903               	skipnz
 19028  1383  0AA1               	incf	___awdiv@divisor+1,f
 19029  1384  01A6               	clrf	___awdiv@sign
 19030  1385  0AA6               	incf	___awdiv@sign,f
 19031  1386                     l5838:	
 19032  1386  1FA3               	btfss	___awdiv@dividend+1,7
 19033  1387  2B91               	goto	l5844
 19034  1388  09A2               	comf	___awdiv@dividend,f
 19035  1389  09A3               	comf	___awdiv@dividend+1,f
 19036  138A  0AA2               	incf	___awdiv@dividend,f
 19037  138B  1903               	skipnz
 19038  138C  0AA3               	incf	___awdiv@dividend+1,f
 19039  138D  3001               	movlw	1
 19040  138E  00A4               	movwf	??___awdiv
 19041  138F  0824               	movf	??___awdiv,w
 19042  1390  06A6               	xorwf	___awdiv@sign,f
 19043  1391                     l5844:	
 19044  1391  01A7               	clrf	___awdiv@quotient
 19045  1392  01A8               	clrf	___awdiv@quotient+1
 19046  1393  0821               	movf	___awdiv@divisor+1,w
 19047  1394  0420               	iorwf	___awdiv@divisor,w
 19048  1395  1903               	skipnz
 19049  1396  2BC0               	goto	l5866
 19050  1397  01A5               	clrf	___awdiv@counter
 19051  1398  0AA5               	incf	___awdiv@counter,f
 19052  1399                     l5854:	
 19053  1399  1BA1               	btfsc	___awdiv@divisor+1,7
 19054  139A  2BA5               	goto	l5856
 19055  139B  3001               	movlw	1
 19056  139C                     u4545:	
 19057  139C  35A0               	lslf	___awdiv@divisor,f
 19058  139D  0DA1               	rlf	___awdiv@divisor+1,f
 19059  139E  0B89               	decfsz	9,f
 19060  139F  2B9C               	goto	u4545
 19061  13A0  3001               	movlw	1
 19062  13A1  00A4               	movwf	??___awdiv
 19063  13A2  0824               	movf	??___awdiv,w
 19064  13A3  07A5               	addwf	___awdiv@counter,f
 19065  13A4  2B99               	goto	l5854
 19066  13A5                     l5856:	
 19067  13A5  3001               	movlw	1
 19068  13A6                     u4565:	
 19069  13A6  35A7               	lslf	___awdiv@quotient,f
 19070  13A7  0DA8               	rlf	___awdiv@quotient+1,f
 19071  13A8  0B89               	decfsz	9,f
 19072  13A9  2BA6               	goto	u4565
 19073  13AA  0821               	movf	___awdiv@divisor+1,w
 19074  13AB  0223               	subwf	___awdiv@dividend+1,w
 19075  13AC  1D03               	skipz
 19076  13AD  2BB0               	goto	u4575
 19077  13AE  0820               	movf	___awdiv@divisor,w
 19078  13AF  0222               	subwf	___awdiv@dividend,w
 19079  13B0                     u4575:	
 19080  13B0  1C03               	skipc
 19081  13B1  2BB7               	goto	l5862
 19082  13B2  0820               	movf	___awdiv@divisor,w
 19083  13B3  02A2               	subwf	___awdiv@dividend,f
 19084  13B4  0821               	movf	___awdiv@divisor+1,w
 19085  13B5  3BA3               	subwfb	___awdiv@dividend+1,f
 19086  13B6  1427               	bsf	___awdiv@quotient,0
 19087  13B7                     l5862:	
 19088  13B7  3001               	movlw	1
 19089  13B8                     u4585:	
 19090  13B8  36A1               	lsrf	___awdiv@divisor+1,f
 19091  13B9  0CA0               	rrf	___awdiv@divisor,f
 19092  13BA  0B89               	decfsz	9,f
 19093  13BB  2BB8               	goto	u4585
 19094  13BC  3001               	movlw	1
 19095  13BD  02A5               	subwf	___awdiv@counter,f
 19096  13BE  1D03               	btfss	3,2
 19097  13BF  2BA5               	goto	l5856
 19098  13C0                     l5866:	
 19099  13C0  0826               	movf	___awdiv@sign,w
 19100  13C1  1903               	btfsc	3,2
 19101  13C2  2BC8               	goto	l5870
 19102  13C3  09A7               	comf	___awdiv@quotient,f
 19103  13C4  09A8               	comf	___awdiv@quotient+1,f
 19104  13C5  0AA7               	incf	___awdiv@quotient,f
 19105  13C6  1903               	skipnz
 19106  13C7  0AA8               	incf	___awdiv@quotient+1,f
 19107  13C8                     l5870:	
 19108  13C8  0828               	movf	___awdiv@quotient+1,w
 19109  13C9  01A1               	clrf	?___awdiv+1
 19110  13CA  07A1               	addwf	?___awdiv+1,f
 19111  13CB  0827               	movf	___awdiv@quotient,w
 19112  13CC  01A0               	clrf	?___awdiv
 19113  13CD  07A0               	addwf	?___awdiv,f
 19114  13CE  0008               	return
 19115  13CF                     __end_of___awdiv:	
 19116                           
 19117                           	psect	text135
 19118  11FE                     __ptext135:	
 19119 ;; *************** function _setDimmerLights_SwOff *****************
 19120 ;; Defined at:
 19121 ;;		line 739 in file "../src/Dimmer_B1.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;  sw              1    wreg     unsigned char 
 19124 ;; Auto vars:     Size  Location     Type
 19125 ;;  sw              1    2[BANK0 ] unsigned char 
 19126 ;; Return value:  Size  Location     Type
 19127 ;;		None               void
 19128 ;; Registers used:
 19129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19130 ;; Tracked objects:
 19131 ;;		On entry : 0/0
 19132 ;;		On exit  : 0/0
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19139 ;;Total ram usage:        1 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; Hardware stack levels required when called:    6
 19142 ;; This function calls:
 19143 ;;		_DimmerLights_SelectPointer
 19144 ;; This function is called by:
 19145 ;;		_DlyOff_Main
 19146 ;;		_Exception_Main
 19147 ;;		_setControl_Lights_Table
 19148 ;;		_setRFSW_Control
 19149 ;;		_setRFSW_AdjControl
 19150 ;;		_setSw_Main
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           
 19155                           ;psect for function _setDimmerLights_SwOff
 19156  11FE                     _setDimmerLights_SwOff:	
 19157                           
 19158                           ;incstack = 0
 19159                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19160                           ;setDimmerLights_SwOff@sw stored from wreg
 19161  11FE  0020               	movlb	0	; select bank0
 19162  11FF  00A2               	movwf	setDimmerLights_SwOff@sw
 19163                           
 19164                           ;Dimmer_B1.c: 740: DimmerLights_SelectPointer(sw);
 19165  1200  0822               	movf	setDimmerLights_SwOff@sw,w
 19166  1201  319B  2304  3191   	fcall	_DimmerLights_SelectPointer
 19167                           
 19168                           ;Dimmer_B1.c: 742: if (DimmerLights->SwFlag == 1) {
 19169  1204  0021               	movlb	1	; select bank1
 19170  1205  084C               	movf	_DimmerLights^(0+128),w
 19171  1206  0086               	movwf	6
 19172  1207  3001               	movlw	1	; select bank2/3
 19173  1208  0087               	movwf	7
 19174  1209  1C01               	btfss	1,0
 19175  120A  0008               	return
 19176                           
 19177                           ;Dimmer_B1.c: 743: DimmerLights->SwFlag = 0;
 19178  120B  084C               	movf	_DimmerLights^(0+128),w
 19179  120C  0086               	movwf	6
 19180  120D  3001               	movlw	1	; select bank2/3
 19181  120E  0087               	movwf	7
 19182  120F  1001               	bcf	1,0
 19183                           
 19184                           ;Dimmer_B1.c: 744: if (DimmerLights->Status == 1) {
 19185  1210  0A4C               	incf	_DimmerLights^(0+128),w
 19186  1211  0086               	movwf	6
 19187  1212  3001               	movlw	1	; select bank2/3
 19188  1213  0087               	movwf	7
 19189  1214  1C01               	btfss	1,0
 19190  1215  2A2C               	goto	l6214
 19191                           
 19192                           ;Dimmer_B1.c: 745: if (DimmerLights->DimmingSwFlag == 1) {
 19193  1216  084C               	movf	_DimmerLights^(0+128),w
 19194  1217  0086               	movwf	6
 19195  1218  3001               	movlw	1	; select bank2/3
 19196  1219  0087               	movwf	7
 19197  121A  1D81               	btfss	1,3
 19198  121B  0008               	return
 19199                           
 19200                           ;Dimmer_B1.c: 746: DimmerLights->DimmingSwFlag = 0;
 19201  121C  084C               	movf	_DimmerLights^(0+128),w
 19202  121D  0086               	movwf	6
 19203  121E  3001               	movlw	1	; select bank2/3
 19204  121F  0087               	movwf	7
 19205  1220  1181               	bcf	1,3
 19206                           
 19207                           ;Dimmer_B1.c: 748: DimmerLights->DimmingTrigger = 1;
 19208  1221  084C               	movf	_DimmerLights^(0+128),w
 19209  1222  0086               	movwf	6
 19210  1223  3001               	movlw	1	; select bank2/3
 19211  1224  0087               	movwf	7
 19212  1225  1601               	bsf	1,4
 19213                           
 19214                           ;Dimmer_B1.c: 749: DimmerLights->DimmingSwitch = 0;
 19215  1226  084C               	movf	_DimmerLights^(0+128),w
 19216  1227  0086               	movwf	6
 19217  1228  3001               	movlw	1	; select bank2/3
 19218  1229  0087               	movwf	7
 19219  122A  1281               	bcf	1,5
 19220                           
 19221                           ;Dimmer_B1.c: 750: }
 19222                           ;Dimmer_B1.c: 751: } else {
 19223  122B  0008               	return
 19224  122C                     l6214:	
 19225                           
 19226                           ;Dimmer_B1.c: 753: DimmerLights->Trigger = 1;
 19227  122C  084C               	movf	_DimmerLights^(0+128),w
 19228  122D  0086               	movwf	6
 19229  122E  3001               	movlw	1	; select bank2/3
 19230  122F  0087               	movwf	7
 19231  1230  1481               	bsf	1,1
 19232                           
 19233                           ;Dimmer_B1.c: 754: DimmerLights->Switch = 0;
 19234  1231  084C               	movf	_DimmerLights^(0+128),w
 19235  1232  0086               	movwf	6
 19236  1233  3001               	movlw	1	; select bank2/3
 19237  1234  0087               	movwf	7
 19238  1235  1101               	bcf	1,2
 19239  1236  0008               	return
 19240  1237                     __end_of_setDimmerLights_SwOff:	
 19241                           
 19242                           	psect	text136
 19243  1BD2                     __ptext136:	
 19244 ;; *************** function _getDimmerLights_Status *****************
 19245 ;; Defined at:
 19246 ;;		line 1083 in file "../src/Dimmer_B1.c"
 19247 ;; Parameters:    Size  Location     Type
 19248 ;;  lights          1    wreg     unsigned char 
 19249 ;; Auto vars:     Size  Location     Type
 19250 ;;  lights          1    2[BANK0 ] unsigned char 
 19251 ;;  status          1    3[BANK0 ] unsigned char 
 19252 ;; Return value:  Size  Location     Type
 19253 ;;                  1    wreg      unsigned char 
 19254 ;; Registers used:
 19255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19256 ;; Tracked objects:
 19257 ;;		On entry : 0/0
 19258 ;;		On exit  : 0/0
 19259 ;;		Unchanged: 0/0
 19260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19265 ;;Total ram usage:        2 bytes
 19266 ;; Hardware stack levels used:    1
 19267 ;; Hardware stack levels required when called:    6
 19268 ;; This function calls:
 19269 ;;		_DimmerLights_SelectPointer
 19270 ;; This function is called by:
 19271 ;;		_DlyOff_Main
 19272 ;;		_Exception_Main
 19273 ;;		_setControl_Lights_Table
 19274 ;;		_setRFSW_Control
 19275 ;;		_setRFSW_AdjControl
 19276 ;;		_setRF_AdjControl
 19277 ;; This function uses a non-reentrant model
 19278 ;;
 19279                           
 19280                           
 19281                           ;psect for function _getDimmerLights_Status
 19282  1BD2                     _getDimmerLights_Status:	
 19283                           
 19284                           ;incstack = 0
 19285                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19286                           ;getDimmerLights_Status@lights stored from wreg
 19287  1BD2  0020               	movlb	0	; select bank0
 19288  1BD3  00A2               	movwf	getDimmerLights_Status@lights
 19289                           
 19290                           ;Dimmer_B1.c: 1084: DimmerLights_SelectPointer(lights);
 19291  1BD4  0822               	movf	getDimmerLights_Status@lights,w
 19292  1BD5  319B  2304         	fcall	_DimmerLights_SelectPointer
 19293                           
 19294                           ;Dimmer_B1.c: 1085: char status = DimmerLights->Status == 1 ? 1 : 0;
 19295  1BD7  0021               	movlb	1	; select bank1
 19296  1BD8  0A4C               	incf	_DimmerLights^(0+128),w
 19297  1BD9  0086               	movwf	6
 19298  1BDA  3001               	movlw	1	; select bank2/3
 19299  1BDB  0087               	movwf	7
 19300  1BDC  3000               	movlw	0
 19301  1BDD  1801               	btfsc	1,0
 19302  1BDE  3001               	movlw	1
 19303  1BDF  0020               	movlb	0	; select bank0
 19304  1BE0  00A3               	movwf	getDimmerLights_Status@status
 19305                           
 19306                           ;Dimmer_B1.c: 1086: return status;
 19307  1BE1  0823               	movf	getDimmerLights_Status@status,w
 19308  1BE2  0008               	return
 19309  1BE3                     __end_of_getDimmerLights_Status:	
 19310                           
 19311                           	psect	text137
 19312  1B04                     __ptext137:	
 19313 ;; *************** function _DimmerLights_SelectPointer *****************
 19314 ;; Defined at:
 19315 ;;		line 620 in file "../src/Dimmer_B1.c"
 19316 ;; Parameters:    Size  Location     Type
 19317 ;;  lights          1    wreg     unsigned char 
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;  lights          1    1[BANK0 ] unsigned char 
 19320 ;; Return value:  Size  Location     Type
 19321 ;;		None               void
 19322 ;; Registers used:
 19323 ;;		wreg
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/0
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19333 ;;Total ram usage:        2 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    5
 19336 ;; This function calls:
 19337 ;;		Nothing
 19338 ;; This function is called by:
 19339 ;;		_setDimmerLights_SwOn
 19340 ;;		_setDimmerLights_SwOff
 19341 ;;		_setDimmerLights_DimmingOn
 19342 ;;		_setDimmerLights_Main
 19343 ;;		_getDimmerLights_Status
 19344 ;;		_setDimmerLights_DimmingRun
 19345 ;;		_setRF_AdjControl
 19346 ;;		_setDimmerLights_Status
 19347 ;; This function uses a non-reentrant model
 19348 ;;
 19349                           
 19350                           
 19351                           ;psect for function _DimmerLights_SelectPointer
 19352  1B04                     _DimmerLights_SelectPointer:	
 19353                           
 19354                           ;incstack = 0
 19355                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19356                           ;DimmerLights_SelectPointer@lights stored from wreg
 19357  1B04  0020               	movlb	0	; select bank0
 19358  1B05  00A1               	movwf	DimmerLights_SelectPointer@lights
 19359                           
 19360                           ;Dimmer_B1.c: 622: if (lights == 1) {
 19361  1B06  0821               	movf	DimmerLights_SelectPointer@lights,w
 19362  1B07  3A01               	xorlw	1
 19363  1B08  1D03               	skipz
 19364  1B09  0008               	return
 19365                           
 19366                           ;Dimmer_B1.c: 623: DimmerLights = &DimmerLights1;
 19367  1B0A  3060               	movlw	_DimmerLights1& (0+255)
 19368  1B0B  00A0               	movwf	??_DimmerLights_SelectPointer
 19369  1B0C  0820               	movf	??_DimmerLights_SelectPointer,w
 19370  1B0D  0021               	movlb	1	; select bank1
 19371  1B0E  00CC               	movwf	_DimmerLights^(0+128)
 19372  1B0F  0008               	return
 19373  1B10                     __end_of_DimmerLights_SelectPointer:	
 19374                           
 19375                           	psect	text138
 19376  1A35                     __ptext138:	
 19377 ;; *************** function _DelayOff_Initialization *****************
 19378 ;; Defined at:
 19379 ;;		line 26 in file "../src/DelayOff_B1.c"
 19380 ;; Parameters:    Size  Location     Type
 19381 ;;		None
 19382 ;; Auto vars:     Size  Location     Type
 19383 ;;		None
 19384 ;; Return value:  Size  Location     Type
 19385 ;;		None               void
 19386 ;; Registers used:
 19387 ;;		wreg, status,2, status,0, pclath, cstack
 19388 ;; Tracked objects:
 19389 ;;		On entry : 0/0
 19390 ;;		On exit  : 0/0
 19391 ;;		Unchanged: 0/0
 19392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19397 ;;Total ram usage:        0 bytes
 19398 ;; Hardware stack levels used:    1
 19399 ;; Hardware stack levels required when called:    7
 19400 ;; This function calls:
 19401 ;;		_DlyOff_Initialization
 19402 ;; This function is called by:
 19403 ;;		_main
 19404 ;; This function uses a non-reentrant model
 19405 ;;
 19406                           
 19407                           
 19408                           ;psect for function _DelayOff_Initialization
 19409  1A35                     _DelayOff_Initialization:	
 19410                           
 19411                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19412                           
 19413                           ;incstack = 0
 19414                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19415  1A35  3001               	movlw	1
 19416  1A36  319A  2262         	fcall	_DlyOff_Initialization
 19417  1A38  0008               	return
 19418  1A39                     __end_of_DelayOff_Initialization:	
 19419                           
 19420                           	psect	text139
 19421  1A62                     __ptext139:	
 19422 ;; *************** function _DlyOff_Initialization *****************
 19423 ;; Defined at:
 19424 ;;		line 56 in file "../src/DelayOff_B1.c"
 19425 ;; Parameters:    Size  Location     Type
 19426 ;;  sw              1    wreg     unsigned char 
 19427 ;; Auto vars:     Size  Location     Type
 19428 ;;  sw              1    2[BANK0 ] unsigned char 
 19429 ;; Return value:  Size  Location     Type
 19430 ;;		None               void
 19431 ;; Registers used:
 19432 ;;		wreg, status,2, status,0, pclath, cstack
 19433 ;; Tracked objects:
 19434 ;;		On entry : 0/0
 19435 ;;		On exit  : 0/0
 19436 ;;		Unchanged: 0/0
 19437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19442 ;;Total ram usage:        1 bytes
 19443 ;; Hardware stack levels used:    1
 19444 ;; Hardware stack levels required when called:    6
 19445 ;; This function calls:
 19446 ;;		_DelayOffPointSelect
 19447 ;; This function is called by:
 19448 ;;		_DelayOff_Initialization
 19449 ;; This function uses a non-reentrant model
 19450 ;;
 19451                           
 19452                           
 19453                           ;psect for function _DlyOff_Initialization
 19454  1A62                     _DlyOff_Initialization:	
 19455                           
 19456                           ;incstack = 0
 19457                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19458                           ;DlyOff_Initialization@sw stored from wreg
 19459  1A62  0020               	movlb	0	; select bank0
 19460  1A63  00A2               	movwf	DlyOff_Initialization@sw
 19461                           
 19462                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19463  1A64  0822               	movf	DlyOff_Initialization@sw,w
 19464  1A65  319A  22F8         	fcall	_DelayOffPointSelect
 19465  1A67  0008               	return
 19466  1A68                     __end_of_DlyOff_Initialization:	
 19467                           
 19468                           	psect	text140
 19469  1AF8                     __ptext140:	
 19470 ;; *************** function _DelayOffPointSelect *****************
 19471 ;; Defined at:
 19472 ;;		line 7 in file "../src/DelayOff_B1.c"
 19473 ;; Parameters:    Size  Location     Type
 19474 ;;  sw              1    wreg     unsigned char 
 19475 ;; Auto vars:     Size  Location     Type
 19476 ;;  sw              1    1[BANK0 ] unsigned char 
 19477 ;; Return value:  Size  Location     Type
 19478 ;;		None               void
 19479 ;; Registers used:
 19480 ;;		wreg
 19481 ;; Tracked objects:
 19482 ;;		On entry : 0/0
 19483 ;;		On exit  : 0/0
 19484 ;;		Unchanged: 0/0
 19485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19490 ;;Total ram usage:        2 bytes
 19491 ;; Hardware stack levels used:    1
 19492 ;; Hardware stack levels required when called:    5
 19493 ;; This function calls:
 19494 ;;		Nothing
 19495 ;; This function is called by:
 19496 ;;		_DlyOff_Initialization
 19497 ;;		_DlyOff_Main
 19498 ;;		_setDelayOff_GO
 19499 ;;		_getDelayOff_GO
 19500 ;; This function uses a non-reentrant model
 19501 ;;
 19502                           
 19503                           
 19504                           ;psect for function _DelayOffPointSelect
 19505  1AF8                     _DelayOffPointSelect:	
 19506                           
 19507                           ;incstack = 0
 19508                           ; Regs used in _DelayOffPointSelect: [wreg]
 19509                           ;DelayOffPointSelect@sw stored from wreg
 19510  1AF8  0020               	movlb	0	; select bank0
 19511  1AF9  00A1               	movwf	DelayOffPointSelect@sw
 19512                           
 19513                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19514  1AFA  0821               	movf	DelayOffPointSelect@sw,w
 19515  1AFB  3A01               	xorlw	1
 19516  1AFC  1D03               	skipz
 19517  1AFD  0008               	return
 19518                           
 19519                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19520  1AFE  30C7               	movlw	_DlySw1& (0+255)
 19521  1AFF  00A0               	movwf	??_DelayOffPointSelect
 19522  1B00  0820               	movf	??_DelayOffPointSelect,w
 19523  1B01  0021               	movlb	1	; select bank1
 19524  1B02  00CA               	movwf	_DelayOff^(0+128)
 19525  1B03  0008               	return
 19526  1B04                     __end_of_DelayOffPointSelect:	
 19527                           
 19528                           	psect	text141
 19529  1331                     __ptext141:	
 19530 ;; *************** function _Buzzer_Main *****************
 19531 ;; Defined at:
 19532 ;;		line 46 in file "../src/Buzzer_B1.c"
 19533 ;; Parameters:    Size  Location     Type
 19534 ;;		None
 19535 ;; Auto vars:     Size  Location     Type
 19536 ;;		None
 19537 ;; Return value:  Size  Location     Type
 19538 ;;		None               void
 19539 ;; Registers used:
 19540 ;;		wreg, status,2, status,0
 19541 ;; Tracked objects:
 19542 ;;		On entry : 0/0
 19543 ;;		On exit  : 0/0
 19544 ;;		Unchanged: 0/0
 19545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19550 ;;Total ram usage:        1 bytes
 19551 ;; Hardware stack levels used:    1
 19552 ;; Hardware stack levels required when called:    5
 19553 ;; This function calls:
 19554 ;;		Nothing
 19555 ;; This function is called by:
 19556 ;;		_main
 19557 ;; This function uses a non-reentrant model
 19558 ;;
 19559                           
 19560                           
 19561                           ;psect for function _Buzzer_Main
 19562  1331                     _Buzzer_Main:	
 19563                           
 19564                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19565                           
 19566                           ;incstack = 0
 19567                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19568  1331  0022               	movlb	2	; select bank2
 19569  1332  1CA0               	btfss	_Buz1^(0+256),1
 19570  1333  0008               	return
 19571                           
 19572                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19573  1334  3001               	movlw	1
 19574  1335  07A1               	addwf	(_Buz1^(0+256)+1),f
 19575  1336  3000               	movlw	0
 19576  1337  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19577                           
 19578                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19579  1338  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19580  1339  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19581  133A  1D03               	skipz
 19582  133B  2B3E               	goto	u7775
 19583  133C  0826               	movf	(_Buz1^(0+256)+6),w
 19584  133D  0221               	subwf	(_Buz1^(0+256)+1),w
 19585  133E                     u7775:	
 19586  133E  1C03               	skipc
 19587  133F  0008               	return
 19588                           
 19589                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19590  1340  01A1               	clrf	(_Buz1^(0+256)+1)
 19591  1341  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19592                           
 19593                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19594  1342  12A0               	bcf	_Buz1^(0+256),5
 19595  1343  0020               	movlb	0	; select bank0
 19596  1344  1D8D               	btfss	13,3	;volatile
 19597  1345  2B48               	goto	l7856
 19598  1346  0022               	movlb	2	; select bank2
 19599  1347  16A0               	bsf	_Buz1^(0+256),5
 19600  1348                     l7856:	
 19601                           
 19602                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19603  1348  0022               	movlb	2	; select bank2
 19604  1349  1AA0               	btfsc	_Buz1^(0+256),5
 19605  134A  2B74               	goto	l96
 19606                           
 19607                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19608  134B  08A3               	movf	(_Buz1^(0+256)+3),f
 19609  134C  1D03               	skipz
 19610  134D  2B70               	goto	l97
 19611                           
 19612                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19613  134E  1DA0               	btfss	_Buz1^(0+256),3
 19614  134F  2B5E               	goto	l98
 19615                           
 19616                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19617  1350  11A0               	bcf	_Buz1^(0+256),3
 19618                           
 19619                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19620  1351  0824               	movf	(_Buz1^(0+256)+4),w
 19621  1352  0020               	movlb	0	; select bank0
 19622  1353  00A0               	movwf	??_Buzzer_Main
 19623  1354  0820               	movf	??_Buzzer_Main,w
 19624  1355  0022               	movlb	2	; select bank2
 19625  1356  00A3               	movwf	(_Buz1^(0+256)+3)
 19626                           
 19627                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19628  1357  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19629  1358  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19630  1359  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19631  135A  0828               	movf	(_Buz1^(0+256)+8),w
 19632  135B  01A6               	clrf	(_Buz1^(0+256)+6)
 19633  135C  07A6               	addwf	(_Buz1^(0+256)+6),f
 19634                           
 19635                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19636  135D  0008               	return
 19637  135E                     l98:	
 19638  135E  1E20               	btfss	_Buz1^(0+256),4
 19639  135F  2B6E               	goto	l100
 19640                           
 19641                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19642  1360  1220               	bcf	_Buz1^(0+256),4
 19643                           
 19644                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19645  1361  0825               	movf	(_Buz1^(0+256)+5),w
 19646  1362  0020               	movlb	0	; select bank0
 19647  1363  00A0               	movwf	??_Buzzer_Main
 19648  1364  0820               	movf	??_Buzzer_Main,w
 19649  1365  0022               	movlb	2	; select bank2
 19650  1366  00A3               	movwf	(_Buz1^(0+256)+3)
 19651                           
 19652                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19653  1367  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19654  1368  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19655  1369  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19656  136A  082A               	movf	(_Buz1^(0+256)+10),w
 19657  136B  01A6               	clrf	(_Buz1^(0+256)+6)
 19658  136C  07A6               	addwf	(_Buz1^(0+256)+6),f
 19659                           
 19660                           ;Buzzer_B1.c: 62: } else {
 19661  136D  0008               	return
 19662  136E                     l100:	
 19663                           
 19664                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19665  136E  10A0               	bcf	_Buz1^(0+256),1
 19666                           
 19667                           ;Buzzer_B1.c: 64: }
 19668                           ;Buzzer_B1.c: 65: } else {
 19669  136F  0008               	return
 19670  1370                     l97:	
 19671                           
 19672                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19673  1370  16A0               	bsf	_Buz1^(0+256),5
 19674                           
 19675                           ;Buzzer_B1.c: 68: RB3 = 1;
 19676  1371  0020               	movlb	0	; select bank0
 19677  1372  158D               	bsf	13,3	;volatile
 19678                           
 19679                           ;Buzzer_B1.c: 69: }
 19680                           ;Buzzer_B1.c: 70: } else {
 19681  1373  0008               	return
 19682  1374                     l96:	
 19683                           
 19684                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19685  1374  12A0               	bcf	_Buz1^(0+256),5
 19686                           
 19687                           ;Buzzer_B1.c: 73: RB3 = 0;
 19688  1375  0020               	movlb	0	; select bank0
 19689  1376  118D               	bcf	13,3	;volatile
 19690                           
 19691                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19692  1377  3001               	movlw	1
 19693  1378  0022               	movlb	2	; select bank2
 19694  1379  02A3               	subwf	(_Buz1^(0+256)+3),f
 19695  137A  0008               	return
 19696  137B                     __end_of_Buzzer_Main:	
 19697                           
 19698                           	psect	text142
 19699  1A23                     __ptext142:	
 19700 ;; *************** function _Buzzer_Initialization *****************
 19701 ;; Defined at:
 19702 ;;		line 11 in file "../src/Buzzer_B1.c"
 19703 ;; Parameters:    Size  Location     Type
 19704 ;;		None
 19705 ;; Auto vars:     Size  Location     Type
 19706 ;;		None
 19707 ;; Return value:  Size  Location     Type
 19708 ;;		None               void
 19709 ;; Registers used:
 19710 ;;		None
 19711 ;; Tracked objects:
 19712 ;;		On entry : 0/0
 19713 ;;		On exit  : 0/0
 19714 ;;		Unchanged: 0/0
 19715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19720 ;;Total ram usage:        0 bytes
 19721 ;; Hardware stack levels used:    1
 19722 ;; Hardware stack levels required when called:    5
 19723 ;; This function calls:
 19724 ;;		Nothing
 19725 ;; This function is called by:
 19726 ;;		_main
 19727 ;; This function uses a non-reentrant model
 19728 ;;
 19729                           
 19730                           
 19731                           ;psect for function _Buzzer_Initialization
 19732  1A23                     _Buzzer_Initialization:	
 19733                           
 19734                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19735                           
 19736                           ;incstack = 0
 19737                           ; Regs used in _Buzzer_Initialization: []
 19738  1A23  0022               	movlb	2	; select bank2
 19739  1A24  1420               	bsf	_Buz1^(0+256),0
 19740  1A25  0008               	return
 19741  1A26                     __end_of_Buzzer_Initialization:	
 19742                           
 19743                           	psect	intentry
 19744  0004                     __pintentry:	
 19745 ;; *************** function _ISR *****************
 19746 ;; Defined at:
 19747 ;;		line 116 in file "../src/MCU_B1.c"
 19748 ;; Parameters:    Size  Location     Type
 19749 ;;		None
 19750 ;; Auto vars:     Size  Location     Type
 19751 ;;		None
 19752 ;; Return value:  Size  Location     Type
 19753 ;;		None               void
 19754 ;; Registers used:
 19755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19756 ;; Tracked objects:
 19757 ;;		On entry : 0/0
 19758 ;;		On exit  : 0/0
 19759 ;;		Unchanged: 0/0
 19760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19765 ;;Total ram usage:        1 bytes
 19766 ;; Hardware stack levels used:    1
 19767 ;; Hardware stack levels required when called:    4
 19768 ;; This function calls:
 19769 ;;		_IOC_ISR
 19770 ;;		_TMR1_ISR
 19771 ;; This function is called by:
 19772 ;;		Interrupt level 1
 19773 ;; This function uses a non-reentrant model
 19774 ;;
 19775                           
 19776  0004                     _ISR:	
 19777                           
 19778                           ;incstack = 0
 19779                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19780  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19781  0005  3180               	pagesel	$
 19782  0006  0020               	movlb	0	; select bank0
 19783  0007  087F               	movf	127,w
 19784  0008  00FC               	movwf	??_ISR
 19785                           
 19786                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19787  0009  0021               	movlb	1	; select bank1
 19788  000A  1C11               	btfss	17,0	;volatile
 19789  000B  2812               	goto	i1l8420
 19790  000C  0020               	movlb	0	; select bank0
 19791  000D  1C11               	btfss	17,0	;volatile
 19792  000E  2812               	goto	i1l8420
 19793                           
 19794                           ;MCU_B1.c: 126: TMR1_ISR();
 19795  000F  319E  26D5  3180   	fcall	_TMR1_ISR
 19796  0012                     i1l8420:	
 19797                           
 19798                           ;MCU_B1.c: 127: }
 19799                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19800  0012  198B               	btfsc	11,3	;volatile
 19801  0013  1C0B               	btfss	11,0	;volatile
 19802  0014  281A               	goto	i1l1212
 19803  0015  0027               	movlb	7	; select bank7
 19804  0016  1D16               	btfss	22,2	;volatile
 19805  0017  281A               	goto	i1l1212
 19806                           
 19807                           ;MCU_B1.c: 139: IOC_ISR();
 19808  0018  319A  22A7         	fcall	_IOC_ISR
 19809  001A                     i1l1212:	
 19810                           ;MCU_B1.c: 140: }
 19811                           ;MCU_B1.c: 148: return;
 19812                           
 19813  001A  087C               	movf	??_ISR,w
 19814  001B  0020               	movlb	0	; select bank0
 19815  001C  00FF               	movwf	127
 19816  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19817  001E  0009               	retfie
 19818  001F                     __end_of_ISR:	
 19819                           
 19820                           	psect	text144
 19821  1ED5                     __ptext144:	
 19822 ;; *************** function _TMR1_ISR *****************
 19823 ;; Defined at:
 19824 ;;		line 236 in file "../src/MCU_B1.c"
 19825 ;; Parameters:    Size  Location     Type
 19826 ;;		None
 19827 ;; Auto vars:     Size  Location     Type
 19828 ;;		None
 19829 ;; Return value:  Size  Location     Type
 19830 ;;		None               void
 19831 ;; Registers used:
 19832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19833 ;; Tracked objects:
 19834 ;;		On entry : 0/0
 19835 ;;		On exit  : 0/0
 19836 ;;		Unchanged: 0/0
 19837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19842 ;;Total ram usage:        0 bytes
 19843 ;; Hardware stack levels used:    1
 19844 ;; Hardware stack levels required when called:    1
 19845 ;; This function calls:
 19846 ;;		_DimmerLights_TMR_1
 19847 ;; This function is called by:
 19848 ;;		_ISR
 19849 ;; This function uses a non-reentrant model
 19850 ;;
 19851                           
 19852                           
 19853                           ;psect for function _TMR1_ISR
 19854  1ED5                     _TMR1_ISR:	
 19855                           
 19856                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19857                           
 19858                           ;incstack = 0
 19859                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19860  1ED5  3189  2121  319E   	fcall	_DimmerLights_TMR_1
 19861                           
 19862                           ;MCU_B1.c: 268: Timer1.Count++;
 19863  1ED8  3001               	movlw	1
 19864  1ED9  0022               	movlb	2	; select bank2
 19865  1EDA  07B2               	addwf	(_Timer1^(0+256)+1),f
 19866  1EDB  3000               	movlw	0
 19867  1EDC  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19868                           
 19869                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19870  1EDD  3001               	movlw	1
 19871  1EDE  3E31               	addlw	_Timer1& (0+255)
 19872  1EDF  0086               	movwf	6
 19873  1EE0  3001               	movlw	1	; select bank2/3
 19874  1EE1  0087               	movwf	7
 19875  1EE2  3F40               	moviw [0]fsr1
 19876  1EE3  3AC8               	xorlw	200
 19877  1EE4  1D03               	skipz
 19878  1EE5  2EE8               	goto	u787_25
 19879  1EE6  3F41               	moviw [1]fsr1
 19880  1EE7  3A00               	xorlw	0
 19881  1EE8                     u787_25:	
 19882  1EE8  1D03               	skipz
 19883  1EE9  2EED               	goto	i1l7910
 19884                           
 19885                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19886  1EEA  01B2               	clrf	(_Timer1^(0+256)+1)
 19887  1EEB  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19888                           
 19889                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19890  1EEC  1431               	bsf	_Timer1^(0+256),0
 19891  1EED                     i1l7910:	
 19892                           
 19893                           ;MCU_B1.c: 272: }
 19894                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19895  1EED  30FA               	movlw	250
 19896  1EEE  0020               	movlb	0	; select bank0
 19897  1EEF  0097               	movwf	23	;volatile
 19898                           
 19899                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19900  1EF0  3038               	movlw	56
 19901  1EF1  0096               	movwf	22	;volatile
 19902                           
 19903                           ;MCU_B1.c: 276: TMR1IF = 0;
 19904  1EF2  1011               	bcf	17,0	;volatile
 19905  1EF3  0008               	return
 19906  1EF4                     __end_of_TMR1_ISR:	
 19907                           
 19908                           	psect	text145
 19909  0921                     __ptext145:	
 19910 ;; *************** function _DimmerLights_TMR_1 *****************
 19911 ;; Defined at:
 19912 ;;		line 1390 in file "../src/Dimmer_B1.c"
 19913 ;; Parameters:    Size  Location     Type
 19914 ;;		None
 19915 ;; Auto vars:     Size  Location     Type
 19916 ;;		None
 19917 ;; Return value:  Size  Location     Type
 19918 ;;		None               void
 19919 ;; Registers used:
 19920 ;;		wreg, status,2, status,0
 19921 ;; Tracked objects:
 19922 ;;		On entry : 0/0
 19923 ;;		On exit  : 0/0
 19924 ;;		Unchanged: 0/0
 19925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19928 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19930 ;;Total ram usage:        1 bytes
 19931 ;; Hardware stack levels used:    1
 19932 ;; This function calls:
 19933 ;;		Nothing
 19934 ;; This function is called by:
 19935 ;;		_TMR1_ISR
 19936 ;; This function uses a non-reentrant model
 19937 ;;
 19938                           
 19939                           
 19940                           ;psect for function _DimmerLights_TMR_1
 19941  0921                     _DimmerLights_TMR_1:	
 19942                           
 19943                           ;Dimmer_B1.c: 1392: if (DimmerIntr1.Start == 1) {
 19944                           
 19945                           ;incstack = 0
 19946                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19947  0921  0021               	movlb	1	; select bank1
 19948  0922  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19949  0923  2946               	goto	i1l844
 19950                           
 19951                           ;Dimmer_B1.c: 1393: DimmerIntr1.Count++;
 19952  0924  3001               	movlw	1
 19953  0925  00F0               	movwf	??_DimmerLights_TMR_1
 19954  0926  0870               	movf	??_DimmerLights_TMR_1,w
 19955  0927  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19956                           
 19957                           ;Dimmer_B1.c: 1395: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19958  0928  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19959  0929  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19960  092A  1D03               	skipz
 19961  092B  292E               	goto	i1l7336
 19962                           
 19963                           ;Dimmer_B1.c: 1396: DimmerIntr1.Count = 0;
 19964  092C  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19965                           
 19966                           ;Dimmer_B1.c: 1397: DimmerIntr1.Start = 0;
 19967  092D  113C               	bcf	_DimmerIntr1^(0+128),2
 19968  092E                     i1l7336:	
 19969                           
 19970                           ;Dimmer_B1.c: 1398: }
 19971                           ;Dimmer_B1.c: 1412: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19972  092E  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19973  092F  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19974  0930  1903               	btfsc	3,2
 19975                           
 19976                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.ControlStatus == 1) {
 19977  0931  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19978  0932  2935               	goto	i1l7342
 19979                           
 19980                           ;Dimmer_B1.c: 1414: RB1 = 0;
 19981  0933  0020               	movlb	0	; select bank0
 19982  0934  108D               	bcf	13,1	;volatile
 19983  0935                     i1l7342:	
 19984                           
 19985                           ;Dimmer_B1.c: 1415: }
 19986                           ;Dimmer_B1.c: 1416: }
 19987                           ;Dimmer_B1.c: 1419: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19988  0935  0021               	movlb	1	; select bank1
 19989  0936  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19990  0937  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19991  0938  1903               	btfsc	3,2
 19992                           
 19993                           ;Dimmer_B1.c: 1420: if (DimmerIntr1.ControlStatus == 1) {
 19994  0939  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19995  093A  293D               	goto	i1l7348
 19996                           
 19997                           ;Dimmer_B1.c: 1421: RB1 = 1;
 19998  093B  0020               	movlb	0	; select bank0
 19999  093C  148D               	bsf	13,1	;volatile
 20000  093D                     i1l7348:	
 20001                           
 20002                           ;Dimmer_B1.c: 1422: }
 20003                           ;Dimmer_B1.c: 1423: }
 20004                           ;Dimmer_B1.c: 1426: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20005  093D  0021               	movlb	1	; select bank1
 20006  093E  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20007  093F  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20008  0940  1903               	btfsc	3,2
 20009                           
 20010                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.ControlStatus == 1) {
 20011  0941  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20012  0942  2957               	goto	i1l852
 20013                           
 20014                           ;Dimmer_B1.c: 1428: RB1 = 0;
 20015  0943  0020               	movlb	0	; select bank0
 20016  0944  108D               	bcf	13,1	;volatile
 20017                           
 20018                           ;Dimmer_B1.c: 1429: }
 20019                           ;Dimmer_B1.c: 1432: }
 20020                           ;Dimmer_B1.c: 1434: } else {
 20021  0945  2957               	goto	i1l852
 20022  0946                     i1l844:	
 20023                           
 20024                           ;Dimmer_B1.c: 1435: if (DimmerIntr1.GO == 1) {
 20025  0946  1C3C               	btfss	_DimmerIntr1^(0+128),0
 20026  0947  2957               	goto	i1l852
 20027                           
 20028                           ;Dimmer_B1.c: 1436: DimmerIntr1.Count++;
 20029  0948  3001               	movlw	1
 20030  0949  00F0               	movwf	??_DimmerLights_TMR_1
 20031  094A  0870               	movf	??_DimmerLights_TMR_1,w
 20032  094B  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20033                           
 20034                           ;Dimmer_B1.c: 1437: if (DimmerIntr1.Count == 7) {
 20035  094C  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20036  094D  3A07               	xorlw	7
 20037  094E  1D03               	skipz
 20038  094F  2957               	goto	i1l852
 20039                           
 20040                           ;Dimmer_B1.c: 1438: DimmerIntr1.Count = 0;
 20041  0950  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20042                           
 20043                           ;Dimmer_B1.c: 1439: DimmerIntr1.GO = 0;
 20044  0951  103C               	bcf	_DimmerIntr1^(0+128),0
 20045                           
 20046                           ;Dimmer_B1.c: 1440: DimmerIntr1.Start = 1;
 20047  0952  153C               	bsf	_DimmerIntr1^(0+128),2
 20048                           
 20049                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.ControlStatus == 1) {
 20050  0953  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20051  0954  2957               	goto	i1l852
 20052                           
 20053                           ;Dimmer_B1.c: 1443: RB1 = 1;
 20054  0955  0020               	movlb	0	; select bank0
 20055  0956  148D               	bsf	13,1	;volatile
 20056  0957                     i1l852:	
 20057                           
 20058                           ;Dimmer_B1.c: 1444: }
 20059                           ;Dimmer_B1.c: 1445: }
 20060                           ;Dimmer_B1.c: 1446: }
 20061                           ;Dimmer_B1.c: 1447: }
 20062                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.Tune == 1) {
 20063  0957  0021               	movlb	1	; select bank1
 20064  0958  1CBC               	btfss	_DimmerIntr1^(0+128),1
 20065  0959  0008               	return
 20066                           
 20067                           ;Dimmer_B1.c: 1451: DimmerIntr1.Tune = 0;
 20068  095A  10BC               	bcf	_DimmerIntr1^(0+128),1
 20069                           
 20070                           ;Dimmer_B1.c: 1452: DimmerIntr1.TuneTime++;
 20071  095B  3001               	movlw	1
 20072  095C  00F0               	movwf	??_DimmerLights_TMR_1
 20073  095D  0870               	movf	??_DimmerLights_TMR_1,w
 20074  095E  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 20075                           
 20076                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20077  095F  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 20078  0960  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 20079  0961  1C03               	skipc
 20080  0962  0008               	return
 20081                           
 20082                           ;Dimmer_B1.c: 1454: DimmerIntr1.TuneTime = 0;
 20083  0963  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 20084                           
 20085                           ;Dimmer_B1.c: 1455: DimmerIntr1.TuneGO = 1;
 20086  0964  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 20087                           
 20088                           ;Dimmer_B1.c: 1456: if (DimmerIntr1.Dimming_Sw == 1) {
 20089  0965  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20090  0966  297D               	goto	i1l858
 20091                           
 20092                           ;Dimmer_B1.c: 1457: if (DimmerIntr1.Dimming_Status == 0) {
 20093  0967  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 20094  0968  2974               	goto	i1l7386
 20095                           
 20096                           ;Dimmer_B1.c: 1458: if (DimmerIntr1.DimmingValue < ((char)(84*0.6))) {
 20097  0969  3032               	movlw	50
 20098  096A  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20099  096B  1803               	skipnc
 20100  096C  2972               	goto	i1l860
 20101                           
 20102                           ;Dimmer_B1.c: 1459: DimmerIntr1.DimmingValue++;
 20103  096D  3001               	movlw	1
 20104  096E  00F0               	movwf	??_DimmerLights_TMR_1
 20105  096F  0870               	movf	??_DimmerLights_TMR_1,w
 20106  0970  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20107                           
 20108                           ;Dimmer_B1.c: 1460: } else {
 20109  0971  0008               	return
 20110  0972                     i1l860:	
 20111                           
 20112                           ;Dimmer_B1.c: 1461: DimmerIntr1.Dimming_Status = 1;
 20113  0972  16BC               	bsf	_DimmerIntr1^(0+128),5
 20114                           
 20115                           ;Dimmer_B1.c: 1462: }
 20116                           ;Dimmer_B1.c: 1463: } else {
 20117  0973  0008               	return
 20118  0974                     i1l7386:	
 20119                           
 20120                           ;Dimmer_B1.c: 1464: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 20121  0974  3007               	movlw	7
 20122  0975  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20123  0976  1C03               	skipc
 20124  0977  297B               	goto	i1l863
 20125                           
 20126                           ;Dimmer_B1.c: 1465: DimmerIntr1.DimmingValue--;
 20127  0978  3001               	movlw	1
 20128  0979  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20129                           
 20130                           ;Dimmer_B1.c: 1466: } else {
 20131  097A  0008               	return
 20132  097B                     i1l863:	
 20133                           
 20134                           ;Dimmer_B1.c: 1467: DimmerIntr1.Dimming_Status = 0;
 20135  097B  12BC               	bcf	_DimmerIntr1^(0+128),5
 20136                           
 20137                           ;Dimmer_B1.c: 1468: }
 20138                           ;Dimmer_B1.c: 1469: }
 20139                           ;Dimmer_B1.c: 1470: } else if (DimmerIntr1.Dimming_RF == 1) {
 20140  097C  0008               	return
 20141  097D                     i1l858:	
 20142  097D  1F3C               	btfss	_DimmerIntr1^(0+128),6
 20143  097E  0008               	return
 20144                           
 20145                           ;Dimmer_B1.c: 1471: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20146  097F  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 20147  0980  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20148  0981  1803               	skipnc
 20149  0982  2988               	goto	i1l7394
 20150                           
 20151                           ;Dimmer_B1.c: 1472: DimmerIntr1.DimmingValue++;
 20152  0983  3001               	movlw	1
 20153  0984  00F0               	movwf	??_DimmerLights_TMR_1
 20154  0985  0870               	movf	??_DimmerLights_TMR_1,w
 20155  0986  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20156                           
 20157                           ;Dimmer_B1.c: 1473: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20158  0987  0008               	return
 20159  0988                     i1l7394:	
 20160  0988  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20161  0989  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 20162  098A  1803               	skipnc
 20163  098B  298F               	goto	i1l869
 20164                           
 20165                           ;Dimmer_B1.c: 1474: DimmerIntr1.DimmingValue--;
 20166  098C  3001               	movlw	1
 20167  098D  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20168                           
 20169                           ;Dimmer_B1.c: 1475: } else {
 20170  098E  0008               	return
 20171  098F                     i1l869:	
 20172                           
 20173                           ;Dimmer_B1.c: 1476: DimmerIntr1.Dimming_RF = 0;
 20174  098F  133C               	bcf	_DimmerIntr1^(0+128),6
 20175  0990  0008               	return
 20176  0991                     __end_of_DimmerLights_TMR_1:	
 20177                           
 20178                           	psect	text146
 20179  1AA7                     __ptext146:	
 20180 ;; *************** function _IOC_ISR *****************
 20181 ;; Defined at:
 20182 ;;		line 395 in file "../src/MCU_B1.c"
 20183 ;; Parameters:    Size  Location     Type
 20184 ;;		None
 20185 ;; Auto vars:     Size  Location     Type
 20186 ;;		None
 20187 ;; Return value:  Size  Location     Type
 20188 ;;		None               void
 20189 ;; Registers used:
 20190 ;;		wreg, status,2, status,0, pclath, cstack
 20191 ;; Tracked objects:
 20192 ;;		On entry : 0/0
 20193 ;;		On exit  : 0/0
 20194 ;;		Unchanged: 0/0
 20195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20200 ;;Total ram usage:        0 bytes
 20201 ;; Hardware stack levels used:    1
 20202 ;; Hardware stack levels required when called:    3
 20203 ;; This function calls:
 20204 ;;		_DimmerLights_IOC_1
 20205 ;; This function is called by:
 20206 ;;		_ISR
 20207 ;; This function uses a non-reentrant model
 20208 ;;
 20209                           
 20210                           
 20211                           ;psect for function _IOC_ISR
 20212  1AA7                     _IOC_ISR:	
 20213                           
 20214                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20215                           
 20216                           ;incstack = 0
 20217                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20218  1AA7  0021               	movlb	1	; select bank1
 20219  1AA8  1C2F               	btfss	_myMain^(0+128),0
 20220  1AA9  2AAC               	goto	i1l7920
 20221                           
 20222                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20223  1AAA  3192  2273         	fcall	_DimmerLights_IOC_1
 20224  1AAC                     i1l7920:	
 20225                           
 20226                           ;MCU_B1.c: 416: }
 20227                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20228  1AAC  0027               	movlb	7	; select bank7
 20229  1AAD  1116               	bcf	22,2	;volatile
 20230                           
 20231                           ;MCU_B1.c: 419: IOCIF = 0;
 20232  1AAE  100B               	bcf	11,0	;volatile
 20233  1AAF  0008               	return
 20234  1AB0                     __end_of_IOC_ISR:	
 20235                           
 20236                           	psect	text147
 20237  1273                     __ptext147:	
 20238 ;; *************** function _DimmerLights_IOC_1 *****************
 20239 ;; Defined at:
 20240 ;;		line 1485 in file "../src/Dimmer_B1.c"
 20241 ;; Parameters:    Size  Location     Type
 20242 ;;		None
 20243 ;; Auto vars:     Size  Location     Type
 20244 ;;		None
 20245 ;; Return value:  Size  Location     Type
 20246 ;;		None               void
 20247 ;; Registers used:
 20248 ;;		wreg, status,2, status,0, pclath, cstack
 20249 ;; Tracked objects:
 20250 ;;		On entry : 0/0
 20251 ;;		On exit  : 0/0
 20252 ;;		Unchanged: 0/0
 20253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20256 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20258 ;;Total ram usage:        2 bytes
 20259 ;; Hardware stack levels used:    1
 20260 ;; Hardware stack levels required when called:    2
 20261 ;; This function calls:
 20262 ;;		i1_Division
 20263 ;; This function is called by:
 20264 ;;		_IOC_ISR
 20265 ;; This function uses a non-reentrant model
 20266 ;;
 20267                           
 20268                           
 20269                           ;psect for function _DimmerLights_IOC_1
 20270  1273                     _DimmerLights_IOC_1:	
 20271                           
 20272                           ;Dimmer_B1.c: 1499: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20273                           
 20274                           ;incstack = 0
 20275                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20276  1273  0021               	movlb	1	; select bank1
 20277  1274  193C               	btfsc	_DimmerIntr1^(0+128),2
 20278  1275  0008               	return
 20279  1276  183C               	btfsc	_DimmerIntr1^(0+128),0
 20280  1277  0008               	return
 20281                           
 20282                           ;Dimmer_B1.c: 1501: if (RB2 != DimmerIntr1.Status) {
 20283  1278  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20284  1279  0C89               	rrf	9,f
 20285  127A  3901               	andlw	1
 20286  127B  00FA               	movwf	??_DimmerLights_IOC_1
 20287  127C  3000               	movlw	0
 20288  127D  0020               	movlb	0	; select bank0
 20289  127E  190D               	btfsc	13,2	;volatile
 20290  127F  3001               	movlw	1
 20291  1280  067A               	xorwf	??_DimmerLights_IOC_1,w
 20292  1281  1903               	skipnz
 20293  1282  0008               	return
 20294                           
 20295                           ;Dimmer_B1.c: 1504: DimmerIntr1.Count = 0;
 20296  1283  0021               	movlb	1	; select bank1
 20297  1284  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20298                           
 20299                           ;Dimmer_B1.c: 1505: DimmerIntr1.GO = 1;
 20300  1285  143C               	bsf	_DimmerIntr1^(0+128),0
 20301                           
 20302                           ;Dimmer_B1.c: 1507: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20303  1286  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20304  1287  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20305                           
 20306                           ;Dimmer_B1.c: 1508: DimmerIntr1.Tune = 1;
 20307  1288  14BC               	bsf	_DimmerIntr1^(0+128),1
 20308                           
 20309                           ;Dimmer_B1.c: 1509: }
 20310                           ;Dimmer_B1.c: 1511: if (DimmerIntr1.TuneGO == 1) {
 20311  1289  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20312  128A  2AA9               	goto	i1l7422
 20313                           
 20314                           ;Dimmer_B1.c: 1512: DimmerIntr1.TuneGO = 0;
 20315  128B  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20316                           
 20317                           ;Dimmer_B1.c: 1515: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20318  128C  3002               	movlw	2
 20319  128D  00FA               	movwf	??_DimmerLights_IOC_1
 20320  128E  087A               	movf	??_DimmerLights_IOC_1,w
 20321  128F  00F5               	movwf	i1Division@num
 20322  1290  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20323  1291  319B  2388  3192   	fcall	i1_Division
 20324  1294  00FB               	movwf	??_DimmerLights_IOC_1+1
 20325  1295  087B               	movf	??_DimmerLights_IOC_1+1,w
 20326  1296  0021               	movlb	1	; select bank1
 20327  1297  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20328                           
 20329                           ;Dimmer_B1.c: 1516: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20330  1298  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20331  1299  3AFF               	xorlw	255
 20332  129A  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20333  129B  3E3C               	addlw	60
 20334  129C  00FA               	movwf	??_DimmerLights_IOC_1
 20335  129D  087A               	movf	??_DimmerLights_IOC_1,w
 20336  129E  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20337                           
 20338                           ;Dimmer_B1.c: 1517: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20339  129F  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20340  12A0  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20341  12A1  00FA               	movwf	??_DimmerLights_IOC_1
 20342  12A2  087A               	movf	??_DimmerLights_IOC_1,w
 20343  12A3  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20344                           
 20345                           ;Dimmer_B1.c: 1518: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20346  12A4  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20347  12A5  3E01               	addlw	1
 20348  12A6  00FA               	movwf	??_DimmerLights_IOC_1
 20349  12A7  087A               	movf	??_DimmerLights_IOC_1,w
 20350  12A8  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20351  12A9                     i1l7422:	
 20352                           
 20353                           ;Dimmer_B1.c: 1519: }
 20354                           ;Dimmer_B1.c: 1525: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20355  12A9  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20356  12AA  0020               	movlb	0	; select bank0
 20357  12AB  1D0D               	btfss	13,2	;volatile
 20358  12AC  0008               	return
 20359  12AD  0021               	movlb	1	; select bank1
 20360  12AE  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20361  12AF  0008               	return
 20362  12B0                     __end_of_DimmerLights_IOC_1:	
 20363                           
 20364                           	psect	text148
 20365  1B88                     __ptext148:	
 20366 ;; *************** function i1_Division *****************
 20367 ;; Defined at:
 20368 ;;		line 1385 in file "../src/Dimmer_B1.c"
 20369 ;; Parameters:    Size  Location     Type
 20370 ;;  value           1    wreg     unsigned char 
 20371 ;;  num             1    5[COMMON] unsigned char 
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;  value           1    8[COMMON] unsigned char 
 20374 ;;  Division        1    9[COMMON] unsigned char 
 20375 ;; Return value:  Size  Location     Type
 20376 ;;                  1    wreg      unsigned char 
 20377 ;; Registers used:
 20378 ;;		wreg, status,2, status,0, pclath, cstack
 20379 ;; Tracked objects:
 20380 ;;		On entry : 0/0
 20381 ;;		On exit  : 0/0
 20382 ;;		Unchanged: 0/0
 20383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20384 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20387 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20388 ;;Total ram usage:        5 bytes
 20389 ;; Hardware stack levels used:    1
 20390 ;; Hardware stack levels required when called:    1
 20391 ;; This function calls:
 20392 ;;		i1___lbdiv
 20393 ;; This function is called by:
 20394 ;;		_DimmerLights_IOC_1
 20395 ;; This function uses a non-reentrant model
 20396 ;;
 20397                           
 20398                           
 20399                           ;psect for function i1_Division
 20400  1B88                     i1_Division:	
 20401                           
 20402                           ;incstack = 0
 20403                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20404                           ;i1Division@value stored from wreg
 20405  1B88  00F8               	movwf	i1Division@value
 20406                           
 20407                           ;Dimmer_B1.c: 1386: char result = (char) (value / num);
 20408  1B89  0875               	movf	i1Division@num,w
 20409  1B8A  00F6               	movwf	??i1_Division
 20410  1B8B  0876               	movf	??i1_Division,w
 20411  1B8C  00F0               	movwf	i1___lbdiv@divisor
 20412  1B8D  0878               	movf	i1Division@value,w
 20413  1B8E  319F  2753         	fcall	i1___lbdiv
 20414  1B90  00F7               	movwf	??i1_Division+1
 20415  1B91  0877               	movf	??i1_Division+1,w
 20416  1B92  00F9               	movwf	i1Division@result
 20417                           
 20418                           ;Dimmer_B1.c: 1387: return result;
 20419  1B93  0879               	movf	i1Division@result,w
 20420  1B94  0008               	return
 20421  1B95                     __end_ofi1_Division:	
 20422                           
 20423                           	psect	text149
 20424  1F53                     __ptext149:	
 20425 ;; *************** function i1___lbdiv *****************
 20426 ;; Defined at:
 20427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20428 ;; Parameters:    Size  Location     Type
 20429 ;;  dividend        1    wreg     unsigned char 
 20430 ;;  divisor         1    0[COMMON] unsigned char 
 20431 ;; Auto vars:     Size  Location     Type
 20432 ;;  dividend        1    2[COMMON] unsigned char 
 20433 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20434 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20435 ;; Return value:  Size  Location     Type
 20436 ;;                  1    wreg      unsigned char 
 20437 ;; Registers used:
 20438 ;;		wreg, status,2, status,0
 20439 ;; Tracked objects:
 20440 ;;		On entry : 0/0
 20441 ;;		On exit  : 0/0
 20442 ;;		Unchanged: 0/0
 20443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20444 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20445 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20447 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20448 ;;Total ram usage:        5 bytes
 20449 ;; Hardware stack levels used:    1
 20450 ;; This function calls:
 20451 ;;		Nothing
 20452 ;; This function is called by:
 20453 ;;		i1_Division
 20454 ;; This function uses a non-reentrant model
 20455 ;;
 20456                           
 20457                           
 20458                           ;psect for function i1___lbdiv
 20459  1F53                     i1___lbdiv:	
 20460                           
 20461                           ;incstack = 0
 20462                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20463                           ;i1___lbdiv@dividend stored from wreg
 20464  1F53  00F2               	movwf	i1___lbdiv@dividend
 20465  1F54  01F4               	clrf	i1___lbdiv@quotient
 20466  1F55  0870               	movf	i1___lbdiv@divisor,w
 20467  1F56  1903               	btfsc	3,2
 20468  1F57  2F72               	goto	i1l6786
 20469  1F58  01F3               	clrf	i1___lbdiv@counter
 20470  1F59  0AF3               	incf	i1___lbdiv@counter,f
 20471  1F5A                     i1l6774:	
 20472  1F5A  1BF0               	btfsc	i1___lbdiv@divisor,7
 20473  1F5B  2F63               	goto	i1l6776
 20474  1F5C  1003               	clrc
 20475  1F5D  0DF0               	rlf	i1___lbdiv@divisor,f
 20476  1F5E  3001               	movlw	1
 20477  1F5F  00F1               	movwf	??i1___lbdiv
 20478  1F60  0871               	movf	??i1___lbdiv,w
 20479  1F61  07F3               	addwf	i1___lbdiv@counter,f
 20480  1F62  2F5A               	goto	i1l6774
 20481  1F63                     i1l6776:	
 20482  1F63  1003               	clrc
 20483  1F64  0DF4               	rlf	i1___lbdiv@quotient,f
 20484  1F65  0870               	movf	i1___lbdiv@divisor,w
 20485  1F66  0272               	subwf	i1___lbdiv@dividend,w
 20486  1F67  1C03               	skipc
 20487  1F68  2F6D               	goto	L11
 20488  1F69  0870               	movf	i1___lbdiv@divisor,w
 20489  1F6A  02F2               	subwf	i1___lbdiv@dividend,f
 20490  1F6B  1474               	bsf	i1___lbdiv@quotient,0
 20491  1F6C  1003               	clrc
 20492  1F6D                     L11:	
 20493  1F6D  0CF0               	rrf	i1___lbdiv@divisor,f
 20494  1F6E  3001               	movlw	1
 20495  1F6F  02F3               	subwf	i1___lbdiv@counter,f
 20496  1F70  1D03               	btfss	3,2
 20497  1F71  2F63               	goto	i1l6776
 20498  1F72                     i1l6786:	
 20499  1F72  0874               	movf	i1___lbdiv@quotient,w
 20500  1F73  0008               	return
 20501  1F74                     __end_ofi1___lbdiv:	
 20502  007E                     btemp	set	126	;btemp
 20503  007E                     pic14e$flags	set	126
 20504  007E                     wtemp	set	126
 20505  007E                     wtemp0	set	126
 20506  0080                     wtemp1	set	128
 20507  0082                     wtemp2	set	130
 20508  0084                     wtemp3	set	132
 20509  0086                     wtemp4	set	134
 20510  0088                     wtemp5	set	136
 20511  007F                     wtemp6	set	127
 20512  007E                     ttemp	set	126
 20513  007E                     ttemp0	set	126
 20514  0081                     ttemp1	set	129
 20515  0084                     ttemp2	set	132
 20516  0087                     ttemp3	set	135
 20517  007F                     ttemp4	set	127
 20518  007E                     ltemp	set	126
 20519  007E                     ltemp0	set	126
 20520  0082                     ltemp1	set	130
 20521  0086                     ltemp2	set	134
 20522  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      76
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  148574
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5815
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5815
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3386
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3386
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44121
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44121
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   39547
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35171
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0     157
                                              4 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10014
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20428
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2892
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48427
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48219
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27715
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     311
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20233
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     311
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4458
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4458
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1501
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Mar 13 16:21:30 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1DDF                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 1456  
                                      l96 1374                                        l88 146A  
                                      l97 1370                                        l98 135E  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FDB  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D2                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1ACC  
                  __end_of_setDelayOff_GO 0C95                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 172A  
                    _setDimmerLights_Line 1BE3                              ___ftadd@sign 004B  
                                     l100 136E                                       l303 1DEB  
                                     l304 1DED                                       l235 088A  
                    _setDimmerLights_SwOn 115C                                       l531 091A  
                                     l347 101F                                       l760 1E78  
                                     l691 1BB1                                       l678 14FC  
                                     l787 0FBF                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1DF8                     _Buzzer_Initialization 1A23  
                         __end_of_ADC_Set 1A88                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1DAE               _setDimmerIntr_ControlStatus 1D96  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1AB0  
                   _setDimmerLights_OnOff 0F3A          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2212 0A7B                                      l2140 0550  
                                    l1263 10BA                                      l2231 111C  
                                    l2144 049F                                      l1505 0628  
                                    l1273 0B7A                                      l1249 132B  
                                    l2145 04F0                                      l1514 1DDE  
                                    l2170 1BB8                                      l1450 1271  
                                    l1630 0087                                      l1631 0082  
                                    l1473 10D7                                      l2185 15F9  
                                    l1474 10F2                                      l1627 01FF  
                                    l2531 024D                                      l1637 01DB  
                                    l1629 008B                           __end_of_IOC_Set 1AED  
                                    l2509 1D5C                                      l1805 064B  
                                    l1478 10EE                                      l1638 01D9  
                                    l2198 1158                                      l2713 1EC0  
                                    l2529 0381                                      l2903 0428  
                                    l6200 1183                                      l6008 0467  
                                    l6024 0D4F                                      l6202 1188  
                                    l6018 0D39                                      l6060 0DE2  
                                    l6214 122C                                      l6046 0DA9  
                                    l6038 0D90                                      l6118 0B9B  
                                    l1799 06F8                                      l2880 1580  
                                    l6152 0C00                                      l6144 0BE6  
                                    l6136 0BCB                                      l7200 11DC  
                                    l2874 1569                                      l6090 0E4F  
                                    l6082 0E3B                                      l6066 0DF8  
                                    l6146 0BEF                                      l6138 0BD9  
                                    l6250 0C8B                                      l7210 11F7  
                                    l6148 0BF2                                      l6420 1DD8  
                                    l6236 0C47                                      l7300 1788  
                                    l7060 10A2                                      l7116 1C32  
                                    l6094 0E57                                      l6078 0E33  
                                    l6246 0C77                                      l7310 1AD4  
                                    l7206 11EE                                      l8030 09D7  
                                    l6416 1DC9                                      l8200 018F  
                                    l7152 15CE                                      l7136 15AD  
                          _Load_Main$3987 002A                                      l5810 1550  
                                    l8210 01AB                                      l6442 12E3  
                                    l8026 09CF                                      l8018 09B0  
                                    l5820 1576                                      l5812 1555  
                                    l5804 153F                                      l8220 01C1  
                                    l8204 019B                                      l8124 0069  
                                    l7148 15C5                                      l7500 1F26  
                   _setDimmerLights_SwOff 11FE                                      l6286 1714  
                                    l8142 008A                                      l6382 1030  
                                    l6454 0A93                                      l7182 1C43  
                                    l8046 09FE                                      l8070 0CF4  
                                    l8062 0CC6                                      l5808 1546  
                                    l6632 10D2                                      l8304 05B9  
                                    l7520 1C10                                      l7272 1CDA  
                                    l6384 103B                                      l7600 065D  
                                    l5818 156E                                      l6642 10E9  
                                    l6634 10DB                                      l5914 1C5E  
                                    l8322 05FB                                      l8306 0594  
                                    l6458 0A98                                      l6730 0A61  
                                    l6722 0A19                                      l7602 0660  
                                    l8074 0D0B                                      l8066 0CDD  
                                    l5844 1391                                      l8324 05D6  
                                    l8308 05C1                                      l7532 0B03  
                                    l8164 00E0                                      l6468 0AE8  
                                    l6732 0A65                                      l6724 0A20  
                                    l6716 0A04                                      l8092 1251  
                                    l5870 13C8                                      l5862 13B7  
                                    l5854 1399                                      l5838 1386  
                                    l6750 1F85                                      l5918 1C64  
                                    l6662 07D5                                      l7286 1752  
                                    l8326 0603                                      l8334 061E  
                                    l7198 11D0                                      l8190 0163  
                                    l8158 00AE                                      l6726 0A3B  
                                    l5856 13A5                                      l6760 1F94  
                                    l5936 1FA1                                      l5952 03B8  
                                    l7288 1759                                      l8328 060D  
                                    l8256 01EE                                      l6728 0A5D  
                                    l6736 0A69                                      l7632 06CF  
                                    l5866 13C0                                      l5970 03E1  
                                    l6690 1C59                                      l7298 1781  
                                    l7546 0B73                                      l7538 0B18  
                                    l8530 100C                                      l8610 082A  
                                    l7642 06E4                                      l6748 1F7C  
                                    l5980 0403                                      l5948 03B1  
                                    l6924 1D79                                      l6684 1C4D  
                                    l6676 07F4                                      l6668 07DE  
                                    l8292 0582                                      l8196 0172  
                                    l8620 083A                                      l8700 0893  
                                    l7644 06E6                                      l5990 0424  
                                    l5982 0407                                      l5958 03C7  
                                    l8286 0572                                      l8534 1012  
                                    l8614 0830                                      l7742 1D67  
                                    l7806 0329                                      l7494 1F1E  
                                    l5976 03F4                                      l6688 1C54  
                                    l8296 0591                                      l8528 1009  
                                    l8624 0840                                      l8608 0827  
                                    l8552 1EAA                                      l8712 08A6  
                                    l8704 0899                                      l7496 1F21  
                                    l5994 043A                                      l5978 03FE  
                                    l6946 0F81                                      l6954 0F9F  
                                    l8562 1FC1                                      l8618 0837  
                                    l8554 1EB0                                      l8730 17A8  
                                    l8706 089D                                      l7738 1D61  
                                    l7594 064E                                      l5988 041A  
                                    l6948 0F98                                      l7836 1EBA  
                                    l8564 1FC4                                      l8580 1FE5  
                                    l8732 17AB                                      l8708 08A0  
                                    l7772 0280                                      l7756 0237  
                                    l8900 14A2                     _myMain_Initialization 1CEF  
                                    l5998 044C                                      l6990 13E8  
                                    l8582 1FE8                                      l8822 04FF  
                                    l7782 02B5                                      l7856 1348  
                                    l6984 0FFD                                      l6968 0FCE  
                                    l8568 1FCA                                      l8752 17C3  
                                    l8736 17B1                                      l8680 085F  
                                    l8808 04EB                                      l8904 14AD  
                                    l7938 077E                                      l8586 1FEE  
                                    l8754 17DC                                      l8674 0856  
                                    l8850 0549                                      l7892 1E7A  
                                    l7964 130A                                      l8676 0859  
                                    l8836 0531                                      l7796 02F5  
                                    l8694 0871                                      _CFGS 0CAE  
                                    l8698 0890                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5105 0E58                                      u5115 0E5E  
                                    u5035 0E04                                      u5045 0E14  
                                    u5215 0BE7                                      u4425 154B  
                                    u5065 0E3C                                      u5410 16CF  
                                    u5075 0E42                                      u5155 0BA2  
                                    _PEIE 005E                                      u4445 1564  
                                    u5415 16CD                                      u4545 139C  
                                    u4465 1571                                      u5185 0BCC  
                                    u5515 1025                                      u6315 1D4F  
                                    u4565 13A6                                      u4575 13B0  
                                    u4495 1587                                      u5375 0C53  
                                    u4585 13B8                                      u4825 03F5  
                                    u6345 1E53                                      u8035 09BF  
                                    u7325 06A1                                      u4855 0408  
                                    u6615 11D3                                      u8135 0CB9  
                                    u8215 1269                                      u7345 06B8  
                                    u8145 0CD0                                      u4795 03E2  
                                    u4955 0D61                                      u6635 11DD  
                                    u8155 0CE7                                      u4885 041B  
                                    u4965 0D71                                      u6645 11E7  
                                    u7365 06D6                                      u8085 09EE  
                                    u8165 0CFE                                      u4975 0D91  
                                    u6655 11EF                                      u9215 04C3  
                                    u8175 0D15                                      u4985 0DA0  
                                    u4995 0DAA                                      u8355 00AC  
                                    u8620 0601                                      u8365 00DE  
                                    u9245 0520                                      u7735 1EC1  
                                    u8455 01A2                                      u8375 0122  
                                    u8625 05DF                                      u7745 1EC6  
                                    u8590 05BF                                      u7775 133E  
                                    u8595 059D                                      u7975 1322  
                                    u8795 1D25                                      _LWLO 0CAD  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1E47  
              _setDimmerLights_DimmingRun 1E2C                                      _Buz1 0120  
                                    _Load 0138                                      _Temp 00D8  
                                    _main 147E                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0921                           __end_of_RF_Main 1A2F  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B70                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0AFC                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2283 0023  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007C  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
       setDimmerLights_DimmingRun@command 0022   __end_of_getDimmerLights_Allow_Condition 1D80  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1D6A  
                  _getDimmerLights_Status 1BD2                        ??_getDimmer_LoadGO 0020  
                        __end_of_LED_Main 1A45                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00EA  
                         __end_of___awdiv 13CF                           __end_of___lbdiv 1F96  
                         __end_of___ftadd 047F                           __end_of___ftdiv 0DCB  
                         __end_of___ftneg 1AB9                           __end_of___ftmul 0E7F  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0C09                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 11FE                                     i1l860 0972  
                                   i1l852 0957                                     i1l844 0946  
                                   i1l863 097B                                     i1l858 097D  
                                   i1l869 098F                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D55  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 16C5  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1660  
                                   _Light 00CE                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1EF4                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1B64                                     _getAD 1F13  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1CA3               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1AE2  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1C7F  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 1C05  
                      _setRF_DimmerLights 16C5                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0067               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1BA4                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14D9                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1A49            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1BC2  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A03                            _setMemory_Data 1B40  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13CF                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1AC2                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1D16                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08B2  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1A9F  
                               ??_WDT_Set 0020                          __end_of___awtoft 1FB8  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1597  
                _getMain_All_Error_Status 10C1                                    _IOCBF2 1CB2  
                                  i1l1212 001A                                    i1l7422 12A9  
                                  i1l7342 0935                                    i1l7336 092E  
                                  i1l7348 093D                                    i1l8420 0012  
                                  i1l7394 0988                                    i1l7386 0974  
                                  i1l6774 1F5A                                    i1l7910 1EED  
                                  i1l6776 1F63                                    i1l7920 1AAC  
                                  i1l6786 1F72                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E12  
                                  u787_25 1EE8                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 1A6E     __size_of_setDimmerLights_DimmingClose 0006  
            _setDimmerLights_DimmingClose 1A68                      Exception_Main@i_3624 0032  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D40                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 10F4  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C5B                __end_of_Mcu_Initialization 1C91  
                     __end_of_Buzzer_Main 137B                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1C5B                    __end_of_Exception_Main 0629  
                    Exception_Main@lights 0035                                    ___wmul 1EB7  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D6                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CDC  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1CC9                                    _s_data 00D7  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 07C6  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1B4C                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1425  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1A29          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1DC6          __end_of_setDimmerIntr_Dimming_Sw 1D96  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1F74  
               _setDimmerLights_DimmingOn 1040                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CEF  
             getMain_Lights_Count@status1 0021               __size_of_DimmerLights_IOC_1 003D  
                   __end_of_SwPointSelect 1B88               __size_of_DimmerLights_TMR_1 0070  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1D55  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5410 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK3 1F33  
                           __end_of_getAD 1F33                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1A3D  
                         _getSw_KeyStatus 1C38                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1AD7  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1B1C                __end_of_set_TimeoutCleared 1A62  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1B10                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1A2F                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1331                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1A35  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1A35                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CC  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 147E                            _getDelayOff_GO 1BF4  
                     _CC2500_WriteCommand 1000                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1536             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0991  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1A8F  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1A81                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0C95        __end_of_DimmerLights_SelectPointer 1B10  
              _DimmerLights_SelectPointer 1B04                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1AF8                        _setRFSW_AdjControl 0A7C  
                  __end_of_setProductData 1B1C             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1AA7                                   _IOC_Set 1AE2  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 12F0  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1DF8  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1A2C                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1B64           __end_of_setControl_Lights_Table 0A7C  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1425                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B7C  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1C27                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1C05  
          __end_of_getDimmerLights_Status 1BE3                         __end_of_getRxData 15FB  
                 __end_of_getSw_KeyStatus 1C49                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 137B  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1F74  
                                 ___ftadd 0389                                   ___ftdiv 0D22  
                                 ___ftneg 1AB0                           __size_of___wmul 001E  
                                 ___ftmul 0DCB                                   ___fttol 0B82  
                     __end_of_Switch_Main 1A8F                        __end_ofi1_Division 1B95  
                                 ___lwdiv 11C7                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1C27  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 1237  
                                 __ptext2 1CEF                                   __ptext3 0C95  
                                 __ptext4 0991                                   __ptext5 1F13  
                                 __ptext6 1C91                                   __ptext7 0002  
                                 __ptext8 1A32                                   __ptext9 0629  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 1331                 __end_of_Flash_Memory_Read 1E12  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 047F  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1A39  
                __end_of_setRF_AdjControl 1128                         _DimmerLights_Main 1E62  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1A68  
              __end_of_CC2500_ClearRXFIFO 1A51                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1A55                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1B34                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1AF8  
                                 clrloop0 1A75            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1A5D                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1068  
                           _DelayTime_1us 101A                         __end_of_setTxData 0F3A  
              __end_of_Flash_Memory_Write 10C1        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1A6E                __end_of_setRF_TransceiveGO 1CC9  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1A6F  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1FDB  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C6D  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 1795  
                           _CC2500_TxData 0846                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0AFC                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1DC6  
                     _Flash_Memory_Unlock 1AB9                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1E7E                        _Mcu_Initialization 1C7F  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 1A4D                      __end_of_my_MainTimer 1273  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B40                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F53  
               __end_of_CC2500_InitSetREG 1092                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 2000  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1068                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E2C  
                    _setRF_Initialization 1AED                        _setMemory_LoopSave 1CDC  
                             _Switch_Main 1A88                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C38  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D2B               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1C16  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C6D       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1ED5  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 07FF  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 147E  
              __end_of_DimmerLights_IOC_1 12B0                      _CC2500_FrequencyCabr 1B70  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 12B0                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0991                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A97                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1F13  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 06FC  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1660  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 15FB  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1A5D         __end_of_setDimmerIntr_MaxmumValue 1B28  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 008D  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A32                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1ACC                                 _Tx_Length 00D4  
                             __pdataBANK3 01CC                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 10F4  
                        _CC2500_SIDLEMode 1A55                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1CA3                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 14D9                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0160  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E9A                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 00E7               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A49                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C49  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1C16  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 07C6  
             _Flash_Memory_Initialization 06FC                                  ?___awdiv 0020  
                               __ptext100 1AC2                                 __ptext101 1BF4  
                                ?___lbdiv 0020                                 __ptext110 1BA4  
                               __ptext102 1C49                                 __ptext111 1D6A  
                               __ptext103 13CF                                 __ptext120 0B82  
                               __ptext112 1A8F                                 __ptext104 0E7F  
                               __ptext121 1AB0                                 __ptext113 10C1  
                               __ptext105 1CB6                                 __ptext130 08B2  
                               __ptext122 0DCB                                 __ptext114 1A7A  
                               __ptext106 16C5                                 __ptext131 1B10  
                               __ptext123 0D22                                 __ptext115 0801  
                               __ptext107 1BE3                                 __ptext140 1AF8  
                               __ptext132 115C                                 __ptext124 0389  
                               __ptext116 14D9                                 __ptext108 1B1C  
                               __ptext141 1331                                 __ptext133 1425  
                               __ptext125 1F96                                 __ptext117 1CA3  
                               __ptext109 1D80                                  ?___ftadd 0041  
                               __ptext142 1A23                                 __ptext134 137B  
                               __ptext126 1536                                 __ptext118 1660  
                               __ptext135 11FE                                 __ptext127 1B95  
                               __ptext119 15FB                                 __ptext144 1ED5  
                               __ptext136 1BD2                                 __ptext128 1F74  
                               __ptext145 0921                                 __ptext137 1B04  
                               __ptext129 1A39                                 __ptext146 1AA7  
                               __ptext138 1A35                                 __ptext147 1273  
                               __ptext139 1A62                                 __ptext148 1B88  
                               __ptext149 1F53                                 _getRxData 1597  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 12F0                          ??_setProductData 0063  
                 _setOverTemp_ADV_Restore 1E47             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1A26  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1D6A                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1BB3  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1BA4  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C6  
                       ?_setRF_AdjControl 0070                                 _r_address 00D5  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 1237  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1D02  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                        ??_setRF_AdjControl 0024  
                           _SwPointSelect 1B7C                       __end_of_setLED_Main 11C7  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1A32                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 1A41  
                         SwPointSelect@sw 0021                                 clear_ram0 1A74  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1237                                 _setTxData 0E7F  
     __end_of_DimmerLights_Initialization 1A81               _DimmerLights_Initialization 1A7A  
                  _Flash_Memory_Main$3152 0028                        _CC2500_ClearRXFIFO 1A4D  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1A51  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D16                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1092  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1ED5                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1B58                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1CB6  
                                _RF_Count 0134                      __end_of_RF_RxDisable 1BC2  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 101A  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C91  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00D3  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0031  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1B58                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 115C                     _DlyOff_Initialization 1A62  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 1B95                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1DAE  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1D80  
                                _Fosc_Set 1A45                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0A03  
                      __end_of_getLoad_OK 1A97                     _Switch_Initialization 1A59  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0D22                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1DDF  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 00D3  
                             ??_Temp_Main 006F                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 006F  
           _getMain_All_Error_Status$3612 0021             _getMain_All_Error_Status$3613 0023  
                __end_of_getDimmer_LoadGO 1A9F                       _Load_Initialization 1A26  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                 ??_setOverTemp_ADV_Restore 0020  
                            _setTemp_Main 0629                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F96  
                        ??_LedPointSelect 0020                                  ___ftpack 1536  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1191  
              __end_of_setRF_DimmerLights 172A            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1AA7  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1E47                                  __ptext11 1A2F  
                                __ptext20 1A5D                                  __ptext12 07FF  
                                __ptext21 1D40                                  __ptext13 1A88  
                                __ptext30 10F4                                  __ptext22 1A59  
                                __ptext14 0205                                  __ptext31 12B0  
                                __ptext23 1BC2                                  __ptext15 1D02  
                                __ptext40 1E9A                                  __ptext32 0A7C  
                                __ptext24 1A2C                                  __ptext16 1040  
                                __ptext41 1D2B                                  __ptext33 1E2C  
                                __ptext25 047F                                  __ptext17 1C38  
                                __ptext50 1A4D                                  __ptext42 1A55  
                                __ptext34 1C27                                  __ptext26 1597  
                                __ptext18 1B7C                                  __ptext51 1000  
                                __ptext43 0802                                  __ptext35 1C16  
                                __ptext27 1128                                  __ptext19 1D55  
                                __ptext60 1E12                                  __ptext52 1A49  
                                __ptext44 1068                                  __ptext36 1BB3  
                                __ptext28 1CDC                                  __ptext61 1AE2  
                                __ptext53 1D16                                  __ptext45 1EF4  
                                __ptext37 0846                                  __ptext29 0A03  
                                __ptext70 11C7                                  __ptext62 1A45  
                                __ptext54 1DDF                                  __ptext46 1FB8  
                                __ptext38 1795                                  __ptext71 1A26  
                                __ptext63 1A81                                  __ptext55 1A29  
                                __ptext47 1B70                                  __ptext39 1FDB  
                                __ptext80 1B4C                                  __ptext72 1E7E  
                                __ptext64 0053                                  __ptext56 1AED  
                                __ptext48 101A                                  __ptext81 06FC  
                                __ptext73 1A41                                  __ptext65 1AD7  
                                __ptext57 1C7F                                  __ptext49 1A51  
                                __ptext90 0F3A                                  __ptext82 1B40  
                                __ptext74 1191                                  __ptext66 1A9F  
                                __ptext58 1B64                                  __ptext91 07C6  
                                __ptext83 1092                                  __ptext75 1A3D  
                                __ptext67 1A97                                  __ptext59 1B58  
                                __ptext92 1B34                                  __ptext84 1AB9  
                                __ptext76 1C6D                                  __ptext68 1CC9  
                                __ptext93 1A68                                  __ptext85 1DF8  
                                __ptext77 12F0                                  __ptext69 1EB7  
                                __ptext94 1DAE                                  __ptext86 0554  
                                __ptext78 1C05                                  __ptext95 1B28  
                                __ptext87 1ACC                                  __ptext79 0AFC  
                                __ptext96 1D96                                  __ptext88 1E62  
                                __ptext97 0C09                                  __ptext89 172A  
                                __ptext98 1C5B                                  __ptext99 1DC6  
                                __product 01CC                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1AD7  
            __end_of_setDimmerLights_Main 1795              __end_of_setDimmerLights_Line 1BF4  
                      _DimmerLights_IOC_1 1273              __end_of_setDimmerLights_SwOn 1191  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1D02  
      __size_of_DimmerIntr_Initialization 005D                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0921                  __end_of_CC2500_SIDLEMode 1A59  
              setDimmerLights_Main@lights 00E7               __end_of_DelayOffPointSelect 1B04  
                setOverTemp_ADV_Restore@i 0021                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1E9A                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1EF4                  __end_of_setMemory_Modify 1CB6  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 0554  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1D2B               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6467 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6464 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 0802                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1B34  
              _setDimmerIntr_DimmingValue 1B28               __end_of_Flash_Memory_Modify 0B82  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1128  
             __end_of_Flash_Memory_Unlock 1AC2                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1FB8                        __end_of_setSw_Main 0389  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1E62                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 0802   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0801                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A29  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B4C  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A39                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A3D                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C09  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1B88  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1040  
                 __end_of_CC2500_ReadByte 1EB7              __end_of_setSw_Initialization 1BD2  
                         _Timeout_Counter 1D40           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1BB3  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1A41  
          __end_of_setTemp_Initialization 0800                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A2C  
               __size_of_setRF_AdjControl 0034                     __end_of_CC2500_RxData 1800  
                   __end_of_CC2500_TxData 08B2                     _setLoad_AH_AL_Restore 1E7E  
                 __end_of_CC2500_PowerRST 0846  
