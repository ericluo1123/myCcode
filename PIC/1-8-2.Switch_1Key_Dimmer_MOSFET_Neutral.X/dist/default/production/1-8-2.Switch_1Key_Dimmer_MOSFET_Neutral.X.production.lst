

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Jan 07 09:49:47 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	dabs	1,0x7E,2
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0197                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0FE4                     	;# 
   264  0FE5                     	;# 
   265  0FE6                     	;# 
   266  0FE7                     	;# 
   267  0FE8                     	;# 
   268  0FE9                     	;# 
   269  0FEA                     	;# 
   270  0FEB                     	;# 
   271  0FED                     	;# 
   272  0FEE                     	;# 
   273  0FEF                     	;# 
   274  0000                     	;# 
   275  0001                     	;# 
   276  0002                     	;# 
   277  0003                     	;# 
   278  0004                     	;# 
   279  0005                     	;# 
   280  0006                     	;# 
   281  0007                     	;# 
   282  0008                     	;# 
   283  0009                     	;# 
   284  000A                     	;# 
   285  000B                     	;# 
   286  000C                     	;# 
   287  000D                     	;# 
   288  000E                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  011D                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0191                     	;# 
   327  0191                     	;# 
   328  0192                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0197                     	;# 
   335  0199                     	;# 
   336  019A                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  020D                     	;# 
   347  0210                     	;# 
   348  0211                     	;# 
   349  0211                     	;# 
   350  0212                     	;# 
   351  0212                     	;# 
   352  0213                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0214                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0216                     	;# 
   361  0217                     	;# 
   362  0217                     	;# 
   363  0291                     	;# 
   364  0291                     	;# 
   365  0292                     	;# 
   366  0293                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  018E                     	;# 
   437  0191                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0197                     	;# 
   446  0199                     	;# 
   447  019A                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019C                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019F                     	;# 
   457  020D                     	;# 
   458  0210                     	;# 
   459  0211                     	;# 
   460  0211                     	;# 
   461  0212                     	;# 
   462  0212                     	;# 
   463  0213                     	;# 
   464  0213                     	;# 
   465  0214                     	;# 
   466  0214                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0216                     	;# 
   471  0216                     	;# 
   472  0217                     	;# 
   473  0217                     	;# 
   474  0291                     	;# 
   475  0291                     	;# 
   476  0292                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0194                     	;# 
   554  0195                     	;# 
   555  0196                     	;# 
   556  0197                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0298                     	;# 
   590  0298                     	;# 
   591  0299                     	;# 
   592  029A                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000D                     	;# 
   621  000E                     	;# 
   622  0010                     	;# 
   623  0011                     	;# 
   624  0012                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  0090                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0095                     	;# 
   641  0096                     	;# 
   642  0097                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  011D                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0211                     	;# 
   683  0212                     	;# 
   684  0212                     	;# 
   685  0213                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0214                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  0394                     	;# 
   705  0395                     	;# 
   706  0396                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000D                     	;# 
   732  000E                     	;# 
   733  0010                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0090                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0116                     	;# 
   765  0117                     	;# 
   766  011D                     	;# 
   767  018C                     	;# 
   768  018D                     	;# 
   769  018E                     	;# 
   770  0191                     	;# 
   771  0191                     	;# 
   772  0192                     	;# 
   773  0193                     	;# 
   774  0193                     	;# 
   775  0194                     	;# 
   776  0195                     	;# 
   777  0196                     	;# 
   778  0197                     	;# 
   779  0199                     	;# 
   780  019A                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019D                     	;# 
   788  019E                     	;# 
   789  019F                     	;# 
   790  020D                     	;# 
   791  0210                     	;# 
   792  0211                     	;# 
   793  0211                     	;# 
   794  0212                     	;# 
   795  0212                     	;# 
   796  0213                     	;# 
   797  0213                     	;# 
   798  0214                     	;# 
   799  0214                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0298                     	;# 
   812  0298                     	;# 
   813  0299                     	;# 
   814  029A                     	;# 
   815  0394                     	;# 
   816  0395                     	;# 
   817  0396                     	;# 
   818  0FE4                     	;# 
   819  0FE5                     	;# 
   820  0FE6                     	;# 
   821  0FE7                     	;# 
   822  0FE8                     	;# 
   823  0FE9                     	;# 
   824  0FEA                     	;# 
   825  0FEB                     	;# 
   826  0FED                     	;# 
   827  0FEE                     	;# 
   828  0FEF                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0008                     	;# 
   838  0009                     	;# 
   839  000A                     	;# 
   840  000B                     	;# 
   841  000C                     	;# 
   842  000D                     	;# 
   843  000E                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0095                     	;# 
   863  0096                     	;# 
   864  0097                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009B                     	;# 
   869  009C                     	;# 
   870  009D                     	;# 
   871  009E                     	;# 
   872  010C                     	;# 
   873  010D                     	;# 
   874  010E                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  011D                     	;# 
   878  018C                     	;# 
   879  018D                     	;# 
   880  018E                     	;# 
   881  0191                     	;# 
   882  0191                     	;# 
   883  0192                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  019A                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020D                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0216                     	;# 
   916  0217                     	;# 
   917  0217                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0298                     	;# 
   923  0298                     	;# 
   924  0299                     	;# 
   925  029A                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0197                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020D                     	;# 
  1013  0210                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0298                     	;# 
  1034  0298                     	;# 
  1035  0299                     	;# 
  1036  029A                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051  0000                     	;# 
  1052  0001                     	;# 
  1053  0002                     	;# 
  1054  0003                     	;# 
  1055  0004                     	;# 
  1056  0005                     	;# 
  1057  0006                     	;# 
  1058  0007                     	;# 
  1059  0008                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  0010                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0090                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  010E                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018D                     	;# 
  1102  018E                     	;# 
  1103  0191                     	;# 
  1104  0191                     	;# 
  1105  0192                     	;# 
  1106  0193                     	;# 
  1107  0193                     	;# 
  1108  0194                     	;# 
  1109  0195                     	;# 
  1110  0196                     	;# 
  1111  0197                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020D                     	;# 
  1124  0210                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  000E                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  008C                     	;# 
  1190  008D                     	;# 
  1191  008E                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0095                     	;# 
  1196  0096                     	;# 
  1197  0097                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  010E                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018D                     	;# 
  1213  018E                     	;# 
  1214  0191                     	;# 
  1215  0191                     	;# 
  1216  0192                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0197                     	;# 
  1223  0199                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019C                     	;# 
  1230  019C                     	;# 
  1231  019D                     	;# 
  1232  019E                     	;# 
  1233  019F                     	;# 
  1234  020D                     	;# 
  1235  0210                     	;# 
  1236  0211                     	;# 
  1237  0211                     	;# 
  1238  0212                     	;# 
  1239  0212                     	;# 
  1240  0213                     	;# 
  1241  0213                     	;# 
  1242  0214                     	;# 
  1243  0214                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0216                     	;# 
  1248  0216                     	;# 
  1249  0217                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0298                     	;# 
  1256  0298                     	;# 
  1257  0299                     	;# 
  1258  029A                     	;# 
  1259  0394                     	;# 
  1260  0395                     	;# 
  1261  0396                     	;# 
  1262  0FE4                     	;# 
  1263  0FE5                     	;# 
  1264  0FE6                     	;# 
  1265  0FE7                     	;# 
  1266  0FE8                     	;# 
  1267  0FE9                     	;# 
  1268  0FEA                     	;# 
  1269  0FEB                     	;# 
  1270  0FED                     	;# 
  1271  0FEE                     	;# 
  1272  0FEF                     	;# 
  1273  0000                     	;# 
  1274  0001                     	;# 
  1275  0002                     	;# 
  1276  0003                     	;# 
  1277  0004                     	;# 
  1278  0005                     	;# 
  1279  0006                     	;# 
  1280  0007                     	;# 
  1281  0008                     	;# 
  1282  0009                     	;# 
  1283  000A                     	;# 
  1284  000B                     	;# 
  1285  000C                     	;# 
  1286  000D                     	;# 
  1287  000E                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0116                     	;# 
  1320  0117                     	;# 
  1321  011D                     	;# 
  1322  018C                     	;# 
  1323  018D                     	;# 
  1324  018E                     	;# 
  1325  0191                     	;# 
  1326  0191                     	;# 
  1327  0192                     	;# 
  1328  0193                     	;# 
  1329  0193                     	;# 
  1330  0194                     	;# 
  1331  0195                     	;# 
  1332  0196                     	;# 
  1333  0197                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020D                     	;# 
  1346  0210                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0216                     	;# 
  1359  0216                     	;# 
  1360  0217                     	;# 
  1361  0217                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0298                     	;# 
  1367  0298                     	;# 
  1368  0299                     	;# 
  1369  029A                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384  0000                     	;# 
  1385  0001                     	;# 
  1386  0002                     	;# 
  1387  0003                     	;# 
  1388  0004                     	;# 
  1389  0005                     	;# 
  1390  0006                     	;# 
  1391  0007                     	;# 
  1392  0008                     	;# 
  1393  0009                     	;# 
  1394  000A                     	;# 
  1395  000B                     	;# 
  1396  000C                     	;# 
  1397  000D                     	;# 
  1398  000E                     	;# 
  1399  0010                     	;# 
  1400  0011                     	;# 
  1401  0012                     	;# 
  1402  0015                     	;# 
  1403  0016                     	;# 
  1404  0016                     	;# 
  1405  0017                     	;# 
  1406  0018                     	;# 
  1407  0019                     	;# 
  1408  001A                     	;# 
  1409  001B                     	;# 
  1410  001C                     	;# 
  1411  008C                     	;# 
  1412  008D                     	;# 
  1413  008E                     	;# 
  1414  0090                     	;# 
  1415  0091                     	;# 
  1416  0092                     	;# 
  1417  0095                     	;# 
  1418  0096                     	;# 
  1419  0097                     	;# 
  1420  0099                     	;# 
  1421  009A                     	;# 
  1422  009B                     	;# 
  1423  009B                     	;# 
  1424  009C                     	;# 
  1425  009D                     	;# 
  1426  009E                     	;# 
  1427  010C                     	;# 
  1428  010D                     	;# 
  1429  010E                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  011D                     	;# 
  1433  018C                     	;# 
  1434  018D                     	;# 
  1435  018E                     	;# 
  1436  0191                     	;# 
  1437  0191                     	;# 
  1438  0192                     	;# 
  1439  0193                     	;# 
  1440  0193                     	;# 
  1441  0194                     	;# 
  1442  0195                     	;# 
  1443  0196                     	;# 
  1444  0197                     	;# 
  1445  0199                     	;# 
  1446  019A                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019D                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  020D                     	;# 
  1457  0210                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0216                     	;# 
  1470  0216                     	;# 
  1471  0217                     	;# 
  1472  0217                     	;# 
  1473  0291                     	;# 
  1474  0291                     	;# 
  1475  0292                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  0394                     	;# 
  1482  0395                     	;# 
  1483  0396                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0090                     	;# 
  1526  0091                     	;# 
  1527  0092                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0197                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020D                     	;# 
  1568  0210                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  0394                     	;# 
  1593  0395                     	;# 
  1594  0396                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0015                     	;# 
  1625  0016                     	;# 
  1626  0016                     	;# 
  1627  0017                     	;# 
  1628  0018                     	;# 
  1629  0019                     	;# 
  1630  001A                     	;# 
  1631  001B                     	;# 
  1632  001C                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0092                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  010C                     	;# 
  1650  010D                     	;# 
  1651  010E                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  011D                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0191                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0193                     	;# 
  1662  0193                     	;# 
  1663  0194                     	;# 
  1664  0195                     	;# 
  1665  0196                     	;# 
  1666  0197                     	;# 
  1667  0199                     	;# 
  1668  019A                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020D                     	;# 
  1679  0210                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0291                     	;# 
  1696  0291                     	;# 
  1697  0292                     	;# 
  1698  0293                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0FE4                     	;# 
  1707  0FE5                     	;# 
  1708  0FE6                     	;# 
  1709  0FE7                     	;# 
  1710  0FE8                     	;# 
  1711  0FE9                     	;# 
  1712  0FEA                     	;# 
  1713  0FEB                     	;# 
  1714  0FED                     	;# 
  1715  0FEE                     	;# 
  1716  0FEF                     	;# 
  1717  0000                     	;# 
  1718  0001                     	;# 
  1719  0002                     	;# 
  1720  0003                     	;# 
  1721  0004                     	;# 
  1722  0005                     	;# 
  1723  0006                     	;# 
  1724  0007                     	;# 
  1725  0008                     	;# 
  1726  0009                     	;# 
  1727  000A                     	;# 
  1728  000B                     	;# 
  1729  000C                     	;# 
  1730  000D                     	;# 
  1731  000E                     	;# 
  1732  0010                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0015                     	;# 
  1736  0016                     	;# 
  1737  0016                     	;# 
  1738  0017                     	;# 
  1739  0018                     	;# 
  1740  0019                     	;# 
  1741  001A                     	;# 
  1742  001B                     	;# 
  1743  001C                     	;# 
  1744  008C                     	;# 
  1745  008D                     	;# 
  1746  008E                     	;# 
  1747  0090                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0099                     	;# 
  1754  009A                     	;# 
  1755  009B                     	;# 
  1756  009B                     	;# 
  1757  009C                     	;# 
  1758  009D                     	;# 
  1759  009E                     	;# 
  1760  010C                     	;# 
  1761  010D                     	;# 
  1762  010E                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018E                     	;# 
  1769  0191                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0197                     	;# 
  1778  0199                     	;# 
  1779  019A                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019C                     	;# 
  1785  019C                     	;# 
  1786  019D                     	;# 
  1787  019E                     	;# 
  1788  019F                     	;# 
  1789  020D                     	;# 
  1790  0210                     	;# 
  1791  0211                     	;# 
  1792  0211                     	;# 
  1793  0212                     	;# 
  1794  0212                     	;# 
  1795  0213                     	;# 
  1796  0213                     	;# 
  1797  0214                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0216                     	;# 
  1803  0216                     	;# 
  1804  0217                     	;# 
  1805  0217                     	;# 
  1806  0291                     	;# 
  1807  0291                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  001A                     	;# 
  1853  001B                     	;# 
  1854  001C                     	;# 
  1855  008C                     	;# 
  1856  008D                     	;# 
  1857  008E                     	;# 
  1858  0090                     	;# 
  1859  0091                     	;# 
  1860  0092                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0099                     	;# 
  1865  009A                     	;# 
  1866  009B                     	;# 
  1867  009B                     	;# 
  1868  009C                     	;# 
  1869  009D                     	;# 
  1870  009E                     	;# 
  1871  010C                     	;# 
  1872  010D                     	;# 
  1873  010E                     	;# 
  1874  0116                     	;# 
  1875  0117                     	;# 
  1876  011D                     	;# 
  1877  018C                     	;# 
  1878  018D                     	;# 
  1879  018E                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0194                     	;# 
  1886  0195                     	;# 
  1887  0196                     	;# 
  1888  0197                     	;# 
  1889  0199                     	;# 
  1890  019A                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019D                     	;# 
  1898  019E                     	;# 
  1899  019F                     	;# 
  1900  020D                     	;# 
  1901  0210                     	;# 
  1902  0211                     	;# 
  1903  0211                     	;# 
  1904  0212                     	;# 
  1905  0212                     	;# 
  1906  0213                     	;# 
  1907  0213                     	;# 
  1908  0214                     	;# 
  1909  0214                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0216                     	;# 
  1914  0216                     	;# 
  1915  0217                     	;# 
  1916  0217                     	;# 
  1917  0291                     	;# 
  1918  0291                     	;# 
  1919  0292                     	;# 
  1920  0293                     	;# 
  1921  0298                     	;# 
  1922  0298                     	;# 
  1923  0299                     	;# 
  1924  029A                     	;# 
  1925  0394                     	;# 
  1926  0395                     	;# 
  1927  0396                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  0010                     	;# 
  1955  0011                     	;# 
  1956  0012                     	;# 
  1957  0015                     	;# 
  1958  0016                     	;# 
  1959  0016                     	;# 
  1960  0017                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  008C                     	;# 
  1967  008D                     	;# 
  1968  008E                     	;# 
  1969  0090                     	;# 
  1970  0091                     	;# 
  1971  0092                     	;# 
  1972  0095                     	;# 
  1973  0096                     	;# 
  1974  0097                     	;# 
  1975  0099                     	;# 
  1976  009A                     	;# 
  1977  009B                     	;# 
  1978  009B                     	;# 
  1979  009C                     	;# 
  1980  009D                     	;# 
  1981  009E                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0116                     	;# 
  1986  0117                     	;# 
  1987  011D                     	;# 
  1988  018C                     	;# 
  1989  018D                     	;# 
  1990  018E                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  019A                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  020D                     	;# 
  2012  0210                     	;# 
  2013  0211                     	;# 
  2014  0211                     	;# 
  2015  0212                     	;# 
  2016  0212                     	;# 
  2017  0213                     	;# 
  2018  0213                     	;# 
  2019  0214                     	;# 
  2020  0214                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0298                     	;# 
  2033  0298                     	;# 
  2034  0299                     	;# 
  2035  029A                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050  0000                     	;# 
  2051  0001                     	;# 
  2052  0002                     	;# 
  2053  0003                     	;# 
  2054  0004                     	;# 
  2055  0005                     	;# 
  2056  0006                     	;# 
  2057  0007                     	;# 
  2058  0008                     	;# 
  2059  0009                     	;# 
  2060  000A                     	;# 
  2061  000B                     	;# 
  2062  000C                     	;# 
  2063  000D                     	;# 
  2064  000E                     	;# 
  2065  0010                     	;# 
  2066  0011                     	;# 
  2067  0012                     	;# 
  2068  0015                     	;# 
  2069  0016                     	;# 
  2070  0016                     	;# 
  2071  0017                     	;# 
  2072  0018                     	;# 
  2073  0019                     	;# 
  2074  001A                     	;# 
  2075  001B                     	;# 
  2076  001C                     	;# 
  2077  008C                     	;# 
  2078  008D                     	;# 
  2079  008E                     	;# 
  2080  0090                     	;# 
  2081  0091                     	;# 
  2082  0092                     	;# 
  2083  0095                     	;# 
  2084  0096                     	;# 
  2085  0097                     	;# 
  2086  0099                     	;# 
  2087  009A                     	;# 
  2088  009B                     	;# 
  2089  009B                     	;# 
  2090  009C                     	;# 
  2091  009D                     	;# 
  2092  009E                     	;# 
  2093  010C                     	;# 
  2094  010D                     	;# 
  2095  010E                     	;# 
  2096  0116                     	;# 
  2097  0117                     	;# 
  2098  011D                     	;# 
  2099  018C                     	;# 
  2100  018D                     	;# 
  2101  018E                     	;# 
  2102  0191                     	;# 
  2103  0191                     	;# 
  2104  0192                     	;# 
  2105  0193                     	;# 
  2106  0193                     	;# 
  2107  0194                     	;# 
  2108  0195                     	;# 
  2109  0196                     	;# 
  2110  0197                     	;# 
  2111  0199                     	;# 
  2112  019A                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019C                     	;# 
  2118  019C                     	;# 
  2119  019D                     	;# 
  2120  019E                     	;# 
  2121  019F                     	;# 
  2122  020D                     	;# 
  2123  0210                     	;# 
  2124  0211                     	;# 
  2125  0211                     	;# 
  2126  0212                     	;# 
  2127  0212                     	;# 
  2128  0213                     	;# 
  2129  0213                     	;# 
  2130  0214                     	;# 
  2131  0214                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0216                     	;# 
  2136  0216                     	;# 
  2137  0217                     	;# 
  2138  0217                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0298                     	;# 
  2144  0298                     	;# 
  2145  0299                     	;# 
  2146  029A                     	;# 
  2147  0394                     	;# 
  2148  0395                     	;# 
  2149  0396                     	;# 
  2150  0FE4                     	;# 
  2151  0FE5                     	;# 
  2152  0FE6                     	;# 
  2153  0FE7                     	;# 
  2154  0FE8                     	;# 
  2155  0FE9                     	;# 
  2156  0FEA                     	;# 
  2157  0FEB                     	;# 
  2158  0FED                     	;# 
  2159  0FEE                     	;# 
  2160  0FEF                     	;# 
  2161                           
  2162                           	psect	idataBANK4
  2163  11AC                     __pidataBANK4:	
  2164                           
  2165                           ;initializer for __product
  2166  11AC  3463               	retlw	99
  2167  11AD  3402               	retlw	2
  2168  11AE  3400               	retlw	0
  2169  11AF  3400               	retlw	0
  2170  11B0  3400               	retlw	0
  2171  11B1  3400               	retlw	0
  2172  11B2  3400               	retlw	0
  2173  11B3  3400               	retlw	0
  2174  11B4  3400               	retlw	0
  2175  11B5  3400               	retlw	0
  2176  11B6  3400               	retlw	0
  2177  11B7  3400               	retlw	0
  2178  11B8  34FF               	retlw	255
  2179  11B9  34FF               	retlw	255
  2180  11BA  34FF               	retlw	255
  2181  11BB  3400               	retlw	0
  2182  11BC  3400               	retlw	0
  2183  11BD  3400               	retlw	0
  2184  11BE  3400               	retlw	0
  2185  11BF  3400               	retlw	0
  2186  11C0  3400               	retlw	0
  2187  11C1  3400               	retlw	0
  2188  11C2  3400               	retlw	0
  2189  11C3  3400               	retlw	0
  2190  11C4  3400               	retlw	0
  2191  11C5  3400               	retlw	0
  2192  11C6  3400               	retlw	0
  2193  11C7  3400               	retlw	0
  2194  11C8  3400               	retlw	0
  2195  11C9  3400               	retlw	0
  2196  11CA  3400               	retlw	0
  2197  11CB  3400               	retlw	0
  2198                           
  2199                           	psect	stringtext
  2200  1000                     __pstringtext:	
  2201  1000                     _CC2500_registers_address:	
  2202  1000  3403               	retlw	3
  2203  1001  3416               	retlw	22
  2204  1002  3417               	retlw	23
  2205  1003  341E               	retlw	30
  2206  1004  341F               	retlw	31
  2207  1005  3420               	retlw	32
  2208  1006  342A               	retlw	42
  2209  1007  342B               	retlw	43
  2210  1008  340B               	retlw	11
  2211  1009  340C               	retlw	12
  2212  100A  340D               	retlw	13
  2213  100B  340E               	retlw	14
  2214  100C  340F               	retlw	15
  2215  100D  3410               	retlw	16
  2216  100E  3411               	retlw	17
  2217  100F  3412               	retlw	18
  2218  1010  3413               	retlw	19
  2219  1011  3414               	retlw	20
  2220  1012  340A               	retlw	10
  2221  1013  3415               	retlw	21
  2222  1014  3421               	retlw	33
  2223  1015  3422               	retlw	34
  2224  1016  3418               	retlw	24
  2225  1017  3419               	retlw	25
  2226  1018  341A               	retlw	26
  2227  1019  341B               	retlw	27
  2228  101A  341C               	retlw	28
  2229  101B  341D               	retlw	29
  2230  101C  3423               	retlw	35
  2231  101D  3424               	retlw	36
  2232  101E  3425               	retlw	37
  2233  101F  3426               	retlw	38
  2234  1020  3429               	retlw	41
  2235  1021  342C               	retlw	44
  2236  1022  342D               	retlw	45
  2237  1023  342E               	retlw	46
  2238  1024  3400               	retlw	0
  2239  1025  3401               	retlw	1
  2240  1026  3402               	retlw	2
  2241  1027  3407               	retlw	7
  2242  1028  3408               	retlw	8
  2243  1029  3409               	retlw	9
  2244  102A  3406               	retlw	6
  2245  102B  3404               	retlw	4
  2246  102C  3405               	retlw	5
  2247  102D  3427               	retlw	39
  2248  102E  3428               	retlw	40
  2249  102F                     __end_of_CC2500_registers_address:	
  2250  102F                     _CC2500_rfSettings:	
  2251  102F  3407               	retlw	7
  2252  1030  3407               	retlw	7
  2253  1031  3430               	retlw	48
  2254  1032  3487               	retlw	135
  2255  1033  346B               	retlw	107
  2256  1034  34F8               	retlw	248
  2257  1035  347F               	retlw	127
  2258  1036  343F               	retlw	63
  2259  1037  3409               	retlw	9
  2260  1038  3400               	retlw	0
  2261  1039  345C               	retlw	92
  2262  103A  34A7               	retlw	167
  2263  103B  3462               	retlw	98
  2264  103C  3486               	retlw	134
  2265  103D  3483               	retlw	131
  2266  103E  3403               	retlw	3
  2267  103F  3422               	retlw	34
  2268  1040  34F8               	retlw	248
  2269  1041  3400               	retlw	0
  2270  1042  3444               	retlw	68
  2271  1043  34B6               	retlw	182
  2272  1044  3410               	retlw	16
  2273  1045  3418               	retlw	24
  2274  1046  341D               	retlw	29
  2275  1047  341C               	retlw	28
  2276  1048  34C7               	retlw	199
  2277  1049  3400               	retlw	0
  2278  104A  34B2               	retlw	178
  2279  104B  34EA               	retlw	234
  2280  104C  340A               	retlw	10
  2281  104D  3400               	retlw	0
  2282  104E  3411               	retlw	17
  2283  104F  3459               	retlw	89
  2284  1050  3488               	retlw	136
  2285  1051  3431               	retlw	49
  2286  1052  340B               	retlw	11
  2287  1053  342F               	retlw	47
  2288  1054  342E               	retlw	46
  2289  1055  3406               	retlw	6
  2290  1056  3404               	retlw	4
  2291  1057  3405               	retlw	5
  2292  1058  3400               	retlw	0
  2293  1059  3430               	retlw	48
  2294  105A  34D3               	retlw	211
  2295  105B  3491               	retlw	145
  2296  105C  3441               	retlw	65
  2297  105D  3400               	retlw	0
  2298  105E                     __end_of_CC2500_rfSettings:	
  2299  105E                     _CC2500_patable_vaule:	
  2300  105E  34FE               	retlw	254
  2301  105F  34FE               	retlw	254
  2302  1060  34FE               	retlw	254
  2303  1061  34FE               	retlw	254
  2304  1062  34FE               	retlw	254
  2305  1063  34FE               	retlw	254
  2306  1064  34FE               	retlw	254
  2307  1065  34FE               	retlw	254
  2308  1066                     __end_of_CC2500_patable_vaule:	
  2309                           
  2310                           	psect	nvBANK0
  2311  006C                     __pnvBANK0:	
  2312  006C                     _product:	
  2313  006C                     	ds	1
  2314  000C                     _PORTA	set	12
  2315  000D                     _PORTB	set	13
  2316  000E                     _PORTC	set	14
  2317  0018                     _T1CON	set	24
  2318  0017                     _TMR1H	set	23
  2319  0016                     _TMR1L	set	22
  2320  005F                     _GIE	set	95
  2321  005B                     _IOCIE	set	91
  2322  0058                     _IOCIF	set	88
  2323  005E                     _PEIE	set	94
  2324  0060                     _RA0	set	96
  2325  0064                     _RA4	set	100
  2326  0066                     _RA6	set	102
  2327  0067                     _RA7	set	103
  2328  0068                     _RB0	set	104
  2329  0069                     _RB1	set	105
  2330  006A                     _RB2	set	106
  2331  006B                     _RB3	set	107
  2332  006D                     _RB5	set	109
  2333  0070                     _RC0	set	112
  2334  0071                     _RC1	set	113
  2335  0073                     _RC3	set	115
  2336  0074                     _RC4	set	116
  2337  0075                     _RC5	set	117
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  1069                     _WPUB1	set	4201
  2370  0396                     _IOCBF	set	918
  2371  0395                     _IOCBN	set	917
  2372  0394                     _IOCBP	set	916
  2373  1CB2                     _IOCBF2	set	7346
  2374                           
  2375                           ; #config settings
  2376  0000                     
  2377                           	psect	cinit
  2378  0022                     start_initialization:	
  2379  0022                     __initialization:	
  2380                           
  2381                           ; Clear objects allocated to BITCOMMON
  2382  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2383                           
  2384                           ; Clear objects allocated to COMMON
  2385  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK0
  2388  0024  01ED               	clrf	__pbssBANK0& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0025  30A0               	movlw	low __pbssBANK1
  2392  0026  0084               	movwf	4
  2393  0027  3000               	movlw	high __pbssBANK1
  2394  0028  0085               	movwf	5
  2395  0029  304F               	movlw	79
  2396  002A  319D  2505  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  002D  3020               	movlw	low __pbssBANK2
  2400  002E  0084               	movwf	4
  2401  002F  3001               	movlw	high __pbssBANK2
  2402  0030  0085               	movwf	5
  2403  0031  3049               	movlw	73
  2404  0032  319D  2505  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0035  30A0               	movlw	low __pbssBANK3
  2408  0036  0084               	movwf	4
  2409  0037  3001               	movlw	high __pbssBANK3
  2410  0038  0085               	movwf	5
  2411  0039  304C               	movlw	76
  2412  003A  319D  2505  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Initialize objects allocated to BANK4
  2415  003D  30AC               	movlw	low __pidataBANK4
  2416  003E  0084               	movwf	4
  2417  003F  3091               	movlw	(high __pidataBANK4)| (0+128)
  2418  0040  0085               	movwf	5
  2419  0041  3020               	movlw	low __pdataBANK4
  2420  0042  0086               	movwf	6
  2421  0043  3002               	movlw	high __pdataBANK4
  2422  0044  0087               	movwf	7
  2423  0045  3020               	movlw	32
  2424  0046  319C  24FF         	fcall	init_ram
  2425  0048                     end_of_initialization:	
  2426                           ;End of C runtime variable initialization code
  2427                           
  2428  0048                     __end_of__initialization:	
  2429  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2430  0049  0020               	movlb	0
  2431  004A  3197  2F46         	ljmp	_main	;jump to C main() function
  2432                           
  2433                           	psect	bitbssCOMMON
  2434  03D0                     __pbitbssCOMMON:	
  2435  03D0                     _Receive_OK:	
  2436  03D0                     	ds	1
  2437  03D1                     _Transceive_OK:	
  2438  03D1                     	ds	1
  2439                           
  2440                           	psect	bssCOMMON
  2441  007B                     __pbssCOMMON:	
  2442  007B                     _DimmerLights:	
  2443  007B                     	ds	1
  2444                           
  2445                           	psect	bssBANK0
  2446  006D                     __pbssBANK0:	
  2447  006D                     _Sw:	
  2448  006D                     	ds	1
  2449                           
  2450                           	psect	bssBANK1
  2451  00A0                     __pbssBANK1:	
  2452  00A0                     _RF1:	
  2453  00A0                     	ds	14
  2454  00AE                     _myMain:	
  2455  00AE                     	ds	14
  2456  00BC                     _Buz1:	
  2457  00BC                     	ds	12
  2458  00C8                     _CRC:	
  2459  00C8                     	ds	1
  2460  00C9                     _Cmd:	
  2461  00C9                     	ds	1
  2462  00CA                     _DelayOff:	
  2463  00CA                     	ds	1
  2464  00CB                     _DimmerIntr:	
  2465  00CB                     	ds	1
  2466  00CC                     _LED:	
  2467  00CC                     	ds	1
  2468  00CD                     _Light:	
  2469  00CD                     	ds	1
  2470  00CE                     _RSSI:	
  2471  00CE                     	ds	1
  2472  00CF                     _Rx_Length:	
  2473  00CF                     	ds	1
  2474  00D0                     _SPI0Buffer:	
  2475  00D0                     	ds	1
  2476  00D1                     _SwDetect:	
  2477  00D1                     	ds	1
  2478  00D2                     _Tx_Length:	
  2479  00D2                     	ds	1
  2480  00D3                     _r_address:	
  2481  00D3                     	ds	1
  2482  00D4                     _r_data:	
  2483  00D4                     	ds	1
  2484  00D5                     _s_data:	
  2485  00D5                     	ds	1
  2486  00D6                     _Temp:	
  2487  00D6                     	ds	18
  2488  00E8                     _DimmerIntr1:	
  2489  00E8                     	ds	7
  2490                           
  2491                           	psect	bssBANK2
  2492  0120                     __pbssBANK2:	
  2493  0120                     _Dimmer:	
  2494  0120                     	ds	3
  2495  0123                     _Timer1:	
  2496  0123                     	ds	3
  2497  0126                     _RF_Count:	
  2498  0126                     	ds	2
  2499  0128                     _WDT:	
  2500  0128                     	ds	2
  2501  012A                     _Load:	
  2502  012A                     	ds	46
  2503  0158                     _DimmerLights1:	
  2504  0158                     	ds	8
  2505  0160                     _DlySw1:	
  2506  0160                     	ds	5
  2507  0165                     _VarErrLED:	
  2508  0165                     	ds	4
  2509                           
  2510                           	psect	bssBANK3
  2511  01A0                     __pbssBANK3:	
  2512  01A0                     _RF_Data:	
  2513  01A0                     	ds	30
  2514  01BE                     _Memory:	
  2515  01BE                     	ds	37
  2516  01E3                     _Sw1:	
  2517  01E3                     	ds	9
  2518                           
  2519                           	psect	dataBANK4
  2520  0220                     __pdataBANK4:	
  2521  0220                     __product:	
  2522  0220                     	ds	32
  2523                           
  2524                           	psect	clrtext
  2525  1D05                     clear_ram0:	
  2526                           ;	Called with FSR0 containing the base address, and
  2527                           ;	WREG with the size to clear
  2528                           
  2529  1D05  0064               	clrwdt	;clear the watchdog before getting into this loop
  2530  1D06                     clrloop0:	
  2531  1D06  0180               	clrf	0	;clear RAM location pointed to by FSR
  2532  1D07  3101               	addfsr 0,1
  2533  1D08  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2534  1D09  2D06               	goto	clrloop0	;have we reached the end yet?
  2535  1D0A  3400               	retlw	0	;all done for this memory range, return
  2536                           
  2537                           	psect	inittext
  2538  1CFF                     init_ram:	
  2539  1CFF  00FE               	movwf	126
  2540  1D00                     initloop:	
  2541  1D00  0012               	moviw fsr0++
  2542  1D01  001E               	movwi fsr1++
  2543  1D02  0BFE               	decfsz	126,f
  2544  1D03  2D00               	goto	initloop
  2545  1D04  3400               	retlw	0
  2546                           
  2547                           	psect	cstackBANK2
  2548  0169                     __pcstackBANK2:	
  2549  0169                     ?_main:	
  2550  0169                     main@argc:	
  2551                           ; 2 bytes @ 0x0
  2552                           
  2553                           
  2554                           ; 2 bytes @ 0x0
  2555  0169                     	ds	2
  2556  016B                     main@argv:	
  2557                           
  2558                           ; 2 bytes @ 0x2
  2559  016B                     	ds	2
  2560                           
  2561                           	psect	cstackCOMMON
  2562  0070                     __pcstackCOMMON:	
  2563  0070                     ?_CC2500_WriteCommand:	
  2564  0070                     ?_RF_Timeout_Counter:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_TimeoutCleared:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_CC2500_WriteByte:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_CC2500_ReadStatus:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_CC2500_ReadByte:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_CC2500_PowerRST:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_CC2500_InitSetREG:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_InitPATable:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_ClearTXFIFO:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_ClearRXFIFO:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_FrequencyCabr:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_SIDLEMode:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_DlyOff_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_DlyOff_Main:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setDimmerLights_SwOn:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_setDimmerLights_SwOff:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setDimmerLights_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setDimmerLights_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setDimmerLights_Line:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setTxData:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setRF_TransceiveGO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setLED_Initialization:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setLED_Main:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Fosc_Set:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_IO_Set:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_TMR1_Set:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_ADC_Set:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_IOC_Set:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_WDT_Set:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_TMR1_ISR:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_IOC_ISR:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ??_IOC_ISR:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_Timeout_Counter:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_set_TimeoutCleared:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Flash_Memory_Write:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_Flash_Memory_Modify:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_WDT_Clearing:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_myMain_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Temp_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Load_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Switch_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_RF_Initialization:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_getLoad_AD:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_getTemp_AD:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_my_MainTimer:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Temp_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Load_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RF_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Exception_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_setLoad_AH_AL_Restore:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setTemp_Initialization:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setTemp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setRF_Initialization:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setRF_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_RF_RxDisable:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_getRxData:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setLog_Code:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setControl_Lights_Table:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setRFSW_Control:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRFSW_AdjControl:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setSw_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setSw_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Buzzer_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Buzzer_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_CC2500_TxData:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_CC2500_RxData:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_CC2500_PowerOnInitial:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DelayOffPointSelect:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DelayOff_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_DelayOff_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_DimmerIntr_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_DimmerLights_SelectPointer:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_DimmerLights_Initialization:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setDimmerLights_DimmingOn:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DimmerLights_Main:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_LedPointSelect:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_LED_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_LED_Main:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_Mcu_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_ISR:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_Flash_Memory_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_Flash_Memory_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_Flash_Memory_Unlock:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Flash_Memory_Erasing:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setMemory_Modify:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_setMemory_LoopSave:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_WDT_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_setRF_Learn:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_TouchPower:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_SwPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_getDimmerLights_Status:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_getLoad_OK:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?_getMain_All_Error_Status:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?_getMain_All_LightsStatus:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ?_getDimmerLights_Allow_Condition:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ?_getDimmerLights_PercentToValue:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ?_getDimmerLights_ValueToPercent:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_getCmd_Status:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_Flash_Memory_Read:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getRF_KeyStatus:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getSw_KeyStatus:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getDelayOff_GO:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getDimmerIntr_DimmingValue:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getDimmerLights_Line:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getDimmer_LoadGO:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmer_Load_Status:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getMain_Lights_Count:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     setDimmerLights_Initialization@lights:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     getDimmerLights_Allow_Condition@lights:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     getSw_KeyStatus@sw:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912                           
  2913                           ; 1 bytes @ 0x0
  2914  0070                     	ds	1
  2915  0071                     ??_TMR1_ISR:	
  2916  0071                     ??_ISR:	
  2917                           ; 0 bytes @ 0x1
  2918                           
  2919                           
  2920                           ; 0 bytes @ 0x1
  2921  0071                     	ds	1
  2922  0072                     ??_RF_Timeout_Counter:	
  2923  0072                     ??_setRF_TimeoutCleared:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0072                     ??_CC2500_WriteByte:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0072                     ??_CC2500_ReadByte:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     ?_DelayTime_1us:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0072                     ??_setDimmerLights_Initialization:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0072                     ??_getLoad_OK:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0072                     ??_getMain_All_Error_Status:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0072                     ??_getMain_All_LightsStatus:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0072                     ??_setDimmerLights_Line:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0072                     ??_getCmd_Status:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0072                     ?_setCmd_Status:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     ??_setTxData:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0072                     ??_setRF_TransceiveGO:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0072                     ??_Fosc_Set:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0072                     ??_IO_Set:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     ??_TMR1_Set:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0072                     ??_ADC_Set:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0072                     ??_IOC_Set:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0072                     ??_WDT_Set:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0072                     ??_Timeout_Counter:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0072                     ??_set_TimeoutCleared:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     ??_Flash_Memory_Read:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0072                     ?_setMemory_Data:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0072                     ??_Flash_Memory_Write:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     ??_WDT_Clearing:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_myMain_Initialization:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_Temp_Initialization:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ??_setLoad_AH_AL_Restore:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_setTemp_Initialization:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_setRF_Initialization:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_getRF_KeyStatus:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ??_getSw_KeyStatus:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_Buzzer_Initialization:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_Buzzer_Main:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_DelayOffPointSelect:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ??_DimmerIntr_Initialization:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ?_setDimmerIntr_ControlStatus:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ?_setDimmerIntr_DimmingValue:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_getDimmerIntr_DimmingValue:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ?_setDimmerIntr_Dimming_RF:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_DimmerLights_SelectPointer:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_getDimmerLights_Line:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ??_getDimmer_LoadGO:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ??_getDimmer_Load_Status:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ??_LedPointSelect:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ??_Flash_Memory_Unlock:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ??_Flash_Memory_Erasing:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ??_setMemory_Modify:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_setMemory_LoopSave:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_WDT_Main:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_getMain_Lights_Count:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ??_setRF_Learn:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ??_TouchPower:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0072                     ??_SwPointSelect:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0072                     ?___bmul:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0072                     ?_getBuz_GO:	
  3095                           ; 1 bytes @ 0x2
  3096                           
  3097  0072                     ?_getAD:	
  3098                           ; 2 bytes @ 0x2
  3099                           
  3100  0072                     ?___wmul:	
  3101                           ; 2 bytes @ 0x2
  3102                           
  3103  0072                     ?___awdiv:	
  3104                           ; 2 bytes @ 0x2
  3105                           
  3106  0072                     ?___lwdiv:	
  3107                           ; 2 bytes @ 0x2
  3108                           
  3109  0072                     ?___ftpack:	
  3110                           ; 2 bytes @ 0x2
  3111                           
  3112  0072                     setDimmerIntr_ControlStatus@command:	
  3113                           ; 3 bytes @ 0x2
  3114                           
  3115  0072                     setDimmerIntr_DimmingValue@value:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0072                     setDimmerIntr_Dimming_Sw@command:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0072                     setDimmerIntr_Dimming_RF@command:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0072                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0072                     setDimmerLights_Line@lights:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0072                     getDimmerLights_Line@line:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0072                     getDimmer_LoadGO@loadgo:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0072                     getDimmer_Load_Status@status:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0072                     getAD@adcon1:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0072                     setMemory_Data@data:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0072                     getMain_All_LightsStatus@status:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0072                     getMain_Lights_Count@count:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0072                     setCmd_Status@cmd:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0072                     getCmd_Status@number:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0072                     getLoad_OK@ok:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0072                     ___bmul@multiplicand:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0072                     DelayTime_1us@count:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0072                     ___wmul@multiplier:	
  3167                           ; 2 bytes @ 0x2
  3168                           
  3169  0072                     ___awdiv@divisor:	
  3170                           ; 2 bytes @ 0x2
  3171                           
  3172  0072                     ___lwdiv@divisor:	
  3173                           ; 2 bytes @ 0x2
  3174                           
  3175  0072                     ___ftpack@arg:	
  3176                           ; 2 bytes @ 0x2
  3177                           
  3178                           
  3179                           ; 3 bytes @ 0x2
  3180  0072                     	ds	1
  3181  0073                     ??_getDimmerLights_Allow_Condition:	
  3182  0073                     ??_setCmd_Status:	
  3183                           ; 0 bytes @ 0x3
  3184                           
  3185  0073                     ??_setMemory_Data:	
  3186                           ; 0 bytes @ 0x3
  3187                           
  3188  0073                     ??_RF_Initialization:	
  3189                           ; 0 bytes @ 0x3
  3190                           
  3191  0073                     ??_setDimmerIntr_ControlStatus:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0073                     ??_setDimmerIntr_DimmingValue:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0073                     ??_setDimmerIntr_Dimming_RF:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0073                     ??_DimmerLights_Initialization:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0073                     ??_Mcu_Initialization:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0073                     ??___bmul:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0073                     CC2500_WriteByte@loop_a:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0073                     CC2500_ReadByte@loop_b:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0073                     DelayOffPointSelect@sw:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0073                     getDimmerIntr_DimmingValue@lights:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0073                     DimmerLights_SelectPointer@lights:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0073                     LedPointSelect@led:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0073                     Flash_Memory_Read@i:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0073                     Flash_Memory_Write@i:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0073                     setMemory_Modify@command:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0073                     setMemory_LoopSave@command:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0073                     getMain_Lights_Count@status1:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0073                     getCmd_Status@cmd:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0073                     setLoad_AH_AL_Restore@i:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0073                     setRF_Learn@command:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0073                     getRF_KeyStatus@key:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0073                     setRF_TransceiveGO@command:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0073                     SwPointSelect@sw:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0073                     getSw_KeyStatus@status:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0073                     _getMain_All_Error_Status$3476:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269                           
  3270                           ; 2 bytes @ 0x3
  3271  0073                     	ds	1
  3272  0074                     ??_CC2500_WriteCommand:	
  3273  0074                     ??_CC2500_ReadStatus:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0074                     ??_DelayTime_1us:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0074                     ?_CC2500_WriteREG:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0074                     ??_DlyOff_Initialization:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0074                     ??_getDimmerLights_Status:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0074                     ??_setDimmerLights_SwOff:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0074                     ?_setLED:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0074                     ??_setLED_Main:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0074                     ??_Load_Initialization:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0074                     ??_getBuz_GO:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0074                     ??_getDelayOff_GO:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0074                     ??_setDimmerLights_DimmingOn:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0074                     ?_setDimmerLights_DimmingRun:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0074                     CC2500_WriteREG@value:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0074                     DlyOff_Initialization@sw:	
  3316                           ; 1 bytes @ 0x4
  3317                           
  3318  0074                     getDelayOff_GO@sw:	
  3319                           ; 1 bytes @ 0x4
  3320                           
  3321  0074                     setDimmerIntr_ControlStatus@lights:	
  3322                           ; 1 bytes @ 0x4
  3323                           
  3324  0074                     setDimmerIntr_DimmingValue@lights:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0074                     getDimmerIntr_DimmingValue@value:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0074                     setDimmerIntr_Dimming_RF@lights:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0074                     setDimmerLights_SwOff@sw:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0074                     setDimmerLights_DimmingOn@sw:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0074                     getDimmerLights_Allow_Condition@allow:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0074                     getDimmerLights_Status@lights:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0074                     setDimmerLights_DimmingRun@command:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0074                     setLED@command:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0074                     Flash_Memory_Read@address:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0074                     setMemory_Data@address:	
  3358                           ; 1 bytes @ 0x4
  3359                           
  3360  0074                     setCmd_Status@number:	
  3361                           ; 1 bytes @ 0x4
  3362                           
  3363  0074                     _getRF_KeyStatus$5175:	
  3364                           ; 1 bytes @ 0x4
  3365                           
  3366  0074                     _getSw_KeyStatus$6179:	
  3367                           ; 1 bytes @ 0x4
  3368                           
  3369  0074                     ___bmul@product:	
  3370                           ; 1 bytes @ 0x4
  3371                           
  3372  0074                     DelayTime_1us@i:	
  3373                           ; 1 bytes @ 0x4
  3374                           
  3375  0074                     ___wmul@multiplicand:	
  3376                           ; 2 bytes @ 0x4
  3377                           
  3378  0074                     ___awdiv@dividend:	
  3379                           ; 2 bytes @ 0x4
  3380                           
  3381  0074                     ___lwdiv@dividend:	
  3382                           ; 2 bytes @ 0x4
  3383                           
  3384                           
  3385                           ; 2 bytes @ 0x4
  3386  0074                     	ds	1
  3387  0075                     ??_CC2500_WriteREG:	
  3388  0075                     ??_setLED:	
  3389                           ; 0 bytes @ 0x5
  3390                           
  3391  0075                     ??_DelayOff_Initialization:	
  3392                           ; 0 bytes @ 0x5
  3393                           
  3394  0075                     ??_setDimmerLights_DimmingRun:	
  3395                           ; 0 bytes @ 0x5
  3396                           
  3397  0075                     ??_getAD:	
  3398                           ; 0 bytes @ 0x5
  3399                           
  3400  0075                     CC2500_WriteCommand@command:	
  3401                           ; 0 bytes @ 0x5
  3402                           
  3403  0075                     CC2500_ReadStatus@status_addr:	
  3404                           ; 1 bytes @ 0x5
  3405                           
  3406  0075                     getDelayOff_GO@go:	
  3407                           ; 1 bytes @ 0x5
  3408                           
  3409  0075                     _getDimmerLights_Allow_Condition$2198:	
  3410                           ; 1 bytes @ 0x5
  3411                           
  3412  0075                     getDimmerLights_Status@status:	
  3413                           ; 1 bytes @ 0x5
  3414                           
  3415  0075                     setLED@led:	
  3416                           ; 1 bytes @ 0x5
  3417                           
  3418  0075                     getAD@adcon0:	
  3419                           ; 1 bytes @ 0x5
  3420                           
  3421  0075                     Flash_Memory_Read@ret:	
  3422                           ; 1 bytes @ 0x5
  3423                           
  3424  0075                     ___bmul@multiplier:	
  3425                           ; 1 bytes @ 0x5
  3426                           
  3427  0075                     ___ftpack@exp:	
  3428                           ; 1 bytes @ 0x5
  3429                           
  3430  0075                     _getMain_All_Error_Status$3477:	
  3431                           ; 1 bytes @ 0x5
  3432                           
  3433                           
  3434                           ; 2 bytes @ 0x5
  3435  0075                     	ds	1
  3436  0076                     ??_CC2500_ClearTXFIFO:	
  3437  0076                     ??_CC2500_ClearRXFIFO:	
  3438                           ; 0 bytes @ 0x6
  3439                           
  3440  0076                     ??_CC2500_SIDLEMode:	
  3441                           ; 0 bytes @ 0x6
  3442                           
  3443  0076                     ??_setLED_Initialization:	
  3444                           ; 0 bytes @ 0x6
  3445                           
  3446  0076                     ??_Flash_Memory_Modify:	
  3447                           ; 0 bytes @ 0x6
  3448                           
  3449  0076                     ??_getLoad_AD:	
  3450                           ; 0 bytes @ 0x6
  3451                           
  3452  0076                     ??_getTemp_AD:	
  3453                           ; 0 bytes @ 0x6
  3454                           
  3455  0076                     ??_RF_RxDisable:	
  3456                           ; 0 bytes @ 0x6
  3457                           
  3458  0076                     ??_setSw_Initialization:	
  3459                           ; 0 bytes @ 0x6
  3460                           
  3461  0076                     ??_CC2500_TxData:	
  3462                           ; 0 bytes @ 0x6
  3463                           
  3464  0076                     ??_CC2500_RxData:	
  3465                           ; 0 bytes @ 0x6
  3466                           
  3467  0076                     ??___wmul:	
  3468                           ; 0 bytes @ 0x6
  3469                           
  3470  0076                     ??___awdiv:	
  3471                           ; 0 bytes @ 0x6
  3472                           
  3473  0076                     ??___lwdiv:	
  3474                           ; 0 bytes @ 0x6
  3475                           
  3476  0076                     CC2500_WriteREG@w_addr:	
  3477                           ; 0 bytes @ 0x6
  3478                           
  3479  0076                     setDimmerLights_DimmingRun@lights:	
  3480                           ; 1 bytes @ 0x6
  3481                           
  3482  0076                     setLED_Initialization@led:	
  3483                           ; 1 bytes @ 0x6
  3484                           
  3485  0076                     setLED_Main@led:	
  3486                           ; 1 bytes @ 0x6
  3487                           
  3488  0076                     setSw_Initialization@sw:	
  3489                           ; 1 bytes @ 0x6
  3490                           
  3491  0076                     ___ftpack@sign:	
  3492                           ; 1 bytes @ 0x6
  3493                           
  3494  0076                     getBuz_GO@i:	
  3495                           ; 1 bytes @ 0x6
  3496                           
  3497  0076                     DelayTime_1us@j:	
  3498                           ; 2 bytes @ 0x6
  3499                           
  3500  0076                     ___wmul@product:	
  3501                           ; 2 bytes @ 0x6
  3502                           
  3503                           
  3504                           ; 2 bytes @ 0x6
  3505  0076                     	ds	1
  3506  0077                     ??_CC2500_InitSetREG:	
  3507  0077                     ??_CC2500_InitPATable:	
  3508                           ; 0 bytes @ 0x7
  3509                           
  3510  0077                     ??_Switch_Initialization:	
  3511                           ; 0 bytes @ 0x7
  3512                           
  3513  0077                     ??___ftpack:	
  3514                           ; 0 bytes @ 0x7
  3515                           
  3516  0077                     ??_setBuz:	
  3517                           ; 0 bytes @ 0x7
  3518                           
  3519  0077                     ??_LED_Initialization:	
  3520                           ; 0 bytes @ 0x7
  3521                           
  3522  0077                     ??_LED_Main:	
  3523                           ; 0 bytes @ 0x7
  3524                           
  3525  0077                     CC2500_TxData@loop_e:	
  3526                           ; 0 bytes @ 0x7
  3527                           
  3528  0077                     CC2500_RxData@loop_f:	
  3529                           ; 1 bytes @ 0x7
  3530                           
  3531  0077                     Flash_Memory_Modify@i:	
  3532                           ; 1 bytes @ 0x7
  3533                           
  3534  0077                     getMain_All_Error_Status@command:	
  3535                           ; 1 bytes @ 0x7
  3536                           
  3537  0077                     getTemp_AD@channel:	
  3538                           ; 1 bytes @ 0x7
  3539                           
  3540  0077                     ___lwdiv@quotient:	
  3541                           ; 1 bytes @ 0x7
  3542                           
  3543                           
  3544                           ; 2 bytes @ 0x7
  3545  0077                     	ds	1
  3546  0078                     ??_CC2500_PowerRST:	
  3547  0078                     ??_CC2500_FrequencyCabr:	
  3548                           ; 0 bytes @ 0x8
  3549                           
  3550  0078                     ??_Flash_Memory_Main:	
  3551                           ; 0 bytes @ 0x8
  3552                           
  3553  0078                     setBuz@count:	
  3554                           ; 0 bytes @ 0x8
  3555                           
  3556  0078                     CC2500_InitPATable@temp:	
  3557                           ; 1 bytes @ 0x8
  3558                           
  3559  0078                     getMain_All_Error_Status@status:	
  3560                           ; 1 bytes @ 0x8
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x8
  3564  0078                     	ds	1
  3565  0079                     ??_setDimmerLights_SwOn:	
  3566  0079                     ??_my_MainTimer:	
  3567                           ; 0 bytes @ 0x9
  3568                           
  3569  0079                     ??_Exception_Main:	
  3570                           ; 0 bytes @ 0x9
  3571                           
  3572  0079                     CC2500_InitPATable@loop_d:	
  3573                           ; 0 bytes @ 0x9
  3574                           
  3575  0079                     setSw_Main@sw:	
  3576                           ; 1 bytes @ 0x9
  3577                           
  3578  0079                     ___lwdiv@counter:	
  3579                           ; 1 bytes @ 0x9
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x9
  3583  0079                     	ds	1
  3584  007A                     ??_setDimmerLights_Main:	
  3585  007A                     ??_Temp_Main:	
  3586                           ; 0 bytes @ 0xA
  3587                           
  3588  007A                     ??_Switch_Main:	
  3589                           ; 0 bytes @ 0xA
  3590                           
  3591  007A                     ??_RF_Main:	
  3592                           ; 0 bytes @ 0xA
  3593                           
  3594  007A                     ??_setControl_Lights_Table:	
  3595                           ; 0 bytes @ 0xA
  3596                           
  3597  007A                     ??_CC2500_PowerOnInitial:	
  3598                           ; 0 bytes @ 0xA
  3599                           
  3600  007A                     ??_DelayOff_Main:	
  3601                           ; 0 bytes @ 0xA
  3602                           
  3603  007A                     ??_DimmerLights_Main:	
  3604                           ; 0 bytes @ 0xA
  3605                           
  3606  007A                     ??_main:	
  3607                           ; 0 bytes @ 0xA
  3608                           
  3609  007A                     ??___ftneg:	
  3610                           ; 0 bytes @ 0xA
  3611                           
  3612                           
  3613                           	psect	cstackBANK0
  3614  0020                     __pcstackBANK0:	
  3615                           ; 0 bytes @ 0xA
  3616                           
  3617  0020                     ??_Load_Main:	
  3618  0020                     ?___awtoft:	
  3619                           ; 0 bytes @ 0x0
  3620                           
  3621  0020                     CC2500_InitSetREG@temp1:	
  3622                           ; 3 bytes @ 0x0
  3623                           
  3624  0020                     getLoad_AD@channel:	
  3625                           ; 1 bytes @ 0x0
  3626                           
  3627  0020                     ___awdiv@counter:	
  3628                           ; 1 bytes @ 0x0
  3629                           
  3630  0020                     ___awtoft@c:	
  3631                           ; 1 bytes @ 0x0
  3632                           
  3633                           
  3634                           ; 2 bytes @ 0x0
  3635  0020                     	ds	1
  3636  0021                     CC2500_InitSetREG@temp2:	
  3637  0021                     getLoad_AD@k:	
  3638                           ; 1 bytes @ 0x1
  3639                           
  3640  0021                     ___awdiv@sign:	
  3641                           ; 1 bytes @ 0x1
  3642                           
  3643                           
  3644                           ; 1 bytes @ 0x1
  3645  0021                     	ds	1
  3646  0022                     CC2500_InitSetREG@loop_c:	
  3647  0022                     getLoad_AD@j:	
  3648                           ; 1 bytes @ 0x2
  3649                           
  3650  0022                     Load_Main@error:	
  3651                           ; 1 bytes @ 0x2
  3652                           
  3653  0022                     ___awdiv@quotient:	
  3654                           ; 1 bytes @ 0x2
  3655                           
  3656                           
  3657                           ; 2 bytes @ 0x2
  3658  0022                     	ds	1
  3659  0023                     ??___awtoft:	
  3660  0023                     getLoad_AD@i:	
  3661                           ; 0 bytes @ 0x3
  3662                           
  3663  0023                     Load_Main@Load_Status:	
  3664                           ; 1 bytes @ 0x3
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x3
  3668  0023                     	ds	1
  3669  0024                     ?_setBuz:	
  3670  0024                     setBuz@time:	
  3671                           ; 0 bytes @ 0x4
  3672                           
  3673  0024                     Load_Main@i:	
  3674                           ; 2 bytes @ 0x4
  3675                           
  3676                           
  3677                           ; 2 bytes @ 0x4
  3678  0024                     	ds	1
  3679  0025                     ___awtoft@sign:	
  3680                           
  3681                           ; 1 bytes @ 0x5
  3682  0025                     	ds	1
  3683  0026                     ?___ftdiv:	
  3684  0026                     ?___ftmul:	
  3685                           ; 3 bytes @ 0x6
  3686                           
  3687  0026                     setDimmerLights_SwOn@sw:	
  3688                           ; 3 bytes @ 0x6
  3689                           
  3690  0026                     Exception_Main@count:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693  0026                     ___ftdiv@f2:	
  3694                           ; 1 bytes @ 0x6
  3695                           
  3696  0026                     ___ftmul@f1:	
  3697                           ; 3 bytes @ 0x6
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x6
  3701  0026                     	ds	1
  3702  0027                     setDimmerLights_SwOn@idle:	
  3703  0027                     Exception_Main@error:	
  3704                           ; 1 bytes @ 0x7
  3705                           
  3706                           
  3707                           ; 1 bytes @ 0x7
  3708  0027                     	ds	1
  3709  0028                     ??_setSw_Main:	
  3710  0028                     Exception_Main@i:	
  3711                           ; 0 bytes @ 0x8
  3712                           
  3713                           
  3714                           ; 2 bytes @ 0x8
  3715  0028                     	ds	1
  3716  0029                     ___ftdiv@f1:	
  3717  0029                     ___ftmul@f2:	
  3718                           ; 3 bytes @ 0x9
  3719                           
  3720                           
  3721                           ; 3 bytes @ 0x9
  3722  0029                     	ds	1
  3723  002A                     Exception_Main@i_3487:	
  3724                           
  3725                           ; 2 bytes @ 0xA
  3726  002A                     	ds	2
  3727  002C                     ??___ftdiv:	
  3728  002C                     ??___ftmul:	
  3729                           ; 0 bytes @ 0xC
  3730                           
  3731  002C                     Exception_Main@lights:	
  3732                           ; 0 bytes @ 0xC
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0xC
  3736  002C                     	ds	4
  3737  0030                     ___ftdiv@cntr:	
  3738  0030                     ___ftmul@exp:	
  3739                           ; 1 bytes @ 0x10
  3740                           
  3741                           
  3742                           ; 1 bytes @ 0x10
  3743  0030                     	ds	1
  3744  0031                     ___ftdiv@f3:	
  3745  0031                     ___ftmul@f3_as_product:	
  3746                           ; 3 bytes @ 0x11
  3747                           
  3748                           
  3749                           ; 3 bytes @ 0x11
  3750  0031                     	ds	3
  3751  0034                     ___ftdiv@exp:	
  3752  0034                     ___ftmul@cntr:	
  3753                           ; 1 bytes @ 0x14
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x14
  3757  0034                     	ds	1
  3758  0035                     ___ftdiv@sign:	
  3759  0035                     ___ftmul@sign:	
  3760                           ; 1 bytes @ 0x15
  3761                           
  3762                           
  3763                           ; 1 bytes @ 0x15
  3764  0035                     	ds	1
  3765  0036                     ?___ftneg:	
  3766  0036                     ___ftneg@f1:	
  3767                           ; 3 bytes @ 0x16
  3768                           
  3769                           
  3770                           ; 3 bytes @ 0x16
  3771  0036                     	ds	3
  3772  0039                     ?___ftadd:	
  3773  0039                     ___ftadd@f1:	
  3774                           ; 3 bytes @ 0x19
  3775                           
  3776                           
  3777                           ; 3 bytes @ 0x19
  3778  0039                     	ds	3
  3779  003C                     ___ftadd@f2:	
  3780                           
  3781                           ; 3 bytes @ 0x1C
  3782  003C                     	ds	3
  3783  003F                     ??___ftadd:	
  3784                           
  3785                           ; 0 bytes @ 0x1F
  3786  003F                     	ds	4
  3787  0043                     ___ftadd@sign:	
  3788                           
  3789                           ; 1 bytes @ 0x23
  3790  0043                     	ds	1
  3791  0044                     ___ftadd@exp2:	
  3792                           
  3793                           ; 1 bytes @ 0x24
  3794  0044                     	ds	1
  3795  0045                     ___ftadd@exp1:	
  3796                           
  3797                           ; 1 bytes @ 0x25
  3798  0045                     	ds	1
  3799  0046                     ?___fttol:	
  3800  0046                     ___fttol@f1:	
  3801                           ; 4 bytes @ 0x26
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0x26
  3805  0046                     	ds	4
  3806  004A                     ??___fttol:	
  3807                           
  3808                           ; 0 bytes @ 0x2A
  3809  004A                     	ds	4
  3810  004E                     ___fttol@sign1:	
  3811                           
  3812                           ; 1 bytes @ 0x2E
  3813  004E                     	ds	1
  3814  004F                     ___fttol@lval:	
  3815                           
  3816                           ; 4 bytes @ 0x2F
  3817  004F                     	ds	4
  3818  0053                     ___fttol@exp1:	
  3819                           
  3820                           ; 1 bytes @ 0x33
  3821  0053                     	ds	1
  3822  0054                     ??_getDimmerLights_PercentToValue:	
  3823  0054                     ??_getDimmerLights_ValueToPercent:	
  3824                           ; 0 bytes @ 0x34
  3825                           
  3826                           
  3827                           ; 0 bytes @ 0x34
  3828  0054                     	ds	2
  3829  0056                     getDimmerLights_PercentToValue@value:	
  3830  0056                     getDimmerLights_ValueToPercent@value:	
  3831                           ; 1 bytes @ 0x36
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0x36
  3835  0056                     	ds	1
  3836  0057                     getDimmerLights_PercentToValue@i:	
  3837  0057                     getDimmerLights_ValueToPercent@i:	
  3838                           ; 3 bytes @ 0x37
  3839                           
  3840                           
  3841                           ; 3 bytes @ 0x37
  3842  0057                     	ds	3
  3843  005A                     ?_setProductData:	
  3844  005A                     ?_setDimmerIntr_MaxmumValue:	
  3845                           ; 0 bytes @ 0x3A
  3846                           
  3847  005A                     ??_Flash_Memory_Initialization:	
  3848                           ; 0 bytes @ 0x3A
  3849                           
  3850  005A                     setDimmerIntr_MaxmumValue@value:	
  3851                           ; 0 bytes @ 0x3A
  3852                           
  3853  005A                     setProductData@value:	
  3854                           ; 1 bytes @ 0x3A
  3855                           
  3856                           
  3857                           ; 1 bytes @ 0x3A
  3858  005A                     	ds	1
  3859  005B                     ??_setProductData:	
  3860  005B                     ??_setDimmerIntr_MaxmumValue:	
  3861                           ; 0 bytes @ 0x3B
  3862                           
  3863  005B                     Flash_Memory_Initialization@i:	
  3864                           ; 0 bytes @ 0x3B
  3865                           
  3866                           
  3867                           ; 1 bytes @ 0x3B
  3868  005B                     	ds	1
  3869  005C                     setDimmerIntr_MaxmumValue@lights:	
  3870  005C                     setProductData@address:	
  3871                           ; 1 bytes @ 0x3C
  3872                           
  3873                           
  3874                           ; 1 bytes @ 0x3C
  3875  005C                     	ds	1
  3876  005D                     ??_DlyOff_Main:	
  3877  005D                     ?_setRF_DimmerLights:	
  3878                           ; 0 bytes @ 0x3D
  3879                           
  3880  005D                     ??_setTemp_Main:	
  3881                           ; 0 bytes @ 0x3D
  3882                           
  3883  005D                     ??_setLog_Code:	
  3884                           ; 0 bytes @ 0x3D
  3885                           
  3886  005D                     ??_setRFSW_AdjControl:	
  3887                           ; 0 bytes @ 0x3D
  3888                           
  3889  005D                     ?_setDelayOff_GO:	
  3890                           ; 0 bytes @ 0x3D
  3891                           
  3892  005D                     setDelayOff_GO@command:	
  3893                           ; 0 bytes @ 0x3D
  3894                           
  3895  005D                     setRF_DimmerLights@on:	
  3896                           ; 1 bytes @ 0x3D
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x3D
  3900  005D                     	ds	1
  3901  005E                     ??_setRF_DimmerLights:	
  3902  005E                     setDelayOff_GO@value:	
  3903                           ; 0 bytes @ 0x3E
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x3E
  3907  005E                     	ds	1
  3908  005F                     ??_setDelayOff_GO:	
  3909  005F                     DlyOff_Main@sw:	
  3910                           ; 0 bytes @ 0x3F
  3911                           
  3912  005F                     setTemp_Main@error:	
  3913                           ; 1 bytes @ 0x3F
  3914                           
  3915  005F                     setRFSW_AdjControl@status:	
  3916                           ; 1 bytes @ 0x3F
  3917                           
  3918                           
  3919                           ; 1 bytes @ 0x3F
  3920  005F                     	ds	1
  3921  0060                     setRFSW_AdjControl@sw:	
  3922  0060                     setRF_DimmerLights@status:	
  3923                           ; 1 bytes @ 0x40
  3924                           
  3925                           
  3926                           ; 1 bytes @ 0x40
  3927  0060                     	ds	1
  3928  0061                     setDelayOff_GO@i:	
  3929  0061                     setRF_DimmerLights@lights:	
  3930                           ; 1 bytes @ 0x41
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x41
  3934  0061                     	ds	1
  3935  0062                     ?_setDimmerLights_Dimming:	
  3936  0062                     setDelayOff_GO@j:	
  3937                           ; 0 bytes @ 0x42
  3938                           
  3939  0062                     setDimmerLights_Dimming@status:	
  3940                           ; 1 bytes @ 0x42
  3941                           
  3942                           
  3943                           ; 1 bytes @ 0x42
  3944  0062                     	ds	1
  3945  0063                     ??_setDimmerLights_Dimming:	
  3946  0063                     setDelayOff_GO@k:	
  3947                           ; 0 bytes @ 0x43
  3948                           
  3949                           
  3950                           ; 1 bytes @ 0x43
  3951  0063                     	ds	1
  3952  0064                     setDelayOff_GO@sw:	
  3953  0064                     setDimmerLights_Dimming@lights:	
  3954                           ; 1 bytes @ 0x44
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x44
  3958  0064                     	ds	1
  3959  0065                     ?_setDimmerLights_OnOff:	
  3960  0065                     ??_setRFSW_Control:	
  3961                           ; 0 bytes @ 0x45
  3962                           
  3963  0065                     setDimmerLights_OnOff@command:	
  3964                           ; 0 bytes @ 0x45
  3965                           
  3966                           
  3967                           ; 1 bytes @ 0x45
  3968  0065                     	ds	1
  3969  0066                     ??_setDimmerLights_OnOff:	
  3970  0066                     setRFSW_Control@status:	
  3971                           ; 0 bytes @ 0x46
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x46
  3975  0066                     	ds	1
  3976  0067                     setRFSW_Control@sw:	
  3977                           
  3978                           ; 1 bytes @ 0x47
  3979  0067                     	ds	1
  3980  0068                     ??_getRxData:	
  3981  0068                     setDimmerLights_OnOff@lights:	
  3982                           ; 0 bytes @ 0x48
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0x48
  3986  0068                     	ds	1
  3987  0069                     setDimmerLights_Main@lights:	
  3988  0069                     getRxData@error:	
  3989                           ; 1 bytes @ 0x49
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x49
  3993  0069                     	ds	1
  3994  006A                     ??_setRF_Main:	
  3995                           
  3996                           ; 0 bytes @ 0x4A
  3997  006A                     	ds	1
  3998  006B                     setRF_Main@error:	
  3999                           
  4000                           ; 1 bytes @ 0x4B
  4001  006B                     	ds	1
  4002                           
  4003                           	psect	maintext
  4004  1746                     __pmaintext:	
  4005 ;;
  4006 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4007 ;;
  4008 ;; *************** function _main *****************
  4009 ;; Defined at:
  4010 ;;		line 7 in file "../src/Main_B1.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  argc            2    0[BANK2 ] int 
  4013 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  2    0[BANK2 ] int 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 17F/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4025 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;Total ram usage:        4 bytes
  4030 ;; Hardware stack levels required when called:   11
  4031 ;; This function calls:
  4032 ;;		_Buzzer_Initialization
  4033 ;;		_Buzzer_Main
  4034 ;;		_CC2500_PowerOnInitial
  4035 ;;		_DelayOff_Initialization
  4036 ;;		_DelayOff_Main
  4037 ;;		_DimmerLights_Initialization
  4038 ;;		_DimmerLights_Main
  4039 ;;		_Exception_Main
  4040 ;;		_Flash_Memory_Initialization
  4041 ;;		_Flash_Memory_Main
  4042 ;;		_LED_Initialization
  4043 ;;		_LED_Main
  4044 ;;		_Load_Initialization
  4045 ;;		_Load_Main
  4046 ;;		_Mcu_Initialization
  4047 ;;		_RF_Initialization
  4048 ;;		_RF_Main
  4049 ;;		_Switch_Initialization
  4050 ;;		_Switch_Main
  4051 ;;		_Temp_Initialization
  4052 ;;		_Temp_Main
  4053 ;;		_WDT_Main
  4054 ;;		_getLoad_AD
  4055 ;;		_getTemp_AD
  4056 ;;		_myMain_Initialization
  4057 ;;		_my_MainTimer
  4058 ;; This function is called by:
  4059 ;;		Startup code after reset
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _main
  4065  1746                     _main:	
  4066                           
  4067                           ;Main_B1.c: 8: myMain_Initialization();
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4071  1746  319E  2675  3197   	fcall	_myMain_Initialization
  4072                           
  4073                           ;Main_B1.c: 9: Mcu_Initialization();
  4074  1749  319F  274A  3197   	fcall	_Mcu_Initialization
  4075                           
  4076                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4077  174C  3184  244C  3197   	fcall	_Flash_Memory_Initialization
  4078                           
  4079                           ;Main_B1.c: 11: LED_Initialization();
  4080  174F  319C  24DE  3197   	fcall	_LED_Initialization
  4081                           
  4082                           ;Main_B1.c: 12: Buzzer_Initialization();
  4083  1752  319C  24C4  3197   	fcall	_Buzzer_Initialization
  4084                           
  4085                           ;Main_B1.c: 14: ;;
  4086                           ;Main_B1.c: 15: Temp_Initialization();
  4087  1755  319C  24D0  3197   	fcall	_Temp_Initialization
  4088                           
  4089                           ;Main_B1.c: 16: Load_Initialization();
  4090  1758  319C  24C7  3197   	fcall	_Load_Initialization
  4091                           
  4092                           ;Main_B1.c: 17: ;;
  4093                           ;Main_B1.c: 18: DelayOff_Initialization();
  4094  175B  319C  24D6  3197   	fcall	_DelayOff_Initialization
  4095                           
  4096                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4097  175E  319D  250B  3197   	fcall	_DimmerLights_Initialization
  4098                           
  4099                           ;Main_B1.c: 21: ;;
  4100                           ;Main_B1.c: 22: ;;
  4101                           ;Main_B1.c: 23: ;;
  4102                           ;Main_B1.c: 24: Switch_Initialization();
  4103  1761  319D  2561  3197   	fcall	_Switch_Initialization
  4104                           
  4105                           ;Main_B1.c: 25: RF_Initialization();
  4106  1764  319C  24CA  3197   	fcall	_RF_Initialization
  4107                           
  4108                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4109  1767  319F  27D6  3197   	fcall	_CC2500_PowerOnInitial
  4110  176A                     l9581:	
  4111                           ;Main_B1.c: 27: ;;
  4112                           ;Main_B1.c: 28: ;;
  4113                           ;Main_B1.c: 30: while (1) {
  4114                           
  4115                           
  4116                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4117  176A  0021               	movlb	1	; select bank1
  4118  176B  1C2E               	btfss	_myMain^(0+128),0
  4119  176C  2F75               	goto	l9585
  4120                           
  4121                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4122  176D  3005               	movlw	5
  4123  176E  318B  23BD  3197   	fcall	_getLoad_AD
  4124                           
  4125                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4126  1771  3009               	movlw	9
  4127  1772  3194  2472  3197   	fcall	_getTemp_AD
  4128  1775                     l9585:	
  4129                           
  4130                           ;Main_B1.c: 57: }
  4131                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4132  1775  0022               	movlb	2	; select bank2
  4133  1776  1C23               	btfss	_Timer1^(0+256),0
  4134  1777  2F6A               	goto	l9581
  4135                           
  4136                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4137  1778  1023               	bcf	_Timer1^(0+256),0
  4138                           
  4139                           ;Main_B1.c: 96: my_MainTimer();
  4140  1779  3194  243A  3197   	fcall	_my_MainTimer
  4141                           
  4142                           ;Main_B1.c: 97: WDT_Main();
  4143  177C  319E  26E4  3197   	fcall	_WDT_Main
  4144                           
  4145                           ;Main_B1.c: 98: ;;
  4146                           ;Main_B1.c: 99: ;;
  4147                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4148  177F  0021               	movlb	1	; select bank1
  4149  1780  1C2E               	btfss	_myMain^(0+128),0
  4150  1781  2F6A               	goto	l9581
  4151                           
  4152                           ;Main_B1.c: 101: Flash_Memory_Main();
  4153  1782  3193  2333  3197   	fcall	_Flash_Memory_Main
  4154                           
  4155                           ;Main_B1.c: 103: LED_Main();
  4156  1785  319C  24E2  3197   	fcall	_LED_Main
  4157                           
  4158                           ;Main_B1.c: 104: Buzzer_Main();
  4159  1788  3195  2569  3197   	fcall	_Buzzer_Main
  4160                           
  4161                           ;Main_B1.c: 106: ;;
  4162                           ;Main_B1.c: 107: Temp_Main();
  4163  178B  319C  24D3  3197   	fcall	_Temp_Main
  4164                           
  4165                           ;Main_B1.c: 108: Load_Main();
  4166  178E  3180  204C  3197   	fcall	_Load_Main
  4167                           
  4168                           ;Main_B1.c: 109: ;;
  4169                           ;Main_B1.c: 111: ;;
  4170                           ;Main_B1.c: 112: DimmerLights_Main();
  4171  1791  3191  211B  3197   	fcall	_DimmerLights_Main
  4172                           
  4173                           ;Main_B1.c: 113: Switch_Main();
  4174  1794  319D  252E  3197   	fcall	_Switch_Main
  4175                           
  4176                           ;Main_B1.c: 114: ;;
  4177                           ;Main_B1.c: 115: ;;
  4178                           ;Main_B1.c: 117: RF_Main();
  4179  1797  319C  24CD  3197   	fcall	_RF_Main
  4180                           
  4181                           ;Main_B1.c: 118: DelayOff_Main();
  4182  179A  319C  24DA  3197   	fcall	_DelayOff_Main
  4183                           
  4184                           ;Main_B1.c: 119: ;;
  4185                           ;Main_B1.c: 120: ;;
  4186                           ;Main_B1.c: 121: Exception_Main();
  4187  179D  3185  2528  3197   	fcall	_Exception_Main
  4188  17A0  2F6A               	goto	l9581
  4189  17A1                     __end_of_main:	
  4190                           ;Main_B1.c: 128: }
  4191                           ;Main_B1.c: 129: }
  4192                           ;Main_B1.c: 163: }
  4193                           ;Main_B1.c: 164: return (0);
  4194                           ;	Return value of _main is never used
  4195                           
  4196                           
  4197                           	psect	text1
  4198  143A                     __ptext1:	
  4199 ;; *************** function _my_MainTimer *****************
  4200 ;; Defined at:
  4201 ;;		line 185 in file "../src/Main_B1.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;		None
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;		None
  4206 ;; Return value:  Size  Location     Type
  4207 ;;		None               void
  4208 ;; Registers used:
  4209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;Total ram usage:        1 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    5
  4222 ;; This function calls:
  4223 ;;		_setBuz
  4224 ;; This function is called by:
  4225 ;;		_main
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function _my_MainTimer
  4231  143A                     _my_MainTimer:	
  4232                           
  4233                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4237  143A  0021               	movlb	1	; select bank1
  4238  143B  182E               	btfsc	_myMain^(0+128),0
  4239  143C  2C52               	goto	l9303
  4240                           
  4241                           ;Main_B1.c: 189: myMain.PowerCount++;
  4242  143D  3001               	movlw	1
  4243  143E  00F9               	movwf	??_my_MainTimer
  4244  143F  0879               	movf	??_my_MainTimer,w
  4245  1440  07AF               	addwf	(_myMain^(0+128)+1),f
  4246                           
  4247                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4248  1441  082F               	movf	(_myMain^(0+128)+1),w
  4249  1442  3A4B               	xorlw	75
  4250  1443  1D03               	skipz
  4251  1444  0008               	return
  4252                           
  4253                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4254  1445  01AF               	clrf	(_myMain^(0+128)+1)
  4255                           
  4256                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4257  1446  142E               	bsf	_myMain^(0+128),0
  4258                           
  4259                           ;Main_B1.c: 197: setBuz(3, 50);
  4260  1447  3032               	movlw	50
  4261  1448  0020               	movlb	0	; select bank0
  4262  1449  00A4               	movwf	setBuz@time
  4263  144A  3000               	movlw	0
  4264  144B  00A5               	movwf	setBuz@time+1
  4265  144C  3003               	movlw	3
  4266  144D  3196  269F         	fcall	_setBuz
  4267                           
  4268                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4269  144F  0021               	movlb	1	; select bank1
  4270  1450  162E               	bsf	_myMain^(0+128),4
  4271                           
  4272                           ;Main_B1.c: 207: }
  4273                           ;Main_B1.c: 208: } else {
  4274  1451  0008               	return
  4275  1452                     l9303:	
  4276                           
  4277                           ;Main_B1.c: 209: myMain.PowerCount++;
  4278  1452  3001               	movlw	1
  4279  1453  00F9               	movwf	??_my_MainTimer
  4280  1454  0879               	movf	??_my_MainTimer,w
  4281  1455  07AF               	addwf	(_myMain^(0+128)+1),f
  4282                           
  4283                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4284  1456  082F               	movf	(_myMain^(0+128)+1),w
  4285  1457  3A32               	xorlw	50
  4286  1458  1903               	btfsc	3,2
  4287                           
  4288                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4289  1459  01AF               	clrf	(_myMain^(0+128)+1)
  4290                           
  4291                           ;Main_B1.c: 226: }
  4292                           ;Main_B1.c: 228: myMain.Count1++;
  4293  145A  3001               	movlw	1
  4294  145B  07B2               	addwf	(_myMain^(0+128)+4),f
  4295  145C  3000               	movlw	0
  4296  145D  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4297                           
  4298                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4299  145E  3004               	movlw	4
  4300  145F  3EAE               	addlw	_myMain& (0+255)
  4301  1460  0086               	movwf	6
  4302  1461  0187               	clrf	7
  4303  1462  3F40               	moviw [0]fsr1
  4304  1463  3A32               	xorlw	50
  4305  1464  1D03               	skipz
  4306  1465  2C68               	goto	u10405
  4307  1466  3F41               	moviw [1]fsr1
  4308  1467  3A00               	xorlw	0
  4309  1468                     u10405:	
  4310  1468  1D03               	skipz
  4311  1469  0008               	return
  4312                           
  4313                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4314  146A  01B2               	clrf	(_myMain^(0+128)+4)
  4315  146B  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4316                           
  4317                           ;Main_B1.c: 242: if (myMain.Flag) {
  4318  146C  1CAE               	btfss	_myMain^(0+128),1
  4319  146D  2C70               	goto	l1455
  4320                           
  4321                           ;Main_B1.c: 243: myMain.Flag = 0;
  4322  146E  10AE               	bcf	_myMain^(0+128),1
  4323                           
  4324                           ;Main_B1.c: 252: } else {
  4325  146F  0008               	return
  4326  1470                     l1455:	
  4327                           
  4328                           ;Main_B1.c: 253: myMain.Flag = 1;
  4329  1470  14AE               	bsf	_myMain^(0+128),1
  4330  1471  0008               	return
  4331  1472                     __end_of_my_MainTimer:	
  4332                           
  4333                           	psect	text2
  4334  1E75                     __ptext2:	
  4335 ;; *************** function _myMain_Initialization *****************
  4336 ;; Defined at:
  4337 ;;		line 170 in file "../src/Main_B1.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;Total ram usage:        1 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    3
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _myMain_Initialization
  4367  1E75                     _myMain_Initialization:	
  4368                           
  4369                           ;Main_B1.c: 173: product = &_product;
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4373  1E75  3020               	movlw	__product& (0+255)
  4374  1E76  00F2               	movwf	??_myMain_Initialization
  4375  1E77  0872               	movf	??_myMain_Initialization,w
  4376  1E78  0020               	movlb	0	; select bank0
  4377  1E79  00EC               	movwf	_product
  4378                           
  4379                           ;Main_B1.c: 174: product->Data[20] = 209;
  4380  1E7A  30D1               	movlw	209
  4381  1E7B  00F2               	movwf	??_myMain_Initialization
  4382  1E7C  086C               	movf	_product,w
  4383  1E7D  3E14               	addlw	20
  4384  1E7E  0086               	movwf	6
  4385  1E7F  3002               	movlw	2	; select bank4/5
  4386  1E80  0087               	movwf	7
  4387  1E81  0872               	movf	??_myMain_Initialization,w
  4388  1E82  0081               	movwf	1
  4389  1E83  0008               	return
  4390  1E84                     __end_of_myMain_Initialization:	
  4391                           
  4392                           	psect	text3
  4393  1472                     __ptext3:	
  4394 ;; *************** function _getTemp_AD *****************
  4395 ;; Defined at:
  4396 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  channel         1    wreg     unsigned char 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  channel         1    7[COMMON] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        2 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    5
  4417 ;; This function calls:
  4418 ;;		_getAD
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _getTemp_AD
  4426  1472                     _getTemp_AD:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4430                           ;getTemp_AD@channel stored from wreg
  4431  1472  00F7               	movwf	getTemp_AD@channel
  4432                           
  4433                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4434  1473  0021               	movlb	1	; select bank1
  4435  1474  1D56               	btfss	_Temp^(0+128),2
  4436  1475  0008               	return
  4437                           
  4438                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4439  1476  30F0               	movlw	240
  4440  1477  00F6               	movwf	??_getTemp_AD
  4441  1478  0876               	movf	??_getTemp_AD,w
  4442  1479  00F2               	movwf	getAD@adcon1
  4443  147A  0877               	movf	getTemp_AD@channel,w
  4444  147B  3190  20E6  3194   	fcall	_getAD
  4445  147E  0873               	movf	?_getAD+1,w
  4446  147F  0021               	movlb	1	; select bank1
  4447  1480  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4448  1481  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4449  1482  0872               	movf	?_getAD,w
  4450  1483  01E2               	clrf	(_Temp^(0+128)+12)
  4451  1484  07E2               	addwf	(_Temp^(0+128)+12),f
  4452                           
  4453                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4454  1485  300C               	movlw	12
  4455  1486  3ED6               	addlw	_Temp& (0+255)
  4456  1487  0086               	movwf	6
  4457  1488  0187               	clrf	7
  4458  1489  0016               	moviw fsr1++
  4459  148A  0401               	iorwf	1,w
  4460  148B  1903               	skipnz
  4461  148C  0008               	return
  4462                           
  4463                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4464  148D  0863               	movf	((_Temp+1)^(0+128)+12),w
  4465  148E  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4466  148F  1D03               	skipz
  4467  1490  2C93               	goto	u10355
  4468  1491  0862               	movf	(_Temp^(0+128)+12),w
  4469  1492  025E               	subwf	(_Temp^(0+128)+8),w
  4470  1493                     u10355:	
  4471  1493  1803               	skipnc
  4472  1494  2C9C               	goto	l9285
  4473                           
  4474                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4475  1495  0863               	movf	((_Temp+1)^(0+128)+12),w
  4476  1496  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4477  1497  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4478  1498  0862               	movf	(_Temp^(0+128)+12),w
  4479  1499  01DE               	clrf	(_Temp^(0+128)+8)
  4480  149A  07DE               	addwf	(_Temp^(0+128)+8),f
  4481                           
  4482                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4483  149B  0008               	return
  4484  149C                     l9285:	
  4485  149C  0863               	movf	((_Temp+1)^(0+128)+12),w
  4486  149D  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4487  149E  1D03               	skipz
  4488  149F  2CA2               	goto	u10365
  4489  14A0  0862               	movf	(_Temp^(0+128)+12),w
  4490  14A1  0260               	subwf	(_Temp^(0+128)+10),w
  4491  14A2                     u10365:	
  4492  14A2  1803               	skipnc
  4493  14A3  0008               	return
  4494                           
  4495                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4496  14A4  0863               	movf	((_Temp+1)^(0+128)+12),w
  4497  14A5  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4498  14A6  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4499  14A7  0862               	movf	(_Temp^(0+128)+12),w
  4500  14A8  01E0               	clrf	(_Temp^(0+128)+10)
  4501  14A9  07E0               	addwf	(_Temp^(0+128)+10),f
  4502  14AA  0008               	return
  4503  14AB                     __end_of_getTemp_AD:	
  4504                           
  4505                           	psect	text4
  4506  0BBD                     __ptext4:	
  4507 ;; *************** function _getLoad_AD *****************
  4508 ;; Defined at:
  4509 ;;		line 15 in file "../src/OverLoad_B1.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  channel         1    wreg     unsigned char 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  channel         1    0[BANK0 ] unsigned char 
  4514 ;;  i               1    3[BANK0 ] unsigned char 
  4515 ;;  j               1    2[BANK0 ] unsigned char 
  4516 ;;  k               1    1[BANK0 ] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;		None               void
  4519 ;; Registers used:
  4520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;Total ram usage:        6 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    5
  4533 ;; This function calls:
  4534 ;;		_getAD
  4535 ;; This function is called by:
  4536 ;;		_main
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _getLoad_AD
  4542  0BBD                     _getLoad_AD:	
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4546                           ;getLoad_AD@channel stored from wreg
  4547  0BBD  0020               	movlb	0	; select bank0
  4548  0BBE  00A0               	movwf	getLoad_AD@channel
  4549                           
  4550                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4551  0BBF  01A3               	clrf	getLoad_AD@i
  4552  0BC0  01A2               	clrf	getLoad_AD@j
  4553  0BC1  01A1               	clrf	getLoad_AD@k
  4554                           
  4555                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4556  0BC2  0022               	movlb	2	; select bank2
  4557  0BC3  1E2A               	btfss	_Load^(0+256),4
  4558  0BC4  0008               	return
  4559                           
  4560                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4561  0BC5  30F3               	movlw	243
  4562  0BC6  00F6               	movwf	??_getLoad_AD
  4563  0BC7  0876               	movf	??_getLoad_AD,w
  4564  0BC8  00F2               	movwf	getAD@adcon1
  4565  0BC9  0020               	movlb	0	; select bank0
  4566  0BCA  0820               	movf	getLoad_AD@channel,w
  4567  0BCB  3190  20E6  318B   	fcall	_getAD
  4568  0BCE  0873               	movf	?_getAD+1,w
  4569  0BCF  0022               	movlb	2	; select bank2
  4570  0BD0  01CC               	clrf	((_Load+1)^(0+256)+33)
  4571  0BD1  07CC               	addwf	((_Load+1)^(0+256)+33),f
  4572  0BD2  0872               	movf	?_getAD,w
  4573  0BD3  01CB               	clrf	(_Load^(0+256)+33)
  4574  0BD4  07CB               	addwf	(_Load^(0+256)+33),f
  4575                           
  4576                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4577  0BD5  0020               	movlb	0	; select bank0
  4578  0BD6  01A3               	clrf	getLoad_AD@i
  4579  0BD7  3004               	movlw	4
  4580  0BD8  0223               	subwf	getLoad_AD@i,w
  4581  0BD9  1803               	btfsc	3,0
  4582  0BDA  2C07               	goto	l9255
  4583  0BDB                     l9243:	
  4584                           
  4585                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4586  0BDB  3523               	lslf	getLoad_AD@i,w
  4587  0BDC  3E35               	addlw	(_Load+11)& (0+255)
  4588  0BDD  0086               	movwf	6
  4589  0BDE  3001               	movlw	1	; select bank2/3
  4590  0BDF  0087               	movwf	7
  4591  0BE0  3F40               	moviw [0]fsr1
  4592  0BE1  00F6               	movwf	??_getLoad_AD
  4593  0BE2  3F41               	moviw [1]fsr1
  4594  0BE3  00F7               	movwf	??_getLoad_AD+1
  4595  0BE4  0022               	movlb	2	; select bank2
  4596  0BE5  084C               	movf	((_Load+1)^(0+256)+33),w
  4597  0BE6  0277               	subwf	??_getLoad_AD+1,w
  4598  0BE7  1D03               	skipz
  4599  0BE8  2BEB               	goto	u10255
  4600  0BE9  084B               	movf	(_Load^(0+256)+33),w
  4601  0BEA  0276               	subwf	??_getLoad_AD,w
  4602  0BEB                     u10255:	
  4603  0BEB  1803               	skipnc
  4604  0BEC  2BFE               	goto	l9251
  4605  0BED  0020               	movlb	0	; select bank0
  4606  0BEE  08A2               	movf	getLoad_AD@j,f
  4607  0BEF  1D03               	skipz
  4608  0BF0  2BFE               	goto	l9251
  4609                           
  4610                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4611  0BF1  3523               	lslf	getLoad_AD@i,w
  4612  0BF2  3E35               	addlw	(_Load+11)& (0+255)
  4613  0BF3  0086               	movwf	6
  4614  0BF4  3001               	movlw	1	; select bank2/3
  4615  0BF5  0087               	movwf	7
  4616  0BF6  0022               	movlb	2	; select bank2
  4617  0BF7  084B               	movf	(_Load^(0+256)+33),w
  4618  0BF8  3FC0               	movwi [0]fsr1
  4619  0BF9  084C               	movf	((_Load+1)^(0+256)+33),w
  4620  0BFA  3FC1               	movwi [1]fsr1
  4621                           
  4622                           ;OverLoad_B1.c: 24: j = 1;
  4623  0BFB  0020               	movlb	0	; select bank0
  4624  0BFC  01A2               	clrf	getLoad_AD@j
  4625  0BFD  0AA2               	incf	getLoad_AD@j,f
  4626  0BFE                     l9251:	
  4627  0BFE  3001               	movlw	1
  4628  0BFF  00F6               	movwf	??_getLoad_AD
  4629  0C00  0876               	movf	??_getLoad_AD,w
  4630  0C01  0020               	movlb	0	; select bank0
  4631  0C02  07A3               	addwf	getLoad_AD@i,f
  4632  0C03  3004               	movlw	4
  4633  0C04  0223               	subwf	getLoad_AD@i,w
  4634  0C05  1C03               	skipc
  4635  0C06  2BDB               	goto	l9243
  4636  0C07                     l9255:	
  4637                           
  4638                           ;OverLoad_B1.c: 25: }
  4639                           ;OverLoad_B1.c: 26: }
  4640                           ;OverLoad_B1.c: 27: if (j == 0) {
  4641  0C07  08A2               	movf	getLoad_AD@j,f
  4642  0C08  1D03               	skipz
  4643  0C09  0008               	return
  4644                           
  4645                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4646  0C0A  01A3               	clrf	getLoad_AD@i
  4647  0C0B                     L1:	
  4648  0C0B  3004               	movlw	4
  4649  0C0C  0223               	subwf	getLoad_AD@i,w
  4650  0C0D  1803               	btfsc	3,0
  4651  0C0E  0008               	return
  4652                           
  4653                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4654  0C0F  3523               	lslf	getLoad_AD@i,w
  4655  0C10  3E3F               	addlw	(_Load+21)& (0+255)
  4656  0C11  0086               	movwf	6
  4657  0C12  3001               	movlw	1	; select bank2/3
  4658  0C13  0087               	movwf	7
  4659  0C14  3F40               	moviw [0]fsr1
  4660  0C15  00F6               	movwf	??_getLoad_AD
  4661  0C16  3F41               	moviw [1]fsr1
  4662  0C17  00F7               	movwf	??_getLoad_AD+1
  4663  0C18  0877               	movf	??_getLoad_AD+1,w
  4664  0C19  0022               	movlb	2	; select bank2
  4665  0C1A  024C               	subwf	((_Load+1)^(0+256)+33),w
  4666  0C1B  1D03               	skipz
  4667  0C1C  2C1F               	goto	u10305
  4668  0C1D  0876               	movf	??_getLoad_AD,w
  4669  0C1E  024B               	subwf	(_Load^(0+256)+33),w
  4670  0C1F                     u10305:	
  4671  0C1F  1803               	skipnc
  4672  0C20  2C32               	goto	l9271
  4673  0C21  0020               	movlb	0	; select bank0
  4674  0C22  08A1               	movf	getLoad_AD@k,f
  4675  0C23  1D03               	skipz
  4676  0C24  2C32               	goto	l9271
  4677                           
  4678                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4679  0C25  3523               	lslf	getLoad_AD@i,w
  4680  0C26  3E3F               	addlw	(_Load+21)& (0+255)
  4681  0C27  0086               	movwf	6
  4682  0C28  3001               	movlw	1	; select bank2/3
  4683  0C29  0087               	movwf	7
  4684  0C2A  0022               	movlb	2	; select bank2
  4685  0C2B  084B               	movf	(_Load^(0+256)+33),w
  4686  0C2C  3FC0               	movwi [0]fsr1
  4687  0C2D  084C               	movf	((_Load+1)^(0+256)+33),w
  4688  0C2E  3FC1               	movwi [1]fsr1
  4689                           
  4690                           ;OverLoad_B1.c: 31: k = 1;
  4691  0C2F  0020               	movlb	0	; select bank0
  4692  0C30  01A1               	clrf	getLoad_AD@k
  4693  0C31  0AA1               	incf	getLoad_AD@k,f
  4694  0C32                     l9271:	
  4695  0C32  3001               	movlw	1
  4696  0C33  00F6               	movwf	??_getLoad_AD
  4697  0C34  0876               	movf	??_getLoad_AD,w
  4698  0C35  0020               	movlb	0	; select bank0
  4699  0C36  07A3               	addwf	getLoad_AD@i,f
  4700  0C37  2C0B               	goto	L1
  4701  0C38                     __end_of_getLoad_AD:	
  4702                           
  4703                           	psect	text5
  4704  10E6                     __ptext5:	
  4705 ;; *************** function _getAD *****************
  4706 ;; Defined at:
  4707 ;;		line 443 in file "../src/MCU_B1.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  adcon0          1    wreg     unsigned char 
  4710 ;;  adcon1          1    2[COMMON] unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  adcon0          1    5[COMMON] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  2    2[COMMON] int 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4722 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;Total ram usage:        4 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    4
  4729 ;; This function calls:
  4730 ;;		_Timeout_Counter
  4731 ;;		_set_TimeoutCleared
  4732 ;; This function is called by:
  4733 ;;		_getLoad_AD
  4734 ;;		_getTemp_AD
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _getAD
  4740  10E6                     _getAD:	
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4744                           ;getAD@adcon0 stored from wreg
  4745  10E6  00F5               	movwf	getAD@adcon0
  4746                           
  4747                           ;MCU_B1.c: 444: ADCON0 = adcon0;
  4748  10E7  0875               	movf	getAD@adcon0,w
  4749  10E8  0021               	movlb	1	; select bank1
  4750  10E9  009D               	movwf	29	;volatile
  4751                           
  4752                           ;MCU_B1.c: 445: ADCON1 = adcon1;
  4753  10EA  0872               	movf	getAD@adcon1,w
  4754  10EB  009E               	movwf	30	;volatile
  4755                           
  4756                           ;MCU_B1.c: 446: GO_nDONE = 1;
  4757  10EC  149D               	bsf	29,1	;volatile
  4758                           
  4759                           ;MCU_B1.c: 447: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4760  10ED  28F1               	goto	l8909
  4761  10EE                     l8907:	
  4762                           
  4763                           ;MCU_B1.c: 448: Timeout_Counter();
  4764  10EE  319F  27EB  3190   	fcall	_Timeout_Counter
  4765  10F1                     l8909:	
  4766  10F1  0021               	movlb	1	; select bank1
  4767  10F2  1C9D               	btfss	29,1	;volatile
  4768  10F3  28F6               	goto	l8913
  4769  10F4  1D39               	btfss	(_myMain^(0+128)+11),2
  4770  10F5  28EE               	goto	l8907
  4771  10F6                     l8913:	
  4772                           
  4773                           ;MCU_B1.c: 449: };
  4774                           ;MCU_B1.c: 450: set_TimeoutCleared();
  4775  10F6  3187  27FB         	fcall	_set_TimeoutCleared
  4776                           
  4777                           ;MCU_B1.c: 451: return ((ADRESH*256)+ADRESL);
  4778  10F8  0021               	movlb	1	; select bank1
  4779  10F9  081C               	movf	28,w	;volatile
  4780  10FA  01F3               	clrf	?_getAD+1
  4781  10FB  07F3               	addwf	?_getAD+1,f
  4782  10FC  081B               	movf	27,w	;volatile
  4783  10FD  01F2               	clrf	?_getAD
  4784  10FE  07F2               	addwf	?_getAD,f
  4785  10FF  0008               	return
  4786  1100                     __end_of_getAD:	
  4787                           
  4788                           	psect	text6
  4789  1EE4                     __ptext6:	
  4790 ;; *************** function _WDT_Main *****************
  4791 ;; Defined at:
  4792 ;;		line 1087 in file "../src/MCU_B1.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;		None
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;Total ram usage:        1 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    4
  4813 ;; This function calls:
  4814 ;;		_WDT_Clearing
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _WDT_Main
  4822  1EE4                     _WDT_Main:	
  4823                           
  4824                           ;MCU_B1.c: 1088: if (WDT.Enable == 1) {
  4825                           
  4826                           ;incstack = 0
  4827                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4828  1EE4  0022               	movlb	2	; select bank2
  4829  1EE5  1C28               	btfss	_WDT^(0+256),0
  4830  1EE6  0008               	return
  4831                           
  4832                           ;MCU_B1.c: 1089: if (WDT.Timer-- > 0) {
  4833  1EE7  3001               	movlw	1
  4834  1EE8  02A9               	subwf	(_WDT^(0+256)+1),f
  4835  1EE9  0829               	movf	(_WDT^(0+256)+1),w
  4836  1EEA  3AFF               	xorlw	255
  4837  1EEB  1903               	skipnz
  4838  1EEC  0008               	return
  4839                           
  4840                           ;MCU_B1.c: 1090: WDT.Timer = 100;
  4841  1EED  3064               	movlw	100
  4842  1EEE  00F2               	movwf	??_WDT_Main
  4843  1EEF  0872               	movf	??_WDT_Main,w
  4844  1EF0  00A9               	movwf	(_WDT^(0+256)+1)
  4845                           
  4846                           ;MCU_B1.c: 1091: WDT_Clearing();
  4847  1EF1  3180  2002         	fcall	_WDT_Clearing
  4848  1EF3  0008               	return
  4849  1EF4                     __end_of_WDT_Main:	
  4850                           
  4851                           	psect	text7
  4852  0002                     __ptext7:	
  4853 ;; *************** function _WDT_Clearing *****************
  4854 ;; Defined at:
  4855 ;;		line 1097 in file "../src/MCU_B1.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;		None               void
  4862 ;; Registers used:
  4863 ;;		None
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    3
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_WDT_Main
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _WDT_Clearing
  4885  0002                     _WDT_Clearing:	
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _WDT_Clearing: []
  4889  0002  0064               	clrwdt	;# 
  4890  0003  0008               	return
  4891  0004                     __end_of_WDT_Clearing:	
  4892                           
  4893                           	psect	text8
  4894  1CD3                     __ptext8:	
  4895 ;; *************** function _Temp_Main *****************
  4896 ;; Defined at:
  4897 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    6
  4918 ;; This function calls:
  4919 ;;		_setTemp_Main
  4920 ;; This function is called by:
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _Temp_Main
  4927  1CD3                     _Temp_Main:	
  4928                           
  4929                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4933  1CD3  318D  25E6         	fcall	_setTemp_Main
  4934  1CD5  0008               	return
  4935  1CD6                     __end_of_Temp_Main:	
  4936                           
  4937                           	psect	text9
  4938  0DE6                     __ptext9:	
  4939 ;; *************** function _setTemp_Main *****************
  4940 ;; Defined at:
  4941 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  error           1   63[BANK0 ] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;		None               void
  4948 ;; Registers used:
  4949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;Total ram usage:        3 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    5
  4962 ;; This function calls:
  4963 ;;		_getMain_All_Error_Status
  4964 ;;		_setBuz
  4965 ;;		_setProductData
  4966 ;; This function is called by:
  4967 ;;		_Temp_Main
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           
  4972                           ;psect for function _setTemp_Main
  4973  0DE6                     _setTemp_Main:	
  4974                           
  4975                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4979  0DE6  3000               	movlw	0
  4980  0DE7  3192  22D2  318D   	fcall	_getMain_All_Error_Status
  4981  0DEA  0020               	movlb	0	; select bank0
  4982  0DEB  00DD               	movwf	??_setTemp_Main
  4983  0DEC  085D               	movf	??_setTemp_Main,w
  4984  0DED  00DF               	movwf	setTemp_Main@error
  4985                           
  4986                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4987  0DEE  0021               	movlb	1	; select bank1
  4988  0DEF  1C56               	btfss	_Temp^(0+128),0
  4989  0DF0  2E92               	goto	l1793
  4990                           
  4991                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4992  0DF1  1956               	btfsc	_Temp^(0+128),2
  4993  0DF2  2E02               	goto	l8931
  4994                           
  4995                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4996  0DF3  3001               	movlw	1
  4997  0DF4  07D7               	addwf	(_Temp^(0+128)+1),f
  4998  0DF5  3000               	movlw	0
  4999  0DF6  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5000                           
  5001                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5002  0DF7  3000               	movlw	0
  5003  0DF8  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5004  0DF9  30FA               	movlw	250
  5005  0DFA  1903               	skipnz
  5006  0DFB  0257               	subwf	(_Temp^(0+128)+1),w
  5007  0DFC  1C03               	skipc
  5008  0DFD  0008               	return
  5009                           
  5010                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5011  0DFE  01D7               	clrf	(_Temp^(0+128)+1)
  5012  0DFF  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5013                           
  5014                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5015  0E00  1556               	bsf	_Temp^(0+128),2
  5016                           
  5017                           ;OverTemperature_B1.c: 70: }
  5018                           ;OverTemperature_B1.c: 71: } else {
  5019  0E01  0008               	return
  5020  0E02                     l8931:	
  5021                           
  5022                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5023  0E02  3001               	movlw	1
  5024  0E03  07D7               	addwf	(_Temp^(0+128)+1),f
  5025  0E04  3000               	movlw	0
  5026  0E05  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5027                           
  5028                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5029  0E06  3000               	movlw	0
  5030  0E07  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5031  0E08  3002               	movlw	2
  5032  0E09  1903               	skipnz
  5033  0E0A  0257               	subwf	(_Temp^(0+128)+1),w
  5034  0E0B  1C03               	skipc
  5035  0E0C  0008               	return
  5036                           
  5037                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5038  0E0D  01D7               	clrf	(_Temp^(0+128)+1)
  5039  0E0E  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5040                           
  5041                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5042  0E0F  3008               	movlw	8
  5043  0E10  3ED6               	addlw	_Temp& (0+255)
  5044  0E11  0086               	movwf	6
  5045  0E12  0187               	clrf	7
  5046  0E13  0016               	moviw fsr1++
  5047  0E14  0401               	iorwf	1,w
  5048  0E15  1903               	skipnz
  5049  0E16  2E8C               	goto	l1798
  5050  0E17  300A               	movlw	10
  5051  0E18  3ED6               	addlw	_Temp& (0+255)
  5052  0E19  0086               	movwf	6
  5053  0E1A  0187               	clrf	7
  5054  0E1B  0016               	moviw fsr1++
  5055  0E1C  0401               	iorwf	1,w
  5056  0E1D  1903               	skipnz
  5057  0E1E  2E8C               	goto	l1798
  5058                           
  5059                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5060  0E1F  1156               	bcf	_Temp^(0+128),2
  5061                           
  5062                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5063  0E20  300A               	movlw	10
  5064  0E21  3ED6               	addlw	_Temp& (0+255)
  5065  0E22  0086               	movwf	6
  5066  0E23  0187               	clrf	7
  5067  0E24  3008               	movlw	8
  5068  0E25  3ED6               	addlw	_Temp& (0+255)
  5069  0E26  0084               	movwf	4
  5070  0E27  0185               	clrf	5
  5071  0E28  3F40               	moviw [0]fsr1
  5072  0E29  0700               	addwf	0,w
  5073  0E2A  0020               	movlb	0	; select bank0
  5074  0E2B  00DD               	movwf	??_setTemp_Main
  5075  0E2C  3101               	addfsr 0,1
  5076  0E2D  3F41               	moviw [1]fsr1
  5077  0E2E  3D00               	addwfc	0,w
  5078  0E2F  00DE               	movwf	??_setTemp_Main+1
  5079  0E30  36DE               	lsrf	??_setTemp_Main+1,f
  5080  0E31  0CDD               	rrf	??_setTemp_Main,f
  5081  0E32  085D               	movf	??_setTemp_Main,w
  5082  0E33  0021               	movlb	1	; select bank1
  5083  0E34  00DC               	movwf	(_Temp^(0+128)+6)
  5084  0E35  0020               	movlb	0	; select bank0
  5085  0E36  085E               	movf	??_setTemp_Main+1,w
  5086  0E37  0021               	movlb	1	; select bank1
  5087  0E38  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5088                           
  5089                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5090  0E39  3090               	movlw	144
  5091  0E3A  00E4               	movwf	(_Temp^(0+128)+14)
  5092  0E3B  3001               	movlw	1
  5093  0E3C  00E5               	movwf	(_Temp^(0+128)+15)
  5094                           
  5095                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5096  0E3D  3059               	movlw	89
  5097  0E3E  00E6               	movwf	(_Temp^(0+128)+16)
  5098  0E3F  3001               	movlw	1
  5099  0E40  00E7               	movwf	(_Temp^(0+128)+17)
  5100                           
  5101                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5102  0E41  1CD6               	btfss	_Temp^(0+128),1
  5103  0E42  2E63               	goto	l8963
  5104                           
  5105                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5106  0E43  0865               	movf	((_Temp+1)^(0+128)+14),w
  5107  0E44  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5108  0E45  1D03               	skipz
  5109  0E46  2E49               	goto	u9775
  5110  0E47  0864               	movf	(_Temp^(0+128)+14),w
  5111  0E48  025C               	subwf	(_Temp^(0+128)+6),w
  5112  0E49                     u9775:	
  5113  0E49  1C03               	skipc
  5114  0E4A  2E61               	goto	l8961
  5115                           
  5116                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5117  0E4B  3001               	movlw	1
  5118  0E4C  0020               	movlb	0	; select bank0
  5119  0E4D  00DD               	movwf	??_setTemp_Main
  5120  0E4E  085D               	movf	??_setTemp_Main,w
  5121  0E4F  0021               	movlb	1	; select bank1
  5122  0E50  07D9               	addwf	(_Temp^(0+128)+3),f
  5123                           
  5124                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5125  0E51  3003               	movlw	3
  5126  0E52  0259               	subwf	(_Temp^(0+128)+3),w
  5127  0E53  1C03               	skipc
  5128  0E54  2E79               	goto	l8975
  5129                           
  5130                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5131  0E55  01D9               	clrf	(_Temp^(0+128)+3)
  5132                           
  5133                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5134  0E56  10D6               	bcf	_Temp^(0+128),1
  5135                           
  5136                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5137  0E57  3064               	movlw	100
  5138  0E58  0020               	movlb	0	; select bank0
  5139  0E59  00A4               	movwf	setBuz@time
  5140  0E5A  3000               	movlw	0
  5141  0E5B  00A5               	movwf	setBuz@time+1
  5142  0E5C  3002               	movlw	2
  5143  0E5D  3196  269F  318D   	fcall	_setBuz
  5144                           
  5145                           ;OverTemperature_B1.c: 103: }
  5146                           ;OverTemperature_B1.c: 104: } else {
  5147  0E60  2E79               	goto	l8975
  5148  0E61                     l8961:	
  5149                           
  5150                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5151  0E61  0021               	movlb	1	; select bank1
  5152  0E62  2E78               	goto	l8973
  5153  0E63                     l8963:	
  5154                           ;OverTemperature_B1.c: 106: }
  5155                           ;OverTemperature_B1.c: 107: } else {
  5156                           
  5157                           
  5158                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5159  0E63  085D               	movf	((_Temp+1)^(0+128)+6),w
  5160  0E64  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5161  0E65  1D03               	skipz
  5162  0E66  2E69               	goto	u9795
  5163  0E67  085C               	movf	(_Temp^(0+128)+6),w
  5164  0E68  0266               	subwf	(_Temp^(0+128)+16),w
  5165  0E69                     u9795:	
  5166  0E69  1C03               	skipc
  5167  0E6A  2E78               	goto	l8973
  5168                           
  5169                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5170  0E6B  3001               	movlw	1
  5171  0E6C  0020               	movlb	0	; select bank0
  5172  0E6D  00DD               	movwf	??_setTemp_Main
  5173  0E6E  085D               	movf	??_setTemp_Main,w
  5174  0E6F  0021               	movlb	1	; select bank1
  5175  0E70  07D9               	addwf	(_Temp^(0+128)+3),f
  5176                           
  5177                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5178  0E71  3003               	movlw	3
  5179  0E72  0259               	subwf	(_Temp^(0+128)+3),w
  5180  0E73  1C03               	skipc
  5181  0E74  2E79               	goto	l8975
  5182                           
  5183                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5184  0E75  01D9               	clrf	(_Temp^(0+128)+3)
  5185                           
  5186                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5187  0E76  14D6               	bsf	_Temp^(0+128),1
  5188                           
  5189                           ;OverTemperature_B1.c: 113: }
  5190                           ;OverTemperature_B1.c: 114: } else {
  5191  0E77  2E79               	goto	l8975
  5192  0E78                     l8973:	
  5193                           
  5194                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5195  0E78  01D9               	clrf	(_Temp^(0+128)+3)
  5196  0E79                     l8975:	
  5197                           
  5198                           ;OverTemperature_B1.c: 116: }
  5199                           ;OverTemperature_B1.c: 117: }
  5200                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5201  0E79  0021               	movlb	1	; select bank1
  5202  0E7A  085D               	movf	((_Temp+1)^(0+128)+6),w
  5203  0E7B  0020               	movlb	0	; select bank0
  5204  0E7C  00DD               	movwf	??_setTemp_Main
  5205  0E7D  085D               	movf	??_setTemp_Main,w
  5206  0E7E  00DA               	movwf	setProductData@value
  5207  0E7F  3018               	movlw	24
  5208  0E80  319D  25D4  318D   	fcall	_setProductData
  5209                           
  5210                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5211  0E83  0021               	movlb	1	; select bank1
  5212  0E84  085C               	movf	(_Temp^(0+128)+6),w
  5213  0E85  0020               	movlb	0	; select bank0
  5214  0E86  00DD               	movwf	??_setTemp_Main
  5215  0E87  085D               	movf	??_setTemp_Main,w
  5216  0E88  00DA               	movwf	setProductData@value
  5217  0E89  3019               	movlw	25
  5218  0E8A  319D  25D4         	fcall	_setProductData
  5219  0E8C                     l1798:	
  5220                           
  5221                           ;OverTemperature_B1.c: 135: }
  5222                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5223  0E8C  0021               	movlb	1	; select bank1
  5224  0E8D  01DE               	clrf	(_Temp^(0+128)+8)
  5225  0E8E  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5226                           
  5227                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5228  0E8F  01E0               	clrf	(_Temp^(0+128)+10)
  5229  0E90  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5230                           
  5231                           ;OverTemperature_B1.c: 138: }
  5232                           ;OverTemperature_B1.c: 139: }
  5233                           ;OverTemperature_B1.c: 141: } else {
  5234  0E91  0008               	return
  5235  0E92                     l1793:	
  5236                           
  5237                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5238  0E92  1C2E               	btfss	_myMain^(0+128),0
  5239  0E93  0008               	return
  5240                           
  5241                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5242  0E94  1456               	bsf	_Temp^(0+128),0
  5243  0E95  0008               	return
  5244  0E96                     __end_of_setTemp_Main:	
  5245                           
  5246                           	psect	text10
  5247  1CD0                     __ptext10:	
  5248 ;; *************** function _Temp_Initialization *****************
  5249 ;; Defined at:
  5250 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    4
  5271 ;; This function calls:
  5272 ;;		_setTemp_Initialization
  5273 ;; This function is called by:
  5274 ;;		_main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _Temp_Initialization
  5280  1CD0                     _Temp_Initialization:	
  5281                           
  5282                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5286  1CD0  319C  24C3         	fcall	_setTemp_Initialization
  5287  1CD2  0008               	return
  5288  1CD3                     __end_of_Temp_Initialization:	
  5289                           
  5290                           	psect	text11
  5291  1CC3                     __ptext11:	
  5292 ;; *************** function _setTemp_Initialization *****************
  5293 ;; Defined at:
  5294 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;		None
  5299 ;; Return value:  Size  Location     Type
  5300 ;;		None               void
  5301 ;; Registers used:
  5302 ;;		None
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;Total ram usage:        0 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    3
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_Temp_Initialization
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _setTemp_Initialization
  5324  1CC3                     _setTemp_Initialization:	
  5325                           
  5326                           ;incstack = 0
  5327                           ; Regs used in _setTemp_Initialization: []
  5328  1CC3  0008               	return
  5329  1CC4                     __end_of_setTemp_Initialization:	
  5330                           
  5331                           	psect	text12
  5332  1D2E                     __ptext12:	
  5333 ;; *************** function _Switch_Main *****************
  5334 ;; Defined at:
  5335 ;;		line 72 in file "../src/Switch_B1.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    7
  5356 ;; This function calls:
  5357 ;;		_TouchPower
  5358 ;;		_setSw_Main
  5359 ;; This function is called by:
  5360 ;;		_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _Switch_Main
  5366  1D2E                     _Switch_Main:	
  5367                           
  5368                           ;Switch_B1.c: 75: setSw_Main(1);
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5372  1D2E  3001               	movlw	1
  5373  1D2F  3181  21E6  319D   	fcall	_setSw_Main
  5374                           
  5375                           ;Switch_B1.c: 87: TouchPower();
  5376  1D32  3190  206E         	fcall	_TouchPower
  5377  1D34  0008               	return
  5378  1D35                     __end_of_Switch_Main:	
  5379                           
  5380                           	psect	text13
  5381  01E6                     __ptext13:	
  5382 ;; *************** function _setSw_Main *****************
  5383 ;; Defined at:
  5384 ;;		line 121 in file "../src/Switch_B1.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  sw              1    wreg     unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  sw              1    9[COMMON] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;		None               void
  5391 ;; Registers used:
  5392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;Total ram usage:        3 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    6
  5405 ;; This function calls:
  5406 ;;		_SwPointSelect
  5407 ;;		_getMain_All_Error_Status
  5408 ;;		_getSw_KeyStatus
  5409 ;;		_setBuz
  5410 ;;		_setDimmerLights_DimmingOn
  5411 ;;		_setDimmerLights_SwOff
  5412 ;;		_setDimmerLights_SwOn
  5413 ;;		_setRF_Learn
  5414 ;; This function is called by:
  5415 ;;		_Switch_Main
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           
  5420                           ;psect for function _setSw_Main
  5421  01E6                     _setSw_Main:	
  5422                           
  5423                           ;incstack = 0
  5424                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5425                           ;setSw_Main@sw stored from wreg
  5426  01E6  00F9               	movwf	setSw_Main@sw
  5427                           
  5428                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5429  01E7  0879               	movf	setSw_Main@sw,w
  5430  01E8  319D  25C9  3181   	fcall	_SwPointSelect
  5431                           
  5432                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5433  01EB  0020               	movlb	0	; select bank0
  5434  01EC  086D               	movf	_Sw,w
  5435  01ED  0086               	movwf	6
  5436  01EE  3001               	movlw	1	; select bank2/3
  5437  01EF  0087               	movwf	7
  5438  01F0  1C01               	btfss	1,0
  5439  01F1  2B4C               	goto	l2499
  5440                           
  5441                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5442  01F2  3000               	movlw	0
  5443  01F3  3192  22D2  3181   	fcall	_getMain_All_Error_Status
  5444  01F6  3800               	iorlw	0
  5445  01F7  1D03               	skipz
  5446  01F8  2A14               	goto	l9083
  5447                           
  5448                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5449  01F9  0020               	movlb	0	; select bank0
  5450  01FA  0A6D               	incf	_Sw,w
  5451  01FB  0086               	movwf	6
  5452  01FC  3001               	movlw	1	; select bank2/3
  5453  01FD  0087               	movwf	7
  5454  01FE  1081               	bcf	1,1
  5455                           
  5456                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5457  01FF  0879               	movf	setSw_Main@sw,w
  5458  0200  319F  2716  3181   	fcall	_getSw_KeyStatus
  5459  0203  3A01               	xorlw	1
  5460  0204  3000               	movlw	0
  5461  0205  1903               	skipnz
  5462  0206  3001               	movlw	1
  5463  0207  0020               	movlb	0	; select bank0
  5464  0208  00A8               	movwf	??_setSw_Main
  5465  0209  086D               	movf	_Sw,w
  5466  020A  0086               	movwf	6
  5467  020B  3001               	movlw	1	; select bank2/3
  5468  020C  0087               	movwf	7
  5469  020D  0DA8               	rlf	??_setSw_Main,f
  5470  020E  0801               	movf	1,w
  5471  020F  0628               	xorwf	??_setSw_Main,w
  5472  0210  39FD               	andlw	-3
  5473  0211  0628               	xorwf	??_setSw_Main,w
  5474  0212  0081               	movwf	1
  5475                           
  5476                           ;Switch_B1.c: 128: } else {
  5477  0213  2A2A               	goto	l2501
  5478  0214                     l9083:	
  5479                           
  5480                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5481  0214  0020               	movlb	0	; select bank0
  5482  0215  0A6D               	incf	_Sw,w
  5483  0216  0086               	movwf	6
  5484  0217  3001               	movlw	1	; select bank2/3
  5485  0218  0087               	movwf	7
  5486  0219  1881               	btfsc	1,1
  5487  021A  2A2A               	goto	l2501
  5488                           
  5489                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5490  021B  0A6D               	incf	_Sw,w
  5491  021C  0086               	movwf	6
  5492  021D  3001               	movlw	1	; select bank2/3
  5493  021E  0087               	movwf	7
  5494  021F  1481               	bsf	1,1
  5495                           
  5496                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5497  0220  086D               	movf	_Sw,w
  5498  0221  0086               	movwf	6
  5499  0222  3001               	movlw	1	; select bank2/3
  5500  0223  0087               	movwf	7
  5501  0224  1081               	bcf	1,1
  5502                           
  5503                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5504  0225  086D               	movf	_Sw,w
  5505  0226  0086               	movwf	6
  5506  0227  3001               	movlw	1	; select bank2/3
  5507  0228  0087               	movwf	7
  5508  0229  1501               	bsf	1,2
  5509  022A                     l2501:	
  5510                           
  5511                           ;Switch_B1.c: 134: }
  5512                           ;Switch_B1.c: 135: }
  5513                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5514  022A  086D               	movf	_Sw,w
  5515  022B  0086               	movwf	6
  5516  022C  3001               	movlw	1	; select bank2/3
  5517  022D  0087               	movwf	7
  5518  022E  1C81               	btfss	1,1
  5519  022F  2AF9               	goto	l9133
  5520                           
  5521                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5522  0230  086D               	movf	_Sw,w
  5523  0231  0086               	movwf	6
  5524  0232  3001               	movlw	1	; select bank2/3
  5525  0233  0087               	movwf	7
  5526  0234  1901               	btfsc	1,2
  5527  0235  2A57               	goto	l9099
  5528                           
  5529                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5530  0236  3001               	movlw	1
  5531  0237  00A8               	movwf	??_setSw_Main
  5532  0238  086D               	movf	_Sw,w
  5533  0239  3E02               	addlw	2
  5534  023A  0086               	movwf	6
  5535  023B  3001               	movlw	1	; select bank2/3
  5536  023C  0087               	movwf	7
  5537  023D  0828               	movf	??_setSw_Main,w
  5538  023E  0781               	addwf	1,f
  5539                           
  5540                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5541  023F  086D               	movf	_Sw,w
  5542  0240  3E02               	addlw	2
  5543  0241  0086               	movwf	6
  5544  0242  3001               	movlw	1	; select bank2/3
  5545  0243  0087               	movwf	7
  5546  0244  3003               	movlw	3
  5547  0245  0201               	subwf	1,w
  5548  0246  1C03               	skipc
  5549  0247  0008               	return
  5550                           
  5551                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5552  0248  086D               	movf	_Sw,w
  5553  0249  3E02               	addlw	2
  5554  024A  0086               	movwf	6
  5555  024B  3001               	movlw	1	; select bank2/3
  5556  024C  0087               	movwf	7
  5557  024D  0181               	clrf	1
  5558                           
  5559                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5560  024E  086D               	movf	_Sw,w
  5561  024F  0086               	movwf	6
  5562  0250  3001               	movlw	1	; select bank2/3
  5563  0251  0087               	movwf	7
  5564  0252  1501               	bsf	1,2
  5565                           
  5566                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5567  0253  0879               	movf	setSw_Main@sw,w
  5568  0254  3193  2300         	fcall	_setDimmerLights_SwOn
  5569                           
  5570                           ;Switch_B1.c: 148: }
  5571                           ;Switch_B1.c: 149: } else {
  5572  0256  0008               	return
  5573  0257                     l9099:	
  5574                           
  5575                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5576  0257  0020               	movlb	0	; select bank0
  5577  0258  086D               	movf	_Sw,w
  5578  0259  0086               	movwf	6
  5579  025A  3001               	movlw	1	; select bank2/3
  5580  025B  0087               	movwf	7
  5581  025C  1981               	btfsc	1,3
  5582  025D  2A89               	goto	l9109
  5583                           
  5584                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5585  025E  086D               	movf	_Sw,w
  5586  025F  3E03               	addlw	3
  5587  0260  0086               	movwf	6
  5588  0261  3001               	movlw	1	; select bank2/3
  5589  0262  0087               	movwf	7
  5590  0263  3001               	movlw	1
  5591  0264  0781               	addwf	1,f
  5592  0265  3141               	addfsr 1,1
  5593  0266  1803               	skipnc
  5594  0267  0A81               	incf	1,f
  5595                           
  5596                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5597  0268  086D               	movf	_Sw,w
  5598  0269  3E03               	addlw	3
  5599  026A  0086               	movwf	6
  5600  026B  3001               	movlw	1	; select bank2/3
  5601  026C  0087               	movwf	7
  5602  026D  3F40               	moviw [0]fsr1
  5603  026E  00A8               	movwf	??_setSw_Main
  5604  026F  3F41               	moviw [1]fsr1
  5605  0270  00A9               	movwf	??_setSw_Main+1
  5606  0271  3000               	movlw	0
  5607  0272  0229               	subwf	??_setSw_Main+1,w
  5608  0273  304B               	movlw	75
  5609  0274  1903               	skipnz
  5610  0275  0228               	subwf	??_setSw_Main,w
  5611  0276  1C03               	skipc
  5612  0277  0008               	return
  5613                           
  5614                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5615  0278  086D               	movf	_Sw,w
  5616  0279  3E03               	addlw	3
  5617  027A  0086               	movwf	6
  5618  027B  3001               	movlw	1	; select bank2/3
  5619  027C  0087               	movwf	7
  5620  027D  3000               	movlw	0
  5621  027E  3FC0               	movwi [0]fsr1
  5622  027F  3FC1               	movwi [1]fsr1
  5623                           
  5624                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5625  0280  086D               	movf	_Sw,w
  5626  0281  0086               	movwf	6
  5627  0282  3001               	movlw	1	; select bank2/3
  5628  0283  0087               	movwf	7
  5629  0284  1581               	bsf	1,3
  5630                           
  5631                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5632  0285  0879               	movf	setSw_Main@sw,w
  5633  0286  3192  2258         	fcall	_setDimmerLights_DimmingOn
  5634                           
  5635                           ;Switch_B1.c: 160: }
  5636                           ;Switch_B1.c: 161: } else {
  5637  0288  0008               	return
  5638  0289                     l9109:	
  5639                           
  5640                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5641  0289  0020               	movlb	0	; select bank0
  5642  028A  086D               	movf	_Sw,w
  5643  028B  0086               	movwf	6
  5644  028C  3001               	movlw	1	; select bank2/3
  5645  028D  0087               	movwf	7
  5646  028E  1A01               	btfsc	1,4
  5647  028F  2AC7               	goto	l9123
  5648                           
  5649                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5650  0290  086D               	movf	_Sw,w
  5651  0291  3E05               	addlw	5
  5652  0292  0086               	movwf	6
  5653  0293  3001               	movlw	1	; select bank2/3
  5654  0294  0087               	movwf	7
  5655  0295  3001               	movlw	1
  5656  0296  0781               	addwf	1,f
  5657  0297  3141               	addfsr 1,1
  5658  0298  1803               	skipnc
  5659  0299  0A81               	incf	1,f
  5660                           
  5661                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5662  029A  086D               	movf	_Sw,w
  5663  029B  3E05               	addlw	5
  5664  029C  0086               	movwf	6
  5665  029D  3001               	movlw	1	; select bank2/3
  5666  029E  0087               	movwf	7
  5667  029F  3F40               	moviw [0]fsr1
  5668  02A0  00A8               	movwf	??_setSw_Main
  5669  02A1  3F41               	moviw [1]fsr1
  5670  02A2  00A9               	movwf	??_setSw_Main+1
  5671  02A3  3000               	movlw	0
  5672  02A4  0229               	subwf	??_setSw_Main+1,w
  5673  02A5  304B               	movlw	75
  5674  02A6  1903               	skipnz
  5675  02A7  0228               	subwf	??_setSw_Main,w
  5676  02A8  1C03               	skipc
  5677  02A9  0008               	return
  5678                           
  5679                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5680  02AA  086D               	movf	_Sw,w
  5681  02AB  3E05               	addlw	5
  5682  02AC  0086               	movwf	6
  5683  02AD  3001               	movlw	1	; select bank2/3
  5684  02AE  0087               	movwf	7
  5685  02AF  3000               	movlw	0
  5686  02B0  3FC0               	movwi [0]fsr1
  5687  02B1  3FC1               	movwi [1]fsr1
  5688                           
  5689                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5690  02B2  086D               	movf	_Sw,w
  5691  02B3  0086               	movwf	6
  5692  02B4  3001               	movlw	1	; select bank2/3
  5693  02B5  0087               	movwf	7
  5694  02B6  1601               	bsf	1,4
  5695                           
  5696                           ;Switch_B1.c: 169: setRF_Learn(1);
  5697  02B7  3001               	movlw	1
  5698  02B8  319F  2727  3181   	fcall	_setRF_Learn
  5699                           
  5700                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5701  02BB  0021               	movlb	1	; select bank1
  5702  02BC  1EAE               	btfss	_myMain^(0+128),5
  5703  02BD  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 171: setBuz(2, 100);
  5706  02BE  3064               	movlw	100
  5707  02BF  0020               	movlb	0	; select bank0
  5708  02C0  00A4               	movwf	setBuz@time
  5709  02C1  3000               	movlw	0
  5710  02C2  00A5               	movwf	setBuz@time+1
  5711  02C3  3002               	movlw	2
  5712  02C4  3196  269F         	fcall	_setBuz
  5713                           
  5714                           ;Switch_B1.c: 172: }
  5715                           ;Switch_B1.c: 176: }
  5716                           ;Switch_B1.c: 177: } else {
  5717  02C6  0008               	return
  5718  02C7                     l9123:	
  5719                           
  5720                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5721  02C7  0020               	movlb	0	; select bank0
  5722  02C8  086D               	movf	_Sw,w
  5723  02C9  0086               	movwf	6
  5724  02CA  3001               	movlw	1	; select bank2/3
  5725  02CB  0087               	movwf	7
  5726  02CC  1A81               	btfsc	1,5
  5727  02CD  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5730  02CE  086D               	movf	_Sw,w
  5731  02CF  3E07               	addlw	7
  5732  02D0  0086               	movwf	6
  5733  02D1  3001               	movlw	1	; select bank2/3
  5734  02D2  0087               	movwf	7
  5735  02D3  3001               	movlw	1
  5736  02D4  0781               	addwf	1,f
  5737  02D5  3141               	addfsr 1,1
  5738  02D6  1803               	skipnc
  5739  02D7  0A81               	incf	1,f
  5740                           
  5741                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5742  02D8  086D               	movf	_Sw,w
  5743  02D9  3E07               	addlw	7
  5744  02DA  0086               	movwf	6
  5745  02DB  3001               	movlw	1	; select bank2/3
  5746  02DC  0087               	movwf	7
  5747  02DD  3F40               	moviw [0]fsr1
  5748  02DE  00A8               	movwf	??_setSw_Main
  5749  02DF  3F41               	moviw [1]fsr1
  5750  02E0  00A9               	movwf	??_setSw_Main+1
  5751  02E1  3000               	movlw	0
  5752  02E2  0229               	subwf	??_setSw_Main+1,w
  5753  02E3  3096               	movlw	150
  5754  02E4  1903               	skipnz
  5755  02E5  0228               	subwf	??_setSw_Main,w
  5756  02E6  1C03               	skipc
  5757  02E7  0008               	return
  5758                           
  5759                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5760  02E8  086D               	movf	_Sw,w
  5761  02E9  3E07               	addlw	7
  5762  02EA  0086               	movwf	6
  5763  02EB  3001               	movlw	1	; select bank2/3
  5764  02EC  0087               	movwf	7
  5765  02ED  3000               	movlw	0
  5766  02EE  3FC0               	movwi [0]fsr1
  5767  02EF  3FC1               	movwi [1]fsr1
  5768                           
  5769                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5770  02F0  086D               	movf	_Sw,w
  5771  02F1  0086               	movwf	6
  5772  02F2  3001               	movlw	1	; select bank2/3
  5773  02F3  0087               	movwf	7
  5774  02F4  1681               	bsf	1,5
  5775                           
  5776                           ;Switch_B1.c: 185: setRF_Learn(0);
  5777  02F5  3000               	movlw	0
  5778  02F6  319F  2727         	fcall	_setRF_Learn
  5779                           
  5780                           ;Switch_B1.c: 188: }
  5781                           ;Switch_B1.c: 189: }
  5782                           ;Switch_B1.c: 190: }
  5783                           ;Switch_B1.c: 191: }
  5784                           ;Switch_B1.c: 192: }
  5785                           ;Switch_B1.c: 193: } else {
  5786  02F8  0008               	return
  5787  02F9                     l9133:	
  5788                           
  5789                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5790  02F9  0020               	movlb	0	; select bank0
  5791  02FA  086D               	movf	_Sw,w
  5792  02FB  0086               	movwf	6
  5793  02FC  3001               	movlw	1	; select bank2/3
  5794  02FD  0087               	movwf	7
  5795  02FE  1D01               	btfss	1,2
  5796  02FF  0008               	return
  5797                           
  5798                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5799  0300  3001               	movlw	1
  5800  0301  00A8               	movwf	??_setSw_Main
  5801  0302  086D               	movf	_Sw,w
  5802  0303  3E02               	addlw	2
  5803  0304  0086               	movwf	6
  5804  0305  3001               	movlw	1	; select bank2/3
  5805  0306  0087               	movwf	7
  5806  0307  0828               	movf	??_setSw_Main,w
  5807  0308  0781               	addwf	1,f
  5808                           
  5809                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5810  0309  086D               	movf	_Sw,w
  5811  030A  3E02               	addlw	2
  5812  030B  0086               	movwf	6
  5813  030C  3001               	movlw	1	; select bank2/3
  5814  030D  0087               	movwf	7
  5815  030E  3003               	movlw	3
  5816  030F  0201               	subwf	1,w
  5817  0310  1C03               	skipc
  5818  0311  0008               	return
  5819                           
  5820                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5821  0312  086D               	movf	_Sw,w
  5822  0313  3E02               	addlw	2
  5823  0314  0086               	movwf	6
  5824  0315  3001               	movlw	1	; select bank2/3
  5825  0316  0087               	movwf	7
  5826  0317  0181               	clrf	1
  5827                           
  5828                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5829  0318  086D               	movf	_Sw,w
  5830  0319  0086               	movwf	6
  5831  031A  3001               	movlw	1	; select bank2/3
  5832  031B  0087               	movwf	7
  5833  031C  1101               	bcf	1,2
  5834                           
  5835                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5836  031D  086D               	movf	_Sw,w
  5837  031E  3E03               	addlw	3
  5838  031F  0086               	movwf	6
  5839  0320  3001               	movlw	1	; select bank2/3
  5840  0321  0087               	movwf	7
  5841  0322  3000               	movlw	0
  5842  0323  3FC0               	movwi [0]fsr1
  5843  0324  3FC1               	movwi [1]fsr1
  5844                           
  5845                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5846  0325  086D               	movf	_Sw,w
  5847  0326  0086               	movwf	6
  5848  0327  3001               	movlw	1	; select bank2/3
  5849  0328  0087               	movwf	7
  5850  0329  1181               	bcf	1,3
  5851                           
  5852                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5853  032A  086D               	movf	_Sw,w
  5854  032B  3E05               	addlw	5
  5855  032C  0086               	movwf	6
  5856  032D  3001               	movlw	1	; select bank2/3
  5857  032E  0087               	movwf	7
  5858  032F  3000               	movlw	0
  5859  0330  3FC0               	movwi [0]fsr1
  5860  0331  3FC1               	movwi [1]fsr1
  5861                           
  5862                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5863  0332  086D               	movf	_Sw,w
  5864  0333  0086               	movwf	6
  5865  0334  3001               	movlw	1	; select bank2/3
  5866  0335  0087               	movwf	7
  5867  0336  1201               	bcf	1,4
  5868                           
  5869                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5870  0337  086D               	movf	_Sw,w
  5871  0338  3E07               	addlw	7
  5872  0339  0086               	movwf	6
  5873  033A  3001               	movlw	1	; select bank2/3
  5874  033B  0087               	movwf	7
  5875  033C  3000               	movlw	0
  5876  033D  3FC0               	movwi [0]fsr1
  5877  033E  3FC1               	movwi [1]fsr1
  5878                           
  5879                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5880  033F  086D               	movf	_Sw,w
  5881  0340  0086               	movwf	6
  5882  0341  3001               	movlw	1	; select bank2/3
  5883  0342  0087               	movwf	7
  5884  0343  1281               	bcf	1,5
  5885                           
  5886                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5887  0344  0879               	movf	setSw_Main@sw,w
  5888  0345  3194  2403  3181   	fcall	_setDimmerLights_SwOff
  5889                           
  5890                           ;Switch_B1.c: 210: setRF_Learn(0);
  5891  0348  3000               	movlw	0
  5892  0349  319F  2727         	fcall	_setRF_Learn
  5893                           
  5894                           ;Switch_B1.c: 212: }
  5895                           ;Switch_B1.c: 213: }
  5896                           ;Switch_B1.c: 214: }
  5897                           ;Switch_B1.c: 215: } else {
  5898  034B  0008               	return
  5899  034C                     l2499:	
  5900                           
  5901                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5902  034C  0021               	movlb	1	; select bank1
  5903  034D  1C2E               	btfss	_myMain^(0+128),0
  5904  034E  0008               	return
  5905                           
  5906                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5907  034F  0020               	movlb	0	; select bank0
  5908  0350  086D               	movf	_Sw,w
  5909  0351  0086               	movwf	6
  5910  0352  3001               	movlw	1	; select bank2/3
  5911  0353  0087               	movwf	7
  5912  0354  1401               	bsf	1,0
  5913  0355  0008               	return
  5914  0356                     __end_of_setSw_Main:	
  5915                           
  5916                           	psect	text14
  5917  1F27                     __ptext14:	
  5918 ;; *************** function _setRF_Learn *****************
  5919 ;; Defined at:
  5920 ;;		line 33 in file "../src/RF_Control_B1.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  command         1    wreg     unsigned char 
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  command         1    3[COMMON] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;		None               void
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;Total ram usage:        2 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    3
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_setSw_Main
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           
  5949                           ;psect for function _setRF_Learn
  5950  1F27                     _setRF_Learn:	
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5954                           ;setRF_Learn@command stored from wreg
  5955  1F27  00F3               	movwf	setRF_Learn@command
  5956                           
  5957                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  5958  1F28  0873               	movf	setRF_Learn@command,w
  5959  1F29  3A01               	xorlw	1
  5960  1F2A  3000               	movlw	0
  5961  1F2B  1903               	skipnz
  5962  1F2C  3001               	movlw	1
  5963  1F2D  00F2               	movwf	??_setRF_Learn
  5964  1F2E  0EF2               	swapf	??_setRF_Learn,f
  5965  1F2F  0DF2               	rlf	??_setRF_Learn,f
  5966  1F30  0DF2               	rlf	??_setRF_Learn,f
  5967  1F31  0021               	movlb	1	; select bank1
  5968  1F32  0820               	movf	_RF1^(0+128),w
  5969  1F33  0672               	xorwf	??_setRF_Learn,w
  5970  1F34  39BF               	andlw	-65
  5971  1F35  0672               	xorwf	??_setRF_Learn,w
  5972  1F36  00A0               	movwf	_RF1^(0+128)
  5973  1F37  0008               	return
  5974  1F38                     __end_of_setRF_Learn:	
  5975                           
  5976                           	psect	text15
  5977  1258                     __ptext15:	
  5978 ;; *************** function _setDimmerLights_DimmingOn *****************
  5979 ;; Defined at:
  5980 ;;		line 711 in file "../src/Dimmer_B1.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  sw              1    wreg     unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  sw              1    4[COMMON] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;		None               void
  5987 ;; Registers used:
  5988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;Total ram usage:        1 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    4
  6001 ;; This function calls:
  6002 ;;		_DimmerLights_SelectPointer
  6003 ;; This function is called by:
  6004 ;;		_setSw_Main
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _setDimmerLights_DimmingOn
  6010  1258                     _setDimmerLights_DimmingOn:	
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6014                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6015  1258  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6016                           
  6017                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6018  1259  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6019  125A  319D  256A  3192   	fcall	_DimmerLights_SelectPointer
  6020                           
  6021                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6022  125D  087B               	movf	_DimmerLights,w
  6023  125E  0086               	movwf	6
  6024  125F  3001               	movlw	1	; select bank2/3
  6025  1260  0087               	movwf	7
  6026  1261  1881               	btfsc	1,1
  6027  1262  0008               	return
  6028                           
  6029                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6030  1263  087B               	movf	_DimmerLights,w
  6031  1264  0086               	movwf	6
  6032  1265  3001               	movlw	1	; select bank2/3
  6033  1266  0087               	movwf	7
  6034  1267  1C01               	btfss	1,0
  6035  1268  0008               	return
  6036                           
  6037                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6038  1269  0A7B               	incf	_DimmerLights,w
  6039  126A  0086               	movwf	6
  6040  126B  3001               	movlw	1	; select bank2/3
  6041  126C  0087               	movwf	7
  6042  126D  1401               	bsf	1,0
  6043                           
  6044                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6045  126E  087B               	movf	_DimmerLights,w
  6046  126F  0086               	movwf	6
  6047  1270  3001               	movlw	1	; select bank2/3
  6048  1271  0087               	movwf	7
  6049  1272  1581               	bsf	1,3
  6050                           
  6051                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6052  1273  087B               	movf	_DimmerLights,w
  6053  1274  0086               	movwf	6
  6054  1275  3001               	movlw	1	; select bank2/3
  6055  1276  0087               	movwf	7
  6056  1277  1601               	bsf	1,4
  6057                           
  6058                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6059  1278  087B               	movf	_DimmerLights,w
  6060  1279  0086               	movwf	6
  6061  127A  3001               	movlw	1	; select bank2/3
  6062  127B  0087               	movwf	7
  6063  127C  1681               	bsf	1,5
  6064  127D  0008               	return
  6065  127E                     __end_of_setDimmerLights_DimmingOn:	
  6066                           
  6067                           	psect	text16
  6068  1F16                     __ptext16:	
  6069 ;; *************** function _getSw_KeyStatus *****************
  6070 ;; Defined at:
  6071 ;;		line 223 in file "../src/Switch_B1.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  sw              1    wreg     unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  sw              1    0[COMMON] unsigned char 
  6076 ;;  status          1    3[COMMON] unsigned char 
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  1    wreg      unsigned char 
  6079 ;; Registers used:
  6080 ;;		wreg, status,2
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;Total ram usage:        3 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:    3
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_setSw_Main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _getSw_KeyStatus
  6102  1F16                     _getSw_KeyStatus:	
  6103                           
  6104                           ;Switch_B1.c: 224: char status = 0;
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6108  1F16  01F3               	clrf	getSw_KeyStatus@status
  6109                           
  6110                           ;Switch_B1.c: 244: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6111  1F17  01F4               	clrf	_getSw_KeyStatus$6179
  6112  1F18  0AF4               	incf	_getSw_KeyStatus$6179,f
  6113  1F19  0020               	movlb	0	; select bank0
  6114  1F1A  1F0C               	btfss	12,6	;volatile
  6115  1F1B  1A0C               	btfsc	12,4	;volatile
  6116  1F1C  2F21               	goto	l8847
  6117  1F1D  1C0C               	btfss	12,0	;volatile
  6118  1F1E  1B8C               	btfsc	12,7	;volatile
  6119  1F1F  2F21               	goto	l8847
  6120  1F20  01F4               	clrf	_getSw_KeyStatus$6179
  6121  1F21                     l8847:	
  6122  1F21  0874               	movf	_getSw_KeyStatus$6179,w
  6123  1F22  00F2               	movwf	??_getSw_KeyStatus
  6124  1F23  0872               	movf	??_getSw_KeyStatus,w
  6125  1F24  00F3               	movwf	getSw_KeyStatus@status
  6126                           
  6127                           ;Switch_B1.c: 247: return status;
  6128  1F25  0873               	movf	getSw_KeyStatus@status,w
  6129  1F26  0008               	return
  6130  1F27                     __end_of_getSw_KeyStatus:	
  6131                           
  6132                           	psect	text17
  6133  1DC9                     __ptext17:	
  6134 ;; *************** function _SwPointSelect *****************
  6135 ;; Defined at:
  6136 ;;		line 25 in file "../src/Switch_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  sw              1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  sw              1    3[COMMON] unsigned char 
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;Total ram usage:        2 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    3
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_setSw_Main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           
  6165                           ;psect for function _SwPointSelect
  6166  1DC9                     _SwPointSelect:	
  6167                           
  6168                           ;incstack = 0
  6169                           ; Regs used in _SwPointSelect: [wreg]
  6170                           ;SwPointSelect@sw stored from wreg
  6171  1DC9  00F3               	movwf	SwPointSelect@sw
  6172                           
  6173                           ;Switch_B1.c: 28: if (sw == 1) {
  6174  1DCA  0873               	movf	SwPointSelect@sw,w
  6175  1DCB  3A01               	xorlw	1
  6176  1DCC  1D03               	skipz
  6177  1DCD  0008               	return
  6178                           
  6179                           ;Switch_B1.c: 29: Sw = &Sw1;
  6180  1DCE  30E3               	movlw	_Sw1& (0+255)
  6181  1DCF  00F2               	movwf	??_SwPointSelect
  6182  1DD0  0872               	movf	??_SwPointSelect,w
  6183  1DD1  0020               	movlb	0	; select bank0
  6184  1DD2  00ED               	movwf	_Sw
  6185  1DD3  0008               	return
  6186  1DD4                     __end_of_SwPointSelect:	
  6187                           
  6188                           	psect	text18
  6189  1D61                     __ptext18:	
  6190 ;; *************** function _Switch_Initialization *****************
  6191 ;; Defined at:
  6192 ;;		line 46 in file "../src/Switch_B1.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;		None               void
  6199 ;; Registers used:
  6200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;Total ram usage:        0 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    6
  6213 ;; This function calls:
  6214 ;;		_TouchPower
  6215 ;;		_setSw_Initialization
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _Switch_Initialization
  6223  1D61                     _Switch_Initialization:	
  6224                           
  6225                           ;Switch_B1.c: 47: TouchPower();
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6229  1D61  3190  206E  319D   	fcall	_TouchPower
  6230                           
  6231                           ;Switch_B1.c: 49: WPUB1 = 0;
  6232  1D64  0024               	movlb	4	; select bank4
  6233  1D65  108D               	bcf	13,1	;volatile
  6234                           
  6235                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6236  1D66  3001               	movlw	1
  6237  1D67  319E  263A         	fcall	_setSw_Initialization
  6238  1D69  0008               	return
  6239  1D6A                     __end_of_Switch_Initialization:	
  6240                           
  6241                           	psect	text19
  6242  1E3A                     __ptext19:	
  6243 ;; *************** function _setSw_Initialization *****************
  6244 ;; Defined at:
  6245 ;;		line 93 in file "../src/Switch_B1.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;  sw              1    wreg     unsigned char 
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  sw              1    6[COMMON] unsigned char 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;		None               void
  6252 ;; Registers used:
  6253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:        1 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    5
  6266 ;; This function calls:
  6267 ;;		_setLED
  6268 ;; This function is called by:
  6269 ;;		_Switch_Initialization
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _setSw_Initialization
  6275  1E3A                     _setSw_Initialization:	
  6276                           
  6277                           ;incstack = 0
  6278                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6279                           ;setSw_Initialization@sw stored from wreg
  6280  1E3A  00F6               	movwf	setSw_Initialization@sw
  6281                           
  6282                           ;Switch_B1.c: 94: setLED(sw, 1);
  6283  1E3B  01F4               	clrf	setLED@command
  6284  1E3C  0AF4               	incf	setLED@command,f
  6285  1E3D  0876               	movf	setSw_Initialization@sw,w
  6286  1E3E  3194  24AB  319E   	fcall	_setLED
  6287                           
  6288                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6289  1E41  01F4               	clrf	setLED@command
  6290  1E42  0AF4               	incf	setLED@command,f
  6291  1E43  0876               	movf	setSw_Initialization@sw,w
  6292  1E44  3E01               	addlw	1
  6293  1E45  3194  24AB         	fcall	_setLED
  6294  1E47  0008               	return
  6295  1E48                     __end_of_setSw_Initialization:	
  6296                           
  6297                           	psect	text20
  6298  106E                     __ptext20:	
  6299 ;; *************** function _TouchPower *****************
  6300 ;; Defined at:
  6301 ;;		line 10 in file "../src/Switch_B1.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;		None
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;Total ram usage:        0 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    4
  6322 ;; This function calls:
  6323 ;;		_Timeout_Counter
  6324 ;;		_set_TimeoutCleared
  6325 ;; This function is called by:
  6326 ;;		_Switch_Initialization
  6327 ;;		_Switch_Main
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _TouchPower
  6333  106E                     _TouchPower:	
  6334                           
  6335                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6339  106E  0021               	movlb	1	; select bank1
  6340  106F  1C2E               	btfss	_myMain^(0+128),0
  6341  1070  0008               	return
  6342                           
  6343                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6344  1071  0020               	movlb	0	; select bank0
  6345  1072  180D               	btfsc	13,0	;volatile
  6346  1073  0008               	return
  6347  1074  287A               	goto	l9067
  6348  1075                     l2479:	
  6349                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6350                           
  6351                           
  6352                           ;Switch_B1.c: 14: RB0 = 1;
  6353  1075  0020               	movlb	0	; select bank0
  6354  1076  140D               	bsf	13,0	;volatile
  6355                           
  6356                           ;Switch_B1.c: 15: Timeout_Counter();
  6357  1077  319F  27EB  3190   	fcall	_Timeout_Counter
  6358  107A                     l9067:	
  6359  107A  0020               	movlb	0	; select bank0
  6360  107B  180D               	btfsc	13,0	;volatile
  6361  107C  2880               	goto	l9071
  6362  107D  0021               	movlb	1	; select bank1
  6363  107E  1D39               	btfss	(_myMain^(0+128)+11),2
  6364  107F  2875               	goto	l2479
  6365  1080                     l9071:	
  6366                           
  6367                           ;Switch_B1.c: 16: }
  6368                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6369  1080  3187  27FB         	fcall	_set_TimeoutCleared
  6370  1082  0008               	return
  6371  1083                     __end_of_TouchPower:	
  6372                           
  6373                           	psect	text21
  6374  07FB                     __ptext21:	
  6375 ;; *************** function _set_TimeoutCleared *****************
  6376 ;; Defined at:
  6377 ;;		line 282 in file "../src/Main_B1.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;		None               void
  6384 ;; Registers used:
  6385 ;;		status,2
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    3
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_getAD
  6402 ;;		_TouchPower
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function _set_TimeoutCleared
  6408  07FB                     _set_TimeoutCleared:	
  6409                           
  6410                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _set_TimeoutCleared: [status,2]
  6414  07FB  0021               	movlb	1	; select bank1
  6415  07FC  1139               	bcf	(_myMain^(0+128)+11),2
  6416                           
  6417                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6418  07FD  01BA               	clrf	(_myMain^(0+128)+12)
  6419  07FE  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6420  07FF  0008               	return
  6421  0800                     __end_of_set_TimeoutCleared:	
  6422                           
  6423                           	psect	text22
  6424  1FEB                     __ptext22:	
  6425 ;; *************** function _Timeout_Counter *****************
  6426 ;; Defined at:
  6427 ;;		line 273 in file "../src/Main_B1.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;		None
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;		None
  6432 ;; Return value:  Size  Location     Type
  6433 ;;		None               void
  6434 ;; Registers used:
  6435 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;Total ram usage:        0 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    3
  6448 ;; This function calls:
  6449 ;;		Nothing
  6450 ;; This function is called by:
  6451 ;;		_getAD
  6452 ;;		_TouchPower
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function _Timeout_Counter
  6458  1FEB                     _Timeout_Counter:	
  6459                           
  6460                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6464  1FEB  3001               	movlw	1
  6465  1FEC  0021               	movlb	1	; select bank1
  6466  1FED  07BA               	addwf	(_myMain^(0+128)+12),f
  6467  1FEE  3000               	movlw	0
  6468  1FEF  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6469                           
  6470                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6471  1FF0  300C               	movlw	12
  6472  1FF1  3EAE               	addlw	_myMain& (0+255)
  6473  1FF2  0086               	movwf	6
  6474  1FF3  0187               	clrf	7
  6475  1FF4  3F40               	moviw [0]fsr1
  6476  1FF5  3AA8               	xorlw	168
  6477  1FF6  1D03               	skipz
  6478  1FF7  2FFA               	goto	u9325
  6479  1FF8  3F41               	moviw [1]fsr1
  6480  1FF9  3A61               	xorlw	97
  6481  1FFA                     u9325:	
  6482  1FFA  1D03               	skipz
  6483  1FFB  0008               	return
  6484                           
  6485                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6486  1FFC  01BA               	clrf	(_myMain^(0+128)+12)
  6487  1FFD  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6488                           
  6489                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6490  1FFE  1539               	bsf	(_myMain^(0+128)+11),2
  6491  1FFF  0008               	return
  6492  2000                     __end_of_Timeout_Counter:	
  6493                           
  6494                           	psect	text23
  6495  1CCD                     __ptext23:	
  6496 ;; *************** function _RF_Main *****************
  6497 ;; Defined at:
  6498 ;;		line 26 in file "../src/RF_Control_B1.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;		None
  6501 ;; Auto vars:     Size  Location     Type
  6502 ;;		None
  6503 ;; Return value:  Size  Location     Type
  6504 ;;		None               void
  6505 ;; Registers used:
  6506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;Total ram usage:        0 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:   10
  6519 ;; This function calls:
  6520 ;;		_setRF_Main
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           
  6527                           ;psect for function _RF_Main
  6528  1CCD                     _RF_Main:	
  6529                           
  6530                           ;RF_Control_B1.c: 28: setRF_Main();
  6531                           
  6532                           ;incstack = 0
  6533                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6534  1CCD  3185  25F7         	fcall	_setRF_Main
  6535  1CCF  0008               	return
  6536  1CD0                     __end_of_RF_Main:	
  6537                           
  6538                           	psect	text24
  6539  05F7                     __ptext24:	
  6540 ;; *************** function _setRF_Main *****************
  6541 ;; Defined at:
  6542 ;;		line 53 in file "../src/RF_Control_B1.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  error           1   75[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;Total ram usage:        2 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    9
  6563 ;; This function calls:
  6564 ;;		_CC2500_PowerOnInitial
  6565 ;;		_CC2500_RxData
  6566 ;;		_CC2500_TxData
  6567 ;;		_CC2500_WriteCommand
  6568 ;;		_RF_RxDisable
  6569 ;;		___lwdiv
  6570 ;;		_getBuz_GO
  6571 ;;		_getRF_KeyStatus
  6572 ;;		_getRxData
  6573 ;; This function is called by:
  6574 ;;		_RF_Main
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           
  6579                           ;psect for function _setRF_Main
  6580  05F7                     _setRF_Main:	
  6581                           
  6582                           ;RF_Control_B1.c: 54: char error = 0;
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6586  05F7  0020               	movlb	0	; select bank0
  6587  05F8  01EB               	clrf	setRF_Main@error
  6588                           
  6589                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6590  05F9  0021               	movlb	1	; select bank1
  6591  05FA  1C20               	btfss	_RF1^(0+128),0
  6592  05FB  2EB3               	goto	l2119
  6593                           
  6594                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6595  05FC  319E  26B4  3185   	fcall	_getBuz_GO
  6596  05FF  0873               	movf	?_getBuz_GO+1,w
  6597  0600  0472               	iorwf	?_getBuz_GO,w
  6598  0601  1D03               	skipz
  6599  0602  2E94               	goto	l9037
  6600                           
  6601                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6602  0603  319F  2705  3185   	fcall	_getRF_KeyStatus
  6603  0606  3A01               	xorlw	1
  6604  0607  3000               	movlw	0
  6605  0608  1903               	skipnz
  6606  0609  3001               	movlw	1
  6607  060A  0020               	movlb	0	; select bank0
  6608  060B  00EA               	movwf	??_setRF_Main
  6609  060C  0CEA               	rrf	??_setRF_Main,f
  6610  060D  0CEA               	rrf	??_setRF_Main,f
  6611  060E  0021               	movlb	1	; select bank1
  6612  060F  0820               	movf	_RF1^(0+128),w
  6613  0610  0020               	movlb	0	; select bank0
  6614  0611  066A               	xorwf	??_setRF_Main,w
  6615  0612  397F               	andlw	-129
  6616  0613  066A               	xorwf	??_setRF_Main,w
  6617  0614  0021               	movlb	1	; select bank1
  6618  0615  00A0               	movwf	_RF1^(0+128)
  6619                           
  6620                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6621  0616  1FA0               	btfss	_RF1^(0+128),7
  6622  0617  2E1A               	goto	l2123
  6623  0618  1F20               	btfss	_RF1^(0+128),6
  6624  0619  2E94               	goto	l9037
  6625  061A                     l2123:	
  6626                           
  6627                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6628  061A  1D20               	btfss	_RF1^(0+128),2
  6629  061B  2E5B               	goto	l2124
  6630                           
  6631                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6632  061C  1B20               	btfsc	_RF1^(0+128),6
  6633  061D  2E56               	goto	l9009
  6634                           
  6635                           ;RF_Control_B1.c: 68: RF1.Count++;
  6636  061E  3001               	movlw	1
  6637  061F  07A2               	addwf	(_RF1^(0+128)+2),f
  6638  0620  3000               	movlw	0
  6639  0621  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6640                           
  6641                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6642  0622  3014               	movlw	20
  6643  0623  00F2               	movwf	___lwdiv@divisor
  6644  0624  3000               	movlw	0
  6645  0625  00F3               	movwf	___lwdiv@divisor+1
  6646  0626  0828               	movf	((_RF1+1)^(0+128)+7),w
  6647  0627  01F5               	clrf	___lwdiv@dividend+1
  6648  0628  07F5               	addwf	___lwdiv@dividend+1,f
  6649  0629  0827               	movf	(_RF1^(0+128)+7),w
  6650  062A  01F4               	clrf	___lwdiv@dividend
  6651  062B  07F4               	addwf	___lwdiv@dividend,f
  6652  062C  3193  23CD  3185   	fcall	___lwdiv
  6653  062F  0873               	movf	?___lwdiv+1,w
  6654  0630  0021               	movlb	1	; select bank1
  6655  0631  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6656  0632  1D03               	skipz
  6657  0633  2E36               	goto	u9885
  6658  0634  0872               	movf	?___lwdiv,w
  6659  0635  0222               	subwf	(_RF1^(0+128)+2),w
  6660  0636                     u9885:	
  6661  0636  1C03               	skipc
  6662  0637  2E94               	goto	l9037
  6663                           
  6664                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6665  0638  3014               	movlw	20
  6666  0639  00F2               	movwf	___lwdiv@divisor
  6667  063A  3000               	movlw	0
  6668  063B  00F3               	movwf	___lwdiv@divisor+1
  6669  063C  0828               	movf	((_RF1+1)^(0+128)+7),w
  6670  063D  01F5               	clrf	___lwdiv@dividend+1
  6671  063E  07F5               	addwf	___lwdiv@dividend+1,f
  6672  063F  0827               	movf	(_RF1^(0+128)+7),w
  6673  0640  01F4               	clrf	___lwdiv@dividend
  6674  0641  07F4               	addwf	___lwdiv@dividend,f
  6675  0642  3193  23CD  3185   	fcall	___lwdiv
  6676  0645  0873               	movf	?___lwdiv+1,w
  6677  0646  0021               	movlb	1	; select bank1
  6678  0647  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6679  0648  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6680  0649  0872               	movf	?___lwdiv,w
  6681  064A  01A2               	clrf	(_RF1^(0+128)+2)
  6682  064B  07A2               	addwf	(_RF1^(0+128)+2),f
  6683                           
  6684                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6685  064C  1120               	bcf	_RF1^(0+128),2
  6686                           
  6687                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6688  064D  01AA               	clrf	(_RF1^(0+128)+10)
  6689  064E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6690                           
  6691                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6692  064F  319E  2666  3185   	fcall	_RF_RxDisable
  6693                           
  6694                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6695  0652  318A  2203  3185   	fcall	_CC2500_TxData
  6696                           
  6697                           ;RF_Control_B1.c: 77: }
  6698                           ;RF_Control_B1.c: 78: } else {
  6699  0655  2E94               	goto	l9037
  6700  0656                     l9009:	
  6701                           
  6702                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6703  0656  0021               	movlb	1	; select bank1
  6704  0657  01A2               	clrf	(_RF1^(0+128)+2)
  6705  0658  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6706                           
  6707                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6708  0659  1120               	bcf	_RF1^(0+128),2
  6709                           
  6710                           ;RF_Control_B1.c: 81: }
  6711                           ;RF_Control_B1.c: 82: } else {
  6712  065A  2E94               	goto	l9037
  6713  065B                     l2124:	
  6714                           
  6715                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6716  065B  1DA0               	btfss	_RF1^(0+128),3
  6717  065C  2E6A               	goto	l9023
  6718                           
  6719                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6720  065D  3188  2074  3185   	fcall	_CC2500_RxData
  6721                           
  6722                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6723  0660  0021               	movlb	1	; select bank1
  6724  0661  1CA0               	btfss	_RF1^(0+128),1
  6725  0662  2E94               	goto	l9037
  6726                           
  6727                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6728  0663  10A0               	bcf	_RF1^(0+128),1
  6729                           
  6730                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6731  0664  01AA               	clrf	(_RF1^(0+128)+10)
  6732  0665  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6733                           
  6734                           ;RF_Control_B1.c: 97: getRxData();
  6735  0666  318B  234A  3185   	fcall	_getRxData
  6736                           
  6737                           ;RF_Control_B1.c: 100: }
  6738                           ;RF_Control_B1.c: 101: } else {
  6739  0669  2E94               	goto	l9037
  6740  066A                     l9023:	
  6741                           
  6742                           ;RF_Control_B1.c: 102: RF1.Count++;
  6743  066A  3001               	movlw	1
  6744  066B  0021               	movlb	1	; select bank1
  6745  066C  07A2               	addwf	(_RF1^(0+128)+2),f
  6746  066D  3000               	movlw	0
  6747  066E  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6748                           
  6749                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6750  066F  3014               	movlw	20
  6751  0670  00F2               	movwf	___lwdiv@divisor
  6752  0671  3000               	movlw	0
  6753  0672  00F3               	movwf	___lwdiv@divisor+1
  6754  0673  0828               	movf	((_RF1+1)^(0+128)+7),w
  6755  0674  01F5               	clrf	___lwdiv@dividend+1
  6756  0675  07F5               	addwf	___lwdiv@dividend+1,f
  6757  0676  0827               	movf	(_RF1^(0+128)+7),w
  6758  0677  01F4               	clrf	___lwdiv@dividend
  6759  0678  07F4               	addwf	___lwdiv@dividend,f
  6760  0679  3193  23CD  3185   	fcall	___lwdiv
  6761  067C  0873               	movf	?___lwdiv+1,w
  6762  067D  0021               	movlb	1	; select bank1
  6763  067E  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6764  067F  1D03               	skipz
  6765  0680  2E83               	goto	u9915
  6766  0681  0872               	movf	?___lwdiv,w
  6767  0682  0222               	subwf	(_RF1^(0+128)+2),w
  6768  0683                     u9915:	
  6769  0683  1C03               	skipc
  6770  0684  2E94               	goto	l9037
  6771                           
  6772                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6773  0685  01A2               	clrf	(_RF1^(0+128)+2)
  6774  0686  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6775                           
  6776                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6777  0687  15A0               	bsf	_RF1^(0+128),3
  6778                           
  6779                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6780  0688  3036               	movlw	54
  6781  0689  3190  20CC  3185   	fcall	_CC2500_WriteCommand
  6782                           
  6783                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6784  068C  303A               	movlw	58
  6785  068D  3190  20CC  3185   	fcall	_CC2500_WriteCommand
  6786                           
  6787                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6788  0690  3034               	movlw	52
  6789  0691  3190  20CC  3185   	fcall	_CC2500_WriteCommand
  6790  0694                     l9037:	
  6791                           
  6792                           ;RF_Control_B1.c: 111: }
  6793                           ;RF_Control_B1.c: 112: }
  6794                           ;RF_Control_B1.c: 113: }
  6795                           ;RF_Control_B1.c: 114: }
  6796                           ;RF_Control_B1.c: 115: }
  6797                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6798  0694  3001               	movlw	1
  6799  0695  0021               	movlb	1	; select bank1
  6800  0696  07AA               	addwf	(_RF1^(0+128)+10),f
  6801  0697  3000               	movlw	0
  6802  0698  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6803                           
  6804                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6805  0699  300B               	movlw	11
  6806  069A  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6807  069B  30B9               	movlw	185
  6808  069C  1903               	skipnz
  6809  069D  022A               	subwf	(_RF1^(0+128)+10),w
  6810  069E  1C03               	skipc
  6811  069F  2EAC               	goto	l9051
  6812                           
  6813                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6814  06A0  01AA               	clrf	(_RF1^(0+128)+10)
  6815  06A1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6816                           
  6817                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6818  06A2  11A0               	bcf	_RF1^(0+128),3
  6819                           
  6820                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6821  06A3  10A0               	bcf	_RF1^(0+128),1
  6822                           
  6823                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6824  06A4  3036               	movlw	54
  6825  06A5  3190  20CC  3185   	fcall	_CC2500_WriteCommand
  6826                           
  6827                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6828  06A8  303A               	movlw	58
  6829  06A9  3190  20CC  3185   	fcall	_CC2500_WriteCommand
  6830  06AC                     l9051:	
  6831                           
  6832                           ;RF_Control_B1.c: 125: }
  6833                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6834  06AC  0021               	movlb	1	; select bank1
  6835  06AD  1F21               	btfss	(_RF1^(0+128)+1),6
  6836  06AE  0008               	return
  6837                           
  6838                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6839  06AF  1321               	bcf	(_RF1^(0+128)+1),6
  6840                           
  6841                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6842  06B0  319F  27D6         	fcall	_CC2500_PowerOnInitial
  6843                           
  6844                           ;RF_Control_B1.c: 130: }
  6845                           ;RF_Control_B1.c: 132: } else {
  6846  06B2  0008               	return
  6847  06B3                     l2119:	
  6848                           
  6849                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6850  06B3  1C2E               	btfss	_myMain^(0+128),0
  6851  06B4  0008               	return
  6852                           
  6853                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6854  06B5  1420               	bsf	_RF1^(0+128),0
  6855  06B6  0008               	return
  6856  06B7                     __end_of_setRF_Main:	
  6857                           
  6858                           	psect	text25
  6859  0B4A                     __ptext25:	
  6860 ;; *************** function _getRxData *****************
  6861 ;; Defined at:
  6862 ;;		line 227 in file "../src/RF_Control_B1.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  error           1   73[BANK0 ] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;		None               void
  6869 ;; Registers used:
  6870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;Total ram usage:        2 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    8
  6883 ;; This function calls:
  6884 ;;		_getMain_All_Error_Status
  6885 ;;		_setControl_Lights_Table
  6886 ;;		_setLog_Code
  6887 ;;		_setTxData
  6888 ;; This function is called by:
  6889 ;;		_setRF_Main
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           
  6894                           ;psect for function _getRxData
  6895  0B4A                     _getRxData:	
  6896                           
  6897                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6901  0B4A  0023               	movlb	3	; select bank3
  6902  0B4B  0820               	movf	_RF_Data^(0+384),w
  6903  0B4C  3AAA               	xorlw	170
  6904  0B4D  1D03               	skipz
  6905  0B4E  2B60               	goto	l8793
  6906  0B4F  0821               	movf	(_RF_Data^(0+384)+1),w
  6907  0B50  3A01               	xorlw	1
  6908  0B51  1D03               	skipz
  6909  0B52  2B60               	goto	l8793
  6910                           
  6911                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  6912  0B53  3055               	movlw	85
  6913  0B54  0020               	movlb	0	; select bank0
  6914  0B55  00E8               	movwf	??_getRxData
  6915  0B56  086C               	movf	_product,w
  6916  0B57  3E02               	addlw	2
  6917  0B58  0086               	movwf	6
  6918  0B59  3002               	movlw	2	; select bank4/5
  6919  0B5A  0087               	movwf	7
  6920  0B5B  0868               	movf	??_getRxData,w
  6921  0B5C  0081               	movwf	1
  6922                           
  6923                           ;RF_Control_B1.c: 231: setTxData();
  6924  0B5D  318F  274A         	fcall	_setTxData
  6925                           
  6926                           ;RF_Control_B1.c: 235: } else {
  6927  0B5F  0008               	return
  6928  0B60                     l8793:	
  6929                           
  6930                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  6931  0B60  3000               	movlw	0
  6932  0B61  3192  22D2  318B   	fcall	_getMain_All_Error_Status
  6933  0B64  0020               	movlb	0	; select bank0
  6934  0B65  00E8               	movwf	??_getRxData
  6935  0B66  0868               	movf	??_getRxData,w
  6936  0B67  00E9               	movwf	getRxData@error
  6937                           
  6938                           ;RF_Control_B1.c: 237: if (error == 0) {
  6939  0B68  08E9               	movf	getRxData@error,f
  6940  0B69  1D03               	skipz
  6941  0B6A  2BBB               	goto	l2164
  6942                           
  6943                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  6944  0B6B  0021               	movlb	1	; select bank1
  6945  0B6C  1F20               	btfss	_RF1^(0+128),6
  6946  0B6D  2B79               	goto	l8805
  6947                           
  6948                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  6949  0B6E  0023               	movlb	3	; select bank3
  6950  0B6F  08A0               	movf	_RF_Data^(0+384),f
  6951  0B70  1D03               	skipz
  6952  0B71  0008               	return
  6953  0B72  0821               	movf	(_RF_Data^(0+384)+1),w
  6954  0B73  3A64               	xorlw	100
  6955  0B74  1D03               	skipz
  6956  0B75  0008               	return
  6957                           
  6958                           ;RF_Control_B1.c: 241: setLog_Code();
  6959  0B76  3193  2399         	fcall	_setLog_Code
  6960                           
  6961                           ;RF_Control_B1.c: 242: }
  6962                           ;RF_Control_B1.c: 243: } else {
  6963  0B78  0008               	return
  6964  0B79                     l8805:	
  6965                           
  6966                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  6967  0B79  0023               	movlb	3	; select bank3
  6968  0B7A  0834               	movf	(_RF_Data^(0+384)+20),w
  6969  0B7B  3AD1               	xorlw	209
  6970  0B7C  1903               	skipnz
  6971  0B7D  2B82               	goto	l8809
  6972  0B7E  0834               	movf	(_RF_Data^(0+384)+20),w
  6973  0B7F  3A0A               	xorlw	10
  6974  0B80  1D03               	skipz
  6975  0B81  0008               	return
  6976  0B82                     l8809:	
  6977                           
  6978                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6979  0B82  08A0               	movf	_RF_Data^(0+384),f
  6980  0B83  1D03               	skipz
  6981  0B84  0008               	return
  6982  0B85  0821               	movf	(_RF_Data^(0+384)+1),w
  6983  0B86  3A02               	xorlw	2
  6984  0B87  1D03               	skipz
  6985  0B88  0008               	return
  6986                           
  6987                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6988  0B89  082C               	movf	(_RF_Data^(0+384)+12),w
  6989  0B8A  3AFF               	xorlw	255
  6990  0B8B  1D03               	skipz
  6991  0B8C  2B97               	goto	l8821
  6992  0B8D  082D               	movf	(_RF_Data^(0+384)+13),w
  6993  0B8E  3AFF               	xorlw	255
  6994  0B8F  1D03               	skipz
  6995  0B90  2B97               	goto	l8821
  6996  0B91  082E               	movf	(_RF_Data^(0+384)+14),w
  6997  0B92  3AFF               	xorlw	255
  6998  0B93  1D03               	skipz
  6999  0B94  2B97               	goto	l8821
  7000                           
  7001                           ;RF_Control_B1.c: 249: __nop();
  7002  0B95  0000               	nop
  7003                           
  7004                           ;RF_Control_B1.c: 250: } else {
  7005  0B96  0008               	return
  7006  0B97                     l8821:	
  7007                           
  7008                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7009  0B97  0020               	movlb	0	; select bank0
  7010  0B98  086C               	movf	_product,w
  7011  0B99  3E0C               	addlw	12
  7012  0B9A  0086               	movwf	6
  7013  0B9B  3002               	movlw	2	; select bank4/5
  7014  0B9C  0087               	movwf	7
  7015  0B9D  0023               	movlb	3	; select bank3
  7016  0B9E  082C               	movf	(_RF_Data^(0+384)+12),w
  7017  0B9F  0601               	xorwf	1,w
  7018  0BA0  1D03               	skipz
  7019  0BA1  0008               	return
  7020  0BA2  0020               	movlb	0	; select bank0
  7021  0BA3  086C               	movf	_product,w
  7022  0BA4  3E0D               	addlw	13
  7023  0BA5  0086               	movwf	6
  7024  0BA6  3002               	movlw	2	; select bank4/5
  7025  0BA7  0087               	movwf	7
  7026  0BA8  0023               	movlb	3	; select bank3
  7027  0BA9  082D               	movf	(_RF_Data^(0+384)+13),w
  7028  0BAA  0601               	xorwf	1,w
  7029  0BAB  1D03               	skipz
  7030  0BAC  0008               	return
  7031  0BAD  0020               	movlb	0	; select bank0
  7032  0BAE  086C               	movf	_product,w
  7033  0BAF  3E0E               	addlw	14
  7034  0BB0  0086               	movwf	6
  7035  0BB1  3002               	movlw	2	; select bank4/5
  7036  0BB2  0087               	movwf	7
  7037  0BB3  0023               	movlb	3	; select bank3
  7038  0BB4  082E               	movf	(_RF_Data^(0+384)+14),w
  7039  0BB5  0601               	xorwf	1,w
  7040  0BB6  1D03               	skipz
  7041  0BB7  0008               	return
  7042                           
  7043                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7044  0BB8  318A  22DA         	fcall	_setControl_Lights_Table
  7045                           
  7046                           ;RF_Control_B1.c: 253: }
  7047                           ;RF_Control_B1.c: 254: }
  7048                           ;RF_Control_B1.c: 256: }
  7049                           ;RF_Control_B1.c: 267: }
  7050                           ;RF_Control_B1.c: 268: }
  7051                           ;RF_Control_B1.c: 269: } else {
  7052  0BBA  0008               	return
  7053  0BBB                     l2164:	
  7054                           
  7055                           ;RF_Control_B1.c: 270: __nop();
  7056  0BBB  0000               	nop
  7057  0BBC  0008               	return
  7058  0BBD                     __end_of_getRxData:	
  7059                           
  7060                           	psect	text26
  7061  1399                     __ptext26:	
  7062 ;; *************** function _setLog_Code *****************
  7063 ;; Defined at:
  7064 ;;		line 276 in file "../src/RF_Control_B1.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;Total ram usage:        1 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:    5
  7085 ;; This function calls:
  7086 ;;		_setBuz
  7087 ;;		_setMemory_LoopSave
  7088 ;;		_setMemory_Modify
  7089 ;;		_setProductData
  7090 ;; This function is called by:
  7091 ;;		_getRxData
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _setLog_Code
  7097  1399                     _setLog_Code:	
  7098                           
  7099                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7103  1399  0021               	movlb	1	; select bank1
  7104  139A  1320               	bcf	_RF1^(0+128),6
  7105                           
  7106                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7107  139B  0023               	movlb	3	; select bank3
  7108  139C  082C               	movf	(_RF_Data^(0+384)+12),w
  7109  139D  0020               	movlb	0	; select bank0
  7110  139E  00DD               	movwf	??_setLog_Code
  7111  139F  085D               	movf	??_setLog_Code,w
  7112  13A0  00DA               	movwf	setProductData@value
  7113  13A1  300C               	movlw	12
  7114  13A2  319D  25D4  3193   	fcall	_setProductData
  7115                           
  7116                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7117  13A5  0023               	movlb	3	; select bank3
  7118  13A6  082D               	movf	(_RF_Data^(0+384)+13),w
  7119  13A7  0020               	movlb	0	; select bank0
  7120  13A8  00DD               	movwf	??_setLog_Code
  7121  13A9  085D               	movf	??_setLog_Code,w
  7122  13AA  00DA               	movwf	setProductData@value
  7123  13AB  300D               	movlw	13
  7124  13AC  319D  25D4  3193   	fcall	_setProductData
  7125                           
  7126                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7127  13AF  0023               	movlb	3	; select bank3
  7128  13B0  082E               	movf	(_RF_Data^(0+384)+14),w
  7129  13B1  0020               	movlb	0	; select bank0
  7130  13B2  00DD               	movwf	??_setLog_Code
  7131  13B3  085D               	movf	??_setLog_Code,w
  7132  13B4  00DA               	movwf	setProductData@value
  7133  13B5  300E               	movlw	14
  7134  13B6  319D  25D4  3193   	fcall	_setProductData
  7135                           
  7136                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7137  13B9  3064               	movlw	100
  7138  13BA  0020               	movlb	0	; select bank0
  7139  13BB  00A4               	movwf	setBuz@time
  7140  13BC  3000               	movlw	0
  7141  13BD  00A5               	movwf	setBuz@time+1
  7142  13BE  3001               	movlw	1
  7143  13BF  3196  269F  3193   	fcall	_setBuz
  7144                           
  7145                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7146  13C2  0021               	movlb	1	; select bank1
  7147  13C3  1EAE               	btfss	_myMain^(0+128),5
  7148  13C4  2BC9               	goto	l2179
  7149                           
  7150                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7151  13C5  3001               	movlw	1
  7152  13C6  319E  26D4  3193   	fcall	_setMemory_LoopSave
  7153  13C9                     l2179:	
  7154                           
  7155                           ;RF_Control_B1.c: 284: }
  7156                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7157  13C9  3001               	movlw	1
  7158  13CA  319E  26C4         	fcall	_setMemory_Modify
  7159  13CC  0008               	return
  7160  13CD                     __end_of_setLog_Code:	
  7161                           
  7162                           	psect	text27
  7163  1ED4                     __ptext27:	
  7164 ;; *************** function _setMemory_LoopSave *****************
  7165 ;; Defined at:
  7166 ;;		line 1060 in file "../src/MCU_B1.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  command         1    wreg     unsigned char 
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;  command         1    3[COMMON] unsigned char 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;		None               void
  7173 ;; Registers used:
  7174 ;;		wreg, status,2, status,0
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;Total ram usage:        2 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    3
  7187 ;; This function calls:
  7188 ;;		Nothing
  7189 ;; This function is called by:
  7190 ;;		_setLog_Code
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _setMemory_LoopSave
  7196  1ED4                     _setMemory_LoopSave:	
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7200                           ;setMemory_LoopSave@command stored from wreg
  7201  1ED4  00F3               	movwf	setMemory_LoopSave@command
  7202                           
  7203                           ;MCU_B1.c: 1061: Memory.LoopSave = command == 1 ? 1 : 0;
  7204  1ED5  0873               	movf	setMemory_LoopSave@command,w
  7205  1ED6  3A01               	xorlw	1
  7206  1ED7  3000               	movlw	0
  7207  1ED8  1903               	skipnz
  7208  1ED9  3001               	movlw	1
  7209  1EDA  00F2               	movwf	??_setMemory_LoopSave
  7210  1EDB  0DF2               	rlf	??_setMemory_LoopSave,f
  7211  1EDC  0DF2               	rlf	??_setMemory_LoopSave,f
  7212  1EDD  0023               	movlb	3	; select bank3
  7213  1EDE  0862               	movf	(_Memory^(0+384)+36),w
  7214  1EDF  0672               	xorwf	??_setMemory_LoopSave,w
  7215  1EE0  39FB               	andlw	-5
  7216  1EE1  0672               	xorwf	??_setMemory_LoopSave,w
  7217  1EE2  00E2               	movwf	(_Memory^(0+384)+36)
  7218  1EE3  0008               	return
  7219  1EE4                     __end_of_setMemory_LoopSave:	
  7220                           
  7221                           	psect	text28
  7222  0ADA                     __ptext28:	
  7223 ;; *************** function _setControl_Lights_Table *****************
  7224 ;; Defined at:
  7225 ;;		line 289 in file "../src/RF_Control_B1.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;		None               void
  7232 ;; Registers used:
  7233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;Total ram usage:        0 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    7
  7246 ;; This function calls:
  7247 ;;		_getDimmerLights_Status
  7248 ;;		_getMain_All_LightsStatus
  7249 ;;		_setCmd_Status
  7250 ;;		_setDimmerLights_SwOff
  7251 ;;		_setDimmerLights_SwOn
  7252 ;;		_setProductData
  7253 ;;		_setRFSW_AdjControl
  7254 ;;		_setRFSW_Control
  7255 ;;		_setTxData
  7256 ;; This function is called by:
  7257 ;;		_getRxData
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _setControl_Lights_Table
  7263  0ADA                     _setControl_Lights_Table:	
  7264                           
  7265                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7269  0ADA  2B3A               	goto	l8577
  7270  0ADB                     l8559:	
  7271                           ;RF_Control_B1.c: 292: case 0x00:
  7272                           
  7273                           
  7274                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7275  0ADB  319D  2535  318A   	fcall	_getMain_All_LightsStatus
  7276  0ADE  3A01               	xorlw	1
  7277  0ADF  1D03               	skipz
  7278  0AE0  2AF6               	goto	l8567
  7279                           
  7280                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7281  0AE1  3001               	movlw	1
  7282  0AE2  319E  262C  318A   	fcall	_getDimmerLights_Status
  7283  0AE5  3A01               	xorlw	1
  7284  0AE6  1D03               	skipz
  7285  0AE7  2AF0               	goto	l8565
  7286                           
  7287                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7288  0AE8  3001               	movlw	1
  7289  0AE9  3193  2300  318A   	fcall	_setDimmerLights_SwOn
  7290                           
  7291                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7292  0AEC  3001               	movlw	1
  7293  0AED  3194  2403  318A   	fcall	_setDimmerLights_SwOff
  7294  0AF0                     l8565:	
  7295                           
  7296                           ;RF_Control_B1.c: 299: }
  7297                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7298  0AF0  01F2               	clrf	setCmd_Status@cmd
  7299  0AF1  0AF2               	incf	setCmd_Status@cmd,f
  7300  0AF2  3001               	movlw	1
  7301  0AF3  319F  2782         	fcall	_setCmd_Status
  7302                           
  7303                           ;RF_Control_B1.c: 315: } else {
  7304  0AF5  0008               	return
  7305  0AF6                     l8567:	
  7306                           
  7307                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7308  0AF6  0020               	movlb	0	; select bank0
  7309  0AF7  01DA               	clrf	setProductData@value
  7310  0AF8  3009               	movlw	9
  7311  0AF9  319D  25D4  318A   	fcall	_setProductData
  7312                           
  7313                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7314  0AFC  0020               	movlb	0	; select bank0
  7315  0AFD  01DA               	clrf	setProductData@value
  7316  0AFE  300B               	movlw	11
  7317  0AFF  319D  25D4  318A   	fcall	_setProductData
  7318                           
  7319                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7320  0B02  0020               	movlb	0	; select bank0
  7321  0B03  01DA               	clrf	setProductData@value
  7322  0B04  300F               	movlw	15
  7323  0B05  319D  25D4  318A   	fcall	_setProductData
  7324                           
  7325                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7326  0B08  0020               	movlb	0	; select bank0
  7327  0B09  01DA               	clrf	setProductData@value
  7328  0B0A  3011               	movlw	17
  7329  0B0B  319D  25D4  318A   	fcall	_setProductData
  7330                           
  7331                           ;RF_Control_B1.c: 320: setTxData();
  7332  0B0E  318F  274A         	fcall	_setTxData
  7333                           
  7334                           ;RF_Control_B1.c: 321: }
  7335                           ;RF_Control_B1.c: 322: break;
  7336  0B10  0008               	return
  7337  0B11                     l8569:	
  7338                           ;RF_Control_B1.c: 324: case 0x20:
  7339                           
  7340                           
  7341                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7342  0B11  0020               	movlb	0	; select bank0
  7343  0B12  01DA               	clrf	setProductData@value
  7344  0B13  3009               	movlw	9
  7345  0B14  319D  25D4  318A   	fcall	_setProductData
  7346                           
  7347                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7348  0B17  0020               	movlb	0	; select bank0
  7349  0B18  01DA               	clrf	setProductData@value
  7350  0B19  300B               	movlw	11
  7351  0B1A  319D  25D4  318A   	fcall	_setProductData
  7352                           
  7353                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7354  0B1D  0020               	movlb	0	; select bank0
  7355  0B1E  086C               	movf	_product,w
  7356  0B1F  0086               	movwf	6
  7357  0B20  3002               	movlw	2	; select bank4/5
  7358  0B21  0087               	movwf	7
  7359  0B22  3002               	movlw	2	; select bank4/5
  7360  0B23  3F4F               	moviw [15]fsr1
  7361  0B24  00DA               	movwf	setProductData@value
  7362  0B25  300F               	movlw	15
  7363  0B26  319D  25D4  318A   	fcall	_setProductData
  7364                           
  7365                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7366  0B29  0020               	movlb	0	; select bank0
  7367  0B2A  01DA               	clrf	setProductData@value
  7368  0B2B  3011               	movlw	17
  7369  0B2C  319D  25D4  318A   	fcall	_setProductData
  7370                           
  7371                           ;RF_Control_B1.c: 329: setTxData();
  7372  0B2F  318F  274A         	fcall	_setTxData
  7373                           
  7374                           ;RF_Control_B1.c: 330: break;
  7375  0B31  0008               	return
  7376  0B32                     l8571:	
  7377                           ;RF_Control_B1.c: 333: case 0x01:
  7378                           
  7379                           
  7380                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7381  0B32  3001               	movlw	1
  7382  0B33  3194  24E5         	fcall	_setRFSW_Control
  7383                           
  7384                           ;RF_Control_B1.c: 335: break;
  7385  0B35  0008               	return
  7386  0B36                     l8573:	
  7387                           ;RF_Control_B1.c: 339: case 0x11:
  7388                           
  7389                           
  7390                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7391  0B36  3001               	movlw	1
  7392  0B37  318C  2438         	fcall	_setRFSW_AdjControl
  7393                           
  7394                           ;RF_Control_B1.c: 370: }
  7395                           
  7396                           ;RF_Control_B1.c: 341: break;
  7397  0B39  0008               	return
  7398  0B3A                     l8577:	
  7399  0B3A  0023               	movlb	3	; select bank3
  7400  0B3B  082F               	movf	(_RF_Data^(0+384)+15),w
  7401                           
  7402                           ; Switch size 1, requested type "space"
  7403                           ; Number of cases is 4, Range of values is 0 to 32
  7404                           ; switch strategies available:
  7405                           ; Name         Instructions Cycles
  7406                           ; simple_byte           13     7 (average)
  7407                           ; direct_byte           72     6 (fixed)
  7408                           ; jumptable            260     6 (fixed)
  7409                           ;	Chosen strategy is simple_byte
  7410  0B3C  3A00               	xorlw	0	; case 0
  7411  0B3D  1903               	skipnz
  7412  0B3E  2ADB               	goto	l8559
  7413  0B3F  3A01               	xorlw	1	; case 1
  7414  0B40  1903               	skipnz
  7415  0B41  2B32               	goto	l8571
  7416  0B42  3A10               	xorlw	16	; case 17
  7417  0B43  1903               	skipnz
  7418  0B44  2B36               	goto	l8573
  7419  0B45  3A31               	xorlw	49	; case 32
  7420  0B46  1903               	skipnz
  7421  0B47  2B11               	goto	l8569
  7422  0B48  2B49               	goto	l2192
  7423  0B49                     l2192:	
  7424  0B49  0008               	return
  7425  0B4A                     __end_of_setControl_Lights_Table:	
  7426                           
  7427                           	psect	text29
  7428  14E5                     __ptext29:	
  7429 ;; *************** function _setRFSW_Control *****************
  7430 ;; Defined at:
  7431 ;;		line 378 in file "../src/RF_Control_B1.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  sw              1    wreg     unsigned char 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  sw              1   71[BANK0 ] unsigned char 
  7436 ;;  status          1   70[BANK0 ] unsigned char 
  7437 ;; Return value:  Size  Location     Type
  7438 ;;		None               void
  7439 ;; Registers used:
  7440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;Total ram usage:        3 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    6
  7453 ;; This function calls:
  7454 ;;		_getDimmerLights_Status
  7455 ;;		_setBuz
  7456 ;;		_setDelayOff_GO
  7457 ;;		_setDimmerLights_SwOff
  7458 ;;		_setDimmerLights_SwOn
  7459 ;;		_setRF_DimmerLights
  7460 ;;		_setTxData
  7461 ;; This function is called by:
  7462 ;;		_setControl_Lights_Table
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _setRFSW_Control
  7468  14E5                     _setRFSW_Control:	
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7472                           ;setRFSW_Control@sw stored from wreg
  7473  14E5  0020               	movlb	0	; select bank0
  7474  14E6  00E7               	movwf	setRFSW_Control@sw
  7475                           
  7476                           ;RF_Control_B1.c: 379: char status = 0;
  7477  14E7  01E6               	clrf	setRFSW_Control@status
  7478                           
  7479                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7480  14E8  0023               	movlb	3	; select bank3
  7481  14E9  0830               	movf	(_RF_Data^(0+384)+16),w
  7482  14EA  3A80               	xorlw	128
  7483  14EB  1D03               	skipz
  7484  14EC  2D18               	goto	l8393
  7485                           
  7486                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7487  14ED  0020               	movlb	0	; select bank0
  7488  14EE  01DD               	clrf	setDelayOff_GO@command
  7489  14EF  0ADD               	incf	setDelayOff_GO@command,f
  7490  14F0  0023               	movlb	3	; select bank3
  7491  14F1  0831               	movf	(_RF_Data^(0+384)+17),w
  7492  14F2  0020               	movlb	0	; select bank0
  7493  14F3  00E5               	movwf	??_setRFSW_Control
  7494  14F4  0865               	movf	??_setRFSW_Control,w
  7495  14F5  00DE               	movwf	setDelayOff_GO@value
  7496  14F6  0867               	movf	setRFSW_Control@sw,w
  7497  14F7  3187  276F  3194   	fcall	_setDelayOff_GO
  7498                           
  7499                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7500  14FA  0020               	movlb	0	; select bank0
  7501  14FB  0867               	movf	setRFSW_Control@sw,w
  7502  14FC  319E  262C  3194   	fcall	_getDimmerLights_Status
  7503  14FF  3A01               	xorlw	1
  7504  1500  1D03               	skipz
  7505  1501  2D18               	goto	l8393
  7506                           
  7507                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7508  1502  3064               	movlw	100
  7509  1503  0020               	movlb	0	; select bank0
  7510  1504  00A4               	movwf	setBuz@time
  7511  1505  3000               	movlw	0
  7512  1506  00A5               	movwf	setBuz@time+1
  7513  1507  3001               	movlw	1
  7514  1508  3196  269F  3194   	fcall	_setBuz
  7515                           
  7516                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7517  150B  0020               	movlb	0	; select bank0
  7518  150C  01DD               	clrf	setRF_DimmerLights@on
  7519  150D  0ADD               	incf	setRF_DimmerLights@on,f
  7520  150E  0867               	movf	setRFSW_Control@sw,w
  7521  150F  3197  27A1  3194   	fcall	_setRF_DimmerLights
  7522                           
  7523                           ;RF_Control_B1.c: 386: setTxData();
  7524  1512  318F  274A  3194   	fcall	_setTxData
  7525                           
  7526                           ;RF_Control_B1.c: 387: status = 1;
  7527  1515  0020               	movlb	0	; select bank0
  7528  1516  01E6               	clrf	setRFSW_Control@status
  7529  1517  0AE6               	incf	setRFSW_Control@status,f
  7530  1518                     l8393:	
  7531                           
  7532                           ;RF_Control_B1.c: 388: }
  7533                           ;RF_Control_B1.c: 389: }
  7534                           ;RF_Control_B1.c: 391: if (status == 0) {
  7535  1518  0020               	movlb	0	; select bank0
  7536  1519  08E6               	movf	setRFSW_Control@status,f
  7537  151A  1D03               	skipz
  7538  151B  0008               	return
  7539                           
  7540                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7541  151C  0867               	movf	setRFSW_Control@sw,w
  7542  151D  3193  2300  3194   	fcall	_setDimmerLights_SwOn
  7543                           
  7544                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7545  1520  0020               	movlb	0	; select bank0
  7546  1521  0867               	movf	setRFSW_Control@sw,w
  7547  1522  3194  2403         	fcall	_setDimmerLights_SwOff
  7548  1524  0008               	return
  7549  1525                     __end_of_setRFSW_Control:	
  7550                           
  7551                           	psect	text30
  7552  0C38                     __ptext30:	
  7553 ;; *************** function _setRFSW_AdjControl *****************
  7554 ;; Defined at:
  7555 ;;		line 400 in file "../src/RF_Control_B1.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  sw              1    wreg     unsigned char 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  sw              1   64[BANK0 ] unsigned char 
  7560 ;;  status          1   63[BANK0 ] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;		None               void
  7563 ;; Registers used:
  7564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;Total ram usage:        4 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    6
  7577 ;; This function calls:
  7578 ;;		_getDimmerLights_PercentToValue
  7579 ;;		_getDimmerLights_Status
  7580 ;;		_setDimmerIntr_Dimming_RF
  7581 ;;		_setDimmerIntr_MaxmumValue
  7582 ;;		_setDimmerLights_DimmingRun
  7583 ;;		_setDimmerLights_SwOff
  7584 ;;		_setDimmerLights_SwOn
  7585 ;;		_setMemory_Modify
  7586 ;;		_setProductData
  7587 ;;		_setTxData
  7588 ;; This function is called by:
  7589 ;;		_setControl_Lights_Table
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           
  7594                           ;psect for function _setRFSW_AdjControl
  7595  0C38                     _setRFSW_AdjControl:	
  7596                           
  7597                           ;incstack = 0
  7598                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7599                           ;setRFSW_AdjControl@sw stored from wreg
  7600  0C38  0020               	movlb	0	; select bank0
  7601  0C39  00E0               	movwf	setRFSW_AdjControl@sw
  7602                           
  7603                           ;RF_Control_B1.c: 401: char status = 0;
  7604  0C3A  01DF               	clrf	setRFSW_AdjControl@status
  7605                           
  7606                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7607  0C3B  0860               	movf	setRFSW_AdjControl@sw,w
  7608  0C3C  319E  262C  318C   	fcall	_getDimmerLights_Status
  7609  0C3F  0020               	movlb	0	; select bank0
  7610  0C40  00DD               	movwf	??_setRFSW_AdjControl
  7611  0C41  085D               	movf	??_setRFSW_AdjControl,w
  7612  0C42  00DF               	movwf	setRFSW_AdjControl@status
  7613                           
  7614                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7615  0C43  3065               	movlw	101
  7616  0C44  0023               	movlb	3	; select bank3
  7617  0C45  0229               	subwf	(_RF_Data^(0+384)+9),w
  7618  0C46  1C03               	skipc
  7619  0C47  2C4F               	goto	l8405
  7620                           
  7621                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7622  0C48  3064               	movlw	100
  7623  0C49  0020               	movlb	0	; select bank0
  7624  0C4A  00DD               	movwf	??_setRFSW_AdjControl
  7625  0C4B  085D               	movf	??_setRFSW_AdjControl,w
  7626  0C4C  0023               	movlb	3	; select bank3
  7627  0C4D  00A9               	movwf	(_RF_Data^(0+384)+9)
  7628                           
  7629                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7630  0C4E  2C54               	goto	l8409
  7631  0C4F                     l8405:	
  7632  0C4F  08A9               	movf	(_RF_Data^(0+384)+9),f
  7633  0C50  1D03               	skipz
  7634  0C51  2C54               	goto	l8409
  7635                           
  7636                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7637  0C52  01A9               	clrf	(_RF_Data^(0+384)+9)
  7638  0C53  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7639  0C54                     l8409:	
  7640                           
  7641                           ;RF_Control_B1.c: 409: }
  7642                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7643  0C54  0829               	movf	(_RF_Data^(0+384)+9),w
  7644  0C55  0020               	movlb	0	; select bank0
  7645  0C56  00DD               	movwf	??_setRFSW_AdjControl
  7646  0C57  085D               	movf	??_setRFSW_AdjControl,w
  7647  0C58  00DA               	movwf	setProductData@value
  7648  0C59  3009               	movlw	9
  7649  0C5A  319D  25D4  318C   	fcall	_setProductData
  7650                           
  7651                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7652  0C5D  0020               	movlb	0	; select bank0
  7653  0C5E  0860               	movf	setRFSW_AdjControl@sw,w
  7654  0C5F  00DD               	movwf	??_setRFSW_AdjControl
  7655  0C60  085D               	movf	??_setRFSW_AdjControl,w
  7656  0C61  00DA               	movwf	setProductData@value
  7657  0C62  300B               	movlw	11
  7658  0C63  319D  25D4  318C   	fcall	_setProductData
  7659                           
  7660                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7661  0C66  0020               	movlb	0	; select bank0
  7662  0C67  0860               	movf	setRFSW_AdjControl@sw,w
  7663  0C68  3E1A               	addlw	26
  7664  0C69  076C               	addwf	_product,w
  7665  0C6A  00DD               	movwf	??_setRFSW_AdjControl
  7666  0C6B  085D               	movf	??_setRFSW_AdjControl,w
  7667  0C6C  0086               	movwf	6
  7668  0C6D  3002               	movlw	2	; select bank4/5
  7669  0C6E  0087               	movwf	7
  7670  0C6F  0801               	movf	1,w
  7671  0C70  00DE               	movwf	??_setRFSW_AdjControl+1
  7672  0C71  085E               	movf	??_setRFSW_AdjControl+1,w
  7673  0C72  00DA               	movwf	setProductData@value
  7674  0C73  3011               	movlw	17
  7675  0C74  319D  25D4  318C   	fcall	_setProductData
  7676                           
  7677                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7678  0C77  0023               	movlb	3	; select bank3
  7679  0C78  0829               	movf	(_RF_Data^(0+384)+9),w
  7680  0C79  0020               	movlb	0	; select bank0
  7681  0C7A  00DD               	movwf	??_setRFSW_AdjControl
  7682  0C7B  085D               	movf	??_setRFSW_AdjControl,w
  7683  0C7C  00DA               	movwf	setProductData@value
  7684  0C7D  0860               	movf	setRFSW_AdjControl@sw,w
  7685  0C7E  3E14               	addlw	20
  7686  0C7F  319D  25D4  318C   	fcall	_setProductData
  7687                           
  7688                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7689  0C82  3001               	movlw	1
  7690  0C83  319E  26C4  318C   	fcall	_setMemory_Modify
  7691                           
  7692                           ;RF_Control_B1.c: 416: if (status == 1) {
  7693  0C86  0020               	movlb	0	; select bank0
  7694  0C87  085F               	movf	setRFSW_AdjControl@status,w
  7695  0C88  3A01               	xorlw	1
  7696  0C89  1D03               	skipz
  7697  0C8A  2CA2               	goto	l8419
  7698                           
  7699                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7700  0C8B  0023               	movlb	3	; select bank3
  7701  0C8C  0829               	movf	(_RF_Data^(0+384)+9),w
  7702  0C8D  3189  219E  318C   	fcall	_getDimmerLights_PercentToValue
  7703  0C90  0020               	movlb	0	; select bank0
  7704  0C91  00DD               	movwf	??_setRFSW_AdjControl
  7705  0C92  085D               	movf	??_setRFSW_AdjControl,w
  7706  0C93  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7707  0C94  0860               	movf	setRFSW_AdjControl@sw,w
  7708  0C95  319D  25E0  318C   	fcall	_setDimmerIntr_MaxmumValue
  7709                           
  7710                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7711  0C98  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7712  0C99  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7713  0C9A  0020               	movlb	0	; select bank0
  7714  0C9B  0860               	movf	setRFSW_AdjControl@sw,w
  7715  0C9C  319F  27AC  318C   	fcall	_setDimmerIntr_Dimming_RF
  7716                           
  7717                           ;RF_Control_B1.c: 419: setTxData();
  7718  0C9F  318F  274A         	fcall	_setTxData
  7719                           
  7720                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7721  0CA1  0008               	return
  7722  0CA2                     l8419:	
  7723  0CA2  0020               	movlb	0	; select bank0
  7724  0CA3  08DF               	movf	setRFSW_AdjControl@status,f
  7725  0CA4  1D03               	skipz
  7726  0CA5  0008               	return
  7727                           
  7728                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7729  0CA6  01F4               	clrf	setDimmerLights_DimmingRun@command
  7730  0CA7  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7731  0CA8  0860               	movf	setRFSW_AdjControl@sw,w
  7732  0CA9  3190  2083  318C   	fcall	_setDimmerLights_DimmingRun
  7733                           
  7734                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7735  0CAC  0020               	movlb	0	; select bank0
  7736  0CAD  0860               	movf	setRFSW_AdjControl@sw,w
  7737  0CAE  3193  2300  318C   	fcall	_setDimmerLights_SwOn
  7738                           
  7739                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7740  0CB1  0020               	movlb	0	; select bank0
  7741  0CB2  0860               	movf	setRFSW_AdjControl@sw,w
  7742  0CB3  3194  2403         	fcall	_setDimmerLights_SwOff
  7743  0CB5  0008               	return
  7744  0CB6                     __end_of_setRFSW_AdjControl:	
  7745                           
  7746                           	psect	text31
  7747  1EC4                     __ptext31:	
  7748 ;; *************** function _setMemory_Modify *****************
  7749 ;; Defined at:
  7750 ;;		line 1054 in file "../src/MCU_B1.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  command         1    wreg     unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  command         1    3[COMMON] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;		None               void
  7757 ;; Registers used:
  7758 ;;		wreg, status,2, status,0
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;Total ram usage:        2 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    3
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_setLog_Code
  7775 ;;		_setRFSW_AdjControl
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _setMemory_Modify
  7781  1EC4                     _setMemory_Modify:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7785                           ;setMemory_Modify@command stored from wreg
  7786  1EC4  00F3               	movwf	setMemory_Modify@command
  7787                           
  7788                           ;MCU_B1.c: 1055: Memory.Modify = command == 1 ? 1 : 0;
  7789  1EC5  0873               	movf	setMemory_Modify@command,w
  7790  1EC6  3A01               	xorlw	1
  7791  1EC7  3000               	movlw	0
  7792  1EC8  1903               	skipnz
  7793  1EC9  3001               	movlw	1
  7794  1ECA  00F2               	movwf	??_setMemory_Modify
  7795  1ECB  0023               	movlb	3	; select bank3
  7796  1ECC  0862               	movf	(_Memory^(0+384)+36),w
  7797  1ECD  0672               	xorwf	??_setMemory_Modify,w
  7798  1ECE  39FE               	andlw	-2
  7799  1ECF  0672               	xorwf	??_setMemory_Modify,w
  7800  1ED0  00E2               	movwf	(_Memory^(0+384)+36)
  7801                           
  7802                           ;MCU_B1.c: 1056: Memory.Time = 0;
  7803  1ED1  01E0               	clrf	(_Memory^(0+384)+34)
  7804  1ED2  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7805  1ED3  0008               	return
  7806  1ED4                     __end_of_setMemory_Modify:	
  7807                           
  7808                           	psect	text32
  7809  1083                     __ptext32:	
  7810 ;; *************** function _setDimmerLights_DimmingRun *****************
  7811 ;; Defined at:
  7812 ;;		line 993 in file "../src/Dimmer_B1.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  lights          1    wreg     unsigned char 
  7815 ;;  command         1    4[COMMON] unsigned char 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  lights          1    6[COMMON] unsigned char 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        3 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    4
  7834 ;; This function calls:
  7835 ;;		_DimmerLights_SelectPointer
  7836 ;; This function is called by:
  7837 ;;		_setRFSW_AdjControl
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _setDimmerLights_DimmingRun
  7843  1083                     _setDimmerLights_DimmingRun:	
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7847                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7848  1083  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7849                           
  7850                           ;Dimmer_B1.c: 994: DimmerLights_SelectPointer(lights);
  7851  1084  0876               	movf	setDimmerLights_DimmingRun@lights,w
  7852  1085  319D  256A         	fcall	_DimmerLights_SelectPointer
  7853                           
  7854                           ;Dimmer_B1.c: 995: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7855  1087  0874               	movf	setDimmerLights_DimmingRun@command,w
  7856  1088  3A01               	xorlw	1
  7857  1089  3000               	movlw	0
  7858  108A  1903               	skipnz
  7859  108B  3001               	movlw	1
  7860  108C  00F5               	movwf	??_setDimmerLights_DimmingRun
  7861  108D  0A7B               	incf	_DimmerLights,w
  7862  108E  0086               	movwf	6
  7863  108F  3001               	movlw	1	; select bank2/3
  7864  1090  0087               	movwf	7
  7865  1091  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  7866  1092  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7867  1093  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7868  1094  0801               	movf	1,w
  7869  1095  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7870  1096  39BF               	andlw	-65
  7871  1097  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7872  1098  0081               	movwf	1
  7873  1099  0008               	return
  7874  109A                     __end_of_setDimmerLights_DimmingRun:	
  7875                           
  7876                           	psect	text33
  7877  1F05                     __ptext33:	
  7878 ;; *************** function _getRF_KeyStatus *****************
  7879 ;; Defined at:
  7880 ;;		line 166 in file "../src/RF_Control_B1.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;		None
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  key             1    3[COMMON] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  1    wreg      unsigned char 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;Total ram usage:        3 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		Nothing
  7903 ;; This function is called by:
  7904 ;;		_setRF_Main
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _getRF_KeyStatus
  7910  1F05                     _getRF_KeyStatus:	
  7911                           
  7912                           ;RF_Control_B1.c: 167: char key = 0;
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7916  1F05  01F3               	clrf	getRF_KeyStatus@key
  7917                           
  7918                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  7919  1F06  01F4               	clrf	_getRF_KeyStatus$5175
  7920  1F07  0AF4               	incf	_getRF_KeyStatus$5175,f
  7921  1F08  0020               	movlb	0	; select bank0
  7922  1F09  1F0C               	btfss	12,6	;volatile
  7923  1F0A  1A0C               	btfsc	12,4	;volatile
  7924  1F0B  2F10               	goto	l6843
  7925  1F0C  1C0C               	btfss	12,0	;volatile
  7926  1F0D  1B8C               	btfsc	12,7	;volatile
  7927  1F0E  2F10               	goto	l6843
  7928  1F0F  01F4               	clrf	_getRF_KeyStatus$5175
  7929  1F10                     l6843:	
  7930  1F10  0874               	movf	_getRF_KeyStatus$5175,w
  7931  1F11  00F2               	movwf	??_getRF_KeyStatus
  7932  1F12  0872               	movf	??_getRF_KeyStatus,w
  7933  1F13  00F3               	movwf	getRF_KeyStatus@key
  7934                           
  7935                           ;RF_Control_B1.c: 179: return key;
  7936  1F14  0873               	movf	getRF_KeyStatus@key,w
  7937  1F15  0008               	return
  7938  1F16                     __end_of_getRF_KeyStatus:	
  7939                           
  7940                           	psect	text34
  7941  1EB4                     __ptext34:	
  7942 ;; *************** function _getBuz_GO *****************
  7943 ;; Defined at:
  7944 ;;		line 82 in file "../src/Buzzer_B1.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  i               2    6[COMMON] int 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  2    2[COMMON] int 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;Total ram usage:        6 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    3
  7965 ;; This function calls:
  7966 ;;		Nothing
  7967 ;; This function is called by:
  7968 ;;		_setRF_Main
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           
  7973                           ;psect for function _getBuz_GO
  7974  1EB4                     _getBuz_GO:	
  7975                           
  7976                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7977                           
  7978                           ;incstack = 0
  7979                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7980  1EB4  0021               	movlb	1	; select bank1
  7981  1EB5  0C3C               	rrf	_Buz1^(0+128),w
  7982  1EB6  3901               	andlw	1
  7983  1EB7  00F4               	movwf	??_getBuz_GO
  7984  1EB8  01F5               	clrf	??_getBuz_GO+1
  7985  1EB9  0874               	movf	??_getBuz_GO,w
  7986  1EBA  00F6               	movwf	getBuz_GO@i
  7987  1EBB  0875               	movf	??_getBuz_GO+1,w
  7988  1EBC  00F7               	movwf	getBuz_GO@i+1
  7989                           
  7990                           ;Buzzer_B1.c: 84: return i;
  7991  1EBD  0877               	movf	getBuz_GO@i+1,w
  7992  1EBE  01F3               	clrf	?_getBuz_GO+1
  7993  1EBF  07F3               	addwf	?_getBuz_GO+1,f
  7994  1EC0  0876               	movf	getBuz_GO@i,w
  7995  1EC1  01F2               	clrf	?_getBuz_GO
  7996  1EC2  07F2               	addwf	?_getBuz_GO,f
  7997  1EC3  0008               	return
  7998  1EC4                     __end_of_getBuz_GO:	
  7999                           
  8000                           	psect	text35
  8001  1E66                     __ptext35:	
  8002 ;; *************** function _RF_RxDisable *****************
  8003 ;; Defined at:
  8004 ;;		line 154 in file "../src/RF_Control_B1.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;		None               void
  8011 ;; Registers used:
  8012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    5
  8025 ;; This function calls:
  8026 ;;		_CC2500_WriteCommand
  8027 ;; This function is called by:
  8028 ;;		_setRF_Main
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           
  8033                           ;psect for function _RF_RxDisable
  8034  1E66                     _RF_RxDisable:	
  8035                           
  8036                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8037                           
  8038                           ;incstack = 0
  8039                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8040  1E66  0021               	movlb	1	; select bank1
  8041  1E67  18A0               	btfsc	_RF1^(0+128),1
  8042  1E68  2E6B               	goto	l2149
  8043  1E69  1DA0               	btfss	_RF1^(0+128),3
  8044  1E6A  0008               	return
  8045  1E6B                     l2149:	
  8046                           
  8047                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8048  1E6B  11A0               	bcf	_RF1^(0+128),3
  8049                           
  8050                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8051  1E6C  10A0               	bcf	_RF1^(0+128),1
  8052                           
  8053                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8054  1E6D  3036               	movlw	54
  8055  1E6E  3190  20CC  319E   	fcall	_CC2500_WriteCommand
  8056                           
  8057                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8058  1E71  303A               	movlw	58
  8059  1E72  3190  20CC         	fcall	_CC2500_WriteCommand
  8060  1E74  0008               	return
  8061  1E75                     __end_of_RF_RxDisable:	
  8062                           
  8063                           	psect	text36
  8064  0A03                     __ptext36:	
  8065 ;; *************** function _CC2500_TxData *****************
  8066 ;; Defined at:
  8067 ;;		line 32 in file "../src/CC2500_B1.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  loop_e          1    7[COMMON] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;		None               void
  8074 ;; Registers used:
  8075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;Total ram usage:        2 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		_CC2500_WriteByte
  8090 ;;		_CC2500_WriteCommand
  8091 ;;		_RF_Timeout_Counter
  8092 ;;		_setRF_TimeoutCleared
  8093 ;; This function is called by:
  8094 ;;		_setRF_Main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _CC2500_TxData
  8100  0A03                     _CC2500_TxData:	
  8101                           
  8102                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8103                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8104                           
  8105                           ;incstack = 0
  8106                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8107  0A03  3036               	movlw	54
  8108  0A04  3190  20CC  318A   	fcall	_CC2500_WriteCommand
  8109                           
  8110                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8111  0A07  303B               	movlw	59
  8112  0A08  3190  20CC  318A   	fcall	_CC2500_WriteCommand
  8113                           
  8114                           ;CC2500_B1.c: 38: RC0 = 0;
  8115  0A0B  0020               	movlb	0	; select bank0
  8116  0A0C  100E               	bcf	14,0	;volatile
  8117                           
  8118                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8119  0A0D  307F               	movlw	127
  8120  0A0E  00F6               	movwf	??_CC2500_TxData
  8121  0A0F  0876               	movf	??_CC2500_TxData,w
  8122  0A10  0021               	movlb	1	; select bank1
  8123  0A11  00D0               	movwf	_SPI0Buffer^(0+128)
  8124                           
  8125                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8126  0A12  2A16               	goto	l8587
  8127  0A13                     l8585:	
  8128                           
  8129                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8130  0A13  319F  27C1  318A   	fcall	_RF_Timeout_Counter
  8131  0A16                     l8587:	
  8132  0A16  0020               	movlb	0	; select bank0
  8133  0A17  1E8E               	btfss	14,5	;volatile
  8134  0A18  2A1C               	goto	l8591
  8135  0A19  0021               	movlb	1	; select bank1
  8136  0A1A  1F21               	btfss	(_RF1^(0+128)+1),6
  8137  0A1B  2A13               	goto	l8585
  8138  0A1C                     l8591:	
  8139                           
  8140                           ;CC2500_B1.c: 42: };
  8141                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8142  0A1C  319C  24EA  318A   	fcall	_setRF_TimeoutCleared
  8143                           
  8144                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8145  0A1F  3190  209A  318A   	fcall	_CC2500_WriteByte
  8146                           
  8147                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8148  0A22  0021               	movlb	1	; select bank1
  8149  0A23  0852               	movf	_Tx_Length^(0+128),w
  8150  0A24  00F6               	movwf	??_CC2500_TxData
  8151  0A25  0876               	movf	??_CC2500_TxData,w
  8152  0A26  00D0               	movwf	_SPI0Buffer^(0+128)
  8153                           
  8154                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8155  0A27  3190  209A  318A   	fcall	_CC2500_WriteByte
  8156                           
  8157                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8158  0A2A  01F7               	clrf	CC2500_TxData@loop_e
  8159  0A2B                     l8605:	
  8160  0A2B  0021               	movlb	1	; select bank1
  8161  0A2C  0852               	movf	_Tx_Length^(0+128),w
  8162  0A2D  0277               	subwf	CC2500_TxData@loop_e,w
  8163  0A2E  1803               	btfsc	3,0
  8164  0A2F  2A42               	goto	l235
  8165                           
  8166                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8167  0A30  0877               	movf	CC2500_TxData@loop_e,w
  8168  0A31  3EA0               	addlw	_RF_Data& (0+255)
  8169  0A32  0086               	movwf	6
  8170  0A33  3001               	movlw	1	; select bank3/4
  8171  0A34  0087               	movwf	7
  8172  0A35  0801               	movf	1,w
  8173  0A36  00F6               	movwf	??_CC2500_TxData
  8174  0A37  0876               	movf	??_CC2500_TxData,w
  8175  0A38  0021               	movlb	1	; select bank1
  8176  0A39  00D0               	movwf	_SPI0Buffer^(0+128)
  8177                           
  8178                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8179  0A3A  3190  209A  318A   	fcall	_CC2500_WriteByte
  8180  0A3D  3001               	movlw	1
  8181  0A3E  00F6               	movwf	??_CC2500_TxData
  8182  0A3F  0876               	movf	??_CC2500_TxData,w
  8183  0A40  07F7               	addwf	CC2500_TxData@loop_e,f
  8184  0A41  2A2B               	goto	l8605
  8185  0A42                     l235:	
  8186                           
  8187                           ;CC2500_B1.c: 51: }
  8188                           ;CC2500_B1.c: 52: RC0 = 1;
  8189  0A42  0020               	movlb	0	; select bank0
  8190  0A43  140E               	bsf	14,0	;volatile
  8191                           
  8192                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8193  0A44  3035               	movlw	53
  8194  0A45  3190  20CC  318A   	fcall	_CC2500_WriteCommand
  8195                           
  8196                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8197  0A48  2A4C               	goto	l8611
  8198  0A49                     l8609:	
  8199                           
  8200                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8201  0A49  319F  27C1  318A   	fcall	_RF_Timeout_Counter
  8202  0A4C                     l8611:	
  8203  0A4C  0020               	movlb	0	; select bank0
  8204  0A4D  188E               	btfsc	14,1	;volatile
  8205  0A4E  2A52               	goto	l8615
  8206  0A4F  0021               	movlb	1	; select bank1
  8207  0A50  1F21               	btfss	(_RF1^(0+128)+1),6
  8208  0A51  2A49               	goto	l8609
  8209  0A52                     l8615:	
  8210                           
  8211                           ;CC2500_B1.c: 56: };
  8212                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8213  0A52  319C  24EA  318A   	fcall	_setRF_TimeoutCleared
  8214                           
  8215                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8216  0A55  2A59               	goto	l8619
  8217  0A56                     l8617:	
  8218                           
  8219                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8220  0A56  319F  27C1  318A   	fcall	_RF_Timeout_Counter
  8221  0A59                     l8619:	
  8222  0A59  0020               	movlb	0	; select bank0
  8223  0A5A  1C8E               	btfss	14,1	;volatile
  8224  0A5B  2A5F               	goto	l8623
  8225  0A5C  0021               	movlb	1	; select bank1
  8226  0A5D  1F21               	btfss	(_RF1^(0+128)+1),6
  8227  0A5E  2A56               	goto	l8617
  8228  0A5F                     l8623:	
  8229                           
  8230                           ;CC2500_B1.c: 61: };
  8231                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8232  0A5F  319C  24EA  318A   	fcall	_setRF_TimeoutCleared
  8233                           
  8234                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8235  0A62  3036               	movlw	54
  8236  0A63  3190  20CC  318A   	fcall	_CC2500_WriteCommand
  8237                           
  8238                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8239  0A66  303B               	movlw	59
  8240  0A67  3190  20CC         	fcall	_CC2500_WriteCommand
  8241                           
  8242                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8243  0A69  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8244  0A6A  0008               	return
  8245  0A6B                     __end_of_CC2500_TxData:	
  8246                           
  8247                           	psect	text37
  8248  0874                     __ptext37:	
  8249 ;; *************** function _CC2500_RxData *****************
  8250 ;; Defined at:
  8251 ;;		line 73 in file "../src/CC2500_B1.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  loop_f          1    7[COMMON] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;		None               void
  8258 ;; Registers used:
  8259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;Total ram usage:        2 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    5
  8272 ;; This function calls:
  8273 ;;		_CC2500_ReadByte
  8274 ;;		_CC2500_ReadStatus
  8275 ;;		_CC2500_WriteByte
  8276 ;;		_CC2500_WriteCommand
  8277 ;;		_RF_Timeout_Counter
  8278 ;;		_setRF_TimeoutCleared
  8279 ;; This function is called by:
  8280 ;;		_setRF_Main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           
  8285                           ;psect for function _CC2500_RxData
  8286  0874                     _CC2500_RxData:	
  8287                           
  8288                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8289                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8293  0874  0020               	movlb	0	; select bank0
  8294  0875  188E               	btfsc	14,1	;volatile
  8295  0876  0008               	return
  8296                           
  8297                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8298  0877  303B               	movlw	59
  8299  0878  3192  2210  3188   	fcall	_CC2500_ReadStatus
  8300                           
  8301                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8302  087B  0021               	movlb	1	; select bank1
  8303  087C  0855               	movf	_s_data^(0+128),w
  8304  087D  1903               	btfsc	3,2
  8305  087E  0008               	return
  8306                           
  8307                           ;CC2500_B1.c: 90: RC0 = 0;
  8308  087F  0020               	movlb	0	; select bank0
  8309  0880  100E               	bcf	14,0	;volatile
  8310                           
  8311                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8312  0881  30FF               	movlw	255
  8313  0882  00F6               	movwf	??_CC2500_RxData
  8314  0883  0876               	movf	??_CC2500_RxData,w
  8315  0884  0021               	movlb	1	; select bank1
  8316  0885  00D0               	movwf	_SPI0Buffer^(0+128)
  8317                           
  8318                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8319  0886  288A               	goto	l8643
  8320  0887                     l8641:	
  8321                           
  8322                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8323  0887  319F  27C1  3188   	fcall	_RF_Timeout_Counter
  8324  088A                     l8643:	
  8325  088A  0020               	movlb	0	; select bank0
  8326  088B  1E8E               	btfss	14,5	;volatile
  8327  088C  2890               	goto	l8647
  8328  088D  0021               	movlb	1	; select bank1
  8329  088E  1F21               	btfss	(_RF1^(0+128)+1),6
  8330  088F  2887               	goto	l8641
  8331  0890                     l8647:	
  8332                           
  8333                           ;CC2500_B1.c: 95: };
  8334                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8335  0890  319C  24EA  3188   	fcall	_setRF_TimeoutCleared
  8336                           
  8337                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8338  0893  3190  209A  3188   	fcall	_CC2500_WriteByte
  8339                           
  8340                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8341  0896  3191  2137  3188   	fcall	_CC2500_ReadByte
  8342                           
  8343                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8344  0899  0021               	movlb	1	; select bank1
  8345  089A  0850               	movf	_SPI0Buffer^(0+128),w
  8346  089B  00F6               	movwf	??_CC2500_RxData
  8347  089C  0876               	movf	??_CC2500_RxData,w
  8348  089D  00CF               	movwf	_Rx_Length^(0+128)
  8349                           
  8350                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8351  089E  01F7               	clrf	CC2500_RxData@loop_f
  8352  089F                     l8663:	
  8353  089F  084F               	movf	_Rx_Length^(0+128),w
  8354  08A0  0277               	subwf	CC2500_RxData@loop_f,w
  8355  08A1  1803               	btfsc	3,0
  8356  08A2  28B5               	goto	l8665
  8357                           
  8358                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8359  08A3  3191  2137  3188   	fcall	_CC2500_ReadByte
  8360                           
  8361                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8362  08A6  0021               	movlb	1	; select bank1
  8363  08A7  0850               	movf	_SPI0Buffer^(0+128),w
  8364  08A8  00F6               	movwf	??_CC2500_RxData
  8365  08A9  0877               	movf	CC2500_RxData@loop_f,w
  8366  08AA  3EA0               	addlw	_RF_Data& (0+255)
  8367  08AB  0086               	movwf	6
  8368  08AC  3001               	movlw	1	; select bank3/4
  8369  08AD  0087               	movwf	7
  8370  08AE  0876               	movf	??_CC2500_RxData,w
  8371  08AF  0081               	movwf	1
  8372  08B0  3001               	movlw	1
  8373  08B1  00F6               	movwf	??_CC2500_RxData
  8374  08B2  0876               	movf	??_CC2500_RxData,w
  8375  08B3  07F7               	addwf	CC2500_RxData@loop_f,f
  8376  08B4  289F               	goto	l8663
  8377  08B5                     l8665:	
  8378                           
  8379                           ;CC2500_B1.c: 104: }
  8380                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8381  08B5  3191  2137  3188   	fcall	_CC2500_ReadByte
  8382                           
  8383                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8384  08B8  0021               	movlb	1	; select bank1
  8385  08B9  0850               	movf	_SPI0Buffer^(0+128),w
  8386  08BA  00F6               	movwf	??_CC2500_RxData
  8387  08BB  0876               	movf	??_CC2500_RxData,w
  8388  08BC  00CE               	movwf	_RSSI^(0+128)
  8389                           
  8390                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8391  08BD  3191  2137  3188   	fcall	_CC2500_ReadByte
  8392                           
  8393                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8394  08C0  0021               	movlb	1	; select bank1
  8395  08C1  0850               	movf	_SPI0Buffer^(0+128),w
  8396  08C2  00F6               	movwf	??_CC2500_RxData
  8397  08C3  0876               	movf	??_CC2500_RxData,w
  8398  08C4  00C8               	movwf	_CRC^(0+128)
  8399                           
  8400                           ;CC2500_B1.c: 109: RC0 = 1;
  8401  08C5  0020               	movlb	0	; select bank0
  8402  08C6  140E               	bsf	14,0	;volatile
  8403                           
  8404                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8405  08C7  0021               	movlb	1	; select bank1
  8406  08C8  1BC8               	btfsc	_CRC^(0+128),7
  8407                           
  8408                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8409  08C9  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8410                           
  8411                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8412  08CA  11A0               	bcf	_RF1^(0+128),3
  8413                           
  8414                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8415  08CB  14A0               	bsf	_RF1^(0+128),1
  8416                           
  8417                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8418  08CC  3036               	movlw	54
  8419  08CD  3190  20CC  3188   	fcall	_CC2500_WriteCommand
  8420                           
  8421                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8422  08D0  303A               	movlw	58
  8423  08D1  3190  20CC         	fcall	_CC2500_WriteCommand
  8424  08D3  0021               	movlb	1	; select bank1
  8425  08D4  0008               	return
  8426  08D5                     __end_of_CC2500_RxData:	
  8427                           
  8428                           	psect	text38
  8429  1210                     __ptext38:	
  8430 ;; *************** function _CC2500_ReadStatus *****************
  8431 ;; Defined at:
  8432 ;;		line 308 in file "../src/CC2500_B1.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;  status_addr     1    wreg     unsigned char 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  status_addr     1    5[COMMON] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;		None               void
  8439 ;; Registers used:
  8440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:        2 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    4
  8453 ;; This function calls:
  8454 ;;		_CC2500_ReadByte
  8455 ;;		_CC2500_WriteByte
  8456 ;;		_RF_Timeout_Counter
  8457 ;;		_setRF_TimeoutCleared
  8458 ;; This function is called by:
  8459 ;;		_CC2500_RxData
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           
  8464                           ;psect for function _CC2500_ReadStatus
  8465  1210                     _CC2500_ReadStatus:	
  8466                           
  8467                           ;incstack = 0
  8468                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8469                           ;CC2500_ReadStatus@status_addr stored from wreg
  8470  1210  00F5               	movwf	CC2500_ReadStatus@status_addr
  8471                           
  8472                           ;CC2500_B1.c: 309: RC0 = 0;
  8473  1211  0020               	movlb	0	; select bank0
  8474  1212  100E               	bcf	14,0	;volatile
  8475                           
  8476                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8477  1213  0875               	movf	CC2500_ReadStatus@status_addr,w
  8478  1214  3EC0               	addlw	192
  8479  1215  00F4               	movwf	??_CC2500_ReadStatus
  8480  1216  0874               	movf	??_CC2500_ReadStatus,w
  8481  1217  0021               	movlb	1	; select bank1
  8482  1218  00D0               	movwf	_SPI0Buffer^(0+128)
  8483                           
  8484                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8485  1219  2A1D               	goto	l8429
  8486  121A                     l8427:	
  8487                           
  8488                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8489  121A  319F  27C1  3192   	fcall	_RF_Timeout_Counter
  8490  121D                     l8429:	
  8491  121D  0020               	movlb	0	; select bank0
  8492  121E  1E8E               	btfss	14,5	;volatile
  8493  121F  2A23               	goto	l8433
  8494  1220  0021               	movlb	1	; select bank1
  8495  1221  1F21               	btfss	(_RF1^(0+128)+1),6
  8496  1222  2A1A               	goto	l8427
  8497  1223                     l8433:	
  8498                           
  8499                           ;CC2500_B1.c: 314: };
  8500                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8501  1223  319C  24EA  3192   	fcall	_setRF_TimeoutCleared
  8502                           
  8503                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8504  1226  3190  209A  3192   	fcall	_CC2500_WriteByte
  8505                           
  8506                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8507  1229  3191  2137         	fcall	_CC2500_ReadByte
  8508                           
  8509                           ;CC2500_B1.c: 319: RC0 = 1;
  8510  122B  0020               	movlb	0	; select bank0
  8511  122C  140E               	bsf	14,0	;volatile
  8512                           
  8513                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8514  122D  0021               	movlb	1	; select bank1
  8515  122E  0850               	movf	_SPI0Buffer^(0+128),w
  8516  122F  00F4               	movwf	??_CC2500_ReadStatus
  8517  1230  0874               	movf	??_CC2500_ReadStatus,w
  8518  1231  00D5               	movwf	_s_data^(0+128)
  8519  1232  0008               	return
  8520  1233                     __end_of_CC2500_ReadStatus:	
  8521                           
  8522                           	psect	text39
  8523  1137                     __ptext39:	
  8524 ;; *************** function _CC2500_ReadByte *****************
  8525 ;; Defined at:
  8526 ;;		line 242 in file "../src/CC2500_B1.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;		None
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;  loop_b          1    3[COMMON] unsigned char 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;		None               void
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;Total ram usage:        2 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    3
  8547 ;; This function calls:
  8548 ;;		Nothing
  8549 ;; This function is called by:
  8550 ;;		_CC2500_RxData
  8551 ;;		_CC2500_ReadStatus
  8552 ;;		_CC2500_ReadREG
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _CC2500_ReadByte
  8558  1137                     _CC2500_ReadByte:	
  8559                           
  8560                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8561                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8565  1137  01F3               	clrf	CC2500_ReadByte@loop_b
  8566  1138                     L2:	
  8567  1138  3008               	movlw	8
  8568  1139  0273               	subwf	CC2500_ReadByte@loop_b,w
  8569  113A  1803               	btfsc	3,0
  8570  113B  0008               	return
  8571                           
  8572                           ;CC2500_B1.c: 245: RC3 = 1;
  8573  113C  0020               	movlb	0	; select bank0
  8574  113D  158E               	bsf	14,3	;volatile
  8575                           
  8576                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8577  113E  1003               	clrc
  8578  113F  0021               	movlb	1	; select bank1
  8579  1140  0DD0               	rlf	_SPI0Buffer^(0+128),f
  8580                           
  8581                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8582  1141  0020               	movlb	0	; select bank0
  8583  1142  1E8E               	btfss	14,5	;volatile
  8584  1143  2947               	goto	l6195
  8585                           
  8586                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8587  1144  0021               	movlb	1	; select bank1
  8588  1145  1450               	bsf	_SPI0Buffer^(0+128),0
  8589  1146  294C               	goto	l6197
  8590  1147                     l6195:	
  8591                           
  8592                           ;CC2500_B1.c: 249: else
  8593                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8594  1147  30FE               	movlw	254
  8595  1148  00F2               	movwf	??_CC2500_ReadByte
  8596  1149  0872               	movf	??_CC2500_ReadByte,w
  8597  114A  0021               	movlb	1	; select bank1
  8598  114B  05D0               	andwf	_SPI0Buffer^(0+128),f
  8599  114C                     l6197:	
  8600                           
  8601                           ;CC2500_B1.c: 251: RC3 = 0;
  8602  114C  0020               	movlb	0	; select bank0
  8603  114D  118E               	bcf	14,3	;volatile
  8604  114E  3001               	movlw	1
  8605  114F  00F2               	movwf	??_CC2500_ReadByte
  8606  1150  0872               	movf	??_CC2500_ReadByte,w
  8607  1151  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8608  1152  2938               	goto	L2
  8609  1153                     __end_of_CC2500_ReadByte:	
  8610                           
  8611                           	psect	text40
  8612  1FD6                     __ptext40:	
  8613 ;; *************** function _CC2500_PowerOnInitial *****************
  8614 ;; Defined at:
  8615 ;;		line 126 in file "../src/CC2500_B1.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;		None
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;		None
  8620 ;; Return value:  Size  Location     Type
  8621 ;;		None               void
  8622 ;; Registers used:
  8623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8624 ;; Tracked objects:
  8625 ;;		On entry : 0/0
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;Total ram usage:        0 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    6
  8636 ;; This function calls:
  8637 ;;		_CC2500_ClearRXFIFO
  8638 ;;		_CC2500_ClearTXFIFO
  8639 ;;		_CC2500_FrequencyCabr
  8640 ;;		_CC2500_InitPATable
  8641 ;;		_CC2500_InitSetREG
  8642 ;;		_CC2500_PowerRST
  8643 ;;		_CC2500_SIDLEMode
  8644 ;; This function is called by:
  8645 ;;		_main
  8646 ;;		_setRF_Main
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function _CC2500_PowerOnInitial
  8652  1FD6                     _CC2500_PowerOnInitial:	
  8653                           
  8654                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8658  1FD6  3195  2525  319F   	fcall	_CC2500_PowerRST
  8659                           
  8660                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8661  1FD9  3192  22A8  319F   	fcall	_CC2500_InitSetREG
  8662                           
  8663                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8664  1FDC  3191  2170  319F   	fcall	_CC2500_InitPATable
  8665                           
  8666                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8667  1FDF  319C  24F2  319F   	fcall	_CC2500_ClearTXFIFO
  8668                           
  8669                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8670  1FE2  319C  24EE  319F   	fcall	_CC2500_ClearRXFIFO
  8671                           
  8672                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8673  1FE5  319D  25BE  319F   	fcall	_CC2500_FrequencyCabr
  8674                           
  8675                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8676  1FE8  319C  24F6         	fcall	_CC2500_SIDLEMode
  8677  1FEA  0008               	return
  8678  1FEB                     __end_of_CC2500_PowerOnInitial:	
  8679                           
  8680                           	psect	text41
  8681  1CF6                     __ptext41:	
  8682 ;; *************** function _CC2500_SIDLEMode *****************
  8683 ;; Defined at:
  8684 ;;		line 216 in file "../src/CC2500_B1.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;		None
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;		None               void
  8691 ;; Registers used:
  8692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;Total ram usage:        0 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    5
  8705 ;; This function calls:
  8706 ;;		_CC2500_WriteCommand
  8707 ;; This function is called by:
  8708 ;;		_CC2500_PowerOnInitial
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           
  8713                           ;psect for function _CC2500_SIDLEMode
  8714  1CF6                     _CC2500_SIDLEMode:	
  8715                           
  8716                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8720  1CF6  3036               	movlw	54
  8721  1CF7  3190  20CC         	fcall	_CC2500_WriteCommand
  8722  1CF9  0008               	return
  8723  1CFA                     __end_of_CC2500_SIDLEMode:	
  8724                           
  8725                           	psect	text42
  8726  1525                     __ptext42:	
  8727 ;; *************** function _CC2500_PowerRST *****************
  8728 ;; Defined at:
  8729 ;;		line 139 in file "../src/CC2500_B1.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;		None
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;		None
  8734 ;; Return value:  Size  Location     Type
  8735 ;;		None               void
  8736 ;; Registers used:
  8737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;Total ram usage:        1 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    4
  8750 ;; This function calls:
  8751 ;;		_CC2500_WriteByte
  8752 ;;		_DelayTime_1us
  8753 ;;		_RF_Timeout_Counter
  8754 ;;		_setRF_TimeoutCleared
  8755 ;; This function is called by:
  8756 ;;		_CC2500_PowerOnInitial
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           
  8761                           ;psect for function _CC2500_PowerRST
  8762  1525                     _CC2500_PowerRST:	
  8763                           
  8764                           ;CC2500_B1.c: 140: RC3 = 0;
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8768  1525  0020               	movlb	0	; select bank0
  8769  1526  118E               	bcf	14,3	;volatile
  8770                           
  8771                           ;CC2500_B1.c: 141: RC4 = 0;
  8772  1527  120E               	bcf	14,4	;volatile
  8773                           
  8774                           ;CC2500_B1.c: 142: RC0 = 1;
  8775  1528  140E               	bsf	14,0	;volatile
  8776                           
  8777                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8778  1529  300A               	movlw	10
  8779  152A  00F2               	movwf	DelayTime_1us@count
  8780  152B  3000               	movlw	0
  8781  152C  00F3               	movwf	DelayTime_1us@count+1
  8782  152D  3192  2233  3195   	fcall	_DelayTime_1us
  8783                           
  8784                           ;CC2500_B1.c: 144: RC0 = 0;
  8785  1530  0020               	movlb	0	; select bank0
  8786  1531  100E               	bcf	14,0	;volatile
  8787                           
  8788                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8789  1532  300A               	movlw	10
  8790  1533  00F2               	movwf	DelayTime_1us@count
  8791  1534  3000               	movlw	0
  8792  1535  00F3               	movwf	DelayTime_1us@count+1
  8793  1536  3192  2233  3195   	fcall	_DelayTime_1us
  8794                           
  8795                           ;CC2500_B1.c: 146: RC0 = 1;
  8796  1539  0020               	movlb	0	; select bank0
  8797  153A  140E               	bsf	14,0	;volatile
  8798                           
  8799                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8800  153B  3028               	movlw	40
  8801  153C  00F2               	movwf	DelayTime_1us@count
  8802  153D  3000               	movlw	0
  8803  153E  00F3               	movwf	DelayTime_1us@count+1
  8804  153F  3192  2233  3195   	fcall	_DelayTime_1us
  8805                           
  8806                           ;CC2500_B1.c: 148: RC0 = 0;
  8807  1542  0020               	movlb	0	; select bank0
  8808  1543  100E               	bcf	14,0	;volatile
  8809                           
  8810                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8811  1544  3030               	movlw	48
  8812  1545  00F8               	movwf	??_CC2500_PowerRST
  8813  1546  0878               	movf	??_CC2500_PowerRST,w
  8814  1547  0021               	movlb	1	; select bank1
  8815  1548  00D0               	movwf	_SPI0Buffer^(0+128)
  8816                           
  8817                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8818  1549  2D4D               	goto	l8457
  8819  154A                     l8455:	
  8820                           
  8821                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8822  154A  319F  27C1  3195   	fcall	_RF_Timeout_Counter
  8823  154D                     l8457:	
  8824  154D  0020               	movlb	0	; select bank0
  8825  154E  1E8E               	btfss	14,5	;volatile
  8826  154F  2D53               	goto	l8461
  8827  1550  0021               	movlb	1	; select bank1
  8828  1551  1F21               	btfss	(_RF1^(0+128)+1),6
  8829  1552  2D4A               	goto	l8455
  8830  1553                     l8461:	
  8831                           
  8832                           ;CC2500_B1.c: 152: };
  8833                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8834  1553  319C  24EA  3195   	fcall	_setRF_TimeoutCleared
  8835                           
  8836                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8837  1556  3190  209A  3195   	fcall	_CC2500_WriteByte
  8838                           
  8839                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8840  1559  2D5D               	goto	l8467
  8841  155A                     l8465:	
  8842                           
  8843                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8844  155A  319F  27C1  3195   	fcall	_RF_Timeout_Counter
  8845  155D                     l8467:	
  8846  155D  0020               	movlb	0	; select bank0
  8847  155E  1E8E               	btfss	14,5	;volatile
  8848  155F  2D63               	goto	l8471
  8849  1560  0021               	movlb	1	; select bank1
  8850  1561  1F21               	btfss	(_RF1^(0+128)+1),6
  8851  1562  2D5A               	goto	l8465
  8852  1563                     l8471:	
  8853                           
  8854                           ;CC2500_B1.c: 157: };
  8855                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8856  1563  319C  24EA         	fcall	_setRF_TimeoutCleared
  8857                           
  8858                           ;CC2500_B1.c: 159: RC4 = 0;
  8859  1565  0020               	movlb	0	; select bank0
  8860  1566  120E               	bcf	14,4	;volatile
  8861                           
  8862                           ;CC2500_B1.c: 160: RC0 = 1;
  8863  1567  140E               	bsf	14,0	;volatile
  8864  1568  0008               	return
  8865  1569                     __end_of_CC2500_PowerRST:	
  8866                           
  8867                           	psect	text43
  8868  12A8                     __ptext43:	
  8869 ;; *************** function _CC2500_InitSetREG *****************
  8870 ;; Defined at:
  8871 ;;		line 166 in file "../src/CC2500_B1.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  loop_c          1    2[BANK0 ] unsigned char 
  8876 ;;  temp2           1    1[BANK0 ] unsigned char 
  8877 ;;  temp1           1    0[BANK0 ] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        4 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    5
  8894 ;; This function calls:
  8895 ;;		_CC2500_WriteREG
  8896 ;; This function is called by:
  8897 ;;		_CC2500_PowerOnInitial
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _CC2500_InitSetREG
  8903  12A8                     _CC2500_InitSetREG:	
  8904                           
  8905                           ;CC2500_B1.c: 167: unsigned char loop_c;
  8906                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  8907                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  8908                           
  8909                           ;incstack = 0
  8910                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8911  12A8  0020               	movlb	0	; select bank0
  8912  12A9  01A2               	clrf	CC2500_InitSetREG@loop_c
  8913  12AA                     L3:	
  8914  12AA  302F               	movlw	47
  8915  12AB  0222               	subwf	CC2500_InitSetREG@loop_c,w
  8916  12AC  1803               	btfsc	3,0
  8917  12AD  0008               	return
  8918                           
  8919                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  8920  12AE  0822               	movf	CC2500_InitSetREG@loop_c,w
  8921  12AF  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8922  12B0  0084               	movwf	4
  8923  12B1  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  8924  12B2  1803               	skipnc
  8925  12B3  3E01               	addlw	1
  8926  12B4  0085               	movwf	5
  8927  12B5  0800               	movf	0,w	;code access
  8928  12B6  00F7               	movwf	??_CC2500_InitSetREG
  8929  12B7  0877               	movf	??_CC2500_InitSetREG,w
  8930  12B8  00A0               	movwf	CC2500_InitSetREG@temp1
  8931                           
  8932                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  8933  12B9  0822               	movf	CC2500_InitSetREG@loop_c,w
  8934  12BA  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  8935  12BB  0084               	movwf	4
  8936  12BC  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  8937  12BD  1803               	skipnc
  8938  12BE  3E01               	addlw	1
  8939  12BF  0085               	movwf	5
  8940  12C0  0800               	movf	0,w	;code access
  8941  12C1  00F7               	movwf	??_CC2500_InitSetREG
  8942  12C2  0877               	movf	??_CC2500_InitSetREG,w
  8943  12C3  00A1               	movwf	CC2500_InitSetREG@temp2
  8944                           
  8945                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  8946  12C4  0821               	movf	CC2500_InitSetREG@temp2,w
  8947  12C5  00F7               	movwf	??_CC2500_InitSetREG
  8948  12C6  0877               	movf	??_CC2500_InitSetREG,w
  8949  12C7  00F4               	movwf	CC2500_WriteREG@value
  8950  12C8  0820               	movf	CC2500_InitSetREG@temp1,w
  8951  12C9  3191  21EE  3192   	fcall	_CC2500_WriteREG
  8952  12CC  3001               	movlw	1
  8953  12CD  00F7               	movwf	??_CC2500_InitSetREG
  8954  12CE  0877               	movf	??_CC2500_InitSetREG,w
  8955  12CF  0020               	movlb	0	; select bank0
  8956  12D0  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  8957  12D1  2AAA               	goto	L3
  8958  12D2                     __end_of_CC2500_InitSetREG:	
  8959                           
  8960                           	psect	text44
  8961  1170                     __ptext44:	
  8962 ;; *************** function _CC2500_InitPATable *****************
  8963 ;; Defined at:
  8964 ;;		line 181 in file "../src/CC2500_B1.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;		None
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;  loop_d          1    9[COMMON] unsigned char 
  8969 ;;  temp            1    8[COMMON] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;		None               void
  8972 ;; Registers used:
  8973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;Total ram usage:        3 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    5
  8986 ;; This function calls:
  8987 ;;		_CC2500_WriteREG
  8988 ;; This function is called by:
  8989 ;;		_CC2500_PowerOnInitial
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           
  8994                           ;psect for function _CC2500_InitPATable
  8995  1170                     _CC2500_InitPATable:	
  8996                           
  8997                           ;CC2500_B1.c: 182: unsigned char loop_d;
  8998                           ;CC2500_B1.c: 183: unsigned char temp;
  8999                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9000                           
  9001                           ;incstack = 0
  9002                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9003  1170  01F9               	clrf	CC2500_InitPATable@loop_d
  9004  1171                     L4:	
  9005  1171  3008               	movlw	8
  9006  1172  0279               	subwf	CC2500_InitPATable@loop_d,w
  9007  1173  1803               	btfsc	3,0
  9008  1174  0008               	return
  9009                           
  9010                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9011  1175  0879               	movf	CC2500_InitPATable@loop_d,w
  9012  1176  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9013  1177  0084               	movwf	4
  9014  1178  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9015  1179  1803               	skipnc
  9016  117A  3E01               	addlw	1
  9017  117B  0085               	movwf	5
  9018  117C  0800               	movf	0,w	;code access
  9019  117D  00F7               	movwf	??_CC2500_InitPATable
  9020  117E  0877               	movf	??_CC2500_InitPATable,w
  9021  117F  00F8               	movwf	CC2500_InitPATable@temp
  9022                           
  9023                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9024  1180  0878               	movf	CC2500_InitPATable@temp,w
  9025  1181  00F7               	movwf	??_CC2500_InitPATable
  9026  1182  0877               	movf	??_CC2500_InitPATable,w
  9027  1183  00F4               	movwf	CC2500_WriteREG@value
  9028  1184  303E               	movlw	62
  9029  1185  3191  21EE  3191   	fcall	_CC2500_WriteREG
  9030  1188  3001               	movlw	1
  9031  1189  00F7               	movwf	??_CC2500_InitPATable
  9032  118A  0877               	movf	??_CC2500_InitPATable,w
  9033  118B  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9034  118C  2971               	goto	L4
  9035  118D                     __end_of_CC2500_InitPATable:	
  9036                           
  9037                           	psect	text45
  9038  11EE                     __ptext45:	
  9039 ;; *************** function _CC2500_WriteREG *****************
  9040 ;; Defined at:
  9041 ;;		line 258 in file "../src/CC2500_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  w_addr          1    wreg     unsigned char 
  9044 ;;  value           1    4[COMMON] unsigned char 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  w_addr          1    6[COMMON] unsigned char 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        3 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    4
  9063 ;; This function calls:
  9064 ;;		_CC2500_WriteByte
  9065 ;;		_RF_Timeout_Counter
  9066 ;;		_setRF_TimeoutCleared
  9067 ;; This function is called by:
  9068 ;;		_CC2500_InitSetREG
  9069 ;;		_CC2500_InitPATable
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           
  9074                           ;psect for function _CC2500_WriteREG
  9075  11EE                     _CC2500_WriteREG:	
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9079                           ;CC2500_WriteREG@w_addr stored from wreg
  9080  11EE  00F6               	movwf	CC2500_WriteREG@w_addr
  9081                           
  9082                           ;CC2500_B1.c: 259: RC0 = 0;
  9083  11EF  0020               	movlb	0	; select bank0
  9084  11F0  100E               	bcf	14,0	;volatile
  9085                           
  9086                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9087  11F1  0876               	movf	CC2500_WriteREG@w_addr,w
  9088  11F2  00F5               	movwf	??_CC2500_WriteREG
  9089  11F3  0875               	movf	??_CC2500_WriteREG,w
  9090  11F4  0021               	movlb	1	; select bank1
  9091  11F5  00D0               	movwf	_SPI0Buffer^(0+128)
  9092                           
  9093                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9094  11F6  29FA               	goto	l8367
  9095  11F7                     l8365:	
  9096                           
  9097                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9098  11F7  319F  27C1  3191   	fcall	_RF_Timeout_Counter
  9099  11FA                     l8367:	
  9100  11FA  0020               	movlb	0	; select bank0
  9101  11FB  1E8E               	btfss	14,5	;volatile
  9102  11FC  2A00               	goto	l8371
  9103  11FD  0021               	movlb	1	; select bank1
  9104  11FE  1F21               	btfss	(_RF1^(0+128)+1),6
  9105  11FF  29F7               	goto	l8365
  9106  1200                     l8371:	
  9107                           
  9108                           ;CC2500_B1.c: 263: };
  9109                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9110  1200  319C  24EA  3191   	fcall	_setRF_TimeoutCleared
  9111                           
  9112                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9113  1203  3190  209A  3191   	fcall	_CC2500_WriteByte
  9114                           
  9115                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9116  1206  0874               	movf	CC2500_WriteREG@value,w
  9117  1207  00F5               	movwf	??_CC2500_WriteREG
  9118  1208  0875               	movf	??_CC2500_WriteREG,w
  9119  1209  0021               	movlb	1	; select bank1
  9120  120A  00D0               	movwf	_SPI0Buffer^(0+128)
  9121                           
  9122                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9123  120B  3190  209A         	fcall	_CC2500_WriteByte
  9124                           
  9125                           ;CC2500_B1.c: 269: RC0 = 1;
  9126  120D  0020               	movlb	0	; select bank0
  9127  120E  140E               	bsf	14,0	;volatile
  9128  120F  0008               	return
  9129  1210                     __end_of_CC2500_WriteREG:	
  9130                           
  9131                           	psect	text46
  9132  1DBE                     __ptext46:	
  9133 ;; *************** function _CC2500_FrequencyCabr *****************
  9134 ;; Defined at:
  9135 ;;		line 208 in file "../src/CC2500_B1.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;		None               void
  9142 ;; Registers used:
  9143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    5
  9156 ;; This function calls:
  9157 ;;		_CC2500_WriteCommand
  9158 ;;		_DelayTime_1us
  9159 ;; This function is called by:
  9160 ;;		_CC2500_PowerOnInitial
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _CC2500_FrequencyCabr
  9166  1DBE                     _CC2500_FrequencyCabr:	
  9167                           
  9168                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9172  1DBE  3033               	movlw	51
  9173  1DBF  3190  20CC  319D   	fcall	_CC2500_WriteCommand
  9174                           
  9175                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9176  1DC2  30E8               	movlw	232
  9177  1DC3  00F2               	movwf	DelayTime_1us@count
  9178  1DC4  3003               	movlw	3
  9179  1DC5  00F3               	movwf	DelayTime_1us@count+1
  9180  1DC6  3192  2233         	fcall	_DelayTime_1us
  9181  1DC8  0008               	return
  9182  1DC9                     __end_of_CC2500_FrequencyCabr:	
  9183                           
  9184                           	psect	text47
  9185  1233                     __ptext47:	
  9186 ;; *************** function _DelayTime_1us *****************
  9187 ;; Defined at:
  9188 ;;		line 327 in file "../src/CC2500_B1.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;  count           2    2[COMMON] int 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  j               2    6[COMMON] unsigned int 
  9193 ;;  i               2    4[COMMON] unsigned int 
  9194 ;; Return value:  Size  Location     Type
  9195 ;;		None               void
  9196 ;; Registers used:
  9197 ;;		wreg, status,2
  9198 ;; Tracked objects:
  9199 ;;		On entry : 0/0
  9200 ;;		On exit  : 0/0
  9201 ;;		Unchanged: 0/0
  9202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;Total ram usage:        6 bytes
  9208 ;; Hardware stack levels used:    1
  9209 ;; Hardware stack levels required when called:    3
  9210 ;; This function calls:
  9211 ;;		Nothing
  9212 ;; This function is called by:
  9213 ;;		_CC2500_PowerRST
  9214 ;;		_CC2500_FrequencyCabr
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           
  9219                           ;psect for function _DelayTime_1us
  9220  1233                     _DelayTime_1us:	
  9221                           
  9222                           ;CC2500_B1.c: 328: unsigned int i, j;
  9223                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9224                           
  9225                           ;incstack = 0
  9226                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9227  1233  3001               	movlw	1
  9228  1234  00F4               	movwf	DelayTime_1us@i
  9229  1235  3000               	movlw	0
  9230  1236  00F5               	movwf	DelayTime_1us@i+1
  9231  1237                     l347:	
  9232  1237  0873               	movf	DelayTime_1us@count+1,w
  9233  1238  0275               	subwf	DelayTime_1us@i+1,w
  9234  1239  1D03               	skipz
  9235  123A  2A3D               	goto	u5385
  9236  123B  0872               	movf	DelayTime_1us@count,w
  9237  123C  0274               	subwf	DelayTime_1us@i,w
  9238  123D                     u5385:	
  9239  123D  1803               	btfsc	3,0
  9240  123E  0008               	return
  9241                           
  9242                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9243  123F  01F6               	clrf	DelayTime_1us@j
  9244  1240  01F7               	clrf	DelayTime_1us@j+1
  9245  1241  3000               	movlw	0
  9246  1242  0277               	subwf	DelayTime_1us@j+1,w
  9247  1243  3002               	movlw	2
  9248  1244  1903               	skipnz
  9249  1245  0276               	subwf	DelayTime_1us@j,w
  9250  1246  1803               	btfsc	3,0
  9251  1247  2A53               	goto	l6211
  9252  1248                     l6209:	
  9253  1248  3001               	movlw	1
  9254  1249  07F6               	addwf	DelayTime_1us@j,f
  9255  124A  3000               	movlw	0
  9256  124B  3DF7               	addwfc	DelayTime_1us@j+1,f
  9257  124C  3000               	movlw	0
  9258  124D  0277               	subwf	DelayTime_1us@j+1,w
  9259  124E  3002               	movlw	2
  9260  124F  1903               	skipnz
  9261  1250  0276               	subwf	DelayTime_1us@j,w
  9262  1251  1C03               	skipc
  9263  1252  2A48               	goto	l6209
  9264  1253                     l6211:	
  9265  1253  3001               	movlw	1
  9266  1254  07F4               	addwf	DelayTime_1us@i,f
  9267  1255  3000               	movlw	0
  9268  1256  3DF5               	addwfc	DelayTime_1us@i+1,f
  9269  1257  2A37               	goto	l347
  9270  1258                     __end_of_DelayTime_1us:	
  9271                           
  9272                           	psect	text48
  9273  1CF2                     __ptext48:	
  9274 ;; *************** function _CC2500_ClearTXFIFO *****************
  9275 ;; Defined at:
  9276 ;;		line 194 in file "../src/CC2500_B1.c"
  9277 ;; Parameters:    Size  Location     Type
  9278 ;;		None
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;		None               void
  9283 ;; Registers used:
  9284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;Total ram usage:        0 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    5
  9297 ;; This function calls:
  9298 ;;		_CC2500_WriteCommand
  9299 ;; This function is called by:
  9300 ;;		_CC2500_PowerOnInitial
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           
  9305                           ;psect for function _CC2500_ClearTXFIFO
  9306  1CF2                     _CC2500_ClearTXFIFO:	
  9307                           
  9308                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9309                           
  9310                           ;incstack = 0
  9311                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9312  1CF2  303B               	movlw	59
  9313  1CF3  3190  20CC         	fcall	_CC2500_WriteCommand
  9314  1CF5  0008               	return
  9315  1CF6                     __end_of_CC2500_ClearTXFIFO:	
  9316                           
  9317                           	psect	text49
  9318  1CEE                     __ptext49:	
  9319 ;; *************** function _CC2500_ClearRXFIFO *****************
  9320 ;; Defined at:
  9321 ;;		line 201 in file "../src/CC2500_B1.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;		None
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;		None
  9326 ;; Return value:  Size  Location     Type
  9327 ;;		None               void
  9328 ;; Registers used:
  9329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;Total ram usage:        0 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; Hardware stack levels required when called:    5
  9342 ;; This function calls:
  9343 ;;		_CC2500_WriteCommand
  9344 ;; This function is called by:
  9345 ;;		_CC2500_PowerOnInitial
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           
  9350                           ;psect for function _CC2500_ClearRXFIFO
  9351  1CEE                     _CC2500_ClearRXFIFO:	
  9352                           
  9353                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9354                           
  9355                           ;incstack = 0
  9356                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9357  1CEE  303A               	movlw	58
  9358  1CEF  3190  20CC         	fcall	_CC2500_WriteCommand
  9359  1CF1  0008               	return
  9360  1CF2                     __end_of_CC2500_ClearRXFIFO:	
  9361                           
  9362                           	psect	text50
  9363  10CC                     __ptext50:	
  9364 ;; *************** function _CC2500_WriteCommand *****************
  9365 ;; Defined at:
  9366 ;;		line 292 in file "../src/CC2500_B1.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;  command         1    wreg     unsigned char 
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;  command         1    5[COMMON] unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;		None               void
  9373 ;; Registers used:
  9374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;Total ram usage:        2 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    4
  9387 ;; This function calls:
  9388 ;;		_CC2500_WriteByte
  9389 ;;		_RF_Timeout_Counter
  9390 ;;		_setRF_TimeoutCleared
  9391 ;; This function is called by:
  9392 ;;		_CC2500_TxData
  9393 ;;		_CC2500_RxData
  9394 ;;		_CC2500_ClearTXFIFO
  9395 ;;		_CC2500_ClearRXFIFO
  9396 ;;		_CC2500_FrequencyCabr
  9397 ;;		_CC2500_SIDLEMode
  9398 ;;		_setRF_Main
  9399 ;;		_RF_RxDisable
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           
  9404                           ;psect for function _CC2500_WriteCommand
  9405  10CC                     _CC2500_WriteCommand:	
  9406                           
  9407                           ;incstack = 0
  9408                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9409                           ;CC2500_WriteCommand@command stored from wreg
  9410  10CC  00F5               	movwf	CC2500_WriteCommand@command
  9411                           
  9412                           ;CC2500_B1.c: 293: RC0 = 0;
  9413  10CD  0020               	movlb	0	; select bank0
  9414  10CE  100E               	bcf	14,0	;volatile
  9415                           
  9416                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9417  10CF  0875               	movf	CC2500_WriteCommand@command,w
  9418  10D0  00F4               	movwf	??_CC2500_WriteCommand
  9419  10D1  0874               	movf	??_CC2500_WriteCommand,w
  9420  10D2  0021               	movlb	1	; select bank1
  9421  10D3  00D0               	movwf	_SPI0Buffer^(0+128)
  9422                           
  9423                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9424  10D4  28D8               	goto	l8351
  9425  10D5                     l8349:	
  9426                           
  9427                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9428  10D5  319F  27C1  3190   	fcall	_RF_Timeout_Counter
  9429  10D8                     l8351:	
  9430  10D8  0020               	movlb	0	; select bank0
  9431  10D9  1E8E               	btfss	14,5	;volatile
  9432  10DA  28DE               	goto	l8355
  9433  10DB  0021               	movlb	1	; select bank1
  9434  10DC  1F21               	btfss	(_RF1^(0+128)+1),6
  9435  10DD  28D5               	goto	l8349
  9436  10DE                     l8355:	
  9437                           
  9438                           ;CC2500_B1.c: 298: };
  9439                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9440  10DE  319C  24EA  3190   	fcall	_setRF_TimeoutCleared
  9441                           
  9442                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9443  10E1  3190  209A         	fcall	_CC2500_WriteByte
  9444                           
  9445                           ;CC2500_B1.c: 302: RC0 = 1;
  9446  10E3  0020               	movlb	0	; select bank0
  9447  10E4  140E               	bsf	14,0	;volatile
  9448  10E5  0008               	return
  9449  10E6                     __end_of_CC2500_WriteCommand:	
  9450                           
  9451                           	psect	text51
  9452  1CEA                     __ptext51:	
  9453 ;; *************** function _setRF_TimeoutCleared *****************
  9454 ;; Defined at:
  9455 ;;		line 149 in file "../src/RF_Control_B1.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;		None               void
  9462 ;; Registers used:
  9463 ;;		status,2
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    3
  9476 ;; This function calls:
  9477 ;;		Nothing
  9478 ;; This function is called by:
  9479 ;;		_CC2500_TxData
  9480 ;;		_CC2500_RxData
  9481 ;;		_CC2500_PowerRST
  9482 ;;		_CC2500_WriteREG
  9483 ;;		_CC2500_WriteCommand
  9484 ;;		_CC2500_ReadStatus
  9485 ;;		_CC2500_ReadREG
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _setRF_TimeoutCleared
  9491  1CEA                     _setRF_TimeoutCleared:	
  9492                           
  9493                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9497  1CEA  0021               	movlb	1	; select bank1
  9498  1CEB  01AC               	clrf	(_RF1^(0+128)+12)
  9499  1CEC  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9500  1CED  0008               	return
  9501  1CEE                     __end_of_setRF_TimeoutCleared:	
  9502                           
  9503                           	psect	text52
  9504  1FC1                     __ptext52:	
  9505 ;; *************** function _RF_Timeout_Counter *****************
  9506 ;; Defined at:
  9507 ;;		line 141 in file "../src/RF_Control_B1.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;		None
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;		None
  9512 ;; Return value:  Size  Location     Type
  9513 ;;		None               void
  9514 ;; Registers used:
  9515 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;Total ram usage:        0 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    3
  9528 ;; This function calls:
  9529 ;;		Nothing
  9530 ;; This function is called by:
  9531 ;;		_CC2500_TxData
  9532 ;;		_CC2500_RxData
  9533 ;;		_CC2500_PowerRST
  9534 ;;		_CC2500_WriteREG
  9535 ;;		_CC2500_WriteCommand
  9536 ;;		_CC2500_ReadStatus
  9537 ;;		_CC2500_ReadREG
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           
  9542                           ;psect for function _RF_Timeout_Counter
  9543  1FC1                     _RF_Timeout_Counter:	
  9544                           
  9545                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9549  1FC1  3001               	movlw	1
  9550  1FC2  0021               	movlb	1	; select bank1
  9551  1FC3  07AC               	addwf	(_RF1^(0+128)+12),f
  9552  1FC4  3000               	movlw	0
  9553  1FC5  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9554                           
  9555                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9556  1FC6  300C               	movlw	12
  9557  1FC7  3EA0               	addlw	_RF1& (0+255)
  9558  1FC8  0086               	movwf	6
  9559  1FC9  0187               	clrf	7
  9560  1FCA  3F40               	moviw [0]fsr1
  9561  1FCB  3AA8               	xorlw	168
  9562  1FCC  1D03               	skipz
  9563  1FCD  2FD0               	goto	u8695
  9564  1FCE  3F41               	moviw [1]fsr1
  9565  1FCF  3A61               	xorlw	97
  9566  1FD0                     u8695:	
  9567  1FD0  1D03               	skipz
  9568  1FD1  0008               	return
  9569                           
  9570                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9571  1FD2  01AC               	clrf	(_RF1^(0+128)+12)
  9572  1FD3  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9573                           
  9574                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9575  1FD4  1721               	bsf	(_RF1^(0+128)+1),6
  9576  1FD5  0008               	return
  9577  1FD6                     __end_of_RF_Timeout_Counter:	
  9578                           
  9579                           	psect	text53
  9580  109A                     __ptext53:	
  9581 ;; *************** function _CC2500_WriteByte *****************
  9582 ;; Defined at:
  9583 ;;		line 226 in file "../src/CC2500_B1.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;		None
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  loop_a          1    3[COMMON] unsigned char 
  9588 ;; Return value:  Size  Location     Type
  9589 ;;		None               void
  9590 ;; Registers used:
  9591 ;;		wreg, status,2, status,0
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;Total ram usage:        2 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    3
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_CC2500_TxData
  9608 ;;		_CC2500_RxData
  9609 ;;		_CC2500_PowerRST
  9610 ;;		_CC2500_WriteREG
  9611 ;;		_CC2500_WriteCommand
  9612 ;;		_CC2500_ReadStatus
  9613 ;;		_CC2500_ReadREG
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function _CC2500_WriteByte
  9619  109A                     _CC2500_WriteByte:	
  9620                           
  9621                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9622                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9626  109A  01F3               	clrf	CC2500_WriteByte@loop_a
  9627  109B                     L5:	
  9628  109B  3008               	movlw	8
  9629  109C  0273               	subwf	CC2500_WriteByte@loop_a,w
  9630  109D  1803               	btfsc	3,0
  9631  109E  0008               	return
  9632                           
  9633                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9634  109F  0021               	movlb	1	; select bank1
  9635  10A0  1FD0               	btfss	_SPI0Buffer^(0+128),7
  9636  10A1  28A5               	goto	l303
  9637                           
  9638                           ;CC2500_B1.c: 230: RC4 = 1;
  9639  10A2  0020               	movlb	0	; select bank0
  9640  10A3  160E               	bsf	14,4	;volatile
  9641  10A4  28A7               	goto	l304
  9642  10A5                     l303:	
  9643                           
  9644                           ;CC2500_B1.c: 231: else
  9645                           ;CC2500_B1.c: 232: RC4 = 0;
  9646  10A5  0020               	movlb	0	; select bank0
  9647  10A6  120E               	bcf	14,4	;volatile
  9648  10A7                     l304:	
  9649                           
  9650                           ;CC2500_B1.c: 233: RC3 = 1;
  9651  10A7  158E               	bsf	14,3	;volatile
  9652                           
  9653                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9654  10A8  1003               	clrc
  9655  10A9  0021               	movlb	1	; select bank1
  9656  10AA  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9657                           
  9658                           ;CC2500_B1.c: 235: RC3 = 0;
  9659  10AB  0020               	movlb	0	; select bank0
  9660  10AC  118E               	bcf	14,3	;volatile
  9661  10AD  3001               	movlw	1
  9662  10AE  00F2               	movwf	??_CC2500_WriteByte
  9663  10AF  0872               	movf	??_CC2500_WriteByte,w
  9664  10B0  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9665  10B1  289B               	goto	L5
  9666  10B2                     __end_of_CC2500_WriteByte:	
  9667                           
  9668                           	psect	text54
  9669  1CCA                     __ptext54:	
  9670 ;; *************** function _RF_Initialization *****************
  9671 ;; Defined at:
  9672 ;;		line 9 in file "../src/RF_Control_B1.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;		None
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;		None
  9677 ;; Return value:  Size  Location     Type
  9678 ;;		None               void
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0, pclath, cstack
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;Total ram usage:        0 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    4
  9693 ;; This function calls:
  9694 ;;		_setRF_Initialization
  9695 ;; This function is called by:
  9696 ;;		_main
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function _RF_Initialization
  9702  1CCA                     _RF_Initialization:	
  9703                           
  9704                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9708  1CCA  319D  2588         	fcall	_setRF_Initialization
  9709  1CCC  0008               	return
  9710  1CCD                     __end_of_RF_Initialization:	
  9711                           
  9712                           	psect	text55
  9713  1D88                     __ptext55:	
  9714 ;; *************** function _setRF_Initialization *****************
  9715 ;; Defined at:
  9716 ;;		line 17 in file "../src/RF_Control_B1.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;		None
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;		None
  9721 ;; Return value:  Size  Location     Type
  9722 ;;		None               void
  9723 ;; Registers used:
  9724 ;;		wreg
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;Total ram usage:        1 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    3
  9737 ;; This function calls:
  9738 ;;		Nothing
  9739 ;; This function is called by:
  9740 ;;		_RF_Initialization
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _setRF_Initialization
  9746  1D88                     _setRF_Initialization:	
  9747                           
  9748                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _setRF_Initialization: [wreg]
  9752  1D88  3015               	movlw	21
  9753  1D89  00F2               	movwf	??_setRF_Initialization
  9754  1D8A  0872               	movf	??_setRF_Initialization,w
  9755  1D8B  0021               	movlb	1	; select bank1
  9756  1D8C  00D2               	movwf	_Tx_Length^(0+128)
  9757                           
  9758                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9759  1D8D  3096               	movlw	150
  9760  1D8E  00A7               	movwf	(_RF1^(0+128)+7)
  9761  1D8F  3000               	movlw	0
  9762  1D90  00A8               	movwf	(_RF1^(0+128)+8)
  9763  1D91  0008               	return
  9764  1D92                     __end_of_setRF_Initialization:	
  9765                           
  9766                           	psect	text56
  9767  1F4A                     __ptext56:	
  9768 ;; *************** function _Mcu_Initialization *****************
  9769 ;; Defined at:
  9770 ;;		line 30 in file "../src/MCU_B1.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;		None
  9775 ;; Return value:  Size  Location     Type
  9776 ;;		None               void
  9777 ;; Registers used:
  9778 ;;		wreg, status,2, status,0, pclath, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;Total ram usage:        0 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    4
  9791 ;; This function calls:
  9792 ;;		_ADC_Set
  9793 ;;		_Fosc_Set
  9794 ;;		_IOC_Set
  9795 ;;		_IO_Set
  9796 ;;		_TMR1_Set
  9797 ;;		_WDT_Set
  9798 ;; This function is called by:
  9799 ;;		_main
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function _Mcu_Initialization
  9805  1F4A                     _Mcu_Initialization:	
  9806                           
  9807                           ;MCU_B1.c: 32: Fosc_Set();
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9811  1F4A  319C  24E6  319F   	fcall	_Fosc_Set
  9812                           
  9813                           ;MCU_B1.c: 34: IO_Set();
  9814  1F4D  3190  20B2  319F   	fcall	_IO_Set
  9815                           
  9816                           ;MCU_B1.c: 36: ;;
  9817                           ;MCU_B1.c: 38: TMR1_Set();
  9818  1F50  319D  25F8  319F   	fcall	_TMR1_Set
  9819                           
  9820                           ;MCU_B1.c: 40: ADC_Set();
  9821  1F53  319D  2527  319F   	fcall	_ADC_Set
  9822                           
  9823                           ;MCU_B1.c: 42: ;;
  9824                           ;MCU_B1.c: 44: ;;
  9825                           ;MCU_B1.c: 46: IOC_Set();
  9826  1F56  319D  2574  319F   	fcall	_IOC_Set
  9827                           
  9828                           ;MCU_B1.c: 48: ;;
  9829                           ;MCU_B1.c: 50: ;;
  9830                           ;MCU_B1.c: 52: WDT_Set();
  9831  1F59  319D  257E         	fcall	_WDT_Set
  9832  1F5B  0008               	return
  9833  1F5C                     __end_of_Mcu_Initialization:	
  9834                           
  9835                           	psect	text57
  9836  1D7E                     __ptext57:	
  9837 ;; *************** function _WDT_Set *****************
  9838 ;; Defined at:
  9839 ;;		line 1073 in file "../src/MCU_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        1 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    3
  9860 ;; This function calls:
  9861 ;;		Nothing
  9862 ;; This function is called by:
  9863 ;;		_Mcu_Initialization
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _WDT_Set
  9869  1D7E                     _WDT_Set:	
  9870                           
  9871                           ;MCU_B1.c: 1080: WDTCON = 0b00010111;;
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in _WDT_Set: [wreg]
  9875  1D7E  3017               	movlw	23
  9876  1D7F  0021               	movlb	1	; select bank1
  9877  1D80  0097               	movwf	23	;volatile
  9878                           
  9879                           ;MCU_B1.c: 1082: WDT.Enable = 1;
  9880  1D81  0022               	movlb	2	; select bank2
  9881  1D82  1428               	bsf	_WDT^(0+256),0
  9882                           
  9883                           ;MCU_B1.c: 1083: WDT.Timer = 10;
  9884  1D83  300A               	movlw	10
  9885  1D84  00F2               	movwf	??_WDT_Set
  9886  1D85  0872               	movf	??_WDT_Set,w
  9887  1D86  00A9               	movwf	(_WDT^(0+256)+1)
  9888  1D87  0008               	return
  9889  1D88                     __end_of_WDT_Set:	
  9890                           
  9891                           	psect	text58
  9892  1DF8                     __ptext58:	
  9893 ;; *************** function _TMR1_Set *****************
  9894 ;; Defined at:
  9895 ;;		line 222 in file "../src/MCU_B1.c"
  9896 ;; Parameters:    Size  Location     Type
  9897 ;;		None
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;		None
  9900 ;; Return value:  Size  Location     Type
  9901 ;;		None               void
  9902 ;; Registers used:
  9903 ;;		wreg
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;Total ram usage:        0 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    3
  9916 ;; This function calls:
  9917 ;;		Nothing
  9918 ;; This function is called by:
  9919 ;;		_Mcu_Initialization
  9920 ;; This function uses a non-reentrant model
  9921 ;;
  9922                           
  9923                           
  9924                           ;psect for function _TMR1_Set
  9925  1DF8                     _TMR1_Set:	
  9926                           
  9927                           ;MCU_B1.c: 223: T1CON = (0x40 | 0x00 | 0x01);
  9928                           
  9929                           ;incstack = 0
  9930                           ; Regs used in _TMR1_Set: [wreg]
  9931  1DF8  3041               	movlw	65
  9932  1DF9  0020               	movlb	0	; select bank0
  9933  1DFA  0098               	movwf	24	;volatile
  9934                           
  9935                           ;MCU_B1.c: 224: TMR1H = (int)((65536-1480)/256);
  9936  1DFB  30FA               	movlw	250
  9937  1DFC  0097               	movwf	23	;volatile
  9938                           
  9939                           ;MCU_B1.c: 225: TMR1L = (int)((65536-1480)%256);
  9940  1DFD  3038               	movlw	56
  9941  1DFE  0096               	movwf	22	;volatile
  9942                           
  9943                           ;MCU_B1.c: 226: TMR1IE = 1;
  9944  1DFF  0021               	movlb	1	; select bank1
  9945  1E00  1411               	bsf	17,0	;volatile
  9946                           
  9947                           ;MCU_B1.c: 227: PEIE = 1;
  9948  1E01  170B               	bsf	11,6	;volatile
  9949                           
  9950                           ;MCU_B1.c: 228: GIE = 1;
  9951  1E02  178B               	bsf	11,7	;volatile
  9952  1E03  0008               	return
  9953  1E04                     __end_of_TMR1_Set:	
  9954                           
  9955                           	psect	text59
  9956  10B2                     __ptext59:	
  9957 ;; *************** function _IO_Set *****************
  9958 ;; Defined at:
  9959 ;;		line 60 in file "../src/MCU_B1.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;		None
  9964 ;; Return value:  Size  Location     Type
  9965 ;;		None               void
  9966 ;; Registers used:
  9967 ;;		wreg, status,2
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        0 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    3
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_Mcu_Initialization
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function _IO_Set
  9989  10B2                     _IO_Set:	
  9990                           
  9991                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _IO_Set: [wreg+status,2]
  9995  10B2  30F7               	movlw	247
  9996  10B3  0021               	movlb	1	; select bank1
  9997  10B4  008C               	movwf	12	;volatile
  9998                           
  9999                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
 10000  10B5  3004               	movlw	4
 10001  10B6  008D               	movwf	13	;volatile
 10002                           
 10003                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
 10004  10B7  3026               	movlw	38
 10005  10B8  008E               	movwf	14	;volatile
 10006                           
 10007                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10008  10B9  0022               	movlb	2	; select bank2
 10009  10BA  018C               	clrf	12	;volatile
 10010                           
 10011                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10012  10BB  018D               	clrf	13	;volatile
 10013                           
 10014                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10015  10BC  018E               	clrf	14	;volatile
 10016                           
 10017                           ;MCU_B1.c: 96: ANSELA = 0b00001110;;
 10018  10BD  300E               	movlw	14
 10019  10BE  0023               	movlb	3	; select bank3
 10020  10BF  008C               	movwf	12	;volatile
 10021                           
 10022                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10023  10C0  018D               	clrf	13	;volatile
 10024                           
 10025                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10026  10C1  018E               	clrf	14	;volatile
 10027                           
 10028                           ;MCU_B1.c: 100: PORTA = 0b11110111;;
 10029  10C2  30F7               	movlw	247
 10030  10C3  0020               	movlb	0	; select bank0
 10031  10C4  008C               	movwf	12	;volatile
 10032                           
 10033                           ;MCU_B1.c: 101: PORTB = 0b00000100;;
 10034  10C5  3004               	movlw	4
 10035  10C6  008D               	movwf	13	;volatile
 10036                           
 10037                           ;MCU_B1.c: 102: PORTC = 0b00100110;;
 10038  10C7  3026               	movlw	38
 10039  10C8  008E               	movwf	14	;volatile
 10040                           
 10041                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10042  10C9  0024               	movlb	4	; select bank4
 10043  10CA  018D               	clrf	13	;volatile
 10044  10CB  0008               	return
 10045  10CC                     __end_of_IO_Set:	
 10046                           
 10047                           	psect	text60
 10048  1D74                     __ptext60:	
 10049 ;; *************** function _IOC_Set *****************
 10050 ;; Defined at:
 10051 ;;		line 363 in file "../src/MCU_B1.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;		None               void
 10058 ;; Registers used:
 10059 ;;		wreg, status,2
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;Total ram usage:        0 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    3
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_Mcu_Initialization
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _IOC_Set
 10081  1D74                     _IOC_Set:	
 10082                           
 10083                           ;MCU_B1.c: 365: IOCBP = 0b00000100;;
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _IOC_Set: [wreg+status,2]
 10087  1D74  3004               	movlw	4
 10088  1D75  0027               	movlb	7	; select bank7
 10089  1D76  0094               	movwf	20	;volatile
 10090                           
 10091                           ;MCU_B1.c: 366: IOCBN = 0b00000000;;
 10092  1D77  0195               	clrf	21	;volatile
 10093                           
 10094                           ;MCU_B1.c: 368: IOCBF = 0b00000000;
 10095  1D78  0196               	clrf	22	;volatile
 10096                           
 10097                           ;MCU_B1.c: 370: IOCIE = 1;
 10098  1D79  158B               	bsf	11,3	;volatile
 10099                           
 10100                           ;MCU_B1.c: 371: IOCIF = 0;
 10101  1D7A  100B               	bcf	11,0	;volatile
 10102                           
 10103                           ;MCU_B1.c: 372: PEIE = 1;
 10104  1D7B  170B               	bsf	11,6	;volatile
 10105                           
 10106                           ;MCU_B1.c: 373: GIE = 1;
 10107  1D7C  178B               	bsf	11,7	;volatile
 10108  1D7D  0008               	return
 10109  1D7E                     __end_of_IOC_Set:	
 10110                           
 10111                           	psect	text61
 10112  1CE6                     __ptext61:	
 10113 ;; *************** function _Fosc_Set *****************
 10114 ;; Defined at:
 10115 ;;		line 56 in file "../src/MCU_B1.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;		None
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;		None               void
 10122 ;; Registers used:
 10123 ;;		wreg
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;Total ram usage:        0 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    3
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_Mcu_Initialization
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _Fosc_Set
 10145  1CE6                     _Fosc_Set:	
 10146                           
 10147                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10148                           
 10149                           ;incstack = 0
 10150                           ; Regs used in _Fosc_Set: [wreg]
 10151  1CE6  3078               	movlw	120
 10152  1CE7  0021               	movlb	1	; select bank1
 10153  1CE8  0099               	movwf	25	;volatile
 10154  1CE9  0008               	return
 10155  1CEA                     __end_of_Fosc_Set:	
 10156                           
 10157                           	psect	text62
 10158  1D27                     __ptext62:	
 10159 ;; *************** function _ADC_Set *****************
 10160 ;; Defined at:
 10161 ;;		line 409 in file "../src/MCU_B1.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;		None
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;		None
 10166 ;; Return value:  Size  Location     Type
 10167 ;;		None               void
 10168 ;; Registers used:
 10169 ;;		wreg
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    3
 10182 ;; This function calls:
 10183 ;;		Nothing
 10184 ;; This function is called by:
 10185 ;;		_Mcu_Initialization
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           
 10190                           ;psect for function _ADC_Set
 10191  1D27                     _ADC_Set:	
 10192                           
 10193                           ;MCU_B1.c: 410: ADCON1 = 0xf3;
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in _ADC_Set: [wreg]
 10197  1D27  30F3               	movlw	243
 10198  1D28  0021               	movlb	1	; select bank1
 10199  1D29  009E               	movwf	30	;volatile
 10200                           
 10201                           ;MCU_B1.c: 411: FVRCON = 0xc1;
 10202  1D2A  30C1               	movlw	193
 10203  1D2B  0022               	movlb	2	; select bank2
 10204  1D2C  0097               	movwf	23	;volatile
 10205  1D2D  0008               	return
 10206  1D2E                     __end_of_ADC_Set:	
 10207                           
 10208                           	psect	text63
 10209  004C                     __ptext63:	
 10210 ;; *************** function _Load_Main *****************
 10211 ;; Defined at:
 10212 ;;		line 39 in file "../src/OverLoad_B1.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;		None
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  i               2    4[BANK0 ] int 
 10217 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10218 ;;  error           1    2[BANK0 ] unsigned char 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;		None               void
 10221 ;; Registers used:
 10222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;Total ram usage:        6 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    4
 10235 ;; This function calls:
 10236 ;;		___lwdiv
 10237 ;;		___wmul
 10238 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10239 ;;		_getDimmer_LoadGO
 10240 ;;		_getDimmer_Load_Status
 10241 ;;		_getMain_All_Error_Status
 10242 ;;		_getMain_All_LightsStatus
 10243 ;;		_getMain_Lights_Count
 10244 ;;		_setLoad_AH_AL_Restore
 10245 ;; This function is called by:
 10246 ;;		_main
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           
 10251                           ;psect for function _Load_Main
 10252  004C                     _Load_Main:	
 10253                           
 10254                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10258  004C  3000               	movlw	0
 10259  004D  3192  22D2  3180   	fcall	_getMain_All_Error_Status
 10260  0050  0020               	movlb	0	; select bank0
 10261  0051  00A0               	movwf	??_Load_Main
 10262  0052  0820               	movf	??_Load_Main,w
 10263  0053  00A2               	movwf	Load_Main@error
 10264                           
 10265                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10266  0054  01A3               	clrf	Load_Main@Load_Status
 10267                           
 10268                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10269  0055  0022               	movlb	2	; select bank2
 10270  0056  1C2A               	btfss	_Load^(0+256),0
 10271  0057  29E0               	goto	l1635
 10272                           
 10273                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10274  0058  319D  2535  3180   	fcall	_getMain_All_LightsStatus
 10275  005B  3800               	iorlw	0
 10276  005C  1D03               	skipz
 10277  005D  2860               	goto	l9331
 10278                           
 10279                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10280  005E  0022               	movlb	2	; select bank2
 10281  005F  2881               	goto	l9349
 10282  0060                     l9331:	
 10283                           ;OverLoad_B1.c: 47: } else {
 10284                           
 10285                           
 10286                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10287  0060  0020               	movlb	0	; select bank0
 10288  0061  08A2               	movf	Load_Main@error,f
 10289  0062  1D03               	skipz
 10290  0063  287E               	goto	l1638
 10291  0064  319E  2657  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10292  0067  3800               	iorlw	0
 10293  0068  1D03               	skipz
 10294  0069  287E               	goto	l1638
 10295                           
 10296                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10297  006A  0022               	movlb	2	; select bank2
 10298  006B  14AA               	bsf	_Load^(0+256),1
 10299                           
 10300                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10301  006C  319D  2519  3180   	fcall	_getDimmer_LoadGO
 10302  006F  3A01               	xorlw	1
 10303  0070  1D03               	skipz
 10304  0071  2879               	goto	l1639
 10305                           
 10306                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10307  0072  0022               	movlb	2	; select bank2
 10308  0073  1DAA               	btfss	_Load^(0+256),3
 10309  0074  1BAA               	btfsc	_Load^(0+256),7
 10310  0075  2882               	goto	l1637
 10311                           
 10312                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10313  0076  15AA               	bsf	_Load^(0+256),3
 10314                           
 10315                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10316  0077  01D3               	clrf	(_Load^(0+256)+41)
 10317                           
 10318                           ;OverLoad_B1.c: 57: }
 10319                           ;OverLoad_B1.c: 58: } else {
 10320  0078  2882               	goto	l1637
 10321  0079                     l1639:	
 10322                           
 10323                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10324  0079  0022               	movlb	2	; select bank2
 10325  007A  1FAA               	btfss	_Load^(0+256),7
 10326  007B  2882               	goto	l1637
 10327                           
 10328                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10329  007C  13AA               	bcf	_Load^(0+256),7
 10330                           
 10331                           ;OverLoad_B1.c: 61: }
 10332                           ;OverLoad_B1.c: 62: }
 10333                           ;OverLoad_B1.c: 63: } else {
 10334  007D  2882               	goto	l1637
 10335  007E                     l1638:	
 10336                           
 10337                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10338  007E  0022               	movlb	2	; select bank2
 10339  007F  1CAA               	btfss	_Load^(0+256),1
 10340  0080  2882               	goto	l1637
 10341  0081                     l9349:	
 10342                           
 10343                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10344  0081  10AA               	bcf	_Load^(0+256),1
 10345  0082                     l1637:	
 10346                           
 10347                           ;OverLoad_B1.c: 66: }
 10348                           ;OverLoad_B1.c: 67: }
 10349                           ;OverLoad_B1.c: 89: }
 10350                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10351  0082  1CAA               	btfss	_Load^(0+256),1
 10352  0083  29BC               	goto	l1645
 10353                           
 10354                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10355  0084  152A               	bsf	_Load^(0+256),2
 10356                           
 10357                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10358  0085  1E2A               	btfss	_Load^(0+256),4
 10359  0086  29BA               	goto	l1646
 10360                           
 10361                           ;OverLoad_B1.c: 96: Load.Time++;
 10362  0087  3001               	movlw	1
 10363  0088  07AB               	addwf	(_Load^(0+256)+1),f
 10364  0089  3000               	movlw	0
 10365  008A  3DAC               	addwfc	((_Load+1)^(0+256)+1),f
 10366                           
 10367                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10368  008B  3000               	movlw	0
 10369  008C  022C               	subwf	((_Load+1)^(0+256)+1),w
 10370  008D  3002               	movlw	2
 10371  008E  1903               	skipnz
 10372  008F  022B               	subwf	(_Load^(0+256)+1),w
 10373  0090  1C03               	skipc
 10374  0091  0008               	return
 10375                           
 10376                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10377  0092  01AB               	clrf	(_Load^(0+256)+1)
 10378  0093  01AC               	clrf	((_Load+1)^(0+256)+1)
 10379                           
 10380                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10381  0094  122A               	bcf	_Load^(0+256),4
 10382                           
 10383                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10384  0095  3001               	movlw	1
 10385  0096  0020               	movlb	0	; select bank0
 10386  0097  00A4               	movwf	Load_Main@i
 10387  0098  3000               	movlw	0
 10388  0099  00A5               	movwf	Load_Main@i+1
 10389  009A  0825               	movf	Load_Main@i+1,w
 10390  009B  3A80               	xorlw	128
 10391  009C  00A0               	movwf	??_Load_Main
 10392  009D  3080               	movlw	128
 10393  009E  0220               	subwf	??_Load_Main,w
 10394  009F  1D03               	skipz
 10395  00A0  28A3               	goto	u10545
 10396  00A1  3004               	movlw	4
 10397  00A2  0224               	subwf	Load_Main@i,w
 10398  00A3                     u10545:	
 10399  00A3  1803               	btfsc	3,0
 10400  00A4  28D7               	goto	l9371
 10401  00A5                     l9365:	
 10402                           
 10403                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10404  00A5  0020               	movlb	0	; select bank0
 10405  00A6  3524               	lslf	Load_Main@i,w
 10406  00A7  3E35               	addlw	(_Load+11)& (0+255)
 10407  00A8  0086               	movwf	6
 10408  00A9  3001               	movlw	1	; select bank2/3
 10409  00AA  0087               	movwf	7
 10410  00AB  3F40               	moviw [0]fsr1
 10411  00AC  00A0               	movwf	??_Load_Main
 10412  00AD  3F41               	moviw [1]fsr1
 10413  00AE  00A1               	movwf	??_Load_Main+1
 10414  00AF  0820               	movf	??_Load_Main,w
 10415  00B0  0022               	movlb	2	; select bank2
 10416  00B1  07AF               	addwf	(_Load^(0+256)+5),f
 10417  00B2  0020               	movlb	0	; select bank0
 10418  00B3  0821               	movf	??_Load_Main+1,w
 10419  00B4  0022               	movlb	2	; select bank2
 10420  00B5  3DB0               	addwfc	((_Load+1)^(0+256)+5),f
 10421                           
 10422                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10423  00B6  0020               	movlb	0	; select bank0
 10424  00B7  3524               	lslf	Load_Main@i,w
 10425  00B8  3E3F               	addlw	(_Load+21)& (0+255)
 10426  00B9  0086               	movwf	6
 10427  00BA  3001               	movlw	1	; select bank2/3
 10428  00BB  0087               	movwf	7
 10429  00BC  3F40               	moviw [0]fsr1
 10430  00BD  00A0               	movwf	??_Load_Main
 10431  00BE  3F41               	moviw [1]fsr1
 10432  00BF  00A1               	movwf	??_Load_Main+1
 10433  00C0  0820               	movf	??_Load_Main,w
 10434  00C1  0022               	movlb	2	; select bank2
 10435  00C2  07B1               	addwf	(_Load^(0+256)+7),f
 10436  00C3  0020               	movlb	0	; select bank0
 10437  00C4  0821               	movf	??_Load_Main+1,w
 10438  00C5  0022               	movlb	2	; select bank2
 10439  00C6  3DB2               	addwfc	((_Load+1)^(0+256)+7),f
 10440  00C7  3001               	movlw	1
 10441  00C8  0020               	movlb	0	; select bank0
 10442  00C9  07A4               	addwf	Load_Main@i,f
 10443  00CA  3000               	movlw	0
 10444  00CB  3DA5               	addwfc	Load_Main@i+1,f
 10445  00CC  0825               	movf	Load_Main@i+1,w
 10446  00CD  3A80               	xorlw	128
 10447  00CE  00A0               	movwf	??_Load_Main
 10448  00CF  3080               	movlw	128
 10449  00D0  0220               	subwf	??_Load_Main,w
 10450  00D1  1D03               	skipz
 10451  00D2  28D5               	goto	u10555
 10452  00D3  3004               	movlw	4
 10453  00D4  0224               	subwf	Load_Main@i,w
 10454  00D5                     u10555:	
 10455  00D5  1C03               	skipc
 10456  00D6  28A5               	goto	l9365
 10457  00D7                     l9371:	
 10458                           
 10459                           ;OverLoad_B1.c: 104: }
 10460                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10461  00D7  3003               	movlw	3
 10462  00D8  00F2               	movwf	___lwdiv@divisor
 10463  00D9  3000               	movlw	0
 10464  00DA  00F3               	movwf	___lwdiv@divisor+1
 10465  00DB  0022               	movlb	2	; select bank2
 10466  00DC  0830               	movf	((_Load+1)^(0+256)+5),w
 10467  00DD  01F5               	clrf	___lwdiv@dividend+1
 10468  00DE  07F5               	addwf	___lwdiv@dividend+1,f
 10469  00DF  082F               	movf	(_Load^(0+256)+5),w
 10470  00E0  01F4               	clrf	___lwdiv@dividend
 10471  00E1  07F4               	addwf	___lwdiv@dividend,f
 10472  00E2  3193  23CD  3180   	fcall	___lwdiv
 10473  00E5  0873               	movf	?___lwdiv+1,w
 10474  00E6  0022               	movlb	2	; select bank2
 10475  00E7  01B0               	clrf	((_Load+1)^(0+256)+5)
 10476  00E8  07B0               	addwf	((_Load+1)^(0+256)+5),f
 10477  00E9  0872               	movf	?___lwdiv,w
 10478  00EA  01AF               	clrf	(_Load^(0+256)+5)
 10479  00EB  07AF               	addwf	(_Load^(0+256)+5),f
 10480                           
 10481                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10482  00EC  3003               	movlw	3
 10483  00ED  00F2               	movwf	___lwdiv@divisor
 10484  00EE  3000               	movlw	0
 10485  00EF  00F3               	movwf	___lwdiv@divisor+1
 10486  00F0  0832               	movf	((_Load+1)^(0+256)+7),w
 10487  00F1  01F5               	clrf	___lwdiv@dividend+1
 10488  00F2  07F5               	addwf	___lwdiv@dividend+1,f
 10489  00F3  0831               	movf	(_Load^(0+256)+7),w
 10490  00F4  01F4               	clrf	___lwdiv@dividend
 10491  00F5  07F4               	addwf	___lwdiv@dividend,f
 10492  00F6  3193  23CD  3180   	fcall	___lwdiv
 10493  00F9  0873               	movf	?___lwdiv+1,w
 10494  00FA  0022               	movlb	2	; select bank2
 10495  00FB  01B2               	clrf	((_Load+1)^(0+256)+7)
 10496  00FC  07B2               	addwf	((_Load+1)^(0+256)+7),f
 10497  00FD  0872               	movf	?___lwdiv,w
 10498  00FE  01B1               	clrf	(_Load^(0+256)+7)
 10499  00FF  07B1               	addwf	(_Load^(0+256)+7),f
 10500                           
 10501                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
 10502  0100  3191  2100  3180   	fcall	_setLoad_AH_AL_Restore
 10503                           
 10504                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
 10505  0103  0022               	movlb	2	; select bank2
 10506  0104  0832               	movf	((_Load+1)^(0+256)+7),w
 10507  0105  0230               	subwf	((_Load+1)^(0+256)+5),w
 10508  0106  1D03               	skipz
 10509  0107  290A               	goto	u10565
 10510  0108  0831               	movf	(_Load^(0+256)+7),w
 10511  0109  022F               	subwf	(_Load^(0+256)+5),w
 10512  010A                     u10565:	
 10513  010A  1C03               	skipc
 10514  010B  0008               	return
 10515                           
 10516                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
 10517  010C  3005               	movlw	5
 10518  010D  3E2A               	addlw	_Load& (0+255)
 10519  010E  0086               	movwf	6
 10520  010F  3001               	movlw	1	; select bank2/3
 10521  0110  0087               	movwf	7
 10522  0111  0931               	comf	(_Load^(0+256)+7),w
 10523  0112  0020               	movlb	0	; select bank0
 10524  0113  00A0               	movwf	??_Load_Main
 10525  0114  0022               	movlb	2	; select bank2
 10526  0115  0932               	comf	((_Load+1)^(0+256)+7),w
 10527  0116  0020               	movlb	0	; select bank0
 10528  0117  00A1               	movwf	??_Load_Main+1
 10529  0118  0AA0               	incf	??_Load_Main,f
 10530  0119  1903               	skipnz
 10531  011A  0AA1               	incf	??_Load_Main+1,f
 10532  011B  3F40               	moviw [0]fsr1
 10533  011C  0720               	addwf	??_Load_Main,w
 10534  011D  0022               	movlb	2	; select bank2
 10535  011E  00C9               	movwf	(_Load^(0+256)+31)
 10536  011F  3F41               	moviw [1]fsr1
 10537  0120  0020               	movlb	0	; select bank0
 10538  0121  3D21               	addwfc	??_Load_Main+1,w
 10539  0122  0022               	movlb	2	; select bank2
 10540  0123  00CA               	movwf	(_Load^(0+256)+32)
 10541                           
 10542                           ;OverLoad_B1.c: 111: Load.ADH = 0;
 10543  0124  01AF               	clrf	(_Load^(0+256)+5)
 10544  0125  01B0               	clrf	((_Load+1)^(0+256)+5)
 10545                           
 10546                           ;OverLoad_B1.c: 112: Load.ADL = 0;
 10547  0126  01B1               	clrf	(_Load^(0+256)+7)
 10548  0127  01B2               	clrf	((_Load+1)^(0+256)+7)
 10549                           
 10550                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
 10551  0128  1DAA               	btfss	_Load^(0+256),3
 10552  0129  2986               	goto	l9411
 10553                           
 10554                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
 10555  012A  3002               	movlw	2
 10556  012B  0253               	subwf	(_Load^(0+256)+41),w
 10557  012C  1803               	skipnc
 10558  012D  2986               	goto	l9411
 10559                           
 10560                           ;OverLoad_B1.c: 116: Load.Count++;
 10561  012E  3001               	movlw	1
 10562  012F  0020               	movlb	0	; select bank0
 10563  0130  00A0               	movwf	??_Load_Main
 10564  0131  0820               	movf	??_Load_Main,w
 10565  0132  0022               	movlb	2	; select bank2
 10566  0133  07D3               	addwf	(_Load^(0+256)+41),f
 10567                           
 10568                           ;OverLoad_B1.c: 118: Load_Status = getDimmer_Load_Status();
 10569  0134  319D  2520  3180   	fcall	_getDimmer_Load_Status
 10570  0137  0020               	movlb	0	; select bank0
 10571  0138  00A0               	movwf	??_Load_Main
 10572  0139  0820               	movf	??_Load_Main,w
 10573  013A  00A3               	movwf	Load_Main@Load_Status
 10574                           
 10575                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
 10576  013B  319D  2558  3180   	fcall	_getMain_Lights_Count
 10577  013E  0020               	movlb	0	; select bank0
 10578  013F  00A0               	movwf	??_Load_Main
 10579  0140  0820               	movf	??_Load_Main,w
 10580  0141  0022               	movlb	2	; select bank2
 10581  0142  00D6               	movwf	(_Load^(0+256)+44)
 10582                           
 10583                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10584  0143  0853               	movf	(_Load^(0+256)+41),w
 10585  0144  3A01               	xorlw	1
 10586  0145  1D03               	skipz
 10587  0146  2951               	goto	l9397
 10588                           
 10589                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
 10590  0147  3002               	movlw	2
 10591  0148  0020               	movlb	0	; select bank0
 10592  0149  00A0               	movwf	??_Load_Main
 10593  014A  0820               	movf	??_Load_Main,w
 10594  014B  0022               	movlb	2	; select bank2
 10595  014C  00D5               	movwf	(_Load^(0+256)+43)
 10596                           
 10597                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10598  014D  3074               	movlw	116
 10599  014E  00CF               	movwf	(_Load^(0+256)+37)
 10600  014F  3004               	movlw	4
 10601  0150  295C               	goto	L6
 10602  0151                     l9397:	
 10603                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10604                           
 10605  0151  0853               	movf	(_Load^(0+256)+41),w
 10606  0152  3A02               	xorlw	2
 10607  0153  1D03               	skipz
 10608  0154  2986               	goto	l9411
 10609                           
 10610                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
 10611  0155  0856               	movf	(_Load^(0+256)+44),w
 10612  0156  3A01               	xorlw	1
 10613  0157  1D03               	skipz
 10614  0158  295E               	goto	l9403
 10615                           
 10616                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10617  0159  3066               	movlw	102
 10618  015A  00CF               	movwf	(_Load^(0+256)+37)
 10619  015B  3000               	movlw	0
 10620  015C                     L6:	
 10621  015C  00D0               	movwf	(_Load^(0+256)+38)
 10622                           
 10623                           ;OverLoad_B1.c: 130: } else {
 10624  015D  2986               	goto	l9411
 10625  015E                     l9403:	
 10626                           
 10627                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
 10628  015E  0020               	movlb	0	; select bank0
 10629  015F  08A3               	movf	Load_Main@Load_Status,f
 10630  0160  1D03               	skipz
 10631  0161  297A               	goto	l9407
 10632                           
 10633                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * Load.LightsCount;
 10634  0162  0022               	movlb	2	; select bank2
 10635  0163  0856               	movf	(_Load^(0+256)+44),w
 10636  0164  0020               	movlb	0	; select bank0
 10637  0165  00A0               	movwf	??_Load_Main
 10638  0166  01A1               	clrf	??_Load_Main+1
 10639  0167  0820               	movf	??_Load_Main,w
 10640  0168  00F2               	movwf	___wmul@multiplier
 10641  0169  0821               	movf	??_Load_Main+1,w
 10642  016A  00F3               	movwf	___wmul@multiplier+1
 10643  016B  3066               	movlw	102
 10644  016C  00F4               	movwf	___wmul@multiplicand
 10645  016D  3000               	movlw	0
 10646  016E  00F5               	movwf	___wmul@multiplicand+1
 10647  016F  3191  2153  3180   	fcall	___wmul
 10648  0172  0873               	movf	?___wmul+1,w
 10649  0173  0022               	movlb	2	; select bank2
 10650  0174  01D0               	clrf	((_Load+1)^(0+256)+37)
 10651  0175  07D0               	addwf	((_Load+1)^(0+256)+37),f
 10652  0176  0872               	movf	?___wmul,w
 10653  0177  01CF               	clrf	(_Load^(0+256)+37)
 10654  0178  07CF               	addwf	(_Load^(0+256)+37),f
 10655                           
 10656                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
 10657  0179  2986               	goto	l9411
 10658  017A                     l9407:	
 10659  017A  0020               	movlb	0	; select bank0
 10660  017B  0823               	movf	Load_Main@Load_Status,w
 10661  017C  3A01               	xorlw	1
 10662  017D  1D03               	skipz
 10663  017E  2986               	goto	l9411
 10664                           
 10665                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10666  017F  0022               	movlb	2	; select bank2
 10667  0180  0833               	movf	(_Load^(0+256)+9),w
 10668  0181  3E66               	addlw	102
 10669  0182  00CF               	movwf	(_Load^(0+256)+37)
 10670  0183  3000               	movlw	0
 10671  0184  3D34               	addwfc	((_Load+1)^(0+256)+9),w
 10672  0185  00D0               	movwf	((_Load+1)^(0+256)+37)
 10673  0186                     l9411:	
 10674                           
 10675                           ;OverLoad_B1.c: 135: }
 10676                           ;OverLoad_B1.c: 136: }
 10677                           ;OverLoad_B1.c: 137: }
 10678                           ;OverLoad_B1.c: 138: }
 10679                           ;OverLoad_B1.c: 139: }
 10680                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10681  0186  0022               	movlb	2	; select bank2
 10682  0187  0850               	movf	((_Load+1)^(0+256)+37),w
 10683  0188  024A               	subwf	((_Load+1)^(0+256)+31),w
 10684  0189  1D03               	skipz
 10685  018A  298D               	goto	u10645
 10686  018B  084F               	movf	(_Load^(0+256)+37),w
 10687  018C  0249               	subwf	(_Load^(0+256)+31),w
 10688  018D                     u10645:	
 10689  018D  1C03               	skipc
 10690  018E  299C               	goto	l9421
 10691                           
 10692                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
 10693  018F  3001               	movlw	1
 10694  0190  0020               	movlb	0	; select bank0
 10695  0191  00A0               	movwf	??_Load_Main
 10696  0192  0820               	movf	??_Load_Main,w
 10697  0193  0022               	movlb	2	; select bank2
 10698  0194  07D4               	addwf	(_Load^(0+256)+42),f
 10699                           
 10700                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
 10701  0195  0854               	movf	(_Load^(0+256)+42),w
 10702  0196  0255               	subwf	(_Load^(0+256)+43),w
 10703  0197  1803               	skipnc
 10704  0198  0008               	return
 10705                           
 10706                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10707  0199  01D4               	clrf	(_Load^(0+256)+42)
 10708                           
 10709                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
 10710  019A  16AA               	bsf	_Load^(0+256),5
 10711                           
 10712                           ;OverLoad_B1.c: 167: }
 10713                           ;OverLoad_B1.c: 168: } else {
 10714  019B  0008               	return
 10715  019C                     l9421:	
 10716                           
 10717                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
 10718  019C  01D4               	clrf	(_Load^(0+256)+42)
 10719                           
 10720                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
 10721  019D  1DAA               	btfss	_Load^(0+256),3
 10722  019E  0008               	return
 10723                           
 10724                           ;OverLoad_B1.c: 171: Load.SafeCount++;
 10725  019F  3001               	movlw	1
 10726  01A0  0020               	movlb	0	; select bank0
 10727  01A1  00A0               	movwf	??_Load_Main
 10728  01A2  0820               	movf	??_Load_Main,w
 10729  01A3  0022               	movlb	2	; select bank2
 10730  01A4  07D7               	addwf	(_Load^(0+256)+45),f
 10731                           
 10732                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
 10733  01A5  3003               	movlw	3
 10734  01A6  0257               	subwf	(_Load^(0+256)+45),w
 10735  01A7  1C03               	skipc
 10736  01A8  0008               	return
 10737                           
 10738                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
 10739  01A9  01D7               	clrf	(_Load^(0+256)+45)
 10740                           
 10741                           ;OverLoad_B1.c: 174: Load.OK = 1;
 10742  01AA  17AA               	bsf	_Load^(0+256),7
 10743                           
 10744                           ;OverLoad_B1.c: 175: Load.Run = 0;
 10745  01AB  11AA               	bcf	_Load^(0+256),3
 10746                           
 10747                           ;OverLoad_B1.c: 176: Load.Count = 0;
 10748  01AC  01D3               	clrf	(_Load^(0+256)+41)
 10749                           
 10750                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
 10751  01AD  084A               	movf	((_Load+1)^(0+256)+31),w
 10752  01AE  01B4               	clrf	((_Load+1)^(0+256)+9)
 10753  01AF  07B4               	addwf	((_Load+1)^(0+256)+9),f
 10754  01B0  0849               	movf	(_Load^(0+256)+31),w
 10755  01B1  01B3               	clrf	(_Load^(0+256)+9)
 10756  01B2  07B3               	addwf	(_Load^(0+256)+9),f
 10757                           
 10758                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
 10759  01B3  3003               	movlw	3
 10760  01B4  0020               	movlb	0	; select bank0
 10761  01B5  00A0               	movwf	??_Load_Main
 10762  01B6  0820               	movf	??_Load_Main,w
 10763  01B7  0022               	movlb	2	; select bank2
 10764  01B8  00D5               	movwf	(_Load^(0+256)+43)
 10765                           
 10766                           ;OverLoad_B1.c: 181: }
 10767                           ;OverLoad_B1.c: 182: }
 10768                           ;OverLoad_B1.c: 205: }
 10769                           ;OverLoad_B1.c: 206: }
 10770                           ;OverLoad_B1.c: 207: }
 10771                           ;OverLoad_B1.c: 208: } else {
 10772  01B9  0008               	return
 10773  01BA                     l1646:	
 10774                           
 10775                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
 10776  01BA  162A               	bsf	_Load^(0+256),4
 10777                           
 10778                           ;OverLoad_B1.c: 210: }
 10779                           ;OverLoad_B1.c: 211: } else {
 10780  01BB  0008               	return
 10781  01BC                     l1645:	
 10782                           
 10783                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
 10784  01BC  1D2A               	btfss	_Load^(0+256),2
 10785  01BD  29CF               	goto	l9459
 10786                           
 10787                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
 10788  01BE  112A               	bcf	_Load^(0+256),2
 10789                           
 10790                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
 10791  01BF  122A               	bcf	_Load^(0+256),4
 10792                           
 10793                           ;OverLoad_B1.c: 217: Load.Time = 0;
 10794  01C0  01AB               	clrf	(_Load^(0+256)+1)
 10795  01C1  01AC               	clrf	((_Load+1)^(0+256)+1)
 10796                           
 10797                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
 10798  01C2  3191  2100  3180   	fcall	_setLoad_AH_AL_Restore
 10799                           
 10800                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
 10801  01C5  0022               	movlb	2	; select bank2
 10802  01C6  01D4               	clrf	(_Load^(0+256)+42)
 10803                           
 10804                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
 10805  01C7  01D7               	clrf	(_Load^(0+256)+45)
 10806                           
 10807                           ;OverLoad_B1.c: 223: Load.ADH = 0;
 10808  01C8  01AF               	clrf	(_Load^(0+256)+5)
 10809  01C9  01B0               	clrf	((_Load+1)^(0+256)+5)
 10810                           
 10811                           ;OverLoad_B1.c: 224: Load.ADL = 0;
 10812  01CA  01B1               	clrf	(_Load^(0+256)+7)
 10813  01CB  01B2               	clrf	((_Load+1)^(0+256)+7)
 10814                           
 10815                           ;OverLoad_B1.c: 230: Load.Run = 0;
 10816  01CC  11AA               	bcf	_Load^(0+256),3
 10817                           
 10818                           ;OverLoad_B1.c: 231: Load.Count = 0;
 10819  01CD  01D3               	clrf	(_Load^(0+256)+41)
 10820                           
 10821                           ;OverLoad_B1.c: 232: Load.OK = 0;
 10822  01CE  13AA               	bcf	_Load^(0+256),7
 10823  01CF                     l9459:	
 10824                           
 10825                           ;OverLoad_B1.c: 254: }
 10826                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
 10827  01CF  1EAA               	btfss	_Load^(0+256),5
 10828  01D0  0008               	return
 10829                           
 10830                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
 10831  01D1  3001               	movlw	1
 10832  01D2  07AD               	addwf	(_Load^(0+256)+3),f
 10833  01D3  3000               	movlw	0
 10834  01D4  3DAE               	addwfc	((_Load+1)^(0+256)+3),f
 10835                           
 10836                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
 10837  01D5  3001               	movlw	1
 10838  01D6  022E               	subwf	((_Load+1)^(0+256)+3),w
 10839  01D7  30F4               	movlw	244
 10840  01D8  1903               	skipnz
 10841  01D9  022D               	subwf	(_Load^(0+256)+3),w
 10842  01DA  1C03               	skipc
 10843  01DB  0008               	return
 10844                           
 10845                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
 10846  01DC  01AD               	clrf	(_Load^(0+256)+3)
 10847  01DD  01AE               	clrf	((_Load+1)^(0+256)+3)
 10848                           
 10849                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
 10850  01DE  12AA               	bcf	_Load^(0+256),5
 10851                           
 10852                           ;OverLoad_B1.c: 260: }
 10853                           ;OverLoad_B1.c: 261: }
 10854                           ;OverLoad_B1.c: 262: }
 10855                           ;OverLoad_B1.c: 263: } else {
 10856  01DF  0008               	return
 10857  01E0                     l1635:	
 10858                           
 10859                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
 10860  01E0  0021               	movlb	1	; select bank1
 10861  01E1  1C2E               	btfss	_myMain^(0+128),0
 10862  01E2  0008               	return
 10863                           
 10864                           ;OverLoad_B1.c: 265: Load.Enable = 1;
 10865  01E3  0022               	movlb	2	; select bank2
 10866  01E4  142A               	bsf	_Load^(0+256),0
 10867  01E5  0008               	return
 10868  01E6                     __end_of_Load_Main:	
 10869                           
 10870                           	psect	text64
 10871  1D58                     __ptext64:	
 10872 ;; *************** function _getMain_Lights_Count *****************
 10873 ;; Defined at:
 10874 ;;		line 466 in file "../src/Main_B1.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;		None
 10877 ;; Auto vars:     Size  Location     Type
 10878 ;;  status1         1    3[COMMON] unsigned char 
 10879 ;;  count           1    2[COMMON] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      unsigned char 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;Total ram usage:        2 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    3
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		_Load_Main
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           
 10904                           ;psect for function _getMain_Lights_Count
 10905  1D58                     _getMain_Lights_Count:	
 10906                           
 10907                           ;Main_B1.c: 467: char count = 0;
 10908                           
 10909                           ;incstack = 0
 10910                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10911  1D58  01F2               	clrf	getMain_Lights_Count@count
 10912                           
 10913                           ;Main_B1.c: 471: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 10914  1D59  3000               	movlw	0
 10915  1D5A  0021               	movlb	1	; select bank1
 10916  1D5B  19E8               	btfsc	_DimmerIntr1^(0+128),3
 10917  1D5C  3001               	movlw	1
 10918  1D5D  00F3               	movwf	getMain_Lights_Count@status1
 10919                           
 10920                           ;Main_B1.c: 494: return count = status1;
 10921  1D5E  0873               	movf	getMain_Lights_Count@status1,w
 10922  1D5F  00F2               	movwf	getMain_Lights_Count@count
 10923  1D60  0008               	return
 10924  1D61                     __end_of_getMain_Lights_Count:	
 10925                           
 10926                           	psect	text65
 10927  1D20                     __ptext65:	
 10928 ;; *************** function _getDimmer_Load_Status *****************
 10929 ;; Defined at:
 10930 ;;		line 1062 in file "../src/Dimmer_B1.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;		None
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;  status          1    2[COMMON] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  1    wreg      unsigned char 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        1 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    3
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_Load_Main
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function _getDimmer_Load_Status
 10960  1D20                     _getDimmer_Load_Status:	
 10961                           
 10962                           ;Dimmer_B1.c: 1063: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10966  1D20  3000               	movlw	0
 10967  1D21  0022               	movlb	2	; select bank2
 10968  1D22  1920               	btfsc	_Dimmer^(0+256),2
 10969  1D23  3001               	movlw	1
 10970  1D24  00F2               	movwf	getDimmer_Load_Status@status
 10971                           
 10972                           ;Dimmer_B1.c: 1064: return status;
 10973  1D25  0872               	movf	getDimmer_Load_Status@status,w
 10974  1D26  0008               	return
 10975  1D27                     __end_of_getDimmer_Load_Status:	
 10976                           
 10977                           	psect	text66
 10978  1D19                     __ptext66:	
 10979 ;; *************** function _getDimmer_LoadGO *****************
 10980 ;; Defined at:
 10981 ;;		line 1056 in file "../src/Dimmer_B1.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  loadgo          1    2[COMMON] unsigned char 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      unsigned char 
 10988 ;; Registers used:
 10989 ;;		wreg, status,2
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;Total ram usage:        1 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    3
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_Load_Main
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function _getDimmer_LoadGO
 11011  1D19                     _getDimmer_LoadGO:	
 11012                           
 11013                           ;Dimmer_B1.c: 1057: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11014                           
 11015                           ;incstack = 0
 11016                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11017  1D19  3000               	movlw	0
 11018  1D1A  0022               	movlb	2	; select bank2
 11019  1D1B  18A0               	btfsc	_Dimmer^(0+256),1
 11020  1D1C  3001               	movlw	1
 11021  1D1D  00F2               	movwf	getDimmer_LoadGO@loadgo
 11022                           
 11023                           ;Dimmer_B1.c: 1058: return loadgo;
 11024  1D1E  0872               	movf	getDimmer_LoadGO@loadgo,w
 11025  1D1F  0008               	return
 11026  1D20                     __end_of_getDimmer_LoadGO:	
 11027                           
 11028                           	psect	text67
 11029  1E57                     __ptext67:	
 11030 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11031 ;; Defined at:
 11032 ;;		line 238 in file "../src/Dimmer_B1.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;		None
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  status          1    2[COMMON] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      unsigned char 
 11039 ;; Registers used:
 11040 ;;		wreg, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        1 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    3
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_Load_Main
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           
 11061                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11062  1E57                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11063                           
 11064                           ;Dimmer_B1.c: 239: char status = 0;
 11065                           
 11066                           ;incstack = 0
 11067                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11068  1E57  01F2               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11069                           
 11070                           ;Dimmer_B1.c: 250: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11071  1E58  3000               	movlw	0
 11072  1E59  0021               	movlb	1	; select bank1
 11073  1E5A  1A68               	btfsc	_DimmerIntr1^(0+128),4
 11074  1E5B  3001               	movlw	1
 11075  1E5C  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11076                           
 11077                           ;Dimmer_B1.c: 254: if (status == 0) {
 11078  1E5D  08F2               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11079  1E5E  1D03               	skipz
 11080  1E5F  2E64               	goto	l6983
 11081                           
 11082                           ;Dimmer_B1.c: 264: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11083  1E60  3000               	movlw	0
 11084  1E61  1B68               	btfsc	_DimmerIntr1^(0+128),6
 11085  1E62  3001               	movlw	1
 11086  1E63  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11087  1E64                     l6983:	
 11088                           
 11089                           ;Dimmer_B1.c: 266: }
 11090                           ;Dimmer_B1.c: 268: return status;
 11091  1E64  0872               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11092  1E65  0008               	return
 11093  1E66                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11094                           
 11095                           	psect	text68
 11096  1153                     __ptext68:	
 11097 ;; *************** function ___wmul *****************
 11098 ;; Defined at:
 11099 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;  multiplier      2    2[COMMON] unsigned int 
 11102 ;;  multiplicand    2    4[COMMON] unsigned int 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;  product         2    6[COMMON] unsigned int 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  2    2[COMMON] unsigned int 
 11107 ;; Registers used:
 11108 ;;		wreg, status,2, status,0
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        6 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    3
 11121 ;; This function calls:
 11122 ;;		Nothing
 11123 ;; This function is called by:
 11124 ;;		_Load_Main
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function ___wmul
 11130  1153                     ___wmul:	
 11131                           
 11132                           ;incstack = 0
 11133                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11134  1153  01F6               	clrf	___wmul@product
 11135  1154  01F7               	clrf	___wmul@product+1
 11136  1155                     l7467:	
 11137  1155  1C72               	btfss	___wmul@multiplier,0
 11138  1156  295B               	goto	l2678
 11139  1157  0874               	movf	___wmul@multiplicand,w
 11140  1158  07F6               	addwf	___wmul@product,f
 11141  1159  0875               	movf	___wmul@multiplicand+1,w
 11142  115A  3DF7               	addwfc	___wmul@product+1,f
 11143  115B                     l2678:	
 11144  115B  3001               	movlw	1
 11145  115C                     u7315:	
 11146  115C  35F4               	lslf	___wmul@multiplicand,f
 11147  115D  0DF5               	rlf	___wmul@multiplicand+1,f
 11148  115E  0B89               	decfsz	9,f
 11149  115F  295C               	goto	u7315
 11150  1160  3001               	movlw	1
 11151  1161                     u7325:	
 11152  1161  36F3               	lsrf	___wmul@multiplier+1,f
 11153  1162  0CF2               	rrf	___wmul@multiplier,f
 11154  1163  0B89               	decfsz	9,f
 11155  1164  2961               	goto	u7325
 11156  1165  0873               	movf	___wmul@multiplier+1,w
 11157  1166  0472               	iorwf	___wmul@multiplier,w
 11158  1167  1D03               	skipz
 11159  1168  2955               	goto	l7467
 11160  1169  0877               	movf	___wmul@product+1,w
 11161  116A  01F3               	clrf	?___wmul+1
 11162  116B  07F3               	addwf	?___wmul+1,f
 11163  116C  0876               	movf	___wmul@product,w
 11164  116D  01F2               	clrf	?___wmul
 11165  116E  07F2               	addwf	?___wmul,f
 11166  116F  0008               	return
 11167  1170                     __end_of___wmul:	
 11168                           
 11169                           	psect	text69
 11170  13CD                     __ptext69:	
 11171 ;; *************** function ___lwdiv *****************
 11172 ;; Defined at:
 11173 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;  divisor         2    2[COMMON] unsigned int 
 11176 ;;  dividend        2    4[COMMON] unsigned int 
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;  quotient        2    7[COMMON] unsigned int 
 11179 ;;  counter         1    9[COMMON] unsigned char 
 11180 ;; Return value:  Size  Location     Type
 11181 ;;                  2    2[COMMON] unsigned int 
 11182 ;; Registers used:
 11183 ;;		wreg, status,2, status,0
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 0/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;Total ram usage:        8 bytes
 11194 ;; Hardware stack levels used:    1
 11195 ;; Hardware stack levels required when called:    3
 11196 ;; This function calls:
 11197 ;;		Nothing
 11198 ;; This function is called by:
 11199 ;;		_Load_Main
 11200 ;;		_setRF_Main
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           
 11205                           ;psect for function ___lwdiv
 11206  13CD                     ___lwdiv:	
 11207                           
 11208                           ;incstack = 0
 11209                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11210  13CD  01F7               	clrf	___lwdiv@quotient
 11211  13CE  01F8               	clrf	___lwdiv@quotient+1
 11212  13CF  0873               	movf	___lwdiv@divisor+1,w
 11213  13D0  0472               	iorwf	___lwdiv@divisor,w
 11214  13D1  1903               	skipnz
 11215  13D2  2BFC               	goto	l6945
 11216  13D3  01F9               	clrf	___lwdiv@counter
 11217  13D4  0AF9               	incf	___lwdiv@counter,f
 11218  13D5                     l6933:	
 11219  13D5  1BF3               	btfsc	___lwdiv@divisor+1,7
 11220  13D6  2BE1               	goto	l6935
 11221  13D7  3001               	movlw	1
 11222  13D8                     u6385:	
 11223  13D8  35F2               	lslf	___lwdiv@divisor,f
 11224  13D9  0DF3               	rlf	___lwdiv@divisor+1,f
 11225  13DA  0B89               	decfsz	9,f
 11226  13DB  2BD8               	goto	u6385
 11227  13DC  3001               	movlw	1
 11228  13DD  00F6               	movwf	??___lwdiv
 11229  13DE  0876               	movf	??___lwdiv,w
 11230  13DF  07F9               	addwf	___lwdiv@counter,f
 11231  13E0  2BD5               	goto	l6933
 11232  13E1                     l6935:	
 11233  13E1  3001               	movlw	1
 11234  13E2                     u6405:	
 11235  13E2  35F7               	lslf	___lwdiv@quotient,f
 11236  13E3  0DF8               	rlf	___lwdiv@quotient+1,f
 11237  13E4  0B89               	decfsz	9,f
 11238  13E5  2BE2               	goto	u6405
 11239  13E6  0873               	movf	___lwdiv@divisor+1,w
 11240  13E7  0275               	subwf	___lwdiv@dividend+1,w
 11241  13E8  1D03               	skipz
 11242  13E9  2BEC               	goto	u6415
 11243  13EA  0872               	movf	___lwdiv@divisor,w
 11244  13EB  0274               	subwf	___lwdiv@dividend,w
 11245  13EC                     u6415:	
 11246  13EC  1C03               	skipc
 11247  13ED  2BF3               	goto	l6941
 11248  13EE  0872               	movf	___lwdiv@divisor,w
 11249  13EF  02F4               	subwf	___lwdiv@dividend,f
 11250  13F0  0873               	movf	___lwdiv@divisor+1,w
 11251  13F1  3BF5               	subwfb	___lwdiv@dividend+1,f
 11252  13F2  1477               	bsf	___lwdiv@quotient,0
 11253  13F3                     l6941:	
 11254  13F3  3001               	movlw	1
 11255  13F4                     u6425:	
 11256  13F4  36F3               	lsrf	___lwdiv@divisor+1,f
 11257  13F5  0CF2               	rrf	___lwdiv@divisor,f
 11258  13F6  0B89               	decfsz	9,f
 11259  13F7  2BF4               	goto	u6425
 11260  13F8  3001               	movlw	1
 11261  13F9  02F9               	subwf	___lwdiv@counter,f
 11262  13FA  1D03               	btfss	3,2
 11263  13FB  2BE1               	goto	l6935
 11264  13FC                     l6945:	
 11265  13FC  0878               	movf	___lwdiv@quotient+1,w
 11266  13FD  01F3               	clrf	?___lwdiv+1
 11267  13FE  07F3               	addwf	?___lwdiv+1,f
 11268  13FF  0877               	movf	___lwdiv@quotient,w
 11269  1400  01F2               	clrf	?___lwdiv
 11270  1401  07F2               	addwf	?___lwdiv,f
 11271  1402  0008               	return
 11272  1403                     __end_of___lwdiv:	
 11273                           
 11274                           	psect	text70
 11275  1CC7                     __ptext70:	
 11276 ;; *************** function _Load_Initialization *****************
 11277 ;; Defined at:
 11278 ;;		line 9 in file "../src/OverLoad_B1.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;		None
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        0 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    4
 11299 ;; This function calls:
 11300 ;;		_setLoad_AH_AL_Restore
 11301 ;; This function is called by:
 11302 ;;		_main
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           
 11307                           ;psect for function _Load_Initialization
 11308  1CC7                     _Load_Initialization:	
 11309                           
 11310                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11311                           
 11312                           ;incstack = 0
 11313                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11314  1CC7  3191  2100         	fcall	_setLoad_AH_AL_Restore
 11315  1CC9  0008               	return
 11316  1CCA                     __end_of_Load_Initialization:	
 11317                           
 11318                           	psect	text71
 11319  1100                     __ptext71:	
 11320 ;; *************** function _setLoad_AH_AL_Restore *****************
 11321 ;; Defined at:
 11322 ;;		line 291 in file "../src/OverLoad_B1.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;		None
 11325 ;; Auto vars:     Size  Location     Type
 11326 ;;  i               1    3[COMMON] unsigned char 
 11327 ;; Return value:  Size  Location     Type
 11328 ;;		None               void
 11329 ;; Registers used:
 11330 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11340 ;;Total ram usage:        2 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    3
 11343 ;; This function calls:
 11344 ;;		Nothing
 11345 ;; This function is called by:
 11346 ;;		_Load_Initialization
 11347 ;;		_Load_Main
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           
 11352                           ;psect for function _setLoad_AH_AL_Restore
 11353  1100                     _setLoad_AH_AL_Restore:	
 11354                           
 11355                           ;OverLoad_B1.c: 292: char i;
 11356                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
 11357                           
 11358                           ;incstack = 0
 11359                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11360  1100  01F3               	clrf	setLoad_AH_AL_Restore@i
 11361  1101                     L7:	
 11362  1101  3005               	movlw	5
 11363  1102  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11364  1103  1803               	btfsc	3,0
 11365  1104  0008               	return
 11366                           
 11367                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
 11368  1105  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11369  1106  3E35               	addlw	(_Load+11)& (0+255)
 11370  1107  0086               	movwf	6
 11371  1108  3001               	movlw	1	; select bank2/3
 11372  1109  0087               	movwf	7
 11373  110A  3000               	movlw	0
 11374  110B  3FC0               	movwi [0]fsr1
 11375  110C  3FC1               	movwi [1]fsr1
 11376                           
 11377                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xffff;
 11378  110D  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11379  110E  3E3F               	addlw	(_Load+21)& (0+255)
 11380  110F  0086               	movwf	6
 11381  1110  3001               	movlw	1	; select bank2/3
 11382  1111  0087               	movwf	7
 11383  1112  30FF               	movlw	255
 11384  1113  3FC0               	movwi [0]fsr1
 11385  1114  30FF               	movlw	255
 11386  1115  3FC1               	movwi [1]fsr1
 11387  1116  3001               	movlw	1
 11388  1117  00F2               	movwf	??_setLoad_AH_AL_Restore
 11389  1118  0872               	movf	??_setLoad_AH_AL_Restore,w
 11390  1119  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11391  111A  2901               	goto	L7
 11392  111B                     __end_of_setLoad_AH_AL_Restore:	
 11393                           
 11394                           	psect	text72
 11395  1CE2                     __ptext72:	
 11396 ;; *************** function _LED_Main *****************
 11397 ;; Defined at:
 11398 ;;		line 47 in file "../src/LED_B1.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;		None
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;		None
 11403 ;; Return value:  Size  Location     Type
 11404 ;;		None               void
 11405 ;; Registers used:
 11406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;Total ram usage:        0 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    5
 11419 ;; This function calls:
 11420 ;;		_setLED_Main
 11421 ;; This function is called by:
 11422 ;;		_main
 11423 ;; This function uses a non-reentrant model
 11424 ;;
 11425                           
 11426                           
 11427                           ;psect for function _LED_Main
 11428  1CE2                     _LED_Main:	
 11429                           
 11430                           ;LED_B1.c: 62: setLED_Main(99);
 11431                           
 11432                           ;incstack = 0
 11433                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11434  1CE2  3063               	movlw	99
 11435  1CE3  3193  2366         	fcall	_setLED_Main
 11436  1CE5  0008               	return
 11437  1CE6                     __end_of_LED_Main:	
 11438                           
 11439                           	psect	text73
 11440  1366                     __ptext73:	
 11441 ;; *************** function _setLED_Main *****************
 11442 ;; Defined at:
 11443 ;;		line 221 in file "../src/LED_B1.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  led             1    wreg     unsigned char 
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;  led             1    6[COMMON] unsigned char 
 11448 ;; Return value:  Size  Location     Type
 11449 ;;		None               void
 11450 ;; Registers used:
 11451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/0
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;Total ram usage:        3 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; Hardware stack levels required when called:    4
 11464 ;; This function calls:
 11465 ;;		_LedPointSelect
 11466 ;; This function is called by:
 11467 ;;		_LED_Main
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           
 11472                           ;psect for function _setLED_Main
 11473  1366                     _setLED_Main:	
 11474                           
 11475                           ;incstack = 0
 11476                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11477                           ;setLED_Main@led stored from wreg
 11478  1366  00F6               	movwf	setLED_Main@led
 11479                           
 11480                           ;LED_B1.c: 222: LedPointSelect(led);
 11481  1367  0876               	movf	setLED_Main@led,w
 11482  1368  319D  25A8  3193   	fcall	_LedPointSelect
 11483                           
 11484                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11485  136B  0021               	movlb	1	; select bank1
 11486  136C  084C               	movf	_LED^(0+128),w
 11487  136D  0086               	movwf	6
 11488  136E  3001               	movlw	1	; select bank2/3
 11489  136F  0087               	movwf	7
 11490  1370  1C81               	btfss	1,1
 11491  1371  0008               	return
 11492                           
 11493                           ;LED_B1.c: 224: LED->Time++;
 11494  1372  0A4C               	incf	_LED^(0+128),w
 11495  1373  0086               	movwf	6
 11496  1374  3001               	movlw	1	; select bank2/3
 11497  1375  0087               	movwf	7
 11498  1376  3001               	movlw	1
 11499  1377  0781               	addwf	1,f
 11500  1378  3141               	addfsr 1,1
 11501  1379  1803               	skipnc
 11502  137A  0A81               	incf	1,f
 11503                           
 11504                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11505  137B  0A4C               	incf	_LED^(0+128),w
 11506  137C  0086               	movwf	6
 11507  137D  3001               	movlw	1	; select bank2/3
 11508  137E  0087               	movwf	7
 11509  137F  3F40               	moviw [0]fsr1
 11510  1380  00F4               	movwf	??_setLED_Main
 11511  1381  3F41               	moviw [1]fsr1
 11512  1382  00F5               	movwf	??_setLED_Main+1
 11513  1383  3000               	movlw	0
 11514  1384  0275               	subwf	??_setLED_Main+1,w
 11515  1385  3019               	movlw	25
 11516  1386  1903               	skipnz
 11517  1387  0274               	subwf	??_setLED_Main,w
 11518  1388  1C03               	skipc
 11519  1389  0008               	return
 11520                           
 11521                           ;LED_B1.c: 226: LED->Time = 0;
 11522  138A  0A4C               	incf	_LED^(0+128),w
 11523  138B  0086               	movwf	6
 11524  138C  3001               	movlw	1	; select bank2/3
 11525  138D  0087               	movwf	7
 11526  138E  3000               	movlw	0
 11527  138F  3FC0               	movwi [0]fsr1
 11528  1390  3FC1               	movwi [1]fsr1
 11529                           
 11530                           ;LED_B1.c: 243: if (led == 99) {
 11531  1391  0876               	movf	setLED_Main@led,w
 11532  1392  3A63               	xorlw	99
 11533  1393  1D03               	skipz
 11534  1394  0008               	return
 11535                           
 11536                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11537  1395  3020               	movlw	32
 11538  1396  0020               	movlb	0	; select bank0
 11539  1397  068D               	xorwf	13,f
 11540  1398  0008               	return
 11541  1399                     __end_of_setLED_Main:	
 11542                           
 11543                           	psect	text74
 11544  1CDE                     __ptext74:	
 11545 ;; *************** function _LED_Initialization *****************
 11546 ;; Defined at:
 11547 ;;		line 31 in file "../src/LED_B1.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;		None
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;		None
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        0 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    6
 11568 ;; This function calls:
 11569 ;;		_setLED_Initialization
 11570 ;; This function is called by:
 11571 ;;		_main
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _LED_Initialization
 11577  1CDE                     _LED_Initialization:	
 11578                           
 11579                           ;LED_B1.c: 42: setLED_Initialization(99);
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11583  1CDE  3063               	movlw	99
 11584  1CDF  319E  26A4         	fcall	_setLED_Initialization
 11585  1CE1  0008               	return
 11586  1CE2                     __end_of_LED_Initialization:	
 11587                           
 11588                           	psect	text75
 11589  1EA4                     __ptext75:	
 11590 ;; *************** function _setLED_Initialization *****************
 11591 ;; Defined at:
 11592 ;;		line 69 in file "../src/LED_B1.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;  led             1    wreg     unsigned char 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  led             1    6[COMMON] unsigned char 
 11597 ;; Return value:  Size  Location     Type
 11598 ;;		None               void
 11599 ;; Registers used:
 11600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;Total ram usage:        1 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    5
 11613 ;; This function calls:
 11614 ;;		_LedPointSelect
 11615 ;;		_setLED
 11616 ;; This function is called by:
 11617 ;;		_LED_Initialization
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           
 11622                           ;psect for function _setLED_Initialization
 11623  1EA4                     _setLED_Initialization:	
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11627                           ;setLED_Initialization@led stored from wreg
 11628  1EA4  00F6               	movwf	setLED_Initialization@led
 11629                           
 11630                           ;LED_B1.c: 70: LedPointSelect(led);
 11631  1EA5  0876               	movf	setLED_Initialization@led,w
 11632  1EA6  319D  25A8  319E   	fcall	_LedPointSelect
 11633                           
 11634                           ;LED_B1.c: 71: LED->Enable = 1;
 11635  1EA9  0021               	movlb	1	; select bank1
 11636  1EAA  084C               	movf	_LED^(0+128),w
 11637  1EAB  0086               	movwf	6
 11638  1EAC  3001               	movlw	1	; select bank2/3
 11639  1EAD  0087               	movwf	7
 11640  1EAE  1401               	bsf	1,0
 11641                           
 11642                           ;LED_B1.c: 72: setLED(led, 0);
 11643  1EAF  01F4               	clrf	setLED@command
 11644  1EB0  0876               	movf	setLED_Initialization@led,w
 11645  1EB1  3194  24AB         	fcall	_setLED
 11646  1EB3  0008               	return
 11647  1EB4                     __end_of_setLED_Initialization:	
 11648                           
 11649                           	psect	text76
 11650  1333                     __ptext76:	
 11651 ;; *************** function _Flash_Memory_Main *****************
 11652 ;; Defined at:
 11653 ;;		line 955 in file "../src/MCU_B1.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;		None               void
 11660 ;; Registers used:
 11661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        1 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    6
 11674 ;; This function calls:
 11675 ;;		_Flash_Memory_Modify
 11676 ;;		_getMain_All_LightsStatus
 11677 ;; This function is called by:
 11678 ;;		_main
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           
 11683                           ;psect for function _Flash_Memory_Main
 11684  1333                     _Flash_Memory_Main:	
 11685                           
 11686                           ;MCU_B1.c: 956: if (Memory.Modify == 1) {
 11687                           
 11688                           ;incstack = 0
 11689                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11690  1333  0023               	movlb	3	; select bank3
 11691  1334  1C62               	btfss	(_Memory^(0+384)+36),0
 11692  1335  0008               	return
 11693                           
 11694                           ;MCU_B1.c: 957: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11695  1336  319D  2535  3193   	fcall	_getMain_All_LightsStatus
 11696  1339  3A00               	xorlw	0
 11697  133A  3000               	movlw	0
 11698  133B  1903               	skipnz
 11699  133C  3001               	movlw	1
 11700  133D  00F8               	movwf	??_Flash_Memory_Main
 11701  133E  0DF8               	rlf	??_Flash_Memory_Main,f
 11702  133F  0023               	movlb	3	; select bank3
 11703  1340  0862               	movf	(_Memory^(0+384)+36),w
 11704  1341  0678               	xorwf	??_Flash_Memory_Main,w
 11705  1342  39FD               	andlw	-3
 11706  1343  0678               	xorwf	??_Flash_Memory_Main,w
 11707  1344  00E2               	movwf	(_Memory^(0+384)+36)
 11708                           
 11709                           ;MCU_B1.c: 958: if (Memory.GO == 1) {
 11710  1345  1CE2               	btfss	(_Memory^(0+384)+36),1
 11711  1346  2B60               	goto	l1255
 11712                           
 11713                           ;MCU_B1.c: 959: Memory.Runtime = 1;
 11714  1347  15E2               	bsf	(_Memory^(0+384)+36),3
 11715                           
 11716                           ;MCU_B1.c: 960: Memory.Time++;
 11717  1348  3001               	movlw	1
 11718  1349  07E0               	addwf	(_Memory^(0+384)+34),f
 11719  134A  3000               	movlw	0
 11720  134B  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11721                           
 11722                           ;MCU_B1.c: 961: if (Memory.Time == (200 / 20)) {
 11723  134C  3022               	movlw	34
 11724  134D  3EBE               	addlw	_Memory& (0+255)
 11725  134E  0086               	movwf	6
 11726  134F  3001               	movlw	1	; select bank3/4
 11727  1350  0087               	movwf	7
 11728  1351  3F40               	moviw [0]fsr1
 11729  1352  3A0A               	xorlw	10
 11730  1353  1D03               	skipz
 11731  1354  2B57               	goto	u7535
 11732  1355  3F41               	moviw [1]fsr1
 11733  1356  3A00               	xorlw	0
 11734  1357                     u7535:	
 11735  1357  1D03               	skipz
 11736  1358  0008               	return
 11737                           
 11738                           ;MCU_B1.c: 962: Memory.Time = 0;
 11739  1359  01E0               	clrf	(_Memory^(0+384)+34)
 11740  135A  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11741                           
 11742                           ;MCU_B1.c: 963: Memory.Modify = 0;
 11743  135B  1062               	bcf	(_Memory^(0+384)+36),0
 11744                           
 11745                           ;MCU_B1.c: 964: Memory.GO = 0;
 11746  135C  10E2               	bcf	(_Memory^(0+384)+36),1
 11747                           
 11748                           ;MCU_B1.c: 965: Flash_Memory_Modify();
 11749  135D  3195  25AF         	fcall	_Flash_Memory_Modify
 11750                           
 11751                           ;MCU_B1.c: 966: }
 11752                           ;MCU_B1.c: 967: } else {
 11753  135F  0008               	return
 11754  1360                     l1255:	
 11755                           
 11756                           ;MCU_B1.c: 968: if (Memory.Runtime == 1) {
 11757  1360  1DE2               	btfss	(_Memory^(0+384)+36),3
 11758  1361  0008               	return
 11759                           
 11760                           ;MCU_B1.c: 969: Memory.Runtime = 0;
 11761  1362  11E2               	bcf	(_Memory^(0+384)+36),3
 11762                           
 11763                           ;MCU_B1.c: 970: Memory.Time = 0;
 11764  1363  01E0               	clrf	(_Memory^(0+384)+34)
 11765  1364  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11766  1365  0008               	return
 11767  1366                     __end_of_Flash_Memory_Main:	
 11768                           
 11769                           	psect	text77
 11770  15AF                     __ptext77:	
 11771 ;; *************** function _Flash_Memory_Modify *****************
 11772 ;; Defined at:
 11773 ;;		line 1028 in file "../src/MCU_B1.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  i               1    7[COMMON] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;		None               void
 11780 ;; Registers used:
 11781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        2 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    5
 11794 ;; This function calls:
 11795 ;;		_Flash_Memory_Erasing
 11796 ;;		_Flash_Memory_Read
 11797 ;;		_Flash_Memory_Write
 11798 ;;		_setMemory_Data
 11799 ;; This function is called by:
 11800 ;;		_Flash_Memory_Main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _Flash_Memory_Modify
 11806  15AF                     _Flash_Memory_Modify:	
 11807                           
 11808                           ;MCU_B1.c: 1029: char i = 0;
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11812  15AF  01F7               	clrf	Flash_Memory_Modify@i
 11813                           
 11814                           ;MCU_B1.c: 1030: for (i = 0; i < 32; i++) {
 11815  15B0  01F7               	clrf	Flash_Memory_Modify@i
 11816  15B1  3020               	movlw	32
 11817  15B2  0277               	subwf	Flash_Memory_Modify@i,w
 11818  15B3  1803               	btfsc	3,0
 11819  15B4  2DC9               	goto	l7187
 11820  15B5                     l7181:	
 11821                           
 11822                           ;MCU_B1.c: 1031: Memory.Data[i] = Flash_Memory_Read(i);
 11823  15B5  0877               	movf	Flash_Memory_Modify@i,w
 11824  15B6  3188  2000  3195   	fcall	_Flash_Memory_Read
 11825  15B9  00F6               	movwf	??_Flash_Memory_Modify
 11826  15BA  0877               	movf	Flash_Memory_Modify@i,w
 11827  15BB  3EBE               	addlw	_Memory& (0+255)
 11828  15BC  0086               	movwf	6
 11829  15BD  3001               	movlw	1	; select bank3/4
 11830  15BE  0087               	movwf	7
 11831  15BF  0876               	movf	??_Flash_Memory_Modify,w
 11832  15C0  0081               	movwf	1
 11833  15C1  3001               	movlw	1
 11834  15C2  00F6               	movwf	??_Flash_Memory_Modify
 11835  15C3  0876               	movf	??_Flash_Memory_Modify,w
 11836  15C4  07F7               	addwf	Flash_Memory_Modify@i,f
 11837  15C5  3020               	movlw	32
 11838  15C6  0277               	subwf	Flash_Memory_Modify@i,w
 11839  15C7  1C03               	skipc
 11840  15C8  2DB5               	goto	l7181
 11841  15C9                     l7187:	
 11842                           
 11843                           ;MCU_B1.c: 1032: }
 11844                           ;MCU_B1.c: 1033: setMemory_Data(0, product->Data[12]);
 11845  15C9  0020               	movlb	0	; select bank0
 11846  15CA  086C               	movf	_product,w
 11847  15CB  0086               	movwf	6
 11848  15CC  3002               	movlw	2	; select bank4/5
 11849  15CD  0087               	movwf	7
 11850  15CE  3002               	movlw	2	; select bank4/5
 11851  15CF  3F4C               	moviw [12]fsr1
 11852  15D0  00F2               	movwf	setMemory_Data@data
 11853  15D1  3000               	movlw	0
 11854  15D2  319D  25B3  3195   	fcall	_setMemory_Data
 11855                           
 11856                           ;MCU_B1.c: 1034: setMemory_Data(1, product->Data[13]);
 11857  15D5  0020               	movlb	0	; select bank0
 11858  15D6  086C               	movf	_product,w
 11859  15D7  0086               	movwf	6
 11860  15D8  3002               	movlw	2	; select bank4/5
 11861  15D9  0087               	movwf	7
 11862  15DA  3002               	movlw	2	; select bank4/5
 11863  15DB  3F4D               	moviw [13]fsr1
 11864  15DC  00F2               	movwf	setMemory_Data@data
 11865  15DD  3001               	movlw	1
 11866  15DE  319D  25B3  3195   	fcall	_setMemory_Data
 11867                           
 11868                           ;MCU_B1.c: 1035: setMemory_Data(2, product->Data[14]);
 11869  15E1  0020               	movlb	0	; select bank0
 11870  15E2  086C               	movf	_product,w
 11871  15E3  0086               	movwf	6
 11872  15E4  3002               	movlw	2	; select bank4/5
 11873  15E5  0087               	movwf	7
 11874  15E6  3002               	movlw	2	; select bank4/5
 11875  15E7  3F4E               	moviw [14]fsr1
 11876  15E8  00F2               	movwf	setMemory_Data@data
 11877  15E9  3002               	movlw	2
 11878  15EA  319D  25B3  3195   	fcall	_setMemory_Data
 11879                           
 11880                           ;MCU_B1.c: 1041: if (Memory.LoopSave == 1) {
 11881  15ED  0023               	movlb	3	; select bank3
 11882  15EE  1D62               	btfss	(_Memory^(0+384)+36),2
 11883  15EF  2DF4               	goto	l1278
 11884                           
 11885                           ;MCU_B1.c: 1042: Memory.LoopSave = 0;
 11886  15F0  1162               	bcf	(_Memory^(0+384)+36),2
 11887                           
 11888                           ;MCU_B1.c: 1043: myMain.FirstOpen = 0;
 11889  15F1  0021               	movlb	1	; select bank1
 11890  15F2  11AE               	bcf	_myMain^(0+128),3
 11891                           
 11892                           ;MCU_B1.c: 1044: myMain.First = 0;
 11893  15F3  12AE               	bcf	_myMain^(0+128),5
 11894  15F4                     l1278:	
 11895                           
 11896                           ;MCU_B1.c: 1046: }
 11897                           ;MCU_B1.c: 1047: GIE = 0;
 11898  15F4  138B               	bcf	11,7	;volatile
 11899                           
 11900                           ;MCU_B1.c: 1048: Flash_Memory_Erasing();
 11901  15F5  319D  25EC  3195   	fcall	_Flash_Memory_Erasing
 11902                           
 11903                           ;MCU_B1.c: 1049: Flash_Memory_Write();
 11904  15F8  3192  227E         	fcall	_Flash_Memory_Write
 11905                           
 11906                           ;MCU_B1.c: 1050: GIE = 1;
 11907  15FA  178B               	bsf	11,7	;volatile
 11908  15FB  0008               	return
 11909  15FC                     __end_of_Flash_Memory_Modify:	
 11910                           
 11911                           	psect	text78
 11912  1DEC                     __ptext78:	
 11913 ;; *************** function _Flash_Memory_Erasing *****************
 11914 ;; Defined at:
 11915 ;;		line 1017 in file "../src/MCU_B1.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;		None
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;		None
 11920 ;; Return value:  Size  Location     Type
 11921 ;;		None               void
 11922 ;; Registers used:
 11923 ;;		wreg, status,2, status,0, pclath, cstack
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;Total ram usage:        0 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:    4
 11936 ;; This function calls:
 11937 ;;		_Flash_Memory_Unlock
 11938 ;; This function is called by:
 11939 ;;		_Flash_Memory_Modify
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           
 11944                           ;psect for function _Flash_Memory_Erasing
 11945  1DEC                     _Flash_Memory_Erasing:	
 11946                           
 11947                           ;MCU_B1.c: 1018: CFGS = 0;
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11951  1DEC  0023               	movlb	3	; select bank3
 11952  1DED  1315               	bcf	21,6	;volatile
 11953                           
 11954                           ;MCU_B1.c: 1019: PMADRH = 0x30;
 11955  1DEE  3030               	movlw	48
 11956  1DEF  0092               	movwf	18	;volatile
 11957                           
 11958                           ;MCU_B1.c: 1020: PMADRL = 0x00;
 11959  1DF0  0191               	clrf	17	;volatile
 11960                           
 11961                           ;MCU_B1.c: 1021: FREE = 1;
 11962  1DF1  1615               	bsf	21,4	;volatile
 11963                           
 11964                           ;MCU_B1.c: 1022: WREN = 1;
 11965  1DF2  1515               	bsf	21,2	;volatile
 11966                           
 11967                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 11968  1DF3  319D  254F         	fcall	_Flash_Memory_Unlock
 11969                           
 11970                           ;MCU_B1.c: 1024: WREN = 0;
 11971  1DF5  0023               	movlb	3	; select bank3
 11972  1DF6  1115               	bcf	21,2	;volatile
 11973  1DF7  0008               	return
 11974  1DF8                     __end_of_Flash_Memory_Erasing:	
 11975                           
 11976                           	psect	text79
 11977  044C                     __ptext79:	
 11978 ;; *************** function _Flash_Memory_Initialization *****************
 11979 ;; Defined at:
 11980 ;;		line 914 in file "../src/MCU_B1.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;		None
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;  i               1   59[BANK0 ] unsigned char 
 11985 ;; Return value:  Size  Location     Type
 11986 ;;		None               void
 11987 ;; Registers used:
 11988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;Total ram usage:        2 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    6
 12001 ;; This function calls:
 12002 ;;		_Flash_Memory_Read
 12003 ;;		_Flash_Memory_Write
 12004 ;;		_getDimmerLights_ValueToPercent
 12005 ;;		_setMemory_Data
 12006 ;; This function is called by:
 12007 ;;		_main
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           
 12012                           ;psect for function _Flash_Memory_Initialization
 12013  044C                     _Flash_Memory_Initialization:	
 12014                           
 12015                           ;MCU_B1.c: 915: char i = 0;
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12019  044C  0020               	movlb	0	; select bank0
 12020  044D  01DB               	clrf	Flash_Memory_Initialization@i
 12021                           
 12022                           ;MCU_B1.c: 916: if (Flash_Memory_Read(31) == 0xaa) {
 12023  044E  301F               	movlw	31
 12024  044F  3188  2000  3184   	fcall	_Flash_Memory_Read
 12025  0452  3AAA               	xorlw	170
 12026  0453  1D03               	skipz
 12027  0454  2CBE               	goto	l9195
 12028                           
 12029                           ;MCU_B1.c: 917: product->Data[12] = Flash_Memory_Read(0);
 12030  0455  3000               	movlw	0
 12031  0456  3188  2000  3184   	fcall	_Flash_Memory_Read
 12032  0459  0020               	movlb	0	; select bank0
 12033  045A  00DA               	movwf	??_Flash_Memory_Initialization
 12034  045B  086C               	movf	_product,w
 12035  045C  3E0C               	addlw	12
 12036  045D  0086               	movwf	6
 12037  045E  3002               	movlw	2	; select bank4/5
 12038  045F  0087               	movwf	7
 12039  0460  085A               	movf	??_Flash_Memory_Initialization,w
 12040  0461  0081               	movwf	1
 12041                           
 12042                           ;MCU_B1.c: 918: product->Data[13] = Flash_Memory_Read(1);
 12043  0462  3001               	movlw	1
 12044  0463  3188  2000  3184   	fcall	_Flash_Memory_Read
 12045  0466  0020               	movlb	0	; select bank0
 12046  0467  00DA               	movwf	??_Flash_Memory_Initialization
 12047  0468  086C               	movf	_product,w
 12048  0469  3E0D               	addlw	13
 12049  046A  0086               	movwf	6
 12050  046B  3002               	movlw	2	; select bank4/5
 12051  046C  0087               	movwf	7
 12052  046D  085A               	movf	??_Flash_Memory_Initialization,w
 12053  046E  0081               	movwf	1
 12054                           
 12055                           ;MCU_B1.c: 919: product->Data[14] = Flash_Memory_Read(2);
 12056  046F  3002               	movlw	2
 12057  0470  3188  2000  3184   	fcall	_Flash_Memory_Read
 12058  0473  0020               	movlb	0	; select bank0
 12059  0474  00DA               	movwf	??_Flash_Memory_Initialization
 12060  0475  086C               	movf	_product,w
 12061  0476  3E0E               	addlw	14
 12062  0477  0086               	movwf	6
 12063  0478  3002               	movlw	2	; select bank4/5
 12064  0479  0087               	movwf	7
 12065  047A  085A               	movf	??_Flash_Memory_Initialization,w
 12066  047B  0081               	movwf	1
 12067                           
 12068                           ;MCU_B1.c: 925: i = getDimmerLights_ValueToPercent(((char)(70*0.8)));
 12069  047C  3038               	movlw	56
 12070  047D  3189  2139  3184   	fcall	_getDimmerLights_ValueToPercent
 12071  0480  0020               	movlb	0	; select bank0
 12072  0481  00DA               	movwf	??_Flash_Memory_Initialization
 12073  0482  085A               	movf	??_Flash_Memory_Initialization,w
 12074  0483  00DB               	movwf	Flash_Memory_Initialization@i
 12075                           
 12076                           ;MCU_B1.c: 926: product->Data[21] = i;
 12077  0484  085B               	movf	Flash_Memory_Initialization@i,w
 12078  0485  00DA               	movwf	??_Flash_Memory_Initialization
 12079  0486  086C               	movf	_product,w
 12080  0487  3E15               	addlw	21
 12081  0488  0086               	movwf	6
 12082  0489  3002               	movlw	2	; select bank4/5
 12083  048A  0087               	movwf	7
 12084  048B  085A               	movf	??_Flash_Memory_Initialization,w
 12085  048C  0081               	movwf	1
 12086                           
 12087                           ;MCU_B1.c: 927: product->Data[22] = i;
 12088  048D  085B               	movf	Flash_Memory_Initialization@i,w
 12089  048E  00DA               	movwf	??_Flash_Memory_Initialization
 12090  048F  086C               	movf	_product,w
 12091  0490  3E16               	addlw	22
 12092  0491  0086               	movwf	6
 12093  0492  3002               	movlw	2	; select bank4/5
 12094  0493  0087               	movwf	7
 12095  0494  085A               	movf	??_Flash_Memory_Initialization,w
 12096  0495  0081               	movwf	1
 12097                           
 12098                           ;MCU_B1.c: 928: product->Data[23] = i;
 12099  0496  085B               	movf	Flash_Memory_Initialization@i,w
 12100  0497  00DA               	movwf	??_Flash_Memory_Initialization
 12101  0498  086C               	movf	_product,w
 12102  0499  3E17               	addlw	23
 12103  049A  0086               	movwf	6
 12104  049B  3002               	movlw	2	; select bank4/5
 12105  049C  0087               	movwf	7
 12106  049D  085A               	movf	??_Flash_Memory_Initialization,w
 12107  049E  0081               	movwf	1
 12108                           
 12109                           ;MCU_B1.c: 930: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12110  049F  086C               	movf	_product,w
 12111  04A0  3E0C               	addlw	12
 12112  04A1  0086               	movwf	6
 12113  04A2  3002               	movlw	2	; select bank4/5
 12114  04A3  0087               	movwf	7
 12115  04A4  0801               	movf	1,w
 12116  04A5  3AFF               	xorlw	255
 12117  04A6  1D03               	skipz
 12118  04A7  0008               	return
 12119  04A8  086C               	movf	_product,w
 12120  04A9  3E0D               	addlw	13
 12121  04AA  0086               	movwf	6
 12122  04AB  3002               	movlw	2	; select bank4/5
 12123  04AC  0087               	movwf	7
 12124  04AD  0801               	movf	1,w
 12125  04AE  3AFF               	xorlw	255
 12126  04AF  1D03               	skipz
 12127  04B0  0008               	return
 12128  04B1  086C               	movf	_product,w
 12129  04B2  3E0E               	addlw	14
 12130  04B3  0086               	movwf	6
 12131  04B4  3002               	movlw	2	; select bank4/5
 12132  04B5  0087               	movwf	7
 12133  04B6  0801               	movf	1,w
 12134  04B7  3AFF               	xorlw	255
 12135  04B8  1D03               	skipz
 12136  04B9  0008               	return
 12137                           
 12138                           ;MCU_B1.c: 931: myMain.FirstOpen = 1;
 12139  04BA  0021               	movlb	1	; select bank1
 12140  04BB  15AE               	bsf	_myMain^(0+128),3
 12141                           
 12142                           ;MCU_B1.c: 932: myMain.First = 1;
 12143  04BC  16AE               	bsf	_myMain^(0+128),5
 12144                           
 12145                           ;MCU_B1.c: 933: }
 12146                           ;MCU_B1.c: 934: } else {
 12147  04BD  0008               	return
 12148  04BE                     l9195:	
 12149                           
 12150                           ;MCU_B1.c: 935: i = getDimmerLights_ValueToPercent(((char)(70*0.8)));
 12151  04BE  3038               	movlw	56
 12152  04BF  3189  2139  3184   	fcall	_getDimmerLights_ValueToPercent
 12153  04C2  0020               	movlb	0	; select bank0
 12154  04C3  00DA               	movwf	??_Flash_Memory_Initialization
 12155  04C4  085A               	movf	??_Flash_Memory_Initialization,w
 12156  04C5  00DB               	movwf	Flash_Memory_Initialization@i
 12157                           
 12158                           ;MCU_B1.c: 936: setMemory_Data(0, 0xff);
 12159  04C6  30FF               	movlw	255
 12160  04C7  00DA               	movwf	??_Flash_Memory_Initialization
 12161  04C8  085A               	movf	??_Flash_Memory_Initialization,w
 12162  04C9  00F2               	movwf	setMemory_Data@data
 12163  04CA  3000               	movlw	0
 12164  04CB  319D  25B3  3184   	fcall	_setMemory_Data
 12165                           
 12166                           ;MCU_B1.c: 937: setMemory_Data(1, 0xff);
 12167  04CE  30FF               	movlw	255
 12168  04CF  0020               	movlb	0	; select bank0
 12169  04D0  00DA               	movwf	??_Flash_Memory_Initialization
 12170  04D1  085A               	movf	??_Flash_Memory_Initialization,w
 12171  04D2  00F2               	movwf	setMemory_Data@data
 12172  04D3  3001               	movlw	1
 12173  04D4  319D  25B3  3184   	fcall	_setMemory_Data
 12174                           
 12175                           ;MCU_B1.c: 938: setMemory_Data(2, 0xff);
 12176  04D7  30FF               	movlw	255
 12177  04D8  0020               	movlb	0	; select bank0
 12178  04D9  00DA               	movwf	??_Flash_Memory_Initialization
 12179  04DA  085A               	movf	??_Flash_Memory_Initialization,w
 12180  04DB  00F2               	movwf	setMemory_Data@data
 12181  04DC  3002               	movlw	2
 12182  04DD  319D  25B3  3184   	fcall	_setMemory_Data
 12183                           
 12184                           ;MCU_B1.c: 939: setMemory_Data(3, 0xff);
 12185  04E0  30FF               	movlw	255
 12186  04E1  0020               	movlb	0	; select bank0
 12187  04E2  00DA               	movwf	??_Flash_Memory_Initialization
 12188  04E3  085A               	movf	??_Flash_Memory_Initialization,w
 12189  04E4  00F2               	movwf	setMemory_Data@data
 12190  04E5  3003               	movlw	3
 12191  04E6  319D  25B3  3184   	fcall	_setMemory_Data
 12192                           
 12193                           ;MCU_B1.c: 940: setMemory_Data(4, 0xff);
 12194  04E9  30FF               	movlw	255
 12195  04EA  0020               	movlb	0	; select bank0
 12196  04EB  00DA               	movwf	??_Flash_Memory_Initialization
 12197  04EC  085A               	movf	??_Flash_Memory_Initialization,w
 12198  04ED  00F2               	movwf	setMemory_Data@data
 12199  04EE  3004               	movlw	4
 12200  04EF  319D  25B3  3184   	fcall	_setMemory_Data
 12201                           
 12202                           ;MCU_B1.c: 941: setMemory_Data(5, 0xff);
 12203  04F2  30FF               	movlw	255
 12204  04F3  0020               	movlb	0	; select bank0
 12205  04F4  00DA               	movwf	??_Flash_Memory_Initialization
 12206  04F5  085A               	movf	??_Flash_Memory_Initialization,w
 12207  04F6  00F2               	movwf	setMemory_Data@data
 12208  04F7  3005               	movlw	5
 12209  04F8  319D  25B3  3184   	fcall	_setMemory_Data
 12210                           
 12211                           ;MCU_B1.c: 942: setMemory_Data(31, 0xaa);
 12212  04FB  30AA               	movlw	170
 12213  04FC  0020               	movlb	0	; select bank0
 12214  04FD  00DA               	movwf	??_Flash_Memory_Initialization
 12215  04FE  085A               	movf	??_Flash_Memory_Initialization,w
 12216  04FF  00F2               	movwf	setMemory_Data@data
 12217  0500  301F               	movlw	31
 12218  0501  319D  25B3  3184   	fcall	_setMemory_Data
 12219                           
 12220                           ;MCU_B1.c: 943: product->Data[21] = i;
 12221  0504  0020               	movlb	0	; select bank0
 12222  0505  085B               	movf	Flash_Memory_Initialization@i,w
 12223  0506  00DA               	movwf	??_Flash_Memory_Initialization
 12224  0507  086C               	movf	_product,w
 12225  0508  3E15               	addlw	21
 12226  0509  0086               	movwf	6
 12227  050A  3002               	movlw	2	; select bank4/5
 12228  050B  0087               	movwf	7
 12229  050C  085A               	movf	??_Flash_Memory_Initialization,w
 12230  050D  0081               	movwf	1
 12231                           
 12232                           ;MCU_B1.c: 944: product->Data[22] = i;
 12233  050E  085B               	movf	Flash_Memory_Initialization@i,w
 12234  050F  00DA               	movwf	??_Flash_Memory_Initialization
 12235  0510  086C               	movf	_product,w
 12236  0511  3E16               	addlw	22
 12237  0512  0086               	movwf	6
 12238  0513  3002               	movlw	2	; select bank4/5
 12239  0514  0087               	movwf	7
 12240  0515  085A               	movf	??_Flash_Memory_Initialization,w
 12241  0516  0081               	movwf	1
 12242                           
 12243                           ;MCU_B1.c: 945: product->Data[23] = i;
 12244  0517  085B               	movf	Flash_Memory_Initialization@i,w
 12245  0518  00DA               	movwf	??_Flash_Memory_Initialization
 12246  0519  086C               	movf	_product,w
 12247  051A  3E17               	addlw	23
 12248  051B  0086               	movwf	6
 12249  051C  3002               	movlw	2	; select bank4/5
 12250  051D  0087               	movwf	7
 12251  051E  085A               	movf	??_Flash_Memory_Initialization,w
 12252  051F  0081               	movwf	1
 12253                           
 12254                           ;MCU_B1.c: 946: GIE = 0;
 12255  0520  138B               	bcf	11,7	;volatile
 12256                           
 12257                           ;MCU_B1.c: 947: Flash_Memory_Write();
 12258  0521  3192  227E         	fcall	_Flash_Memory_Write
 12259                           
 12260                           ;MCU_B1.c: 948: GIE = 1;
 12261  0523  178B               	bsf	11,7	;volatile
 12262                           
 12263                           ;MCU_B1.c: 949: myMain.FirstOpen = 1;
 12264  0524  0021               	movlb	1	; select bank1
 12265  0525  15AE               	bsf	_myMain^(0+128),3
 12266                           
 12267                           ;MCU_B1.c: 950: myMain.First = 1;
 12268  0526  16AE               	bsf	_myMain^(0+128),5
 12269  0527  0008               	return
 12270  0528                     __end_of_Flash_Memory_Initialization:	
 12271                           
 12272                           	psect	text80
 12273  1DB3                     __ptext80:	
 12274 ;; *************** function _setMemory_Data *****************
 12275 ;; Defined at:
 12276 ;;		line 1065 in file "../src/MCU_B1.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  address         1    wreg     unsigned char 
 12279 ;;  data            1    2[COMMON] unsigned char 
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;  address         1    4[COMMON] unsigned char 
 12282 ;; Return value:  Size  Location     Type
 12283 ;;		None               void
 12284 ;; Registers used:
 12285 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12291 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;Total ram usage:        3 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    3
 12298 ;; This function calls:
 12299 ;;		Nothing
 12300 ;; This function is called by:
 12301 ;;		_Flash_Memory_Initialization
 12302 ;;		_Flash_Memory_Modify
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _setMemory_Data
 12308  1DB3                     _setMemory_Data:	
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12312                           ;setMemory_Data@address stored from wreg
 12313  1DB3  00F4               	movwf	setMemory_Data@address
 12314                           
 12315                           ;MCU_B1.c: 1066: Memory.Data[address] = data;
 12316  1DB4  0872               	movf	setMemory_Data@data,w
 12317  1DB5  00F3               	movwf	??_setMemory_Data
 12318  1DB6  0874               	movf	setMemory_Data@address,w
 12319  1DB7  3EBE               	addlw	_Memory& (0+255)
 12320  1DB8  0086               	movwf	6
 12321  1DB9  3001               	movlw	1	; select bank3/4
 12322  1DBA  0087               	movwf	7
 12323  1DBB  0873               	movf	??_setMemory_Data,w
 12324  1DBC  0081               	movwf	1
 12325  1DBD  0008               	return
 12326  1DBE                     __end_of_setMemory_Data:	
 12327                           
 12328                           	psect	text81
 12329  127E                     __ptext81:	
 12330 ;; *************** function _Flash_Memory_Write *****************
 12331 ;; Defined at:
 12332 ;;		line 998 in file "../src/MCU_B1.c"
 12333 ;; Parameters:    Size  Location     Type
 12334 ;;		None
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  i               1    3[COMMON] unsigned char 
 12337 ;; Return value:  Size  Location     Type
 12338 ;;		None               void
 12339 ;; Registers used:
 12340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12341 ;; Tracked objects:
 12342 ;;		On entry : 0/0
 12343 ;;		On exit  : 0/0
 12344 ;;		Unchanged: 0/0
 12345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;Total ram usage:        2 bytes
 12351 ;; Hardware stack levels used:    1
 12352 ;; Hardware stack levels required when called:    4
 12353 ;; This function calls:
 12354 ;;		_Flash_Memory_Unlock
 12355 ;; This function is called by:
 12356 ;;		_Flash_Memory_Initialization
 12357 ;;		_Flash_Memory_Modify
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           
 12362                           ;psect for function _Flash_Memory_Write
 12363  127E                     _Flash_Memory_Write:	
 12364                           
 12365                           ;MCU_B1.c: 999: char i = 0;
 12366                           
 12367                           ;incstack = 0
 12368                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12369  127E  01F3               	clrf	Flash_Memory_Write@i
 12370                           
 12371                           ;MCU_B1.c: 1000: CFGS = 0;
 12372  127F  0023               	movlb	3	; select bank3
 12373  1280  1315               	bcf	21,6	;volatile
 12374                           
 12375                           ;MCU_B1.c: 1001: PMADRH = 0x30;
 12376  1281  3030               	movlw	48
 12377  1282  0092               	movwf	18	;volatile
 12378                           
 12379                           ;MCU_B1.c: 1002: PMDATH = 0;
 12380  1283  0194               	clrf	20	;volatile
 12381                           
 12382                           ;MCU_B1.c: 1003: FREE = 0;
 12383  1284  1215               	bcf	21,4	;volatile
 12384                           
 12385                           ;MCU_B1.c: 1004: LWLO = 1;
 12386  1285  1695               	bsf	21,5	;volatile
 12387                           
 12388                           ;MCU_B1.c: 1005: WREN = 1;
 12389  1286  1515               	bsf	21,2	;volatile
 12390                           
 12391                           ;MCU_B1.c: 1006: for (i = 0; i < 32; i++) {
 12392  1287  01F3               	clrf	Flash_Memory_Write@i
 12393  1288  3020               	movlw	32
 12394  1289  0273               	subwf	Flash_Memory_Write@i,w
 12395  128A  1803               	btfsc	3,0
 12396  128B  2AA1               	goto	l1269
 12397  128C                     l6799:	
 12398                           
 12399                           ;MCU_B1.c: 1007: PMADRL = i;
 12400  128C  0873               	movf	Flash_Memory_Write@i,w
 12401  128D  0023               	movlb	3	; select bank3
 12402  128E  0091               	movwf	17	;volatile
 12403                           
 12404                           ;MCU_B1.c: 1008: PMDATL = Memory.Data[i];
 12405  128F  0873               	movf	Flash_Memory_Write@i,w
 12406  1290  3EBE               	addlw	_Memory& (0+255)
 12407  1291  0086               	movwf	6
 12408  1292  3001               	movlw	1	; select bank3/4
 12409  1293  0087               	movwf	7
 12410  1294  0801               	movf	1,w
 12411  1295  0093               	movwf	19	;volatile
 12412                           
 12413                           ;MCU_B1.c: 1009: Flash_Memory_Unlock();
 12414  1296  319D  254F  3192   	fcall	_Flash_Memory_Unlock
 12415  1299  3001               	movlw	1
 12416  129A  00F2               	movwf	??_Flash_Memory_Write
 12417  129B  0872               	movf	??_Flash_Memory_Write,w
 12418  129C  07F3               	addwf	Flash_Memory_Write@i,f
 12419  129D  3020               	movlw	32
 12420  129E  0273               	subwf	Flash_Memory_Write@i,w
 12421  129F  1C03               	skipc
 12422  12A0  2A8C               	goto	l6799
 12423  12A1                     l1269:	
 12424                           
 12425                           ;MCU_B1.c: 1010: }
 12426                           ;MCU_B1.c: 1011: LWLO = 0;
 12427  12A1  0023               	movlb	3	; select bank3
 12428  12A2  1295               	bcf	21,5	;volatile
 12429                           
 12430                           ;MCU_B1.c: 1012: Flash_Memory_Unlock();
 12431  12A3  319D  254F         	fcall	_Flash_Memory_Unlock
 12432                           
 12433                           ;MCU_B1.c: 1013: WREN = 0;
 12434  12A5  0023               	movlb	3	; select bank3
 12435  12A6  1115               	bcf	21,2	;volatile
 12436  12A7  0008               	return
 12437  12A8                     __end_of_Flash_Memory_Write:	
 12438                           
 12439                           	psect	text82
 12440  1D4F                     __ptext82:	
 12441 ;; *************** function _Flash_Memory_Unlock *****************
 12442 ;; Defined at:
 12443 ;;		line 977 in file "../src/MCU_B1.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;		None
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;		None
 12448 ;; Return value:  Size  Location     Type
 12449 ;;		None               void
 12450 ;; Registers used:
 12451 ;;		wreg
 12452 ;; Tracked objects:
 12453 ;;		On entry : 0/0
 12454 ;;		On exit  : 0/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;Total ram usage:        0 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; Hardware stack levels required when called:    3
 12464 ;; This function calls:
 12465 ;;		Nothing
 12466 ;; This function is called by:
 12467 ;;		_Flash_Memory_Write
 12468 ;;		_Flash_Memory_Erasing
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           
 12473                           ;psect for function _Flash_Memory_Unlock
 12474  1D4F                     _Flash_Memory_Unlock:	
 12475                           
 12476                           ;MCU_B1.c: 978: PMCON2 = 0x55;
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12480  1D4F  3055               	movlw	85
 12481  1D50  0023               	movlb	3	; select bank3
 12482  1D51  0096               	movwf	22	;volatile
 12483                           
 12484                           ;MCU_B1.c: 979: PMCON2 = 0xaa;
 12485  1D52  30AA               	movlw	170
 12486  1D53  0096               	movwf	22	;volatile
 12487                           
 12488                           ;MCU_B1.c: 980: WR = 1;
 12489  1D54  1495               	bsf	21,1	;volatile
 12490                           
 12491                           ;MCU_B1.c: 981: __nop();
 12492  1D55  0000               	nop
 12493                           
 12494                           ;MCU_B1.c: 982: __nop();
 12495  1D56  0000               	nop
 12496  1D57  0008               	return
 12497  1D58                     __end_of_Flash_Memory_Unlock:	
 12498                           
 12499                           	psect	text83
 12500  0800                     __ptext83:	
 12501 ;; *************** function _Flash_Memory_Read *****************
 12502 ;; Defined at:
 12503 ;;		line 986 in file "../src/MCU_B1.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  address         1    wreg     unsigned char 
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;  address         1    4[COMMON] unsigned char 
 12508 ;;  ret             1    5[COMMON] unsigned char 
 12509 ;;  i               1    3[COMMON] unsigned char 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      unsigned char 
 12512 ;; Registers used:
 12513 ;;		wreg, status,2
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;Total ram usage:        4 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    3
 12526 ;; This function calls:
 12527 ;;		Nothing
 12528 ;; This function is called by:
 12529 ;;		_Flash_Memory_Initialization
 12530 ;;		_Flash_Memory_Modify
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           
 12535                           ;psect for function _Flash_Memory_Read
 12536  0800                     _Flash_Memory_Read:	
 12537                           
 12538                           ;incstack = 0
 12539                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12540                           ;Flash_Memory_Read@address stored from wreg
 12541  0800  00F4               	movwf	Flash_Memory_Read@address
 12542                           
 12543                           ;MCU_B1.c: 987: char i = 0, ret = 0;
 12544  0801  01F3               	clrf	Flash_Memory_Read@i
 12545  0802  01F5               	clrf	Flash_Memory_Read@ret
 12546                           
 12547                           ;MCU_B1.c: 988: PMADRH = 0x30;
 12548  0803  3030               	movlw	48
 12549  0804  0023               	movlb	3	; select bank3
 12550  0805  0092               	movwf	18	;volatile
 12551                           
 12552                           ;MCU_B1.c: 989: PMADRL = address;
 12553  0806  0874               	movf	Flash_Memory_Read@address,w
 12554  0807  0091               	movwf	17	;volatile
 12555                           
 12556                           ;MCU_B1.c: 990: CFGS = 0;
 12557  0808  1315               	bcf	21,6	;volatile
 12558                           
 12559                           ;MCU_B1.c: 991: RD = 1;
 12560  0809  1415               	bsf	21,0	;volatile
 12561                           
 12562                           ;MCU_B1.c: 992: i = PMDATH;
 12563  080A  0814               	movf	20,w	;volatile
 12564  080B  00F2               	movwf	??_Flash_Memory_Read
 12565  080C  0872               	movf	??_Flash_Memory_Read,w
 12566  080D  00F3               	movwf	Flash_Memory_Read@i
 12567                           
 12568                           ;MCU_B1.c: 993: ret = PMDATL;
 12569  080E  0813               	movf	19,w	;volatile
 12570  080F  00F2               	movwf	??_Flash_Memory_Read
 12571  0810  0872               	movf	??_Flash_Memory_Read,w
 12572  0811  00F5               	movwf	Flash_Memory_Read@ret
 12573                           
 12574                           ;MCU_B1.c: 994: return ret;
 12575  0812  0875               	movf	Flash_Memory_Read@ret,w
 12576  0813  0008               	return
 12577  0814                     __end_of_Flash_Memory_Read:	
 12578                           
 12579                           	psect	text84
 12580  0528                     __ptext84:	
 12581 ;; *************** function _Exception_Main *****************
 12582 ;; Defined at:
 12583 ;;		line 506 in file "../src/Main_B1.c"
 12584 ;; Parameters:    Size  Location     Type
 12585 ;;		None
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;  i               2   10[BANK0 ] int 
 12588 ;;  i               2    8[BANK0 ] int 
 12589 ;;  lights          1   12[BANK0 ] unsigned char 
 12590 ;;  error           1    7[BANK0 ] unsigned char 
 12591 ;;  count           1    6[BANK0 ] unsigned char 
 12592 ;; Return value:  Size  Location     Type
 12593 ;;		None               void
 12594 ;; Registers used:
 12595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;Total ram usage:        8 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; Hardware stack levels required when called:    5
 12608 ;; This function calls:
 12609 ;;		_getDimmerLights_Line
 12610 ;;		_getDimmerLights_Status
 12611 ;;		_getMain_All_Error_Status
 12612 ;;		_getMain_All_LightsStatus
 12613 ;;		_setBuz
 12614 ;;		_setDimmerLights_SwOff
 12615 ;;		_setLED
 12616 ;; This function is called by:
 12617 ;;		_main
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _Exception_Main
 12623  0528                     _Exception_Main:	
 12624                           
 12625                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12629  0528  3000               	movlw	0
 12630  0529  3192  22D2  3185   	fcall	_getMain_All_Error_Status
 12631  052C  00F9               	movwf	??_Exception_Main
 12632  052D  0879               	movf	??_Exception_Main,w
 12633  052E  0020               	movlb	0	; select bank0
 12634  052F  00A7               	movwf	Exception_Main@error
 12635                           
 12636                           ;Main_B1.c: 508: char lights = 0, count = 1;
 12637  0530  01AC               	clrf	Exception_Main@lights
 12638  0531  01A6               	clrf	Exception_Main@count
 12639  0532  0AA6               	incf	Exception_Main@count,f
 12640                           
 12641                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
 12642  0533  0021               	movlb	1	; select bank1
 12643  0534  1DB9               	btfss	(_myMain^(0+128)+11),3
 12644  0535  2D44               	goto	l9487
 12645                           
 12646                           ;Main_B1.c: 510: if (error == 0) {
 12647  0536  0020               	movlb	0	; select bank0
 12648  0537  08A7               	movf	Exception_Main@error,f
 12649  0538  1D03               	skipz
 12650  0539  0008               	return
 12651                           
 12652                           ;Main_B1.c: 511: myMain.Error_Run = 0;
 12653  053A  0021               	movlb	1	; select bank1
 12654  053B  11B9               	bcf	(_myMain^(0+128)+11),3
 12655                           
 12656                           ;Main_B1.c: 516: setLED(99, 10);
 12657  053C  300A               	movlw	10
 12658  053D  00F9               	movwf	??_Exception_Main
 12659  053E  0879               	movf	??_Exception_Main,w
 12660  053F  00F4               	movwf	setLED@command
 12661  0540  3063               	movlw	99
 12662  0541  3194  24AB         	fcall	_setLED
 12663                           
 12664                           ;Main_B1.c: 518: }
 12665                           ;Main_B1.c: 519: } else {
 12666  0543  0008               	return
 12667  0544                     l9487:	
 12668                           
 12669                           ;Main_B1.c: 520: if (error != 0) {
 12670  0544  0020               	movlb	0	; select bank0
 12671  0545  0827               	movf	Exception_Main@error,w
 12672  0546  1903               	btfsc	3,2
 12673  0547  0008               	return
 12674                           
 12675                           ;Main_B1.c: 521: myMain.Error_Run = 1;
 12676  0548  0021               	movlb	1	; select bank1
 12677  0549  15B9               	bsf	(_myMain^(0+128)+11),3
 12678                           
 12679                           ;Main_B1.c: 524: setLED(99, 11);
 12680  054A  300B               	movlw	11
 12681  054B  00F9               	movwf	??_Exception_Main
 12682  054C  0879               	movf	??_Exception_Main,w
 12683  054D  00F4               	movwf	setLED@command
 12684  054E  3063               	movlw	99
 12685  054F  3194  24AB  3185   	fcall	_setLED
 12686                           
 12687                           ;Main_B1.c: 526: switch (error) {
 12688  0552  2DEC               	goto	l9535
 12689  0553                     l9493:	
 12690                           ;Main_B1.c: 527: case 2:
 12691                           
 12692                           
 12693                           ;Main_B1.c: 528: if (getMain_All_LightsStatus() == 1) {
 12694  0553  319D  2535  3185   	fcall	_getMain_All_LightsStatus
 12695  0556  3A01               	xorlw	1
 12696  0557  1D03               	skipz
 12697  0558  2D62               	goto	l9497
 12698                           
 12699                           ;Main_B1.c: 529: setBuz(10, 300);
 12700  0559  302C               	movlw	44
 12701  055A  0020               	movlb	0	; select bank0
 12702  055B  00A4               	movwf	setBuz@time
 12703  055C  3001               	movlw	1
 12704  055D  00A5               	movwf	setBuz@time+1
 12705  055E  300A               	movlw	10
 12706  055F  3196  269F  3185   	fcall	_setBuz
 12707  0562                     l9497:	
 12708                           
 12709                           ;Main_B1.c: 530: }
 12710                           ;Main_B1.c: 532: for (int i = 0; i < count; i++) {
 12711  0562  0020               	movlb	0	; select bank0
 12712  0563  01A8               	clrf	Exception_Main@i
 12713  0564  01A9               	clrf	Exception_Main@i+1
 12714  0565                     l9507:	
 12715  0565  0829               	movf	Exception_Main@i+1,w
 12716  0566  3A80               	xorlw	128
 12717  0567  00F9               	movwf	??_Exception_Main
 12718  0568  3080               	movlw	128
 12719  0569  0279               	subwf	??_Exception_Main,w
 12720  056A  1D03               	skipz
 12721  056B  2D6E               	goto	u10775
 12722  056C  0826               	movf	Exception_Main@count,w
 12723  056D  0228               	subwf	Exception_Main@i,w
 12724  056E                     u10775:	
 12725  056E  1803               	btfsc	3,0
 12726  056F  2D8F               	goto	u10770
 12727                           
 12728                           ;Main_B1.c: 534: if (getDimmerLights_Status(i + 1) == 1) {
 12729  0570  0020               	movlb	0	; select bank0
 12730  0571  0828               	movf	Exception_Main@i,w
 12731  0572  3E01               	addlw	1
 12732  0573  319E  262C  3185   	fcall	_getDimmerLights_Status
 12733  0576  3A01               	xorlw	1
 12734  0577  1D03               	skipz
 12735  0578  2D89               	goto	l9505
 12736                           
 12737                           ;Main_B1.c: 535: DimmerLights->SwFlag = 1;
 12738  0579  087B               	movf	_DimmerLights,w
 12739  057A  0086               	movwf	6
 12740  057B  3001               	movlw	1	; select bank2/3
 12741  057C  0087               	movwf	7
 12742  057D  1401               	bsf	1,0
 12743                           
 12744                           ;Main_B1.c: 536: DimmerLights->Status = 0;
 12745  057E  0A7B               	incf	_DimmerLights,w
 12746  057F  0086               	movwf	6
 12747  0580  3001               	movlw	1	; select bank2/3
 12748  0581  0087               	movwf	7
 12749  0582  1001               	bcf	1,0
 12750                           
 12751                           ;Main_B1.c: 537: setDimmerLights_SwOff(i + 1);
 12752  0583  0020               	movlb	0	; select bank0
 12753  0584  0828               	movf	Exception_Main@i,w
 12754  0585  3E01               	addlw	1
 12755  0586  3194  2403  3185   	fcall	_setDimmerLights_SwOff
 12756  0589                     l9505:	
 12757  0589  3001               	movlw	1
 12758  058A  0020               	movlb	0	; select bank0
 12759  058B  07A8               	addwf	Exception_Main@i,f
 12760  058C  3000               	movlw	0
 12761  058D  3DA9               	addwfc	Exception_Main@i+1,f
 12762  058E  2D65               	goto	l9507
 12763  058F                     u10770:	
 12764  058F  0020               	movlb	0	; select bank0
 12765  0590  0008               	return
 12766  0591                     l9509:	
 12767                           ;Main_B1.c: 541: case 3:
 12768                           
 12769                           ;Main_B1.c: 538: }
 12770                           ;Main_B1.c: 539: }
 12771                           ;Main_B1.c: 540: break;
 12772                           
 12773                           
 12774                           ;Main_B1.c: 543: setBuz(5, 300);
 12775  0591  302C               	movlw	44
 12776  0592  0020               	movlb	0	; select bank0
 12777  0593  00A4               	movwf	setBuz@time
 12778  0594  3001               	movlw	1
 12779  0595  00A5               	movwf	setBuz@time+1
 12780  0596  3005               	movlw	5
 12781  0597  3196  269F  3185   	fcall	_setBuz
 12782                           
 12783                           ;Main_B1.c: 544: lights = getDimmerLights_Line();
 12784  059A  3190  2066  3185   	fcall	_getDimmerLights_Line
 12785  059D  00F9               	movwf	??_Exception_Main
 12786  059E  0879               	movf	??_Exception_Main,w
 12787  059F  0020               	movlb	0	; select bank0
 12788  05A0  00AC               	movwf	Exception_Main@lights
 12789                           
 12790                           ;Main_B1.c: 545: if (lights == 0) {
 12791  05A1  08AC               	movf	Exception_Main@lights,f
 12792  05A2  1D03               	skipz
 12793  05A3  2DD2               	goto	l9527
 12794                           
 12795                           ;Main_B1.c: 547: for (int i = 0; i < count; i++) {
 12796  05A4  01AA               	clrf	Exception_Main@i_3487
 12797  05A5  01AB               	clrf	Exception_Main@i_3487+1
 12798  05A6                     l9525:	
 12799  05A6  082B               	movf	Exception_Main@i_3487+1,w
 12800  05A7  3A80               	xorlw	128
 12801  05A8  00F9               	movwf	??_Exception_Main
 12802  05A9  3080               	movlw	128
 12803  05AA  0279               	subwf	??_Exception_Main,w
 12804  05AB  1D03               	skipz
 12805  05AC  2DAF               	goto	u10805
 12806  05AD  0826               	movf	Exception_Main@count,w
 12807  05AE  022A               	subwf	Exception_Main@i_3487,w
 12808  05AF                     u10805:	
 12809  05AF  1803               	btfsc	3,0
 12810  05B0  2DD0               	goto	u10800
 12811                           
 12812                           ;Main_B1.c: 549: if (getDimmerLights_Status(i + 1) == 1) {
 12813  05B1  0020               	movlb	0	; select bank0
 12814  05B2  082A               	movf	Exception_Main@i_3487,w
 12815  05B3  3E01               	addlw	1
 12816  05B4  319E  262C  3185   	fcall	_getDimmerLights_Status
 12817  05B7  3A01               	xorlw	1
 12818  05B8  1D03               	skipz
 12819  05B9  2DCA               	goto	l9523
 12820                           
 12821                           ;Main_B1.c: 550: DimmerLights->SwFlag = 1;
 12822  05BA  087B               	movf	_DimmerLights,w
 12823  05BB  0086               	movwf	6
 12824  05BC  3001               	movlw	1	; select bank2/3
 12825  05BD  0087               	movwf	7
 12826  05BE  1401               	bsf	1,0
 12827                           
 12828                           ;Main_B1.c: 551: DimmerLights->Status = 0;
 12829  05BF  0A7B               	incf	_DimmerLights,w
 12830  05C0  0086               	movwf	6
 12831  05C1  3001               	movlw	1	; select bank2/3
 12832  05C2  0087               	movwf	7
 12833  05C3  1001               	bcf	1,0
 12834                           
 12835                           ;Main_B1.c: 552: setDimmerLights_SwOff(i + 1);
 12836  05C4  0020               	movlb	0	; select bank0
 12837  05C5  082A               	movf	Exception_Main@i_3487,w
 12838  05C6  3E01               	addlw	1
 12839  05C7  3194  2403  3185   	fcall	_setDimmerLights_SwOff
 12840  05CA                     l9523:	
 12841  05CA  3001               	movlw	1
 12842  05CB  0020               	movlb	0	; select bank0
 12843  05CC  07AA               	addwf	Exception_Main@i_3487,f
 12844  05CD  3000               	movlw	0
 12845  05CE  3DAB               	addwfc	Exception_Main@i_3487+1,f
 12846  05CF  2DA6               	goto	l9525
 12847  05D0                     u10800:	
 12848  05D0  0020               	movlb	0	; select bank0
 12849  05D1  0008               	return
 12850  05D2                     l9527:	
 12851                           ;Main_B1.c: 553: }
 12852                           ;Main_B1.c: 554: }
 12853                           ;Main_B1.c: 555: } else {
 12854                           
 12855                           
 12856                           ;Main_B1.c: 557: if (getDimmerLights_Status(lights) == 1) {
 12857  05D2  0020               	movlb	0	; select bank0
 12858  05D3  082C               	movf	Exception_Main@lights,w
 12859  05D4  319E  262C  3185   	fcall	_getDimmerLights_Status
 12860  05D7  3A01               	xorlw	1
 12861  05D8  1903               	btfsc	3,2
 12862  05D9  2DDC               	goto	l9529
 12863  05DA  0020               	movlb	0	; select bank0
 12864  05DB  0008               	return
 12865  05DC                     l9529:	
 12866                           
 12867                           ;Main_B1.c: 559: DimmerLights->SwFlag = 1;
 12868  05DC  087B               	movf	_DimmerLights,w
 12869  05DD  0086               	movwf	6
 12870  05DE  3001               	movlw	1	; select bank2/3
 12871  05DF  0087               	movwf	7
 12872  05E0  1401               	bsf	1,0
 12873                           
 12874                           ;Main_B1.c: 560: DimmerLights->Status = 0;
 12875  05E1  0A7B               	incf	_DimmerLights,w
 12876  05E2  0086               	movwf	6
 12877  05E3  3001               	movlw	1	; select bank2/3
 12878  05E4  0087               	movwf	7
 12879  05E5  1001               	bcf	1,0
 12880                           
 12881                           ;Main_B1.c: 561: setDimmerLights_SwOff(lights);
 12882  05E6  0020               	movlb	0	; select bank0
 12883  05E7  082C               	movf	Exception_Main@lights,w
 12884  05E8  3194  2403         	fcall	_setDimmerLights_SwOff
 12885  05EA  0020               	movlb	0	; select bank0
 12886  05EB  0008               	return
 12887  05EC                     l9535:	
 12888                           ;Main_B1.c: 565: }
 12889                           
 12890                           ;Main_B1.c: 562: }
 12891                           ;Main_B1.c: 563: }
 12892                           ;Main_B1.c: 564: break;
 12893                           
 12894  05EC  0020               	movlb	0	; select bank0
 12895  05ED  0827               	movf	Exception_Main@error,w
 12896                           
 12897                           ; Switch size 1, requested type "space"
 12898                           ; Number of cases is 2, Range of values is 2 to 3
 12899                           ; switch strategies available:
 12900                           ; Name         Instructions Cycles
 12901                           ; simple_byte            7     4 (average)
 12902                           ; direct_byte           13     9 (fixed)
 12903                           ; jumptable            263     9 (fixed)
 12904                           ;	Chosen strategy is simple_byte
 12905  05EE  3A02               	xorlw	2	; case 2
 12906  05EF  1903               	skipnz
 12907  05F0  2D53               	goto	l9493
 12908  05F1  3A01               	xorlw	1	; case 3
 12909  05F2  1903               	skipnz
 12910  05F3  2D91               	goto	l9509
 12911  05F4  2DF6               	goto	l1513
 12912  05F5  0008               	return
 12913  05F6                     l1513:	
 12914  05F6  0008               	return
 12915  05F7                     __end_of_Exception_Main:	
 12916                           
 12917                           	psect	text85
 12918  1066                     __ptext85:	
 12919 ;; *************** function _getDimmerLights_Line *****************
 12920 ;; Defined at:
 12921 ;;		line 959 in file "../src/Dimmer_B1.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;		None
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;  line            1    2[COMMON] unsigned char 
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      unsigned char 
 12928 ;; Registers used:
 12929 ;;		wreg, status,2
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;Total ram usage:        1 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    3
 12942 ;; This function calls:
 12943 ;;		Nothing
 12944 ;; This function is called by:
 12945 ;;		_Exception_Main
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           
 12950                           ;psect for function _getDimmerLights_Line
 12951  1066                     _getDimmerLights_Line:	
 12952                           
 12953                           ;Dimmer_B1.c: 960: char line = 0;
 12954                           
 12955                           ;incstack = 0
 12956                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12957  1066  01F2               	clrf	getDimmerLights_Line@line
 12958                           
 12959                           ;Dimmer_B1.c: 962: if (DimmerLights1.Line == 1) {
 12960  1067  0022               	movlb	2	; select bank2
 12961  1068  1CD9               	btfss	(_DimmerLights1^(0+256)+1),1
 12962  1069  286C               	goto	l7021
 12963                           
 12964                           ;Dimmer_B1.c: 963: line = 1;
 12965  106A  01F2               	clrf	getDimmerLights_Line@line
 12966  106B  0AF2               	incf	getDimmerLights_Line@line,f
 12967  106C                     l7021:	
 12968                           
 12969                           ;Dimmer_B1.c: 964: }
 12970                           ;Dimmer_B1.c: 976: return line;
 12971  106C  0872               	movf	getDimmerLights_Line@line,w
 12972  106D  0008               	return
 12973  106E                     __end_of_getDimmerLights_Line:	
 12974                           
 12975                           	psect	text86
 12976  111B                     __ptext86:	
 12977 ;; *************** function _DimmerLights_Main *****************
 12978 ;; Defined at:
 12979 ;;		line 732 in file "../src/Dimmer_B1.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;		None
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;		None
 12984 ;; Return value:  Size  Location     Type
 12985 ;;		None               void
 12986 ;; Registers used:
 12987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;Total ram usage:        0 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    8
 13000 ;; This function calls:
 13001 ;;		_getLoad_OK
 13002 ;;		_getMain_All_Error_Status
 13003 ;;		_getMain_All_LightsStatus
 13004 ;;		_setDimmerLights_Main
 13005 ;; This function is called by:
 13006 ;;		_main
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           
 13011                           ;psect for function _DimmerLights_Main
 13012  111B                     _DimmerLights_Main:	
 13013                           
 13014                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13015                           
 13016                           ;incstack = 0
 13017                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13018  111B  0022               	movlb	2	; select bank2
 13019  111C  1CA0               	btfss	_Dimmer^(0+256),1
 13020  111D  2933               	goto	l9171
 13021                           
 13022                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13023  111E  319D  2512  3191   	fcall	_getLoad_OK
 13024  1121  3A01               	xorlw	1
 13025  1122  1903               	skipnz
 13026  1123  2931               	goto	l786
 13027  1124  3000               	movlw	0
 13028  1125  3192  22D2  3191   	fcall	_getMain_All_Error_Status
 13029  1128  3800               	iorlw	0
 13030  1129  1D03               	skipz
 13031  112A  2931               	goto	l786
 13032  112B  319D  2535  3191   	fcall	_getMain_All_LightsStatus
 13033  112E  3800               	iorlw	0
 13034  112F  1D03               	skipz
 13035  1130  2933               	goto	l9171
 13036  1131                     l786:	
 13037                           
 13038                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13039  1131  0022               	movlb	2	; select bank2
 13040  1132  10A0               	bcf	_Dimmer^(0+256),1
 13041  1133                     l9171:	
 13042                           
 13043                           ;Dimmer_B1.c: 738: }
 13044                           ;Dimmer_B1.c: 739: }
 13045                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13046  1133  3001               	movlw	1
 13047  1134  3188  20D5         	fcall	_setDimmerLights_Main
 13048  1136  0008               	return
 13049  1137                     __end_of_DimmerLights_Main:	
 13050                           
 13051                           	psect	text87
 13052  08D5                     __ptext87:	
 13053 ;; *************** function _setDimmerLights_Main *****************
 13054 ;; Defined at:
 13055 ;;		line 757 in file "../src/Dimmer_B1.c"
 13056 ;; Parameters:    Size  Location     Type
 13057 ;;  lights          1    wreg     unsigned char 
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;  lights          1   73[BANK0 ] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;		None               void
 13062 ;; Registers used:
 13063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;Total ram usage:        1 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    7
 13076 ;; This function calls:
 13077 ;;		_DimmerLights_SelectPointer
 13078 ;;		_getDimmerLights_Allow_Condition
 13079 ;;		_getMain_All_LightsStatus
 13080 ;;		_setDimmerLights_Dimming
 13081 ;;		_setDimmerLights_OnOff
 13082 ;; This function is called by:
 13083 ;;		_DimmerLights_Main
 13084 ;; This function uses a non-reentrant model
 13085 ;;
 13086                           
 13087                           
 13088                           ;psect for function _setDimmerLights_Main
 13089  08D5                     _setDimmerLights_Main:	
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13093                           ;setDimmerLights_Main@lights stored from wreg
 13094  08D5  0020               	movlb	0	; select bank0
 13095  08D6  00E9               	movwf	setDimmerLights_Main@lights
 13096                           
 13097                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13098  08D7  0869               	movf	setDimmerLights_Main@lights,w
 13099  08D8  319D  256A  3188   	fcall	_DimmerLights_SelectPointer
 13100                           
 13101                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13102  08DB  087B               	movf	_DimmerLights,w
 13103  08DC  0086               	movwf	6
 13104  08DD  3001               	movlw	1	; select bank2/3
 13105  08DE  0087               	movwf	7
 13106  08DF  1C81               	btfss	1,1
 13107  08E0  2901               	goto	l8887
 13108                           
 13109                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13110  08E1  0020               	movlb	0	; select bank0
 13111  08E2  0869               	movf	setDimmerLights_Main@lights,w
 13112  08E3  319F  275C  3188   	fcall	_getDimmerLights_Allow_Condition
 13113  08E6  3800               	iorlw	0
 13114  08E7  1D03               	skipz
 13115  08E8  0008               	return
 13116                           
 13117                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13118  08E9  087B               	movf	_DimmerLights,w
 13119  08EA  0086               	movwf	6
 13120  08EB  3001               	movlw	1	; select bank2/3
 13121  08EC  0087               	movwf	7
 13122  08ED  1081               	bcf	1,1
 13123                           
 13124                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13125  08EE  087B               	movf	_DimmerLights,w
 13126  08EF  0086               	movwf	6
 13127  08F0  3001               	movlw	1	; select bank2/3
 13128  08F1  0087               	movwf	7
 13129  08F2  1D01               	btfss	1,2
 13130  08F3  28FB               	goto	l8885
 13131                           
 13132                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13133  08F4  0020               	movlb	0	; select bank0
 13134  08F5  01E5               	clrf	setDimmerLights_OnOff@command
 13135  08F6  0AE5               	incf	setDimmerLights_OnOff@command,f
 13136  08F7  0869               	movf	setDimmerLights_Main@lights,w
 13137  08F8  3186  26B7         	fcall	_setDimmerLights_OnOff
 13138                           
 13139                           ;Dimmer_B1.c: 765: } else {
 13140  08FA  0008               	return
 13141  08FB                     l8885:	
 13142                           
 13143                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13144  08FB  0020               	movlb	0	; select bank0
 13145  08FC  01E5               	clrf	setDimmerLights_OnOff@command
 13146  08FD  0869               	movf	setDimmerLights_Main@lights,w
 13147  08FE  3186  26B7         	fcall	_setDimmerLights_OnOff
 13148                           
 13149                           ;Dimmer_B1.c: 767: }
 13150                           ;Dimmer_B1.c: 768: }
 13151                           ;Dimmer_B1.c: 769: } else {
 13152  0900  0008               	return
 13153  0901                     l8887:	
 13154                           
 13155                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13156  0901  319D  2535  3188   	fcall	_getMain_All_LightsStatus
 13157  0904  3A01               	xorlw	1
 13158  0905  1D03               	skipz
 13159  0906  292D               	goto	l8899
 13160                           
 13161                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13162  0907  087B               	movf	_DimmerLights,w
 13163  0908  0086               	movwf	6
 13164  0909  3001               	movlw	1	; select bank2/3
 13165  090A  0087               	movwf	7
 13166  090B  1E01               	btfss	1,4
 13167  090C  0008               	return
 13168                           
 13169                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13170  090D  0020               	movlb	0	; select bank0
 13171  090E  0869               	movf	setDimmerLights_Main@lights,w
 13172  090F  319F  275C  3188   	fcall	_getDimmerLights_Allow_Condition
 13173  0912  3800               	iorlw	0
 13174  0913  1D03               	skipz
 13175  0914  0008               	return
 13176                           
 13177                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13178  0915  087B               	movf	_DimmerLights,w
 13179  0916  0086               	movwf	6
 13180  0917  3001               	movlw	1	; select bank2/3
 13181  0918  0087               	movwf	7
 13182  0919  1201               	bcf	1,4
 13183                           
 13184                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13185  091A  087B               	movf	_DimmerLights,w
 13186  091B  0086               	movwf	6
 13187  091C  3001               	movlw	1	; select bank2/3
 13188  091D  0087               	movwf	7
 13189  091E  1E81               	btfss	1,5
 13190  091F  2927               	goto	l8897
 13191                           
 13192                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13193  0920  0020               	movlb	0	; select bank0
 13194  0921  01E2               	clrf	setDimmerLights_Dimming@status
 13195  0922  0AE2               	incf	setDimmerLights_Dimming@status,f
 13196  0923  0869               	movf	setDimmerLights_Main@lights,w
 13197  0924  3195  25FC         	fcall	_setDimmerLights_Dimming
 13198                           
 13199                           ;Dimmer_B1.c: 776: } else {
 13200  0926  0008               	return
 13201  0927                     l8897:	
 13202                           
 13203                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13204  0927  0020               	movlb	0	; select bank0
 13205  0928  01E2               	clrf	setDimmerLights_Dimming@status
 13206  0929  0869               	movf	setDimmerLights_Main@lights,w
 13207  092A  3195  25FC         	fcall	_setDimmerLights_Dimming
 13208                           
 13209                           ;Dimmer_B1.c: 778: }
 13210                           ;Dimmer_B1.c: 779: }
 13211                           ;Dimmer_B1.c: 780: }
 13212                           ;Dimmer_B1.c: 781: } else {
 13213  092C  0008               	return
 13214  092D                     l8899:	
 13215                           
 13216                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13217  092D  087B               	movf	_DimmerLights,w
 13218  092E  0086               	movwf	6
 13219  092F  3001               	movlw	1	; select bank2/3
 13220  0930  0087               	movwf	7
 13221  0931  1E01               	btfss	1,4
 13222  0932  0008               	return
 13223                           
 13224                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13225  0933  087B               	movf	_DimmerLights,w
 13226  0934  0086               	movwf	6
 13227  0935  3001               	movlw	1	; select bank2/3
 13228  0936  0087               	movwf	7
 13229  0937  1201               	bcf	1,4
 13230  0938  0008               	return
 13231  0939                     __end_of_setDimmerLights_Main:	
 13232                           
 13233                           	psect	text88
 13234  06B7                     __ptext88:	
 13235 ;; *************** function _setDimmerLights_OnOff *****************
 13236 ;; Defined at:
 13237 ;;		line 791 in file "../src/Dimmer_B1.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;  lights          1    wreg     unsigned char 
 13240 ;;  command         1   69[BANK0 ] unsigned char 
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  lights          1   72[BANK0 ] unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;		None               void
 13245 ;; Registers used:
 13246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        4 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    6
 13259 ;; This function calls:
 13260 ;;		_getCmd_Status
 13261 ;;		_getDelayOff_GO
 13262 ;;		_getDimmerLights_PercentToValue
 13263 ;;		_getDimmerLights_ValueToPercent
 13264 ;;		_getMain_All_LightsStatus
 13265 ;;		_setCmd_Status
 13266 ;;		_setDelayOff_GO
 13267 ;;		_setDimmerIntr_ControlStatus
 13268 ;;		_setDimmerIntr_DimmingValue
 13269 ;;		_setDimmerIntr_Dimming_RF
 13270 ;;		_setDimmerIntr_MaxmumValue
 13271 ;;		_setDimmerLights_Line
 13272 ;;		_setLED
 13273 ;;		_setProductData
 13274 ;;		_setRF_DimmerLights
 13275 ;;		_setTxData
 13276 ;; This function is called by:
 13277 ;;		_setDimmerLights_Main
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _setDimmerLights_OnOff
 13283  06B7                     _setDimmerLights_OnOff:	
 13284                           
 13285                           ;incstack = 0
 13286                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13287                           ;setDimmerLights_OnOff@lights stored from wreg
 13288  06B7  0020               	movlb	0	; select bank0
 13289  06B8  00E8               	movwf	setDimmerLights_OnOff@lights
 13290                           
 13291                           ;Dimmer_B1.c: 793: if (command == 1) {
 13292  06B9  0865               	movf	setDimmerLights_OnOff@command,w
 13293  06BA  3A01               	xorlw	1
 13294  06BB  1D03               	skipz
 13295  06BC  2F18               	goto	l8717
 13296                           
 13297                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13298  06BD  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13299  06BE  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13300  06BF  0868               	movf	setDimmerLights_OnOff@lights,w
 13301  06C0  319F  2797  3186   	fcall	_setDimmerIntr_ControlStatus
 13302                           
 13303                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13304  06C3  01F4               	clrf	setLED@command
 13305  06C4  0020               	movlb	0	; select bank0
 13306  06C5  0868               	movf	setDimmerLights_OnOff@lights,w
 13307  06C6  3194  24AB  3186   	fcall	_setLED
 13308                           
 13309                           ;Dimmer_B1.c: 796: ;;
 13310                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13311  06C9  0022               	movlb	2	; select bank2
 13312  06CA  1520               	bsf	_Dimmer^(0+256),2
 13313                           
 13314                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13315  06CB  0020               	movlb	0	; select bank0
 13316  06CC  0868               	movf	setDimmerLights_OnOff@lights,w
 13317  06CD  319E  2611  3186   	fcall	_setDimmerLights_Line
 13318                           
 13319                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(70*0.8)));
 13320  06D0  3038               	movlw	56
 13321  06D1  0020               	movlb	0	; select bank0
 13322  06D2  00E6               	movwf	??_setDimmerLights_OnOff
 13323  06D3  0866               	movf	??_setDimmerLights_OnOff,w
 13324  06D4  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13325  06D5  0868               	movf	setDimmerLights_OnOff@lights,w
 13326  06D6  319D  259D  3186   	fcall	_setDimmerIntr_DimmingValue
 13327                           
 13328                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13329  06D9  0A7B               	incf	_DimmerLights,w
 13330  06DA  0086               	movwf	6
 13331  06DB  3001               	movlw	1	; select bank2/3
 13332  06DC  0087               	movwf	7
 13333  06DD  1F01               	btfss	1,6
 13334  06DE  2F01               	goto	l8713
 13335                           
 13336                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13337  06DF  0A7B               	incf	_DimmerLights,w
 13338  06E0  0086               	movwf	6
 13339  06E1  3001               	movlw	1	; select bank2/3
 13340  06E2  0087               	movwf	7
 13341  06E3  1301               	bcf	1,6
 13342                           
 13343                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13344  06E4  0020               	movlb	0	; select bank0
 13345  06E5  0868               	movf	setDimmerLights_OnOff@lights,w
 13346  06E6  3E14               	addlw	20
 13347  06E7  076C               	addwf	_product,w
 13348  06E8  00E6               	movwf	??_setDimmerLights_OnOff
 13349  06E9  0866               	movf	??_setDimmerLights_OnOff,w
 13350  06EA  0086               	movwf	6
 13351  06EB  3002               	movlw	2	; select bank4/5
 13352  06EC  0087               	movwf	7
 13353  06ED  0801               	movf	1,w
 13354  06EE  3189  219E  3186   	fcall	_getDimmerLights_PercentToValue
 13355  06F1  0020               	movlb	0	; select bank0
 13356  06F2  00E7               	movwf	??_setDimmerLights_OnOff+1
 13357  06F3  0867               	movf	??_setDimmerLights_OnOff+1,w
 13358  06F4  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13359  06F5  0868               	movf	setDimmerLights_OnOff@lights,w
 13360  06F6  319D  25E0  3186   	fcall	_setDimmerIntr_MaxmumValue
 13361                           
 13362                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13363  06F9  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13364  06FA  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13365  06FB  0020               	movlb	0	; select bank0
 13366  06FC  0868               	movf	setDimmerLights_OnOff@lights,w
 13367  06FD  319F  27AC  3186   	fcall	_setDimmerIntr_Dimming_RF
 13368                           
 13369                           ;Dimmer_B1.c: 810: } else {
 13370  0700  2F42               	goto	l8733
 13371  0701                     l8713:	
 13372                           
 13373                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(70*0.8)));
 13374  0701  3038               	movlw	56
 13375  0702  0020               	movlb	0	; select bank0
 13376  0703  00E6               	movwf	??_setDimmerLights_OnOff
 13377  0704  0866               	movf	??_setDimmerLights_OnOff,w
 13378  0705  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13379  0706  0868               	movf	setDimmerLights_OnOff@lights,w
 13380  0707  319D  25E0  3186   	fcall	_setDimmerIntr_MaxmumValue
 13381                           
 13382                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          70*0.8))));
 13383  070A  3038               	movlw	56
 13384  070B  3189  2139  3186   	fcall	_getDimmerLights_ValueToPercent
 13385  070E  0020               	movlb	0	; select bank0
 13386  070F  00E6               	movwf	??_setDimmerLights_OnOff
 13387  0710  0866               	movf	??_setDimmerLights_OnOff,w
 13388  0711  00DA               	movwf	setProductData@value
 13389  0712  0868               	movf	setDimmerLights_OnOff@lights,w
 13390  0713  3E14               	addlw	20
 13391  0714  319D  25D4  3186   	fcall	_setProductData
 13392                           
 13393                           ;Dimmer_B1.c: 813: }
 13394                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13395  0717  2F42               	goto	l8733
 13396  0718                     l8717:	
 13397  0718  0020               	movlb	0	; select bank0
 13398  0719  08E5               	movf	setDimmerLights_OnOff@command,f
 13399  071A  1D03               	skipz
 13400  071B  2F42               	goto	l8733
 13401                           
 13402                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13403  071C  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13404  071D  0868               	movf	setDimmerLights_OnOff@lights,w
 13405  071E  319F  2797  3186   	fcall	_setDimmerIntr_ControlStatus
 13406                           
 13407                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13408  0721  01F4               	clrf	setLED@command
 13409  0722  0AF4               	incf	setLED@command,f
 13410  0723  0020               	movlb	0	; select bank0
 13411  0724  0868               	movf	setDimmerLights_OnOff@lights,w
 13412  0725  3194  24AB  3186   	fcall	_setLED
 13413                           
 13414                           ;Dimmer_B1.c: 818: ;;
 13415                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13416  0728  0020               	movlb	0	; select bank0
 13417  0729  0868               	movf	setDimmerLights_OnOff@lights,w
 13418  072A  319E  2648  3186   	fcall	_getDelayOff_GO
 13419  072D  3A01               	xorlw	1
 13420  072E  1D03               	skipz
 13421  072F  2F37               	goto	l8727
 13422                           
 13423                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13424  0730  0020               	movlb	0	; select bank0
 13425  0731  01DD               	clrf	setDelayOff_GO@command
 13426  0732  01DE               	clrf	setDelayOff_GO@value
 13427  0733  0868               	movf	setDimmerLights_OnOff@lights,w
 13428  0734  3187  276F  3186   	fcall	_setDelayOff_GO
 13429  0737                     l8727:	
 13430                           
 13431                           ;Dimmer_B1.c: 823: }
 13432                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13433  0737  0020               	movlb	0	; select bank0
 13434  0738  0868               	movf	setDimmerLights_OnOff@lights,w
 13435  0739  3A01               	xorlw	1
 13436  073A  1903               	btfsc	3,2
 13437                           
 13438                           ;Dimmer_B1.c: 829: RB1 = 0;
 13439  073B  108D               	bcf	13,1	;volatile
 13440                           
 13441                           ;Dimmer_B1.c: 831: }
 13442                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13443  073C  0022               	movlb	2	; select bank2
 13444  073D  1120               	bcf	_Dimmer^(0+256),2
 13445                           
 13446                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13447  073E  3000               	movlw	0
 13448  073F  319E  2611  3186   	fcall	_setDimmerLights_Line
 13449  0742                     l8733:	
 13450                           
 13451                           ;Dimmer_B1.c: 844: }
 13452                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13453  0742  0020               	movlb	0	; select bank0
 13454  0743  0865               	movf	setDimmerLights_OnOff@command,w
 13455  0744  00E6               	movwf	??_setDimmerLights_OnOff
 13456  0745  0866               	movf	??_setDimmerLights_OnOff,w
 13457  0746  00DD               	movwf	setRF_DimmerLights@on
 13458  0747  0868               	movf	setDimmerLights_OnOff@lights,w
 13459  0748  3197  27A1  3186   	fcall	_setRF_DimmerLights
 13460                           
 13461                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13462  074B  3001               	movlw	1
 13463  074C  319E  2694  3186   	fcall	_getCmd_Status
 13464  074F  3A01               	xorlw	1
 13465  0750  1D03               	skipz
 13466  0751  2F6C               	goto	l8747
 13467                           
 13468                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13469  0752  319D  2535  3186   	fcall	_getMain_All_LightsStatus
 13470  0755  3800               	iorlw	0
 13471  0756  1D03               	skipz
 13472  0757  0008               	return
 13473                           
 13474                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13475  0758  01F2               	clrf	setCmd_Status@cmd
 13476  0759  3001               	movlw	1
 13477  075A  319F  2782  3186   	fcall	_setCmd_Status
 13478                           
 13479                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13480  075D  0020               	movlb	0	; select bank0
 13481  075E  01DA               	clrf	setProductData@value
 13482  075F  300B               	movlw	11
 13483  0760  319D  25D4  3186   	fcall	_setProductData
 13484                           
 13485                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13486  0763  0020               	movlb	0	; select bank0
 13487  0764  01DA               	clrf	setProductData@value
 13488  0765  3011               	movlw	17
 13489  0766  319D  25D4  3186   	fcall	_setProductData
 13490                           
 13491                           ;Dimmer_B1.c: 854: setTxData();
 13492  0769  318F  274A         	fcall	_setTxData
 13493                           
 13494                           ;Dimmer_B1.c: 855: }
 13495                           ;Dimmer_B1.c: 856: } else {
 13496  076B  0008               	return
 13497  076C                     l8747:	
 13498                           
 13499                           ;Dimmer_B1.c: 857: setTxData();
 13500  076C  318F  274A         	fcall	_setTxData
 13501  076E  0008               	return
 13502  076F                     __end_of_setDimmerLights_OnOff:	
 13503                           
 13504                           	psect	text89
 13505  14AB                     __ptext89:	
 13506 ;; *************** function _setLED *****************
 13507 ;; Defined at:
 13508 ;;		line 76 in file "../src/LED_B1.c"
 13509 ;; Parameters:    Size  Location     Type
 13510 ;;  led             1    wreg     unsigned char 
 13511 ;;  command         1    4[COMMON] unsigned char 
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;  led             1    5[COMMON] unsigned char 
 13514 ;; Return value:  Size  Location     Type
 13515 ;;		None               void
 13516 ;; Registers used:
 13517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13518 ;; Tracked objects:
 13519 ;;		On entry : 0/0
 13520 ;;		On exit  : 0/0
 13521 ;;		Unchanged: 0/0
 13522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13523 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;Total ram usage:        2 bytes
 13528 ;; Hardware stack levels used:    1
 13529 ;; Hardware stack levels required when called:    4
 13530 ;; This function calls:
 13531 ;;		_LedPointSelect
 13532 ;; This function is called by:
 13533 ;;		_setDimmerLights_OnOff
 13534 ;;		_setLED_Initialization
 13535 ;;		_Exception_Main
 13536 ;;		_setSw_Initialization
 13537 ;; This function uses a non-reentrant model
 13538 ;;
 13539                           
 13540                           
 13541                           ;psect for function _setLED
 13542  14AB                     _setLED:	
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13546                           ;setLED@led stored from wreg
 13547  14AB  00F5               	movwf	setLED@led
 13548                           
 13549                           ;LED_B1.c: 77: LedPointSelect(led);
 13550  14AC  0875               	movf	setLED@led,w
 13551  14AD  319D  25A8  3194   	fcall	_LedPointSelect
 13552                           
 13553                           ;LED_B1.c: 78: if (command == 0) {
 13554  14B0  08F4               	movf	setLED@command,f
 13555  14B1  1D03               	skipz
 13556  14B2  2CB9               	goto	l6453
 13557                           
 13558                           ;LED_B1.c: 107: if (led == 99) {
 13559  14B3  0875               	movf	setLED@led,w
 13560  14B4  3A63               	xorlw	99
 13561  14B5  1D03               	skipz
 13562  14B6  2CB9               	goto	l6453
 13563                           
 13564                           ;LED_B1.c: 111: RB5 = 1;
 13565  14B7  0020               	movlb	0	; select bank0
 13566  14B8  168D               	bsf	13,5	;volatile
 13567  14B9                     l6453:	
 13568                           
 13569                           ;LED_B1.c: 113: }
 13570                           ;LED_B1.c: 115: }
 13571                           ;LED_B1.c: 116: if (command == 1) {
 13572  14B9  0874               	movf	setLED@command,w
 13573  14BA  3A01               	xorlw	1
 13574  14BB  1D03               	skipz
 13575  14BC  2CC3               	goto	l6459
 13576                           
 13577                           ;LED_B1.c: 145: if (led == 99) {
 13578  14BD  0875               	movf	setLED@led,w
 13579  14BE  3A63               	xorlw	99
 13580  14BF  1D03               	skipz
 13581  14C0  2CC3               	goto	l6459
 13582                           
 13583                           ;LED_B1.c: 149: RB5 = 0;
 13584  14C1  0020               	movlb	0	; select bank0
 13585  14C2  128D               	bcf	13,5	;volatile
 13586  14C3                     l6459:	
 13587                           
 13588                           ;LED_B1.c: 151: }
 13589                           ;LED_B1.c: 153: }
 13590                           ;LED_B1.c: 154: if (command == 10) {
 13591  14C3  0874               	movf	setLED@command,w
 13592  14C4  3A0A               	xorlw	10
 13593  14C5  1D03               	skipz
 13594  14C6  2CDA               	goto	l6467
 13595                           
 13596                           ;LED_B1.c: 155: LED->GO = 0;
 13597  14C7  0021               	movlb	1	; select bank1
 13598  14C8  084C               	movf	_LED^(0+128),w
 13599  14C9  0086               	movwf	6
 13600  14CA  3001               	movlw	1	; select bank2/3
 13601  14CB  0087               	movwf	7
 13602  14CC  1081               	bcf	1,1
 13603                           
 13604                           ;LED_B1.c: 156: LED->Time = 0;
 13605  14CD  0A4C               	incf	_LED^(0+128),w
 13606  14CE  0086               	movwf	6
 13607  14CF  3001               	movlw	1	; select bank2/3
 13608  14D0  0087               	movwf	7
 13609  14D1  3000               	movlw	0
 13610  14D2  3FC0               	movwi [0]fsr1
 13611  14D3  3FC1               	movwi [1]fsr1
 13612                           
 13613                           ;LED_B1.c: 185: if (led == 99) {
 13614  14D4  0875               	movf	setLED@led,w
 13615  14D5  3A63               	xorlw	99
 13616  14D6  1D03               	skipz
 13617  14D7  2CDA               	goto	l6467
 13618                           
 13619                           ;LED_B1.c: 189: RB5 = 1;
 13620  14D8  0020               	movlb	0	; select bank0
 13621  14D9  168D               	bsf	13,5	;volatile
 13622  14DA                     l6467:	
 13623                           
 13624                           ;LED_B1.c: 191: }
 13625                           ;LED_B1.c: 193: }
 13626                           ;LED_B1.c: 194: if (command == 11) {
 13627  14DA  0874               	movf	setLED@command,w
 13628  14DB  3A0B               	xorlw	11
 13629  14DC  1D03               	skipz
 13630  14DD  0008               	return
 13631                           
 13632                           ;LED_B1.c: 195: LED->GO = 1;
 13633  14DE  0021               	movlb	1	; select bank1
 13634  14DF  084C               	movf	_LED^(0+128),w
 13635  14E0  0086               	movwf	6
 13636  14E1  3001               	movlw	1	; select bank2/3
 13637  14E2  0087               	movwf	7
 13638  14E3  1481               	bsf	1,1
 13639  14E4  0008               	return
 13640  14E5                     __end_of_setLED:	
 13641                           
 13642                           	psect	text90
 13643  1DA8                     __ptext90:	
 13644 ;; *************** function _LedPointSelect *****************
 13645 ;; Defined at:
 13646 ;;		line 7 in file "../src/LED_B1.c"
 13647 ;; Parameters:    Size  Location     Type
 13648 ;;  led             1    wreg     unsigned char 
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;  led             1    3[COMMON] unsigned char 
 13651 ;; Return value:  Size  Location     Type
 13652 ;;		None               void
 13653 ;; Registers used:
 13654 ;;		wreg
 13655 ;; Tracked objects:
 13656 ;;		On entry : 0/0
 13657 ;;		On exit  : 0/0
 13658 ;;		Unchanged: 0/0
 13659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;Total ram usage:        2 bytes
 13665 ;; Hardware stack levels used:    1
 13666 ;; Hardware stack levels required when called:    3
 13667 ;; This function calls:
 13668 ;;		Nothing
 13669 ;; This function is called by:
 13670 ;;		_setLED_Initialization
 13671 ;;		_setLED
 13672 ;;		_setLED_Main
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function _LedPointSelect
 13678  1DA8                     _LedPointSelect:	
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _LedPointSelect: [wreg]
 13682                           ;LedPointSelect@led stored from wreg
 13683  1DA8  00F3               	movwf	LedPointSelect@led
 13684                           
 13685                           ;LED_B1.c: 24: if (led == 99) {
 13686  1DA9  0873               	movf	LedPointSelect@led,w
 13687  1DAA  3A63               	xorlw	99
 13688  1DAB  1D03               	skipz
 13689  1DAC  0008               	return
 13690                           
 13691                           ;LED_B1.c: 25: LED = &VarErrLED;
 13692  1DAD  3065               	movlw	_VarErrLED& (0+255)
 13693  1DAE  00F2               	movwf	??_LedPointSelect
 13694  1DAF  0872               	movf	??_LedPointSelect,w
 13695  1DB0  0021               	movlb	1	; select bank1
 13696  1DB1  00CC               	movwf	_LED^(0+128)
 13697  1DB2  0008               	return
 13698  1DB3                     __end_of_LedPointSelect:	
 13699                           
 13700                           	psect	text91
 13701  1FAC                     __ptext91:	
 13702 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 13703 ;; Defined at:
 13704 ;;		line 180 in file "../src/Dimmer_B1.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;  lights          1    wreg     unsigned char 
 13707 ;;  command         1    2[COMMON] unsigned char 
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;  lights          1    4[COMMON] unsigned char 
 13710 ;; Return value:  Size  Location     Type
 13711 ;;		None               void
 13712 ;; Registers used:
 13713 ;;		wreg, status,2, status,0
 13714 ;; Tracked objects:
 13715 ;;		On entry : 0/0
 13716 ;;		On exit  : 0/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:        3 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    3
 13726 ;; This function calls:
 13727 ;;		Nothing
 13728 ;; This function is called by:
 13729 ;;		_setDimmerLights_OnOff
 13730 ;;		_setRFSW_AdjControl
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _setDimmerIntr_Dimming_RF
 13736  1FAC                     _setDimmerIntr_Dimming_RF:	
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 13740                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 13741  1FAC  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 13742                           
 13743                           ;Dimmer_B1.c: 182: if (lights == 1) {
 13744  1FAD  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 13745  1FAE  3A01               	xorlw	1
 13746  1FAF  1D03               	skipz
 13747  1FB0  0008               	return
 13748                           
 13749                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 13750  1FB1  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 13751  1FB2  3A01               	xorlw	1
 13752  1FB3  3000               	movlw	0
 13753  1FB4  1903               	skipnz
 13754  1FB5  3001               	movlw	1
 13755  1FB6  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 13756  1FB7  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 13757  1FB8  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 13758  1FB9  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 13759  1FBA  0021               	movlb	1	; select bank1
 13760  1FBB  0868               	movf	_DimmerIntr1^(0+128),w
 13761  1FBC  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 13762  1FBD  39BF               	andlw	-65
 13763  1FBE  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 13764  1FBF  00E8               	movwf	_DimmerIntr1^(0+128)
 13765  1FC0  0008               	return
 13766  1FC1                     __end_of_setDimmerIntr_Dimming_RF:	
 13767                           
 13768                           	psect	text92
 13769  1D9D                     __ptext92:	
 13770 ;; *************** function _setDimmerIntr_DimmingValue *****************
 13771 ;; Defined at:
 13772 ;;		line 48 in file "../src/Dimmer_B1.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  lights          1    wreg     unsigned char 
 13775 ;;  value           1    2[COMMON] unsigned char 
 13776 ;; Auto vars:     Size  Location     Type
 13777 ;;  lights          1    4[COMMON] unsigned char 
 13778 ;; Return value:  Size  Location     Type
 13779 ;;		None               void
 13780 ;; Registers used:
 13781 ;;		wreg
 13782 ;; Tracked objects:
 13783 ;;		On entry : 0/0
 13784 ;;		On exit  : 0/0
 13785 ;;		Unchanged: 0/0
 13786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;Total ram usage:        3 bytes
 13792 ;; Hardware stack levels used:    1
 13793 ;; Hardware stack levels required when called:    3
 13794 ;; This function calls:
 13795 ;;		Nothing
 13796 ;; This function is called by:
 13797 ;;		_setDimmerLights_OnOff
 13798 ;; This function uses a non-reentrant model
 13799 ;;
 13800                           
 13801                           
 13802                           ;psect for function _setDimmerIntr_DimmingValue
 13803  1D9D                     _setDimmerIntr_DimmingValue:	
 13804                           
 13805                           ;incstack = 0
 13806                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 13807                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 13808  1D9D  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 13809                           
 13810                           ;Dimmer_B1.c: 50: if (lights == 1) {
 13811  1D9E  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 13812  1D9F  3A01               	xorlw	1
 13813  1DA0  1D03               	skipz
 13814  1DA1  0008               	return
 13815                           
 13816                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 13817  1DA2  0872               	movf	setDimmerIntr_DimmingValue@value,w
 13818  1DA3  00F3               	movwf	??_setDimmerIntr_DimmingValue
 13819  1DA4  0873               	movf	??_setDimmerIntr_DimmingValue,w
 13820  1DA5  0021               	movlb	1	; select bank1
 13821  1DA6  00EC               	movwf	(_DimmerIntr1^(0+128)+4)
 13822  1DA7  0008               	return
 13823  1DA8                     __end_of_setDimmerIntr_DimmingValue:	
 13824                           
 13825                           	psect	text93
 13826  1F97                     __ptext93:	
 13827 ;; *************** function _setDimmerIntr_ControlStatus *****************
 13828 ;; Defined at:
 13829 ;;		line 30 in file "../src/Dimmer_B1.c"
 13830 ;; Parameters:    Size  Location     Type
 13831 ;;  lights          1    wreg     unsigned char 
 13832 ;;  command         1    2[COMMON] unsigned char 
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;  lights          1    4[COMMON] unsigned char 
 13835 ;; Return value:  Size  Location     Type
 13836 ;;		None               void
 13837 ;; Registers used:
 13838 ;;		wreg, status,2, status,0
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13844 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;Total ram usage:        3 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    3
 13851 ;; This function calls:
 13852 ;;		Nothing
 13853 ;; This function is called by:
 13854 ;;		_setDimmerLights_OnOff
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           
 13859                           ;psect for function _setDimmerIntr_ControlStatus
 13860  1F97                     _setDimmerIntr_ControlStatus:	
 13861                           
 13862                           ;incstack = 0
 13863                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 13864                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 13865  1F97  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 13866                           
 13867                           ;Dimmer_B1.c: 32: if (lights == 1) {
 13868  1F98  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 13869  1F99  3A01               	xorlw	1
 13870  1F9A  1D03               	skipz
 13871  1F9B  0008               	return
 13872                           
 13873                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 13874  1F9C  0872               	movf	setDimmerIntr_ControlStatus@command,w
 13875  1F9D  3A01               	xorlw	1
 13876  1F9E  3000               	movlw	0
 13877  1F9F  1903               	skipnz
 13878  1FA0  3001               	movlw	1
 13879  1FA1  00F3               	movwf	??_setDimmerIntr_ControlStatus
 13880  1FA2  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13881  1FA3  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13882  1FA4  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13883  1FA5  0021               	movlb	1	; select bank1
 13884  1FA6  0868               	movf	_DimmerIntr1^(0+128),w
 13885  1FA7  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 13886  1FA8  39F7               	andlw	-9
 13887  1FA9  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 13888  1FAA  00E8               	movwf	_DimmerIntr1^(0+128)
 13889  1FAB  0008               	return
 13890  1FAC                     __end_of_setDimmerIntr_ControlStatus:	
 13891                           
 13892                           	psect	text94
 13893  076F                     __ptext94:	
 13894 ;; *************** function _setDelayOff_GO *****************
 13895 ;; Defined at:
 13896 ;;		line 87 in file "../src/DelayOff_B1.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;  sw              1    wreg     unsigned char 
 13899 ;;  command         1   61[BANK0 ] unsigned char 
 13900 ;;  value           1   62[BANK0 ] unsigned char 
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;  sw              1   68[BANK0 ] unsigned char 
 13903 ;;  k               1   67[BANK0 ] unsigned char 
 13904 ;;  j               1   66[BANK0 ] unsigned char 
 13905 ;;  i               1   65[BANK0 ] unsigned char 
 13906 ;; Return value:  Size  Location     Type
 13907 ;;		None               void
 13908 ;; Registers used:
 13909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13910 ;; Tracked objects:
 13911 ;;		On entry : 0/0
 13912 ;;		On exit  : 0/0
 13913 ;;		Unchanged: 0/0
 13914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;Total ram usage:        8 bytes
 13920 ;; Hardware stack levels used:    1
 13921 ;; Hardware stack levels required when called:    4
 13922 ;; This function calls:
 13923 ;;		_DelayOffPointSelect
 13924 ;;		___bmul
 13925 ;;		_setProductData
 13926 ;; This function is called by:
 13927 ;;		_setDimmerLights_OnOff
 13928 ;;		_setRFSW_Control
 13929 ;; This function uses a non-reentrant model
 13930 ;;
 13931                           
 13932                           
 13933                           ;psect for function _setDelayOff_GO
 13934  076F                     _setDelayOff_GO:	
 13935                           
 13936                           ;incstack = 0
 13937                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13938                           ;setDelayOff_GO@sw stored from wreg
 13939  076F  0020               	movlb	0	; select bank0
 13940  0770  00E4               	movwf	setDelayOff_GO@sw
 13941                           
 13942                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 13943  0771  0864               	movf	setDelayOff_GO@sw,w
 13944  0772  319D  2592  3187   	fcall	_DelayOffPointSelect
 13945                           
 13946                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 13947  0775  0020               	movlb	0	; select bank0
 13948  0776  085D               	movf	setDelayOff_GO@command,w
 13949  0777  3A01               	xorlw	1
 13950  0778  3000               	movlw	0
 13951  0779  1903               	skipnz
 13952  077A  3001               	movlw	1
 13953  077B  00DF               	movwf	??_setDelayOff_GO
 13954  077C  0021               	movlb	1	; select bank1
 13955  077D  084A               	movf	_DelayOff^(0+128),w
 13956  077E  0086               	movwf	6
 13957  077F  3001               	movlw	1	; select bank2/3
 13958  0780  0087               	movwf	7
 13959  0781  0020               	movlb	0	; select bank0
 13960  0782  0DDF               	rlf	??_setDelayOff_GO,f
 13961  0783  0801               	movf	1,w
 13962  0784  065F               	xorwf	??_setDelayOff_GO,w
 13963  0785  39FD               	andlw	-3
 13964  0786  065F               	xorwf	??_setDelayOff_GO,w
 13965  0787  0081               	movwf	1
 13966                           
 13967                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 13968  0788  0021               	movlb	1	; select bank1
 13969  0789  084A               	movf	_DelayOff^(0+128),w
 13970  078A  3E02               	addlw	2
 13971  078B  0086               	movwf	6
 13972  078C  3001               	movlw	1	; select bank2/3
 13973  078D  0087               	movwf	7
 13974  078E  3000               	movlw	0
 13975  078F  3FC0               	movwi [0]fsr1
 13976  0790  3FC1               	movwi [1]fsr1
 13977                           
 13978                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 13979  0791  084A               	movf	_DelayOff^(0+128),w
 13980  0792  3E04               	addlw	4
 13981  0793  0086               	movwf	6
 13982  0794  3001               	movlw	1	; select bank2/3
 13983  0795  0087               	movwf	7
 13984  0796  0181               	clrf	1
 13985                           
 13986                           ;DelayOff_B1.c: 94: if (command == 1) {
 13987  0797  0020               	movlb	0	; select bank0
 13988  0798  085D               	movf	setDelayOff_GO@command,w
 13989  0799  3A01               	xorlw	1
 13990  079A  1D03               	skipz
 13991  079B  2FF1               	goto	l6077
 13992                           
 13993                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 13994  079C  3005               	movlw	5
 13995  079D  00DF               	movwf	??_setDelayOff_GO
 13996  079E  085F               	movf	??_setDelayOff_GO,w
 13997  079F  00E1               	movwf	setDelayOff_GO@i
 13998  07A0  01E2               	clrf	setDelayOff_GO@j
 13999  07A1  01E3               	clrf	setDelayOff_GO@k
 14000                           
 14001                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14002  07A2  300F               	movlw	15
 14003  07A3  055E               	andwf	setDelayOff_GO@value,w
 14004  07A4  00DF               	movwf	??_setDelayOff_GO
 14005  07A5  085F               	movf	??_setDelayOff_GO,w
 14006  07A6  3A05               	xorlw	5
 14007  07A7  1903               	skipnz
 14008  07A8  2FAD               	goto	l6063
 14009  07A9  085E               	movf	setDelayOff_GO@value,w
 14010  07AA  390F               	andlw	15
 14011  07AB  1D03               	btfss	3,2
 14012  07AC  2FDD               	goto	l6073
 14013  07AD                     l6063:	
 14014  07AD  3031               	movlw	49
 14015  07AE  025E               	subwf	setDelayOff_GO@value,w
 14016  07AF  1803               	skipnc
 14017  07B0  2FDD               	goto	l6073
 14018                           
 14019                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14020  07B1  085E               	movf	setDelayOff_GO@value,w
 14021  07B2  390F               	andlw	15
 14022  07B3  00DF               	movwf	??_setDelayOff_GO
 14023  07B4  085F               	movf	??_setDelayOff_GO,w
 14024  07B5  00E2               	movwf	setDelayOff_GO@j
 14025                           
 14026                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14027  07B6  085E               	movf	setDelayOff_GO@value,w
 14028  07B7  00DF               	movwf	??_setDelayOff_GO
 14029  07B8  3004               	movlw	4
 14030  07B9                     u5245:	
 14031  07B9  36DF               	lsrf	??_setDelayOff_GO,f
 14032  07BA  0B89               	decfsz	9,f
 14033  07BB  2FB9               	goto	u5245
 14034  07BC  085F               	movf	??_setDelayOff_GO,w
 14035  07BD  390F               	andlw	15
 14036  07BE  00E0               	movwf	??_setDelayOff_GO+1
 14037  07BF  0860               	movf	??_setDelayOff_GO+1,w
 14038  07C0  00E3               	movwf	setDelayOff_GO@k
 14039                           
 14040                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14041  07C1  300A               	movlw	10
 14042  07C2  00DF               	movwf	??_setDelayOff_GO
 14043  07C3  085F               	movf	??_setDelayOff_GO,w
 14044  07C4  00F2               	movwf	___bmul@multiplicand
 14045  07C5  0863               	movf	setDelayOff_GO@k,w
 14046  07C6  319E  26F4  3187   	fcall	___bmul
 14047  07C9  0020               	movlb	0	; select bank0
 14048  07CA  0762               	addwf	setDelayOff_GO@j,w
 14049  07CB  00E0               	movwf	??_setDelayOff_GO+1
 14050  07CC  0021               	movlb	1	; select bank1
 14051  07CD  0A4A               	incf	_DelayOff^(0+128),w
 14052  07CE  0086               	movwf	6
 14053  07CF  3001               	movlw	1	; select bank2/3
 14054  07D0  0087               	movwf	7
 14055  07D1  0020               	movlb	0	; select bank0
 14056  07D2  0860               	movf	??_setDelayOff_GO+1,w
 14057  07D3  0081               	movwf	1
 14058                           
 14059                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14060  07D4  085E               	movf	setDelayOff_GO@value,w
 14061  07D5  00DF               	movwf	??_setDelayOff_GO
 14062  07D6  085F               	movf	??_setDelayOff_GO,w
 14063  07D7  00DA               	movwf	setProductData@value
 14064  07D8  0864               	movf	setDelayOff_GO@sw,w
 14065  07D9  3E1A               	addlw	26
 14066  07DA  319D  25D4         	fcall	_setProductData
 14067                           
 14068                           ;DelayOff_B1.c: 103: } else {
 14069  07DC  0008               	return
 14070  07DD                     l6073:	
 14071                           
 14072                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14073  07DD  3005               	movlw	5
 14074  07DE  0020               	movlb	0	; select bank0
 14075  07DF  00DF               	movwf	??_setDelayOff_GO
 14076  07E0  0021               	movlb	1	; select bank1
 14077  07E1  0A4A               	incf	_DelayOff^(0+128),w
 14078  07E2  0086               	movwf	6
 14079  07E3  3001               	movlw	1	; select bank2/3
 14080  07E4  0087               	movwf	7
 14081  07E5  0020               	movlb	0	; select bank0
 14082  07E6  085F               	movf	??_setDelayOff_GO,w
 14083  07E7  0081               	movwf	1
 14084                           
 14085                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14086  07E8  3005               	movlw	5
 14087  07E9  00DF               	movwf	??_setDelayOff_GO
 14088  07EA  085F               	movf	??_setDelayOff_GO,w
 14089  07EB  00DA               	movwf	setProductData@value
 14090  07EC  0864               	movf	setDelayOff_GO@sw,w
 14091  07ED  3E1A               	addlw	26
 14092  07EE  319D  25D4         	fcall	_setProductData
 14093                           
 14094                           ;DelayOff_B1.c: 106: }
 14095                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14096  07F0  0008               	return
 14097  07F1                     l6077:	
 14098  07F1  0020               	movlb	0	; select bank0
 14099  07F2  08DD               	movf	setDelayOff_GO@command,f
 14100  07F3  1D03               	skipz
 14101  07F4  0008               	return
 14102                           
 14103                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14104  07F5  01DA               	clrf	setProductData@value
 14105  07F6  0864               	movf	setDelayOff_GO@sw,w
 14106  07F7  3E1A               	addlw	26
 14107  07F8  319D  25D4         	fcall	_setProductData
 14108  07FA  0008               	return
 14109  07FB                     __end_of_setDelayOff_GO:	
 14110                           
 14111                           	psect	text95
 14112  1EF4                     __ptext95:	
 14113 ;; *************** function ___bmul *****************
 14114 ;; Defined at:
 14115 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;  multiplier      1    wreg     unsigned char 
 14118 ;;  multiplicand    1    2[COMMON] unsigned char 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  multiplier      1    5[COMMON] unsigned char 
 14121 ;;  product         1    4[COMMON] unsigned char 
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  1    wreg      unsigned char 
 14124 ;; Registers used:
 14125 ;;		wreg, status,2, status,0
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14131 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;Total ram usage:        4 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; Hardware stack levels required when called:    3
 14138 ;; This function calls:
 14139 ;;		Nothing
 14140 ;; This function is called by:
 14141 ;;		_setDelayOff_GO
 14142 ;;		_DelayTimejudge
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           
 14147                           ;psect for function ___bmul
 14148  1EF4                     ___bmul:	
 14149                           
 14150                           ;incstack = 0
 14151                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14152                           ;___bmul@multiplier stored from wreg
 14153  1EF4  00F5               	movwf	___bmul@multiplier
 14154  1EF5  01F4               	clrf	___bmul@product
 14155  1EF6                     l5741:	
 14156  1EF6  1C75               	btfss	___bmul@multiplier,0
 14157  1EF7  2EFC               	goto	l5745
 14158  1EF8  0872               	movf	___bmul@multiplicand,w
 14159  1EF9  00F3               	movwf	??___bmul
 14160  1EFA  0873               	movf	??___bmul,w
 14161  1EFB  07F4               	addwf	___bmul@product,f
 14162  1EFC                     l5745:	
 14163  1EFC  1003               	clrc
 14164  1EFD  0DF2               	rlf	___bmul@multiplicand,f
 14165  1EFE  1003               	clrc
 14166  1EFF  0CF5               	rrf	___bmul@multiplier,f
 14167  1F00  08F5               	movf	___bmul@multiplier,f
 14168  1F01  1D03               	skipz
 14169  1F02  2EF6               	goto	l5741
 14170  1F03  0874               	movf	___bmul@product,w
 14171  1F04  0008               	return
 14172  1F05                     __end_of___bmul:	
 14173                           
 14174                           	psect	text96
 14175  1F82                     __ptext96:	
 14176 ;; *************** function _setCmd_Status *****************
 14177 ;; Defined at:
 14178 ;;		line 597 in file "../src/Main_B1.c"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;  number          1    wreg     unsigned char 
 14181 ;;  cmd             1    2[COMMON] unsigned char 
 14182 ;; Auto vars:     Size  Location     Type
 14183 ;;  number          1    4[COMMON] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;		None               void
 14186 ;; Registers used:
 14187 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;Total ram usage:        3 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    3
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_setDimmerLights_OnOff
 14204 ;;		_setControl_Lights_Table
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           
 14209                           ;psect for function _setCmd_Status
 14210  1F82                     _setCmd_Status:	
 14211                           
 14212                           ;incstack = 0
 14213                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14214                           ;setCmd_Status@number stored from wreg
 14215  1F82  00F4               	movwf	setCmd_Status@number
 14216                           
 14217                           ;Main_B1.c: 598: switch (number) {
 14218  1F83  2F91               	goto	l6243
 14219  1F84                     l6239:	
 14220                           ;Main_B1.c: 599: case 1:
 14221                           
 14222                           
 14223                           ;Main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14224  1F84  0872               	movf	setCmd_Status@cmd,w
 14225  1F85  3A01               	xorlw	1
 14226  1F86  3000               	movlw	0
 14227  1F87  1903               	skipnz
 14228  1F88  3001               	movlw	1
 14229  1F89  00F3               	movwf	??_setCmd_Status
 14230  1F8A  0021               	movlb	1	; select bank1
 14231  1F8B  0849               	movf	_Cmd^(0+128),w
 14232  1F8C  0673               	xorwf	??_setCmd_Status,w
 14233  1F8D  39FE               	andlw	-2
 14234  1F8E  0673               	xorwf	??_setCmd_Status,w
 14235  1F8F  00C9               	movwf	_Cmd^(0+128)
 14236                           
 14237                           ;Main_B1.c: 602: }
 14238                           
 14239                           ;Main_B1.c: 601: break;
 14240  1F90  0008               	return
 14241  1F91                     l6243:	
 14242  1F91  0874               	movf	setCmd_Status@number,w
 14243                           
 14244                           ; Switch size 1, requested type "space"
 14245                           ; Number of cases is 1, Range of values is 1 to 1
 14246                           ; switch strategies available:
 14247                           ; Name         Instructions Cycles
 14248                           ; simple_byte            4     3 (average)
 14249                           ; direct_byte           11     9 (fixed)
 14250                           ; jumptable            263     9 (fixed)
 14251                           ;	Chosen strategy is simple_byte
 14252  1F92  3A01               	xorlw	1	; case 1
 14253  1F93  1903               	skipnz
 14254  1F94  2F84               	goto	l6239
 14255  1F95  2F96               	goto	l1522
 14256  1F96                     l1522:	
 14257  1F96  0008               	return
 14258  1F97                     __end_of_setCmd_Status:	
 14259                           
 14260                           	psect	text97
 14261  1D35                     __ptext97:	
 14262 ;; *************** function _getMain_All_LightsStatus *****************
 14263 ;; Defined at:
 14264 ;;		line 374 in file "../src/Main_B1.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;		None
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  status          1    2[COMMON] unsigned char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;                  1    wreg      unsigned char 
 14271 ;; Registers used:
 14272 ;;		wreg, status,2
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;Total ram usage:        1 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    3
 14285 ;; This function calls:
 14286 ;;		Nothing
 14287 ;; This function is called by:
 14288 ;;		_DimmerLights_Main
 14289 ;;		_setDimmerLights_Main
 14290 ;;		_setDimmerLights_OnOff
 14291 ;;		_Flash_Memory_Main
 14292 ;;		_Exception_Main
 14293 ;;		_Load_Main
 14294 ;;		_setControl_Lights_Table
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function _getMain_All_LightsStatus
 14300  1D35                     _getMain_All_LightsStatus:	
 14301                           
 14302                           ;Main_B1.c: 375: char status = 0;
 14303                           
 14304                           ;incstack = 0
 14305                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14306  1D35  01F2               	clrf	getMain_All_LightsStatus@status
 14307                           
 14308                           ;Main_B1.c: 382: status = DimmerLights1.Status == 1 ? 1 : 0;
 14309  1D36  3000               	movlw	0
 14310  1D37  0022               	movlb	2	; select bank2
 14311  1D38  1859               	btfsc	(_DimmerLights1^(0+256)+1),0
 14312  1D39  3001               	movlw	1
 14313  1D3A  00F2               	movwf	getMain_All_LightsStatus@status
 14314                           
 14315                           ;Main_B1.c: 421: return status;
 14316  1D3B  0872               	movf	getMain_All_LightsStatus@status,w
 14317  1D3C  0008               	return
 14318  1D3D                     __end_of_getMain_All_LightsStatus:	
 14319                           
 14320                           	psect	text98
 14321  099E                     __ptext98:	
 14322 ;; *************** function _getDimmerLights_PercentToValue *****************
 14323 ;; Defined at:
 14324 ;;		line 1019 in file "../src/Dimmer_B1.c"
 14325 ;; Parameters:    Size  Location     Type
 14326 ;;  value           1    wreg     unsigned char 
 14327 ;; Auto vars:     Size  Location     Type
 14328 ;;  value           1   54[BANK0 ] unsigned char 
 14329 ;;  i               3   55[BANK0 ] float 
 14330 ;; Return value:  Size  Location     Type
 14331 ;;                  1    wreg      unsigned char 
 14332 ;; Registers used:
 14333 ;;		wreg, status,2, status,0, pclath, cstack
 14334 ;; Tracked objects:
 14335 ;;		On entry : 0/0
 14336 ;;		On exit  : 0/0
 14337 ;;		Unchanged: 0/0
 14338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;Total ram usage:        6 bytes
 14344 ;; Hardware stack levels used:    1
 14345 ;; Hardware stack levels required when called:    5
 14346 ;; This function calls:
 14347 ;;		___awtoft
 14348 ;;		___ftadd
 14349 ;;		___ftdiv
 14350 ;;		___ftmul
 14351 ;;		___ftneg
 14352 ;;		___fttol
 14353 ;; This function is called by:
 14354 ;;		_setDimmerLights_OnOff
 14355 ;;		_setRFSW_AdjControl
 14356 ;; This function uses a non-reentrant model
 14357 ;;
 14358                           
 14359                           
 14360                           ;psect for function _getDimmerLights_PercentToValue
 14361  099E                     _getDimmerLights_PercentToValue:	
 14362                           
 14363                           ;incstack = 0
 14364                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14365                           ;getDimmerLights_PercentToValue@value stored from wreg
 14366  099E  0020               	movlb	0	; select bank0
 14367  099F  00D6               	movwf	getDimmerLights_PercentToValue@value
 14368                           
 14369                           ;Dimmer_B1.c: 1027: float i = ((char)(70*0.8)) - ((char)(30*0.8));
 14370  09A0  3000               	movlw	0
 14371  09A1  00D7               	movwf	getDimmerLights_PercentToValue@i
 14372  09A2  3000               	movlw	0
 14373  09A3  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14374  09A4  3042               	movlw	66
 14375  09A5  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14376                           
 14377                           ;Dimmer_B1.c: 1028: i /= 100;
 14378  09A6  3000               	movlw	0
 14379  09A7  00A6               	movwf	___ftdiv@f2
 14380  09A8  30C8               	movlw	200
 14381  09A9  00A7               	movwf	___ftdiv@f2+1
 14382  09AA  3042               	movlw	66
 14383  09AB  00A8               	movwf	___ftdiv@f2+2
 14384  09AC  0857               	movf	getDimmerLights_PercentToValue@i,w
 14385  09AD  00A9               	movwf	___ftdiv@f1
 14386  09AE  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14387  09AF  00AA               	movwf	___ftdiv@f1+1
 14388  09B0  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14389  09B1  00AB               	movwf	___ftdiv@f1+2
 14390  09B2  318D  253D  3189   	fcall	___ftdiv
 14391  09B5  0020               	movlb	0	; select bank0
 14392  09B6  0826               	movf	?___ftdiv,w
 14393  09B7  00D7               	movwf	getDimmerLights_PercentToValue@i
 14394  09B8  0827               	movf	?___ftdiv+1,w
 14395  09B9  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14396  09BA  0828               	movf	?___ftdiv+2,w
 14397  09BB  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14398                           
 14399                           ;Dimmer_B1.c: 1030: return (char) (((char)(70*0.8)) - ((100 - value) * i));
 14400  09BC  0856               	movf	getDimmerLights_PercentToValue@value,w
 14401  09BD  00D4               	movwf	??_getDimmerLights_PercentToValue
 14402  09BE  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14403  09BF  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14404  09C0  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14405  09C1  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14406  09C2  1903               	skipnz
 14407  09C3  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14408  09C4  0854               	movf	??_getDimmerLights_PercentToValue,w
 14409  09C5  3E64               	addlw	100
 14410  09C6  00A0               	movwf	___awtoft@c
 14411  09C7  3000               	movlw	0
 14412  09C8  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14413  09C9  00A1               	movwf	___awtoft@c+1
 14414  09CA  3191  21CC  3189   	fcall	___awtoft
 14415  09CD  0020               	movlb	0	; select bank0
 14416  09CE  0820               	movf	?___awtoft,w
 14417  09CF  00A9               	movwf	___ftmul@f2
 14418  09D0  0821               	movf	?___awtoft+1,w
 14419  09D1  00AA               	movwf	___ftmul@f2+1
 14420  09D2  0822               	movf	?___awtoft+2,w
 14421  09D3  00AB               	movwf	___ftmul@f2+2
 14422  09D4  0857               	movf	getDimmerLights_PercentToValue@i,w
 14423  09D5  00A6               	movwf	___ftmul@f1
 14424  09D6  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14425  09D7  00A7               	movwf	___ftmul@f1+1
 14426  09D8  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14427  09D9  00A8               	movwf	___ftmul@f1+2
 14428  09DA  318E  2696  3189   	fcall	___ftmul
 14429  09DD  0020               	movlb	0	; select bank0
 14430  09DE  0826               	movf	?___ftmul,w
 14431  09DF  00B6               	movwf	___ftneg@f1
 14432  09E0  0827               	movf	?___ftmul+1,w
 14433  09E1  00B7               	movwf	___ftneg@f1+1
 14434  09E2  0828               	movf	?___ftmul+2,w
 14435  09E3  00B8               	movwf	___ftneg@f1+2
 14436  09E4  319D  2546  3189   	fcall	___ftneg
 14437  09E7  0020               	movlb	0	; select bank0
 14438  09E8  0836               	movf	?___ftneg,w
 14439  09E9  00BC               	movwf	___ftadd@f2
 14440  09EA  0837               	movf	?___ftneg+1,w
 14441  09EB  00BD               	movwf	___ftadd@f2+1
 14442  09EC  0838               	movf	?___ftneg+2,w
 14443  09ED  00BE               	movwf	___ftadd@f2+2
 14444  09EE  3000               	movlw	0
 14445  09EF  00B9               	movwf	___ftadd@f1
 14446  09F0  3060               	movlw	96
 14447  09F1  00BA               	movwf	___ftadd@f1+1
 14448  09F2  3042               	movlw	66
 14449  09F3  00BB               	movwf	___ftadd@f1+2
 14450  09F4  3183  2356  3189   	fcall	___ftadd
 14451  09F7  0020               	movlb	0	; select bank0
 14452  09F8  0839               	movf	?___ftadd,w
 14453  09F9  00C6               	movwf	___fttol@f1
 14454  09FA  083A               	movf	?___ftadd+1,w
 14455  09FB  00C7               	movwf	___fttol@f1+1
 14456  09FC  083B               	movf	?___ftadd+2,w
 14457  09FD  00C8               	movwf	___fttol@f1+2
 14458  09FE  318C  24B6         	fcall	___fttol
 14459  0A00  0020               	movlb	0	; select bank0
 14460  0A01  0846               	movf	?___fttol,w
 14461  0A02  0008               	return
 14462  0A03                     __end_of_getDimmerLights_PercentToValue:	
 14463                           
 14464                           	psect	text99
 14465  0E96                     __ptext99:	
 14466 ;; *************** function ___ftmul *****************
 14467 ;; Defined at:
 14468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14469 ;; Parameters:    Size  Location     Type
 14470 ;;  f1              3    6[BANK0 ] float 
 14471 ;;  f2              3    9[BANK0 ] float 
 14472 ;; Auto vars:     Size  Location     Type
 14473 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14474 ;;  sign            1   21[BANK0 ] unsigned char 
 14475 ;;  cntr            1   20[BANK0 ] unsigned char 
 14476 ;;  exp             1   16[BANK0 ] unsigned char 
 14477 ;; Return value:  Size  Location     Type
 14478 ;;                  3    6[BANK0 ] float 
 14479 ;; Registers used:
 14480 ;;		wreg, status,2, status,0, pclath, cstack
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14486 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;Total ram usage:       16 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    4
 14493 ;; This function calls:
 14494 ;;		___ftpack
 14495 ;; This function is called by:
 14496 ;;		_getDimmerLights_PercentToValue
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           
 14501                           ;psect for function ___ftmul
 14502  0E96                     ___ftmul:	
 14503                           
 14504                           ;incstack = 0
 14505                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14506  0E96  0020               	movlb	0	; select bank0
 14507  0E97  0826               	movf	___ftmul@f1,w
 14508  0E98  00AC               	movwf	??___ftmul
 14509  0E99  0827               	movf	___ftmul@f1+1,w
 14510  0E9A  00AD               	movwf	??___ftmul+1
 14511  0E9B  0828               	movf	___ftmul@f1+2,w
 14512  0E9C  00AE               	movwf	??___ftmul+2
 14513  0E9D  1003               	clrc
 14514  0E9E  0D2D               	rlf	??___ftmul+1,w
 14515  0E9F  0D2E               	rlf	??___ftmul+2,w
 14516  0EA0  00AF               	movwf	??___ftmul+3
 14517  0EA1  082F               	movf	??___ftmul+3,w
 14518  0EA2  00B0               	movwf	___ftmul@exp
 14519  0EA3  08B0               	movf	___ftmul@exp,f
 14520  0EA4  1D03               	skipz
 14521  0EA5  2EAD               	goto	l5887
 14522  0EA6  3000               	movlw	0
 14523  0EA7  00A6               	movwf	?___ftmul
 14524  0EA8  3000               	movlw	0
 14525  0EA9  00A7               	movwf	?___ftmul+1
 14526  0EAA  3000               	movlw	0
 14527  0EAB  00A8               	movwf	?___ftmul+2
 14528  0EAC  0008               	return
 14529  0EAD                     l5887:	
 14530  0EAD  0829               	movf	___ftmul@f2,w
 14531  0EAE  00AC               	movwf	??___ftmul
 14532  0EAF  082A               	movf	___ftmul@f2+1,w
 14533  0EB0  00AD               	movwf	??___ftmul+1
 14534  0EB1  082B               	movf	___ftmul@f2+2,w
 14535  0EB2  00AE               	movwf	??___ftmul+2
 14536  0EB3  1003               	clrc
 14537  0EB4  0D2D               	rlf	??___ftmul+1,w
 14538  0EB5  0D2E               	rlf	??___ftmul+2,w
 14539  0EB6  00AF               	movwf	??___ftmul+3
 14540  0EB7  082F               	movf	??___ftmul+3,w
 14541  0EB8  00B5               	movwf	___ftmul@sign
 14542  0EB9  08B5               	movf	___ftmul@sign,f
 14543  0EBA  1D03               	skipz
 14544  0EBB  2EC3               	goto	l5893
 14545  0EBC  3000               	movlw	0
 14546  0EBD  00A6               	movwf	?___ftmul
 14547  0EBE  3000               	movlw	0
 14548  0EBF  00A7               	movwf	?___ftmul+1
 14549  0EC0  3000               	movlw	0
 14550  0EC1  00A8               	movwf	?___ftmul+2
 14551  0EC2  0008               	return
 14552  0EC3                     l5893:	
 14553  0EC3  0835               	movf	___ftmul@sign,w
 14554  0EC4  3E7B               	addlw	123
 14555  0EC5  00AC               	movwf	??___ftmul
 14556  0EC6  082C               	movf	??___ftmul,w
 14557  0EC7  07B0               	addwf	___ftmul@exp,f
 14558  0EC8  0826               	movf	___ftmul@f1,w
 14559  0EC9  00AC               	movwf	??___ftmul
 14560  0ECA  0827               	movf	___ftmul@f1+1,w
 14561  0ECB  00AD               	movwf	??___ftmul+1
 14562  0ECC  0828               	movf	___ftmul@f1+2,w
 14563  0ECD  00AE               	movwf	??___ftmul+2
 14564  0ECE  3010               	movlw	16
 14565  0ECF                     u4905:	
 14566  0ECF  36AE               	lsrf	??___ftmul+2,f
 14567  0ED0  0CAD               	rrf	??___ftmul+1,f
 14568  0ED1  0CAC               	rrf	??___ftmul,f
 14569  0ED2  0B89               	decfsz	9,f
 14570  0ED3  2ECF               	goto	u4905
 14571  0ED4  082C               	movf	??___ftmul,w
 14572  0ED5  00AF               	movwf	??___ftmul+3
 14573  0ED6  082F               	movf	??___ftmul+3,w
 14574  0ED7  00B5               	movwf	___ftmul@sign
 14575  0ED8  0829               	movf	___ftmul@f2,w
 14576  0ED9  00AC               	movwf	??___ftmul
 14577  0EDA  082A               	movf	___ftmul@f2+1,w
 14578  0EDB  00AD               	movwf	??___ftmul+1
 14579  0EDC  082B               	movf	___ftmul@f2+2,w
 14580  0EDD  00AE               	movwf	??___ftmul+2
 14581  0EDE  3010               	movlw	16
 14582  0EDF                     u4915:	
 14583  0EDF  36AE               	lsrf	??___ftmul+2,f
 14584  0EE0  0CAD               	rrf	??___ftmul+1,f
 14585  0EE1  0CAC               	rrf	??___ftmul,f
 14586  0EE2  0B89               	decfsz	9,f
 14587  0EE3  2EDF               	goto	u4915
 14588  0EE4  082C               	movf	??___ftmul,w
 14589  0EE5  00AF               	movwf	??___ftmul+3
 14590  0EE6  082F               	movf	??___ftmul+3,w
 14591  0EE7  06B5               	xorwf	___ftmul@sign,f
 14592  0EE8  3080               	movlw	128
 14593  0EE9  00AC               	movwf	??___ftmul
 14594  0EEA  082C               	movf	??___ftmul,w
 14595  0EEB  05B5               	andwf	___ftmul@sign,f
 14596  0EEC  17A7               	bsf	___ftmul@f1+1,7
 14597  0EED  17AA               	bsf	___ftmul@f2+1,7
 14598  0EEE  30FF               	movlw	255
 14599  0EEF  05A9               	andwf	___ftmul@f2,f
 14600  0EF0  30FF               	movlw	255
 14601  0EF1  05AA               	andwf	___ftmul@f2+1,f
 14602  0EF2  3000               	movlw	0
 14603  0EF3  05AB               	andwf	___ftmul@f2+2,f
 14604  0EF4  3000               	movlw	0
 14605  0EF5  00B1               	movwf	___ftmul@f3_as_product
 14606  0EF6  3000               	movlw	0
 14607  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 14608  0EF8  3000               	movlw	0
 14609  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 14610  0EFA  3007               	movlw	7
 14611  0EFB  00AC               	movwf	??___ftmul
 14612  0EFC  082C               	movf	??___ftmul,w
 14613  0EFD  00B4               	movwf	___ftmul@cntr
 14614  0EFE                     l5905:	
 14615  0EFE  1C26               	btfss	___ftmul@f1,0
 14616  0EFF  2F06               	goto	l5909
 14617  0F00  0829               	movf	___ftmul@f2,w
 14618  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 14619  0F02  082A               	movf	___ftmul@f2+1,w
 14620  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14621  0F04  082B               	movf	___ftmul@f2+2,w
 14622  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14623  0F06                     l5909:	
 14624  0F06  3001               	movlw	1
 14625  0F07                     u4935:	
 14626  0F07  36A8               	lsrf	___ftmul@f1+2,f
 14627  0F08  0CA7               	rrf	___ftmul@f1+1,f
 14628  0F09  0CA6               	rrf	___ftmul@f1,f
 14629  0F0A  0B89               	decfsz	9,f
 14630  0F0B  2F07               	goto	u4935
 14631  0F0C  3001               	movlw	1
 14632  0F0D                     u4945:	
 14633  0F0D  35A9               	lslf	___ftmul@f2,f
 14634  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 14635  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 14636  0F10  0B89               	decfsz	9,f
 14637  0F11  2F0D               	goto	u4945
 14638  0F12  3001               	movlw	1
 14639  0F13  02B4               	subwf	___ftmul@cntr,f
 14640  0F14  1D03               	btfss	3,2
 14641  0F15  2EFE               	goto	l5905
 14642  0F16  3009               	movlw	9
 14643  0F17  00AC               	movwf	??___ftmul
 14644  0F18  082C               	movf	??___ftmul,w
 14645  0F19  00B4               	movwf	___ftmul@cntr
 14646  0F1A                     l5917:	
 14647  0F1A  1C26               	btfss	___ftmul@f1,0
 14648  0F1B  2F22               	goto	l5921
 14649  0F1C  0829               	movf	___ftmul@f2,w
 14650  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 14651  0F1E  082A               	movf	___ftmul@f2+1,w
 14652  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14653  0F20  082B               	movf	___ftmul@f2+2,w
 14654  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14655  0F22                     l5921:	
 14656  0F22  3001               	movlw	1
 14657  0F23                     u4975:	
 14658  0F23  36A8               	lsrf	___ftmul@f1+2,f
 14659  0F24  0CA7               	rrf	___ftmul@f1+1,f
 14660  0F25  0CA6               	rrf	___ftmul@f1,f
 14661  0F26  0B89               	decfsz	9,f
 14662  0F27  2F23               	goto	u4975
 14663  0F28  3001               	movlw	1
 14664  0F29                     u4985:	
 14665  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 14666  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 14667  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 14668  0F2C  0B89               	decfsz	9,f
 14669  0F2D  2F29               	goto	u4985
 14670  0F2E  3001               	movlw	1
 14671  0F2F  02B4               	subwf	___ftmul@cntr,f
 14672  0F30  1D03               	btfss	3,2
 14673  0F31  2F1A               	goto	l5917
 14674  0F32  0831               	movf	___ftmul@f3_as_product,w
 14675  0F33  00F2               	movwf	___ftpack@arg
 14676  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 14677  0F35  00F3               	movwf	___ftpack@arg+1
 14678  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 14679  0F37  00F4               	movwf	___ftpack@arg+2
 14680  0F38  0830               	movf	___ftmul@exp,w
 14681  0F39  00AC               	movwf	??___ftmul
 14682  0F3A  082C               	movf	??___ftmul,w
 14683  0F3B  00F5               	movwf	___ftpack@exp
 14684  0F3C  0835               	movf	___ftmul@sign,w
 14685  0F3D  00AD               	movwf	??___ftmul+1
 14686  0F3E  082D               	movf	??___ftmul+1,w
 14687  0F3F  00F6               	movwf	___ftpack@sign
 14688  0F40  3188  2014         	fcall	___ftpack
 14689  0F42  0872               	movf	?___ftpack,w
 14690  0F43  0020               	movlb	0	; select bank0
 14691  0F44  00A6               	movwf	?___ftmul
 14692  0F45  0873               	movf	?___ftpack+1,w
 14693  0F46  00A7               	movwf	?___ftmul+1
 14694  0F47  0874               	movf	?___ftpack+2,w
 14695  0F48  00A8               	movwf	?___ftmul+2
 14696  0F49  0008               	return
 14697  0F4A                     __end_of___ftmul:	
 14698                           
 14699                           	psect	text100
 14700  1E48                     __ptext100:	
 14701 ;; *************** function _getDelayOff_GO *****************
 14702 ;; Defined at:
 14703 ;;		line 114 in file "../src/DelayOff_B1.c"
 14704 ;; Parameters:    Size  Location     Type
 14705 ;;  sw              1    wreg     unsigned char 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  sw              1    4[COMMON] unsigned char 
 14708 ;;  go              1    5[COMMON] unsigned char 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      unsigned char 
 14711 ;; Registers used:
 14712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        2 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    4
 14725 ;; This function calls:
 14726 ;;		_DelayOffPointSelect
 14727 ;; This function is called by:
 14728 ;;		_setDimmerLights_OnOff
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _getDelayOff_GO
 14734  1E48                     _getDelayOff_GO:	
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14738                           ;getDelayOff_GO@sw stored from wreg
 14739  1E48  00F4               	movwf	getDelayOff_GO@sw
 14740                           
 14741                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14742  1E49  0874               	movf	getDelayOff_GO@sw,w
 14743  1E4A  319D  2592         	fcall	_DelayOffPointSelect
 14744                           
 14745                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14746  1E4C  0021               	movlb	1	; select bank1
 14747  1E4D  084A               	movf	_DelayOff^(0+128),w
 14748  1E4E  0086               	movwf	6
 14749  1E4F  3001               	movlw	1	; select bank2/3
 14750  1E50  0087               	movwf	7
 14751  1E51  3000               	movlw	0
 14752  1E52  1881               	btfsc	1,1
 14753  1E53  3001               	movlw	1
 14754  1E54  00F5               	movwf	getDelayOff_GO@go
 14755                           
 14756                           ;DelayOff_B1.c: 117: return go;
 14757  1E55  0875               	movf	getDelayOff_GO@go,w
 14758  1E56  0008               	return
 14759  1E57                     __end_of_getDelayOff_GO:	
 14760                           
 14761                           	psect	text101
 14762  1E94                     __ptext101:	
 14763 ;; *************** function _getCmd_Status *****************
 14764 ;; Defined at:
 14765 ;;		line 605 in file "../src/Main_B1.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;  number          1    wreg     unsigned char 
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;  number          1    2[COMMON] unsigned char 
 14770 ;;  cmd             1    3[COMMON] unsigned char 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  1    wreg      unsigned char 
 14773 ;; Registers used:
 14774 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14775 ;; Tracked objects:
 14776 ;;		On entry : 0/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;Total ram usage:        2 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    3
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_setDimmerLights_OnOff
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           
 14795                           ;psect for function _getCmd_Status
 14796  1E94                     _getCmd_Status:	
 14797                           
 14798                           ;incstack = 0
 14799                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14800                           ;getCmd_Status@number stored from wreg
 14801  1E94  00F2               	movwf	getCmd_Status@number
 14802                           
 14803                           ;Main_B1.c: 606: char cmd = 0;
 14804  1E95  01F3               	clrf	getCmd_Status@cmd
 14805                           
 14806                           ;Main_B1.c: 607: switch (number) {
 14807  1E96  2E9D               	goto	l6493
 14808  1E97                     l6489:	
 14809                           ;Main_B1.c: 608: case 1:
 14810                           
 14811                           
 14812                           ;Main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 14813  1E97  3000               	movlw	0
 14814  1E98  0021               	movlb	1	; select bank1
 14815  1E99  1849               	btfsc	_Cmd^(0+128),0
 14816  1E9A  3001               	movlw	1
 14817  1E9B  00F3               	movwf	getCmd_Status@cmd
 14818                           
 14819                           ;Main_B1.c: 611: }
 14820                           
 14821                           ;Main_B1.c: 610: break;
 14822  1E9C  2EA2               	goto	l6495
 14823  1E9D                     l6493:	
 14824  1E9D  0872               	movf	getCmd_Status@number,w
 14825                           
 14826                           ; Switch size 1, requested type "space"
 14827                           ; Number of cases is 1, Range of values is 1 to 1
 14828                           ; switch strategies available:
 14829                           ; Name         Instructions Cycles
 14830                           ; simple_byte            4     3 (average)
 14831                           ; direct_byte           11     9 (fixed)
 14832                           ; jumptable            263     9 (fixed)
 14833                           ;	Chosen strategy is simple_byte
 14834  1E9E  3A01               	xorlw	1	; case 1
 14835  1E9F  1903               	skipnz
 14836  1EA0  2E97               	goto	l6489
 14837  1EA1  2EA2               	goto	l6495
 14838  1EA2                     l6495:	
 14839                           
 14840                           ;Main_B1.c: 612: return cmd;
 14841  1EA2  0873               	movf	getCmd_Status@cmd,w
 14842  1EA3  0008               	return
 14843  1EA4                     __end_of_getCmd_Status:	
 14844                           
 14845                           	psect	text102
 14846  15FC                     __ptext102:	
 14847 ;; *************** function _setDimmerLights_Dimming *****************
 14848 ;; Defined at:
 14849 ;;		line 864 in file "../src/Dimmer_B1.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;  lights          1    wreg     unsigned char 
 14852 ;;  status          1   66[BANK0 ] unsigned char 
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  lights          1   68[BANK0 ] unsigned char 
 14855 ;; Return value:  Size  Location     Type
 14856 ;;		None               void
 14857 ;; Registers used:
 14858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14864 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;Total ram usage:        3 bytes
 14869 ;; Hardware stack levels used:    1
 14870 ;; Hardware stack levels required when called:    6
 14871 ;; This function calls:
 14872 ;;		_getDimmerIntr_DimmingValue
 14873 ;;		_getDimmerLights_ValueToPercent
 14874 ;;		_setBuz
 14875 ;;		_setDimmerIntr_Dimming_Sw
 14876 ;;		_setDimmerIntr_MaxmumValue
 14877 ;;		_setDimmerLights_Line
 14878 ;;		_setProductData
 14879 ;;		_setRF_DimmerLights
 14880 ;;		_setRF_TransceiveGO
 14881 ;;		_setTxData
 14882 ;; This function is called by:
 14883 ;;		_setDimmerLights_Main
 14884 ;; This function uses a non-reentrant model
 14885 ;;
 14886                           
 14887                           
 14888                           ;psect for function _setDimmerLights_Dimming
 14889  15FC                     _setDimmerLights_Dimming:	
 14890                           
 14891                           ;incstack = 0
 14892                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14893                           ;setDimmerLights_Dimming@lights stored from wreg
 14894  15FC  0020               	movlb	0	; select bank0
 14895  15FD  00E4               	movwf	setDimmerLights_Dimming@lights
 14896                           
 14897                           ;Dimmer_B1.c: 865: if (status == 1) {
 14898  15FE  0862               	movf	setDimmerLights_Dimming@status,w
 14899  15FF  3A01               	xorlw	1
 14900  1600  1D03               	skipz
 14901  1601  2E15               	goto	l8753
 14902                           
 14903                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 14904  1602  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14905  1603  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 14906  1604  0864               	movf	setDimmerLights_Dimming@lights,w
 14907  1605  319F  276F  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14908                           
 14909                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 14910  1608  3000               	movlw	0
 14911  1609  319E  2684  3195   	fcall	_setRF_TransceiveGO
 14912                           
 14913                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 14914  160C  3064               	movlw	100
 14915  160D  0020               	movlb	0	; select bank0
 14916  160E  00A4               	movwf	setBuz@time
 14917  160F  3000               	movlw	0
 14918  1610  00A5               	movwf	setBuz@time+1
 14919  1611  3001               	movlw	1
 14920  1612  3196  269F         	fcall	_setBuz
 14921                           
 14922                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 14923  1614  0008               	return
 14924  1615                     l8753:	
 14925  1615  0020               	movlb	0	; select bank0
 14926  1616  08E2               	movf	setDimmerLights_Dimming@status,f
 14927  1617  1D03               	skipz
 14928  1618  0008               	return
 14929                           
 14930                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 14931  1619  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14932  161A  0864               	movf	setDimmerLights_Dimming@lights,w
 14933  161B  319F  276F  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14934                           
 14935                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 14936  161E  0022               	movlb	2	; select bank2
 14937  161F  1120               	bcf	_Dimmer^(0+256),2
 14938                           
 14939                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 14940  1620  0020               	movlb	0	; select bank0
 14941  1621  0864               	movf	setDimmerLights_Dimming@lights,w
 14942  1622  319E  2611  3195   	fcall	_setDimmerLights_Line
 14943                           
 14944                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 14945  1625  0020               	movlb	0	; select bank0
 14946  1626  0864               	movf	setDimmerLights_Dimming@lights,w
 14947  1627  319E  2604  3195   	fcall	_getDimmerIntr_DimmingValue
 14948  162A  0020               	movlb	0	; select bank0
 14949  162B  00E3               	movwf	??_setDimmerLights_Dimming
 14950  162C  0863               	movf	??_setDimmerLights_Dimming,w
 14951  162D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14952  162E  0864               	movf	setDimmerLights_Dimming@lights,w
 14953  162F  319D  25E0  3195   	fcall	_setDimmerIntr_MaxmumValue
 14954                           
 14955                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 14956  1632  0020               	movlb	0	; select bank0
 14957  1633  0864               	movf	setDimmerLights_Dimming@lights,w
 14958  1634  319E  2604  3195   	fcall	_getDimmerIntr_DimmingValue
 14959  1637  3189  2139  3195   	fcall	_getDimmerLights_ValueToPercent
 14960  163A  0020               	movlb	0	; select bank0
 14961  163B  00E3               	movwf	??_setDimmerLights_Dimming
 14962  163C  0863               	movf	??_setDimmerLights_Dimming,w
 14963  163D  00DA               	movwf	setProductData@value
 14964  163E  0864               	movf	setDimmerLights_Dimming@lights,w
 14965  163F  3E14               	addlw	20
 14966  1640  319D  25D4  3195   	fcall	_setProductData
 14967                           
 14968                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 14969  1643  0020               	movlb	0	; select bank0
 14970  1644  01DD               	clrf	setRF_DimmerLights@on
 14971  1645  0ADD               	incf	setRF_DimmerLights@on,f
 14972  1646  0864               	movf	setDimmerLights_Dimming@lights,w
 14973  1647  3197  27A1  3195   	fcall	_setRF_DimmerLights
 14974                           
 14975                           ;Dimmer_B1.c: 892: setTxData();
 14976  164A  318F  274A         	fcall	_setTxData
 14977  164C  0008               	return
 14978  164D                     __end_of_setDimmerLights_Dimming:	
 14979                           
 14980                           	psect	text103
 14981  0F4A                     __ptext103:	
 14982 ;; *************** function _setTxData *****************
 14983 ;; Defined at:
 14984 ;;		line 183 in file "../src/RF_Control_B1.c"
 14985 ;; Parameters:    Size  Location     Type
 14986 ;;		None
 14987 ;; Auto vars:     Size  Location     Type
 14988 ;;  i               1    0        unsigned char 
 14989 ;; Return value:  Size  Location     Type
 14990 ;;		None               void
 14991 ;; Registers used:
 14992 ;;		wreg, fsr1l, fsr1h, status,2
 14993 ;; Tracked objects:
 14994 ;;		On entry : 0/0
 14995 ;;		On exit  : 0/0
 14996 ;;		Unchanged: 0/0
 14997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;Total ram usage:        1 bytes
 15003 ;; Hardware stack levels used:    1
 15004 ;; Hardware stack levels required when called:    3
 15005 ;; This function calls:
 15006 ;;		Nothing
 15007 ;; This function is called by:
 15008 ;;		_setDimmerLights_OnOff
 15009 ;;		_setDimmerLights_Dimming
 15010 ;;		_getRxData
 15011 ;;		_setControl_Lights_Table
 15012 ;;		_setRFSW_Control
 15013 ;;		_setRFSW_AdjControl
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function _setTxData
 15019  0F4A                     _setTxData:	
 15020                           
 15021                           ;RF_Control_B1.c: 184: char i;
 15022                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15023                           
 15024                           ;incstack = 0
 15025                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15026  0F4A  0021               	movlb	1	; select bank1
 15027  0F4B  1C20               	btfss	_RF1^(0+128),0
 15028  0F4C  0008               	return
 15029                           
 15030                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15031  0F4D  1520               	bsf	_RF1^(0+128),2
 15032                           
 15033                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15034  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15035  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15036                           
 15037                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15038  0F50  3063               	movlw	99
 15039  0F51  00F2               	movwf	??_setTxData
 15040  0F52  0872               	movf	??_setTxData,w
 15041  0F53  0023               	movlb	3	; select bank3
 15042  0F54  00A0               	movwf	_RF_Data^(0+384)
 15043                           
 15044                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15045  0F55  3002               	movlw	2
 15046  0F56  00F2               	movwf	??_setTxData
 15047  0F57  0872               	movf	??_setTxData,w
 15048  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15049                           
 15050                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15051  0F59  0020               	movlb	0	; select bank0
 15052  0F5A  086C               	movf	_product,w
 15053  0F5B  0086               	movwf	6
 15054  0F5C  3002               	movlw	2	; select bank4/5
 15055  0F5D  0087               	movwf	7
 15056  0F5E  3002               	movlw	2	; select bank4/5
 15057  0F5F  3F42               	moviw [2]fsr1
 15058  0F60  0023               	movlb	3	; select bank3
 15059  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15060                           
 15061                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15062  0F62  0020               	movlb	0	; select bank0
 15063  0F63  086C               	movf	_product,w
 15064  0F64  0086               	movwf	6
 15065  0F65  3002               	movlw	2	; select bank4/5
 15066  0F66  0087               	movwf	7
 15067  0F67  3002               	movlw	2	; select bank4/5
 15068  0F68  3F43               	moviw [3]fsr1
 15069  0F69  0023               	movlb	3	; select bank3
 15070  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15071                           
 15072                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15073  0F6B  0020               	movlb	0	; select bank0
 15074  0F6C  086C               	movf	_product,w
 15075  0F6D  0086               	movwf	6
 15076  0F6E  3002               	movlw	2	; select bank4/5
 15077  0F6F  0087               	movwf	7
 15078  0F70  3002               	movlw	2	; select bank4/5
 15079  0F71  3F44               	moviw [4]fsr1
 15080  0F72  0023               	movlb	3	; select bank3
 15081  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15082                           
 15083                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15084  0F74  0020               	movlb	0	; select bank0
 15085  0F75  086C               	movf	_product,w
 15086  0F76  0086               	movwf	6
 15087  0F77  3002               	movlw	2	; select bank4/5
 15088  0F78  0087               	movwf	7
 15089  0F79  3002               	movlw	2	; select bank4/5
 15090  0F7A  3F45               	moviw [5]fsr1
 15091  0F7B  0023               	movlb	3	; select bank3
 15092  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15093                           
 15094                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15095  0F7D  0020               	movlb	0	; select bank0
 15096  0F7E  086C               	movf	_product,w
 15097  0F7F  0086               	movwf	6
 15098  0F80  3002               	movlw	2	; select bank4/5
 15099  0F81  0087               	movwf	7
 15100  0F82  3002               	movlw	2	; select bank4/5
 15101  0F83  3F46               	moviw [6]fsr1
 15102  0F84  0023               	movlb	3	; select bank3
 15103  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15104                           
 15105                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15106  0F86  0020               	movlb	0	; select bank0
 15107  0F87  086C               	movf	_product,w
 15108  0F88  0086               	movwf	6
 15109  0F89  3002               	movlw	2	; select bank4/5
 15110  0F8A  0087               	movwf	7
 15111  0F8B  3002               	movlw	2	; select bank4/5
 15112  0F8C  3F47               	moviw [7]fsr1
 15113  0F8D  0023               	movlb	3	; select bank3
 15114  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15115                           
 15116                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15117  0F8F  0020               	movlb	0	; select bank0
 15118  0F90  086C               	movf	_product,w
 15119  0F91  0086               	movwf	6
 15120  0F92  3002               	movlw	2	; select bank4/5
 15121  0F93  0087               	movwf	7
 15122  0F94  3002               	movlw	2	; select bank4/5
 15123  0F95  3F48               	moviw [8]fsr1
 15124  0F96  0023               	movlb	3	; select bank3
 15125  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15126                           
 15127                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15128  0F98  0020               	movlb	0	; select bank0
 15129  0F99  086C               	movf	_product,w
 15130  0F9A  0086               	movwf	6
 15131  0F9B  3002               	movlw	2	; select bank4/5
 15132  0F9C  0087               	movwf	7
 15133  0F9D  3002               	movlw	2	; select bank4/5
 15134  0F9E  3F49               	moviw [9]fsr1
 15135  0F9F  0023               	movlb	3	; select bank3
 15136  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15137                           
 15138                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15139  0FA1  0020               	movlb	0	; select bank0
 15140  0FA2  086C               	movf	_product,w
 15141  0FA3  0086               	movwf	6
 15142  0FA4  3002               	movlw	2	; select bank4/5
 15143  0FA5  0087               	movwf	7
 15144  0FA6  3002               	movlw	2	; select bank4/5
 15145  0FA7  3F4A               	moviw [10]fsr1
 15146  0FA8  0023               	movlb	3	; select bank3
 15147  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15148                           
 15149                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15150  0FAA  0020               	movlb	0	; select bank0
 15151  0FAB  086C               	movf	_product,w
 15152  0FAC  0086               	movwf	6
 15153  0FAD  3002               	movlw	2	; select bank4/5
 15154  0FAE  0087               	movwf	7
 15155  0FAF  3002               	movlw	2	; select bank4/5
 15156  0FB0  3F4B               	moviw [11]fsr1
 15157  0FB1  0023               	movlb	3	; select bank3
 15158  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15159                           
 15160                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15161  0FB3  0020               	movlb	0	; select bank0
 15162  0FB4  086C               	movf	_product,w
 15163  0FB5  0086               	movwf	6
 15164  0FB6  3002               	movlw	2	; select bank4/5
 15165  0FB7  0087               	movwf	7
 15166  0FB8  3002               	movlw	2	; select bank4/5
 15167  0FB9  3F4C               	moviw [12]fsr1
 15168  0FBA  0023               	movlb	3	; select bank3
 15169  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15170                           
 15171                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15172  0FBC  0020               	movlb	0	; select bank0
 15173  0FBD  086C               	movf	_product,w
 15174  0FBE  0086               	movwf	6
 15175  0FBF  3002               	movlw	2	; select bank4/5
 15176  0FC0  0087               	movwf	7
 15177  0FC1  3002               	movlw	2	; select bank4/5
 15178  0FC2  3F4D               	moviw [13]fsr1
 15179  0FC3  0023               	movlb	3	; select bank3
 15180  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15181                           
 15182                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15183  0FC5  0020               	movlb	0	; select bank0
 15184  0FC6  086C               	movf	_product,w
 15185  0FC7  0086               	movwf	6
 15186  0FC8  3002               	movlw	2	; select bank4/5
 15187  0FC9  0087               	movwf	7
 15188  0FCA  3002               	movlw	2	; select bank4/5
 15189  0FCB  3F4E               	moviw [14]fsr1
 15190  0FCC  0023               	movlb	3	; select bank3
 15191  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15192                           
 15193                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15194  0FCE  0020               	movlb	0	; select bank0
 15195  0FCF  086C               	movf	_product,w
 15196  0FD0  0086               	movwf	6
 15197  0FD1  3002               	movlw	2	; select bank4/5
 15198  0FD2  0087               	movwf	7
 15199  0FD3  3002               	movlw	2	; select bank4/5
 15200  0FD4  3F4F               	moviw [15]fsr1
 15201  0FD5  0023               	movlb	3	; select bank3
 15202  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15203                           
 15204                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15205  0FD7  0020               	movlb	0	; select bank0
 15206  0FD8  086C               	movf	_product,w
 15207  0FD9  0086               	movwf	6
 15208  0FDA  3002               	movlw	2	; select bank4/5
 15209  0FDB  0087               	movwf	7
 15210  0FDC  3002               	movlw	2	; select bank4/5
 15211  0FDD  3F50               	moviw [16]fsr1
 15212  0FDE  0023               	movlb	3	; select bank3
 15213  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15214                           
 15215                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15216  0FE0  0020               	movlb	0	; select bank0
 15217  0FE1  086C               	movf	_product,w
 15218  0FE2  0086               	movwf	6
 15219  0FE3  3002               	movlw	2	; select bank4/5
 15220  0FE4  0087               	movwf	7
 15221  0FE5  3002               	movlw	2	; select bank4/5
 15222  0FE6  3F51               	moviw [17]fsr1
 15223  0FE7  0023               	movlb	3	; select bank3
 15224  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15225                           
 15226                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15227  0FE9  0020               	movlb	0	; select bank0
 15228  0FEA  086C               	movf	_product,w
 15229  0FEB  0086               	movwf	6
 15230  0FEC  3002               	movlw	2	; select bank4/5
 15231  0FED  0087               	movwf	7
 15232  0FEE  3002               	movlw	2	; select bank4/5
 15233  0FEF  3F52               	moviw [18]fsr1
 15234  0FF0  0023               	movlb	3	; select bank3
 15235  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15236                           
 15237                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15238  0FF2  0020               	movlb	0	; select bank0
 15239  0FF3  086C               	movf	_product,w
 15240  0FF4  0086               	movwf	6
 15241  0FF5  3002               	movlw	2	; select bank4/5
 15242  0FF6  0087               	movwf	7
 15243  0FF7  3002               	movlw	2	; select bank4/5
 15244  0FF8  3F53               	moviw [19]fsr1
 15245  0FF9  0023               	movlb	3	; select bank3
 15246  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15247                           
 15248                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15249  0FFB  30D1               	movlw	209
 15250  0FFC  00F2               	movwf	??_setTxData
 15251  0FFD  0872               	movf	??_setTxData,w
 15252  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15253  0FFF  0008               	return
 15254  1000                     __end_of_setTxData:	
 15255                           
 15256                           	psect	text104
 15257  1E84                     __ptext104:	
 15258 ;; *************** function _setRF_TransceiveGO *****************
 15259 ;; Defined at:
 15260 ;;		line 461 in file "../src/RF_Control_B1.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;  command         1    wreg     unsigned char 
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;  command         1    3[COMMON] unsigned char 
 15265 ;; Return value:  Size  Location     Type
 15266 ;;		None               void
 15267 ;; Registers used:
 15268 ;;		wreg, status,2, status,0
 15269 ;; Tracked objects:
 15270 ;;		On entry : 0/0
 15271 ;;		On exit  : 0/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;Total ram usage:        2 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    3
 15281 ;; This function calls:
 15282 ;;		Nothing
 15283 ;; This function is called by:
 15284 ;;		_setDimmerLights_Dimming
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           
 15289                           ;psect for function _setRF_TransceiveGO
 15290  1E84                     _setRF_TransceiveGO:	
 15291                           
 15292                           ;incstack = 0
 15293                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15294                           ;setRF_TransceiveGO@command stored from wreg
 15295  1E84  00F3               	movwf	setRF_TransceiveGO@command
 15296                           
 15297                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15298  1E85  0873               	movf	setRF_TransceiveGO@command,w
 15299  1E86  3A01               	xorlw	1
 15300  1E87  3000               	movlw	0
 15301  1E88  1903               	skipnz
 15302  1E89  3001               	movlw	1
 15303  1E8A  00F2               	movwf	??_setRF_TransceiveGO
 15304  1E8B  0DF2               	rlf	??_setRF_TransceiveGO,f
 15305  1E8C  0DF2               	rlf	??_setRF_TransceiveGO,f
 15306  1E8D  0021               	movlb	1	; select bank1
 15307  1E8E  0820               	movf	_RF1^(0+128),w
 15308  1E8F  0672               	xorwf	??_setRF_TransceiveGO,w
 15309  1E90  39FB               	andlw	-5
 15310  1E91  0672               	xorwf	??_setRF_TransceiveGO,w
 15311  1E92  00A0               	movwf	_RF1^(0+128)
 15312  1E93  0008               	return
 15313  1E94                     __end_of_setRF_TransceiveGO:	
 15314                           
 15315                           	psect	text105
 15316  17A1                     __ptext105:	
 15317 ;; *************** function _setRF_DimmerLights *****************
 15318 ;; Defined at:
 15319 ;;		line 446 in file "../src/RF_Control_B1.c"
 15320 ;; Parameters:    Size  Location     Type
 15321 ;;  lights          1    wreg     unsigned char 
 15322 ;;  on              1   61[BANK0 ] unsigned char 
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;  lights          1   65[BANK0 ] unsigned char 
 15325 ;;  status          1   64[BANK0 ] unsigned char 
 15326 ;; Return value:  Size  Location     Type
 15327 ;;		None               void
 15328 ;; Registers used:
 15329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15330 ;; Tracked objects:
 15331 ;;		On entry : 0/0
 15332 ;;		On exit  : 0/0
 15333 ;;		Unchanged: 0/0
 15334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15335 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;Total ram usage:        5 bytes
 15340 ;; Hardware stack levels used:    1
 15341 ;; Hardware stack levels required when called:    4
 15342 ;; This function calls:
 15343 ;;		_setProductData
 15344 ;; This function is called by:
 15345 ;;		_setDimmerLights_OnOff
 15346 ;;		_setDimmerLights_Dimming
 15347 ;;		_setRFSW_Control
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _setRF_DimmerLights
 15353  17A1                     _setRF_DimmerLights:	
 15354                           
 15355                           ;incstack = 0
 15356                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15357                           ;setRF_DimmerLights@lights stored from wreg
 15358  17A1  0020               	movlb	0	; select bank0
 15359  17A2  00E1               	movwf	setRF_DimmerLights@lights
 15360                           
 15361                           ;RF_Control_B1.c: 447: char status = 1;
 15362  17A3  01E0               	clrf	setRF_DimmerLights@status
 15363  17A4  0AE0               	incf	setRF_DimmerLights@status,f
 15364                           
 15365                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15366  17A5  0861               	movf	setRF_DimmerLights@lights,w
 15367  17A6  3EFF               	addlw	-1
 15368  17A7  0A89               	incf	9,f
 15369  17A8  2FAB               	goto	u5280
 15370  17A9                     u5285:	
 15371  17A9  1003               	clrc
 15372  17AA  0DE0               	rlf	setRF_DimmerLights@status,f
 15373  17AB                     u5280:	
 15374  17AB  3EFF               	addlw	-1
 15375  17AC  1D03               	skipz
 15376  17AD  2FA9               	goto	u5285
 15377                           
 15378                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15379  17AE  0861               	movf	setRF_DimmerLights@lights,w
 15380  17AF  00DE               	movwf	??_setRF_DimmerLights
 15381  17B0  085E               	movf	??_setRF_DimmerLights,w
 15382  17B1  00DA               	movwf	setProductData@value
 15383  17B2  300B               	movlw	11
 15384  17B3  319D  25D4  3197   	fcall	_setProductData
 15385                           
 15386                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15387  17B6  0020               	movlb	0	; select bank0
 15388  17B7  0861               	movf	setRF_DimmerLights@lights,w
 15389  17B8  3E1A               	addlw	26
 15390  17B9  076C               	addwf	_product,w
 15391  17BA  00DE               	movwf	??_setRF_DimmerLights
 15392  17BB  085E               	movf	??_setRF_DimmerLights,w
 15393  17BC  0086               	movwf	6
 15394  17BD  3002               	movlw	2	; select bank4/5
 15395  17BE  0087               	movwf	7
 15396  17BF  0801               	movf	1,w
 15397  17C0  00DF               	movwf	??_setRF_DimmerLights+1
 15398  17C1  085F               	movf	??_setRF_DimmerLights+1,w
 15399  17C2  00DA               	movwf	setProductData@value
 15400  17C3  3011               	movlw	17
 15401  17C4  319D  25D4  3197   	fcall	_setProductData
 15402                           
 15403                           ;RF_Control_B1.c: 451: if (on == 1) {
 15404  17C7  0020               	movlb	0	; select bank0
 15405  17C8  085D               	movf	setRF_DimmerLights@on,w
 15406  17C9  3A01               	xorlw	1
 15407  17CA  1D03               	skipz
 15408  17CB  2FEB               	goto	l6109
 15409                           
 15410                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15411  17CC  0861               	movf	setRF_DimmerLights@lights,w
 15412  17CD  3E14               	addlw	20
 15413  17CE  076C               	addwf	_product,w
 15414  17CF  00DE               	movwf	??_setRF_DimmerLights
 15415  17D0  085E               	movf	??_setRF_DimmerLights,w
 15416  17D1  0086               	movwf	6
 15417  17D2  3002               	movlw	2	; select bank4/5
 15418  17D3  0087               	movwf	7
 15419  17D4  0801               	movf	1,w
 15420  17D5  00DF               	movwf	??_setRF_DimmerLights+1
 15421  17D6  085F               	movf	??_setRF_DimmerLights+1,w
 15422  17D7  00DA               	movwf	setProductData@value
 15423  17D8  3009               	movlw	9
 15424  17D9  319D  25D4  3197   	fcall	_setProductData
 15425                           
 15426                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15427  17DC  0020               	movlb	0	; select bank0
 15428  17DD  086C               	movf	_product,w
 15429  17DE  3E0F               	addlw	15
 15430  17DF  0086               	movwf	6
 15431  17E0  3002               	movlw	2	; select bank4/5
 15432  17E1  0087               	movwf	7
 15433  17E2  0801               	movf	1,w
 15434  17E3  0460               	iorwf	setRF_DimmerLights@status,w
 15435  17E4  00DE               	movwf	??_setRF_DimmerLights
 15436  17E5  085E               	movf	??_setRF_DimmerLights,w
 15437  17E6  00DA               	movwf	setProductData@value
 15438  17E7  300F               	movlw	15
 15439  17E8  319D  25D4         	fcall	_setProductData
 15440                           
 15441                           ;RF_Control_B1.c: 454: } else {
 15442  17EA  0008               	return
 15443  17EB                     l6109:	
 15444                           
 15445                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15446  17EB  0020               	movlb	0	; select bank0
 15447  17EC  01DA               	clrf	setProductData@value
 15448  17ED  3009               	movlw	9
 15449  17EE  319D  25D4  3197   	fcall	_setProductData
 15450                           
 15451                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15452  17F1  0020               	movlb	0	; select bank0
 15453  17F2  086C               	movf	_product,w
 15454  17F3  3E0F               	addlw	15
 15455  17F4  0086               	movwf	6
 15456  17F5  3002               	movlw	2	; select bank4/5
 15457  17F6  0087               	movwf	7
 15458  17F7  0960               	comf	setRF_DimmerLights@status,w
 15459  17F8  0501               	andwf	1,w
 15460  17F9  00DE               	movwf	??_setRF_DimmerLights
 15461  17FA  085E               	movf	??_setRF_DimmerLights,w
 15462  17FB  00DA               	movwf	setProductData@value
 15463  17FC  300F               	movlw	15
 15464  17FD  319D  25D4         	fcall	_setProductData
 15465  17FF  0008               	return
 15466  1800                     __end_of_setRF_DimmerLights:	
 15467                           
 15468                           	psect	text106
 15469  1E11                     __ptext106:	
 15470 ;; *************** function _setDimmerLights_Line *****************
 15471 ;; Defined at:
 15472 ;;		line 936 in file "../src/Dimmer_B1.c"
 15473 ;; Parameters:    Size  Location     Type
 15474 ;;  lights          1    wreg     unsigned char 
 15475 ;; Auto vars:     Size  Location     Type
 15476 ;;  lights          1    2[COMMON] unsigned char 
 15477 ;; Return value:  Size  Location     Type
 15478 ;;		None               void
 15479 ;; Registers used:
 15480 ;;		wreg
 15481 ;; Tracked objects:
 15482 ;;		On entry : 0/0
 15483 ;;		On exit  : 0/0
 15484 ;;		Unchanged: 0/0
 15485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;Total ram usage:        1 bytes
 15491 ;; Hardware stack levels used:    1
 15492 ;; Hardware stack levels required when called:    3
 15493 ;; This function calls:
 15494 ;;		Nothing
 15495 ;; This function is called by:
 15496 ;;		_setDimmerLights_OnOff
 15497 ;;		_setDimmerLights_Dimming
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           
 15502                           ;psect for function _setDimmerLights_Line
 15503  1E11                     _setDimmerLights_Line:	
 15504                           
 15505                           ;incstack = 0
 15506                           ; Regs used in _setDimmerLights_Line: [wreg]
 15507                           ;setDimmerLights_Line@lights stored from wreg
 15508  1E11  00F2               	movwf	setDimmerLights_Line@lights
 15509                           
 15510                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15511  1E12  0022               	movlb	2	; select bank2
 15512  1E13  14A0               	bsf	_Dimmer^(0+256),1
 15513                           
 15514                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15515  1E14  10D9               	bcf	(_DimmerLights1^(0+256)+1),1
 15516                           
 15517                           ;Dimmer_B1.c: 940: if (lights == 1 && lights != 0) {
 15518  1E15  0872               	movf	setDimmerLights_Line@lights,w
 15519  1E16  3A01               	xorlw	1
 15520  1E17  1D03               	skipz
 15521  1E18  0008               	return
 15522  1E19  0872               	movf	setDimmerLights_Line@lights,w
 15523  1E1A  1903               	btfsc	3,2
 15524  1E1B  0008               	return
 15525                           
 15526                           ;Dimmer_B1.c: 941: DimmerLights1.Line = 1;
 15527  1E1C  14D9               	bsf	(_DimmerLights1^(0+256)+1),1
 15528  1E1D  0008               	return
 15529  1E1E                     __end_of_setDimmerLights_Line:	
 15530                           
 15531                           	psect	text107
 15532  1DE0                     __ptext107:	
 15533 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15534 ;; Defined at:
 15535 ;;		line 86 in file "../src/Dimmer_B1.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;  lights          1    wreg     unsigned char 
 15538 ;;  value           1   58[BANK0 ] unsigned char 
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;  lights          1   60[BANK0 ] unsigned char 
 15541 ;; Return value:  Size  Location     Type
 15542 ;;		None               void
 15543 ;; Registers used:
 15544 ;;		wreg
 15545 ;; Tracked objects:
 15546 ;;		On entry : 0/0
 15547 ;;		On exit  : 0/0
 15548 ;;		Unchanged: 0/0
 15549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15550 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15554 ;;Total ram usage:        3 bytes
 15555 ;; Hardware stack levels used:    1
 15556 ;; Hardware stack levels required when called:    3
 15557 ;; This function calls:
 15558 ;;		Nothing
 15559 ;; This function is called by:
 15560 ;;		_setDimmerLights_OnOff
 15561 ;;		_setDimmerLights_Dimming
 15562 ;;		_setRFSW_AdjControl
 15563 ;; This function uses a non-reentrant model
 15564 ;;
 15565                           
 15566                           
 15567                           ;psect for function _setDimmerIntr_MaxmumValue
 15568  1DE0                     _setDimmerIntr_MaxmumValue:	
 15569                           
 15570                           ;incstack = 0
 15571                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15572                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15573  1DE0  0020               	movlb	0	; select bank0
 15574  1DE1  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15575                           
 15576                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15577  1DE2  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15578  1DE3  3A01               	xorlw	1
 15579  1DE4  1D03               	skipz
 15580  1DE5  0008               	return
 15581                           
 15582                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15583  1DE6  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15584  1DE7  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15585  1DE8  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15586  1DE9  0021               	movlb	1	; select bank1
 15587  1DEA  00ED               	movwf	(_DimmerIntr1^(0+128)+5)
 15588  1DEB  0008               	return
 15589  1DEC                     __end_of_setDimmerIntr_MaxmumValue:	
 15590                           
 15591                           	psect	text108
 15592  1F6F                     __ptext108:	
 15593 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15594 ;; Defined at:
 15595 ;;		line 162 in file "../src/Dimmer_B1.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;  lights          1    wreg     unsigned char 
 15598 ;;  command         1    2[COMMON] unsigned char 
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;  lights          1    4[COMMON] unsigned char 
 15601 ;; Return value:  Size  Location     Type
 15602 ;;		None               void
 15603 ;; Registers used:
 15604 ;;		wreg, status,2, status,0
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15610 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;Total ram usage:        3 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    3
 15617 ;; This function calls:
 15618 ;;		Nothing
 15619 ;; This function is called by:
 15620 ;;		_setDimmerLights_Dimming
 15621 ;; This function uses a non-reentrant model
 15622 ;;
 15623                           
 15624                           
 15625                           ;psect for function _setDimmerIntr_Dimming_Sw
 15626  1F6F                     _setDimmerIntr_Dimming_Sw:	
 15627                           
 15628                           ;incstack = 0
 15629                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15630                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15631  1F6F  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15632                           
 15633                           ;Dimmer_B1.c: 164: if (lights == 1) {
 15634  1F70  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15635  1F71  3A01               	xorlw	1
 15636  1F72  1D03               	skipz
 15637  1F73  0008               	return
 15638                           
 15639                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15640  1F74  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15641  1F75  3A01               	xorlw	1
 15642  1F76  3000               	movlw	0
 15643  1F77  1903               	skipnz
 15644  1F78  3001               	movlw	1
 15645  1F79  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15646  1F7A  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15647  1F7B  0021               	movlb	1	; select bank1
 15648  1F7C  0868               	movf	_DimmerIntr1^(0+128),w
 15649  1F7D  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15650  1F7E  39EF               	andlw	-17
 15651  1F7F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15652  1F80  00E8               	movwf	_DimmerIntr1^(0+128)
 15653  1F81  0008               	return
 15654  1F82                     __end_of_setDimmerIntr_Dimming_Sw:	
 15655                           
 15656                           	psect	text109
 15657  0939                     __ptext109:	
 15658 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15659 ;; Defined at:
 15660 ;;		line 1035 in file "../src/Dimmer_B1.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;  value           1    wreg     unsigned char 
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;  value           1   54[BANK0 ] unsigned char 
 15665 ;;  i               3   55[BANK0 ] float 
 15666 ;; Return value:  Size  Location     Type
 15667 ;;                  1    wreg      unsigned char 
 15668 ;; Registers used:
 15669 ;;		wreg, status,2, status,0, pclath, cstack
 15670 ;; Tracked objects:
 15671 ;;		On entry : 0/0
 15672 ;;		On exit  : 0/0
 15673 ;;		Unchanged: 0/0
 15674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;Total ram usage:        6 bytes
 15680 ;; Hardware stack levels used:    1
 15681 ;; Hardware stack levels required when called:    5
 15682 ;; This function calls:
 15683 ;;		___awtoft
 15684 ;;		___ftadd
 15685 ;;		___ftdiv
 15686 ;;		___ftneg
 15687 ;;		___fttol
 15688 ;; This function is called by:
 15689 ;;		_setDimmerLights_OnOff
 15690 ;;		_setDimmerLights_Dimming
 15691 ;;		_Flash_Memory_Initialization
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           
 15696                           ;psect for function _getDimmerLights_ValueToPercent
 15697  0939                     _getDimmerLights_ValueToPercent:	
 15698                           
 15699                           ;incstack = 0
 15700                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 15701                           ;getDimmerLights_ValueToPercent@value stored from wreg
 15702  0939  0020               	movlb	0	; select bank0
 15703  093A  00D6               	movwf	getDimmerLights_ValueToPercent@value
 15704                           
 15705                           ;Dimmer_B1.c: 1043: float i = ((char)(70*0.8)) - ((char)(30*0.8));
 15706  093B  3000               	movlw	0
 15707  093C  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15708  093D  3000               	movlw	0
 15709  093E  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15710  093F  3042               	movlw	66
 15711  0940  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15712                           
 15713                           ;Dimmer_B1.c: 1044: i /= 100;
 15714  0941  3000               	movlw	0
 15715  0942  00A6               	movwf	___ftdiv@f2
 15716  0943  30C8               	movlw	200
 15717  0944  00A7               	movwf	___ftdiv@f2+1
 15718  0945  3042               	movlw	66
 15719  0946  00A8               	movwf	___ftdiv@f2+2
 15720  0947  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15721  0948  00A9               	movwf	___ftdiv@f1
 15722  0949  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15723  094A  00AA               	movwf	___ftdiv@f1+1
 15724  094B  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15725  094C  00AB               	movwf	___ftdiv@f1+2
 15726  094D  318D  253D  3189   	fcall	___ftdiv
 15727  0950  0020               	movlb	0	; select bank0
 15728  0951  0826               	movf	?___ftdiv,w
 15729  0952  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15730  0953  0827               	movf	?___ftdiv+1,w
 15731  0954  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15732  0955  0828               	movf	?___ftdiv+2,w
 15733  0956  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15734                           
 15735                           ;Dimmer_B1.c: 1046: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 15736  0957  0856               	movf	getDimmerLights_ValueToPercent@value,w
 15737  0958  00D4               	movwf	??_getDimmerLights_ValueToPercent
 15738  0959  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 15739  095A  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 15740  095B  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 15741  095C  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 15742  095D  1903               	skipnz
 15743  095E  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 15744  095F  0854               	movf	??_getDimmerLights_ValueToPercent,w
 15745  0960  3E38               	addlw	56
 15746  0961  00A0               	movwf	___awtoft@c
 15747  0962  3000               	movlw	0
 15748  0963  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 15749  0964  00A1               	movwf	___awtoft@c+1
 15750  0965  3191  21CC  3189   	fcall	___awtoft
 15751  0968  0020               	movlb	0	; select bank0
 15752  0969  0820               	movf	?___awtoft,w
 15753  096A  00A9               	movwf	___ftdiv@f1
 15754  096B  0821               	movf	?___awtoft+1,w
 15755  096C  00AA               	movwf	___ftdiv@f1+1
 15756  096D  0822               	movf	?___awtoft+2,w
 15757  096E  00AB               	movwf	___ftdiv@f1+2
 15758  096F  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15759  0970  00A6               	movwf	___ftdiv@f2
 15760  0971  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15761  0972  00A7               	movwf	___ftdiv@f2+1
 15762  0973  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15763  0974  00A8               	movwf	___ftdiv@f2+2
 15764  0975  318D  253D  3189   	fcall	___ftdiv
 15765  0978  0020               	movlb	0	; select bank0
 15766  0979  0826               	movf	?___ftdiv,w
 15767  097A  00B6               	movwf	___ftneg@f1
 15768  097B  0827               	movf	?___ftdiv+1,w
 15769  097C  00B7               	movwf	___ftneg@f1+1
 15770  097D  0828               	movf	?___ftdiv+2,w
 15771  097E  00B8               	movwf	___ftneg@f1+2
 15772  097F  319D  2546  3189   	fcall	___ftneg
 15773  0982  0020               	movlb	0	; select bank0
 15774  0983  0836               	movf	?___ftneg,w
 15775  0984  00BC               	movwf	___ftadd@f2
 15776  0985  0837               	movf	?___ftneg+1,w
 15777  0986  00BD               	movwf	___ftadd@f2+1
 15778  0987  0838               	movf	?___ftneg+2,w
 15779  0988  00BE               	movwf	___ftadd@f2+2
 15780  0989  3000               	movlw	0
 15781  098A  00B9               	movwf	___ftadd@f1
 15782  098B  30C8               	movlw	200
 15783  098C  00BA               	movwf	___ftadd@f1+1
 15784  098D  3042               	movlw	66
 15785  098E  00BB               	movwf	___ftadd@f1+2
 15786  098F  3183  2356  3189   	fcall	___ftadd
 15787  0992  0020               	movlb	0	; select bank0
 15788  0993  0839               	movf	?___ftadd,w
 15789  0994  00C6               	movwf	___fttol@f1
 15790  0995  083A               	movf	?___ftadd+1,w
 15791  0996  00C7               	movwf	___fttol@f1+1
 15792  0997  083B               	movf	?___ftadd+2,w
 15793  0998  00C8               	movwf	___fttol@f1+2
 15794  0999  318C  24B6         	fcall	___fttol
 15795  099B  0020               	movlb	0	; select bank0
 15796  099C  0846               	movf	?___fttol,w
 15797  099D  0008               	return
 15798  099E                     __end_of_getDimmerLights_ValueToPercent:	
 15799                           
 15800                           	psect	text110
 15801  0CB6                     __ptext110:	
 15802 ;; *************** function ___fttol *****************
 15803 ;; Defined at:
 15804 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;  f1              3   38[BANK0 ] float 
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  lval            4   47[BANK0 ] unsigned long 
 15809 ;;  exp1            1   51[BANK0 ] unsigned char 
 15810 ;;  sign1           1   46[BANK0 ] unsigned char 
 15811 ;; Return value:  Size  Location     Type
 15812 ;;                  4   38[BANK0 ] long 
 15813 ;; Registers used:
 15814 ;;		wreg, status,2, status,0
 15815 ;; Tracked objects:
 15816 ;;		On entry : 0/0
 15817 ;;		On exit  : 0/0
 15818 ;;		Unchanged: 0/0
 15819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15824 ;;Total ram usage:       14 bytes
 15825 ;; Hardware stack levels used:    1
 15826 ;; Hardware stack levels required when called:    3
 15827 ;; This function calls:
 15828 ;;		Nothing
 15829 ;; This function is called by:
 15830 ;;		_getDimmerLights_PercentToValue
 15831 ;;		_getDimmerLights_ValueToPercent
 15832 ;; This function uses a non-reentrant model
 15833 ;;
 15834                           
 15835                           
 15836                           ;psect for function ___fttol
 15837  0CB6                     ___fttol:	
 15838                           
 15839                           ;incstack = 0
 15840                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15841  0CB6  0020               	movlb	0	; select bank0
 15842  0CB7  0846               	movf	___fttol@f1,w
 15843  0CB8  00CA               	movwf	??___fttol
 15844  0CB9  0847               	movf	___fttol@f1+1,w
 15845  0CBA  00CB               	movwf	??___fttol+1
 15846  0CBB  0848               	movf	___fttol@f1+2,w
 15847  0CBC  00CC               	movwf	??___fttol+2
 15848  0CBD  1003               	clrc
 15849  0CBE  0D4B               	rlf	??___fttol+1,w
 15850  0CBF  0D4C               	rlf	??___fttol+2,w
 15851  0CC0  00CD               	movwf	??___fttol+3
 15852  0CC1  084D               	movf	??___fttol+3,w
 15853  0CC2  00D3               	movwf	___fttol@exp1
 15854  0CC3  08D3               	movf	___fttol@exp1,f
 15855  0CC4  1D03               	skipz
 15856  0CC5  2CCF               	goto	l5945
 15857  0CC6  3000               	movlw	0
 15858  0CC7  00C9               	movwf	?___fttol+3
 15859  0CC8  3000               	movlw	0
 15860  0CC9  00C8               	movwf	?___fttol+2
 15861  0CCA  3000               	movlw	0
 15862  0CCB  00C7               	movwf	?___fttol+1
 15863  0CCC  3000               	movlw	0
 15864  0CCD  00C6               	movwf	?___fttol
 15865  0CCE  0008               	return
 15866  0CCF                     l5945:	
 15867  0CCF  0846               	movf	___fttol@f1,w
 15868  0CD0  00CA               	movwf	??___fttol
 15869  0CD1  0847               	movf	___fttol@f1+1,w
 15870  0CD2  00CB               	movwf	??___fttol+1
 15871  0CD3  0848               	movf	___fttol@f1+2,w
 15872  0CD4  00CC               	movwf	??___fttol+2
 15873  0CD5  3017               	movlw	23
 15874  0CD6                     u5025:	
 15875  0CD6  36CC               	lsrf	??___fttol+2,f
 15876  0CD7  0CCB               	rrf	??___fttol+1,f
 15877  0CD8  0CCA               	rrf	??___fttol,f
 15878  0CD9  0B89               	decfsz	9,f
 15879  0CDA  2CD6               	goto	u5025
 15880  0CDB  084A               	movf	??___fttol,w
 15881  0CDC  00CD               	movwf	??___fttol+3
 15882  0CDD  084D               	movf	??___fttol+3,w
 15883  0CDE  00CE               	movwf	___fttol@sign1
 15884  0CDF  17C7               	bsf	___fttol@f1+1,7
 15885  0CE0  30FF               	movlw	255
 15886  0CE1  05C6               	andwf	___fttol@f1,f
 15887  0CE2  30FF               	movlw	255
 15888  0CE3  05C7               	andwf	___fttol@f1+1,f
 15889  0CE4  3000               	movlw	0
 15890  0CE5  05C8               	andwf	___fttol@f1+2,f
 15891  0CE6  0846               	movf	___fttol@f1,w
 15892  0CE7  00CF               	movwf	___fttol@lval
 15893  0CE8  0847               	movf	___fttol@f1+1,w
 15894  0CE9  00D0               	movwf	___fttol@lval+1
 15895  0CEA  0848               	movf	___fttol@f1+2,w
 15896  0CEB  00D1               	movwf	___fttol@lval+2
 15897  0CEC  01D2               	clrf	___fttol@lval+3
 15898  0CED  308E               	movlw	142
 15899  0CEE  02D3               	subwf	___fttol@exp1,f
 15900  0CEF  1FD3               	btfss	___fttol@exp1,7
 15901  0CF0  2D0D               	goto	l5965
 15902  0CF1  0853               	movf	___fttol@exp1,w
 15903  0CF2  3A80               	xorlw	128
 15904  0CF3  3E8F               	addlw	143
 15905  0CF4  1803               	skipnc
 15906  0CF5  2CFF               	goto	l5963
 15907  0CF6  3000               	movlw	0
 15908  0CF7  00C9               	movwf	?___fttol+3
 15909  0CF8  3000               	movlw	0
 15910  0CF9  00C8               	movwf	?___fttol+2
 15911  0CFA  3000               	movlw	0
 15912  0CFB  00C7               	movwf	?___fttol+1
 15913  0CFC  3000               	movlw	0
 15914  0CFD  00C6               	movwf	?___fttol
 15915  0CFE  0008               	return
 15916  0CFF                     l5963:	
 15917  0CFF  3001               	movlw	1
 15918  0D00                     u5055:	
 15919  0D00  36D2               	lsrf	___fttol@lval+3,f
 15920  0D01  0CD1               	rrf	___fttol@lval+2,f
 15921  0D02  0CD0               	rrf	___fttol@lval+1,f
 15922  0D03  0CCF               	rrf	___fttol@lval,f
 15923  0D04  0B89               	decfsz	9,f
 15924  0D05  2D00               	goto	u5055
 15925  0D06  3001               	movlw	1
 15926  0D07  00CA               	movwf	??___fttol
 15927  0D08  084A               	movf	??___fttol,w
 15928  0D09  07D3               	addwf	___fttol@exp1,f
 15929  0D0A  1903               	btfsc	3,2
 15930  0D0B  2D26               	goto	l5975
 15931  0D0C  2CFF               	goto	l5963
 15932  0D0D                     l5965:	
 15933  0D0D  3018               	movlw	24
 15934  0D0E  0253               	subwf	___fttol@exp1,w
 15935  0D0F  1C03               	skipc
 15936  0D10  2D23               	goto	l5973
 15937  0D11  3000               	movlw	0
 15938  0D12  00C9               	movwf	?___fttol+3
 15939  0D13  3000               	movlw	0
 15940  0D14  00C8               	movwf	?___fttol+2
 15941  0D15  3000               	movlw	0
 15942  0D16  00C7               	movwf	?___fttol+1
 15943  0D17  3000               	movlw	0
 15944  0D18  00C6               	movwf	?___fttol
 15945  0D19  0008               	return
 15946  0D1A                     l5971:	
 15947  0D1A  3001               	movlw	1
 15948  0D1B                     u5085:	
 15949  0D1B  35CF               	lslf	___fttol@lval,f
 15950  0D1C  0DD0               	rlf	___fttol@lval+1,f
 15951  0D1D  0DD1               	rlf	___fttol@lval+2,f
 15952  0D1E  0DD2               	rlf	___fttol@lval+3,f
 15953  0D1F  0B89               	decfsz	9,f
 15954  0D20  2D1B               	goto	u5085
 15955  0D21  3001               	movlw	1
 15956  0D22  02D3               	subwf	___fttol@exp1,f
 15957  0D23                     l5973:	
 15958  0D23  08D3               	movf	___fttol@exp1,f
 15959  0D24  1D03               	skipz
 15960  0D25  2D1A               	goto	l5971
 15961  0D26                     l5975:	
 15962  0D26  084E               	movf	___fttol@sign1,w
 15963  0D27  1903               	btfsc	3,2
 15964  0D28  2D34               	goto	l5979
 15965  0D29  09CF               	comf	___fttol@lval,f
 15966  0D2A  09D0               	comf	___fttol@lval+1,f
 15967  0D2B  09D1               	comf	___fttol@lval+2,f
 15968  0D2C  09D2               	comf	___fttol@lval+3,f
 15969  0D2D  0ACF               	incf	___fttol@lval,f
 15970  0D2E  1903               	skipnz
 15971  0D2F  0AD0               	incf	___fttol@lval+1,f
 15972  0D30  1903               	skipnz
 15973  0D31  0AD1               	incf	___fttol@lval+2,f
 15974  0D32  1903               	skipnz
 15975  0D33  0AD2               	incf	___fttol@lval+3,f
 15976  0D34                     l5979:	
 15977  0D34  0852               	movf	___fttol@lval+3,w
 15978  0D35  00C9               	movwf	?___fttol+3
 15979  0D36  0851               	movf	___fttol@lval+2,w
 15980  0D37  00C8               	movwf	?___fttol+2
 15981  0D38  0850               	movf	___fttol@lval+1,w
 15982  0D39  00C7               	movwf	?___fttol+1
 15983  0D3A  084F               	movf	___fttol@lval,w
 15984  0D3B  00C6               	movwf	?___fttol
 15985  0D3C  0008               	return
 15986  0D3D                     __end_of___fttol:	
 15987                           
 15988                           	psect	text111
 15989  1D46                     __ptext111:	
 15990 ;; *************** function ___ftneg *****************
 15991 ;; Defined at:
 15992 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  f1              3   22[BANK0 ] float 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;		None
 15997 ;; Return value:  Size  Location     Type
 15998 ;;                  3   22[BANK0 ] float 
 15999 ;; Registers used:
 16000 ;;		wreg
 16001 ;; Tracked objects:
 16002 ;;		On entry : 0/0
 16003 ;;		On exit  : 0/0
 16004 ;;		Unchanged: 0/0
 16005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16006 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;Total ram usage:        3 bytes
 16011 ;; Hardware stack levels used:    1
 16012 ;; Hardware stack levels required when called:    3
 16013 ;; This function calls:
 16014 ;;		Nothing
 16015 ;; This function is called by:
 16016 ;;		_getDimmerLights_PercentToValue
 16017 ;;		_getDimmerLights_ValueToPercent
 16018 ;; This function uses a non-reentrant model
 16019 ;;
 16020                           
 16021                           
 16022                           ;psect for function ___ftneg
 16023  1D46                     ___ftneg:	
 16024                           
 16025                           ;incstack = 0
 16026                           ; Regs used in ___ftneg: [wreg]
 16027  1D46  0020               	movlb	0	; select bank0
 16028  1D47  0838               	movf	___ftneg@f1+2,w
 16029  1D48  0437               	iorwf	___ftneg@f1+1,w
 16030  1D49  0436               	iorwf	___ftneg@f1,w
 16031  1D4A  1903               	skipnz
 16032  1D4B  0008               	return
 16033  1D4C  3080               	movlw	128
 16034  1D4D  06B8               	xorwf	___ftneg@f1+2,f
 16035  1D4E  0008               	return
 16036  1D4F                     __end_of___ftneg:	
 16037                           
 16038                           	psect	text112
 16039  0D3D                     __ptext112:	
 16040 ;; *************** function ___ftdiv *****************
 16041 ;; Defined at:
 16042 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;  f2              3    6[BANK0 ] float 
 16045 ;;  f1              3    9[BANK0 ] float 
 16046 ;; Auto vars:     Size  Location     Type
 16047 ;;  f3              3   17[BANK0 ] float 
 16048 ;;  sign            1   21[BANK0 ] unsigned char 
 16049 ;;  exp             1   20[BANK0 ] unsigned char 
 16050 ;;  cntr            1   16[BANK0 ] unsigned char 
 16051 ;; Return value:  Size  Location     Type
 16052 ;;                  3    6[BANK0 ] float 
 16053 ;; Registers used:
 16054 ;;		wreg, status,2, status,0, pclath, cstack
 16055 ;; Tracked objects:
 16056 ;;		On entry : 0/0
 16057 ;;		On exit  : 0/0
 16058 ;;		Unchanged: 0/0
 16059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16060 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;Total ram usage:       16 bytes
 16065 ;; Hardware stack levels used:    1
 16066 ;; Hardware stack levels required when called:    4
 16067 ;; This function calls:
 16068 ;;		___ftpack
 16069 ;; This function is called by:
 16070 ;;		_getDimmerLights_PercentToValue
 16071 ;;		_getDimmerLights_ValueToPercent
 16072 ;; This function uses a non-reentrant model
 16073 ;;
 16074                           
 16075                           
 16076                           ;psect for function ___ftdiv
 16077  0D3D                     ___ftdiv:	
 16078                           
 16079                           ;incstack = 0
 16080                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16081  0D3D  0020               	movlb	0	; select bank0
 16082  0D3E  0829               	movf	___ftdiv@f1,w
 16083  0D3F  00AC               	movwf	??___ftdiv
 16084  0D40  082A               	movf	___ftdiv@f1+1,w
 16085  0D41  00AD               	movwf	??___ftdiv+1
 16086  0D42  082B               	movf	___ftdiv@f1+2,w
 16087  0D43  00AE               	movwf	??___ftdiv+2
 16088  0D44  1003               	clrc
 16089  0D45  0D2D               	rlf	??___ftdiv+1,w
 16090  0D46  0D2E               	rlf	??___ftdiv+2,w
 16091  0D47  00AF               	movwf	??___ftdiv+3
 16092  0D48  082F               	movf	??___ftdiv+3,w
 16093  0D49  00B4               	movwf	___ftdiv@exp
 16094  0D4A  08B4               	movf	___ftdiv@exp,f
 16095  0D4B  1D03               	skipz
 16096  0D4C  2D54               	goto	l5845
 16097  0D4D  3000               	movlw	0
 16098  0D4E  00A6               	movwf	?___ftdiv
 16099  0D4F  3000               	movlw	0
 16100  0D50  00A7               	movwf	?___ftdiv+1
 16101  0D51  3000               	movlw	0
 16102  0D52  00A8               	movwf	?___ftdiv+2
 16103  0D53  0008               	return
 16104  0D54                     l5845:	
 16105  0D54  0826               	movf	___ftdiv@f2,w
 16106  0D55  00AC               	movwf	??___ftdiv
 16107  0D56  0827               	movf	___ftdiv@f2+1,w
 16108  0D57  00AD               	movwf	??___ftdiv+1
 16109  0D58  0828               	movf	___ftdiv@f2+2,w
 16110  0D59  00AE               	movwf	??___ftdiv+2
 16111  0D5A  1003               	clrc
 16112  0D5B  0D2D               	rlf	??___ftdiv+1,w
 16113  0D5C  0D2E               	rlf	??___ftdiv+2,w
 16114  0D5D  00AF               	movwf	??___ftdiv+3
 16115  0D5E  082F               	movf	??___ftdiv+3,w
 16116  0D5F  00B5               	movwf	___ftdiv@sign
 16117  0D60  08B5               	movf	___ftdiv@sign,f
 16118  0D61  1D03               	skipz
 16119  0D62  2D6A               	goto	l5851
 16120  0D63  3000               	movlw	0
 16121  0D64  00A6               	movwf	?___ftdiv
 16122  0D65  3000               	movlw	0
 16123  0D66  00A7               	movwf	?___ftdiv+1
 16124  0D67  3000               	movlw	0
 16125  0D68  00A8               	movwf	?___ftdiv+2
 16126  0D69  0008               	return
 16127  0D6A                     l5851:	
 16128  0D6A  3000               	movlw	0
 16129  0D6B  00B1               	movwf	___ftdiv@f3
 16130  0D6C  3000               	movlw	0
 16131  0D6D  00B2               	movwf	___ftdiv@f3+1
 16132  0D6E  3000               	movlw	0
 16133  0D6F  00B3               	movwf	___ftdiv@f3+2
 16134  0D70  3089               	movlw	137
 16135  0D71  0735               	addwf	___ftdiv@sign,w
 16136  0D72  00AC               	movwf	??___ftdiv
 16137  0D73  082C               	movf	??___ftdiv,w
 16138  0D74  02B4               	subwf	___ftdiv@exp,f
 16139  0D75  0829               	movf	___ftdiv@f1,w
 16140  0D76  00AC               	movwf	??___ftdiv
 16141  0D77  082A               	movf	___ftdiv@f1+1,w
 16142  0D78  00AD               	movwf	??___ftdiv+1
 16143  0D79  082B               	movf	___ftdiv@f1+2,w
 16144  0D7A  00AE               	movwf	??___ftdiv+2
 16145  0D7B  3010               	movlw	16
 16146  0D7C                     u4825:	
 16147  0D7C  36AE               	lsrf	??___ftdiv+2,f
 16148  0D7D  0CAD               	rrf	??___ftdiv+1,f
 16149  0D7E  0CAC               	rrf	??___ftdiv,f
 16150  0D7F  0B89               	decfsz	9,f
 16151  0D80  2D7C               	goto	u4825
 16152  0D81  082C               	movf	??___ftdiv,w
 16153  0D82  00AF               	movwf	??___ftdiv+3
 16154  0D83  082F               	movf	??___ftdiv+3,w
 16155  0D84  00B5               	movwf	___ftdiv@sign
 16156  0D85  0826               	movf	___ftdiv@f2,w
 16157  0D86  00AC               	movwf	??___ftdiv
 16158  0D87  0827               	movf	___ftdiv@f2+1,w
 16159  0D88  00AD               	movwf	??___ftdiv+1
 16160  0D89  0828               	movf	___ftdiv@f2+2,w
 16161  0D8A  00AE               	movwf	??___ftdiv+2
 16162  0D8B  3010               	movlw	16
 16163  0D8C                     u4835:	
 16164  0D8C  36AE               	lsrf	??___ftdiv+2,f
 16165  0D8D  0CAD               	rrf	??___ftdiv+1,f
 16166  0D8E  0CAC               	rrf	??___ftdiv,f
 16167  0D8F  0B89               	decfsz	9,f
 16168  0D90  2D8C               	goto	u4835
 16169  0D91  082C               	movf	??___ftdiv,w
 16170  0D92  00AF               	movwf	??___ftdiv+3
 16171  0D93  082F               	movf	??___ftdiv+3,w
 16172  0D94  06B5               	xorwf	___ftdiv@sign,f
 16173  0D95  3080               	movlw	128
 16174  0D96  00AC               	movwf	??___ftdiv
 16175  0D97  082C               	movf	??___ftdiv,w
 16176  0D98  05B5               	andwf	___ftdiv@sign,f
 16177  0D99  17AA               	bsf	___ftdiv@f1+1,7
 16178  0D9A  30FF               	movlw	255
 16179  0D9B  05A9               	andwf	___ftdiv@f1,f
 16180  0D9C  30FF               	movlw	255
 16181  0D9D  05AA               	andwf	___ftdiv@f1+1,f
 16182  0D9E  3000               	movlw	0
 16183  0D9F  05AB               	andwf	___ftdiv@f1+2,f
 16184  0DA0  17A7               	bsf	___ftdiv@f2+1,7
 16185  0DA1  30FF               	movlw	255
 16186  0DA2  05A6               	andwf	___ftdiv@f2,f
 16187  0DA3  30FF               	movlw	255
 16188  0DA4  05A7               	andwf	___ftdiv@f2+1,f
 16189  0DA5  3000               	movlw	0
 16190  0DA6  05A8               	andwf	___ftdiv@f2+2,f
 16191  0DA7  3018               	movlw	24
 16192  0DA8  00AC               	movwf	??___ftdiv
 16193  0DA9  082C               	movf	??___ftdiv,w
 16194  0DAA  00B0               	movwf	___ftdiv@cntr
 16195  0DAB                     l5865:	
 16196  0DAB  3001               	movlw	1
 16197  0DAC                     u4845:	
 16198  0DAC  35B1               	lslf	___ftdiv@f3,f
 16199  0DAD  0DB2               	rlf	___ftdiv@f3+1,f
 16200  0DAE  0DB3               	rlf	___ftdiv@f3+2,f
 16201  0DAF  0B89               	decfsz	9,f
 16202  0DB0  2DAC               	goto	u4845
 16203  0DB1  0828               	movf	___ftdiv@f2+2,w
 16204  0DB2  022B               	subwf	___ftdiv@f1+2,w
 16205  0DB3  1D03               	skipz
 16206  0DB4  2DBB               	goto	u4855
 16207  0DB5  0827               	movf	___ftdiv@f2+1,w
 16208  0DB6  022A               	subwf	___ftdiv@f1+1,w
 16209  0DB7  1D03               	skipz
 16210  0DB8  2DBB               	goto	u4855
 16211  0DB9  0826               	movf	___ftdiv@f2,w
 16212  0DBA  0229               	subwf	___ftdiv@f1,w
 16213  0DBB                     u4855:	
 16214  0DBB  1C03               	skipc
 16215  0DBC  2DC4               	goto	l5873
 16216  0DBD  0826               	movf	___ftdiv@f2,w
 16217  0DBE  02A9               	subwf	___ftdiv@f1,f
 16218  0DBF  0827               	movf	___ftdiv@f2+1,w
 16219  0DC0  3BAA               	subwfb	___ftdiv@f1+1,f
 16220  0DC1  0828               	movf	___ftdiv@f2+2,w
 16221  0DC2  3BAB               	subwfb	___ftdiv@f1+2,f
 16222  0DC3  1431               	bsf	___ftdiv@f3,0
 16223  0DC4                     l5873:	
 16224  0DC4  3001               	movlw	1
 16225  0DC5                     u4865:	
 16226  0DC5  35A9               	lslf	___ftdiv@f1,f
 16227  0DC6  0DAA               	rlf	___ftdiv@f1+1,f
 16228  0DC7  0DAB               	rlf	___ftdiv@f1+2,f
 16229  0DC8  0B89               	decfsz	9,f
 16230  0DC9  2DC5               	goto	u4865
 16231  0DCA  3001               	movlw	1
 16232  0DCB  02B0               	subwf	___ftdiv@cntr,f
 16233  0DCC  1D03               	btfss	3,2
 16234  0DCD  2DAB               	goto	l5865
 16235  0DCE  0831               	movf	___ftdiv@f3,w
 16236  0DCF  00F2               	movwf	___ftpack@arg
 16237  0DD0  0832               	movf	___ftdiv@f3+1,w
 16238  0DD1  00F3               	movwf	___ftpack@arg+1
 16239  0DD2  0833               	movf	___ftdiv@f3+2,w
 16240  0DD3  00F4               	movwf	___ftpack@arg+2
 16241  0DD4  0834               	movf	___ftdiv@exp,w
 16242  0DD5  00AC               	movwf	??___ftdiv
 16243  0DD6  082C               	movf	??___ftdiv,w
 16244  0DD7  00F5               	movwf	___ftpack@exp
 16245  0DD8  0835               	movf	___ftdiv@sign,w
 16246  0DD9  00AD               	movwf	??___ftdiv+1
 16247  0DDA  082D               	movf	??___ftdiv+1,w
 16248  0DDB  00F6               	movwf	___ftpack@sign
 16249  0DDC  3188  2014         	fcall	___ftpack
 16250  0DDE  0872               	movf	?___ftpack,w
 16251  0DDF  0020               	movlb	0	; select bank0
 16252  0DE0  00A6               	movwf	?___ftdiv
 16253  0DE1  0873               	movf	?___ftpack+1,w
 16254  0DE2  00A7               	movwf	?___ftdiv+1
 16255  0DE3  0874               	movf	?___ftpack+2,w
 16256  0DE4  00A8               	movwf	?___ftdiv+2
 16257  0DE5  0008               	return
 16258  0DE6                     __end_of___ftdiv:	
 16259                           
 16260                           	psect	text113
 16261  0356                     __ptext113:	
 16262 ;; *************** function ___ftadd *****************
 16263 ;; Defined at:
 16264 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16265 ;; Parameters:    Size  Location     Type
 16266 ;;  f1              3   25[BANK0 ] float 
 16267 ;;  f2              3   28[BANK0 ] float 
 16268 ;; Auto vars:     Size  Location     Type
 16269 ;;  exp1            1   37[BANK0 ] unsigned char 
 16270 ;;  exp2            1   36[BANK0 ] unsigned char 
 16271 ;;  sign            1   35[BANK0 ] unsigned char 
 16272 ;; Return value:  Size  Location     Type
 16273 ;;                  3   25[BANK0 ] float 
 16274 ;; Registers used:
 16275 ;;		wreg, status,2, status,0, pclath, cstack
 16276 ;; Tracked objects:
 16277 ;;		On entry : 0/0
 16278 ;;		On exit  : 0/0
 16279 ;;		Unchanged: 0/0
 16280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;Total ram usage:       13 bytes
 16286 ;; Hardware stack levels used:    1
 16287 ;; Hardware stack levels required when called:    4
 16288 ;; This function calls:
 16289 ;;		___ftpack
 16290 ;; This function is called by:
 16291 ;;		_getDimmerLights_PercentToValue
 16292 ;;		_getDimmerLights_ValueToPercent
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           
 16297                           ;psect for function ___ftadd
 16298  0356                     ___ftadd:	
 16299                           
 16300                           ;incstack = 0
 16301                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16302  0356  0020               	movlb	0	; select bank0
 16303  0357  0839               	movf	___ftadd@f1,w
 16304  0358  00BF               	movwf	??___ftadd
 16305  0359  083A               	movf	___ftadd@f1+1,w
 16306  035A  00C0               	movwf	??___ftadd+1
 16307  035B  083B               	movf	___ftadd@f1+2,w
 16308  035C  00C1               	movwf	??___ftadd+2
 16309  035D  1003               	clrc
 16310  035E  0D40               	rlf	??___ftadd+1,w
 16311  035F  0D41               	rlf	??___ftadd+2,w
 16312  0360  00C2               	movwf	??___ftadd+3
 16313  0361  0842               	movf	??___ftadd+3,w
 16314  0362  00C5               	movwf	___ftadd@exp1
 16315  0363  083C               	movf	___ftadd@f2,w
 16316  0364  00BF               	movwf	??___ftadd
 16317  0365  083D               	movf	___ftadd@f2+1,w
 16318  0366  00C0               	movwf	??___ftadd+1
 16319  0367  083E               	movf	___ftadd@f2+2,w
 16320  0368  00C1               	movwf	??___ftadd+2
 16321  0369  1003               	clrc
 16322  036A  0D40               	rlf	??___ftadd+1,w
 16323  036B  0D41               	rlf	??___ftadd+2,w
 16324  036C  00C2               	movwf	??___ftadd+3
 16325  036D  0842               	movf	??___ftadd+3,w
 16326  036E  00C4               	movwf	___ftadd@exp2
 16327  036F  0845               	movf	___ftadd@exp1,w
 16328  0370  1903               	btfsc	3,2
 16329  0371  2B7E               	goto	l5775
 16330  0372  0844               	movf	___ftadd@exp2,w
 16331  0373  0245               	subwf	___ftadd@exp1,w
 16332  0374  1803               	skipnc
 16333  0375  2B85               	goto	l5779
 16334  0376  0345               	decf	___ftadd@exp1,w
 16335  0377  3AFF               	xorlw	255
 16336  0378  0744               	addwf	___ftadd@exp2,w
 16337  0379  00BF               	movwf	??___ftadd
 16338  037A  3019               	movlw	25
 16339  037B  023F               	subwf	??___ftadd,w
 16340  037C  1C03               	skipc
 16341  037D  2B85               	goto	l5779
 16342  037E                     l5775:	
 16343  037E  083C               	movf	___ftadd@f2,w
 16344  037F  00B9               	movwf	?___ftadd
 16345  0380  083D               	movf	___ftadd@f2+1,w
 16346  0381  00BA               	movwf	?___ftadd+1
 16347  0382  083E               	movf	___ftadd@f2+2,w
 16348  0383  00BB               	movwf	?___ftadd+2
 16349  0384  0008               	return
 16350  0385                     l5779:	
 16351  0385  0844               	movf	___ftadd@exp2,w
 16352  0386  1903               	btfsc	3,2
 16353  0387  0008               	return
 16354  0388  0845               	movf	___ftadd@exp1,w
 16355  0389  0244               	subwf	___ftadd@exp2,w
 16356  038A  1803               	skipnc
 16357  038B  2B94               	goto	l5785
 16358  038C  0344               	decf	___ftadd@exp2,w
 16359  038D  3AFF               	xorlw	255
 16360  038E  0745               	addwf	___ftadd@exp1,w
 16361  038F  00BF               	movwf	??___ftadd
 16362  0390  3019               	movlw	25
 16363  0391  023F               	subwf	??___ftadd,w
 16364  0392  1803               	btfsc	3,0
 16365  0393  0008               	return
 16366  0394                     l5785:	
 16367  0394  3006               	movlw	6
 16368  0395  00BF               	movwf	??___ftadd
 16369  0396  083F               	movf	??___ftadd,w
 16370  0397  00C3               	movwf	___ftadd@sign
 16371  0398  1BBB               	btfsc	___ftadd@f1+2,7
 16372  0399  17C3               	bsf	___ftadd@sign,7
 16373  039A  1BBE               	btfsc	___ftadd@f2+2,7
 16374  039B  1743               	bsf	___ftadd@sign,6
 16375  039C  17BA               	bsf	___ftadd@f1+1,7
 16376  039D  30FF               	movlw	255
 16377  039E  05B9               	andwf	___ftadd@f1,f
 16378  039F  30FF               	movlw	255
 16379  03A0  05BA               	andwf	___ftadd@f1+1,f
 16380  03A1  3000               	movlw	0
 16381  03A2  05BB               	andwf	___ftadd@f1+2,f
 16382  03A3  17BD               	bsf	___ftadd@f2+1,7
 16383  03A4  30FF               	movlw	255
 16384  03A5  05BC               	andwf	___ftadd@f2,f
 16385  03A6  30FF               	movlw	255
 16386  03A7  05BD               	andwf	___ftadd@f2+1,f
 16387  03A8  3000               	movlw	0
 16388  03A9  05BE               	andwf	___ftadd@f2+2,f
 16389  03AA  0844               	movf	___ftadd@exp2,w
 16390  03AB  0245               	subwf	___ftadd@exp1,w
 16391  03AC  1803               	skipnc
 16392  03AD  2BD0               	goto	l5807
 16393  03AE                     l5797:	
 16394  03AE  3001               	movlw	1
 16395  03AF                     u4665:	
 16396  03AF  35BC               	lslf	___ftadd@f2,f
 16397  03B0  0DBD               	rlf	___ftadd@f2+1,f
 16398  03B1  0DBE               	rlf	___ftadd@f2+2,f
 16399  03B2  0B89               	decfsz	9,f
 16400  03B3  2BAF               	goto	u4665
 16401  03B4  3001               	movlw	1
 16402  03B5  02C4               	subwf	___ftadd@exp2,f
 16403  03B6  0844               	movf	___ftadd@exp2,w
 16404  03B7  0645               	xorwf	___ftadd@exp1,w
 16405  03B8  1903               	skipnz
 16406  03B9  2BCB               	goto	l5805
 16407  03BA  3001               	movlw	1
 16408  03BB  02C3               	subwf	___ftadd@sign,f
 16409  03BC  0843               	movf	___ftadd@sign,w
 16410  03BD  3907               	andlw	7
 16411  03BE  1903               	btfsc	3,2
 16412  03BF  2BCB               	goto	l5805
 16413  03C0  2BAE               	goto	l5797
 16414  03C1                     l5803:	
 16415  03C1  3001               	movlw	1
 16416  03C2                     u4695:	
 16417  03C2  36BB               	lsrf	___ftadd@f1+2,f
 16418  03C3  0CBA               	rrf	___ftadd@f1+1,f
 16419  03C4  0CB9               	rrf	___ftadd@f1,f
 16420  03C5  0B89               	decfsz	9,f
 16421  03C6  2BC2               	goto	u4695
 16422  03C7  3001               	movlw	1
 16423  03C8  00BF               	movwf	??___ftadd
 16424  03C9  083F               	movf	??___ftadd,w
 16425  03CA  07C5               	addwf	___ftadd@exp1,f
 16426  03CB                     l5805:	
 16427  03CB  0845               	movf	___ftadd@exp1,w
 16428  03CC  0644               	xorwf	___ftadd@exp2,w
 16429  03CD  1903               	btfsc	3,2
 16430  03CE  2BF5               	goto	l2868
 16431  03CF  2BC1               	goto	l5803
 16432  03D0                     l5807:	
 16433  03D0  0845               	movf	___ftadd@exp1,w
 16434  03D1  0244               	subwf	___ftadd@exp2,w
 16435  03D2  1803               	skipnc
 16436  03D3  2BF5               	goto	l2868
 16437  03D4                     l5809:	
 16438  03D4  3001               	movlw	1
 16439  03D5                     u4725:	
 16440  03D5  35B9               	lslf	___ftadd@f1,f
 16441  03D6  0DBA               	rlf	___ftadd@f1+1,f
 16442  03D7  0DBB               	rlf	___ftadd@f1+2,f
 16443  03D8  0B89               	decfsz	9,f
 16444  03D9  2BD5               	goto	u4725
 16445  03DA  3001               	movlw	1
 16446  03DB  02C5               	subwf	___ftadd@exp1,f
 16447  03DC  0844               	movf	___ftadd@exp2,w
 16448  03DD  0645               	xorwf	___ftadd@exp1,w
 16449  03DE  1903               	skipnz
 16450  03DF  2BF1               	goto	l5817
 16451  03E0  3001               	movlw	1
 16452  03E1  02C3               	subwf	___ftadd@sign,f
 16453  03E2  0843               	movf	___ftadd@sign,w
 16454  03E3  3907               	andlw	7
 16455  03E4  1903               	btfsc	3,2
 16456  03E5  2BF1               	goto	l5817
 16457  03E6  2BD4               	goto	l5809
 16458  03E7                     l5815:	
 16459  03E7  3001               	movlw	1
 16460  03E8                     u4755:	
 16461  03E8  36BE               	lsrf	___ftadd@f2+2,f
 16462  03E9  0CBD               	rrf	___ftadd@f2+1,f
 16463  03EA  0CBC               	rrf	___ftadd@f2,f
 16464  03EB  0B89               	decfsz	9,f
 16465  03EC  2BE8               	goto	u4755
 16466  03ED  3001               	movlw	1
 16467  03EE  00BF               	movwf	??___ftadd
 16468  03EF  083F               	movf	??___ftadd,w
 16469  03F0  07C4               	addwf	___ftadd@exp2,f
 16470  03F1                     l5817:	
 16471  03F1  0845               	movf	___ftadd@exp1,w
 16472  03F2  0644               	xorwf	___ftadd@exp2,w
 16473  03F3  1D03               	skipz
 16474  03F4  2BE7               	goto	l5815
 16475  03F5                     l2868:	
 16476  03F5  1FC3               	btfss	___ftadd@sign,7
 16477  03F6  2C07               	goto	l5821
 16478  03F7  30FF               	movlw	255
 16479  03F8  06B9               	xorwf	___ftadd@f1,f
 16480  03F9  30FF               	movlw	255
 16481  03FA  06BA               	xorwf	___ftadd@f1+1,f
 16482  03FB  30FF               	movlw	255
 16483  03FC  06BB               	xorwf	___ftadd@f1+2,f
 16484  03FD  3001               	movlw	1
 16485  03FE  07B9               	addwf	___ftadd@f1,f
 16486  03FF  3000               	movlw	0
 16487  0400  1803               	skipnc
 16488  0401  3001               	movlw	1
 16489  0402  07BA               	addwf	___ftadd@f1+1,f
 16490  0403  3000               	movlw	0
 16491  0404  1803               	skipnc
 16492  0405  3001               	movlw	1
 16493  0406  07BB               	addwf	___ftadd@f1+2,f
 16494  0407                     l5821:	
 16495  0407  1F43               	btfss	___ftadd@sign,6
 16496  0408  2C19               	goto	l5825
 16497  0409  30FF               	movlw	255
 16498  040A  06BC               	xorwf	___ftadd@f2,f
 16499  040B  30FF               	movlw	255
 16500  040C  06BD               	xorwf	___ftadd@f2+1,f
 16501  040D  30FF               	movlw	255
 16502  040E  06BE               	xorwf	___ftadd@f2+2,f
 16503  040F  3001               	movlw	1
 16504  0410  07BC               	addwf	___ftadd@f2,f
 16505  0411  3000               	movlw	0
 16506  0412  1803               	skipnc
 16507  0413  3001               	movlw	1
 16508  0414  07BD               	addwf	___ftadd@f2+1,f
 16509  0415  3000               	movlw	0
 16510  0416  1803               	skipnc
 16511  0417  3001               	movlw	1
 16512  0418  07BE               	addwf	___ftadd@f2+2,f
 16513  0419                     l5825:	
 16514  0419  01C3               	clrf	___ftadd@sign
 16515  041A  0839               	movf	___ftadd@f1,w
 16516  041B  07BC               	addwf	___ftadd@f2,f
 16517  041C  083A               	movf	___ftadd@f1+1,w
 16518  041D  3DBD               	addwfc	___ftadd@f2+1,f
 16519  041E  083B               	movf	___ftadd@f1+2,w
 16520  041F  3DBE               	addwfc	___ftadd@f2+2,f
 16521  0420  1FBE               	btfss	___ftadd@f2+2,7
 16522  0421  2C34               	goto	l5835
 16523  0422  30FF               	movlw	255
 16524  0423  06BC               	xorwf	___ftadd@f2,f
 16525  0424  30FF               	movlw	255
 16526  0425  06BD               	xorwf	___ftadd@f2+1,f
 16527  0426  30FF               	movlw	255
 16528  0427  06BE               	xorwf	___ftadd@f2+2,f
 16529  0428  3001               	movlw	1
 16530  0429  07BC               	addwf	___ftadd@f2,f
 16531  042A  3000               	movlw	0
 16532  042B  1803               	skipnc
 16533  042C  3001               	movlw	1
 16534  042D  07BD               	addwf	___ftadd@f2+1,f
 16535  042E  3000               	movlw	0
 16536  042F  1803               	skipnc
 16537  0430  3001               	movlw	1
 16538  0431  07BE               	addwf	___ftadd@f2+2,f
 16539  0432  01C3               	clrf	___ftadd@sign
 16540  0433  0AC3               	incf	___ftadd@sign,f
 16541  0434                     l5835:	
 16542  0434  083C               	movf	___ftadd@f2,w
 16543  0435  00F2               	movwf	___ftpack@arg
 16544  0436  083D               	movf	___ftadd@f2+1,w
 16545  0437  00F3               	movwf	___ftpack@arg+1
 16546  0438  083E               	movf	___ftadd@f2+2,w
 16547  0439  00F4               	movwf	___ftpack@arg+2
 16548  043A  0845               	movf	___ftadd@exp1,w
 16549  043B  00BF               	movwf	??___ftadd
 16550  043C  083F               	movf	??___ftadd,w
 16551  043D  00F5               	movwf	___ftpack@exp
 16552  043E  0843               	movf	___ftadd@sign,w
 16553  043F  00C0               	movwf	??___ftadd+1
 16554  0440  0840               	movf	??___ftadd+1,w
 16555  0441  00F6               	movwf	___ftpack@sign
 16556  0442  3188  2014         	fcall	___ftpack
 16557  0444  0872               	movf	?___ftpack,w
 16558  0445  0020               	movlb	0	; select bank0
 16559  0446  00B9               	movwf	?___ftadd
 16560  0447  0873               	movf	?___ftpack+1,w
 16561  0448  00BA               	movwf	?___ftadd+1
 16562  0449  0874               	movf	?___ftpack+2,w
 16563  044A  00BB               	movwf	?___ftadd+2
 16564  044B  0008               	return
 16565  044C                     __end_of___ftadd:	
 16566                           
 16567                           	psect	text114
 16568  11CC                     __ptext114:	
 16569 ;; *************** function ___awtoft *****************
 16570 ;; Defined at:
 16571 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16572 ;; Parameters:    Size  Location     Type
 16573 ;;  c               2    0[BANK0 ] int 
 16574 ;; Auto vars:     Size  Location     Type
 16575 ;;  sign            1    5[BANK0 ] unsigned char 
 16576 ;; Return value:  Size  Location     Type
 16577 ;;                  3    0[BANK0 ] float 
 16578 ;; Registers used:
 16579 ;;		wreg, status,2, status,0, pclath, cstack
 16580 ;; Tracked objects:
 16581 ;;		On entry : 0/0
 16582 ;;		On exit  : 0/0
 16583 ;;		Unchanged: 0/0
 16584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16585 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;Total ram usage:        6 bytes
 16590 ;; Hardware stack levels used:    1
 16591 ;; Hardware stack levels required when called:    4
 16592 ;; This function calls:
 16593 ;;		___ftpack
 16594 ;; This function is called by:
 16595 ;;		_getDimmerLights_PercentToValue
 16596 ;;		_getDimmerLights_ValueToPercent
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function ___awtoft
 16602  11CC                     ___awtoft:	
 16603                           
 16604                           ;incstack = 0
 16605                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16606  11CC  0020               	movlb	0	; select bank0
 16607  11CD  01A5               	clrf	___awtoft@sign
 16608  11CE  1FA1               	btfss	___awtoft@c+1,7
 16609  11CF  29D7               	goto	l8269
 16610  11D0  09A0               	comf	___awtoft@c,f
 16611  11D1  09A1               	comf	___awtoft@c+1,f
 16612  11D2  0AA0               	incf	___awtoft@c,f
 16613  11D3  1903               	skipnz
 16614  11D4  0AA1               	incf	___awtoft@c+1,f
 16615  11D5  01A5               	clrf	___awtoft@sign
 16616  11D6  0AA5               	incf	___awtoft@sign,f
 16617  11D7                     l8269:	
 16618  11D7  0820               	movf	___awtoft@c,w
 16619  11D8  00F2               	movwf	___ftpack@arg
 16620  11D9  0821               	movf	___awtoft@c+1,w
 16621  11DA  00F3               	movwf	___ftpack@arg+1
 16622  11DB  01F4               	clrf	___ftpack@arg+2
 16623  11DC  308E               	movlw	142
 16624  11DD  00A3               	movwf	??___awtoft
 16625  11DE  0823               	movf	??___awtoft,w
 16626  11DF  00F5               	movwf	___ftpack@exp
 16627  11E0  0825               	movf	___awtoft@sign,w
 16628  11E1  00A4               	movwf	??___awtoft+1
 16629  11E2  0824               	movf	??___awtoft+1,w
 16630  11E3  00F6               	movwf	___ftpack@sign
 16631  11E4  3188  2014         	fcall	___ftpack
 16632  11E6  0872               	movf	?___ftpack,w
 16633  11E7  0020               	movlb	0	; select bank0
 16634  11E8  00A0               	movwf	?___awtoft
 16635  11E9  0873               	movf	?___ftpack+1,w
 16636  11EA  00A1               	movwf	?___awtoft+1
 16637  11EB  0874               	movf	?___ftpack+2,w
 16638  11EC  00A2               	movwf	?___awtoft+2
 16639  11ED  0008               	return
 16640  11EE                     __end_of___awtoft:	
 16641                           
 16642                           	psect	text115
 16643  0814                     __ptext115:	
 16644 ;; *************** function ___ftpack *****************
 16645 ;; Defined at:
 16646 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16647 ;; Parameters:    Size  Location     Type
 16648 ;;  arg             3    2[COMMON] unsigned um
 16649 ;;  exp             1    5[COMMON] unsigned char 
 16650 ;;  sign            1    6[COMMON] unsigned char 
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;		None
 16653 ;; Return value:  Size  Location     Type
 16654 ;;                  3    2[COMMON] float 
 16655 ;; Registers used:
 16656 ;;		wreg, status,2, status,0
 16657 ;; Tracked objects:
 16658 ;;		On entry : 0/0
 16659 ;;		On exit  : 0/0
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16662 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;Total ram usage:        8 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; Hardware stack levels required when called:    3
 16669 ;; This function calls:
 16670 ;;		Nothing
 16671 ;; This function is called by:
 16672 ;;		___awtoft
 16673 ;;		___ftadd
 16674 ;;		___ftdiv
 16675 ;;		___ftmul
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           
 16680                           ;psect for function ___ftpack
 16681  0814                     ___ftpack:	
 16682                           
 16683                           ;incstack = 0
 16684                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16685  0814  0875               	movf	___ftpack@exp,w
 16686  0815  1903               	btfsc	3,2
 16687  0816  281C               	goto	l5631
 16688  0817  0874               	movf	___ftpack@arg+2,w
 16689  0818  0473               	iorwf	___ftpack@arg+1,w
 16690  0819  0472               	iorwf	___ftpack@arg,w
 16691  081A  1D03               	skipz
 16692  081B  282D               	goto	l5637
 16693  081C                     l5631:	
 16694  081C  3000               	movlw	0
 16695  081D  00F2               	movwf	?___ftpack
 16696  081E  3000               	movlw	0
 16697  081F  00F3               	movwf	?___ftpack+1
 16698  0820  3000               	movlw	0
 16699  0821  00F4               	movwf	?___ftpack+2
 16700  0822  0008               	return
 16701  0823                     l5635:	
 16702  0823  3001               	movlw	1
 16703  0824  00F7               	movwf	??___ftpack
 16704  0825  0877               	movf	??___ftpack,w
 16705  0826  07F5               	addwf	___ftpack@exp,f
 16706  0827  3001               	movlw	1
 16707  0828                     u4295:	
 16708  0828  36F4               	lsrf	___ftpack@arg+2,f
 16709  0829  0CF3               	rrf	___ftpack@arg+1,f
 16710  082A  0CF2               	rrf	___ftpack@arg,f
 16711  082B  0B89               	decfsz	9,f
 16712  082C  2828               	goto	u4295
 16713  082D                     l5637:	
 16714  082D  30FE               	movlw	254
 16715  082E  0574               	andwf	___ftpack@arg+2,w
 16716  082F  1903               	btfsc	3,2
 16717  0830  2846               	goto	l2839
 16718  0831  2823               	goto	l5635
 16719  0832                     l5639:	
 16720  0832  3001               	movlw	1
 16721  0833  00F7               	movwf	??___ftpack
 16722  0834  0877               	movf	??___ftpack,w
 16723  0835  07F5               	addwf	___ftpack@exp,f
 16724  0836  3001               	movlw	1
 16725  0837  07F2               	addwf	___ftpack@arg,f
 16726  0838  3000               	movlw	0
 16727  0839  1803               	skipnc
 16728  083A  3001               	movlw	1
 16729  083B  07F3               	addwf	___ftpack@arg+1,f
 16730  083C  3000               	movlw	0
 16731  083D  1803               	skipnc
 16732  083E  3001               	movlw	1
 16733  083F  07F4               	addwf	___ftpack@arg+2,f
 16734  0840  3001               	movlw	1
 16735  0841                     u4315:	
 16736  0841  36F4               	lsrf	___ftpack@arg+2,f
 16737  0842  0CF3               	rrf	___ftpack@arg+1,f
 16738  0843  0CF2               	rrf	___ftpack@arg,f
 16739  0844  0B89               	decfsz	9,f
 16740  0845  2841               	goto	u4315
 16741  0846                     l2839:	
 16742  0846  30FF               	movlw	255
 16743  0847  0574               	andwf	___ftpack@arg+2,w
 16744  0848  1903               	btfsc	3,2
 16745  0849  2853               	goto	l5647
 16746  084A  2832               	goto	l5639
 16747  084B                     l5645:	
 16748  084B  3001               	movlw	1
 16749  084C  02F5               	subwf	___ftpack@exp,f
 16750  084D  3001               	movlw	1
 16751  084E                     u4335:	
 16752  084E  35F2               	lslf	___ftpack@arg,f
 16753  084F  0DF3               	rlf	___ftpack@arg+1,f
 16754  0850  0DF4               	rlf	___ftpack@arg+2,f
 16755  0851  0B89               	decfsz	9,f
 16756  0852  284E               	goto	u4335
 16757  0853                     l5647:	
 16758  0853  1FF3               	btfss	___ftpack@arg+1,7
 16759  0854  284B               	goto	l5645
 16760  0855  1875               	btfsc	___ftpack@exp,0
 16761  0856  285D               	goto	l2845
 16762  0857  30FF               	movlw	255
 16763  0858  05F2               	andwf	___ftpack@arg,f
 16764  0859  307F               	movlw	127
 16765  085A  05F3               	andwf	___ftpack@arg+1,f
 16766  085B  30FF               	movlw	255
 16767  085C  05F4               	andwf	___ftpack@arg+2,f
 16768  085D                     l2845:	
 16769  085D  1003               	clrc
 16770  085E  0CF5               	rrf	___ftpack@exp,f
 16771  085F  0875               	movf	___ftpack@exp,w
 16772  0860  00F7               	movwf	??___ftpack
 16773  0861  01F8               	clrf	??___ftpack+1
 16774  0862  01F9               	clrf	??___ftpack+2
 16775  0863  3010               	movlw	16
 16776  0864                     u4365:	
 16777  0864  35F7               	lslf	??___ftpack,f
 16778  0865  0DF8               	rlf	??___ftpack+1,f
 16779  0866  0DF9               	rlf	??___ftpack+2,f
 16780  0867  0B89               	decfsz	9,f
 16781  0868  2864               	goto	u4365
 16782  0869  0877               	movf	??___ftpack,w
 16783  086A  04F2               	iorwf	___ftpack@arg,f
 16784  086B  0878               	movf	??___ftpack+1,w
 16785  086C  04F3               	iorwf	___ftpack@arg+1,f
 16786  086D  0879               	movf	??___ftpack+2,w
 16787  086E  04F4               	iorwf	___ftpack@arg+2,f
 16788  086F  0876               	movf	___ftpack@sign,w
 16789  0870  1903               	btfsc	3,2
 16790  0871  0008               	return
 16791  0872  17F4               	bsf	___ftpack@arg+2,7
 16792  0873  0008               	return
 16793  0874                     __end_of___ftpack:	
 16794                           
 16795                           	psect	text116
 16796  1E04                     __ptext116:	
 16797 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16798 ;; Defined at:
 16799 ;;		line 66 in file "../src/Dimmer_B1.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;  lights          1    wreg     unsigned char 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  lights          1    3[COMMON] unsigned char 
 16804 ;;  value           1    4[COMMON] unsigned char 
 16805 ;; Return value:  Size  Location     Type
 16806 ;;                  1    wreg      unsigned char 
 16807 ;; Registers used:
 16808 ;;		wreg, status,2
 16809 ;; Tracked objects:
 16810 ;;		On entry : 0/0
 16811 ;;		On exit  : 0/0
 16812 ;;		Unchanged: 0/0
 16813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;Total ram usage:        3 bytes
 16819 ;; Hardware stack levels used:    1
 16820 ;; Hardware stack levels required when called:    3
 16821 ;; This function calls:
 16822 ;;		Nothing
 16823 ;; This function is called by:
 16824 ;;		_setDimmerLights_Dimming
 16825 ;; This function uses a non-reentrant model
 16826 ;;
 16827                           
 16828                           
 16829                           ;psect for function _getDimmerIntr_DimmingValue
 16830  1E04                     _getDimmerIntr_DimmingValue:	
 16831                           
 16832                           ;incstack = 0
 16833                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16834                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16835  1E04  00F3               	movwf	getDimmerIntr_DimmingValue@lights
 16836                           
 16837                           ;Dimmer_B1.c: 67: char value = 0;
 16838  1E05  01F4               	clrf	getDimmerIntr_DimmingValue@value
 16839                           
 16840                           ;Dimmer_B1.c: 69: if (lights == 1) {
 16841  1E06  0873               	movf	getDimmerIntr_DimmingValue@lights,w
 16842  1E07  3A01               	xorlw	1
 16843  1E08  1D03               	skipz
 16844  1E09  2E0F               	goto	l683
 16845                           
 16846                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 16847  1E0A  0021               	movlb	1	; select bank1
 16848  1E0B  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 16849  1E0C  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16850  1E0D  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16851  1E0E  00F4               	movwf	getDimmerIntr_DimmingValue@value
 16852  1E0F                     l683:	
 16853                           
 16854                           ;Dimmer_B1.c: 71: }
 16855                           ;Dimmer_B1.c: 83: return value;
 16856  1E0F  0874               	movf	getDimmerIntr_DimmingValue@value,w
 16857  1E10  0008               	return
 16858  1E11                     __end_of_getDimmerIntr_DimmingValue:	
 16859                           
 16860                           	psect	text117
 16861  1F5C                     __ptext117:	
 16862 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16863 ;; Defined at:
 16864 ;;		line 897 in file "../src/Dimmer_B1.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;  lights          1    wreg     unsigned char 
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;  lights          1    0[COMMON] unsigned char 
 16869 ;;  allow           1    4[COMMON] unsigned char 
 16870 ;; Return value:  Size  Location     Type
 16871 ;;                  1    wreg      unsigned char 
 16872 ;; Registers used:
 16873 ;;		wreg, status,2, pclath, cstack
 16874 ;; Tracked objects:
 16875 ;;		On entry : 0/0
 16876 ;;		On exit  : 0/0
 16877 ;;		Unchanged: 0/0
 16878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;Total ram usage:        3 bytes
 16884 ;; Hardware stack levels used:    1
 16885 ;; Hardware stack levels required when called:    4
 16886 ;; This function calls:
 16887 ;;		_getLoad_OK
 16888 ;; This function is called by:
 16889 ;;		_setDimmerLights_Main
 16890 ;; This function uses a non-reentrant model
 16891 ;;
 16892                           
 16893                           
 16894                           ;psect for function _getDimmerLights_Allow_Condition
 16895  1F5C                     _getDimmerLights_Allow_Condition:	
 16896                           
 16897                           ;Dimmer_B1.c: 898: char allow = 0;
 16898                           
 16899                           ;incstack = 0
 16900                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16901  1F5C  01F4               	clrf	getDimmerLights_Allow_Condition@allow
 16902                           
 16903                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16904  1F5D  01F5               	clrf	_getDimmerLights_Allow_Condition$2198
 16905  1F5E  0AF5               	incf	_getDimmerLights_Allow_Condition$2198,f
 16906  1F5F  319D  2512  319F   	fcall	_getLoad_OK
 16907  1F62  3800               	iorlw	0
 16908  1F63  1D03               	skipz
 16909  1F64  2F69               	goto	l6669
 16910  1F65  0022               	movlb	2	; select bank2
 16911  1F66  18A0               	btfsc	_Dimmer^(0+256),1
 16912  1F67  2F69               	goto	l6669
 16913  1F68  01F5               	clrf	_getDimmerLights_Allow_Condition$2198
 16914  1F69                     l6669:	
 16915  1F69  0875               	movf	_getDimmerLights_Allow_Condition$2198,w
 16916  1F6A  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16917  1F6B  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16918  1F6C  00F4               	movwf	getDimmerLights_Allow_Condition@allow
 16919                           
 16920                           ;Dimmer_B1.c: 931: return allow;
 16921  1F6D  0874               	movf	getDimmerLights_Allow_Condition@allow,w
 16922  1F6E  0008               	return
 16923  1F6F                     __end_of_getDimmerLights_Allow_Condition:	
 16924                           
 16925                           	psect	text118
 16926  1D12                     __ptext118:	
 16927 ;; *************** function _getLoad_OK *****************
 16928 ;; Defined at:
 16929 ;;		line 271 in file "../src/OverLoad_B1.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;		None
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;  ok              1    2[COMMON] unsigned char 
 16934 ;; Return value:  Size  Location     Type
 16935 ;;                  1    wreg      unsigned char 
 16936 ;; Registers used:
 16937 ;;		wreg, status,2
 16938 ;; Tracked objects:
 16939 ;;		On entry : 0/0
 16940 ;;		On exit  : 0/0
 16941 ;;		Unchanged: 0/0
 16942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;Total ram usage:        1 bytes
 16948 ;; Hardware stack levels used:    1
 16949 ;; Hardware stack levels required when called:    3
 16950 ;; This function calls:
 16951 ;;		Nothing
 16952 ;; This function is called by:
 16953 ;;		_DimmerLights_Main
 16954 ;;		_getDimmerLights_Allow_Condition
 16955 ;; This function uses a non-reentrant model
 16956 ;;
 16957                           
 16958                           
 16959                           ;psect for function _getLoad_OK
 16960  1D12                     _getLoad_OK:	
 16961                           
 16962                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
 16963                           
 16964                           ;incstack = 0
 16965                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16966  1D12  3000               	movlw	0
 16967  1D13  0022               	movlb	2	; select bank2
 16968  1D14  1BAA               	btfsc	_Load^(0+256),7
 16969  1D15  3001               	movlw	1
 16970  1D16  00F2               	movwf	getLoad_OK@ok
 16971                           
 16972                           ;OverLoad_B1.c: 273: return ok;
 16973  1D17  0872               	movf	getLoad_OK@ok,w
 16974  1D18  0008               	return
 16975  1D19                     __end_of_getLoad_OK:	
 16976                           
 16977                           	psect	text119
 16978  12D2                     __ptext119:	
 16979 ;; *************** function _getMain_All_Error_Status *****************
 16980 ;; Defined at:
 16981 ;;		line 425 in file "../src/Main_B1.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  command         1    wreg     unsigned char 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  command         1    7[COMMON] unsigned char 
 16986 ;;  status          1    8[COMMON] unsigned char 
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  1    wreg      unsigned char 
 16989 ;; Registers used:
 16990 ;;		wreg, status,2, status,0
 16991 ;; Tracked objects:
 16992 ;;		On entry : 0/0
 16993 ;;		On exit  : 0/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;Total ram usage:        7 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    3
 17003 ;; This function calls:
 17004 ;;		Nothing
 17005 ;; This function is called by:
 17006 ;;		_DimmerLights_Main
 17007 ;;		_Exception_Main
 17008 ;;		_Load_Main
 17009 ;;		_setTemp_Main
 17010 ;;		_getRxData
 17011 ;;		_setSw_Main
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           
 17016                           ;psect for function _getMain_All_Error_Status
 17017  12D2                     _getMain_All_Error_Status:	
 17018                           
 17019                           ;incstack = 0
 17020                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17021                           ;getMain_All_Error_Status@command stored from wreg
 17022  12D2  00F7               	movwf	getMain_All_Error_Status@command
 17023                           
 17024                           ;Main_B1.c: 426: char status = 0;
 17025  12D3  01F8               	clrf	getMain_All_Error_Status@status
 17026                           
 17027                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17028  12D4  08F8               	movf	getMain_All_Error_Status@status,f
 17029  12D5  1D03               	skipz
 17030  12D6  2AE9               	goto	l8527
 17031  12D7  0877               	movf	getMain_All_Error_Status@command,w
 17032  12D8  3A02               	xorlw	2
 17033  12D9  1903               	skipnz
 17034  12DA  2AE9               	goto	l8527
 17035                           
 17036                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17037  12DB  0021               	movlb	1	; select bank1
 17038  12DC  18D6               	btfsc	_Temp^(0+128),1
 17039  12DD  2AE1               	goto	l8525
 17040  12DE  01F3               	clrf	_getMain_All_Error_Status$3476
 17041  12DF  01F4               	clrf	_getMain_All_Error_Status$3476+1
 17042  12E0  2AE5               	goto	l1481
 17043  12E1                     l8525:	
 17044  12E1  3002               	movlw	2
 17045  12E2  00F3               	movwf	_getMain_All_Error_Status$3476
 17046  12E3  3000               	movlw	0
 17047  12E4  00F4               	movwf	_getMain_All_Error_Status$3476+1
 17048  12E5                     l1481:	
 17049  12E5  0873               	movf	_getMain_All_Error_Status$3476,w
 17050  12E6  00F2               	movwf	??_getMain_All_Error_Status
 17051  12E7  0872               	movf	??_getMain_All_Error_Status,w
 17052  12E8  00F8               	movwf	getMain_All_Error_Status@status
 17053  12E9                     l8527:	
 17054                           
 17055                           ;Main_B1.c: 439: }
 17056                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17057  12E9  08F8               	movf	getMain_All_Error_Status@status,f
 17058  12EA  1D03               	skipz
 17059  12EB  2AFE               	goto	l1482
 17060  12EC  0877               	movf	getMain_All_Error_Status@command,w
 17061  12ED  3A03               	xorlw	3
 17062  12EE  1903               	skipnz
 17063  12EF  2AFE               	goto	l1482
 17064                           
 17065                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17066  12F0  0022               	movlb	2	; select bank2
 17067  12F1  1AAA               	btfsc	_Load^(0+256),5
 17068  12F2  2AF6               	goto	l8535
 17069  12F3  01F5               	clrf	_getMain_All_Error_Status$3477
 17070  12F4  01F6               	clrf	_getMain_All_Error_Status$3477+1
 17071  12F5  2AFA               	goto	l1486
 17072  12F6                     l8535:	
 17073  12F6  3003               	movlw	3
 17074  12F7  00F5               	movwf	_getMain_All_Error_Status$3477
 17075  12F8  3000               	movlw	0
 17076  12F9  00F6               	movwf	_getMain_All_Error_Status$3477+1
 17077  12FA                     l1486:	
 17078  12FA  0875               	movf	_getMain_All_Error_Status$3477,w
 17079  12FB  00F2               	movwf	??_getMain_All_Error_Status
 17080  12FC  0872               	movf	??_getMain_All_Error_Status,w
 17081  12FD  00F8               	movwf	getMain_All_Error_Status@status
 17082  12FE                     l1482:	
 17083                           
 17084                           ;Main_B1.c: 446: }
 17085                           ;Main_B1.c: 462: return status;
 17086  12FE  0878               	movf	getMain_All_Error_Status@status,w
 17087  12FF  0008               	return
 17088  1300                     __end_of_getMain_All_Error_Status:	
 17089                           
 17090                           	psect	text120
 17091  1D0B                     __ptext120:	
 17092 ;; *************** function _DimmerLights_Initialization *****************
 17093 ;; Defined at:
 17094 ;;		line 593 in file "../src/Dimmer_B1.c"
 17095 ;; Parameters:    Size  Location     Type
 17096 ;;		None
 17097 ;; Auto vars:     Size  Location     Type
 17098 ;;		None
 17099 ;; Return value:  Size  Location     Type
 17100 ;;		None               void
 17101 ;; Registers used:
 17102 ;;		wreg, status,2, status,0, pclath, cstack
 17103 ;; Tracked objects:
 17104 ;;		On entry : 0/0
 17105 ;;		On exit  : 0/0
 17106 ;;		Unchanged: 0/0
 17107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;Total ram usage:        0 bytes
 17113 ;; Hardware stack levels used:    1
 17114 ;; Hardware stack levels required when called:    4
 17115 ;; This function calls:
 17116 ;;		_DimmerIntr_Initialization
 17117 ;;		_setDimmerLights_Initialization
 17118 ;; This function is called by:
 17119 ;;		_main
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           
 17124                           ;psect for function _DimmerLights_Initialization
 17125  1D0B                     _DimmerLights_Initialization:	
 17126                           
 17127                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17128                           
 17129                           ;incstack = 0
 17130                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17131  1D0B  3001               	movlw	1
 17132  1D0C  319C  24C2  319D   	fcall	_setDimmerLights_Initialization
 17133                           
 17134                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17135  1D0F  319F  2738         	fcall	_DimmerIntr_Initialization
 17136  1D11  0008               	return
 17137  1D12                     __end_of_DimmerLights_Initialization:	
 17138                           
 17139                           	psect	text121
 17140  1CC2                     __ptext121:	
 17141 ;; *************** function _setDimmerLights_Initialization *****************
 17142 ;; Defined at:
 17143 ;;		line 609 in file "../src/Dimmer_B1.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;  lights          1    wreg     unsigned char 
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;  lights          1    0[COMMON] unsigned char 
 17148 ;; Return value:  Size  Location     Type
 17149 ;;		None               void
 17150 ;; Registers used:
 17151 ;;		wreg
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;Total ram usage:        0 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; Hardware stack levels required when called:    3
 17164 ;; This function calls:
 17165 ;;		Nothing
 17166 ;; This function is called by:
 17167 ;;		_DimmerLights_Initialization
 17168 ;; This function uses a non-reentrant model
 17169 ;;
 17170                           
 17171                           
 17172                           ;psect for function _setDimmerLights_Initialization
 17173  1CC2                     _setDimmerLights_Initialization:	
 17174                           
 17175                           ;incstack = 0
 17176                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17177  1CC2  0008               	return
 17178  1CC3                     __end_of_setDimmerLights_Initialization:	
 17179                           
 17180                           	psect	text122
 17181  1F38                     __ptext122:	
 17182 ;; *************** function _DimmerIntr_Initialization *****************
 17183 ;; Defined at:
 17184 ;;		line 7 in file "../src/Dimmer_B1.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;		None
 17187 ;; Auto vars:     Size  Location     Type
 17188 ;;		None
 17189 ;; Return value:  Size  Location     Type
 17190 ;;		None               void
 17191 ;; Registers used:
 17192 ;;		wreg
 17193 ;; Tracked objects:
 17194 ;;		On entry : 0/0
 17195 ;;		On exit  : 0/0
 17196 ;;		Unchanged: 0/0
 17197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;Total ram usage:        1 bytes
 17203 ;; Hardware stack levels used:    1
 17204 ;; Hardware stack levels required when called:    3
 17205 ;; This function calls:
 17206 ;;		Nothing
 17207 ;; This function is called by:
 17208 ;;		_DimmerLights_Initialization
 17209 ;; This function uses a non-reentrant model
 17210 ;;
 17211                           
 17212                           
 17213                           ;psect for function _DimmerIntr_Initialization
 17214  1F38                     _DimmerIntr_Initialization:	
 17215                           
 17216                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17217                           
 17218                           ;incstack = 0
 17219                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17220  1F38  3007               	movlw	7
 17221  1F39  00F2               	movwf	??_DimmerIntr_Initialization
 17222  1F3A  0872               	movf	??_DimmerIntr_Initialization,w
 17223  1F3B  0021               	movlb	1	; select bank1
 17224  1F3C  00EB               	movwf	(_DimmerIntr1^(0+128)+3)
 17225                           
 17226                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(70*0.8));
 17227  1F3D  3038               	movlw	56
 17228  1F3E  00F2               	movwf	??_DimmerIntr_Initialization
 17229  1F3F  0872               	movf	??_DimmerIntr_Initialization,w
 17230  1F40  00ED               	movwf	(_DimmerIntr1^(0+128)+5)
 17231                           
 17232                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(30*0.8));
 17233  1F41  3018               	movlw	24
 17234  1F42  00F2               	movwf	??_DimmerIntr_Initialization
 17235  1F43  0872               	movf	??_DimmerIntr_Initialization,w
 17236  1F44  00EE               	movwf	(_DimmerIntr1^(0+128)+6)
 17237                           
 17238                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(70*0.8));
 17239  1F45  3038               	movlw	56
 17240  1F46  00F2               	movwf	??_DimmerIntr_Initialization
 17241  1F47  0872               	movf	??_DimmerIntr_Initialization,w
 17242  1F48  00EC               	movwf	(_DimmerIntr1^(0+128)+4)
 17243  1F49  0008               	return
 17244  1F4A                     __end_of_DimmerIntr_Initialization:	
 17245                           
 17246                           	psect	text123
 17247  1CDA                     __ptext123:	
 17248 ;; *************** function _DelayOff_Main *****************
 17249 ;; Defined at:
 17250 ;;		line 41 in file "../src/DelayOff_B1.c"
 17251 ;; Parameters:    Size  Location     Type
 17252 ;;		None
 17253 ;; Auto vars:     Size  Location     Type
 17254 ;;		None
 17255 ;; Return value:  Size  Location     Type
 17256 ;;		None               void
 17257 ;; Registers used:
 17258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17259 ;; Tracked objects:
 17260 ;;		On entry : 0/0
 17261 ;;		On exit  : 0/0
 17262 ;;		Unchanged: 0/0
 17263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;Total ram usage:        0 bytes
 17269 ;; Hardware stack levels used:    1
 17270 ;; Hardware stack levels required when called:    7
 17271 ;; This function calls:
 17272 ;;		_DlyOff_Main
 17273 ;; This function is called by:
 17274 ;;		_main
 17275 ;; This function uses a non-reentrant model
 17276 ;;
 17277                           
 17278                           
 17279                           ;psect for function _DelayOff_Main
 17280  1CDA                     _DelayOff_Main:	
 17281                           
 17282                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17283                           
 17284                           ;incstack = 0
 17285                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17286  1CDA  3001               	movlw	1
 17287  1CDB  318A  226B         	fcall	_DlyOff_Main
 17288  1CDD  0008               	return
 17289  1CDE                     __end_of_DelayOff_Main:	
 17290                           
 17291                           	psect	text124
 17292  0A6B                     __ptext124:	
 17293 ;; *************** function _DlyOff_Main *****************
 17294 ;; Defined at:
 17295 ;;		line 61 in file "../src/DelayOff_B1.c"
 17296 ;; Parameters:    Size  Location     Type
 17297 ;;  sw              1    wreg     unsigned char 
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;  sw              1   63[BANK0 ] unsigned char 
 17300 ;; Return value:  Size  Location     Type
 17301 ;;		None               void
 17302 ;; Registers used:
 17303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;Total ram usage:        3 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; Hardware stack levels required when called:    6
 17316 ;; This function calls:
 17317 ;;		_DelayOffPointSelect
 17318 ;;		_getDimmerLights_Status
 17319 ;;		_setDimmerLights_SwOff
 17320 ;;		_setDimmerLights_SwOn
 17321 ;;		_setProductData
 17322 ;; This function is called by:
 17323 ;;		_DelayOff_Main
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           
 17328                           ;psect for function _DlyOff_Main
 17329  0A6B                     _DlyOff_Main:	
 17330                           
 17331                           ;incstack = 0
 17332                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17333                           ;DlyOff_Main@sw stored from wreg
 17334  0A6B  0020               	movlb	0	; select bank0
 17335  0A6C  00DF               	movwf	DlyOff_Main@sw
 17336                           
 17337                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17338  0A6D  085F               	movf	DlyOff_Main@sw,w
 17339  0A6E  319D  2592  318A   	fcall	_DelayOffPointSelect
 17340                           
 17341                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17342  0A71  0021               	movlb	1	; select bank1
 17343  0A72  084A               	movf	_DelayOff^(0+128),w
 17344  0A73  0086               	movwf	6
 17345  0A74  3001               	movlw	1	; select bank2/3
 17346  0A75  0087               	movwf	7
 17347  0A76  1C81               	btfss	1,1
 17348  0A77  0008               	return
 17349                           
 17350                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17351  0A78  084A               	movf	_DelayOff^(0+128),w
 17352  0A79  3E02               	addlw	2
 17353  0A7A  0086               	movwf	6
 17354  0A7B  3001               	movlw	1	; select bank2/3
 17355  0A7C  0087               	movwf	7
 17356  0A7D  3001               	movlw	1
 17357  0A7E  0781               	addwf	1,f
 17358  0A7F  3141               	addfsr 1,1
 17359  0A80  1803               	skipnc
 17360  0A81  0A81               	incf	1,f
 17361                           
 17362                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17363  0A82  084A               	movf	_DelayOff^(0+128),w
 17364  0A83  3E02               	addlw	2
 17365  0A84  0086               	movwf	6
 17366  0A85  3001               	movlw	1	; select bank2/3
 17367  0A86  0087               	movwf	7
 17368  0A87  3F40               	moviw [0]fsr1
 17369  0A88  0020               	movlb	0	; select bank0
 17370  0A89  00DD               	movwf	??_DlyOff_Main
 17371  0A8A  3F41               	moviw [1]fsr1
 17372  0A8B  00DE               	movwf	??_DlyOff_Main+1
 17373  0A8C  300B               	movlw	11
 17374  0A8D  025E               	subwf	??_DlyOff_Main+1,w
 17375  0A8E  30B8               	movlw	184
 17376  0A8F  1903               	skipnz
 17377  0A90  025D               	subwf	??_DlyOff_Main,w
 17378  0A91  1C03               	skipc
 17379  0A92  0008               	return
 17380                           
 17381                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17382  0A93  0021               	movlb	1	; select bank1
 17383  0A94  084A               	movf	_DelayOff^(0+128),w
 17384  0A95  3E02               	addlw	2
 17385  0A96  0086               	movwf	6
 17386  0A97  3001               	movlw	1	; select bank2/3
 17387  0A98  0087               	movwf	7
 17388  0A99  3000               	movlw	0
 17389  0A9A  3FC0               	movwi [0]fsr1
 17390  0A9B  3FC1               	movwi [1]fsr1
 17391                           
 17392                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17393  0A9C  3001               	movlw	1
 17394  0A9D  0020               	movlb	0	; select bank0
 17395  0A9E  00DD               	movwf	??_DlyOff_Main
 17396  0A9F  0021               	movlb	1	; select bank1
 17397  0AA0  084A               	movf	_DelayOff^(0+128),w
 17398  0AA1  3E04               	addlw	4
 17399  0AA2  0086               	movwf	6
 17400  0AA3  3001               	movlw	1	; select bank2/3
 17401  0AA4  0087               	movwf	7
 17402  0AA5  0020               	movlb	0	; select bank0
 17403  0AA6  085D               	movf	??_DlyOff_Main,w
 17404  0AA7  0781               	addwf	1,f
 17405                           
 17406                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17407  0AA8  0021               	movlb	1	; select bank1
 17408  0AA9  084A               	movf	_DelayOff^(0+128),w
 17409  0AAA  3E04               	addlw	4
 17410  0AAB  0086               	movwf	6
 17411  0AAC  3001               	movlw	1	; select bank2/3
 17412  0AAD  0087               	movwf	7
 17413  0AAE  0A4A               	incf	_DelayOff^(0+128),w
 17414  0AAF  0084               	movwf	4
 17415  0AB0  3001               	movlw	1	; select bank2/3
 17416  0AB1  0085               	movwf	5
 17417  0AB2  0800               	movf	0,w
 17418  0AB3  0201               	subwf	1,w
 17419  0AB4  1C03               	skipc
 17420  0AB5  0008               	return
 17421                           
 17422                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17423  0AB6  084A               	movf	_DelayOff^(0+128),w
 17424  0AB7  3E04               	addlw	4
 17425  0AB8  0086               	movwf	6
 17426  0AB9  3001               	movlw	1	; select bank2/3
 17427  0ABA  0087               	movwf	7
 17428  0ABB  0181               	clrf	1
 17429                           
 17430                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17431  0ABC  084A               	movf	_DelayOff^(0+128),w
 17432  0ABD  0086               	movwf	6
 17433  0ABE  3001               	movlw	1	; select bank2/3
 17434  0ABF  0087               	movwf	7
 17435  0AC0  1081               	bcf	1,1
 17436                           
 17437                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17438  0AC1  0020               	movlb	0	; select bank0
 17439  0AC2  085F               	movf	DlyOff_Main@sw,w
 17440  0AC3  319E  262C  318A   	fcall	_getDimmerLights_Status
 17441  0AC6  3A01               	xorlw	1
 17442  0AC7  1D03               	skipz
 17443  0AC8  2AD3               	goto	l531
 17444                           
 17445                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17446  0AC9  0020               	movlb	0	; select bank0
 17447  0ACA  085F               	movf	DlyOff_Main@sw,w
 17448  0ACB  3193  2300  318A   	fcall	_setDimmerLights_SwOn
 17449                           
 17450                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17451  0ACE  0020               	movlb	0	; select bank0
 17452  0ACF  085F               	movf	DlyOff_Main@sw,w
 17453  0AD0  3194  2403  318A   	fcall	_setDimmerLights_SwOff
 17454  0AD3                     l531:	
 17455                           
 17456                           ;DelayOff_B1.c: 78: }
 17457                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17458  0AD3  0020               	movlb	0	; select bank0
 17459  0AD4  01DA               	clrf	setProductData@value
 17460  0AD5  085F               	movf	DlyOff_Main@sw,w
 17461  0AD6  3E1A               	addlw	26
 17462  0AD7  319D  25D4         	fcall	_setProductData
 17463  0AD9  0008               	return
 17464  0ADA                     __end_of_DlyOff_Main:	
 17465                           
 17466                           	psect	text125
 17467  1DD4                     __ptext125:	
 17468 ;; *************** function _setProductData *****************
 17469 ;; Defined at:
 17470 ;;		line 591 in file "../src/Main_B1.c"
 17471 ;; Parameters:    Size  Location     Type
 17472 ;;  address         1    wreg     unsigned char 
 17473 ;;  value           1   58[BANK0 ] unsigned char 
 17474 ;; Auto vars:     Size  Location     Type
 17475 ;;  address         1   60[BANK0 ] unsigned char 
 17476 ;; Return value:  Size  Location     Type
 17477 ;;		None               void
 17478 ;; Registers used:
 17479 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17480 ;; Tracked objects:
 17481 ;;		On entry : 0/0
 17482 ;;		On exit  : 0/0
 17483 ;;		Unchanged: 0/0
 17484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17485 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17489 ;;Total ram usage:        3 bytes
 17490 ;; Hardware stack levels used:    1
 17491 ;; Hardware stack levels required when called:    3
 17492 ;; This function calls:
 17493 ;;		Nothing
 17494 ;; This function is called by:
 17495 ;;		_DlyOff_Main
 17496 ;;		_setDelayOff_GO
 17497 ;;		_setDimmerLights_OnOff
 17498 ;;		_setDimmerLights_Dimming
 17499 ;;		_setTemp_Main
 17500 ;;		_setLog_Code
 17501 ;;		_setControl_Lights_Table
 17502 ;;		_setRFSW_AdjControl
 17503 ;;		_setRF_DimmerLights
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           
 17508                           ;psect for function _setProductData
 17509  1DD4                     _setProductData:	
 17510                           
 17511                           ;incstack = 0
 17512                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17513                           ;setProductData@address stored from wreg
 17514  1DD4  0020               	movlb	0	; select bank0
 17515  1DD5  00DC               	movwf	setProductData@address
 17516                           
 17517                           ;Main_B1.c: 592: _product.Data[address] = value;
 17518  1DD6  085A               	movf	setProductData@value,w
 17519  1DD7  00DB               	movwf	??_setProductData
 17520  1DD8  085C               	movf	setProductData@address,w
 17521  1DD9  3E20               	addlw	__product& (0+255)
 17522  1DDA  0086               	movwf	6
 17523  1DDB  3002               	movlw	2	; select bank4/5
 17524  1DDC  0087               	movwf	7
 17525  1DDD  085B               	movf	??_setProductData,w
 17526  1DDE  0081               	movwf	1
 17527  1DDF  0008               	return
 17528  1DE0                     __end_of_setProductData:	
 17529                           
 17530                           	psect	text126
 17531  1300                     __ptext126:	
 17532 ;; *************** function _setDimmerLights_SwOn *****************
 17533 ;; Defined at:
 17534 ;;		line 649 in file "../src/Dimmer_B1.c"
 17535 ;; Parameters:    Size  Location     Type
 17536 ;;  sw              1    wreg     unsigned char 
 17537 ;; Auto vars:     Size  Location     Type
 17538 ;;  sw              1    6[BANK0 ] unsigned char 
 17539 ;;  idle            1    7[BANK0 ] unsigned char 
 17540 ;; Return value:  Size  Location     Type
 17541 ;;		None               void
 17542 ;; Registers used:
 17543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17544 ;; Tracked objects:
 17545 ;;		On entry : 0/0
 17546 ;;		On exit  : 0/0
 17547 ;;		Unchanged: 0/0
 17548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;Total ram usage:        2 bytes
 17554 ;; Hardware stack levels used:    1
 17555 ;; Hardware stack levels required when called:    5
 17556 ;; This function calls:
 17557 ;;		_DimmerLights_SelectPointer
 17558 ;;		_setBuz
 17559 ;; This function is called by:
 17560 ;;		_DlyOff_Main
 17561 ;;		_setControl_Lights_Table
 17562 ;;		_setRFSW_Control
 17563 ;;		_setRFSW_AdjControl
 17564 ;;		_setSw_Main
 17565 ;; This function uses a non-reentrant model
 17566 ;;
 17567                           
 17568                           
 17569                           ;psect for function _setDimmerLights_SwOn
 17570  1300                     _setDimmerLights_SwOn:	
 17571                           
 17572                           ;incstack = 0
 17573                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17574                           ;setDimmerLights_SwOn@sw stored from wreg
 17575  1300  0020               	movlb	0	; select bank0
 17576  1301  00A6               	movwf	setDimmerLights_SwOn@sw
 17577                           
 17578                           ;Dimmer_B1.c: 650: char idle = 0;
 17579  1302  01A7               	clrf	setDimmerLights_SwOn@idle
 17580                           
 17581                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 17582  1303  0826               	movf	setDimmerLights_SwOn@sw,w
 17583  1304  319D  256A  3193   	fcall	_DimmerLights_SelectPointer
 17584                           
 17585                           ;Dimmer_B1.c: 676: if (idle == 0) {
 17586  1307  0020               	movlb	0	; select bank0
 17587  1308  08A7               	movf	setDimmerLights_SwOn@idle,f
 17588  1309  1D03               	skipz
 17589  130A  0008               	return
 17590                           
 17591                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 17592  130B  087B               	movf	_DimmerLights,w
 17593  130C  0086               	movwf	6
 17594  130D  3001               	movlw	1	; select bank2/3
 17595  130E  0087               	movwf	7
 17596  130F  1401               	bsf	1,0
 17597                           
 17598                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 17599  1310  0A7B               	incf	_DimmerLights,w
 17600  1311  0086               	movwf	6
 17601  1312  3001               	movlw	1	; select bank2/3
 17602  1313  0087               	movwf	7
 17603  1314  1801               	btfsc	1,0
 17604  1315  2B26               	goto	l8317
 17605                           
 17606                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 17607  1316  0A7B               	incf	_DimmerLights,w
 17608  1317  0086               	movwf	6
 17609  1318  3001               	movlw	1	; select bank2/3
 17610  1319  0087               	movwf	7
 17611  131A  1401               	bsf	1,0
 17612                           
 17613                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 17614  131B  087B               	movf	_DimmerLights,w
 17615  131C  0086               	movwf	6
 17616  131D  3001               	movlw	1	; select bank2/3
 17617  131E  0087               	movwf	7
 17618  131F  1481               	bsf	1,1
 17619                           
 17620                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 17621  1320  087B               	movf	_DimmerLights,w
 17622  1321  0086               	movwf	6
 17623  1322  3001               	movlw	1	; select bank2/3
 17624  1323  0087               	movwf	7
 17625  1324  1501               	bsf	1,2
 17626                           
 17627                           ;Dimmer_B1.c: 682: } else {
 17628  1325  2B2B               	goto	l8319
 17629  1326                     l8317:	
 17630                           
 17631                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 17632  1326  0A7B               	incf	_DimmerLights,w
 17633  1327  0086               	movwf	6
 17634  1328  3001               	movlw	1	; select bank2/3
 17635  1329  0087               	movwf	7
 17636  132A  1001               	bcf	1,0
 17637  132B                     l8319:	
 17638                           
 17639                           ;Dimmer_B1.c: 684: }
 17640                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 17641  132B  3064               	movlw	100
 17642  132C  00A4               	movwf	setBuz@time
 17643  132D  3000               	movlw	0
 17644  132E  00A5               	movwf	setBuz@time+1
 17645  132F  3001               	movlw	1
 17646  1330  3196  269F         	fcall	_setBuz
 17647  1332  0008               	return
 17648  1333                     __end_of_setDimmerLights_SwOn:	
 17649                           
 17650                           	psect	text127
 17651  169F                     __ptext127:	
 17652 ;; *************** function _setBuz *****************
 17653 ;; Defined at:
 17654 ;;		line 22 in file "../src/Buzzer_B1.c"
 17655 ;; Parameters:    Size  Location     Type
 17656 ;;  count           1    wreg     unsigned char 
 17657 ;;  time            2    4[BANK0 ] int 
 17658 ;; Auto vars:     Size  Location     Type
 17659 ;;  count           1    8[COMMON] unsigned char 
 17660 ;; Return value:  Size  Location     Type
 17661 ;;		None               void
 17662 ;; Registers used:
 17663 ;;		wreg, status,2, status,0, pclath, cstack
 17664 ;; Tracked objects:
 17665 ;;		On entry : 0/0
 17666 ;;		On exit  : 0/0
 17667 ;;		Unchanged: 0/0
 17668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17669 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;Total ram usage:        4 bytes
 17674 ;; Hardware stack levels used:    1
 17675 ;; Hardware stack levels required when called:    4
 17676 ;; This function calls:
 17677 ;;		___awdiv
 17678 ;; This function is called by:
 17679 ;;		_setDimmerLights_SwOn
 17680 ;;		_setDimmerLights_Dimming
 17681 ;;		_my_MainTimer
 17682 ;;		_Exception_Main
 17683 ;;		_setTemp_Main
 17684 ;;		_setLog_Code
 17685 ;;		_setRFSW_Control
 17686 ;;		_setSw_Main
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           
 17691                           ;psect for function _setBuz
 17692  169F                     _setBuz:	
 17693                           
 17694                           ;incstack = 0
 17695                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17696                           ;setBuz@count stored from wreg
 17697  169F  00F8               	movwf	setBuz@count
 17698                           
 17699                           ;Buzzer_B1.c: 23: time /= 20;
 17700  16A0  3014               	movlw	20
 17701  16A1  00F2               	movwf	___awdiv@divisor
 17702  16A2  3000               	movlw	0
 17703  16A3  00F3               	movwf	___awdiv@divisor+1
 17704  16A4  0020               	movlb	0	; select bank0
 17705  16A5  0825               	movf	setBuz@time+1,w
 17706  16A6  01F5               	clrf	___awdiv@dividend+1
 17707  16A7  07F5               	addwf	___awdiv@dividend+1,f
 17708  16A8  0824               	movf	setBuz@time,w
 17709  16A9  01F4               	clrf	___awdiv@dividend
 17710  16AA  07F4               	addwf	___awdiv@dividend,f
 17711  16AB  3196  26F2  3196   	fcall	___awdiv
 17712  16AE  0873               	movf	?___awdiv+1,w
 17713  16AF  0020               	movlb	0	; select bank0
 17714  16B0  01A5               	clrf	setBuz@time+1
 17715  16B1  07A5               	addwf	setBuz@time+1,f
 17716  16B2  0872               	movf	?___awdiv,w
 17717  16B3  01A4               	clrf	setBuz@time
 17718  16B4  07A4               	addwf	setBuz@time,f
 17719                           
 17720                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17721  16B5  0021               	movlb	1	; select bank1
 17722  16B6  1C3C               	btfss	_Buz1^(0+128),0
 17723  16B7  0008               	return
 17724                           
 17725                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17726  16B8  18BC               	btfsc	_Buz1^(0+128),1
 17727  16B9  2ECE               	goto	l86
 17728                           
 17729                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17730  16BA  14BC               	bsf	_Buz1^(0+128),1
 17731                           
 17732                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17733  16BB  01BD               	clrf	(_Buz1^(0+128)+1)
 17734  16BC  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 17735                           
 17736                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17737  16BD  0878               	movf	setBuz@count,w
 17738  16BE  00F7               	movwf	??_setBuz
 17739  16BF  0877               	movf	??_setBuz,w
 17740  16C0  00BF               	movwf	(_Buz1^(0+128)+3)
 17741                           
 17742                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17743  16C1  0020               	movlb	0	; select bank0
 17744  16C2  0825               	movf	setBuz@time+1,w
 17745  16C3  0021               	movlb	1	; select bank1
 17746  16C4  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 17747  16C5  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 17748  16C6  0020               	movlb	0	; select bank0
 17749  16C7  0824               	movf	setBuz@time,w
 17750  16C8  0021               	movlb	1	; select bank1
 17751  16C9  01C2               	clrf	(_Buz1^(0+128)+6)
 17752  16CA  07C2               	addwf	(_Buz1^(0+128)+6),f
 17753                           
 17754                           ;Buzzer_B1.c: 30: RB3 = 1;
 17755  16CB  0020               	movlb	0	; select bank0
 17756  16CC  158D               	bsf	13,3	;volatile
 17757                           
 17758                           ;Buzzer_B1.c: 31: } else {
 17759  16CD  0008               	return
 17760  16CE                     l86:	
 17761                           
 17762                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17763  16CE  19BC               	btfsc	_Buz1^(0+128),3
 17764  16CF  2EE0               	goto	l88
 17765                           
 17766                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17767  16D0  15BC               	bsf	_Buz1^(0+128),3
 17768                           
 17769                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17770  16D1  0878               	movf	setBuz@count,w
 17771  16D2  00F7               	movwf	??_setBuz
 17772  16D3  0877               	movf	??_setBuz,w
 17773  16D4  00C0               	movwf	(_Buz1^(0+128)+4)
 17774                           
 17775                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17776  16D5  0020               	movlb	0	; select bank0
 17777  16D6  0825               	movf	setBuz@time+1,w
 17778  16D7  0021               	movlb	1	; select bank1
 17779  16D8  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 17780  16D9  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 17781  16DA  0020               	movlb	0	; select bank0
 17782  16DB  0824               	movf	setBuz@time,w
 17783  16DC  0021               	movlb	1	; select bank1
 17784  16DD  01C4               	clrf	(_Buz1^(0+128)+8)
 17785  16DE  07C4               	addwf	(_Buz1^(0+128)+8),f
 17786                           
 17787                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17788  16DF  0008               	return
 17789  16E0                     l88:	
 17790  16E0  1A3C               	btfsc	_Buz1^(0+128),4
 17791  16E1  0008               	return
 17792                           
 17793                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17794  16E2  163C               	bsf	_Buz1^(0+128),4
 17795                           
 17796                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17797  16E3  0878               	movf	setBuz@count,w
 17798  16E4  00F7               	movwf	??_setBuz
 17799  16E5  0877               	movf	??_setBuz,w
 17800  16E6  00C1               	movwf	(_Buz1^(0+128)+5)
 17801                           
 17802                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17803  16E7  0020               	movlb	0	; select bank0
 17804  16E8  0825               	movf	setBuz@time+1,w
 17805  16E9  0021               	movlb	1	; select bank1
 17806  16EA  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 17807  16EB  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 17808  16EC  0020               	movlb	0	; select bank0
 17809  16ED  0824               	movf	setBuz@time,w
 17810  16EE  0021               	movlb	1	; select bank1
 17811  16EF  01C6               	clrf	(_Buz1^(0+128)+10)
 17812  16F0  07C6               	addwf	(_Buz1^(0+128)+10),f
 17813  16F1  0008               	return
 17814  16F2                     __end_of_setBuz:	
 17815                           
 17816                           	psect	text128
 17817  16F2                     __ptext128:	
 17818 ;; *************** function ___awdiv *****************
 17819 ;; Defined at:
 17820 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17821 ;; Parameters:    Size  Location     Type
 17822 ;;  divisor         2    2[COMMON] int 
 17823 ;;  dividend        2    4[COMMON] int 
 17824 ;; Auto vars:     Size  Location     Type
 17825 ;;  quotient        2    2[BANK0 ] int 
 17826 ;;  sign            1    1[BANK0 ] unsigned char 
 17827 ;;  counter         1    0[BANK0 ] unsigned char 
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  2    2[COMMON] int 
 17830 ;; Registers used:
 17831 ;;		wreg, status,2, status,0
 17832 ;; Tracked objects:
 17833 ;;		On entry : 0/0
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17840 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;Total ram usage:        9 bytes
 17842 ;; Hardware stack levels used:    1
 17843 ;; Hardware stack levels required when called:    3
 17844 ;; This function calls:
 17845 ;;		Nothing
 17846 ;; This function is called by:
 17847 ;;		_setBuz
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           
 17852                           ;psect for function ___awdiv
 17853  16F2                     ___awdiv:	
 17854                           
 17855                           ;incstack = 0
 17856                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17857  16F2  0020               	movlb	0	; select bank0
 17858  16F3  01A1               	clrf	___awdiv@sign
 17859  16F4  1FF3               	btfss	___awdiv@divisor+1,7
 17860  16F5  2EFD               	goto	l8193
 17861  16F6  09F2               	comf	___awdiv@divisor,f
 17862  16F7  09F3               	comf	___awdiv@divisor+1,f
 17863  16F8  0AF2               	incf	___awdiv@divisor,f
 17864  16F9  1903               	skipnz
 17865  16FA  0AF3               	incf	___awdiv@divisor+1,f
 17866  16FB  01A1               	clrf	___awdiv@sign
 17867  16FC  0AA1               	incf	___awdiv@sign,f
 17868  16FD                     l8193:	
 17869  16FD  1FF5               	btfss	___awdiv@dividend+1,7
 17870  16FE  2F08               	goto	l8199
 17871  16FF  09F4               	comf	___awdiv@dividend,f
 17872  1700  09F5               	comf	___awdiv@dividend+1,f
 17873  1701  0AF4               	incf	___awdiv@dividend,f
 17874  1702  1903               	skipnz
 17875  1703  0AF5               	incf	___awdiv@dividend+1,f
 17876  1704  3001               	movlw	1
 17877  1705  00F6               	movwf	??___awdiv
 17878  1706  0876               	movf	??___awdiv,w
 17879  1707  06A1               	xorwf	___awdiv@sign,f
 17880  1708                     l8199:	
 17881  1708  01A2               	clrf	___awdiv@quotient
 17882  1709  01A3               	clrf	___awdiv@quotient+1
 17883  170A  0873               	movf	___awdiv@divisor+1,w
 17884  170B  0472               	iorwf	___awdiv@divisor,w
 17885  170C  1903               	skipnz
 17886  170D  2F37               	goto	l8221
 17887  170E  01A0               	clrf	___awdiv@counter
 17888  170F  0AA0               	incf	___awdiv@counter,f
 17889  1710                     l8209:	
 17890  1710  1BF3               	btfsc	___awdiv@divisor+1,7
 17891  1711  2F1C               	goto	l8211
 17892  1712  3001               	movlw	1
 17893  1713                     u8565:	
 17894  1713  35F2               	lslf	___awdiv@divisor,f
 17895  1714  0DF3               	rlf	___awdiv@divisor+1,f
 17896  1715  0B89               	decfsz	9,f
 17897  1716  2F13               	goto	u8565
 17898  1717  3001               	movlw	1
 17899  1718  00F6               	movwf	??___awdiv
 17900  1719  0876               	movf	??___awdiv,w
 17901  171A  07A0               	addwf	___awdiv@counter,f
 17902  171B  2F10               	goto	l8209
 17903  171C                     l8211:	
 17904  171C  3001               	movlw	1
 17905  171D                     u8585:	
 17906  171D  35A2               	lslf	___awdiv@quotient,f
 17907  171E  0DA3               	rlf	___awdiv@quotient+1,f
 17908  171F  0B89               	decfsz	9,f
 17909  1720  2F1D               	goto	u8585
 17910  1721  0873               	movf	___awdiv@divisor+1,w
 17911  1722  0275               	subwf	___awdiv@dividend+1,w
 17912  1723  1D03               	skipz
 17913  1724  2F27               	goto	u8595
 17914  1725  0872               	movf	___awdiv@divisor,w
 17915  1726  0274               	subwf	___awdiv@dividend,w
 17916  1727                     u8595:	
 17917  1727  1C03               	skipc
 17918  1728  2F2E               	goto	l8217
 17919  1729  0872               	movf	___awdiv@divisor,w
 17920  172A  02F4               	subwf	___awdiv@dividend,f
 17921  172B  0873               	movf	___awdiv@divisor+1,w
 17922  172C  3BF5               	subwfb	___awdiv@dividend+1,f
 17923  172D  1422               	bsf	___awdiv@quotient,0
 17924  172E                     l8217:	
 17925  172E  3001               	movlw	1
 17926  172F                     u8605:	
 17927  172F  36F3               	lsrf	___awdiv@divisor+1,f
 17928  1730  0CF2               	rrf	___awdiv@divisor,f
 17929  1731  0B89               	decfsz	9,f
 17930  1732  2F2F               	goto	u8605
 17931  1733  3001               	movlw	1
 17932  1734  02A0               	subwf	___awdiv@counter,f
 17933  1735  1D03               	btfss	3,2
 17934  1736  2F1C               	goto	l8211
 17935  1737                     l8221:	
 17936  1737  0821               	movf	___awdiv@sign,w
 17937  1738  1903               	btfsc	3,2
 17938  1739  2F3F               	goto	l8225
 17939  173A  09A2               	comf	___awdiv@quotient,f
 17940  173B  09A3               	comf	___awdiv@quotient+1,f
 17941  173C  0AA2               	incf	___awdiv@quotient,f
 17942  173D  1903               	skipnz
 17943  173E  0AA3               	incf	___awdiv@quotient+1,f
 17944  173F                     l8225:	
 17945  173F  0823               	movf	___awdiv@quotient+1,w
 17946  1740  01F3               	clrf	?___awdiv+1
 17947  1741  07F3               	addwf	?___awdiv+1,f
 17948  1742  0822               	movf	___awdiv@quotient,w
 17949  1743  01F2               	clrf	?___awdiv
 17950  1744  07F2               	addwf	?___awdiv,f
 17951  1745  0008               	return
 17952  1746                     __end_of___awdiv:	
 17953                           
 17954                           	psect	text129
 17955  1403                     __ptext129:	
 17956 ;; *************** function _setDimmerLights_SwOff *****************
 17957 ;; Defined at:
 17958 ;;		line 690 in file "../src/Dimmer_B1.c"
 17959 ;; Parameters:    Size  Location     Type
 17960 ;;  sw              1    wreg     unsigned char 
 17961 ;; Auto vars:     Size  Location     Type
 17962 ;;  sw              1    4[COMMON] unsigned char 
 17963 ;; Return value:  Size  Location     Type
 17964 ;;		None               void
 17965 ;; Registers used:
 17966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17967 ;; Tracked objects:
 17968 ;;		On entry : 0/0
 17969 ;;		On exit  : 0/0
 17970 ;;		Unchanged: 0/0
 17971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;Total ram usage:        1 bytes
 17977 ;; Hardware stack levels used:    1
 17978 ;; Hardware stack levels required when called:    4
 17979 ;; This function calls:
 17980 ;;		_DimmerLights_SelectPointer
 17981 ;; This function is called by:
 17982 ;;		_DlyOff_Main
 17983 ;;		_Exception_Main
 17984 ;;		_setControl_Lights_Table
 17985 ;;		_setRFSW_Control
 17986 ;;		_setRFSW_AdjControl
 17987 ;;		_setSw_Main
 17988 ;; This function uses a non-reentrant model
 17989 ;;
 17990                           
 17991                           
 17992                           ;psect for function _setDimmerLights_SwOff
 17993  1403                     _setDimmerLights_SwOff:	
 17994                           
 17995                           ;incstack = 0
 17996                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17997                           ;setDimmerLights_SwOff@sw stored from wreg
 17998  1403  00F4               	movwf	setDimmerLights_SwOff@sw
 17999                           
 18000                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18001  1404  0874               	movf	setDimmerLights_SwOff@sw,w
 18002  1405  319D  256A  3194   	fcall	_DimmerLights_SelectPointer
 18003                           
 18004                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18005  1408  087B               	movf	_DimmerLights,w
 18006  1409  0086               	movwf	6
 18007  140A  3001               	movlw	1	; select bank2/3
 18008  140B  0087               	movwf	7
 18009  140C  1C01               	btfss	1,0
 18010  140D  0008               	return
 18011                           
 18012                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18013  140E  087B               	movf	_DimmerLights,w
 18014  140F  0086               	movwf	6
 18015  1410  3001               	movlw	1	; select bank2/3
 18016  1411  0087               	movwf	7
 18017  1412  1001               	bcf	1,0
 18018                           
 18019                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18020  1413  0A7B               	incf	_DimmerLights,w
 18021  1414  0086               	movwf	6
 18022  1415  3001               	movlw	1	; select bank2/3
 18023  1416  0087               	movwf	7
 18024  1417  1C01               	btfss	1,0
 18025  1418  2C2F               	goto	l8331
 18026                           
 18027                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18028  1419  087B               	movf	_DimmerLights,w
 18029  141A  0086               	movwf	6
 18030  141B  3001               	movlw	1	; select bank2/3
 18031  141C  0087               	movwf	7
 18032  141D  1D81               	btfss	1,3
 18033  141E  0008               	return
 18034                           
 18035                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18036  141F  087B               	movf	_DimmerLights,w
 18037  1420  0086               	movwf	6
 18038  1421  3001               	movlw	1	; select bank2/3
 18039  1422  0087               	movwf	7
 18040  1423  1181               	bcf	1,3
 18041                           
 18042                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18043  1424  087B               	movf	_DimmerLights,w
 18044  1425  0086               	movwf	6
 18045  1426  3001               	movlw	1	; select bank2/3
 18046  1427  0087               	movwf	7
 18047  1428  1601               	bsf	1,4
 18048                           
 18049                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18050  1429  087B               	movf	_DimmerLights,w
 18051  142A  0086               	movwf	6
 18052  142B  3001               	movlw	1	; select bank2/3
 18053  142C  0087               	movwf	7
 18054  142D  1281               	bcf	1,5
 18055                           
 18056                           ;Dimmer_B1.c: 701: }
 18057                           ;Dimmer_B1.c: 702: } else {
 18058  142E  0008               	return
 18059  142F                     l8331:	
 18060                           
 18061                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18062  142F  087B               	movf	_DimmerLights,w
 18063  1430  0086               	movwf	6
 18064  1431  3001               	movlw	1	; select bank2/3
 18065  1432  0087               	movwf	7
 18066  1433  1481               	bsf	1,1
 18067                           
 18068                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18069  1434  087B               	movf	_DimmerLights,w
 18070  1435  0086               	movwf	6
 18071  1436  3001               	movlw	1	; select bank2/3
 18072  1437  0087               	movwf	7
 18073  1438  1101               	bcf	1,2
 18074  1439  0008               	return
 18075  143A                     __end_of_setDimmerLights_SwOff:	
 18076                           
 18077                           	psect	text130
 18078  1E2C                     __ptext130:	
 18079 ;; *************** function _getDimmerLights_Status *****************
 18080 ;; Defined at:
 18081 ;;		line 987 in file "../src/Dimmer_B1.c"
 18082 ;; Parameters:    Size  Location     Type
 18083 ;;  lights          1    wreg     unsigned char 
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;  lights          1    4[COMMON] unsigned char 
 18086 ;;  status          1    5[COMMON] unsigned char 
 18087 ;; Return value:  Size  Location     Type
 18088 ;;                  1    wreg      unsigned char 
 18089 ;; Registers used:
 18090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18091 ;; Tracked objects:
 18092 ;;		On entry : 0/0
 18093 ;;		On exit  : 0/0
 18094 ;;		Unchanged: 0/0
 18095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;Total ram usage:        2 bytes
 18101 ;; Hardware stack levels used:    1
 18102 ;; Hardware stack levels required when called:    4
 18103 ;; This function calls:
 18104 ;;		_DimmerLights_SelectPointer
 18105 ;; This function is called by:
 18106 ;;		_DlyOff_Main
 18107 ;;		_Exception_Main
 18108 ;;		_setControl_Lights_Table
 18109 ;;		_setRFSW_Control
 18110 ;;		_setRFSW_AdjControl
 18111 ;; This function uses a non-reentrant model
 18112 ;;
 18113                           
 18114                           
 18115                           ;psect for function _getDimmerLights_Status
 18116  1E2C                     _getDimmerLights_Status:	
 18117                           
 18118                           ;incstack = 0
 18119                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18120                           ;getDimmerLights_Status@lights stored from wreg
 18121  1E2C  00F4               	movwf	getDimmerLights_Status@lights
 18122                           
 18123                           ;Dimmer_B1.c: 988: DimmerLights_SelectPointer(lights);
 18124  1E2D  0874               	movf	getDimmerLights_Status@lights,w
 18125  1E2E  319D  256A         	fcall	_DimmerLights_SelectPointer
 18126                           
 18127                           ;Dimmer_B1.c: 989: char status = DimmerLights->Status == 1 ? 1 : 0;
 18128  1E30  0A7B               	incf	_DimmerLights,w
 18129  1E31  0086               	movwf	6
 18130  1E32  3001               	movlw	1	; select bank2/3
 18131  1E33  0087               	movwf	7
 18132  1E34  3000               	movlw	0
 18133  1E35  1801               	btfsc	1,0
 18134  1E36  3001               	movlw	1
 18135  1E37  00F5               	movwf	getDimmerLights_Status@status
 18136                           
 18137                           ;Dimmer_B1.c: 990: return status;
 18138  1E38  0875               	movf	getDimmerLights_Status@status,w
 18139  1E39  0008               	return
 18140  1E3A                     __end_of_getDimmerLights_Status:	
 18141                           
 18142                           	psect	text131
 18143  1D6A                     __ptext131:	
 18144 ;; *************** function _DimmerLights_SelectPointer *****************
 18145 ;; Defined at:
 18146 ;;		line 572 in file "../src/Dimmer_B1.c"
 18147 ;; Parameters:    Size  Location     Type
 18148 ;;  lights          1    wreg     unsigned char 
 18149 ;; Auto vars:     Size  Location     Type
 18150 ;;  lights          1    3[COMMON] unsigned char 
 18151 ;; Return value:  Size  Location     Type
 18152 ;;		None               void
 18153 ;; Registers used:
 18154 ;;		wreg
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;Total ram usage:        2 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; Hardware stack levels required when called:    3
 18167 ;; This function calls:
 18168 ;;		Nothing
 18169 ;; This function is called by:
 18170 ;;		_setDimmerLights_SwOn
 18171 ;;		_setDimmerLights_SwOff
 18172 ;;		_setDimmerLights_DimmingOn
 18173 ;;		_setDimmerLights_Main
 18174 ;;		_getDimmerLights_Status
 18175 ;;		_setDimmerLights_DimmingRun
 18176 ;;		_setDimmerLights_Status
 18177 ;; This function uses a non-reentrant model
 18178 ;;
 18179                           
 18180                           
 18181                           ;psect for function _DimmerLights_SelectPointer
 18182  1D6A                     _DimmerLights_SelectPointer:	
 18183                           
 18184                           ;incstack = 0
 18185                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18186                           ;DimmerLights_SelectPointer@lights stored from wreg
 18187  1D6A  00F3               	movwf	DimmerLights_SelectPointer@lights
 18188                           
 18189                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18190  1D6B  0873               	movf	DimmerLights_SelectPointer@lights,w
 18191  1D6C  3A01               	xorlw	1
 18192  1D6D  1D03               	skipz
 18193  1D6E  0008               	return
 18194                           
 18195                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18196  1D6F  3058               	movlw	_DimmerLights1& (0+255)
 18197  1D70  00F2               	movwf	??_DimmerLights_SelectPointer
 18198  1D71  0872               	movf	??_DimmerLights_SelectPointer,w
 18199  1D72  00FB               	movwf	_DimmerLights
 18200  1D73  0008               	return
 18201  1D74                     __end_of_DimmerLights_SelectPointer:	
 18202                           
 18203                           	psect	text132
 18204  1CD6                     __ptext132:	
 18205 ;; *************** function _DelayOff_Initialization *****************
 18206 ;; Defined at:
 18207 ;;		line 26 in file "../src/DelayOff_B1.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;		None
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;		None
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, status,2, status,0, pclath, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : 0/0
 18218 ;;		On exit  : 0/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;Total ram usage:        0 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    5
 18228 ;; This function calls:
 18229 ;;		_DlyOff_Initialization
 18230 ;; This function is called by:
 18231 ;;		_main
 18232 ;; This function uses a non-reentrant model
 18233 ;;
 18234                           
 18235                           
 18236                           ;psect for function _DelayOff_Initialization
 18237  1CD6                     _DelayOff_Initialization:	
 18238                           
 18239                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18240                           
 18241                           ;incstack = 0
 18242                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18243  1CD6  3001               	movlw	1
 18244  1CD7  319C  24FA         	fcall	_DlyOff_Initialization
 18245  1CD9  0008               	return
 18246  1CDA                     __end_of_DelayOff_Initialization:	
 18247                           
 18248                           	psect	text133
 18249  1CFA                     __ptext133:	
 18250 ;; *************** function _DlyOff_Initialization *****************
 18251 ;; Defined at:
 18252 ;;		line 56 in file "../src/DelayOff_B1.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;  sw              1    wreg     unsigned char 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  sw              1    4[COMMON] unsigned char 
 18257 ;; Return value:  Size  Location     Type
 18258 ;;		None               void
 18259 ;; Registers used:
 18260 ;;		wreg, status,2, status,0, pclath, cstack
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;Total ram usage:        1 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    4
 18273 ;; This function calls:
 18274 ;;		_DelayOffPointSelect
 18275 ;; This function is called by:
 18276 ;;		_DelayOff_Initialization
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           
 18281                           ;psect for function _DlyOff_Initialization
 18282  1CFA                     _DlyOff_Initialization:	
 18283                           
 18284                           ;incstack = 0
 18285                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18286                           ;DlyOff_Initialization@sw stored from wreg
 18287  1CFA  00F4               	movwf	DlyOff_Initialization@sw
 18288                           
 18289                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18290  1CFB  0874               	movf	DlyOff_Initialization@sw,w
 18291  1CFC  319D  2592         	fcall	_DelayOffPointSelect
 18292  1CFE  0008               	return
 18293  1CFF                     __end_of_DlyOff_Initialization:	
 18294                           
 18295                           	psect	text134
 18296  1D92                     __ptext134:	
 18297 ;; *************** function _DelayOffPointSelect *****************
 18298 ;; Defined at:
 18299 ;;		line 7 in file "../src/DelayOff_B1.c"
 18300 ;; Parameters:    Size  Location     Type
 18301 ;;  sw              1    wreg     unsigned char 
 18302 ;; Auto vars:     Size  Location     Type
 18303 ;;  sw              1    3[COMMON] unsigned char 
 18304 ;; Return value:  Size  Location     Type
 18305 ;;		None               void
 18306 ;; Registers used:
 18307 ;;		wreg
 18308 ;; Tracked objects:
 18309 ;;		On entry : 0/0
 18310 ;;		On exit  : 0/0
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18316 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;Total ram usage:        2 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; Hardware stack levels required when called:    3
 18320 ;; This function calls:
 18321 ;;		Nothing
 18322 ;; This function is called by:
 18323 ;;		_DlyOff_Initialization
 18324 ;;		_DlyOff_Main
 18325 ;;		_setDelayOff_GO
 18326 ;;		_getDelayOff_GO
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330                           
 18331                           ;psect for function _DelayOffPointSelect
 18332  1D92                     _DelayOffPointSelect:	
 18333                           
 18334                           ;incstack = 0
 18335                           ; Regs used in _DelayOffPointSelect: [wreg]
 18336                           ;DelayOffPointSelect@sw stored from wreg
 18337  1D92  00F3               	movwf	DelayOffPointSelect@sw
 18338                           
 18339                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18340  1D93  0873               	movf	DelayOffPointSelect@sw,w
 18341  1D94  3A01               	xorlw	1
 18342  1D95  1D03               	skipz
 18343  1D96  0008               	return
 18344                           
 18345                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18346  1D97  3060               	movlw	_DlySw1& (0+255)
 18347  1D98  00F2               	movwf	??_DelayOffPointSelect
 18348  1D99  0872               	movf	??_DelayOffPointSelect,w
 18349  1D9A  0021               	movlb	1	; select bank1
 18350  1D9B  00CA               	movwf	_DelayOff^(0+128)
 18351  1D9C  0008               	return
 18352  1D9D                     __end_of_DelayOffPointSelect:	
 18353                           
 18354                           	psect	text135
 18355  1569                     __ptext135:	
 18356 ;; *************** function _Buzzer_Main *****************
 18357 ;; Defined at:
 18358 ;;		line 46 in file "../src/Buzzer_B1.c"
 18359 ;; Parameters:    Size  Location     Type
 18360 ;;		None
 18361 ;; Auto vars:     Size  Location     Type
 18362 ;;		None
 18363 ;; Return value:  Size  Location     Type
 18364 ;;		None               void
 18365 ;; Registers used:
 18366 ;;		wreg, status,2, status,0
 18367 ;; Tracked objects:
 18368 ;;		On entry : 0/0
 18369 ;;		On exit  : 0/0
 18370 ;;		Unchanged: 0/0
 18371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;Total ram usage:        1 bytes
 18377 ;; Hardware stack levels used:    1
 18378 ;; Hardware stack levels required when called:    3
 18379 ;; This function calls:
 18380 ;;		Nothing
 18381 ;; This function is called by:
 18382 ;;		_main
 18383 ;; This function uses a non-reentrant model
 18384 ;;
 18385                           
 18386                           
 18387                           ;psect for function _Buzzer_Main
 18388  1569                     _Buzzer_Main:	
 18389                           
 18390                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18391                           
 18392                           ;incstack = 0
 18393                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18394  1569  0021               	movlb	1	; select bank1
 18395  156A  1CBC               	btfss	_Buz1^(0+128),1
 18396  156B  0008               	return
 18397                           
 18398                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18399  156C  3001               	movlw	1
 18400  156D  07BD               	addwf	(_Buz1^(0+128)+1),f
 18401  156E  3000               	movlw	0
 18402  156F  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 18403                           
 18404                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18405  1570  0843               	movf	((_Buz1+1)^(0+128)+6),w
 18406  1571  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 18407  1572  1D03               	skipz
 18408  1573  2D76               	goto	u7355
 18409  1574  0842               	movf	(_Buz1^(0+128)+6),w
 18410  1575  023D               	subwf	(_Buz1^(0+128)+1),w
 18411  1576                     u7355:	
 18412  1576  1C03               	skipc
 18413  1577  0008               	return
 18414                           
 18415                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18416  1578  01BD               	clrf	(_Buz1^(0+128)+1)
 18417  1579  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18418                           
 18419                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18420  157A  12BC               	bcf	_Buz1^(0+128),5
 18421  157B  0020               	movlb	0	; select bank0
 18422  157C  1D8D               	btfss	13,3	;volatile
 18423  157D  2D80               	goto	l7487
 18424  157E  0021               	movlb	1	; select bank1
 18425  157F  16BC               	bsf	_Buz1^(0+128),5
 18426  1580                     l7487:	
 18427                           
 18428                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18429  1580  0021               	movlb	1	; select bank1
 18430  1581  1ABC               	btfsc	_Buz1^(0+128),5
 18431  1582  2DA8               	goto	l96
 18432                           
 18433                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18434  1583  08BF               	movf	(_Buz1^(0+128)+3),f
 18435  1584  1D03               	skipz
 18436  1585  2DA4               	goto	l97
 18437                           
 18438                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18439  1586  1DBC               	btfss	_Buz1^(0+128),3
 18440  1587  2D94               	goto	l98
 18441                           
 18442                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18443  1588  11BC               	bcf	_Buz1^(0+128),3
 18444                           
 18445                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18446  1589  0840               	movf	(_Buz1^(0+128)+4),w
 18447  158A  00F2               	movwf	??_Buzzer_Main
 18448  158B  0872               	movf	??_Buzzer_Main,w
 18449  158C  00BF               	movwf	(_Buz1^(0+128)+3)
 18450                           
 18451                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18452  158D  0845               	movf	((_Buz1+1)^(0+128)+8),w
 18453  158E  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18454  158F  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18455  1590  0844               	movf	(_Buz1^(0+128)+8),w
 18456  1591  01C2               	clrf	(_Buz1^(0+128)+6)
 18457  1592  07C2               	addwf	(_Buz1^(0+128)+6),f
 18458                           
 18459                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18460  1593  0008               	return
 18461  1594                     l98:	
 18462  1594  1E3C               	btfss	_Buz1^(0+128),4
 18463  1595  2DA2               	goto	l100
 18464                           
 18465                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18466  1596  123C               	bcf	_Buz1^(0+128),4
 18467                           
 18468                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18469  1597  0841               	movf	(_Buz1^(0+128)+5),w
 18470  1598  00F2               	movwf	??_Buzzer_Main
 18471  1599  0872               	movf	??_Buzzer_Main,w
 18472  159A  00BF               	movwf	(_Buz1^(0+128)+3)
 18473                           
 18474                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18475  159B  0847               	movf	((_Buz1+1)^(0+128)+10),w
 18476  159C  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18477  159D  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18478  159E  0846               	movf	(_Buz1^(0+128)+10),w
 18479  159F  01C2               	clrf	(_Buz1^(0+128)+6)
 18480  15A0  07C2               	addwf	(_Buz1^(0+128)+6),f
 18481                           
 18482                           ;Buzzer_B1.c: 62: } else {
 18483  15A1  0008               	return
 18484  15A2                     l100:	
 18485                           
 18486                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18487  15A2  10BC               	bcf	_Buz1^(0+128),1
 18488                           
 18489                           ;Buzzer_B1.c: 64: }
 18490                           ;Buzzer_B1.c: 65: } else {
 18491  15A3  0008               	return
 18492  15A4                     l97:	
 18493                           
 18494                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18495  15A4  16BC               	bsf	_Buz1^(0+128),5
 18496                           
 18497                           ;Buzzer_B1.c: 68: RB3 = 1;
 18498  15A5  0020               	movlb	0	; select bank0
 18499  15A6  158D               	bsf	13,3	;volatile
 18500                           
 18501                           ;Buzzer_B1.c: 69: }
 18502                           ;Buzzer_B1.c: 70: } else {
 18503  15A7  0008               	return
 18504  15A8                     l96:	
 18505                           
 18506                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18507  15A8  12BC               	bcf	_Buz1^(0+128),5
 18508                           
 18509                           ;Buzzer_B1.c: 73: RB3 = 0;
 18510  15A9  0020               	movlb	0	; select bank0
 18511  15AA  118D               	bcf	13,3	;volatile
 18512                           
 18513                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18514  15AB  3001               	movlw	1
 18515  15AC  0021               	movlb	1	; select bank1
 18516  15AD  02BF               	subwf	(_Buz1^(0+128)+3),f
 18517  15AE  0008               	return
 18518  15AF                     __end_of_Buzzer_Main:	
 18519                           
 18520                           	psect	text136
 18521  1CC4                     __ptext136:	
 18522 ;; *************** function _Buzzer_Initialization *****************
 18523 ;; Defined at:
 18524 ;;		line 11 in file "../src/Buzzer_B1.c"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;		None
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;		None
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		None
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;Total ram usage:        0 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    3
 18545 ;; This function calls:
 18546 ;;		Nothing
 18547 ;; This function is called by:
 18548 ;;		_main
 18549 ;; This function uses a non-reentrant model
 18550 ;;
 18551                           
 18552                           
 18553                           ;psect for function _Buzzer_Initialization
 18554  1CC4                     _Buzzer_Initialization:	
 18555                           
 18556                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18557                           
 18558                           ;incstack = 0
 18559                           ; Regs used in _Buzzer_Initialization: []
 18560  1CC4  0021               	movlb	1	; select bank1
 18561  1CC5  143C               	bsf	_Buz1^(0+128),0
 18562  1CC6  0008               	return
 18563  1CC7                     __end_of_Buzzer_Initialization:	
 18564                           
 18565                           	psect	intentry
 18566  0004                     __pintentry:	
 18567 ;; *************** function _ISR *****************
 18568 ;; Defined at:
 18569 ;;		line 112 in file "../src/MCU_B1.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;		None
 18572 ;; Auto vars:     Size  Location     Type
 18573 ;;		None
 18574 ;; Return value:  Size  Location     Type
 18575 ;;		None               void
 18576 ;; Registers used:
 18577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18578 ;; Tracked objects:
 18579 ;;		On entry : 0/0
 18580 ;;		On exit  : 0/0
 18581 ;;		Unchanged: 0/0
 18582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18587 ;;Total ram usage:        1 bytes
 18588 ;; Hardware stack levels used:    1
 18589 ;; Hardware stack levels required when called:    2
 18590 ;; This function calls:
 18591 ;;		_IOC_ISR
 18592 ;;		_TMR1_ISR
 18593 ;; This function is called by:
 18594 ;;		Interrupt level 1
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598  0004                     _ISR:	
 18599                           
 18600                           ;incstack = 0
 18601                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18602  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18603  0005  3180               	pagesel	$
 18604  0006  0020               	movlb	0	; select bank0
 18605  0007  087F               	movf	127,w
 18606  0008  00F1               	movwf	??_ISR
 18607                           
 18608                           ;MCU_B1.c: 121: if (TMR1IE == 1 && TMR1IF == 1) {
 18609  0009  0021               	movlb	1	; select bank1
 18610  000A  1C11               	btfss	17,0	;volatile
 18611  000B  2813               	goto	i1l1217
 18612  000C  0020               	movlb	0	; select bank0
 18613  000D  1C11               	btfss	17,0	;volatile
 18614  000E  2813               	goto	i1l1217
 18615                           
 18616                           ;MCU_B1.c: 122: TMR1_ISR();
 18617  000F  3191  218D  3180   	fcall	_TMR1_ISR
 18618                           
 18619                           ;MCU_B1.c: 123: }
 18620  0012  281B               	goto	i1l1220
 18621  0013                     i1l1217:	
 18622                           
 18623                           ;MCU_B1.c: 134: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18624  0013  198B               	btfsc	11,3	;volatile
 18625  0014  1C0B               	btfss	11,0	;volatile
 18626  0015  281B               	goto	i1l1220
 18627  0016  0027               	movlb	7	; select bank7
 18628  0017  1D16               	btfss	22,2	;volatile
 18629  0018  281B               	goto	i1l1220
 18630                           
 18631                           ;MCU_B1.c: 135: IOC_ISR();
 18632  0019  319D  253D         	fcall	_IOC_ISR
 18633  001B                     i1l1220:	
 18634                           ;MCU_B1.c: 136: }
 18635                           ;MCU_B1.c: 144: return;
 18636                           
 18637  001B  0871               	movf	??_ISR,w
 18638  001C  0020               	movlb	0	; select bank0
 18639  001D  00FF               	movwf	127
 18640  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 18641  001F  0009               	retfie
 18642  0020                     __end_of_ISR:	
 18643                           
 18644                           	psect	text138
 18645  118D                     __ptext138:	
 18646 ;; *************** function _TMR1_ISR *****************
 18647 ;; Defined at:
 18648 ;;		line 232 in file "../src/MCU_B1.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;		None
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;		None
 18653 ;; Return value:  Size  Location     Type
 18654 ;;		None               void
 18655 ;; Registers used:
 18656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;Total ram usage:        0 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; Hardware stack levels required when called:    1
 18669 ;; This function calls:
 18670 ;;		_DimmerLights_MOSFET_TMR_1
 18671 ;; This function is called by:
 18672 ;;		_ISR
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           
 18677                           ;psect for function _TMR1_ISR
 18678  118D                     _TMR1_ISR:	
 18679                           
 18680                           ;MCU_B1.c: 234: TMR1H = (int)((65536-1480)/256);
 18681                           
 18682                           ;incstack = 0
 18683                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18684  118D  30FA               	movlw	250
 18685  118E  0020               	movlb	0	; select bank0
 18686  118F  0097               	movwf	23	;volatile
 18687                           
 18688                           ;MCU_B1.c: 235: TMR1L = (int)((65536-1480)%256);
 18689  1190  3038               	movlw	56
 18690  1191  0096               	movwf	22	;volatile
 18691                           
 18692                           ;MCU_B1.c: 236: TMR1IF = 0;
 18693  1192  1011               	bcf	17,0	;volatile
 18694                           
 18695                           ;MCU_B1.c: 241: DimmerLights_MOSFET_TMR_1();
 18696  1193  3196  264D  3191   	fcall	_DimmerLights_MOSFET_TMR_1
 18697                           
 18698                           ;MCU_B1.c: 255: Timer1.Count++;
 18699  1196  3001               	movlw	1
 18700  1197  0022               	movlb	2	; select bank2
 18701  1198  07A4               	addwf	(_Timer1^(0+256)+1),f
 18702  1199  3000               	movlw	0
 18703  119A  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18704                           
 18705                           ;MCU_B1.c: 256: if (Timer1.Count == (int)(20*10)) {
 18706  119B  3001               	movlw	1
 18707  119C  3E23               	addlw	_Timer1& (0+255)
 18708  119D  0086               	movwf	6
 18709  119E  3001               	movlw	1	; select bank2/3
 18710  119F  0087               	movwf	7
 18711  11A0  3F40               	moviw [0]fsr1
 18712  11A1  3AC8               	xorlw	200
 18713  11A2  1D03               	skipz
 18714  11A3  29A6               	goto	u745_25
 18715  11A4  3F41               	moviw [1]fsr1
 18716  11A5  3A00               	xorlw	0
 18717  11A6                     u745_25:	
 18718  11A6  1D03               	skipz
 18719  11A7  0008               	return
 18720                           
 18721                           ;MCU_B1.c: 257: Timer1.Count = 0;
 18722  11A8  01A4               	clrf	(_Timer1^(0+256)+1)
 18723  11A9  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18724                           
 18725                           ;MCU_B1.c: 258: Timer1.Timeout = 1;
 18726  11AA  1423               	bsf	_Timer1^(0+256),0
 18727  11AB  0008               	return
 18728  11AC                     __end_of_TMR1_ISR:	
 18729                           
 18730                           	psect	text139
 18731  164D                     __ptext139:	
 18732 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 18733 ;; Defined at:
 18734 ;;		line 1185 in file "../src/Dimmer_B1.c"
 18735 ;; Parameters:    Size  Location     Type
 18736 ;;		None
 18737 ;; Auto vars:     Size  Location     Type
 18738 ;;		None
 18739 ;; Return value:  Size  Location     Type
 18740 ;;		None               void
 18741 ;; Registers used:
 18742 ;;		wreg, status,2, status,0
 18743 ;; Tracked objects:
 18744 ;;		On entry : 0/0
 18745 ;;		On exit  : 0/0
 18746 ;;		Unchanged: 0/0
 18747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;Total ram usage:        1 bytes
 18753 ;; Hardware stack levels used:    1
 18754 ;; This function calls:
 18755 ;;		Nothing
 18756 ;; This function is called by:
 18757 ;;		_TMR1_ISR
 18758 ;; This function uses a non-reentrant model
 18759 ;;
 18760                           
 18761                           
 18762                           ;psect for function _DimmerLights_MOSFET_TMR_1
 18763  164D                     _DimmerLights_MOSFET_TMR_1:	
 18764                           
 18765                           ;Dimmer_B1.c: 1186: if (DimmerIntr1.Start == 1) {
 18766                           
 18767                           ;incstack = 0
 18768                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 18769  164D  0021               	movlb	1	; select bank1
 18770  164E  1D68               	btfss	_DimmerIntr1^(0+128),2
 18771  164F  2E5A               	goto	i1l7047
 18772                           
 18773                           ;Dimmer_B1.c: 1187: DimmerIntr1.Count++;
 18774  1650  3001               	movlw	1
 18775  1651  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18776  1652  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18777  1653  07E9               	addwf	(_DimmerIntr1^(0+128)+1),f
 18778                           
 18779                           ;Dimmer_B1.c: 1188: if (DimmerIntr1.Count >= ((char)(70*0.8)) + 1) {
 18780  1654  3039               	movlw	57
 18781  1655  0269               	subwf	(_DimmerIntr1^(0+128)+1),w
 18782  1656  1C03               	skipc
 18783  1657  2E5A               	goto	i1l7047
 18784                           
 18785                           ;Dimmer_B1.c: 1189: DimmerIntr1.Count = 0;
 18786  1658  01E9               	clrf	(_DimmerIntr1^(0+128)+1)
 18787                           
 18788                           ;Dimmer_B1.c: 1190: DimmerIntr1.Start = 0;
 18789  1659  1168               	bcf	_DimmerIntr1^(0+128),2
 18790  165A                     i1l7047:	
 18791                           
 18792                           ;Dimmer_B1.c: 1191: }
 18793                           ;Dimmer_B1.c: 1192: }
 18794                           ;Dimmer_B1.c: 1194: if (DimmerIntr1.GO == 1) {
 18795  165A  1C68               	btfss	_DimmerIntr1^(0+128),0
 18796  165B  2E67               	goto	i1l866
 18797                           
 18798                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 18799  165C  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 18800  165D  0269               	subwf	(_DimmerIntr1^(0+128)+1),w
 18801  165E  1C03               	skipc
 18802  165F  0008               	return
 18803                           
 18804                           ;Dimmer_B1.c: 1196: DimmerIntr1.GO = 0;
 18805  1660  1068               	bcf	_DimmerIntr1^(0+128),0
 18806                           
 18807                           ;Dimmer_B1.c: 1197: DimmerIntr1.Tune = 1;
 18808  1661  14E8               	bsf	_DimmerIntr1^(0+128),1
 18809                           
 18810                           ;Dimmer_B1.c: 1199: if (DimmerIntr1.ControlStatus == 1) {
 18811  1662  1DE8               	btfss	_DimmerIntr1^(0+128),3
 18812  1663  0008               	return
 18813                           
 18814                           ;Dimmer_B1.c: 1200: RB1 = 0;
 18815  1664  0020               	movlb	0	; select bank0
 18816  1665  108D               	bcf	13,1	;volatile
 18817                           
 18818                           ;Dimmer_B1.c: 1202: }
 18819                           ;Dimmer_B1.c: 1203: }
 18820                           ;Dimmer_B1.c: 1204: } else {
 18821  1666  0008               	return
 18822  1667                     i1l866:	
 18823                           
 18824                           ;Dimmer_B1.c: 1205: if (DimmerIntr1.Tune == 1) {
 18825  1667  1CE8               	btfss	_DimmerIntr1^(0+128),1
 18826  1668  0008               	return
 18827                           
 18828                           ;Dimmer_B1.c: 1206: DimmerIntr1.Tune = 0;
 18829  1669  10E8               	bcf	_DimmerIntr1^(0+128),1
 18830                           
 18831                           ;Dimmer_B1.c: 1207: DimmerIntr1.TuneTime++;
 18832  166A  3001               	movlw	1
 18833  166B  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18834  166C  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18835  166D  07EA               	addwf	(_DimmerIntr1^(0+128)+2),f
 18836                           
 18837                           ;Dimmer_B1.c: 1208: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 18838  166E  086B               	movf	(_DimmerIntr1^(0+128)+3),w
 18839  166F  026A               	subwf	(_DimmerIntr1^(0+128)+2),w
 18840  1670  1C03               	skipc
 18841  1671  0008               	return
 18842                           
 18843                           ;Dimmer_B1.c: 1209: DimmerIntr1.TuneTime = 0;
 18844  1672  01EA               	clrf	(_DimmerIntr1^(0+128)+2)
 18845                           
 18846                           ;Dimmer_B1.c: 1210: if (DimmerIntr1.Dimming_Sw == 1) {
 18847  1673  1E68               	btfss	_DimmerIntr1^(0+128),4
 18848  1674  2E8B               	goto	i1l872
 18849                           
 18850                           ;Dimmer_B1.c: 1211: if (DimmerIntr1.Dimming_Status == 0) {
 18851  1675  1AE8               	btfsc	_DimmerIntr1^(0+128),5
 18852  1676  2E82               	goto	i1l7071
 18853                           
 18854                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.DimmingValue < ((char)(70*0.8))) {
 18855  1677  3038               	movlw	56
 18856  1678  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18857  1679  1803               	skipnc
 18858  167A  2E80               	goto	i1l874
 18859                           
 18860                           ;Dimmer_B1.c: 1213: DimmerIntr1.DimmingValue++;
 18861  167B  3001               	movlw	1
 18862  167C  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18863  167D  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18864  167E  07EC               	addwf	(_DimmerIntr1^(0+128)+4),f
 18865                           
 18866                           ;Dimmer_B1.c: 1214: } else {
 18867  167F  0008               	return
 18868  1680                     i1l874:	
 18869                           
 18870                           ;Dimmer_B1.c: 1215: DimmerIntr1.Dimming_Status = 1;
 18871  1680  16E8               	bsf	_DimmerIntr1^(0+128),5
 18872                           
 18873                           ;Dimmer_B1.c: 1216: }
 18874                           ;Dimmer_B1.c: 1217: } else {
 18875  1681  0008               	return
 18876  1682                     i1l7071:	
 18877                           
 18878                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.DimmingValue > ((char)(30*0.8))) {
 18879  1682  3019               	movlw	25
 18880  1683  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18881  1684  1C03               	skipc
 18882  1685  2E89               	goto	i1l877
 18883                           
 18884                           ;Dimmer_B1.c: 1219: DimmerIntr1.DimmingValue--;
 18885  1686  3001               	movlw	1
 18886  1687  02EC               	subwf	(_DimmerIntr1^(0+128)+4),f
 18887                           
 18888                           ;Dimmer_B1.c: 1220: } else {
 18889  1688  0008               	return
 18890  1689                     i1l877:	
 18891                           
 18892                           ;Dimmer_B1.c: 1221: DimmerIntr1.Dimming_Status = 0;
 18893  1689  12E8               	bcf	_DimmerIntr1^(0+128),5
 18894                           
 18895                           ;Dimmer_B1.c: 1222: }
 18896                           ;Dimmer_B1.c: 1223: }
 18897                           ;Dimmer_B1.c: 1224: } else if (DimmerIntr1.Dimming_RF == 1) {
 18898  168A  0008               	return
 18899  168B                     i1l872:	
 18900  168B  1F68               	btfss	_DimmerIntr1^(0+128),6
 18901  168C  0008               	return
 18902                           
 18903                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 18904  168D  086D               	movf	(_DimmerIntr1^(0+128)+5),w
 18905  168E  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18906  168F  1803               	skipnc
 18907  1690  2E96               	goto	i1l7079
 18908                           
 18909                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue++;
 18910  1691  3001               	movlw	1
 18911  1692  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18912  1693  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18913  1694  07EC               	addwf	(_DimmerIntr1^(0+128)+4),f
 18914                           
 18915                           ;Dimmer_B1.c: 1227: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 18916  1695  0008               	return
 18917  1696                     i1l7079:	
 18918  1696  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 18919  1697  026D               	subwf	(_DimmerIntr1^(0+128)+5),w
 18920  1698  1803               	skipnc
 18921  1699  2E9D               	goto	i1l883
 18922                           
 18923                           ;Dimmer_B1.c: 1228: DimmerIntr1.DimmingValue--;
 18924  169A  3001               	movlw	1
 18925  169B  02EC               	subwf	(_DimmerIntr1^(0+128)+4),f
 18926                           
 18927                           ;Dimmer_B1.c: 1229: } else {
 18928  169C  0008               	return
 18929  169D                     i1l883:	
 18930                           
 18931                           ;Dimmer_B1.c: 1230: DimmerIntr1.Dimming_RF = 0;
 18932  169D  1368               	bcf	_DimmerIntr1^(0+128),6
 18933  169E  0008               	return
 18934  169F                     __end_of_DimmerLights_MOSFET_TMR_1:	
 18935                           
 18936                           	psect	text140
 18937  1D3D                     __ptext140:	
 18938 ;; *************** function _IOC_ISR *****************
 18939 ;; Defined at:
 18940 ;;		line 378 in file "../src/MCU_B1.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;		None
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;		None
 18945 ;; Return value:  Size  Location     Type
 18946 ;;		None               void
 18947 ;; Registers used:
 18948 ;;		status,2, status,0, pclath, cstack
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18958 ;;Total ram usage:        0 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; Hardware stack levels required when called:    1
 18961 ;; This function calls:
 18962 ;;		_DimmerLights_MOSFET_IOC_1
 18963 ;; This function is called by:
 18964 ;;		_ISR
 18965 ;; This function uses a non-reentrant model
 18966 ;;
 18967                           
 18968                           
 18969                           ;psect for function _IOC_ISR
 18970  1D3D                     _IOC_ISR:	
 18971                           
 18972                           ;MCU_B1.c: 379: IOCBF2 = 0;
 18973                           
 18974                           ;incstack = 0
 18975                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 18976  1D3D  0027               	movlb	7	; select bank7
 18977  1D3E  1116               	bcf	22,2	;volatile
 18978                           
 18979                           ;MCU_B1.c: 380: IOCIF = 0;
 18980  1D3F  100B               	bcf	11,0	;volatile
 18981                           
 18982                           ;MCU_B1.c: 382: if (myMain.PowerON == 1) {
 18983  1D40  0021               	movlb	1	; select bank1
 18984  1D41  1C2E               	btfss	_myMain^(0+128),0
 18985  1D42  0008               	return
 18986                           
 18987                           ;MCU_B1.c: 388: DimmerLights_MOSFET_IOC_1();
 18988  1D43  319E  261E         	fcall	_DimmerLights_MOSFET_IOC_1
 18989  1D45  0008               	return
 18990  1D46                     __end_of_IOC_ISR:	
 18991                           
 18992                           	psect	text141
 18993  1E1E                     __ptext141:	
 18994 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 18995 ;; Defined at:
 18996 ;;		line 1238 in file "../src/Dimmer_B1.c"
 18997 ;; Parameters:    Size  Location     Type
 18998 ;;		None
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;		None
 19001 ;; Return value:  Size  Location     Type
 19002 ;;		None               void
 19003 ;; Registers used:
 19004 ;;		None
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19014 ;;Total ram usage:        0 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; This function calls:
 19017 ;;		Nothing
 19018 ;; This function is called by:
 19019 ;;		_IOC_ISR
 19020 ;; This function uses a non-reentrant model
 19021 ;;
 19022                           
 19023                           
 19024                           ;psect for function _DimmerLights_MOSFET_IOC_1
 19025  1E1E                     _DimmerLights_MOSFET_IOC_1:	
 19026                           
 19027                           ;Dimmer_B1.c: 1239: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19028                           
 19029                           ;incstack = 0
 19030                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 19031  1E1E  0021               	movlb	1	; select bank1
 19032  1E1F  1968               	btfsc	_DimmerIntr1^(0+128),2
 19033  1E20  0008               	return
 19034  1E21  0020               	movlb	0	; select bank0
 19035  1E22  1D0D               	btfss	13,2	;volatile
 19036  1E23  0008               	return
 19037                           
 19038                           ;Dimmer_B1.c: 1240: DimmerIntr1.Start = 1;
 19039  1E24  0021               	movlb	1	; select bank1
 19040  1E25  1568               	bsf	_DimmerIntr1^(0+128),2
 19041                           
 19042                           ;Dimmer_B1.c: 1241: DimmerIntr1.GO = 1;
 19043  1E26  1468               	bsf	_DimmerIntr1^(0+128),0
 19044                           
 19045                           ;Dimmer_B1.c: 1243: if (DimmerIntr1.ControlStatus == 1) {
 19046  1E27  1DE8               	btfss	_DimmerIntr1^(0+128),3
 19047  1E28  0008               	return
 19048                           
 19049                           ;Dimmer_B1.c: 1244: RB1 = 1;
 19050  1E29  0020               	movlb	0	; select bank0
 19051  1E2A  148D               	bsf	13,1	;volatile
 19052  1E2B  0008               	return
 19053  1E2C                     __end_of_DimmerLights_MOSFET_IOC_1:	
 19054  007E                     btemp	set	126	;btemp
 19055  007E                     pic14e$flags	set	126
 19056  007E                     wtemp	set	126
 19057  007E                     wtemp0	set	126
 19058  0080                     wtemp1	set	128
 19059  0082                     wtemp2	set	130
 19060  0084                     wtemp3	set	132
 19061  0086                     wtemp4	set	134
 19062  0088                     wtemp5	set	136
 19063  007F                     wtemp6	set	127
 19064  007E                     ttemp	set	126
 19065  007E                     ttemp0	set	126
 19066  0081                     ttemp1	set	129
 19067  0084                     ttemp2	set	132
 19068  0087                     ttemp3	set	135
 19069  007F                     ttemp4	set	127
 19070  007E                     ltemp	set	126
 19071  007E                     ltemp0	set	126
 19072  0082                     ltemp1	set	130
 19073  0086                     ltemp2	set	134
 19074  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      79
    BANK2            80      4      77
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSw_Main->_setBuz
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  149519
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4853
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4853
                                             61 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4367
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4367
                                              9 COMMON     1     1      0
                                              8 BANK0      2     2      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46773
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   46773
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   42421
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4656
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   37493
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11076
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21305
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2024
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1188
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   13142
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3532
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   61499
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   61214
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   39907
                                             69 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3786
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   20964
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              3 COMMON     3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5043
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5043
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2803
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                              6 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     162      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     162      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Jan 07 09:49:47 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1F97  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l86 16CE                                        l96 15A8  
                                      l88 16E0                                        l97 15A4  
                                      l98 1594                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1210                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006D  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1066  
                  __end_of_setDelayOff_GO 07FB                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 08D5                      _setDimmerLights_Line 1E11  
                            ___ftadd@sign 0043                                       l100 15A2  
                                     l303 10A5                                       l304 10A7  
                                     l235 0A42                      _setDimmerLights_SwOn 1300  
                                     l531 0AD3                                       l347 1237  
                                     l683 1E0F                                       l786 1131  
                                     _GIE 005F                                       _CRC 00C8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CC  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0128                                       _Cmd 00C9  
            getDimmerLights_Status@lights 0074                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 10B2  
                   _Buzzer_Initialization 1CC4                           __end_of_ADC_Set 1D2E  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1FAC  
             _setDimmerIntr_ControlStatus 1F97                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1D46                     _setDimmerLights_OnOff 06B7  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l2123 061A  
                                    l2124 065B                                      l1255 1360  
                                    l2119 06B3                                      l1513 05F6  
                                    l1522 1F96                                      l2164 0BBB  
                                    l1269 12A1                                      l2149 1E6B  
                                    l2501 022A                                      l1278 15F4  
                                    l1455 1470                                      l2192 0B49  
                                    l1481 12E5                                      l1482 12FE  
                                    l1635 01E0                                      l2179 13C9  
                                    l1645 01BC                                      l1637 0082  
                         __end_of_IOC_Set 1D7E                                      l1486 12FA  
                                    l1646 01BA                                      l1638 007E  
                                    l1639 0079                                      l2479 1075  
                                    l1793 0E92                                      l6211 1253  
                                    l2499 034C                                      l2845 085D  
                                    l6109 17EB                                      l7021 106C  
                                    l2678 115B                                      l1798 0E8C  
                                    l2839 0846                                      l6063 07AD  
                                    l6073 07DD                                      l6209 1248  
                                    l6243 1F91                                      l2868 03F5  
                                    l6077 07F1                                      l5631 081C  
                                    l6239 1F84                                      l8211 171C  
                                    l5635 0823                                      l5803 03C1  
                                    l6195 1147                     _setDimmerLights_SwOff 1403  
                                    l8221 1737                                      l5645 084B  
                                    l5637 082D                                      l5821 0407  
                                    l5805 03CB                                      l5741 1EF6  
                                    l6453 14B9                                      l7181 15B5  
                                    l6197 114C                                      l5647 0853  
                                    l5639 0832                                      l5815 03E7  
                                    l5807 03D0                                      l9023 066A  
                                    l8225 173F                                      l8217 172E  
                                    l8209 1710                                      l5825 0419  
                                    l5817 03F1                                      l5809 03D4  
                                    l5921 0F22                                      l5905 0EFE  
                                    l5745 1EFC                                      l9009 0656  
                                    l8331 142F                                      l5835 0434  
                                    l5851 0D6A                                      l6467 14DA  
                                    l6459 14C3                                      l7187 15C9  
                                    l9051 06AC                                      l9123 02C7  
                                    l8317 1326                                      l5845 0D54  
                                    l6493 1E9D                                      l5917 0F1A  
                                    l5909 0F06                                      l8405 0C4F  
                                    l9037 0694                                      l9109 0289  
                                    l9133 02F9                                      l8319 132B  
                                    l5775 037E                                      l6495 1EA2  
                                    l8351 10D8                                      l9071 1080  
                                    l9303 1452                                      l8193 16FD  
                                    l5785 0394                                      l5873 0DC4  
                                    l5865 0DAB                                      l5945 0CCF  
                                    l6489 1E97                                      l8433 1223  
                                    l8409 0C54                                      l5779 0385  
                                    l5971 0D1A                                      l5963 0CFF  
                                    l9171 1133                                      l7467 1155  
                                    l9403 015E                                      l9411 0186  
                                    l9331 0060                                      l8355 10DE  
                                    l8371 1200                                      l8427 121A  
                                    l8611 0A4C                                      l6843 1F10  
                                    l8419 0CA2                                      l9067 107A  
                                    l9083 0214                                      l9251 0BFE  
                                    l9243 0BDB                                      l8525 12E1  
                                    l6669 1F69                                      l8269 11D7  
                                    l5797 03AE                                      l5973 0D23  
                                    l5965 0D0D                                      l5893 0EC3  
                                    l6941 13F3                                      l6933 13D5  
                                    l9421 019C                                      l8349 10D5  
                                    l8365 11F7                                      l8461 1553  
                                    l8429 121D                                      l8605 0A2B  
                                    l7487 1580                                      l8199 1708  
                                    l8535 12F6                                      l8527 12E9  
                                    l5975 0D26                                      l5887 0EAD  
                                    l6935 13E1                                      l9407 017A  
                                    l8367 11FA                                      l8471 1563  
                                    l8455 154A                                      l8623 0A5F  
                                    l8615 0A52                                      l9271 0C32  
                                    l9255 0C07                                      l8713 0701  
                                    l9505 0589                                      l6945 13FC  
                                    l8465 155A                                      l8457 154D  
                                    l8641 0887                                      l8617 0A56  
                                    l8609 0A49                                      l8393 1518  
                                    l5979 0D34                                      l9523 05CA  
                                    l9507 0565                                      l9195 04BE  
                                    l9371 00D7                                      l8467 155D  
                                    l8643 088A                                      l8619 0A59  
                                    l8571 0B32                                      l9099 0257  
                                    l8733 0742                                      l8717 0718  
                                    l9525 05A6                                      l9509 0591  
                                    l9365 00A5                                      l9349 0081  
                                    l8573 0B36                                      l8565 0AF0  
                                    l8821 0B97                                      l8805 0B79  
                                    l9285 149C                     _myMain_Initialization 1E75  
                                    l8727 0737                                      l9527 05D2  
                                    l9535 05EC                                      l6799 128C  
                                    l6983 1E64                                      l8663 089F  
                                    l8647 0890                                      l8591 0A1C  
                                    l8567 0AF6                                      l8559 0ADB  
                                    l8753 1615                                      l9529 05DC  
                                    l8665 08B5                                      l8585 0A13  
                                    l8569 0B11                                      l8577 0B3A  
                                    l8809 0B82                                      l8913 10F6  
                                    l8747 076C                                      l9459 01CF  
                                    l8587 0A16                                      l8931 0E02  
                                    l8907 10EE                                      l9493 0553  
                                    l9397 0151                                      l8909 10F1  
                                    l9581 176A                                      l9487 0544  
                                    l8847 1F21                                      l9497 0562  
                                    l8793 0B60                                      l8961 0E61  
                                    l9585 1775                                      _CFGS 0CAE  
                                    l8963 0E63                                      l8885 08FB  
                                    l8973 0E78                                      l8887 0901  
                                    l8975 0E79                              __CFG_WDTE$ON 0000  
                                    l8897 0927                                      l8899 092D  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5025 0CD6                                      u4315 0841  
                                    u4335 084E                                      u5055 0D00  
                                    _PEIE 005E                                      u4365 0864  
                                    u5085 0D1B                                      u5245 07B9  
                                    u4295 0828                                      u5280 17AB  
                                    u4725 03D5                                      u5285 17A9  
                                    u6405 13E2                                      u6415 13EC  
                                    u4665 03AF                                      u4825 0D7C  
                                    u4905 0ECF                                      u6425 13F4  
                                    u5385 123D                                      u4755 03E8  
                                    u4835 0D8C                                      u4915 0EDF  
                                    u7315 115C                                      u4845 0DAC  
                                    u7325 1161                                      u4695 03C2  
                                    u4855 0DBB                                      u4935 0F07  
                                    u4865 0DC5                                      u4945 0F0D  
                                    u6385 13D8                                      u7355 1576  
                                    u4975 0F23                                      u7535 1357  
                                    u4985 0F29                                      u8605 172F  
                                    u9325 1FFA                                      u8565 1713  
                                    u8585 171D                                      u8595 1727  
                                    u8695 1FD0                                      u9915 0683  
                                    _LWLO 0CAD                                      u9775 0E49  
                                    u9795 0E69                                      u9885 0636  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 109A  
              _setDimmerLights_DimmingRun 1083                                      _Buz1 00BC  
                                    _Load 012A                                      _Temp 00D6  
                                    _main 1746                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0ADA                           __end_of_RF_Main 1CD0  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1D88                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0CB6                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2198 0075  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 1F6F  
__size_of_getDimmerLights_Allow_Condition 0013         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1F5C  
                  _getDimmerLights_Status 1E2C                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 1CE6                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005D  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0169  
                         __end_of___awdiv 1746                           __end_of___ftadd 044C  
                         __end_of___ftdiv 0DE6                           __end_of___ftneg 1D4F  
                                   u10305 0C1F                           __end_of___ftmul 0F4A  
                                   u10405 1468                                     u10255 0BEB  
                                   u10355 1493                           ___awdiv@divisor 0072  
                                   u10365 14A2                                     u10800 05D0  
                                   _T1CON 0018                                     u10545 00A3  
                                   u10555 00D5                           __end_of___fttol 0D3D  
                                   u10805 05AF                                     u10645 018D  
                                   u10565 010A                                     u10770 058F  
                                   u10775 056E                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1403                                     i1l872 168B  
                                   i1l874 1680                                     i1l866 1667  
                                   i1l883 169D                                     i1l877 1689  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                   __end_of_Timeout_Counter 2000  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 099E  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 0939  
                                   _Light 00CD                          __end_of_TMR1_ISR 11AC  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1E04                                     _getAD 10E6  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 1EF4               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D61  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1EB4  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 17A1               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 005F               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 17A1  
                     ?_setRF_DimmerLights 005D                          __end_of_Fosc_Set 1CEA  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0065                            _Exception_Main 0528  
                        ?_CC2500_WriteREG 0074                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1E3A                                    ??_main 007A  
                           ___fttol@sign1 004E                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0072              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0ADA                            _setMemory_Data 1DB3  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 15FC                                 ??_IOC_ISR 0070  
                               ??_IOC_Set 0072                               _DimmerIntr1 00E8  
                _getMain_All_LightsStatus 1D35                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1FC1                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0A6B  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1D20  
                               ??_WDT_Set 0072                          __end_of___awtoft 11EE  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0874  
                _getMain_All_Error_Status 12D2                                    _IOCBF2 1CB2  
                                  i1l1220 001B                                    i1l1217 0013  
                                  i1l7071 1682                                    i1l7047 165A  
                                  i1l7079 1696                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0074                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 019A                                    u745_25 11A6  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 10B2                                    _WDTCON 0097  
                      DelayTime_1us@count 0072                      Exception_Main@i_3487 002A  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1FEB                                    _Dimmer 0120  
                                  _DlySw1 0160             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1EA4                __end_of_Mcu_Initialization 1F5C  
                     __end_of_Buzzer_Main 15AF                                    _Memory 01BE  
                                  _Timer1 0123                                    ___bmul 1EF4  
                  __end_of_Exception_Main 05F7                      Load_Main@Load_Status 0023  
                    Exception_Main@lights 002C                                    ___wmul 1153  
                               ??___awdiv 0076                                 ??___ftadd 003F  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 002C  
                               ??___ftneg 007A                                 ??___ftmul 002C  
                               ??___fttol 004A              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0072                                 ??___lwdiv 0076  
                  ??_setDimmerLights_Main 007A                    ??_setDimmerLights_Line 0072  
                                  _r_data 00D4   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E66  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 000F         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E57  
                                  _s_data 00D5                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 14AB                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1DBE  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 169F                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1CCA          ??_setDimmerLights_Initialization 0072  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1FC1  
        __end_of_setDimmerIntr_Dimming_Sw 1F82                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1258                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1EE4  
             getMain_Lights_Count@status1 0073                     __end_of_SwPointSelect 1DD4  
            __size_of_Flash_Memory_Modify 004D                   __size_of_LedPointSelect 000B  
         setDimmerIntr_Dimming_Sw@command 0072                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 106E  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0048  
         getDimmerIntr_DimmingValue@value 0074           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$5175 0074  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 11AC                             __end_of_getAD 1100  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1CDE                           _getSw_KeyStatus 1F16  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0063  
           ??_Flash_Memory_Initialization 005A                ?_DimmerLights_MOSFET_IOC_1 0070  
                    _getMain_Lights_Count 1D58                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01E6         setDimmerIntr_ControlStatus@lights 0074  
              ?_DimmerLights_MOSFET_TMR_1 0070                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1DE0                __end_of_set_TimeoutCleared 0800  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0073  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1DD4                      __size_of_setLED_Main 0033  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1CD0                        ??_CC2500_WriteByte 0072  
                              __pbssBANK0 006D                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1569  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1CD6                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1CD6  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 007B                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0072                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1746  
                          _getDelayOff_GO 1E48                       _CC2500_WriteCommand 10CC  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 005F         __end_of_DimmerIntr_Initialization 1F4A  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0BBD                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1D12                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1D27  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 1472  
      __end_of_DimmerLights_SelectPointer 1D74                _DimmerLights_SelectPointer 1D6A  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1D92  
       __end_of_DimmerLights_MOSFET_IOC_1 1E2C                        _setRFSW_AdjControl 0C38  
                  __end_of_setProductData 1DE0         __end_of_DimmerLights_MOSFET_TMR_1 169F  
           setDimmerLights_Dimming@lights 0064                                   _IOC_ISR 1D3D  
                                 _IOC_Set 1D74                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0062     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1333  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 0800  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1CCD                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1D7E  
         __end_of_setControl_Lights_Table 0B4A                           setRF_Main@error 006B  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 164D  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1DC9                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0015  
       __size_of_setDimmerIntr_Dimming_Sw 0013                         __end_of_getBuz_GO 1EC4  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1E57            __end_of_getDimmerLights_Status 1E3A  
                       __end_of_getRxData 0BBD                   __end_of_getSw_KeyStatus 1F27  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 16F2                                   ___ftadd 0356  
                                 ___ftdiv 0D3D                                   ___ftneg 1D46  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0CB6                       __end_of_Switch_Main 1D35  
                                 ___lwdiv 13CD                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1F05  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 003A                      setRFSW_AdjControl@sw 0060  
                         __size_of_setBuz 0053                                   __ptext1 143A  
                                 __ptext2 1E75                                   __ptext3 1472  
                                 __ptext4 0BBD                                   __ptext5 10E6  
                                 __ptext6 1EE4                                   __ptext7 0002  
                                 __ptext8 1CD3                                   __ptext9 0DE6  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0066  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1366  
               __end_of_Flash_Memory_Read 0814                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 05F7                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1CDA                         _DimmerLights_Main 111B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1CFF  
              __end_of_CC2500_ClearRXFIFO 1CF2                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1CF6                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006C  
                          _LedPointSelect 1DA8                       _DelayOffPointSelect 1D92  
                                 clrloop0 1D06            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1D6A                      end_of_initialization 0048  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 12A8  
                           _DelayTime_1us 1233                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 12A8        __size_of_setDimmerLights_DimmingOn 0026  
                                 init_ram 1CFF                __end_of_setRF_TransceiveGO 1E94  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1D00  
                              _setSw_Main 01E6                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0026                         _CC2500_ReadStatus 1210  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1EA4  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0874                             _CC2500_TxData 0A03  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 15AF  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1F82                       _Flash_Memory_Unlock 1D4F  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1137                        _Mcu_Initialization 1F4A  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1CEE  
                    __end_of_my_MainTimer 1472                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1DB3  
                __size_of_CC2500_WriteREG 0022          setDimmerIntr_DimmingValue@lights 0074  
        getDimmerIntr_DimmingValue@lights 0073                 __end_of_CC2500_InitSetREG 12D2  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 1233                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 127E  
                        ??_Exception_Main 0079                            __end_of_IO_Set 10CC  
                    _setRF_Initialization 1D88                        _setMemory_LoopSave 1ED4  
                             _Switch_Main 1D2E                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1F16  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1FD6               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1F05  
     __size_of_getDimmerIntr_DimmingValue 000D                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1170                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 0008          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
           __size_of_setDimmerLights_Main 0064                            __end_of_setLED 14E5  
           __size_of_setDimmerLights_Line 000D             __size_of_setDimmerLights_SwOn 0033  
                          __end_of_setBuz 16F2               ??_DimmerLights_MOSFET_TMR_1 0070  
                    _CC2500_FrequencyCabr 1DBE                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 14E5  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 004C  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1D19                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 118D           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 0A03   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 099E                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 07FB  
       __end_of_setDimmerIntr_MaxmumValue 1DEC                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0165  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1CD3                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00CF  
                   setProductData@address 005C                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 000B  
        __end_of_getMain_All_LightsStatus 1D3D                                 _Tx_Length 00D2  
                             __pdataBANK4 0220                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1300  
                        _CC2500_SIDLEMode 1CF6                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1EC4                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK2 0169  
               setRF_TransceiveGO@command 0073                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1F38                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 005F  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1E1E  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 0158                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 164D                     setDelayOff_GO@command 005D  
          __size_of_setLoad_AH_AL_Restore 001B                           ??_CC2500_RxData 0076  
           __end_of_setLoad_AH_AL_Restore 111B                  setRFSW_AdjControl@status 005F  
                         ??_CC2500_TxData 0076                                 __pnvBANK0 006C  
                          getRxData@error 0069               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1CEA                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0028                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00C0                          ___lwdiv@dividend 0074  
                   DelayOffPointSelect@sw 0073                             _getCmd_Status 1E94  
                              setBuz@time 0024                           ??_setCmd_Status 0073  
                     setDelayOff_GO@value 005E                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0022  
                  _setTemp_Initialization 1CC3                                 _getBuz_GO 1EB4  
                ?_setDimmerLights_Dimming 0062       __end_of_Flash_Memory_Initialization 0528  
             _Flash_Memory_Initialization 044C                                  ?___awdiv 0072  
                               __ptext100 1E48                                 __ptext101 1E94  
                               __ptext110 0CB6                                 __ptext102 15FC  
                               __ptext111 1D46                                 __ptext103 0F4A  
                               __ptext120 1D0B                                 __ptext112 0D3D  
                               __ptext104 1E84                                 __ptext121 1CC2  
                               __ptext113 0356                                 __ptext105 17A1  
                               __ptext130 1E2C                                 __ptext122 1F38  
                               __ptext114 11CC                                 __ptext106 1E11  
                               __ptext131 1D6A                                 __ptext123 1CDA  
                               __ptext115 0814                                 __ptext107 1DE0  
                               __ptext140 1D3D                                 __ptext132 1CD6  
                               __ptext124 0A6B                                 __ptext116 1E04  
                               __ptext108 1F6F                                 __ptext141 1E1E  
                               __ptext133 1CFA                                 __ptext125 1DD4  
                               __ptext117 1F5C                                 __ptext109 0939  
                                ?___ftadd 0039                                 __ptext134 1D92  
                               __ptext126 1300                                 __ptext118 1D12  
                               __ptext135 1569                                 __ptext127 169F  
                               __ptext119 12D2                                 __ptext136 1CC4  
                               __ptext128 16F2                                 __ptext129 1403  
                               __ptext138 118D                                 __ptext139 164D  
                               _getRxData 0B4A                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 1525  
                        ??_setProductData 005B             __size_of_setSw_Initialization 000E  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1CC7  
                           ??_setLog_Code 005D                  getDimmerLights_Line@line 0072  
                      __end_of_TouchPower 1083                       __size_of_setSw_Main 0170  
            CC2500_ReadStatus@status_addr 0075        __end_of_getDimmerIntr_DimmingValue 1E11  
            ??_setDimmerIntr_DimmingValue 0073                _getDimmerIntr_DimmingValue 1E04  
                  CC2500_WriteByte@loop_a 0073            __size_of_setDimmerLights_OnOff 00B8  
                               _r_address 00D3             __end_of_setDimmerLights_OnOff 076F  
          __size_of_setDimmerLights_SwOff 0037            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 143A              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1E84                            __size_of_getAD 001A  
                        ___lwdiv@quotient 0077                             _SwPointSelect 1DC9  
                     __end_of_setLED_Main 1399                          ??_getDelayOff_GO 0074  
                  ??_setRF_Initialization 0072               __end_of_Temp_Initialization 1CD3  
                       _CC2500_rfSettings 102F                            ___wmul@product 0076  
                                _LED_Main 1CE2                           SwPointSelect@sw 0073  
                               clear_ram0 1D05                  CC2500_InitPATable@loop_d 0079  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 143A  
                               _setTxData 0F4A       __end_of_DimmerLights_Initialization 1D12  
             _DimmerLights_Initialization 1D0B                        _CC2500_ClearRXFIFO 1CEE  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1CF2  
                setRF_DimmerLights@lights 0061                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1F38                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0060  
    __size_of_setDimmerIntr_ControlStatus 0015               __size_of_setRFSW_AdjControl 007E  
     __size_of_setDimmerIntr_DimmingValue 000B                        _Flash_Memory_Write 127E  
                              ?_getRxData 0070                              ??_getLoad_AD 0076  
                                _TMR1_ISR 118D                    CC2500_InitSetREG@temp1 0020  
                  CC2500_InitSetREG@temp2 0021                              ??_getLoad_OK 0072  
                                _TMR1_Set 1DF8                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1E84  
                                _RF_Count 0126                      __end_of_RF_RxDisable 1E75  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 10E6  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1EE4  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0073  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0079  
                             ??_Load_Main 0020                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0078                          __size_of_IOC_Set 000A  
            __end_of_Flash_Memory_Erasing 1DF8                            ?_SwPointSelect 0070  
                             getAD@adcon0 0075                               getAD@adcon1 0072  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 13CD                     _DlyOff_Initialization 1CFA  
       __size_of_getMain_All_LightsStatus 0008                      ??_CC2500_ClearRXFIFO 0076  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1FAC               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1F6F                                  _Fosc_Set 1CE6  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 0C38                        __end_of_getLoad_OK 1D19  
                   _Switch_Initialization 1D61         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 14AB  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 109A                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 000A                      ??_setRF_TransceiveGO 0072  
            Flash_Memory_Initialization@i 005B                                  _SwDetect 00D1  
                             ??_Temp_Main 007A                          getCmd_Status@cmd 0073  
                        setCmd_Status@cmd 0072                         setRFSW_Control@sw 0067  
           _getMain_All_Error_Status$3476 0073             _getMain_All_Error_Status$3477 0075  
                __end_of_getDimmer_LoadGO 1D20                       _Load_Initialization 1CC7  
        ??_getDimmerLights_ValueToPercent 0054           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0075                              _setTemp_Main 0DE6  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0036  
                setDimmerLights_SwOn@idle 0027                                  ___awtoft 11CC  
                        ??_LedPointSelect 0072                                  ___ftpack 0814  
           __size_of_getMain_Lights_Count 0009                    getDimmer_LoadGO@loadgo 0072  
                       getTemp_AD@channel 0077                              ??_setRF_Main 006A  
                    CC2500_WriteREG@value 0074                               _setLED_Main 1366  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0007  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0075  
                        getDelayOff_GO@sw 0074             __end_of_getDimmer_Load_Status 1D27  
                        setDelayOff_GO@sw 0064                           ___lwdiv@divisor 0072  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 1CD0                                  __ptext11 1CC3  
                                __ptext20 106E                                  __ptext12 1D2E  
                                __ptext21 07FB                                  __ptext13 01E6  
                                __ptext30 0C38                                  __ptext22 1FEB  
                                __ptext14 1F27                                  __ptext31 1EC4  
                                __ptext23 1CCD                                  __ptext15 1258  
                                __ptext40 1FD6                                  __ptext32 1083  
                                __ptext24 05F7                                  __ptext16 1F16  
                                __ptext41 1CF6                                  __ptext33 1F05  
                                __ptext25 0B4A                                  __ptext17 1DC9  
                                __ptext50 10CC                                  __ptext42 1525  
                                __ptext34 1EB4                                  __ptext26 1399  
                                __ptext18 1D61                                  __ptext51 1CEA  
                                __ptext43 12A8                                  __ptext35 1E66  
                                __ptext27 1ED4                                  __ptext19 1E3A  
                                __ptext60 1D74                                  __ptext52 1FC1  
                                __ptext44 1170                                  __ptext36 0A03  
                                __ptext28 0ADA                                  __ptext61 1CE6  
                                __ptext53 109A                                  __ptext45 11EE  
                                __ptext37 0874                                  __ptext29 14E5  
                                __ptext70 1CC7                                  __ptext62 1D27  
                                __ptext54 1CCA                                  __ptext46 1DBE  
                                __ptext38 1210                                  __ptext71 1100  
                                __ptext63 004C                                  __ptext55 1D88  
                                __ptext47 1233                                  __ptext39 1137  
                                __ptext80 1DB3                                  __ptext72 1CE2  
                                __ptext64 1D58                                  __ptext56 1F4A  
                                __ptext48 1CF2                                  __ptext81 127E  
                                __ptext73 1366                                  __ptext65 1D20  
                                __ptext57 1D7E                                  __ptext49 1CEE  
                                __ptext90 1DA8                                  __ptext82 1D4F  
                                __ptext74 1CDE                                  __ptext66 1D19  
                                __ptext58 1DF8                                  __ptext91 1FAC  
                                __ptext83 0800                                  __ptext75 1EA4  
                                __ptext67 1E57                                  __ptext59 10B2  
                                __ptext92 1D9D                                  __ptext84 0528  
                                __ptext76 1333                                  __ptext68 1153  
                                __ptext93 1F97                                  __ptext85 1066  
                                __ptext77 15AF                                  __ptext69 13CD  
                                __ptext94 076F                                  __ptext86 111B  
                                __ptext78 1DEC                                  __ptext95 1EF4  
                                __ptext87 08D5                                  __ptext79 044C  
                                __ptext96 1F82                                  __ptext88 06B7  
                                __ptext97 1D35                                  __ptext89 14AB  
                                __ptext98 099E                                  __ptext99 0E96  
                                __product 0220                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 106E  
            __end_of_setDimmerLights_Main 0939              __end_of_setDimmerLights_Line 1E1E  
            __end_of_setDimmerLights_SwOn 1333                              ??_setSw_Main 0028  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 1F27        __size_of_DimmerIntr_Initialization 0012  
                         ??_getCmd_Status 0072                  __end_of_CC2500_SIDLEMode 1CFA  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1D9D  
              CC2500_WriteCommand@command 0075                           _CC2500_ReadByte 1137  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1170  
                __end_of_setMemory_Modify 1ED4                        __end_of_setRF_Main 06B7  
                             ??_getBuz_GO 0074               __size_of_Mcu_Initialization 0012  
      __size_of_DimmerLights_MOSFET_IOC_1 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1FD6        __size_of_DimmerLights_MOSFET_TMR_1 0052  
                                main@argc 0169                                  main@argv 016B  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6179 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1525  
                __size_of_getSw_KeyStatus 0011        __end_of_setDimmerIntr_DimmingValue 1DA8  
              _setDimmerIntr_DimmingValue 1D9D               __end_of_Flash_Memory_Modify 15FC  
                             _setLog_Code 1399               __end_of_Flash_Memory_Unlock 1D58  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 11EE  
                      __end_of_setSw_Main 0356                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0017  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 1CC3   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1CC2                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1CCA                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1DEC                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00CF  
         __end_of_DelayOff_Initialization 1CDA                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1CDE                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 076F  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0070  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1258                   __end_of_CC2500_ReadByte 1153  
            __end_of_setSw_Initialization 1E48                           _Timeout_Counter 1FEB  
         __size_of_getDimmerLights_Status 000E           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1E66                __end_of_LED_Initialization 1CE2  
          __end_of_setTemp_Initialization 1CC4                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1CCD                     __end_of_CC2500_RxData 08D5  
                   __end_of_CC2500_TxData 0A6B                     _setLoad_AH_AL_Restore 1100  
                 __end_of_CC2500_PowerRST 1569  
