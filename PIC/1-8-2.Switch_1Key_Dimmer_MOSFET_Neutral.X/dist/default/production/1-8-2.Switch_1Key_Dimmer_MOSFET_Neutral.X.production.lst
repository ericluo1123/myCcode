

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Mar 12 10:08:39 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	intentry,global,class=CODE,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,delta=2
   169                           	dabs	1,0x7E,2
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000D                     	;# 
   184  000E                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0116                     	;# 
   217  0117                     	;# 
   218  011D                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  018E                     	;# 
   222  0191                     	;# 
   223  0191                     	;# 
   224  0192                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0197                     	;# 
   231  0199                     	;# 
   232  019A                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019C                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  020D                     	;# 
   243  0210                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0291                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0293                     	;# 
   263  0298                     	;# 
   264  0298                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  0394                     	;# 
   268  0395                     	;# 
   269  0396                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  0010                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0016                     	;# 
   302  0017                     	;# 
   303  0018                     	;# 
   304  0019                     	;# 
   305  001A                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0090                     	;# 
   312  0091                     	;# 
   313  0092                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  0116                     	;# 
   328  0117                     	;# 
   329  011D                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332  018E                     	;# 
   333  0191                     	;# 
   334  0191                     	;# 
   335  0192                     	;# 
   336  0193                     	;# 
   337  0193                     	;# 
   338  0194                     	;# 
   339  0195                     	;# 
   340  0196                     	;# 
   341  0197                     	;# 
   342  0199                     	;# 
   343  019A                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019C                     	;# 
   349  019C                     	;# 
   350  019D                     	;# 
   351  019E                     	;# 
   352  019F                     	;# 
   353  020D                     	;# 
   354  0210                     	;# 
   355  0211                     	;# 
   356  0211                     	;# 
   357  0212                     	;# 
   358  0212                     	;# 
   359  0213                     	;# 
   360  0213                     	;# 
   361  0214                     	;# 
   362  0214                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0216                     	;# 
   367  0216                     	;# 
   368  0217                     	;# 
   369  0217                     	;# 
   370  0291                     	;# 
   371  0291                     	;# 
   372  0292                     	;# 
   373  0293                     	;# 
   374  0298                     	;# 
   375  0298                     	;# 
   376  0299                     	;# 
   377  029A                     	;# 
   378  0394                     	;# 
   379  0395                     	;# 
   380  0396                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  0090                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0099                     	;# 
   429  009A                     	;# 
   430  009B                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  010C                     	;# 
   436  010D                     	;# 
   437  010E                     	;# 
   438  0116                     	;# 
   439  0117                     	;# 
   440  011D                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  018E                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0197                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019C                     	;# 
   460  019C                     	;# 
   461  019D                     	;# 
   462  019E                     	;# 
   463  019F                     	;# 
   464  020D                     	;# 
   465  0210                     	;# 
   466  0211                     	;# 
   467  0211                     	;# 
   468  0212                     	;# 
   469  0212                     	;# 
   470  0213                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0214                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0215                     	;# 
   477  0216                     	;# 
   478  0216                     	;# 
   479  0217                     	;# 
   480  0217                     	;# 
   481  0291                     	;# 
   482  0291                     	;# 
   483  0292                     	;# 
   484  0293                     	;# 
   485  0298                     	;# 
   486  0298                     	;# 
   487  0299                     	;# 
   488  029A                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  0FE4                     	;# 
   493  0FE5                     	;# 
   494  0FE6                     	;# 
   495  0FE7                     	;# 
   496  0FE8                     	;# 
   497  0FE9                     	;# 
   498  0FEA                     	;# 
   499  0FEB                     	;# 
   500  0FED                     	;# 
   501  0FEE                     	;# 
   502  0FEF                     	;# 
   503  0000                     	;# 
   504  0001                     	;# 
   505  0002                     	;# 
   506  0003                     	;# 
   507  0004                     	;# 
   508  0005                     	;# 
   509  0006                     	;# 
   510  0007                     	;# 
   511  0008                     	;# 
   512  0009                     	;# 
   513  000A                     	;# 
   514  000B                     	;# 
   515  000C                     	;# 
   516  000D                     	;# 
   517  000E                     	;# 
   518  0010                     	;# 
   519  0011                     	;# 
   520  0012                     	;# 
   521  0015                     	;# 
   522  0016                     	;# 
   523  0016                     	;# 
   524  0017                     	;# 
   525  0018                     	;# 
   526  0019                     	;# 
   527  001A                     	;# 
   528  001B                     	;# 
   529  001C                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  0090                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0095                     	;# 
   537  0096                     	;# 
   538  0097                     	;# 
   539  0099                     	;# 
   540  009A                     	;# 
   541  009B                     	;# 
   542  009B                     	;# 
   543  009C                     	;# 
   544  009D                     	;# 
   545  009E                     	;# 
   546  010C                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  0116                     	;# 
   550  0117                     	;# 
   551  011D                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  018E                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0194                     	;# 
   561  0195                     	;# 
   562  0196                     	;# 
   563  0197                     	;# 
   564  0199                     	;# 
   565  019A                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019C                     	;# 
   572  019D                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  020D                     	;# 
   576  0210                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0291                     	;# 
   593  0291                     	;# 
   594  0292                     	;# 
   595  0293                     	;# 
   596  0298                     	;# 
   597  0298                     	;# 
   598  0299                     	;# 
   599  029A                     	;# 
   600  0394                     	;# 
   601  0395                     	;# 
   602  0396                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0010                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0015                     	;# 
   633  0016                     	;# 
   634  0016                     	;# 
   635  0017                     	;# 
   636  0018                     	;# 
   637  0019                     	;# 
   638  001A                     	;# 
   639  001B                     	;# 
   640  001C                     	;# 
   641  008C                     	;# 
   642  008D                     	;# 
   643  008E                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0095                     	;# 
   648  0096                     	;# 
   649  0097                     	;# 
   650  0099                     	;# 
   651  009A                     	;# 
   652  009B                     	;# 
   653  009B                     	;# 
   654  009C                     	;# 
   655  009D                     	;# 
   656  009E                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0116                     	;# 
   661  0117                     	;# 
   662  011D                     	;# 
   663  018C                     	;# 
   664  018D                     	;# 
   665  018E                     	;# 
   666  0191                     	;# 
   667  0191                     	;# 
   668  0192                     	;# 
   669  0193                     	;# 
   670  0193                     	;# 
   671  0194                     	;# 
   672  0195                     	;# 
   673  0196                     	;# 
   674  0197                     	;# 
   675  0199                     	;# 
   676  019A                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019B                     	;# 
   681  019C                     	;# 
   682  019C                     	;# 
   683  019D                     	;# 
   684  019E                     	;# 
   685  019F                     	;# 
   686  020D                     	;# 
   687  0210                     	;# 
   688  0211                     	;# 
   689  0211                     	;# 
   690  0212                     	;# 
   691  0212                     	;# 
   692  0213                     	;# 
   693  0213                     	;# 
   694  0214                     	;# 
   695  0214                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0216                     	;# 
   700  0216                     	;# 
   701  0217                     	;# 
   702  0217                     	;# 
   703  0291                     	;# 
   704  0291                     	;# 
   705  0292                     	;# 
   706  0293                     	;# 
   707  0298                     	;# 
   708  0298                     	;# 
   709  0299                     	;# 
   710  029A                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  000E                     	;# 
   740  0010                     	;# 
   741  0011                     	;# 
   742  0012                     	;# 
   743  0015                     	;# 
   744  0016                     	;# 
   745  0016                     	;# 
   746  0017                     	;# 
   747  0018                     	;# 
   748  0019                     	;# 
   749  001A                     	;# 
   750  001B                     	;# 
   751  001C                     	;# 
   752  008C                     	;# 
   753  008D                     	;# 
   754  008E                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0095                     	;# 
   759  0096                     	;# 
   760  0097                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010E                     	;# 
   771  0116                     	;# 
   772  0117                     	;# 
   773  011D                     	;# 
   774  018C                     	;# 
   775  018D                     	;# 
   776  018E                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0194                     	;# 
   783  0195                     	;# 
   784  0196                     	;# 
   785  0197                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020D                     	;# 
   798  0210                     	;# 
   799  0211                     	;# 
   800  0211                     	;# 
   801  0212                     	;# 
   802  0212                     	;# 
   803  0213                     	;# 
   804  0213                     	;# 
   805  0214                     	;# 
   806  0214                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0216                     	;# 
   811  0216                     	;# 
   812  0217                     	;# 
   813  0217                     	;# 
   814  0291                     	;# 
   815  0291                     	;# 
   816  0292                     	;# 
   817  0293                     	;# 
   818  0298                     	;# 
   819  0298                     	;# 
   820  0299                     	;# 
   821  029A                     	;# 
   822  0394                     	;# 
   823  0395                     	;# 
   824  0396                     	;# 
   825  0FE4                     	;# 
   826  0FE5                     	;# 
   827  0FE6                     	;# 
   828  0FE7                     	;# 
   829  0FE8                     	;# 
   830  0FE9                     	;# 
   831  0FEA                     	;# 
   832  0FEB                     	;# 
   833  0FED                     	;# 
   834  0FEE                     	;# 
   835  0FEF                     	;# 
   836  0000                     	;# 
   837  0001                     	;# 
   838  0002                     	;# 
   839  0003                     	;# 
   840  0004                     	;# 
   841  0005                     	;# 
   842  0006                     	;# 
   843  0007                     	;# 
   844  0008                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  0010                     	;# 
   852  0011                     	;# 
   853  0012                     	;# 
   854  0015                     	;# 
   855  0016                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001B                     	;# 
   862  001C                     	;# 
   863  008C                     	;# 
   864  008D                     	;# 
   865  008E                     	;# 
   866  0090                     	;# 
   867  0091                     	;# 
   868  0092                     	;# 
   869  0095                     	;# 
   870  0096                     	;# 
   871  0097                     	;# 
   872  0099                     	;# 
   873  009A                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  010C                     	;# 
   880  010D                     	;# 
   881  010E                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  011D                     	;# 
   885  018C                     	;# 
   886  018D                     	;# 
   887  018E                     	;# 
   888  0191                     	;# 
   889  0191                     	;# 
   890  0192                     	;# 
   891  0193                     	;# 
   892  0193                     	;# 
   893  0194                     	;# 
   894  0195                     	;# 
   895  0196                     	;# 
   896  0197                     	;# 
   897  0199                     	;# 
   898  019A                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019B                     	;# 
   903  019C                     	;# 
   904  019C                     	;# 
   905  019D                     	;# 
   906  019E                     	;# 
   907  019F                     	;# 
   908  020D                     	;# 
   909  0210                     	;# 
   910  0211                     	;# 
   911  0211                     	;# 
   912  0212                     	;# 
   913  0212                     	;# 
   914  0213                     	;# 
   915  0213                     	;# 
   916  0214                     	;# 
   917  0214                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0216                     	;# 
   922  0216                     	;# 
   923  0217                     	;# 
   924  0217                     	;# 
   925  0291                     	;# 
   926  0291                     	;# 
   927  0292                     	;# 
   928  0293                     	;# 
   929  0298                     	;# 
   930  0298                     	;# 
   931  0299                     	;# 
   932  029A                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE9                     	;# 
   942  0FEA                     	;# 
   943  0FEB                     	;# 
   944  0FED                     	;# 
   945  0FEE                     	;# 
   946  0FEF                     	;# 
   947  0000                     	;# 
   948  0001                     	;# 
   949  0002                     	;# 
   950  0003                     	;# 
   951  0004                     	;# 
   952  0005                     	;# 
   953  0006                     	;# 
   954  0007                     	;# 
   955  0008                     	;# 
   956  0009                     	;# 
   957  000A                     	;# 
   958  000B                     	;# 
   959  000C                     	;# 
   960  000D                     	;# 
   961  000E                     	;# 
   962  0010                     	;# 
   963  0011                     	;# 
   964  0012                     	;# 
   965  0015                     	;# 
   966  0016                     	;# 
   967  0016                     	;# 
   968  0017                     	;# 
   969  0018                     	;# 
   970  0019                     	;# 
   971  001A                     	;# 
   972  001B                     	;# 
   973  001C                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0090                     	;# 
   978  0091                     	;# 
   979  0092                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  011D                     	;# 
   996  018C                     	;# 
   997  018D                     	;# 
   998  018E                     	;# 
   999  0191                     	;# 
  1000  0191                     	;# 
  1001  0192                     	;# 
  1002  0193                     	;# 
  1003  0193                     	;# 
  1004  0194                     	;# 
  1005  0195                     	;# 
  1006  0196                     	;# 
  1007  0197                     	;# 
  1008  0199                     	;# 
  1009  019A                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019C                     	;# 
  1016  019D                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  020D                     	;# 
  1020  0210                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0216                     	;# 
  1033  0216                     	;# 
  1034  0217                     	;# 
  1035  0217                     	;# 
  1036  0291                     	;# 
  1037  0291                     	;# 
  1038  0292                     	;# 
  1039  0293                     	;# 
  1040  0298                     	;# 
  1041  0298                     	;# 
  1042  0299                     	;# 
  1043  029A                     	;# 
  1044  0394                     	;# 
  1045  0395                     	;# 
  1046  0396                     	;# 
  1047  0FE4                     	;# 
  1048  0FE5                     	;# 
  1049  0FE6                     	;# 
  1050  0FE7                     	;# 
  1051  0FE8                     	;# 
  1052  0FE9                     	;# 
  1053  0FEA                     	;# 
  1054  0FEB                     	;# 
  1055  0FED                     	;# 
  1056  0FEE                     	;# 
  1057  0FEF                     	;# 
  1058  0000                     	;# 
  1059  0001                     	;# 
  1060  0002                     	;# 
  1061  0003                     	;# 
  1062  0004                     	;# 
  1063  0005                     	;# 
  1064  0006                     	;# 
  1065  0007                     	;# 
  1066  0008                     	;# 
  1067  0009                     	;# 
  1068  000A                     	;# 
  1069  000B                     	;# 
  1070  000C                     	;# 
  1071  000D                     	;# 
  1072  000E                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0015                     	;# 
  1077  0016                     	;# 
  1078  0016                     	;# 
  1079  0017                     	;# 
  1080  0018                     	;# 
  1081  0019                     	;# 
  1082  001A                     	;# 
  1083  001B                     	;# 
  1084  001C                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  0090                     	;# 
  1089  0091                     	;# 
  1090  0092                     	;# 
  1091  0095                     	;# 
  1092  0096                     	;# 
  1093  0097                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  010C                     	;# 
  1102  010D                     	;# 
  1103  010E                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  011D                     	;# 
  1107  018C                     	;# 
  1108  018D                     	;# 
  1109  018E                     	;# 
  1110  0191                     	;# 
  1111  0191                     	;# 
  1112  0192                     	;# 
  1113  0193                     	;# 
  1114  0193                     	;# 
  1115  0194                     	;# 
  1116  0195                     	;# 
  1117  0196                     	;# 
  1118  0197                     	;# 
  1119  0199                     	;# 
  1120  019A                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019C                     	;# 
  1126  019C                     	;# 
  1127  019D                     	;# 
  1128  019E                     	;# 
  1129  019F                     	;# 
  1130  020D                     	;# 
  1131  0210                     	;# 
  1132  0211                     	;# 
  1133  0211                     	;# 
  1134  0212                     	;# 
  1135  0212                     	;# 
  1136  0213                     	;# 
  1137  0213                     	;# 
  1138  0214                     	;# 
  1139  0214                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0216                     	;# 
  1144  0216                     	;# 
  1145  0217                     	;# 
  1146  0217                     	;# 
  1147  0291                     	;# 
  1148  0291                     	;# 
  1149  0292                     	;# 
  1150  0293                     	;# 
  1151  0298                     	;# 
  1152  0298                     	;# 
  1153  0299                     	;# 
  1154  029A                     	;# 
  1155  0394                     	;# 
  1156  0395                     	;# 
  1157  0396                     	;# 
  1158  0FE4                     	;# 
  1159  0FE5                     	;# 
  1160  0FE6                     	;# 
  1161  0FE7                     	;# 
  1162  0FE8                     	;# 
  1163  0FE9                     	;# 
  1164  0FEA                     	;# 
  1165  0FEB                     	;# 
  1166  0FED                     	;# 
  1167  0FEE                     	;# 
  1168  0FEF                     	;# 
  1169  0000                     	;# 
  1170  0001                     	;# 
  1171  0002                     	;# 
  1172  0003                     	;# 
  1173  0004                     	;# 
  1174  0005                     	;# 
  1175  0006                     	;# 
  1176  0007                     	;# 
  1177  0008                     	;# 
  1178  0009                     	;# 
  1179  000A                     	;# 
  1180  000B                     	;# 
  1181  000C                     	;# 
  1182  000D                     	;# 
  1183  000E                     	;# 
  1184  0010                     	;# 
  1185  0011                     	;# 
  1186  0012                     	;# 
  1187  0015                     	;# 
  1188  0016                     	;# 
  1189  0016                     	;# 
  1190  0017                     	;# 
  1191  0018                     	;# 
  1192  0019                     	;# 
  1193  001A                     	;# 
  1194  001B                     	;# 
  1195  001C                     	;# 
  1196  008C                     	;# 
  1197  008D                     	;# 
  1198  008E                     	;# 
  1199  0090                     	;# 
  1200  0091                     	;# 
  1201  0092                     	;# 
  1202  0095                     	;# 
  1203  0096                     	;# 
  1204  0097                     	;# 
  1205  0099                     	;# 
  1206  009A                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  010C                     	;# 
  1213  010D                     	;# 
  1214  010E                     	;# 
  1215  0116                     	;# 
  1216  0117                     	;# 
  1217  011D                     	;# 
  1218  018C                     	;# 
  1219  018D                     	;# 
  1220  018E                     	;# 
  1221  0191                     	;# 
  1222  0191                     	;# 
  1223  0192                     	;# 
  1224  0193                     	;# 
  1225  0193                     	;# 
  1226  0194                     	;# 
  1227  0195                     	;# 
  1228  0196                     	;# 
  1229  0197                     	;# 
  1230  0199                     	;# 
  1231  019A                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019C                     	;# 
  1237  019C                     	;# 
  1238  019D                     	;# 
  1239  019E                     	;# 
  1240  019F                     	;# 
  1241  020D                     	;# 
  1242  0210                     	;# 
  1243  0211                     	;# 
  1244  0211                     	;# 
  1245  0212                     	;# 
  1246  0212                     	;# 
  1247  0213                     	;# 
  1248  0213                     	;# 
  1249  0214                     	;# 
  1250  0214                     	;# 
  1251  0215                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0216                     	;# 
  1255  0216                     	;# 
  1256  0217                     	;# 
  1257  0217                     	;# 
  1258  0291                     	;# 
  1259  0291                     	;# 
  1260  0292                     	;# 
  1261  0293                     	;# 
  1262  0298                     	;# 
  1263  0298                     	;# 
  1264  0299                     	;# 
  1265  029A                     	;# 
  1266  0394                     	;# 
  1267  0395                     	;# 
  1268  0396                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0010                     	;# 
  1296  0011                     	;# 
  1297  0012                     	;# 
  1298  0015                     	;# 
  1299  0016                     	;# 
  1300  0016                     	;# 
  1301  0017                     	;# 
  1302  0018                     	;# 
  1303  0019                     	;# 
  1304  001A                     	;# 
  1305  001B                     	;# 
  1306  001C                     	;# 
  1307  008C                     	;# 
  1308  008D                     	;# 
  1309  008E                     	;# 
  1310  0090                     	;# 
  1311  0091                     	;# 
  1312  0092                     	;# 
  1313  0095                     	;# 
  1314  0096                     	;# 
  1315  0097                     	;# 
  1316  0099                     	;# 
  1317  009A                     	;# 
  1318  009B                     	;# 
  1319  009B                     	;# 
  1320  009C                     	;# 
  1321  009D                     	;# 
  1322  009E                     	;# 
  1323  010C                     	;# 
  1324  010D                     	;# 
  1325  010E                     	;# 
  1326  0116                     	;# 
  1327  0117                     	;# 
  1328  011D                     	;# 
  1329  018C                     	;# 
  1330  018D                     	;# 
  1331  018E                     	;# 
  1332  0191                     	;# 
  1333  0191                     	;# 
  1334  0192                     	;# 
  1335  0193                     	;# 
  1336  0193                     	;# 
  1337  0194                     	;# 
  1338  0195                     	;# 
  1339  0196                     	;# 
  1340  0197                     	;# 
  1341  0199                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019C                     	;# 
  1348  019C                     	;# 
  1349  019D                     	;# 
  1350  019E                     	;# 
  1351  019F                     	;# 
  1352  020D                     	;# 
  1353  0210                     	;# 
  1354  0211                     	;# 
  1355  0211                     	;# 
  1356  0212                     	;# 
  1357  0212                     	;# 
  1358  0213                     	;# 
  1359  0213                     	;# 
  1360  0214                     	;# 
  1361  0214                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0216                     	;# 
  1366  0216                     	;# 
  1367  0217                     	;# 
  1368  0217                     	;# 
  1369  0291                     	;# 
  1370  0291                     	;# 
  1371  0292                     	;# 
  1372  0293                     	;# 
  1373  0298                     	;# 
  1374  0298                     	;# 
  1375  0299                     	;# 
  1376  029A                     	;# 
  1377  0394                     	;# 
  1378  0395                     	;# 
  1379  0396                     	;# 
  1380  0FE4                     	;# 
  1381  0FE5                     	;# 
  1382  0FE6                     	;# 
  1383  0FE7                     	;# 
  1384  0FE8                     	;# 
  1385  0FE9                     	;# 
  1386  0FEA                     	;# 
  1387  0FEB                     	;# 
  1388  0FED                     	;# 
  1389  0FEE                     	;# 
  1390  0FEF                     	;# 
  1391  0000                     	;# 
  1392  0001                     	;# 
  1393  0002                     	;# 
  1394  0003                     	;# 
  1395  0004                     	;# 
  1396  0005                     	;# 
  1397  0006                     	;# 
  1398  0007                     	;# 
  1399  0008                     	;# 
  1400  0009                     	;# 
  1401  000A                     	;# 
  1402  000B                     	;# 
  1403  000C                     	;# 
  1404  000D                     	;# 
  1405  000E                     	;# 
  1406  0010                     	;# 
  1407  0011                     	;# 
  1408  0012                     	;# 
  1409  0015                     	;# 
  1410  0016                     	;# 
  1411  0016                     	;# 
  1412  0017                     	;# 
  1413  0018                     	;# 
  1414  0019                     	;# 
  1415  001A                     	;# 
  1416  001B                     	;# 
  1417  001C                     	;# 
  1418  008C                     	;# 
  1419  008D                     	;# 
  1420  008E                     	;# 
  1421  0090                     	;# 
  1422  0091                     	;# 
  1423  0092                     	;# 
  1424  0095                     	;# 
  1425  0096                     	;# 
  1426  0097                     	;# 
  1427  0099                     	;# 
  1428  009A                     	;# 
  1429  009B                     	;# 
  1430  009B                     	;# 
  1431  009C                     	;# 
  1432  009D                     	;# 
  1433  009E                     	;# 
  1434  010C                     	;# 
  1435  010D                     	;# 
  1436  010E                     	;# 
  1437  0116                     	;# 
  1438  0117                     	;# 
  1439  011D                     	;# 
  1440  018C                     	;# 
  1441  018D                     	;# 
  1442  018E                     	;# 
  1443  0191                     	;# 
  1444  0191                     	;# 
  1445  0192                     	;# 
  1446  0193                     	;# 
  1447  0193                     	;# 
  1448  0194                     	;# 
  1449  0195                     	;# 
  1450  0196                     	;# 
  1451  0197                     	;# 
  1452  0199                     	;# 
  1453  019A                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019B                     	;# 
  1458  019C                     	;# 
  1459  019C                     	;# 
  1460  019D                     	;# 
  1461  019E                     	;# 
  1462  019F                     	;# 
  1463  020D                     	;# 
  1464  0210                     	;# 
  1465  0211                     	;# 
  1466  0211                     	;# 
  1467  0212                     	;# 
  1468  0212                     	;# 
  1469  0213                     	;# 
  1470  0213                     	;# 
  1471  0214                     	;# 
  1472  0214                     	;# 
  1473  0215                     	;# 
  1474  0215                     	;# 
  1475  0215                     	;# 
  1476  0216                     	;# 
  1477  0216                     	;# 
  1478  0217                     	;# 
  1479  0217                     	;# 
  1480  0291                     	;# 
  1481  0291                     	;# 
  1482  0292                     	;# 
  1483  0293                     	;# 
  1484  0298                     	;# 
  1485  0298                     	;# 
  1486  0299                     	;# 
  1487  029A                     	;# 
  1488  0394                     	;# 
  1489  0395                     	;# 
  1490  0396                     	;# 
  1491  0FE4                     	;# 
  1492  0FE5                     	;# 
  1493  0FE6                     	;# 
  1494  0FE7                     	;# 
  1495  0FE8                     	;# 
  1496  0FE9                     	;# 
  1497  0FEA                     	;# 
  1498  0FEB                     	;# 
  1499  0FED                     	;# 
  1500  0FEE                     	;# 
  1501  0FEF                     	;# 
  1502  0000                     	;# 
  1503  0001                     	;# 
  1504  0002                     	;# 
  1505  0003                     	;# 
  1506  0004                     	;# 
  1507  0005                     	;# 
  1508  0006                     	;# 
  1509  0007                     	;# 
  1510  0008                     	;# 
  1511  0009                     	;# 
  1512  000A                     	;# 
  1513  000B                     	;# 
  1514  000C                     	;# 
  1515  000D                     	;# 
  1516  000E                     	;# 
  1517  0010                     	;# 
  1518  0011                     	;# 
  1519  0012                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001B                     	;# 
  1528  001C                     	;# 
  1529  008C                     	;# 
  1530  008D                     	;# 
  1531  008E                     	;# 
  1532  0090                     	;# 
  1533  0091                     	;# 
  1534  0092                     	;# 
  1535  0095                     	;# 
  1536  0096                     	;# 
  1537  0097                     	;# 
  1538  0099                     	;# 
  1539  009A                     	;# 
  1540  009B                     	;# 
  1541  009B                     	;# 
  1542  009C                     	;# 
  1543  009D                     	;# 
  1544  009E                     	;# 
  1545  010C                     	;# 
  1546  010D                     	;# 
  1547  010E                     	;# 
  1548  0116                     	;# 
  1549  0117                     	;# 
  1550  011D                     	;# 
  1551  018C                     	;# 
  1552  018D                     	;# 
  1553  018E                     	;# 
  1554  0191                     	;# 
  1555  0191                     	;# 
  1556  0192                     	;# 
  1557  0193                     	;# 
  1558  0193                     	;# 
  1559  0194                     	;# 
  1560  0195                     	;# 
  1561  0196                     	;# 
  1562  0197                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019C                     	;# 
  1570  019C                     	;# 
  1571  019D                     	;# 
  1572  019E                     	;# 
  1573  019F                     	;# 
  1574  020D                     	;# 
  1575  0210                     	;# 
  1576  0211                     	;# 
  1577  0211                     	;# 
  1578  0212                     	;# 
  1579  0212                     	;# 
  1580  0213                     	;# 
  1581  0213                     	;# 
  1582  0214                     	;# 
  1583  0214                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0215                     	;# 
  1587  0216                     	;# 
  1588  0216                     	;# 
  1589  0217                     	;# 
  1590  0217                     	;# 
  1591  0291                     	;# 
  1592  0291                     	;# 
  1593  0292                     	;# 
  1594  0293                     	;# 
  1595  0298                     	;# 
  1596  0298                     	;# 
  1597  0299                     	;# 
  1598  029A                     	;# 
  1599  0394                     	;# 
  1600  0395                     	;# 
  1601  0396                     	;# 
  1602  0FE4                     	;# 
  1603  0FE5                     	;# 
  1604  0FE6                     	;# 
  1605  0FE7                     	;# 
  1606  0FE8                     	;# 
  1607  0FE9                     	;# 
  1608  0FEA                     	;# 
  1609  0FEB                     	;# 
  1610  0FED                     	;# 
  1611  0FEE                     	;# 
  1612  0FEF                     	;# 
  1613  0000                     	;# 
  1614  0001                     	;# 
  1615  0002                     	;# 
  1616  0003                     	;# 
  1617  0004                     	;# 
  1618  0005                     	;# 
  1619  0006                     	;# 
  1620  0007                     	;# 
  1621  0008                     	;# 
  1622  0009                     	;# 
  1623  000A                     	;# 
  1624  000B                     	;# 
  1625  000C                     	;# 
  1626  000D                     	;# 
  1627  000E                     	;# 
  1628  0010                     	;# 
  1629  0011                     	;# 
  1630  0012                     	;# 
  1631  0015                     	;# 
  1632  0016                     	;# 
  1633  0016                     	;# 
  1634  0017                     	;# 
  1635  0018                     	;# 
  1636  0019                     	;# 
  1637  001A                     	;# 
  1638  001B                     	;# 
  1639  001C                     	;# 
  1640  008C                     	;# 
  1641  008D                     	;# 
  1642  008E                     	;# 
  1643  0090                     	;# 
  1644  0091                     	;# 
  1645  0092                     	;# 
  1646  0095                     	;# 
  1647  0096                     	;# 
  1648  0097                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  011D                     	;# 
  1662  018C                     	;# 
  1663  018D                     	;# 
  1664  018E                     	;# 
  1665  0191                     	;# 
  1666  0191                     	;# 
  1667  0192                     	;# 
  1668  0193                     	;# 
  1669  0193                     	;# 
  1670  0194                     	;# 
  1671  0195                     	;# 
  1672  0196                     	;# 
  1673  0197                     	;# 
  1674  0199                     	;# 
  1675  019A                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019C                     	;# 
  1681  019C                     	;# 
  1682  019D                     	;# 
  1683  019E                     	;# 
  1684  019F                     	;# 
  1685  020D                     	;# 
  1686  0210                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0291                     	;# 
  1703  0291                     	;# 
  1704  0292                     	;# 
  1705  0293                     	;# 
  1706  0298                     	;# 
  1707  0298                     	;# 
  1708  0299                     	;# 
  1709  029A                     	;# 
  1710  0394                     	;# 
  1711  0395                     	;# 
  1712  0396                     	;# 
  1713  0FE4                     	;# 
  1714  0FE5                     	;# 
  1715  0FE6                     	;# 
  1716  0FE7                     	;# 
  1717  0FE8                     	;# 
  1718  0FE9                     	;# 
  1719  0FEA                     	;# 
  1720  0FEB                     	;# 
  1721  0FED                     	;# 
  1722  0FEE                     	;# 
  1723  0FEF                     	;# 
  1724  0000                     	;# 
  1725  0001                     	;# 
  1726  0002                     	;# 
  1727  0003                     	;# 
  1728  0004                     	;# 
  1729  0005                     	;# 
  1730  0006                     	;# 
  1731  0007                     	;# 
  1732  0008                     	;# 
  1733  0009                     	;# 
  1734  000A                     	;# 
  1735  000B                     	;# 
  1736  000C                     	;# 
  1737  000D                     	;# 
  1738  000E                     	;# 
  1739  0010                     	;# 
  1740  0011                     	;# 
  1741  0012                     	;# 
  1742  0015                     	;# 
  1743  0016                     	;# 
  1744  0016                     	;# 
  1745  0017                     	;# 
  1746  0018                     	;# 
  1747  0019                     	;# 
  1748  001A                     	;# 
  1749  001B                     	;# 
  1750  001C                     	;# 
  1751  008C                     	;# 
  1752  008D                     	;# 
  1753  008E                     	;# 
  1754  0090                     	;# 
  1755  0091                     	;# 
  1756  0092                     	;# 
  1757  0095                     	;# 
  1758  0096                     	;# 
  1759  0097                     	;# 
  1760  0099                     	;# 
  1761  009A                     	;# 
  1762  009B                     	;# 
  1763  009B                     	;# 
  1764  009C                     	;# 
  1765  009D                     	;# 
  1766  009E                     	;# 
  1767  010C                     	;# 
  1768  010D                     	;# 
  1769  010E                     	;# 
  1770  0116                     	;# 
  1771  0117                     	;# 
  1772  011D                     	;# 
  1773  018C                     	;# 
  1774  018D                     	;# 
  1775  018E                     	;# 
  1776  0191                     	;# 
  1777  0191                     	;# 
  1778  0192                     	;# 
  1779  0193                     	;# 
  1780  0193                     	;# 
  1781  0194                     	;# 
  1782  0195                     	;# 
  1783  0196                     	;# 
  1784  0197                     	;# 
  1785  0199                     	;# 
  1786  019A                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019B                     	;# 
  1791  019C                     	;# 
  1792  019C                     	;# 
  1793  019D                     	;# 
  1794  019E                     	;# 
  1795  019F                     	;# 
  1796  020D                     	;# 
  1797  0210                     	;# 
  1798  0211                     	;# 
  1799  0211                     	;# 
  1800  0212                     	;# 
  1801  0212                     	;# 
  1802  0213                     	;# 
  1803  0213                     	;# 
  1804  0214                     	;# 
  1805  0214                     	;# 
  1806  0215                     	;# 
  1807  0215                     	;# 
  1808  0215                     	;# 
  1809  0216                     	;# 
  1810  0216                     	;# 
  1811  0217                     	;# 
  1812  0217                     	;# 
  1813  0291                     	;# 
  1814  0291                     	;# 
  1815  0292                     	;# 
  1816  0293                     	;# 
  1817  0298                     	;# 
  1818  0298                     	;# 
  1819  0299                     	;# 
  1820  029A                     	;# 
  1821  0394                     	;# 
  1822  0395                     	;# 
  1823  0396                     	;# 
  1824  0FE4                     	;# 
  1825  0FE5                     	;# 
  1826  0FE6                     	;# 
  1827  0FE7                     	;# 
  1828  0FE8                     	;# 
  1829  0FE9                     	;# 
  1830  0FEA                     	;# 
  1831  0FEB                     	;# 
  1832  0FED                     	;# 
  1833  0FEE                     	;# 
  1834  0FEF                     	;# 
  1835  0000                     	;# 
  1836  0001                     	;# 
  1837  0002                     	;# 
  1838  0003                     	;# 
  1839  0004                     	;# 
  1840  0005                     	;# 
  1841  0006                     	;# 
  1842  0007                     	;# 
  1843  0008                     	;# 
  1844  0009                     	;# 
  1845  000A                     	;# 
  1846  000B                     	;# 
  1847  000C                     	;# 
  1848  000D                     	;# 
  1849  000E                     	;# 
  1850  0010                     	;# 
  1851  0011                     	;# 
  1852  0012                     	;# 
  1853  0015                     	;# 
  1854  0016                     	;# 
  1855  0016                     	;# 
  1856  0017                     	;# 
  1857  0018                     	;# 
  1858  0019                     	;# 
  1859  001A                     	;# 
  1860  001B                     	;# 
  1861  001C                     	;# 
  1862  008C                     	;# 
  1863  008D                     	;# 
  1864  008E                     	;# 
  1865  0090                     	;# 
  1866  0091                     	;# 
  1867  0092                     	;# 
  1868  0095                     	;# 
  1869  0096                     	;# 
  1870  0097                     	;# 
  1871  0099                     	;# 
  1872  009A                     	;# 
  1873  009B                     	;# 
  1874  009B                     	;# 
  1875  009C                     	;# 
  1876  009D                     	;# 
  1877  009E                     	;# 
  1878  010C                     	;# 
  1879  010D                     	;# 
  1880  010E                     	;# 
  1881  0116                     	;# 
  1882  0117                     	;# 
  1883  011D                     	;# 
  1884  018C                     	;# 
  1885  018D                     	;# 
  1886  018E                     	;# 
  1887  0191                     	;# 
  1888  0191                     	;# 
  1889  0192                     	;# 
  1890  0193                     	;# 
  1891  0193                     	;# 
  1892  0194                     	;# 
  1893  0195                     	;# 
  1894  0196                     	;# 
  1895  0197                     	;# 
  1896  0199                     	;# 
  1897  019A                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019B                     	;# 
  1902  019C                     	;# 
  1903  019C                     	;# 
  1904  019D                     	;# 
  1905  019E                     	;# 
  1906  019F                     	;# 
  1907  020D                     	;# 
  1908  0210                     	;# 
  1909  0211                     	;# 
  1910  0211                     	;# 
  1911  0212                     	;# 
  1912  0212                     	;# 
  1913  0213                     	;# 
  1914  0213                     	;# 
  1915  0214                     	;# 
  1916  0214                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0215                     	;# 
  1920  0216                     	;# 
  1921  0216                     	;# 
  1922  0217                     	;# 
  1923  0217                     	;# 
  1924  0291                     	;# 
  1925  0291                     	;# 
  1926  0292                     	;# 
  1927  0293                     	;# 
  1928  0298                     	;# 
  1929  0298                     	;# 
  1930  0299                     	;# 
  1931  029A                     	;# 
  1932  0394                     	;# 
  1933  0395                     	;# 
  1934  0396                     	;# 
  1935  0FE4                     	;# 
  1936  0FE5                     	;# 
  1937  0FE6                     	;# 
  1938  0FE7                     	;# 
  1939  0FE8                     	;# 
  1940  0FE9                     	;# 
  1941  0FEA                     	;# 
  1942  0FEB                     	;# 
  1943  0FED                     	;# 
  1944  0FEE                     	;# 
  1945  0FEF                     	;# 
  1946  0000                     	;# 
  1947  0001                     	;# 
  1948  0002                     	;# 
  1949  0003                     	;# 
  1950  0004                     	;# 
  1951  0005                     	;# 
  1952  0006                     	;# 
  1953  0007                     	;# 
  1954  0008                     	;# 
  1955  0009                     	;# 
  1956  000A                     	;# 
  1957  000B                     	;# 
  1958  000C                     	;# 
  1959  000D                     	;# 
  1960  000E                     	;# 
  1961  0010                     	;# 
  1962  0011                     	;# 
  1963  0012                     	;# 
  1964  0015                     	;# 
  1965  0016                     	;# 
  1966  0016                     	;# 
  1967  0017                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  001A                     	;# 
  1971  001B                     	;# 
  1972  001C                     	;# 
  1973  008C                     	;# 
  1974  008D                     	;# 
  1975  008E                     	;# 
  1976  0090                     	;# 
  1977  0091                     	;# 
  1978  0092                     	;# 
  1979  0095                     	;# 
  1980  0096                     	;# 
  1981  0097                     	;# 
  1982  0099                     	;# 
  1983  009A                     	;# 
  1984  009B                     	;# 
  1985  009B                     	;# 
  1986  009C                     	;# 
  1987  009D                     	;# 
  1988  009E                     	;# 
  1989  010C                     	;# 
  1990  010D                     	;# 
  1991  010E                     	;# 
  1992  0116                     	;# 
  1993  0117                     	;# 
  1994  011D                     	;# 
  1995  018C                     	;# 
  1996  018D                     	;# 
  1997  018E                     	;# 
  1998  0191                     	;# 
  1999  0191                     	;# 
  2000  0192                     	;# 
  2001  0193                     	;# 
  2002  0193                     	;# 
  2003  0194                     	;# 
  2004  0195                     	;# 
  2005  0196                     	;# 
  2006  0197                     	;# 
  2007  0199                     	;# 
  2008  019A                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019B                     	;# 
  2012  019B                     	;# 
  2013  019C                     	;# 
  2014  019C                     	;# 
  2015  019D                     	;# 
  2016  019E                     	;# 
  2017  019F                     	;# 
  2018  020D                     	;# 
  2019  0210                     	;# 
  2020  0211                     	;# 
  2021  0211                     	;# 
  2022  0212                     	;# 
  2023  0212                     	;# 
  2024  0213                     	;# 
  2025  0213                     	;# 
  2026  0214                     	;# 
  2027  0214                     	;# 
  2028  0215                     	;# 
  2029  0215                     	;# 
  2030  0215                     	;# 
  2031  0216                     	;# 
  2032  0216                     	;# 
  2033  0217                     	;# 
  2034  0217                     	;# 
  2035  0291                     	;# 
  2036  0291                     	;# 
  2037  0292                     	;# 
  2038  0293                     	;# 
  2039  0298                     	;# 
  2040  0298                     	;# 
  2041  0299                     	;# 
  2042  029A                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  0FE4                     	;# 
  2047  0FE5                     	;# 
  2048  0FE6                     	;# 
  2049  0FE7                     	;# 
  2050  0FE8                     	;# 
  2051  0FE9                     	;# 
  2052  0FEA                     	;# 
  2053  0FEB                     	;# 
  2054  0FED                     	;# 
  2055  0FEE                     	;# 
  2056  0FEF                     	;# 
  2057  0000                     	;# 
  2058  0001                     	;# 
  2059  0002                     	;# 
  2060  0003                     	;# 
  2061  0004                     	;# 
  2062  0005                     	;# 
  2063  0006                     	;# 
  2064  0007                     	;# 
  2065  0008                     	;# 
  2066  0009                     	;# 
  2067  000A                     	;# 
  2068  000B                     	;# 
  2069  000C                     	;# 
  2070  000D                     	;# 
  2071  000E                     	;# 
  2072  0010                     	;# 
  2073  0011                     	;# 
  2074  0012                     	;# 
  2075  0015                     	;# 
  2076  0016                     	;# 
  2077  0016                     	;# 
  2078  0017                     	;# 
  2079  0018                     	;# 
  2080  0019                     	;# 
  2081  001A                     	;# 
  2082  001B                     	;# 
  2083  001C                     	;# 
  2084  008C                     	;# 
  2085  008D                     	;# 
  2086  008E                     	;# 
  2087  0090                     	;# 
  2088  0091                     	;# 
  2089  0092                     	;# 
  2090  0095                     	;# 
  2091  0096                     	;# 
  2092  0097                     	;# 
  2093  0099                     	;# 
  2094  009A                     	;# 
  2095  009B                     	;# 
  2096  009B                     	;# 
  2097  009C                     	;# 
  2098  009D                     	;# 
  2099  009E                     	;# 
  2100  010C                     	;# 
  2101  010D                     	;# 
  2102  010E                     	;# 
  2103  0116                     	;# 
  2104  0117                     	;# 
  2105  011D                     	;# 
  2106  018C                     	;# 
  2107  018D                     	;# 
  2108  018E                     	;# 
  2109  0191                     	;# 
  2110  0191                     	;# 
  2111  0192                     	;# 
  2112  0193                     	;# 
  2113  0193                     	;# 
  2114  0194                     	;# 
  2115  0195                     	;# 
  2116  0196                     	;# 
  2117  0197                     	;# 
  2118  0199                     	;# 
  2119  019A                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019B                     	;# 
  2123  019B                     	;# 
  2124  019C                     	;# 
  2125  019C                     	;# 
  2126  019D                     	;# 
  2127  019E                     	;# 
  2128  019F                     	;# 
  2129  020D                     	;# 
  2130  0210                     	;# 
  2131  0211                     	;# 
  2132  0211                     	;# 
  2133  0212                     	;# 
  2134  0212                     	;# 
  2135  0213                     	;# 
  2136  0213                     	;# 
  2137  0214                     	;# 
  2138  0214                     	;# 
  2139  0215                     	;# 
  2140  0215                     	;# 
  2141  0215                     	;# 
  2142  0216                     	;# 
  2143  0216                     	;# 
  2144  0217                     	;# 
  2145  0217                     	;# 
  2146  0291                     	;# 
  2147  0291                     	;# 
  2148  0292                     	;# 
  2149  0293                     	;# 
  2150  0298                     	;# 
  2151  0298                     	;# 
  2152  0299                     	;# 
  2153  029A                     	;# 
  2154  0394                     	;# 
  2155  0395                     	;# 
  2156  0396                     	;# 
  2157  0FE4                     	;# 
  2158  0FE5                     	;# 
  2159  0FE6                     	;# 
  2160  0FE7                     	;# 
  2161  0FE8                     	;# 
  2162  0FE9                     	;# 
  2163  0FEA                     	;# 
  2164  0FEB                     	;# 
  2165  0FED                     	;# 
  2166  0FEE                     	;# 
  2167  0FEF                     	;# 
  2168                           
  2169                           	psect	idataBANK3
  2170  1F33                     __pidataBANK3:	
  2171                           
  2172                           ;initializer for __product
  2173  1F33  3463               	retlw	99
  2174  1F34  3402               	retlw	2
  2175  1F35  3400               	retlw	0
  2176  1F36  3400               	retlw	0
  2177  1F37  3400               	retlw	0
  2178  1F38  3400               	retlw	0
  2179  1F39  3400               	retlw	0
  2180  1F3A  3400               	retlw	0
  2181  1F3B  3400               	retlw	0
  2182  1F3C  3400               	retlw	0
  2183  1F3D  3400               	retlw	0
  2184  1F3E  3400               	retlw	0
  2185  1F3F  34FF               	retlw	255
  2186  1F40  34FF               	retlw	255
  2187  1F41  34FF               	retlw	255
  2188  1F42  3400               	retlw	0
  2189  1F43  3400               	retlw	0
  2190  1F44  3400               	retlw	0
  2191  1F45  3400               	retlw	0
  2192  1F46  3400               	retlw	0
  2193  1F47  3400               	retlw	0
  2194  1F48  3400               	retlw	0
  2195  1F49  3400               	retlw	0
  2196  1F4A  3400               	retlw	0
  2197  1F4B  3400               	retlw	0
  2198  1F4C  3400               	retlw	0
  2199  1F4D  3400               	retlw	0
  2200  1F4E  3400               	retlw	0
  2201  1F4F  3400               	retlw	0
  2202  1F50  3400               	retlw	0
  2203  1F51  3400               	retlw	0
  2204  1F52  3400               	retlw	0
  2205                           
  2206                           	psect	stringtext
  2207  1800                     __pstringtext:	
  2208  1800                     _CC2500_registers_address:	
  2209  1800  3403               	retlw	3
  2210  1801  3416               	retlw	22
  2211  1802  3417               	retlw	23
  2212  1803  341E               	retlw	30
  2213  1804  341F               	retlw	31
  2214  1805  3420               	retlw	32
  2215  1806  342A               	retlw	42
  2216  1807  342B               	retlw	43
  2217  1808  340B               	retlw	11
  2218  1809  340C               	retlw	12
  2219  180A  340D               	retlw	13
  2220  180B  340E               	retlw	14
  2221  180C  340F               	retlw	15
  2222  180D  3410               	retlw	16
  2223  180E  3411               	retlw	17
  2224  180F  3412               	retlw	18
  2225  1810  3413               	retlw	19
  2226  1811  3414               	retlw	20
  2227  1812  340A               	retlw	10
  2228  1813  3415               	retlw	21
  2229  1814  3421               	retlw	33
  2230  1815  3422               	retlw	34
  2231  1816  3418               	retlw	24
  2232  1817  3419               	retlw	25
  2233  1818  341A               	retlw	26
  2234  1819  341B               	retlw	27
  2235  181A  341C               	retlw	28
  2236  181B  341D               	retlw	29
  2237  181C  3423               	retlw	35
  2238  181D  3424               	retlw	36
  2239  181E  3425               	retlw	37
  2240  181F  3426               	retlw	38
  2241  1820  3429               	retlw	41
  2242  1821  342C               	retlw	44
  2243  1822  342D               	retlw	45
  2244  1823  342E               	retlw	46
  2245  1824  3400               	retlw	0
  2246  1825  3401               	retlw	1
  2247  1826  3402               	retlw	2
  2248  1827  3407               	retlw	7
  2249  1828  3408               	retlw	8
  2250  1829  3409               	retlw	9
  2251  182A  3406               	retlw	6
  2252  182B  3404               	retlw	4
  2253  182C  3405               	retlw	5
  2254  182D  3427               	retlw	39
  2255  182E  3428               	retlw	40
  2256  182F                     __end_of_CC2500_registers_address:	
  2257  182F                     _CC2500_rfSettings:	
  2258  182F  3407               	retlw	7
  2259  1830  3407               	retlw	7
  2260  1831  3430               	retlw	48
  2261  1832  3487               	retlw	135
  2262  1833  346B               	retlw	107
  2263  1834  34F8               	retlw	248
  2264  1835  347F               	retlw	127
  2265  1836  343F               	retlw	63
  2266  1837  3409               	retlw	9
  2267  1838  3400               	retlw	0
  2268  1839  345C               	retlw	92
  2269  183A  34A7               	retlw	167
  2270  183B  3462               	retlw	98
  2271  183C  3486               	retlw	134
  2272  183D  3483               	retlw	131
  2273  183E  3403               	retlw	3
  2274  183F  3422               	retlw	34
  2275  1840  34F8               	retlw	248
  2276  1841  3400               	retlw	0
  2277  1842  3444               	retlw	68
  2278  1843  34B6               	retlw	182
  2279  1844  3410               	retlw	16
  2280  1845  3418               	retlw	24
  2281  1846  341D               	retlw	29
  2282  1847  341C               	retlw	28
  2283  1848  34C7               	retlw	199
  2284  1849  3400               	retlw	0
  2285  184A  34B2               	retlw	178
  2286  184B  34EA               	retlw	234
  2287  184C  340A               	retlw	10
  2288  184D  3400               	retlw	0
  2289  184E  3411               	retlw	17
  2290  184F  3459               	retlw	89
  2291  1850  3488               	retlw	136
  2292  1851  3431               	retlw	49
  2293  1852  340B               	retlw	11
  2294  1853  342F               	retlw	47
  2295  1854  342E               	retlw	46
  2296  1855  3406               	retlw	6
  2297  1856  3404               	retlw	4
  2298  1857  3405               	retlw	5
  2299  1858  3400               	retlw	0
  2300  1859  3430               	retlw	48
  2301  185A  34D3               	retlw	211
  2302  185B  3491               	retlw	145
  2303  185C  3441               	retlw	65
  2304  185D  3400               	retlw	0
  2305  185E                     __end_of_CC2500_rfSettings:	
  2306  185E                     _CC2500_patable_vaule:	
  2307  185E  34FE               	retlw	254
  2308  185F  34FE               	retlw	254
  2309  1860  34FE               	retlw	254
  2310  1861  34FE               	retlw	254
  2311  1862  34FE               	retlw	254
  2312  1863  34FE               	retlw	254
  2313  1864  34FE               	retlw	254
  2314  1865  34FE               	retlw	254
  2315  1866                     __end_of_CC2500_patable_vaule:	
  2316                           
  2317                           	psect	nvBANK1
  2318  00EE                     __pnvBANK1:	
  2319  00EE                     _product:	
  2320  00EE                     	ds	1
  2321  000C                     _PORTA	set	12
  2322  000D                     _PORTB	set	13
  2323  000E                     _PORTC	set	14
  2324  0018                     _T1CON	set	24
  2325  0017                     _TMR1H	set	23
  2326  0016                     _TMR1L	set	22
  2327  005F                     _GIE	set	95
  2328  005B                     _IOCIE	set	91
  2329  0058                     _IOCIF	set	88
  2330  005E                     _PEIE	set	94
  2331  0060                     _RA0	set	96
  2332  0064                     _RA4	set	100
  2333  0066                     _RA6	set	102
  2334  0067                     _RA7	set	103
  2335  0068                     _RB0	set	104
  2336  0069                     _RB1	set	105
  2337  006A                     _RB2	set	106
  2338  006B                     _RB3	set	107
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0073                     _RC3	set	115
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0088                     _TMR1IF	set	136
  2346  009D                     _ADCON0	set	157
  2347  009E                     _ADCON1	set	158
  2348  009C                     _ADRESH	set	156
  2349  009B                     _ADRESL	set	155
  2350  0099                     _OSCCON	set	153
  2351  008C                     _TRISA	set	140
  2352  008D                     _TRISB	set	141
  2353  008E                     _TRISC	set	142
  2354  0097                     _WDTCON	set	151
  2355  04E9                     _GO_nDONE	set	1257
  2356  0488                     _TMR1IE	set	1160
  2357  0117                     _FVRCON	set	279
  2358  010C                     _LATA	set	268
  2359  010D                     _LATB	set	269
  2360  010E                     _LATC	set	270
  2361  018C                     _ANSELA	set	396
  2362  018D                     _ANSELB	set	397
  2363  018E                     _ANSELC	set	398
  2364  0192                     _PMADRH	set	402
  2365  0191                     _PMADRL	set	401
  2366  0196                     _PMCON2	set	406
  2367  0194                     _PMDATH	set	404
  2368  0193                     _PMDATL	set	403
  2369  0CAE                     _CFGS	set	3246
  2370  0CAC                     _FREE	set	3244
  2371  0CAD                     _LWLO	set	3245
  2372  0CA8                     _RD	set	3240
  2373  0CA9                     _WR	set	3241
  2374  0CAA                     _WREN	set	3242
  2375  020D                     _WPUB	set	525
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0021                     start_initialization:	
  2385  0021                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITCOMMON
  2388  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BITBANK1
  2391  0022  0021               	movlb	1	; select bank1
  2392  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2393                           
  2394                           ; Clear objects allocated to BANK1
  2395  0024  30A0               	movlw	low __pbssBANK1
  2396  0025  0084               	movwf	4
  2397  0026  3000               	movlw	high __pbssBANK1
  2398  0027  0085               	movwf	5
  2399  0028  3046               	movlw	70
  2400  0029  319A  225A  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK2
  2403  002C  3020               	movlw	low __pbssBANK2
  2404  002D  0084               	movwf	4
  2405  002E  3001               	movlw	high __pbssBANK2
  2406  002F  0085               	movwf	5
  2407  0030  304C               	movlw	76
  2408  0031  319A  225A  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK3
  2411  0034  30A0               	movlw	low __pbssBANK3
  2412  0035  0084               	movwf	4
  2413  0036  3001               	movlw	high __pbssBANK3
  2414  0037  0085               	movwf	5
  2415  0038  302C               	movlw	44
  2416  0039  319A  225A  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK4
  2419  003C  3020               	movlw	low __pbssBANK4
  2420  003D  0084               	movwf	4
  2421  003E  3002               	movlw	high __pbssBANK4
  2422  003F  0085               	movwf	5
  2423  0040  3025               	movlw	37
  2424  0041  319A  225A  3180   	fcall	clear_ram0
  2425                           
  2426                           ; Initialize objects allocated to BANK3
  2427  0044  3033               	movlw	low __pidataBANK3
  2428  0045  0084               	movwf	4
  2429  0046  309F               	movlw	(high __pidataBANK3)| (0+128)
  2430  0047  0085               	movwf	5
  2431  0048  30CC               	movlw	low __pdataBANK3
  2432  0049  0086               	movwf	6
  2433  004A  3001               	movlw	high __pdataBANK3
  2434  004B  0087               	movwf	7
  2435  004C  3020               	movlw	32
  2436  004D  319A  2254         	fcall	init_ram
  2437  004F                     end_of_initialization:	
  2438                           ;End of C runtime variable initialization code
  2439                           
  2440  004F                     __end_of__initialization:	
  2441  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2442  0050  0020               	movlb	0
  2443  0051  3194  2C7E         	ljmp	_main	;jump to C main() function
  2444                           
  2445                           	psect	bitbssCOMMON
  2446  03E8                     __pbitbssCOMMON:	
  2447  03E8                     _Transceive_OK:	
  2448  03E8                     	ds	1
  2449                           
  2450                           	psect	bitbssBANK1
  2451  0778                     __pbitbssBANK1:	
  2452  0778                     _Receive_OK:	
  2453  0778                     	ds	1
  2454                           
  2455                           	psect	bssBANK1
  2456  00A0                     __pbssBANK1:	
  2457  00A0                     _RF1:	
  2458  00A0                     	ds	15
  2459  00AF                     _myMain:	
  2460  00AF                     	ds	13
  2461  00BC                     _DimmerIntr1:	
  2462  00BC                     	ds	12
  2463  00C8                     _CRC:	
  2464  00C8                     	ds	1
  2465  00C9                     _Cmd:	
  2466  00C9                     	ds	1
  2467  00CA                     _DelayOff:	
  2468  00CA                     	ds	1
  2469  00CB                     _DimmerIntr:	
  2470  00CB                     	ds	1
  2471  00CC                     _DimmerLights:	
  2472  00CC                     	ds	1
  2473  00CD                     _LED:	
  2474  00CD                     	ds	1
  2475  00CE                     _Light:	
  2476  00CE                     	ds	1
  2477  00CF                     _RSSI:	
  2478  00CF                     	ds	1
  2479  00D0                     _Rx_Length:	
  2480  00D0                     	ds	1
  2481  00D1                     _SPI0Buffer:	
  2482  00D1                     	ds	1
  2483  00D2                     _Sw:	
  2484  00D2                     	ds	1
  2485  00D3                     _SwDetect:	
  2486  00D3                     	ds	1
  2487  00D4                     _Tx_Length:	
  2488  00D4                     	ds	1
  2489  00D5                     _r_address:	
  2490  00D5                     	ds	1
  2491  00D6                     _r_data:	
  2492  00D6                     	ds	1
  2493  00D7                     _s_data:	
  2494  00D7                     	ds	1
  2495  00D8                     _Temp:	
  2496  00D8                     	ds	14
  2497                           
  2498                           	psect	bssBANK2
  2499  0120                     __pbssBANK2:	
  2500  0120                     _Buz1:	
  2501  0120                     	ds	12
  2502  012C                     _Dimmer:	
  2503  012C                     	ds	5
  2504  0131                     _Timer1:	
  2505  0131                     	ds	3
  2506  0134                     _RF_Count:	
  2507  0134                     	ds	2
  2508  0136                     _WDT:	
  2509  0136                     	ds	2
  2510  0138                     _Load:	
  2511  0138                     	ds	40
  2512  0160                     _DimmerLights1:	
  2513  0160                     	ds	8
  2514  0168                     _VarErrLED:	
  2515  0168                     	ds	4
  2516                           
  2517                           	psect	bssBANK3
  2518  01A0                     __pbssBANK3:	
  2519  01A0                     _RF_Data:	
  2520  01A0                     	ds	30
  2521  01BE                     _Sw1:	
  2522  01BE                     	ds	9
  2523  01C7                     _DlySw1:	
  2524  01C7                     	ds	5
  2525                           
  2526                           	psect	dataBANK3
  2527  01CC                     __pdataBANK3:	
  2528  01CC                     __product:	
  2529  01CC                     	ds	32
  2530                           
  2531                           	psect	bssBANK4
  2532  0220                     __pbssBANK4:	
  2533  0220                     _Memory:	
  2534  0220                     	ds	37
  2535                           
  2536                           	psect	clrtext
  2537  1A5A                     clear_ram0:	
  2538                           ;	Called with FSR0 containing the base address, and
  2539                           ;	WREG with the size to clear
  2540                           
  2541  1A5A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2542  1A5B                     clrloop0:	
  2543  1A5B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2544  1A5C  3101               	addfsr 0,1
  2545  1A5D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2546  1A5E  2A5B               	goto	clrloop0	;have we reached the end yet?
  2547  1A5F  3400               	retlw	0	;all done for this memory range, return
  2548                           
  2549                           	psect	inittext
  2550  1A54                     init_ram:	
  2551  1A54  00FE               	movwf	126
  2552  1A55                     initloop:	
  2553  1A55  0012               	moviw fsr0++
  2554  1A56  001E               	movwi fsr1++
  2555  1A57  0BFE               	decfsz	126,f
  2556  1A58  2A55               	goto	initloop
  2557  1A59  3400               	retlw	0
  2558                           
  2559                           	psect	cstackBANK1
  2560  00E6                     __pcstackBANK1:	
  2561  00E6                     ??_getRxData:	
  2562  00E6                     setDimmerLights_OnOff@lights:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x0
  2567  00E6                     	ds	1
  2568  00E7                     setDimmerLights_Main@lights:	
  2569  00E7                     getRxData@error:	
  2570                           ; 1 bytes @ 0x1
  2571                           
  2572                           
  2573                           ; 1 bytes @ 0x1
  2574  00E7                     	ds	1
  2575  00E8                     ??_setRF_Main:	
  2576                           
  2577                           ; 0 bytes @ 0x2
  2578  00E8                     	ds	1
  2579  00E9                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x3
  2582  00E9                     	ds	1
  2583  00EA                     ?_main:	
  2584  00EA                     main@argc:	
  2585                           ; 2 bytes @ 0x4
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x4
  2589  00EA                     	ds	2
  2590  00EC                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x6
  2593  00EC                     	ds	2
  2594                           
  2595                           	psect	cstackCOMMON
  2596  0070                     __pcstackCOMMON:	
  2597  0070                     ?_CC2500_WriteCommand:	
  2598  0070                     ?_RF_Timeout_Counter:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_setRF_TimeoutCleared:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_WriteByte:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_ReadStatus:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_ReadByte:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_PowerRST:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_InitSetREG:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_InitPATable:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ClearTXFIFO:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_ClearRXFIFO:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_FrequencyCabr:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_SIDLEMode:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DlyOff_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_DlyOff_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_SwOn:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_SwOff:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setMemory_Modify:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_Line:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setTxData:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setRF_TransceiveGO:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setLED_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setLED_Main:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Fosc_Set:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_IO_Set:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_TMR1_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_ADC_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_IOC_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_WDT_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_TMR1_ISR:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_IOC_ISR:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Timeout_Counter:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_set_TimeoutCleared:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Flash_Memory_Write:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_Flash_Memory_Modify:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_WDT_Clearing:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_myMain_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Temp_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Load_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Switch_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RF_Initialization:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_getLoad_AD:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_getTemp_AD:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_my_MainTimer:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Temp_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Load_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Switch_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_RF_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Exception_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setLoad_AH_AL_Restore:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setTemp_Initialization:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setTemp_Main:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setOverTemp_ADV_Restore:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setRF_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setRF_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RF_RxDisable:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_getRxData:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setLog_Code:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setControl_Lights_Table:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setRFSW_Control:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRFSW_AdjControl:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_AdjControl:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setSw_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setSw_Main:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_Buzzer_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_Buzzer_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_CC2500_TxData:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_CC2500_RxData:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_CC2500_PowerOnInitial:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DelayOffPointSelect:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DelayOff_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_DelayOff_Main:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_DimmerIntr_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerLights_SelectPointer:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DimmerLights_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setDimmerLights_DimmingOn:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLights_Main:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerLights_TMR_1:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ??_DimmerLights_TMR_1:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_IOC_1:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_LedPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_LED_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_LED_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_Mcu_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_ISR:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_Flash_Memory_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Flash_Memory_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_Flash_Memory_Unlock:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Erasing:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setMemory_LoopSave:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_WDT_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setRF_Learn:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_TouchPower:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_SwPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_getDimmerLights_Status:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_getDimmerLights_ValueToPercent:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getDimmerLights_PercentToValue:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getLoad_OK:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getMain_All_Error_Status:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getMain_All_LightsStatus:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Allow_Condition:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getCmd_Status:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_Flash_Memory_Read:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getAll_Sw_KeyStatus:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_getRF_KeyStatus:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getSw_KeyStatus:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getDelayOff_GO:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerIntr_DimmingValue:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Line:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getDimmer_LoadGO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmer_Load_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_Lights_Count:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?i1___lbdiv:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     setDimmerLights_Initialization@lights:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     getDimmerLights_Allow_Condition@lights:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     getSw_KeyStatus@sw:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     i1___lbdiv@divisor:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x0
  2957  0070                     	ds	1
  2958  0071                     ??_TMR1_ISR:	
  2959  0071                     ??i1___lbdiv:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962                           
  2963                           ; 0 bytes @ 0x1
  2964  0071                     	ds	1
  2965  0072                     i1___lbdiv@dividend:	
  2966                           
  2967                           ; 1 bytes @ 0x2
  2968  0072                     	ds	1
  2969  0073                     i1___lbdiv@counter:	
  2970                           
  2971                           ; 1 bytes @ 0x3
  2972  0073                     	ds	1
  2973  0074                     i1___lbdiv@quotient:	
  2974                           
  2975                           ; 1 bytes @ 0x4
  2976  0074                     	ds	1
  2977  0075                     ?i1_Division:	
  2978  0075                     i1Division@num:	
  2979                           ; 1 bytes @ 0x5
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x5
  2983  0075                     	ds	1
  2984  0076                     ??i1_Division:	
  2985                           
  2986                           ; 0 bytes @ 0x6
  2987  0076                     	ds	2
  2988  0078                     i1Division@value:	
  2989                           
  2990                           ; 1 bytes @ 0x8
  2991  0078                     	ds	1
  2992  0079                     i1Division@result:	
  2993                           
  2994                           ; 1 bytes @ 0x9
  2995  0079                     	ds	1
  2996  007A                     ??_DimmerLights_IOC_1:	
  2997                           
  2998                           ; 0 bytes @ 0xA
  2999  007A                     	ds	2
  3000  007C                     ??_IOC_ISR:	
  3001  007C                     ??_ISR:	
  3002                           ; 0 bytes @ 0xC
  3003                           
  3004                           
  3005                           ; 0 bytes @ 0xC
  3006  007C                     	ds	1
  3007                           
  3008                           	psect	cstackBANK0
  3009  0020                     __pcstackBANK0:	
  3010  0020                     ??_RF_Timeout_Counter:	
  3011  0020                     ??_setRF_TimeoutCleared:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_CC2500_WriteByte:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_CC2500_ReadByte:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ?_DelayTime_1us:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_setMemory_Modify:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_setDimmerLights_Initialization:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_All_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_getCmd_Status:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ?_setCmd_Status:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_setTxData:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_setRF_TransceiveGO:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_Fosc_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IO_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_TMR1_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_ADC_Set:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_IOC_Set:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_WDT_Set:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_Timeout_Counter:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_set_TimeoutCleared:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Flash_Memory_Read:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ?_setMemory_Data:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_Flash_Memory_Write:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_getAll_Sw_KeyStatus:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_WDT_Clearing:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_myMain_Initialization:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Temp_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_setLoad_AH_AL_Restore:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_setTemp_Initialization:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_setOverTemp_ADV_Restore:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_setRF_Initialization:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getRF_KeyStatus:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getSw_KeyStatus:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_Buzzer_Initialization:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Buzzer_Main:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_DelayOffPointSelect:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ?_setDimmerIntr_ControlStatus:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_getDimmerIntr_DimmingValue:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ?_setDimmerIntr_Dimming_RF:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_DimmerLights_SelectPointer:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_getDimmerLights_Line:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ??_getDimmer_LoadGO:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ??_getDimmer_Load_Status:	
  3150                           ; 0 bytes @ 0x0
  3151                           
  3152  0020                     ??_LedPointSelect:	
  3153                           ; 0 bytes @ 0x0
  3154                           
  3155  0020                     ??_Flash_Memory_Unlock:	
  3156                           ; 0 bytes @ 0x0
  3157                           
  3158  0020                     ??_Flash_Memory_Erasing:	
  3159                           ; 0 bytes @ 0x0
  3160                           
  3161  0020                     ??_setMemory_LoopSave:	
  3162                           ; 0 bytes @ 0x0
  3163                           
  3164  0020                     ??_WDT_Main:	
  3165                           ; 0 bytes @ 0x0
  3166                           
  3167  0020                     ??_getMain_Lights_Count:	
  3168                           ; 0 bytes @ 0x0
  3169                           
  3170  0020                     ??_setRF_Learn:	
  3171                           ; 0 bytes @ 0x0
  3172                           
  3173  0020                     ??_TouchPower:	
  3174                           ; 0 bytes @ 0x0
  3175                           
  3176  0020                     ??_SwPointSelect:	
  3177                           ; 0 bytes @ 0x0
  3178                           
  3179  0020                     ?___bmul:	
  3180                           ; 0 bytes @ 0x0
  3181                           
  3182  0020                     ?___lbdiv:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     ?_getBuz_GO:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     ?_getAD:	
  3189                           ; 2 bytes @ 0x0
  3190                           
  3191  0020                     ?___wmul:	
  3192                           ; 2 bytes @ 0x0
  3193                           
  3194  0020                     ?___awdiv:	
  3195                           ; 2 bytes @ 0x0
  3196                           
  3197  0020                     ?___lwdiv:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ?___ftpack:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     setDimmerIntr_ControlStatus@command:	
  3204                           ; 3 bytes @ 0x0
  3205                           
  3206  0020                     setDimmerIntr_Dimming_Sw@command:	
  3207                           ; 1 bytes @ 0x0
  3208                           
  3209  0020                     setDimmerIntr_Dimming_RF@command:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3213                           ; 1 bytes @ 0x0
  3214                           
  3215  0020                     setDimmerLights_Line@lights:	
  3216                           ; 1 bytes @ 0x0
  3217                           
  3218  0020                     getDimmerLights_Line@line:	
  3219                           ; 1 bytes @ 0x0
  3220                           
  3221  0020                     getDimmer_LoadGO@loadgo:	
  3222                           ; 1 bytes @ 0x0
  3223                           
  3224  0020                     getDimmer_Load_Status@status:	
  3225                           ; 1 bytes @ 0x0
  3226                           
  3227  0020                     getAD@adcon1:	
  3228                           ; 1 bytes @ 0x0
  3229                           
  3230  0020                     setMemory_Data@data:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0020                     getMain_All_LightsStatus@status:	
  3234                           ; 1 bytes @ 0x0
  3235                           
  3236  0020                     getMain_Lights_Count@count:	
  3237                           ; 1 bytes @ 0x0
  3238                           
  3239  0020                     setCmd_Status@cmd:	
  3240                           ; 1 bytes @ 0x0
  3241                           
  3242  0020                     getCmd_Status@number:	
  3243                           ; 1 bytes @ 0x0
  3244                           
  3245  0020                     getLoad_OK@ok:	
  3246                           ; 1 bytes @ 0x0
  3247                           
  3248  0020                     ___bmul@multiplicand:	
  3249                           ; 1 bytes @ 0x0
  3250                           
  3251  0020                     ___lbdiv@divisor:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0020                     DelayTime_1us@count:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0020                     ___wmul@multiplier:	
  3258                           ; 2 bytes @ 0x0
  3259                           
  3260  0020                     ___awdiv@divisor:	
  3261                           ; 2 bytes @ 0x0
  3262                           
  3263  0020                     ___lwdiv@divisor:	
  3264                           ; 2 bytes @ 0x0
  3265                           
  3266  0020                     ___ftpack@arg:	
  3267                           ; 2 bytes @ 0x0
  3268                           
  3269                           
  3270                           ; 3 bytes @ 0x0
  3271  0020                     	ds	1
  3272  0021                     ??_getDimmerLights_Allow_Condition:	
  3273  0021                     ??_setCmd_Status:	
  3274                           ; 0 bytes @ 0x1
  3275                           
  3276  0021                     ??_setMemory_Data:	
  3277                           ; 0 bytes @ 0x1
  3278                           
  3279  0021                     ??_RF_Initialization:	
  3280                           ; 0 bytes @ 0x1
  3281                           
  3282  0021                     ??_setDimmerIntr_ControlStatus:	
  3283                           ; 0 bytes @ 0x1
  3284                           
  3285  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3286                           ; 0 bytes @ 0x1
  3287                           
  3288  0021                     ??_setDimmerIntr_Dimming_RF:	
  3289                           ; 0 bytes @ 0x1
  3290                           
  3291  0021                     ??_Mcu_Initialization:	
  3292                           ; 0 bytes @ 0x1
  3293                           
  3294  0021                     ??___bmul:	
  3295                           ; 0 bytes @ 0x1
  3296                           
  3297  0021                     ??___lbdiv:	
  3298                           ; 0 bytes @ 0x1
  3299                           
  3300  0021                     CC2500_WriteByte@loop_a:	
  3301                           ; 0 bytes @ 0x1
  3302                           
  3303  0021                     CC2500_ReadByte@loop_b:	
  3304                           ; 1 bytes @ 0x1
  3305                           
  3306  0021                     DelayOffPointSelect@sw:	
  3307                           ; 1 bytes @ 0x1
  3308                           
  3309  0021                     getDimmerIntr_DimmingValue@lights:	
  3310                           ; 1 bytes @ 0x1
  3311                           
  3312  0021                     DimmerLights_SelectPointer@lights:	
  3313                           ; 1 bytes @ 0x1
  3314                           
  3315  0021                     LedPointSelect@led:	
  3316                           ; 1 bytes @ 0x1
  3317                           
  3318  0021                     Flash_Memory_Read@i:	
  3319                           ; 1 bytes @ 0x1
  3320                           
  3321  0021                     Flash_Memory_Write@i:	
  3322                           ; 1 bytes @ 0x1
  3323                           
  3324  0021                     setMemory_Modify@command:	
  3325                           ; 1 bytes @ 0x1
  3326                           
  3327  0021                     setMemory_LoopSave@command:	
  3328                           ; 1 bytes @ 0x1
  3329                           
  3330  0021                     getMain_Lights_Count@status1:	
  3331                           ; 1 bytes @ 0x1
  3332                           
  3333  0021                     getCmd_Status@cmd:	
  3334                           ; 1 bytes @ 0x1
  3335                           
  3336  0021                     setLoad_AH_AL_Restore@i:	
  3337                           ; 1 bytes @ 0x1
  3338                           
  3339  0021                     setRF_Learn@command:	
  3340                           ; 1 bytes @ 0x1
  3341                           
  3342  0021                     getRF_KeyStatus@key:	
  3343                           ; 1 bytes @ 0x1
  3344                           
  3345  0021                     setRF_TransceiveGO@command:	
  3346                           ; 1 bytes @ 0x1
  3347                           
  3348  0021                     SwPointSelect@sw:	
  3349                           ; 1 bytes @ 0x1
  3350                           
  3351  0021                     getSw_KeyStatus@status:	
  3352                           ; 1 bytes @ 0x1
  3353                           
  3354  0021                     getAll_Sw_KeyStatus@status:	
  3355                           ; 1 bytes @ 0x1
  3356                           
  3357  0021                     _getMain_All_Error_Status$3609:	
  3358                           ; 1 bytes @ 0x1
  3359                           
  3360  0021                     setOverTemp_ADV_Restore@i:	
  3361                           ; 2 bytes @ 0x1
  3362                           
  3363                           
  3364                           ; 2 bytes @ 0x1
  3365  0021                     	ds	1
  3366  0022                     ??_CC2500_WriteCommand:	
  3367  0022                     ??_CC2500_ReadStatus:	
  3368                           ; 0 bytes @ 0x2
  3369                           
  3370  0022                     ??_DelayTime_1us:	
  3371                           ; 0 bytes @ 0x2
  3372                           
  3373  0022                     ?_CC2500_WriteREG:	
  3374                           ; 0 bytes @ 0x2
  3375                           
  3376  0022                     ??_DlyOff_Initialization:	
  3377                           ; 0 bytes @ 0x2
  3378                           
  3379  0022                     ??_getDimmerLights_Status:	
  3380                           ; 0 bytes @ 0x2
  3381                           
  3382  0022                     ??_setDimmerLights_SwOff:	
  3383                           ; 0 bytes @ 0x2
  3384                           
  3385  0022                     ?_setLED:	
  3386                           ; 0 bytes @ 0x2
  3387                           
  3388  0022                     ??_setLED_Main:	
  3389                           ; 0 bytes @ 0x2
  3390                           
  3391  0022                     ??_Load_Initialization:	
  3392                           ; 0 bytes @ 0x2
  3393                           
  3394  0022                     ??_getBuz_GO:	
  3395                           ; 0 bytes @ 0x2
  3396                           
  3397  0022                     ??_getDelayOff_GO:	
  3398                           ; 0 bytes @ 0x2
  3399                           
  3400  0022                     ??_setDimmerLights_DimmingOn:	
  3401                           ; 0 bytes @ 0x2
  3402                           
  3403  0022                     ?_setDimmerLights_DimmingRun:	
  3404                           ; 0 bytes @ 0x2
  3405                           
  3406  0022                     CC2500_WriteREG@value:	
  3407                           ; 0 bytes @ 0x2
  3408                           
  3409  0022                     DlyOff_Initialization@sw:	
  3410                           ; 1 bytes @ 0x2
  3411                           
  3412  0022                     getDelayOff_GO@sw:	
  3413                           ; 1 bytes @ 0x2
  3414                           
  3415  0022                     setDimmerIntr_ControlStatus@lights:	
  3416                           ; 1 bytes @ 0x2
  3417                           
  3418  0022                     getDimmerIntr_DimmingValue@value:	
  3419                           ; 1 bytes @ 0x2
  3420                           
  3421  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3422                           ; 1 bytes @ 0x2
  3423                           
  3424  0022                     setDimmerIntr_Dimming_RF@lights:	
  3425                           ; 1 bytes @ 0x2
  3426                           
  3427  0022                     setDimmerLights_SwOff@sw:	
  3428                           ; 1 bytes @ 0x2
  3429                           
  3430  0022                     setDimmerLights_DimmingOn@sw:	
  3431                           ; 1 bytes @ 0x2
  3432                           
  3433  0022                     getDimmerLights_Allow_Condition@allow:	
  3434                           ; 1 bytes @ 0x2
  3435                           
  3436  0022                     getDimmerLights_Status@lights:	
  3437                           ; 1 bytes @ 0x2
  3438                           
  3439  0022                     setDimmerLights_DimmingRun@command:	
  3440                           ; 1 bytes @ 0x2
  3441                           
  3442  0022                     setLED@command:	
  3443                           ; 1 bytes @ 0x2
  3444                           
  3445  0022                     Flash_Memory_Read@address:	
  3446                           ; 1 bytes @ 0x2
  3447                           
  3448  0022                     setMemory_Data@address:	
  3449                           ; 1 bytes @ 0x2
  3450                           
  3451  0022                     setCmd_Status@number:	
  3452                           ; 1 bytes @ 0x2
  3453                           
  3454  0022                     _getRF_KeyStatus$5407:	
  3455                           ; 1 bytes @ 0x2
  3456                           
  3457  0022                     _getSw_KeyStatus$6461:	
  3458                           ; 1 bytes @ 0x2
  3459                           
  3460  0022                     _getAll_Sw_KeyStatus$6464:	
  3461                           ; 1 bytes @ 0x2
  3462                           
  3463  0022                     ___bmul@product:	
  3464                           ; 1 bytes @ 0x2
  3465                           
  3466  0022                     ___lbdiv@dividend:	
  3467                           ; 1 bytes @ 0x2
  3468                           
  3469  0022                     DelayTime_1us@i:	
  3470                           ; 1 bytes @ 0x2
  3471                           
  3472  0022                     ___wmul@multiplicand:	
  3473                           ; 2 bytes @ 0x2
  3474                           
  3475  0022                     ___awdiv@dividend:	
  3476                           ; 2 bytes @ 0x2
  3477                           
  3478  0022                     ___lwdiv@dividend:	
  3479                           ; 2 bytes @ 0x2
  3480                           
  3481                           
  3482                           ; 2 bytes @ 0x2
  3483  0022                     	ds	1
  3484  0023                     ??_CC2500_WriteREG:	
  3485  0023                     ??_setLED:	
  3486                           ; 0 bytes @ 0x3
  3487                           
  3488  0023                     ??_DelayOff_Initialization:	
  3489                           ; 0 bytes @ 0x3
  3490                           
  3491  0023                     ??_setDimmerLights_DimmingRun:	
  3492                           ; 0 bytes @ 0x3
  3493                           
  3494  0023                     ??_getAD:	
  3495                           ; 0 bytes @ 0x3
  3496                           
  3497  0023                     CC2500_WriteCommand@command:	
  3498                           ; 0 bytes @ 0x3
  3499                           
  3500  0023                     CC2500_ReadStatus@status_addr:	
  3501                           ; 1 bytes @ 0x3
  3502                           
  3503  0023                     getDelayOff_GO@go:	
  3504                           ; 1 bytes @ 0x3
  3505                           
  3506  0023                     _getDimmerLights_Allow_Condition$2279:	
  3507                           ; 1 bytes @ 0x3
  3508                           
  3509  0023                     getDimmerLights_Status@status:	
  3510                           ; 1 bytes @ 0x3
  3511                           
  3512  0023                     setLED@led:	
  3513                           ; 1 bytes @ 0x3
  3514                           
  3515  0023                     getAD@adcon0:	
  3516                           ; 1 bytes @ 0x3
  3517                           
  3518  0023                     Flash_Memory_Read@ret:	
  3519                           ; 1 bytes @ 0x3
  3520                           
  3521  0023                     ___bmul@multiplier:	
  3522                           ; 1 bytes @ 0x3
  3523                           
  3524  0023                     ___ftpack@exp:	
  3525                           ; 1 bytes @ 0x3
  3526                           
  3527  0023                     ___lbdiv@counter:	
  3528                           ; 1 bytes @ 0x3
  3529                           
  3530  0023                     _getMain_All_Error_Status$3610:	
  3531                           ; 1 bytes @ 0x3
  3532                           
  3533                           
  3534                           ; 2 bytes @ 0x3
  3535  0023                     	ds	1
  3536  0024                     ??_CC2500_ClearTXFIFO:	
  3537  0024                     ??_CC2500_ClearRXFIFO:	
  3538                           ; 0 bytes @ 0x4
  3539                           
  3540  0024                     ??_CC2500_SIDLEMode:	
  3541                           ; 0 bytes @ 0x4
  3542                           
  3543  0024                     ??_setLED_Initialization:	
  3544                           ; 0 bytes @ 0x4
  3545                           
  3546  0024                     ??_Flash_Memory_Modify:	
  3547                           ; 0 bytes @ 0x4
  3548                           
  3549  0024                     ??_getLoad_AD:	
  3550                           ; 0 bytes @ 0x4
  3551                           
  3552  0024                     ??_getTemp_AD:	
  3553                           ; 0 bytes @ 0x4
  3554                           
  3555  0024                     ??_RF_RxDisable:	
  3556                           ; 0 bytes @ 0x4
  3557                           
  3558  0024                     ??_setRF_AdjControl:	
  3559                           ; 0 bytes @ 0x4
  3560                           
  3561  0024                     ??_setSw_Initialization:	
  3562                           ; 0 bytes @ 0x4
  3563                           
  3564  0024                     ??_CC2500_TxData:	
  3565                           ; 0 bytes @ 0x4
  3566                           
  3567  0024                     ??_CC2500_RxData:	
  3568                           ; 0 bytes @ 0x4
  3569                           
  3570  0024                     ??_Flash_Memory_Initialization:	
  3571                           ; 0 bytes @ 0x4
  3572                           
  3573  0024                     ??___wmul:	
  3574                           ; 0 bytes @ 0x4
  3575                           
  3576  0024                     ??___awdiv:	
  3577                           ; 0 bytes @ 0x4
  3578                           
  3579  0024                     ??___lwdiv:	
  3580                           ; 0 bytes @ 0x4
  3581                           
  3582  0024                     CC2500_WriteREG@w_addr:	
  3583                           ; 0 bytes @ 0x4
  3584                           
  3585  0024                     setDimmerLights_DimmingRun@lights:	
  3586                           ; 1 bytes @ 0x4
  3587                           
  3588  0024                     setLED_Initialization@led:	
  3589                           ; 1 bytes @ 0x4
  3590                           
  3591  0024                     setLED_Main@led:	
  3592                           ; 1 bytes @ 0x4
  3593                           
  3594  0024                     setSw_Initialization@sw:	
  3595                           ; 1 bytes @ 0x4
  3596                           
  3597  0024                     ___ftpack@sign:	
  3598                           ; 1 bytes @ 0x4
  3599                           
  3600  0024                     ___lbdiv@quotient:	
  3601                           ; 1 bytes @ 0x4
  3602                           
  3603  0024                     getBuz_GO@i:	
  3604                           ; 1 bytes @ 0x4
  3605                           
  3606  0024                     DelayTime_1us@j:	
  3607                           ; 2 bytes @ 0x4
  3608                           
  3609  0024                     ___wmul@product:	
  3610                           ; 2 bytes @ 0x4
  3611                           
  3612                           
  3613                           ; 2 bytes @ 0x4
  3614  0024                     	ds	1
  3615  0025                     ??_CC2500_InitSetREG:	
  3616  0025                     ??_CC2500_InitPATable:	
  3617                           ; 0 bytes @ 0x5
  3618                           
  3619  0025                     ??_Switch_Initialization:	
  3620                           ; 0 bytes @ 0x5
  3621                           
  3622  0025                     ??___ftpack:	
  3623                           ; 0 bytes @ 0x5
  3624                           
  3625  0025                     ??_LED_Initialization:	
  3626                           ; 0 bytes @ 0x5
  3627                           
  3628  0025                     ??_LED_Main:	
  3629                           ; 0 bytes @ 0x5
  3630                           
  3631  0025                     ?_Division:	
  3632                           ; 0 bytes @ 0x5
  3633                           
  3634  0025                     CC2500_TxData@loop_e:	
  3635                           ; 1 bytes @ 0x5
  3636                           
  3637  0025                     CC2500_RxData@loop_f:	
  3638                           ; 1 bytes @ 0x5
  3639                           
  3640  0025                     Division@num:	
  3641                           ; 1 bytes @ 0x5
  3642                           
  3643  0025                     Flash_Memory_Initialization@value:	
  3644                           ; 1 bytes @ 0x5
  3645                           
  3646  0025                     Flash_Memory_Modify@i:	
  3647                           ; 1 bytes @ 0x5
  3648                           
  3649  0025                     getMain_All_Error_Status@command:	
  3650                           ; 1 bytes @ 0x5
  3651                           
  3652  0025                     getTemp_AD@channel:	
  3653                           ; 1 bytes @ 0x5
  3654                           
  3655  0025                     setRF_AdjControl@status:	
  3656                           ; 1 bytes @ 0x5
  3657                           
  3658  0025                     ___awdiv@counter:	
  3659                           ; 1 bytes @ 0x5
  3660                           
  3661  0025                     ___lwdiv@quotient:	
  3662                           ; 1 bytes @ 0x5
  3663                           
  3664                           
  3665                           ; 2 bytes @ 0x5
  3666  0025                     	ds	1
  3667  0026                     ??_CC2500_PowerRST:	
  3668  0026                     ??_CC2500_FrequencyCabr:	
  3669                           ; 0 bytes @ 0x6
  3670                           
  3671  0026                     ??_Division:	
  3672                           ; 0 bytes @ 0x6
  3673                           
  3674  0026                     ??_Flash_Memory_Main:	
  3675                           ; 0 bytes @ 0x6
  3676                           
  3677  0026                     CC2500_InitSetREG@temp1:	
  3678                           ; 0 bytes @ 0x6
  3679                           
  3680  0026                     CC2500_InitPATable@temp:	
  3681                           ; 1 bytes @ 0x6
  3682                           
  3683  0026                     getMain_All_Error_Status@status:	
  3684                           ; 1 bytes @ 0x6
  3685                           
  3686  0026                     getLoad_AD@channel:	
  3687                           ; 1 bytes @ 0x6
  3688                           
  3689  0026                     setRF_AdjControl@sw:	
  3690                           ; 1 bytes @ 0x6
  3691                           
  3692  0026                     ___awdiv@sign:	
  3693                           ; 1 bytes @ 0x6
  3694                           
  3695  0026                     getTemp_AD@ADRES:	
  3696                           ; 1 bytes @ 0x6
  3697                           
  3698                           
  3699                           ; 2 bytes @ 0x6
  3700  0026                     	ds	1
  3701  0027                     CC2500_InitSetREG@temp2:	
  3702  0027                     CC2500_InitPATable@loop_d:	
  3703                           ; 1 bytes @ 0x7
  3704                           
  3705  0027                     Flash_Memory_Main@key_Status:	
  3706                           ; 1 bytes @ 0x7
  3707                           
  3708  0027                     getLoad_AD@k:	
  3709                           ; 1 bytes @ 0x7
  3710                           
  3711  0027                     ___lwdiv@counter:	
  3712                           ; 1 bytes @ 0x7
  3713                           
  3714  0027                     ___awdiv@quotient:	
  3715                           ; 1 bytes @ 0x7
  3716                           
  3717                           
  3718                           ; 2 bytes @ 0x7
  3719  0027                     	ds	1
  3720  0028                     ??_Load_Main:	
  3721  0028                     ?___awtoft:	
  3722                           ; 0 bytes @ 0x8
  3723                           
  3724  0028                     CC2500_InitSetREG@loop_c:	
  3725                           ; 3 bytes @ 0x8
  3726                           
  3727  0028                     Division@value:	
  3728                           ; 1 bytes @ 0x8
  3729                           
  3730  0028                     _Flash_Memory_Main$3147:	
  3731                           ; 1 bytes @ 0x8
  3732                           
  3733  0028                     getLoad_AD@j:	
  3734                           ; 1 bytes @ 0x8
  3735                           
  3736  0028                     ___awtoft@c:	
  3737                           ; 1 bytes @ 0x8
  3738                           
  3739                           
  3740                           ; 2 bytes @ 0x8
  3741  0028                     	ds	1
  3742  0029                     ?_setBuz:	
  3743  0029                     ??_CC2500_PowerOnInitial:	
  3744                           ; 0 bytes @ 0x9
  3745                           
  3746  0029                     Division@result:	
  3747                           ; 0 bytes @ 0x9
  3748                           
  3749  0029                     setBuz@time:	
  3750                           ; 1 bytes @ 0x9
  3751                           
  3752  0029                     getLoad_AD@ADRES:	
  3753                           ; 2 bytes @ 0x9
  3754                           
  3755                           
  3756                           ; 2 bytes @ 0x9
  3757  0029                     	ds	1
  3758  002A                     _Load_Main$3984:	
  3759                           
  3760                           ; 2 bytes @ 0xA
  3761  002A                     	ds	1
  3762  002B                     ??_setBuz:	
  3763  002B                     ??___awtoft:	
  3764                           ; 0 bytes @ 0xB
  3765                           
  3766  002B                     getLoad_AD@i:	
  3767                           ; 0 bytes @ 0xB
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0xB
  3771  002B                     	ds	1
  3772  002C                     setBuz@count:	
  3773  002C                     Load_Main@error:	
  3774                           ; 1 bytes @ 0xC
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0xC
  3778  002C                     	ds	1
  3779  002D                     ??_setDimmerLights_SwOn:	
  3780  002D                     ??_my_MainTimer:	
  3781                           ; 0 bytes @ 0xD
  3782                           
  3783  002D                     ??_Exception_Main:	
  3784                           ; 0 bytes @ 0xD
  3785                           
  3786  002D                     setDimmerLights_SwOn@sw:	
  3787                           ; 0 bytes @ 0xD
  3788                           
  3789  002D                     Load_Main@ErrorCountValue:	
  3790                           ; 1 bytes @ 0xD
  3791                           
  3792  002D                     ___awtoft@sign:	
  3793                           ; 1 bytes @ 0xD
  3794                           
  3795                           
  3796                           ; 1 bytes @ 0xD
  3797  002D                     	ds	1
  3798  002E                     ?___ftdiv:	
  3799  002E                     ?___ftmul:	
  3800                           ; 3 bytes @ 0xE
  3801                           
  3802  002E                     setDimmerLights_SwOn@idle:	
  3803                           ; 3 bytes @ 0xE
  3804                           
  3805  002E                     Exception_Main@status:	
  3806                           ; 1 bytes @ 0xE
  3807                           
  3808  002E                     Load_Main@Load_RunStatus:	
  3809                           ; 1 bytes @ 0xE
  3810                           
  3811  002E                     ___ftdiv@f2:	
  3812                           ; 1 bytes @ 0xE
  3813                           
  3814  002E                     ___ftmul@f1:	
  3815                           ; 3 bytes @ 0xE
  3816                           
  3817                           
  3818                           ; 3 bytes @ 0xE
  3819  002E                     	ds	1
  3820  002F                     ??_setSw_Main:	
  3821  002F                     Exception_Main@count:	
  3822                           ; 0 bytes @ 0xF
  3823                           
  3824  002F                     Load_Main@LightsCount:	
  3825                           ; 1 bytes @ 0xF
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0xF
  3829  002F                     	ds	1
  3830  0030                     Exception_Main@i:	
  3831  0030                     Load_Main@i:	
  3832                           ; 2 bytes @ 0x10
  3833                           
  3834                           
  3835                           ; 2 bytes @ 0x10
  3836  0030                     	ds	1
  3837  0031                     setSw_Main@sw:	
  3838  0031                     ___ftdiv@f1:	
  3839                           ; 1 bytes @ 0x11
  3840                           
  3841  0031                     ___ftmul@f2:	
  3842                           ; 3 bytes @ 0x11
  3843                           
  3844                           
  3845                           ; 3 bytes @ 0x11
  3846  0031                     	ds	1
  3847  0032                     ??_Switch_Main:	
  3848  0032                     Exception_Main@i_3621:	
  3849                           ; 0 bytes @ 0x12
  3850                           
  3851                           
  3852                           ; 2 bytes @ 0x12
  3853  0032                     	ds	2
  3854  0034                     ??___ftdiv:	
  3855  0034                     ??___ftmul:	
  3856                           ; 0 bytes @ 0x14
  3857                           
  3858  0034                     Exception_Main@error:	
  3859                           ; 0 bytes @ 0x14
  3860                           
  3861                           
  3862                           ; 1 bytes @ 0x14
  3863  0034                     	ds	1
  3864  0035                     Exception_Main@lights:	
  3865                           
  3866                           ; 1 bytes @ 0x15
  3867  0035                     	ds	3
  3868  0038                     ___ftdiv@cntr:	
  3869  0038                     ___ftmul@exp:	
  3870                           ; 1 bytes @ 0x18
  3871                           
  3872                           
  3873                           ; 1 bytes @ 0x18
  3874  0038                     	ds	1
  3875  0039                     ___ftdiv@f3:	
  3876  0039                     ___ftmul@f3_as_product:	
  3877                           ; 3 bytes @ 0x19
  3878                           
  3879                           
  3880                           ; 3 bytes @ 0x19
  3881  0039                     	ds	3
  3882  003C                     ___ftdiv@exp:	
  3883  003C                     ___ftmul@cntr:	
  3884                           ; 1 bytes @ 0x1C
  3885                           
  3886                           
  3887                           ; 1 bytes @ 0x1C
  3888  003C                     	ds	1
  3889  003D                     ___ftdiv@sign:	
  3890  003D                     ___ftmul@sign:	
  3891                           ; 1 bytes @ 0x1D
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x1D
  3895  003D                     	ds	1
  3896  003E                     ?___ftneg:	
  3897  003E                     ___ftneg@f1:	
  3898                           ; 3 bytes @ 0x1E
  3899                           
  3900                           
  3901                           ; 3 bytes @ 0x1E
  3902  003E                     	ds	3
  3903  0041                     ??___ftneg:	
  3904  0041                     ?___ftadd:	
  3905                           ; 0 bytes @ 0x21
  3906                           
  3907  0041                     ___ftadd@f1:	
  3908                           ; 3 bytes @ 0x21
  3909                           
  3910                           
  3911                           ; 3 bytes @ 0x21
  3912  0041                     	ds	3
  3913  0044                     ___ftadd@f2:	
  3914                           
  3915                           ; 3 bytes @ 0x24
  3916  0044                     	ds	3
  3917  0047                     ??___ftadd:	
  3918                           
  3919                           ; 0 bytes @ 0x27
  3920  0047                     	ds	4
  3921  004B                     ___ftadd@sign:	
  3922                           
  3923                           ; 1 bytes @ 0x2B
  3924  004B                     	ds	1
  3925  004C                     ___ftadd@exp2:	
  3926                           
  3927                           ; 1 bytes @ 0x2C
  3928  004C                     	ds	1
  3929  004D                     ___ftadd@exp1:	
  3930                           
  3931                           ; 1 bytes @ 0x2D
  3932  004D                     	ds	1
  3933  004E                     ?___fttol:	
  3934  004E                     ___fttol@f1:	
  3935                           ; 4 bytes @ 0x2E
  3936                           
  3937                           
  3938                           ; 3 bytes @ 0x2E
  3939  004E                     	ds	4
  3940  0052                     ??___fttol:	
  3941                           
  3942                           ; 0 bytes @ 0x32
  3943  0052                     	ds	4
  3944  0056                     ___fttol@sign1:	
  3945                           
  3946                           ; 1 bytes @ 0x36
  3947  0056                     	ds	1
  3948  0057                     ___fttol@lval:	
  3949                           
  3950                           ; 4 bytes @ 0x37
  3951  0057                     	ds	4
  3952  005B                     ___fttol@exp1:	
  3953                           
  3954                           ; 1 bytes @ 0x3B
  3955  005B                     	ds	1
  3956  005C                     ??_getDimmerLights_ValueToPercent:	
  3957  005C                     ??_getDimmerLights_PercentToValue:	
  3958                           ; 0 bytes @ 0x3C
  3959                           
  3960                           
  3961                           ; 0 bytes @ 0x3C
  3962  005C                     	ds	2
  3963  005E                     getDimmerLights_PercentToValue@value:	
  3964  005E                     getDimmerLights_ValueToPercent@value:	
  3965                           ; 1 bytes @ 0x3E
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x3E
  3969  005E                     	ds	1
  3970  005F                     getDimmerLights_PercentToValue@i:	
  3971  005F                     getDimmerLights_ValueToPercent@i:	
  3972                           ; 3 bytes @ 0x3F
  3973                           
  3974                           
  3975                           ; 3 bytes @ 0x3F
  3976  005F                     	ds	3
  3977  0062                     ?_setProductData:	
  3978  0062                     ??_DimmerIntr_Initialization:	
  3979                           ; 0 bytes @ 0x42
  3980                           
  3981  0062                     ?_setDimmerIntr_DimmingValue:	
  3982                           ; 0 bytes @ 0x42
  3983                           
  3984  0062                     ?_setDimmerIntr_MaxmumValue:	
  3985                           ; 0 bytes @ 0x42
  3986                           
  3987  0062                     setDimmerIntr_DimmingValue@value:	
  3988                           ; 0 bytes @ 0x42
  3989                           
  3990  0062                     setDimmerIntr_MaxmumValue@value:	
  3991                           ; 1 bytes @ 0x42
  3992                           
  3993  0062                     setProductData@value:	
  3994                           ; 1 bytes @ 0x42
  3995                           
  3996                           
  3997                           ; 1 bytes @ 0x42
  3998  0062                     	ds	1
  3999  0063                     ??_setProductData:	
  4000  0063                     ??_setDimmerIntr_DimmingValue:	
  4001                           ; 0 bytes @ 0x43
  4002                           
  4003  0063                     ??_setDimmerIntr_MaxmumValue:	
  4004                           ; 0 bytes @ 0x43
  4005                           
  4006                           
  4007                           ; 0 bytes @ 0x43
  4008  0063                     	ds	1
  4009  0064                     ??_DimmerLights_Initialization:	
  4010  0064                     setDimmerIntr_DimmingValue@lights:	
  4011                           ; 0 bytes @ 0x44
  4012                           
  4013  0064                     setDimmerIntr_MaxmumValue@lights:	
  4014                           ; 1 bytes @ 0x44
  4015                           
  4016  0064                     setProductData@address:	
  4017                           ; 1 bytes @ 0x44
  4018                           
  4019                           
  4020                           ; 1 bytes @ 0x44
  4021  0064                     	ds	1
  4022  0065                     ??_DlyOff_Main:	
  4023  0065                     ?_setRF_DimmerLights:	
  4024                           ; 0 bytes @ 0x45
  4025                           
  4026  0065                     ??_setTemp_Main:	
  4027                           ; 0 bytes @ 0x45
  4028                           
  4029  0065                     ??_setLog_Code:	
  4030                           ; 0 bytes @ 0x45
  4031                           
  4032  0065                     ??_setRFSW_AdjControl:	
  4033                           ; 0 bytes @ 0x45
  4034                           
  4035  0065                     ?_setDelayOff_GO:	
  4036                           ; 0 bytes @ 0x45
  4037                           
  4038  0065                     setDelayOff_GO@command:	
  4039                           ; 0 bytes @ 0x45
  4040                           
  4041  0065                     setRF_DimmerLights@on:	
  4042                           ; 1 bytes @ 0x45
  4043                           
  4044                           
  4045                           ; 1 bytes @ 0x45
  4046  0065                     	ds	1
  4047  0066                     ??_setRF_DimmerLights:	
  4048  0066                     setDelayOff_GO@value:	
  4049                           ; 0 bytes @ 0x46
  4050                           
  4051                           
  4052                           ; 1 bytes @ 0x46
  4053  0066                     	ds	1
  4054  0067                     ??_setDelayOff_GO:	
  4055  0067                     DlyOff_Main@sw:	
  4056                           ; 0 bytes @ 0x47
  4057                           
  4058  0067                     setTemp_Main@error:	
  4059                           ; 1 bytes @ 0x47
  4060                           
  4061  0067                     setRFSW_AdjControl@status:	
  4062                           ; 1 bytes @ 0x47
  4063                           
  4064                           
  4065                           ; 1 bytes @ 0x47
  4066  0067                     	ds	1
  4067  0068                     ??_DelayOff_Main:	
  4068  0068                     setRFSW_AdjControl@sw:	
  4069                           ; 0 bytes @ 0x48
  4070                           
  4071  0068                     setRF_DimmerLights@status:	
  4072                           ; 1 bytes @ 0x48
  4073                           
  4074  0068                     setTemp_Main@SafeValue:	
  4075                           ; 1 bytes @ 0x48
  4076                           
  4077                           
  4078                           ; 2 bytes @ 0x48
  4079  0068                     	ds	1
  4080  0069                     setDelayOff_GO@i:	
  4081  0069                     setRF_DimmerLights@lights:	
  4082                           ; 1 bytes @ 0x49
  4083                           
  4084                           
  4085                           ; 1 bytes @ 0x49
  4086  0069                     	ds	1
  4087  006A                     ?_setDimmerLights_Dimming:	
  4088  006A                     setDelayOff_GO@j:	
  4089                           ; 0 bytes @ 0x4A
  4090                           
  4091  006A                     setDimmerLights_Dimming@status:	
  4092                           ; 1 bytes @ 0x4A
  4093                           
  4094  006A                     setTemp_Main@DangerValue:	
  4095                           ; 1 bytes @ 0x4A
  4096                           
  4097                           
  4098                           ; 2 bytes @ 0x4A
  4099  006A                     	ds	1
  4100  006B                     ??_setDimmerLights_Dimming:	
  4101  006B                     setDelayOff_GO@k:	
  4102                           ; 0 bytes @ 0x4B
  4103                           
  4104                           
  4105                           ; 1 bytes @ 0x4B
  4106  006B                     	ds	1
  4107  006C                     setDelayOff_GO@sw:	
  4108  006C                     setDimmerLights_Dimming@value:	
  4109                           ; 1 bytes @ 0x4C
  4110                           
  4111  006C                     setTemp_Main@TempGO:	
  4112                           ; 1 bytes @ 0x4C
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x4C
  4116  006C                     	ds	1
  4117  006D                     ?_setDimmerLights_OnOff:	
  4118  006D                     ??_setRFSW_Control:	
  4119                           ; 0 bytes @ 0x4D
  4120                           
  4121  006D                     setDimmerLights_OnOff@command:	
  4122                           ; 0 bytes @ 0x4D
  4123                           
  4124  006D                     setDimmerLights_Dimming@lights:	
  4125                           ; 1 bytes @ 0x4D
  4126                           
  4127  006D                     setTemp_Main@AD:	
  4128                           ; 1 bytes @ 0x4D
  4129                           
  4130                           
  4131                           ; 2 bytes @ 0x4D
  4132  006D                     	ds	1
  4133  006E                     ??_setDimmerLights_OnOff:	
  4134  006E                     setRFSW_Control@status:	
  4135                           ; 0 bytes @ 0x4E
  4136                           
  4137                           
  4138                           ; 1 bytes @ 0x4E
  4139  006E                     	ds	1
  4140  006F                     ??_Temp_Main:	
  4141  006F                     setRFSW_Control@sw:	
  4142                           ; 0 bytes @ 0x4F
  4143                           
  4144                           
  4145                           ; 1 bytes @ 0x4F
  4146  006F                     	ds	1
  4147  0070                     ??_setDimmerLights_Main:	
  4148  0070                     ??_RF_Main:	
  4149                           ; 0 bytes @ 0x50
  4150                           
  4151  0070                     ??_setControl_Lights_Table:	
  4152                           ; 0 bytes @ 0x50
  4153                           
  4154  0070                     ??_DimmerLights_Main:	
  4155                           ; 0 bytes @ 0x50
  4156                           
  4157  0070                     ??_main:	
  4158                           ; 0 bytes @ 0x50
  4159                           
  4160                           
  4161                           	psect	maintext
  4162  147E                     __pmaintext:	
  4163                           ; 0 bytes @ 0x50
  4164 ;;
  4165 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4166 ;;
  4167 ;; *************** function _main *****************
  4168 ;; Defined at:
  4169 ;;		line 7 in file "../src/Main_B1.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  argc            2    4[BANK1 ] int 
  4172 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    4[BANK1 ] int 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 17F/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4184 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels required when called:   13
  4190 ;; This function calls:
  4191 ;;		_Buzzer_Initialization
  4192 ;;		_Buzzer_Main
  4193 ;;		_CC2500_PowerOnInitial
  4194 ;;		_DelayOff_Initialization
  4195 ;;		_DelayOff_Main
  4196 ;;		_DimmerLights_Initialization
  4197 ;;		_DimmerLights_Main
  4198 ;;		_Exception_Main
  4199 ;;		_Flash_Memory_Initialization
  4200 ;;		_Flash_Memory_Main
  4201 ;;		_LED_Initialization
  4202 ;;		_LED_Main
  4203 ;;		_Load_Initialization
  4204 ;;		_Load_Main
  4205 ;;		_Mcu_Initialization
  4206 ;;		_RF_Initialization
  4207 ;;		_RF_Main
  4208 ;;		_Switch_Initialization
  4209 ;;		_Switch_Main
  4210 ;;		_Temp_Initialization
  4211 ;;		_Temp_Main
  4212 ;;		_WDT_Main
  4213 ;;		_getLoad_AD
  4214 ;;		_getTemp_AD
  4215 ;;		_myMain_Initialization
  4216 ;;		_my_MainTimer
  4217 ;; This function is called by:
  4218 ;;		Startup code after reset
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           
  4223                           ;psect for function _main
  4224  147E                     _main:	
  4225                           
  4226                           ;Main_B1.c: 8: myMain_Initialization();
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4230  147E  319C  24D5  3194   	fcall	_myMain_Initialization
  4231                           
  4232                           ;Main_B1.c: 9: Mcu_Initialization();
  4233  1481  319C  2465  3194   	fcall	_Mcu_Initialization
  4234                           
  4235                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4236  1484  3187  270E  3194   	fcall	_Flash_Memory_Initialization
  4237                           
  4238                           ;Main_B1.c: 11: LED_Initialization();
  4239  1487  319A  2232  3194   	fcall	_LED_Initialization
  4240                           
  4241                           ;Main_B1.c: 12: Buzzer_Initialization();
  4242  148A  319A  2218  3194   	fcall	_Buzzer_Initialization
  4243                           
  4244                           ;Main_B1.c: 14: ;;
  4245                           ;Main_B1.c: 15: Temp_Initialization();
  4246  148D  319A  2224  3194   	fcall	_Temp_Initialization
  4247                           
  4248                           ;Main_B1.c: 16: Load_Initialization();
  4249  1490  319A  221B  3194   	fcall	_Load_Initialization
  4250                           
  4251                           ;Main_B1.c: 17: ;;
  4252                           ;Main_B1.c: 18: DelayOff_Initialization();
  4253  1493  319A  222A  3194   	fcall	_DelayOff_Initialization
  4254                           
  4255                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4256  1496  319A  2260  3194   	fcall	_DimmerLights_Initialization
  4257                           
  4258                           ;Main_B1.c: 21: ;;
  4259                           ;Main_B1.c: 22: ;;
  4260                           ;Main_B1.c: 23: ;;
  4261                           ;Main_B1.c: 24: Switch_Initialization();
  4262  1499  3190  2000  3194   	fcall	_Switch_Initialization
  4263                           
  4264                           ;Main_B1.c: 25: RF_Initialization();
  4265  149C  319A  221E  3194   	fcall	_RF_Initialization
  4266                           
  4267                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4268  149F  319D  2511  3194   	fcall	_CC2500_PowerOnInitial
  4269  14A2                     l8901:	
  4270                           ;Main_B1.c: 27: ;;
  4271                           ;Main_B1.c: 28: ;;
  4272                           ;Main_B1.c: 30: while (1) {
  4273                           
  4274                           
  4275                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4276  14A2  0021               	movlb	1	; select bank1
  4277  14A3  1C2F               	btfss	_myMain^(0+128),0
  4278  14A4  2CAD               	goto	l8905
  4279                           
  4280                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4281  14A5  3005               	movlw	5
  4282  14A6  3189  2194  3194   	fcall	_getLoad_AD
  4283                           
  4284                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4285  14A9  3009               	movlw	9
  4286  14AA  318C  2498  3194   	fcall	_getTemp_AD
  4287  14AD                     l8905:	
  4288                           
  4289                           ;Main_B1.c: 57: }
  4290                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4291  14AD  0022               	movlb	2	; select bank2
  4292  14AE  1C31               	btfss	_Timer1^(0+256),0
  4293  14AF  2CA2               	goto	l8901
  4294                           
  4295                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4296  14B0  1031               	bcf	_Timer1^(0+256),0
  4297                           
  4298                           ;Main_B1.c: 96: my_MainTimer();
  4299  14B1  3192  22F0  3194   	fcall	_my_MainTimer
  4300                           
  4301                           ;Main_B1.c: 97: WDT_Main();
  4302  14B4  319C  2477  3194   	fcall	_WDT_Main
  4303                           
  4304                           ;Main_B1.c: 98: ;;
  4305                           ;Main_B1.c: 99: ;;
  4306                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4307  14B7  0021               	movlb	1	; select bank1
  4308  14B8  1C2F               	btfss	_myMain^(0+128),0
  4309  14B9  2CA2               	goto	l8901
  4310                           
  4311                           ;Main_B1.c: 101: Flash_Memory_Main();
  4312  14BA  3192  22AF  3194   	fcall	_Flash_Memory_Main
  4313                           
  4314                           ;Main_B1.c: 103: LED_Main();
  4315  14BD  319A  2236  3194   	fcall	_LED_Main
  4316                           
  4317                           ;Main_B1.c: 104: Buzzer_Main();
  4318  14C0  3193  2331  3194   	fcall	_Buzzer_Main
  4319                           
  4320                           ;Main_B1.c: 106: ;;
  4321                           ;Main_B1.c: 107: Temp_Main();
  4322  14C3  319A  2227  3194   	fcall	_Temp_Main
  4323                           
  4324                           ;Main_B1.c: 108: Load_Main();
  4325  14C6  3180  2053  3194   	fcall	_Load_Main
  4326                           
  4327                           ;Main_B1.c: 109: ;;
  4328                           ;Main_B1.c: 111: ;;
  4329                           ;Main_B1.c: 112: DimmerLights_Main();
  4330  14C9  319E  2662  3194   	fcall	_DimmerLights_Main
  4331                           
  4332                           ;Main_B1.c: 113: Switch_Main();
  4333  14CC  319A  226E  3194   	fcall	_Switch_Main
  4334                           
  4335                           ;Main_B1.c: 114: ;;
  4336                           ;Main_B1.c: 115: ;;
  4337                           ;Main_B1.c: 117: RF_Main();
  4338  14CF  319A  2221  3194   	fcall	_RF_Main
  4339                           
  4340                           ;Main_B1.c: 118: DelayOff_Main();
  4341  14D2  319A  222E  3194   	fcall	_DelayOff_Main
  4342                           
  4343                           ;Main_B1.c: 119: ;;
  4344                           ;Main_B1.c: 120: ;;
  4345                           ;Main_B1.c: 121: Exception_Main();
  4346  14D5  3186  2639  3194   	fcall	_Exception_Main
  4347  14D8  2CA2               	goto	l8901
  4348  14D9                     __end_of_main:	
  4349                           ;Main_B1.c: 128: }
  4350                           ;Main_B1.c: 129: }
  4351                           ;Main_B1.c: 163: }
  4352                           ;Main_B1.c: 164: return (0);
  4353                           ;	Return value of _main is never used
  4354                           
  4355                           
  4356                           	psect	text1
  4357  12F0                     __ptext1:	
  4358 ;; *************** function _my_MainTimer *****************
  4359 ;; Defined at:
  4360 ;;		line 185 in file "../src/Main_B1.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;Total ram usage:        1 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    7
  4381 ;; This function calls:
  4382 ;;		_setBuz
  4383 ;;		_setTxData
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _my_MainTimer
  4391  12F0                     _my_MainTimer:	
  4392                           
  4393                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4394                           
  4395                           ;incstack = 0
  4396                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4397  12F0  0021               	movlb	1	; select bank1
  4398  12F1  182F               	btfsc	_myMain^(0+128),0
  4399  12F2  2B0A               	goto	l8091
  4400                           
  4401                           ;Main_B1.c: 188: myMain.PowerCount++;
  4402  12F3  3001               	movlw	1
  4403  12F4  0020               	movlb	0	; select bank0
  4404  12F5  00AD               	movwf	??_my_MainTimer
  4405  12F6  082D               	movf	??_my_MainTimer,w
  4406  12F7  0021               	movlb	1	; select bank1
  4407  12F8  07B0               	addwf	(_myMain^(0+128)+1),f
  4408                           
  4409                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4410  12F9  0830               	movf	(_myMain^(0+128)+1),w
  4411  12FA  3A4B               	xorlw	75
  4412  12FB  1D03               	skipz
  4413  12FC  0008               	return
  4414                           
  4415                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4416  12FD  01B0               	clrf	(_myMain^(0+128)+1)
  4417                           
  4418                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4419  12FE  142F               	bsf	_myMain^(0+128),0
  4420                           
  4421                           ;Main_B1.c: 196: setBuz(3, 50);
  4422  12FF  3032               	movlw	50
  4423  1300  0020               	movlb	0	; select bank0
  4424  1301  00A9               	movwf	setBuz@time
  4425  1302  3000               	movlw	0
  4426  1303  00AA               	movwf	setBuz@time+1
  4427  1304  3003               	movlw	3
  4428  1305  3194  2425         	fcall	_setBuz
  4429                           
  4430                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4431  1307  0021               	movlb	1	; select bank1
  4432  1308  162F               	bsf	_myMain^(0+128),4
  4433                           
  4434                           ;Main_B1.c: 206: }
  4435                           ;Main_B1.c: 207: } else {
  4436  1309  0008               	return
  4437  130A                     l8091:	
  4438                           
  4439                           ;Main_B1.c: 208: myMain.PowerCount++;
  4440  130A  3001               	movlw	1
  4441  130B  0020               	movlb	0	; select bank0
  4442  130C  00AD               	movwf	??_my_MainTimer
  4443  130D  082D               	movf	??_my_MainTimer,w
  4444  130E  0021               	movlb	1	; select bank1
  4445  130F  07B0               	addwf	(_myMain^(0+128)+1),f
  4446                           
  4447                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4448  1310  0830               	movf	(_myMain^(0+128)+1),w
  4449  1311  3A32               	xorlw	50
  4450  1312  1D03               	skipz
  4451  1313  2B18               	goto	l8099
  4452                           
  4453                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4454  1314  01B0               	clrf	(_myMain^(0+128)+1)
  4455                           
  4456                           ;Main_B1.c: 222: setTxData();
  4457  1315  318E  2682  3192   	fcall	_setTxData
  4458  1318                     l8099:	
  4459                           
  4460                           ;Main_B1.c: 226: }
  4461                           ;Main_B1.c: 228: myMain.Count1++;
  4462  1318  3001               	movlw	1
  4463  1319  0021               	movlb	1	; select bank1
  4464  131A  07B3               	addwf	(_myMain^(0+128)+4),f
  4465  131B  3000               	movlw	0
  4466  131C  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4467                           
  4468                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4469  131D  3004               	movlw	4
  4470  131E  3EAF               	addlw	_myMain& (0+255)
  4471  131F  0086               	movwf	6
  4472  1320  0187               	clrf	7
  4473  1321  3F40               	moviw [0]fsr1
  4474  1322  3A32               	xorlw	50
  4475  1323  1D03               	skipz
  4476  1324  2B27               	goto	u8215
  4477  1325  3F41               	moviw [1]fsr1
  4478  1326  3A00               	xorlw	0
  4479  1327                     u8215:	
  4480  1327  1D03               	skipz
  4481  1328  0008               	return
  4482                           
  4483                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4484  1329  01B3               	clrf	(_myMain^(0+128)+4)
  4485  132A  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4486                           
  4487                           ;Main_B1.c: 242: if (myMain.Flag) {
  4488  132B  1CAF               	btfss	_myMain^(0+128),1
  4489  132C  2B2F               	goto	l1447
  4490                           
  4491                           ;Main_B1.c: 243: myMain.Flag = 0;
  4492  132D  10AF               	bcf	_myMain^(0+128),1
  4493                           
  4494                           ;Main_B1.c: 252: } else {
  4495  132E  0008               	return
  4496  132F                     l1447:	
  4497                           
  4498                           ;Main_B1.c: 253: myMain.Flag = 1;
  4499  132F  14AF               	bsf	_myMain^(0+128),1
  4500  1330  0008               	return
  4501  1331                     __end_of_my_MainTimer:	
  4502                           
  4503                           	psect	text2
  4504  1CD5                     __ptext2:	
  4505 ;; *************** function _myMain_Initialization *****************
  4506 ;; Defined at:
  4507 ;;		line 170 in file "../src/Main_B1.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    5
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _myMain_Initialization
  4537  1CD5                     _myMain_Initialization:	
  4538                           
  4539                           ;Main_B1.c: 173: product = &_product;
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4543  1CD5  30CC               	movlw	__product& (0+255)
  4544  1CD6  0020               	movlb	0	; select bank0
  4545  1CD7  00A0               	movwf	??_myMain_Initialization
  4546  1CD8  0820               	movf	??_myMain_Initialization,w
  4547  1CD9  0021               	movlb	1	; select bank1
  4548  1CDA  00EE               	movwf	_product^(0+128)
  4549                           
  4550                           ;Main_B1.c: 174: product->Data[20] = 209;
  4551  1CDB  30D1               	movlw	209
  4552  1CDC  0020               	movlb	0	; select bank0
  4553  1CDD  00A0               	movwf	??_myMain_Initialization
  4554  1CDE  0021               	movlb	1	; select bank1
  4555  1CDF  086E               	movf	_product^(0+128),w
  4556  1CE0  3E14               	addlw	20
  4557  1CE1  0086               	movwf	6
  4558  1CE2  3001               	movlw	1	; select bank2/3
  4559  1CE3  0087               	movwf	7
  4560  1CE4  0020               	movlb	0	; select bank0
  4561  1CE5  0820               	movf	??_myMain_Initialization,w
  4562  1CE6  0081               	movwf	1
  4563  1CE7  0008               	return
  4564  1CE8                     __end_of_myMain_Initialization:	
  4565                           
  4566                           	psect	text3
  4567  0C98                     __ptext3:	
  4568 ;; *************** function _getTemp_AD *****************
  4569 ;; Defined at:
  4570 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  channel         1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  channel         1    5[BANK0 ] unsigned char 
  4575 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;Total ram usage:        4 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    7
  4592 ;; This function calls:
  4593 ;;		_getAD
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           
  4600                           ;psect for function _getTemp_AD
  4601  0C98                     _getTemp_AD:	
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4605                           ;getTemp_AD@channel stored from wreg
  4606  0C98  0020               	movlb	0	; select bank0
  4607  0C99  00A5               	movwf	getTemp_AD@channel
  4608                           
  4609                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4610  0C9A  01A6               	clrf	getTemp_AD@ADRES
  4611  0C9B  01A7               	clrf	getTemp_AD@ADRES+1
  4612                           
  4613                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4614  0C9C  0021               	movlb	1	; select bank1
  4615  0C9D  1D58               	btfss	_Temp^(0+128),2
  4616  0C9E  0008               	return
  4617                           
  4618                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4619  0C9F  30F0               	movlw	240
  4620  0CA0  0020               	movlb	0	; select bank0
  4621  0CA1  00A4               	movwf	??_getTemp_AD
  4622  0CA2  0824               	movf	??_getTemp_AD,w
  4623  0CA3  00A0               	movwf	getAD@adcon1
  4624  0CA4  0825               	movf	getTemp_AD@channel,w
  4625  0CA5  319F  2713  318C   	fcall	_getAD
  4626  0CA8  0020               	movlb	0	; select bank0
  4627  0CA9  0821               	movf	?_getAD+1,w
  4628  0CAA  01A7               	clrf	getTemp_AD@ADRES+1
  4629  0CAB  07A7               	addwf	getTemp_AD@ADRES+1,f
  4630  0CAC  0820               	movf	?_getAD,w
  4631  0CAD  01A6               	clrf	getTemp_AD@ADRES
  4632  0CAE  07A6               	addwf	getTemp_AD@ADRES,f
  4633                           
  4634                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4635  0CAF  0827               	movf	getTemp_AD@ADRES+1,w
  4636  0CB0  0426               	iorwf	getTemp_AD@ADRES,w
  4637  0CB1  1903               	skipnz
  4638  0CB2  0008               	return
  4639                           
  4640                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4641  0CB3  0827               	movf	getTemp_AD@ADRES+1,w
  4642  0CB4  0021               	movlb	1	; select bank1
  4643  0CB5  025D               	subwf	((_Temp+1)^(0+128)+4),w
  4644  0CB6  1D03               	skipz
  4645  0CB7  2CBC               	goto	u8135
  4646  0CB8  0020               	movlb	0	; select bank0
  4647  0CB9  0826               	movf	getTemp_AD@ADRES,w
  4648  0CBA  0021               	movlb	1	; select bank1
  4649  0CBB  025C               	subwf	(_Temp^(0+128)+4),w
  4650  0CBC                     u8135:	
  4651  0CBC  1803               	skipnc
  4652  0CBD  2CC9               	goto	l8061
  4653                           
  4654                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4655  0CBE  0020               	movlb	0	; select bank0
  4656  0CBF  0827               	movf	getTemp_AD@ADRES+1,w
  4657  0CC0  0021               	movlb	1	; select bank1
  4658  0CC1  01DD               	clrf	((_Temp+1)^(0+128)+4)
  4659  0CC2  07DD               	addwf	((_Temp+1)^(0+128)+4),f
  4660  0CC3  0020               	movlb	0	; select bank0
  4661  0CC4  0826               	movf	getTemp_AD@ADRES,w
  4662  0CC5  0021               	movlb	1	; select bank1
  4663  0CC6  01DC               	clrf	(_Temp^(0+128)+4)
  4664  0CC7  07DC               	addwf	(_Temp^(0+128)+4),f
  4665                           
  4666                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4667  0CC8  0008               	return
  4668  0CC9                     l8061:	
  4669  0CC9  0020               	movlb	0	; select bank0
  4670  0CCA  0827               	movf	getTemp_AD@ADRES+1,w
  4671  0CCB  0021               	movlb	1	; select bank1
  4672  0CCC  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4673  0CCD  1D03               	skipz
  4674  0CCE  2CD3               	goto	u8145
  4675  0CCF  0020               	movlb	0	; select bank0
  4676  0CD0  0826               	movf	getTemp_AD@ADRES,w
  4677  0CD1  0021               	movlb	1	; select bank1
  4678  0CD2  025E               	subwf	(_Temp^(0+128)+6),w
  4679  0CD3                     u8145:	
  4680  0CD3  1803               	skipnc
  4681  0CD4  2CE0               	goto	l8065
  4682                           
  4683                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4684  0CD5  0020               	movlb	0	; select bank0
  4685  0CD6  0827               	movf	getTemp_AD@ADRES+1,w
  4686  0CD7  0021               	movlb	1	; select bank1
  4687  0CD8  01DF               	clrf	((_Temp+1)^(0+128)+6)
  4688  0CD9  07DF               	addwf	((_Temp+1)^(0+128)+6),f
  4689  0CDA  0020               	movlb	0	; select bank0
  4690  0CDB  0826               	movf	getTemp_AD@ADRES,w
  4691  0CDC  0021               	movlb	1	; select bank1
  4692  0CDD  01DE               	clrf	(_Temp^(0+128)+6)
  4693  0CDE  07DE               	addwf	(_Temp^(0+128)+6),f
  4694                           
  4695                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4696  0CDF  0008               	return
  4697  0CE0                     l8065:	
  4698  0CE0  0020               	movlb	0	; select bank0
  4699  0CE1  0827               	movf	getTemp_AD@ADRES+1,w
  4700  0CE2  0021               	movlb	1	; select bank1
  4701  0CE3  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4702  0CE4  1D03               	skipz
  4703  0CE5  2CEA               	goto	u8155
  4704  0CE6  0020               	movlb	0	; select bank0
  4705  0CE7  0826               	movf	getTemp_AD@ADRES,w
  4706  0CE8  0021               	movlb	1	; select bank1
  4707  0CE9  0260               	subwf	(_Temp^(0+128)+8),w
  4708  0CEA                     u8155:	
  4709  0CEA  1803               	skipnc
  4710  0CEB  2CF7               	goto	l8069
  4711                           
  4712                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4713  0CEC  0020               	movlb	0	; select bank0
  4714  0CED  0827               	movf	getTemp_AD@ADRES+1,w
  4715  0CEE  0021               	movlb	1	; select bank1
  4716  0CEF  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4717  0CF0  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4718  0CF1  0020               	movlb	0	; select bank0
  4719  0CF2  0826               	movf	getTemp_AD@ADRES,w
  4720  0CF3  0021               	movlb	1	; select bank1
  4721  0CF4  01E0               	clrf	(_Temp^(0+128)+8)
  4722  0CF5  07E0               	addwf	(_Temp^(0+128)+8),f
  4723                           
  4724                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4725  0CF6  0008               	return
  4726  0CF7                     l8069:	
  4727  0CF7  0020               	movlb	0	; select bank0
  4728  0CF8  0827               	movf	getTemp_AD@ADRES+1,w
  4729  0CF9  0021               	movlb	1	; select bank1
  4730  0CFA  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4731  0CFB  1D03               	skipz
  4732  0CFC  2D01               	goto	u8165
  4733  0CFD  0020               	movlb	0	; select bank0
  4734  0CFE  0826               	movf	getTemp_AD@ADRES,w
  4735  0CFF  0021               	movlb	1	; select bank1
  4736  0D00  0262               	subwf	(_Temp^(0+128)+10),w
  4737  0D01                     u8165:	
  4738  0D01  1803               	skipnc
  4739  0D02  2D0E               	goto	l8073
  4740                           
  4741                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4742  0D03  0020               	movlb	0	; select bank0
  4743  0D04  0827               	movf	getTemp_AD@ADRES+1,w
  4744  0D05  0021               	movlb	1	; select bank1
  4745  0D06  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4746  0D07  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4747  0D08  0020               	movlb	0	; select bank0
  4748  0D09  0826               	movf	getTemp_AD@ADRES,w
  4749  0D0A  0021               	movlb	1	; select bank1
  4750  0D0B  01E2               	clrf	(_Temp^(0+128)+10)
  4751  0D0C  07E2               	addwf	(_Temp^(0+128)+10),f
  4752                           
  4753                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4754  0D0D  0008               	return
  4755  0D0E                     l8073:	
  4756  0D0E  0020               	movlb	0	; select bank0
  4757  0D0F  0827               	movf	getTemp_AD@ADRES+1,w
  4758  0D10  0021               	movlb	1	; select bank1
  4759  0D11  0265               	subwf	((_Temp+1)^(0+128)+12),w
  4760  0D12  1D03               	skipz
  4761  0D13  2D18               	goto	u8175
  4762  0D14  0020               	movlb	0	; select bank0
  4763  0D15  0826               	movf	getTemp_AD@ADRES,w
  4764  0D16  0021               	movlb	1	; select bank1
  4765  0D17  0264               	subwf	(_Temp^(0+128)+12),w
  4766  0D18                     u8175:	
  4767  0D18  1803               	skipnc
  4768  0D19  0008               	return
  4769                           
  4770                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4771  0D1A  0020               	movlb	0	; select bank0
  4772  0D1B  0827               	movf	getTemp_AD@ADRES+1,w
  4773  0D1C  0021               	movlb	1	; select bank1
  4774  0D1D  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4775  0D1E  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4776  0D1F  0020               	movlb	0	; select bank0
  4777  0D20  0826               	movf	getTemp_AD@ADRES,w
  4778  0D21  0021               	movlb	1	; select bank1
  4779  0D22  01E4               	clrf	(_Temp^(0+128)+12)
  4780  0D23  07E4               	addwf	(_Temp^(0+128)+12),f
  4781  0D24  0008               	return
  4782  0D25                     __end_of_getTemp_AD:	
  4783                           
  4784                           	psect	text4
  4785  0994                     __ptext4:	
  4786 ;; *************** function _getLoad_AD *****************
  4787 ;; Defined at:
  4788 ;;		line 16 in file "../src/OverLoad_B1.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  channel         1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  channel         1    6[BANK0 ] unsigned char 
  4793 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4794 ;;  i               1   11[BANK0 ] unsigned char 
  4795 ;;  j               1    8[BANK0 ] unsigned char 
  4796 ;;  k               1    7[BANK0 ] unsigned char 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4807 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;Total ram usage:        8 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    7
  4813 ;; This function calls:
  4814 ;;		_getAD
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _getLoad_AD
  4822  0994                     _getLoad_AD:	
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4826                           ;getLoad_AD@channel stored from wreg
  4827  0994  0020               	movlb	0	; select bank0
  4828  0995  00A6               	movwf	getLoad_AD@channel
  4829                           
  4830                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4831  0996  01AB               	clrf	getLoad_AD@i
  4832  0997  01A8               	clrf	getLoad_AD@j
  4833  0998  01A7               	clrf	getLoad_AD@k
  4834                           
  4835                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4836  0999  01A9               	clrf	getLoad_AD@ADRES
  4837  099A  01AA               	clrf	getLoad_AD@ADRES+1
  4838                           
  4839                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4840  099B  0022               	movlb	2	; select bank2
  4841  099C  1E38               	btfss	_Load^(0+256),4
  4842  099D  0008               	return
  4843                           
  4844                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4845  099E  30F3               	movlw	243
  4846  099F  0020               	movlb	0	; select bank0
  4847  09A0  00A4               	movwf	??_getLoad_AD
  4848  09A1  0824               	movf	??_getLoad_AD,w
  4849  09A2  00A0               	movwf	getAD@adcon1
  4850  09A3  0826               	movf	getLoad_AD@channel,w
  4851  09A4  319F  2713  3189   	fcall	_getAD
  4852  09A7  0020               	movlb	0	; select bank0
  4853  09A8  0821               	movf	?_getAD+1,w
  4854  09A9  01AA               	clrf	getLoad_AD@ADRES+1
  4855  09AA  07AA               	addwf	getLoad_AD@ADRES+1,f
  4856  09AB  0820               	movf	?_getAD,w
  4857  09AC  01A9               	clrf	getLoad_AD@ADRES
  4858  09AD  07A9               	addwf	getLoad_AD@ADRES,f
  4859                           
  4860                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4861  09AE  01AB               	clrf	getLoad_AD@i
  4862  09AF  3004               	movlw	4
  4863  09B0  022B               	subwf	getLoad_AD@i,w
  4864  09B1  1803               	btfsc	3,0
  4865  09B2  29DA               	goto	l8029
  4866  09B3                     l8017:	
  4867                           
  4868                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4869  09B3  352B               	lslf	getLoad_AD@i,w
  4870  09B4  3E43               	addlw	(_Load+11)& (0+255)
  4871  09B5  0086               	movwf	6
  4872  09B6  3001               	movlw	1	; select bank2/3
  4873  09B7  0087               	movwf	7
  4874  09B8  3F40               	moviw [0]fsr1
  4875  09B9  00A4               	movwf	??_getLoad_AD
  4876  09BA  3F41               	moviw [1]fsr1
  4877  09BB  00A5               	movwf	??_getLoad_AD+1
  4878  09BC  082A               	movf	getLoad_AD@ADRES+1,w
  4879  09BD  0225               	subwf	??_getLoad_AD+1,w
  4880  09BE  1D03               	skipz
  4881  09BF  29C2               	goto	u8035
  4882  09C0  0829               	movf	getLoad_AD@ADRES,w
  4883  09C1  0224               	subwf	??_getLoad_AD,w
  4884  09C2                     u8035:	
  4885  09C2  1803               	skipnc
  4886  09C3  29D2               	goto	l8025
  4887  09C4  08A8               	movf	getLoad_AD@j,f
  4888  09C5  1D03               	skipz
  4889  09C6  29D2               	goto	l8025
  4890                           
  4891                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4892  09C7  352B               	lslf	getLoad_AD@i,w
  4893  09C8  3E43               	addlw	(_Load+11)& (0+255)
  4894  09C9  0086               	movwf	6
  4895  09CA  3001               	movlw	1	; select bank2/3
  4896  09CB  0087               	movwf	7
  4897  09CC  0829               	movf	getLoad_AD@ADRES,w
  4898  09CD  3FC0               	movwi [0]fsr1
  4899  09CE  082A               	movf	getLoad_AD@ADRES+1,w
  4900  09CF  3FC1               	movwi [1]fsr1
  4901                           
  4902                           ;OverLoad_B1.c: 25: j = 1;
  4903  09D0  01A8               	clrf	getLoad_AD@j
  4904  09D1  0AA8               	incf	getLoad_AD@j,f
  4905  09D2                     l8025:	
  4906  09D2  3001               	movlw	1
  4907  09D3  00A4               	movwf	??_getLoad_AD
  4908  09D4  0824               	movf	??_getLoad_AD,w
  4909  09D5  07AB               	addwf	getLoad_AD@i,f
  4910  09D6  3004               	movlw	4
  4911  09D7  022B               	subwf	getLoad_AD@i,w
  4912  09D8  1C03               	skipc
  4913  09D9  29B3               	goto	l8017
  4914  09DA                     l8029:	
  4915                           
  4916                           ;OverLoad_B1.c: 26: }
  4917                           ;OverLoad_B1.c: 27: }
  4918                           ;OverLoad_B1.c: 28: if (j == 0) {
  4919  09DA  08A8               	movf	getLoad_AD@j,f
  4920  09DB  1D03               	skipz
  4921  09DC  0008               	return
  4922                           
  4923                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4924  09DD  01AB               	clrf	getLoad_AD@i
  4925  09DE                     L1:	
  4926  09DE  3004               	movlw	4
  4927  09DF  022B               	subwf	getLoad_AD@i,w
  4928  09E0  1803               	btfsc	3,0
  4929  09E1  0008               	return
  4930                           
  4931                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4932  09E2  352B               	lslf	getLoad_AD@i,w
  4933  09E3  3E4D               	addlw	(_Load+21)& (0+255)
  4934  09E4  0086               	movwf	6
  4935  09E5  3001               	movlw	1	; select bank2/3
  4936  09E6  0087               	movwf	7
  4937  09E7  3F40               	moviw [0]fsr1
  4938  09E8  00A4               	movwf	??_getLoad_AD
  4939  09E9  3F41               	moviw [1]fsr1
  4940  09EA  00A5               	movwf	??_getLoad_AD+1
  4941  09EB  0825               	movf	??_getLoad_AD+1,w
  4942  09EC  022A               	subwf	getLoad_AD@ADRES+1,w
  4943  09ED  1D03               	skipz
  4944  09EE  29F1               	goto	u8085
  4945  09EF  0824               	movf	??_getLoad_AD,w
  4946  09F0  0229               	subwf	getLoad_AD@ADRES,w
  4947  09F1                     u8085:	
  4948  09F1  1803               	skipnc
  4949  09F2  2A01               	goto	l8045
  4950  09F3  08A7               	movf	getLoad_AD@k,f
  4951  09F4  1D03               	skipz
  4952  09F5  2A01               	goto	l8045
  4953                           
  4954                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4955  09F6  352B               	lslf	getLoad_AD@i,w
  4956  09F7  3E4D               	addlw	(_Load+21)& (0+255)
  4957  09F8  0086               	movwf	6
  4958  09F9  3001               	movlw	1	; select bank2/3
  4959  09FA  0087               	movwf	7
  4960  09FB  0829               	movf	getLoad_AD@ADRES,w
  4961  09FC  3FC0               	movwi [0]fsr1
  4962  09FD  082A               	movf	getLoad_AD@ADRES+1,w
  4963  09FE  3FC1               	movwi [1]fsr1
  4964                           
  4965                           ;OverLoad_B1.c: 32: k = 1;
  4966  09FF  01A7               	clrf	getLoad_AD@k
  4967  0A00  0AA7               	incf	getLoad_AD@k,f
  4968  0A01                     l8045:	
  4969  0A01  3001               	movlw	1
  4970  0A02  00A4               	movwf	??_getLoad_AD
  4971  0A03  0824               	movf	??_getLoad_AD,w
  4972  0A04  07AB               	addwf	getLoad_AD@i,f
  4973  0A05  29DE               	goto	L1
  4974  0A06                     __end_of_getLoad_AD:	
  4975                           
  4976                           	psect	text5
  4977  1F13                     __ptext5:	
  4978 ;; *************** function _getAD *****************
  4979 ;; Defined at:
  4980 ;;		line 461 in file "../src/MCU_B1.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  adcon0          1    wreg     unsigned char 
  4983 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2    0[BANK0 ] int 
  4988 ;; Registers used:
  4989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4995 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;Total ram usage:        4 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    6
  5002 ;; This function calls:
  5003 ;;		_Timeout_Counter
  5004 ;;		_set_TimeoutCleared
  5005 ;; This function is called by:
  5006 ;;		_getLoad_AD
  5007 ;;		_getTemp_AD
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _getAD
  5013  1F13                     _getAD:	
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5017                           ;getAD@adcon0 stored from wreg
  5018  1F13  0020               	movlb	0	; select bank0
  5019  1F14  00A3               	movwf	getAD@adcon0
  5020                           
  5021                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5022  1F15  0823               	movf	getAD@adcon0,w
  5023  1F16  0021               	movlb	1	; select bank1
  5024  1F17  009D               	movwf	29	;volatile
  5025                           
  5026                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5027  1F18  0020               	movlb	0	; select bank0
  5028  1F19  0820               	movf	getAD@adcon1,w
  5029  1F1A  0021               	movlb	1	; select bank1
  5030  1F1B  009E               	movwf	30	;volatile
  5031                           
  5032                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5033  1F1C  149D               	bsf	29,1	;volatile
  5034                           
  5035                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5036  1F1D  2F21               	goto	l7491
  5037  1F1E                     l7489:	
  5038                           
  5039                           ;MCU_B1.c: 466: Timeout_Counter();
  5040  1F1E  319D  2526  319F   	fcall	_Timeout_Counter
  5041  1F21                     l7491:	
  5042  1F21  0021               	movlb	1	; select bank1
  5043  1F22  1C9D               	btfss	29,1	;volatile
  5044  1F23  2F26               	goto	l7495
  5045  1F24  1D39               	btfss	(_myMain^(0+128)+10),2
  5046  1F25  2F1E               	goto	l7489
  5047  1F26                     l7495:	
  5048                           
  5049                           ;MCU_B1.c: 467: };
  5050                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5051  1F26  3188  2000         	fcall	_set_TimeoutCleared
  5052                           
  5053                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5054  1F28  0021               	movlb	1	; select bank1
  5055  1F29  081C               	movf	28,w	;volatile
  5056  1F2A  0020               	movlb	0	; select bank0
  5057  1F2B  01A1               	clrf	?_getAD+1
  5058  1F2C  07A1               	addwf	?_getAD+1,f
  5059  1F2D  0021               	movlb	1	; select bank1
  5060  1F2E  081B               	movf	27,w	;volatile
  5061  1F2F  0020               	movlb	0	; select bank0
  5062  1F30  01A0               	clrf	?_getAD
  5063  1F31  07A0               	addwf	?_getAD,f
  5064  1F32  0008               	return
  5065  1F33                     __end_of_getAD:	
  5066                           
  5067                           	psect	text6
  5068  1C77                     __ptext6:	
  5069 ;; *************** function _WDT_Main *****************
  5070 ;; Defined at:
  5071 ;;		line 1116 in file "../src/MCU_B1.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;		None
  5076 ;; Return value:  Size  Location     Type
  5077 ;;		None               void
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        1 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    6
  5092 ;; This function calls:
  5093 ;;		_WDT_Clearing
  5094 ;; This function is called by:
  5095 ;;		_main
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _WDT_Main
  5101  1C77                     _WDT_Main:	
  5102                           
  5103                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5107  1C77  0022               	movlb	2	; select bank2
  5108  1C78  1C36               	btfss	_WDT^(0+256),0
  5109  1C79  0008               	return
  5110                           
  5111                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5112  1C7A  3001               	movlw	1
  5113  1C7B  02B7               	subwf	(_WDT^(0+256)+1),f
  5114  1C7C  0837               	movf	(_WDT^(0+256)+1),w
  5115  1C7D  3AFF               	xorlw	255
  5116  1C7E  1903               	skipnz
  5117  1C7F  0008               	return
  5118                           
  5119                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5120  1C80  3064               	movlw	100
  5121  1C81  0020               	movlb	0	; select bank0
  5122  1C82  00A0               	movwf	??_WDT_Main
  5123  1C83  0820               	movf	??_WDT_Main,w
  5124  1C84  0022               	movlb	2	; select bank2
  5125  1C85  00B7               	movwf	(_WDT^(0+256)+1)
  5126                           
  5127                           ;MCU_B1.c: 1120: WDT_Clearing();
  5128  1C86  3180  2002         	fcall	_WDT_Clearing
  5129  1C88  0008               	return
  5130  1C89                     __end_of_WDT_Main:	
  5131                           
  5132                           	psect	text7
  5133  0002                     __ptext7:	
  5134 ;; *************** function _WDT_Clearing *****************
  5135 ;; Defined at:
  5136 ;;		line 1126 in file "../src/MCU_B1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		None
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;Total ram usage:        0 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    5
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_WDT_Main
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _WDT_Clearing
  5166  0002                     _WDT_Clearing:	
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _WDT_Clearing: []
  5170  0002  0064               	clrwdt	;# 
  5171  0003  0008               	return
  5172  0004                     __end_of_WDT_Clearing:	
  5173                           
  5174                           	psect	text8
  5175  1A27                     __ptext8:	
  5176 ;; *************** function _Temp_Main *****************
  5177 ;; Defined at:
  5178 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    8
  5199 ;; This function calls:
  5200 ;;		_setTemp_Main
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _Temp_Main
  5208  1A27                     _Temp_Main:	
  5209                           
  5210                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5214  1A27  3184  247F         	fcall	_setTemp_Main
  5215  1A29  0008               	return
  5216  1A2A                     __end_of_Temp_Main:	
  5217                           
  5218                           	psect	text9
  5219  047F                     __ptext9:	
  5220 ;; *************** function _setTemp_Main *****************
  5221 ;; Defined at:
  5222 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  AD              2   77[BANK0 ] int 
  5227 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5228 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5229 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5230 ;;  error           1   71[BANK0 ] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;		None               void
  5233 ;; Registers used:
  5234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;Total ram usage:       10 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    7
  5247 ;; This function calls:
  5248 ;;		___lwdiv
  5249 ;;		_getMain_All_Error_Status
  5250 ;;		_getMain_All_LightsStatus
  5251 ;;		_setBuz
  5252 ;;		_setOverTemp_ADV_Restore
  5253 ;;		_setProductData
  5254 ;; This function is called by:
  5255 ;;		_Temp_Main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _setTemp_Main
  5261  047F                     _setTemp_Main:	
  5262                           
  5263                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5267  047F  3000               	movlw	0
  5268  0480  3190  2083  3184   	fcall	_getMain_All_Error_Status
  5269  0483  0020               	movlb	0	; select bank0
  5270  0484  00E5               	movwf	??_setTemp_Main
  5271  0485  0865               	movf	??_setTemp_Main,w
  5272  0486  00E7               	movwf	setTemp_Main@error
  5273                           
  5274                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5275  0487  01E8               	clrf	setTemp_Main@SafeValue
  5276  0488  01E9               	clrf	setTemp_Main@SafeValue+1
  5277  0489  01EA               	clrf	setTemp_Main@DangerValue
  5278  048A  01EB               	clrf	setTemp_Main@DangerValue+1
  5279                           
  5280                           ;OverTemperature_B1.c: 75: int AD = 0;
  5281  048B  01ED               	clrf	setTemp_Main@AD
  5282  048C  01EE               	clrf	setTemp_Main@AD+1
  5283                           
  5284                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5285  048D  319A  22A8  3184   	fcall	_getMain_All_LightsStatus
  5286  0490  0020               	movlb	0	; select bank0
  5287  0491  00E5               	movwf	??_setTemp_Main
  5288  0492  0865               	movf	??_setTemp_Main,w
  5289  0493  00EC               	movwf	setTemp_Main@TempGO
  5290                           
  5291                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5292  0494  0021               	movlb	1	; select bank1
  5293  0495  1C58               	btfss	_Temp^(0+128),0
  5294  0496  2D60               	goto	l1796
  5295                           
  5296                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5297  0497  1958               	btfsc	_Temp^(0+128),2
  5298  0498  2CB6               	goto	l7597
  5299                           
  5300                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5301  0499  0020               	movlb	0	; select bank0
  5302  049A  086C               	movf	setTemp_Main@TempGO,w
  5303  049B  3A01               	xorlw	1
  5304  049C  1D03               	skipz
  5305  049D  2CA1               	goto	l1802
  5306  049E  0021               	movlb	1	; select bank1
  5307  049F  1CD8               	btfss	_Temp^(0+128),1
  5308  04A0  2CA4               	goto	l7589
  5309  04A1                     l1802:	
  5310  04A1  0021               	movlb	1	; select bank1
  5311  04A2  1CD8               	btfss	_Temp^(0+128),1
  5312  04A3  2CB3               	goto	l7595
  5313  04A4                     l7589:	
  5314                           
  5315                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5316  04A4  3001               	movlw	1
  5317  04A5  07D9               	addwf	(_Temp^(0+128)+1),f
  5318  04A6  3000               	movlw	0
  5319  04A7  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5320                           
  5321                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5322  04A8  3000               	movlw	0
  5323  04A9  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5324  04AA  30FA               	movlw	250
  5325  04AB  1903               	skipnz
  5326  04AC  0259               	subwf	(_Temp^(0+128)+1),w
  5327  04AD  1C03               	skipc
  5328  04AE  0008               	return
  5329                           
  5330                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5331  04AF  01D9               	clrf	(_Temp^(0+128)+1)
  5332  04B0  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5333                           
  5334                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5335  04B1  1558               	bsf	_Temp^(0+128),2
  5336                           
  5337                           ;OverTemperature_B1.c: 92: }
  5338                           ;OverTemperature_B1.c: 93: } else {
  5339  04B2  0008               	return
  5340  04B3                     l7595:	
  5341                           
  5342                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5343  04B3  01D9               	clrf	(_Temp^(0+128)+1)
  5344  04B4  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5345                           
  5346                           ;OverTemperature_B1.c: 95: }
  5347                           ;OverTemperature_B1.c: 96: } else {
  5348  04B5  0008               	return
  5349  04B6                     l7597:	
  5350                           
  5351                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5352  04B6  3001               	movlw	1
  5353  04B7  07D9               	addwf	(_Temp^(0+128)+1),f
  5354  04B8  3000               	movlw	0
  5355  04B9  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5356                           
  5357                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5358  04BA  3000               	movlw	0
  5359  04BB  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5360  04BC  3005               	movlw	5
  5361  04BD  1903               	skipnz
  5362  04BE  0259               	subwf	(_Temp^(0+128)+1),w
  5363  04BF  1C03               	skipc
  5364  04C0  0008               	return
  5365                           
  5366                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5367  04C1  01D9               	clrf	(_Temp^(0+128)+1)
  5368  04C2  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5369                           
  5370                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5371  04C3  3003               	movlw	3
  5372  04C4  0020               	movlb	0	; select bank0
  5373  04C5  00A0               	movwf	___lwdiv@divisor
  5374  04C6  3000               	movlw	0
  5375  04C7  00A1               	movwf	___lwdiv@divisor+1
  5376  04C8  300A               	movlw	10
  5377  04C9  3ED8               	addlw	_Temp& (0+255)
  5378  04CA  0086               	movwf	6
  5379  04CB  0187               	clrf	7
  5380  04CC  3008               	movlw	8
  5381  04CD  3ED8               	addlw	_Temp& (0+255)
  5382  04CE  0084               	movwf	4
  5383  04CF  0185               	clrf	5
  5384  04D0  3F00               	moviw [0]fsr0
  5385  04D1  0021               	movlb	1	; select bank1
  5386  04D2  075E               	addwf	(_Temp^(0+128)+6),w
  5387  04D3  0020               	movlb	0	; select bank0
  5388  04D4  00E5               	movwf	??_setTemp_Main
  5389  04D5  3F01               	moviw [1]fsr0
  5390  04D6  0021               	movlb	1	; select bank1
  5391  04D7  3D5F               	addwfc	((_Temp+1)^(0+128)+6),w
  5392  04D8  0020               	movlb	0	; select bank0
  5393  04D9  00E6               	movwf	??_setTemp_Main+1
  5394  04DA  3F40               	moviw [0]fsr1
  5395  04DB  0765               	addwf	??_setTemp_Main,w
  5396  04DC  00A2               	movwf	___lwdiv@dividend
  5397  04DD  3F41               	moviw [1]fsr1
  5398  04DE  3D66               	addwfc	??_setTemp_Main+1,w
  5399  04DF  00A3               	movwf	___lwdiv@dividend+1
  5400  04E0  3191  2189  3184   	fcall	___lwdiv
  5401  04E3  0020               	movlb	0	; select bank0
  5402  04E4  0821               	movf	?___lwdiv+1,w
  5403  04E5  01EE               	clrf	setTemp_Main@AD+1
  5404  04E6  07EE               	addwf	setTemp_Main@AD+1,f
  5405  04E7  0820               	movf	?___lwdiv,w
  5406  04E8  01ED               	clrf	setTemp_Main@AD
  5407  04E9  07ED               	addwf	setTemp_Main@AD,f
  5408                           
  5409                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5410  04EA  319E  2647  3184   	fcall	_setOverTemp_ADV_Restore
  5411                           
  5412                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5413  04ED  0020               	movlb	0	; select bank0
  5414  04EE  086E               	movf	setTemp_Main@AD+1,w
  5415  04EF  3A80               	xorlw	128
  5416  04F0  00E5               	movwf	??_setTemp_Main
  5417  04F1  3080               	movlw	128
  5418  04F2  0265               	subwf	??_setTemp_Main,w
  5419  04F3  1D03               	skipz
  5420  04F4  2CF7               	goto	u7325
  5421  04F5  3001               	movlw	1
  5422  04F6  026D               	subwf	setTemp_Main@AD,w
  5423  04F7                     u7325:	
  5424  04F7  1C03               	skipc
  5425  04F8  0008               	return
  5426                           
  5427                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5428  04F9  0021               	movlb	1	; select bank1
  5429  04FA  1158               	bcf	_Temp^(0+128),2
  5430                           
  5431                           ;OverTemperature_B1.c: 123: SafeValue = 400;
  5432  04FB  3090               	movlw	144
  5433  04FC  0020               	movlb	0	; select bank0
  5434  04FD  00E8               	movwf	setTemp_Main@SafeValue
  5435  04FE  3001               	movlw	1
  5436  04FF  00E9               	movwf	setTemp_Main@SafeValue+1
  5437                           
  5438                           ;OverTemperature_B1.c: 124: DangerValue = 345;
  5439  0500  3059               	movlw	89
  5440  0501  00EA               	movwf	setTemp_Main@DangerValue
  5441  0502  3001               	movlw	1
  5442  0503  00EB               	movwf	setTemp_Main@DangerValue+1
  5443                           
  5444                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5445  0504  0021               	movlb	1	; select bank1
  5446  0505  1CD8               	btfss	_Temp^(0+128),1
  5447  0506  2D25               	goto	l7627
  5448                           
  5449                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5450  0507  0020               	movlb	0	; select bank0
  5451  0508  0869               	movf	setTemp_Main@SafeValue+1,w
  5452  0509  026E               	subwf	setTemp_Main@AD+1,w
  5453  050A  1D03               	skipz
  5454  050B  2D0E               	goto	u7345
  5455  050C  0868               	movf	setTemp_Main@SafeValue,w
  5456  050D  026D               	subwf	setTemp_Main@AD,w
  5457  050E                     u7345:	
  5458  050E  1C03               	skipc
  5459  050F  2D3A               	goto	l7637
  5460                           
  5461                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5462  0510  3001               	movlw	1
  5463  0511  00E5               	movwf	??_setTemp_Main
  5464  0512  0865               	movf	??_setTemp_Main,w
  5465  0513  0021               	movlb	1	; select bank1
  5466  0514  07DB               	addwf	(_Temp^(0+128)+3),f
  5467                           
  5468                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5469  0515  3003               	movlw	3
  5470  0516  025B               	subwf	(_Temp^(0+128)+3),w
  5471  0517  1C03               	skipc
  5472  0518  2D3C               	goto	l7639
  5473                           
  5474                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5475  0519  01DB               	clrf	(_Temp^(0+128)+3)
  5476                           
  5477                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5478  051A  10D8               	bcf	_Temp^(0+128),1
  5479                           
  5480                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5481  051B  3064               	movlw	100
  5482  051C  0020               	movlb	0	; select bank0
  5483  051D  00A9               	movwf	setBuz@time
  5484  051E  3000               	movlw	0
  5485  051F  00AA               	movwf	setBuz@time+1
  5486  0520  3002               	movlw	2
  5487  0521  3194  2425  3184   	fcall	_setBuz
  5488                           
  5489                           ;OverTemperature_B1.c: 137: }
  5490                           ;OverTemperature_B1.c: 138: } else {
  5491  0524  2D3C               	goto	l7639
  5492  0525                     l7627:	
  5493                           ;OverTemperature_B1.c: 140: }
  5494                           ;OverTemperature_B1.c: 141: } else {
  5495                           
  5496                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5497                           
  5498                           
  5499                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5500  0525  0020               	movlb	0	; select bank0
  5501  0526  086E               	movf	setTemp_Main@AD+1,w
  5502  0527  026B               	subwf	setTemp_Main@DangerValue+1,w
  5503  0528  1D03               	skipz
  5504  0529  2D2C               	goto	u7365
  5505  052A  086D               	movf	setTemp_Main@AD,w
  5506  052B  026A               	subwf	setTemp_Main@DangerValue,w
  5507  052C                     u7365:	
  5508  052C  1C03               	skipc
  5509  052D  2D3A               	goto	l7637
  5510                           
  5511                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5512  052E  3001               	movlw	1
  5513  052F  00E5               	movwf	??_setTemp_Main
  5514  0530  0865               	movf	??_setTemp_Main,w
  5515  0531  0021               	movlb	1	; select bank1
  5516  0532  07DB               	addwf	(_Temp^(0+128)+3),f
  5517                           
  5518                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5519  0533  3003               	movlw	3
  5520  0534  025B               	subwf	(_Temp^(0+128)+3),w
  5521  0535  1C03               	skipc
  5522  0536  2D3C               	goto	l7639
  5523                           
  5524                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5525  0537  01DB               	clrf	(_Temp^(0+128)+3)
  5526                           
  5527                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5528  0538  14D8               	bsf	_Temp^(0+128),1
  5529                           
  5530                           ;OverTemperature_B1.c: 147: }
  5531                           ;OverTemperature_B1.c: 148: } else {
  5532  0539  2D3C               	goto	l7639
  5533  053A                     l7637:	
  5534                           
  5535                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5536  053A  0021               	movlb	1	; select bank1
  5537  053B  01DB               	clrf	(_Temp^(0+128)+3)
  5538  053C                     l7639:	
  5539                           
  5540                           ;OverTemperature_B1.c: 150: }
  5541                           ;OverTemperature_B1.c: 151: }
  5542                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5543  053C  0020               	movlb	0	; select bank0
  5544  053D  086E               	movf	setTemp_Main@AD+1,w
  5545  053E  00E5               	movwf	??_setTemp_Main
  5546  053F  0865               	movf	??_setTemp_Main,w
  5547  0540  00E2               	movwf	setProductData@value
  5548  0541  3018               	movlw	24
  5549  0542  319A  22F6  3184   	fcall	_setProductData
  5550                           
  5551                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5552  0545  0020               	movlb	0	; select bank0
  5553  0546  086D               	movf	setTemp_Main@AD,w
  5554  0547  00E5               	movwf	??_setTemp_Main
  5555  0548  0865               	movf	??_setTemp_Main,w
  5556  0549  00E2               	movwf	setProductData@value
  5557  054A  3019               	movlw	25
  5558  054B  319A  22F6  3184   	fcall	_setProductData
  5559                           
  5560                           ;OverTemperature_B1.c: 165: setProductData(2, AD >> 8);
  5561  054E  0020               	movlb	0	; select bank0
  5562  054F  086E               	movf	setTemp_Main@AD+1,w
  5563  0550  00E5               	movwf	??_setTemp_Main
  5564  0551  0865               	movf	??_setTemp_Main,w
  5565  0552  00E2               	movwf	setProductData@value
  5566  0553  3002               	movlw	2
  5567  0554  319A  22F6  3184   	fcall	_setProductData
  5568                           
  5569                           ;OverTemperature_B1.c: 166: setProductData(3, AD);
  5570  0557  0020               	movlb	0	; select bank0
  5571  0558  086D               	movf	setTemp_Main@AD,w
  5572  0559  00E5               	movwf	??_setTemp_Main
  5573  055A  0865               	movf	??_setTemp_Main,w
  5574  055B  00E2               	movwf	setProductData@value
  5575  055C  3003               	movlw	3
  5576  055D  319A  22F6         	fcall	_setProductData
  5577                           
  5578                           ;OverTemperature_B1.c: 169: }
  5579                           ;OverTemperature_B1.c: 170: }
  5580                           ;OverTemperature_B1.c: 171: }
  5581                           ;OverTemperature_B1.c: 174: } else {
  5582  055F  0008               	return
  5583  0560                     l1796:	
  5584                           
  5585                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5586  0560  1C2F               	btfss	_myMain^(0+128),0
  5587  0561  0008               	return
  5588                           
  5589                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5590  0562  1458               	bsf	_Temp^(0+128),0
  5591  0563  0008               	return
  5592  0564                     __end_of_setTemp_Main:	
  5593                           
  5594                           	psect	text10
  5595  1E47                     __ptext10:	
  5596 ;; *************** function _setOverTemp_ADV_Restore *****************
  5597 ;; Defined at:
  5598 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;		None
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  i               2    1[BANK0 ] int 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;Total ram usage:        3 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    5
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_setTemp_Main
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _setOverTemp_ADV_Restore
  5628  1E47                     _setOverTemp_ADV_Restore:	
  5629                           
  5630                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5634  1E47  0020               	movlb	0	; select bank0
  5635  1E48  01A1               	clrf	setOverTemp_ADV_Restore@i
  5636  1E49  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5637  1E4A                     L2:	
  5638  1E4A  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5639  1E4B  3A80               	xorlw	128
  5640  1E4C  00A0               	movwf	??_setOverTemp_ADV_Restore
  5641  1E4D  3080               	movlw	128
  5642  1E4E  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5643  1E4F  1D03               	skipz
  5644  1E50  2E53               	goto	u6345
  5645  1E51  3005               	movlw	5
  5646  1E52  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5647  1E53                     u6345:	
  5648  1E53  1803               	btfsc	3,0
  5649  1E54  0008               	return
  5650                           
  5651                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5652  1E55  0020               	movlb	0	; select bank0
  5653  1E56  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5654  1E57  3EDC               	addlw	(_Temp+4)& (0+255)
  5655  1E58  0086               	movwf	6
  5656  1E59  0187               	clrf	7
  5657  1E5A  3000               	movlw	0
  5658  1E5B  3FC0               	movwi [0]fsr1
  5659  1E5C  3FC1               	movwi [1]fsr1
  5660  1E5D  3001               	movlw	1
  5661  1E5E  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5662  1E5F  3000               	movlw	0
  5663  1E60  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5664  1E61  2E4A               	goto	L2
  5665  1E62                     __end_of_setOverTemp_ADV_Restore:	
  5666                           
  5667                           	psect	text11
  5668  1A24                     __ptext11:	
  5669 ;; *************** function _Temp_Initialization *****************
  5670 ;; Defined at:
  5671 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;		None               void
  5678 ;; Registers used:
  5679 ;;		status,2, status,0, pclath, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    6
  5692 ;; This function calls:
  5693 ;;		_setTemp_Initialization
  5694 ;; This function is called by:
  5695 ;;		_main
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _Temp_Initialization
  5701  1A24                     _Temp_Initialization:	
  5702                           
  5703                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5707  1A24  319A  2217         	fcall	_setTemp_Initialization
  5708  1A26  0008               	return
  5709  1A27                     __end_of_Temp_Initialization:	
  5710                           
  5711                           	psect	text12
  5712  1A17                     __ptext12:	
  5713 ;; *************** function _setTemp_Initialization *****************
  5714 ;; Defined at:
  5715 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;		None               void
  5722 ;; Registers used:
  5723 ;;		None
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;Total ram usage:        0 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    5
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_Temp_Initialization
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _setTemp_Initialization
  5745  1A17                     _setTemp_Initialization:	
  5746                           
  5747                           ;incstack = 0
  5748                           ; Regs used in _setTemp_Initialization: []
  5749  1A17  0008               	return
  5750  1A18                     __end_of_setTemp_Initialization:	
  5751                           
  5752                           	psect	text13
  5753  1A6E                     __ptext13:	
  5754 ;; *************** function _Switch_Main *****************
  5755 ;; Defined at:
  5756 ;;		line 76 in file "../src/Switch_B1.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;		None               void
  5763 ;; Registers used:
  5764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;Total ram usage:        0 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    9
  5777 ;; This function calls:
  5778 ;;		_TouchPower
  5779 ;;		_setSw_Main
  5780 ;; This function is called by:
  5781 ;;		_main
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _Switch_Main
  5787  1A6E                     _Switch_Main:	
  5788                           
  5789                           ;Switch_B1.c: 79: setSw_Main(1);
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5793  1A6E  3001               	movlw	1
  5794  1A6F  3182  2205  319A   	fcall	_setSw_Main
  5795                           
  5796                           ;Switch_B1.c: 91: TouchPower();
  5797  1A72  319D  253B         	fcall	_TouchPower
  5798  1A74  0008               	return
  5799  1A75                     __end_of_Switch_Main:	
  5800                           
  5801                           	psect	text14
  5802  0205                     __ptext14:	
  5803 ;; *************** function _setSw_Main *****************
  5804 ;; Defined at:
  5805 ;;		line 117 in file "../src/Switch_B1.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  sw              1    wreg     unsigned char 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  sw              1   17[BANK0 ] unsigned char 
  5810 ;; Return value:  Size  Location     Type
  5811 ;;		None               void
  5812 ;; Registers used:
  5813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;Total ram usage:        3 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    8
  5826 ;; This function calls:
  5827 ;;		_SwPointSelect
  5828 ;;		_getMain_All_Error_Status
  5829 ;;		_getSw_KeyStatus
  5830 ;;		_setBuz
  5831 ;;		_setDimmerLights_DimmingOn
  5832 ;;		_setDimmerLights_SwOff
  5833 ;;		_setDimmerLights_SwOn
  5834 ;;		_setRF_Learn
  5835 ;; This function is called by:
  5836 ;;		_Switch_Main
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           
  5841                           ;psect for function _setSw_Main
  5842  0205                     _setSw_Main:	
  5843                           
  5844                           ;incstack = 0
  5845                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5846                           ;setSw_Main@sw stored from wreg
  5847  0205  0020               	movlb	0	; select bank0
  5848  0206  00B1               	movwf	setSw_Main@sw
  5849                           
  5850                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5851  0207  0831               	movf	setSw_Main@sw,w
  5852  0208  319B  2362  3182   	fcall	_SwPointSelect
  5853                           
  5854                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5855  020B  0021               	movlb	1	; select bank1
  5856  020C  0852               	movf	_Sw^(0+128),w
  5857  020D  0086               	movwf	6
  5858  020E  3001               	movlw	1	; select bank2/3
  5859  020F  0087               	movwf	7
  5860  0210  1C01               	btfss	1,0
  5861  0211  2B81               	goto	l2526
  5862                           
  5863                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5864  0212  3000               	movlw	0
  5865  0213  3190  2083  3182   	fcall	_getMain_All_Error_Status
  5866  0216  3800               	iorlw	0
  5867  0217  1D03               	skipz
  5868  0218  2A37               	goto	l7755
  5869                           
  5870                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5871  0219  0021               	movlb	1	; select bank1
  5872  021A  0A52               	incf	_Sw^(0+128),w
  5873  021B  0086               	movwf	6
  5874  021C  3001               	movlw	1	; select bank2/3
  5875  021D  0087               	movwf	7
  5876  021E  1081               	bcf	1,1
  5877                           
  5878                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5879  021F  0020               	movlb	0	; select bank0
  5880  0220  0831               	movf	setSw_Main@sw,w
  5881  0221  319C  241E  3182   	fcall	_getSw_KeyStatus
  5882  0224  3A01               	xorlw	1
  5883  0225  3000               	movlw	0
  5884  0226  1903               	skipnz
  5885  0227  3001               	movlw	1
  5886  0228  0020               	movlb	0	; select bank0
  5887  0229  00AF               	movwf	??_setSw_Main
  5888  022A  0021               	movlb	1	; select bank1
  5889  022B  0852               	movf	_Sw^(0+128),w
  5890  022C  0086               	movwf	6
  5891  022D  3001               	movlw	1	; select bank2/3
  5892  022E  0087               	movwf	7
  5893  022F  0020               	movlb	0	; select bank0
  5894  0230  0DAF               	rlf	??_setSw_Main,f
  5895  0231  0801               	movf	1,w
  5896  0232  062F               	xorwf	??_setSw_Main,w
  5897  0233  39FD               	andlw	-3
  5898  0234  062F               	xorwf	??_setSw_Main,w
  5899  0235  0081               	movwf	1
  5900                           
  5901                           ;Switch_B1.c: 124: } else {
  5902  0236  2A4D               	goto	l2528
  5903  0237                     l7755:	
  5904                           
  5905                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5906  0237  0021               	movlb	1	; select bank1
  5907  0238  0A52               	incf	_Sw^(0+128),w
  5908  0239  0086               	movwf	6
  5909  023A  3001               	movlw	1	; select bank2/3
  5910  023B  0087               	movwf	7
  5911  023C  1881               	btfsc	1,1
  5912  023D  2A4D               	goto	l2528
  5913                           
  5914                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5915  023E  0A52               	incf	_Sw^(0+128),w
  5916  023F  0086               	movwf	6
  5917  0240  3001               	movlw	1	; select bank2/3
  5918  0241  0087               	movwf	7
  5919  0242  1481               	bsf	1,1
  5920                           
  5921                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5922  0243  0852               	movf	_Sw^(0+128),w
  5923  0244  0086               	movwf	6
  5924  0245  3001               	movlw	1	; select bank2/3
  5925  0246  0087               	movwf	7
  5926  0247  1081               	bcf	1,1
  5927                           
  5928                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5929  0248  0852               	movf	_Sw^(0+128),w
  5930  0249  0086               	movwf	6
  5931  024A  3001               	movlw	1	; select bank2/3
  5932  024B  0087               	movwf	7
  5933  024C  1501               	bsf	1,2
  5934  024D                     l2528:	
  5935                           
  5936                           ;Switch_B1.c: 130: }
  5937                           ;Switch_B1.c: 131: }
  5938                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5939  024D  0021               	movlb	1	; select bank1
  5940  024E  0852               	movf	_Sw^(0+128),w
  5941  024F  0086               	movwf	6
  5942  0250  3001               	movlw	1	; select bank2/3
  5943  0251  0087               	movwf	7
  5944  0252  1C81               	btfss	1,1
  5945  0253  2B29               	goto	l7805
  5946                           
  5947                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5948  0254  0852               	movf	_Sw^(0+128),w
  5949  0255  0086               	movwf	6
  5950  0256  3001               	movlw	1	; select bank2/3
  5951  0257  0087               	movwf	7
  5952  0258  1901               	btfsc	1,2
  5953  0259  2A80               	goto	l7771
  5954                           
  5955                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5956  025A  3001               	movlw	1
  5957  025B  0020               	movlb	0	; select bank0
  5958  025C  00AF               	movwf	??_setSw_Main
  5959  025D  0021               	movlb	1	; select bank1
  5960  025E  0852               	movf	_Sw^(0+128),w
  5961  025F  3E02               	addlw	2
  5962  0260  0086               	movwf	6
  5963  0261  3001               	movlw	1	; select bank2/3
  5964  0262  0087               	movwf	7
  5965  0263  0020               	movlb	0	; select bank0
  5966  0264  082F               	movf	??_setSw_Main,w
  5967  0265  0781               	addwf	1,f
  5968                           
  5969                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5970  0266  0021               	movlb	1	; select bank1
  5971  0267  0852               	movf	_Sw^(0+128),w
  5972  0268  3E02               	addlw	2
  5973  0269  0086               	movwf	6
  5974  026A  3001               	movlw	1	; select bank2/3
  5975  026B  0087               	movwf	7
  5976  026C  3003               	movlw	3
  5977  026D  0201               	subwf	1,w
  5978  026E  1C03               	skipc
  5979  026F  0008               	return
  5980                           
  5981                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5982  0270  0852               	movf	_Sw^(0+128),w
  5983  0271  3E02               	addlw	2
  5984  0272  0086               	movwf	6
  5985  0273  3001               	movlw	1	; select bank2/3
  5986  0274  0087               	movwf	7
  5987  0275  0181               	clrf	1
  5988                           
  5989                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5990  0276  0852               	movf	_Sw^(0+128),w
  5991  0277  0086               	movwf	6
  5992  0278  3001               	movlw	1	; select bank2/3
  5993  0279  0087               	movwf	7
  5994  027A  1501               	bsf	1,2
  5995                           
  5996                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5997  027B  0020               	movlb	0	; select bank0
  5998  027C  0831               	movf	setSw_Main@sw,w
  5999  027D  3191  211E         	fcall	_setDimmerLights_SwOn
  6000                           
  6001                           ;Switch_B1.c: 146: }
  6002                           ;Switch_B1.c: 147: } else {
  6003  027F  0008               	return
  6004  0280                     l7771:	
  6005                           
  6006                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  6007  0280  0021               	movlb	1	; select bank1
  6008  0281  0852               	movf	_Sw^(0+128),w
  6009  0282  0086               	movwf	6
  6010  0283  3001               	movlw	1	; select bank2/3
  6011  0284  0087               	movwf	7
  6012  0285  1981               	btfsc	1,3
  6013  0286  2AB5               	goto	l7781
  6014                           
  6015                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  6016  0287  0852               	movf	_Sw^(0+128),w
  6017  0288  3E03               	addlw	3
  6018  0289  0086               	movwf	6
  6019  028A  3001               	movlw	1	; select bank2/3
  6020  028B  0087               	movwf	7
  6021  028C  3001               	movlw	1
  6022  028D  0781               	addwf	1,f
  6023  028E  3141               	addfsr 1,1
  6024  028F  1803               	skipnc
  6025  0290  0A81               	incf	1,f
  6026                           
  6027                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  6028  0291  0852               	movf	_Sw^(0+128),w
  6029  0292  3E03               	addlw	3
  6030  0293  0086               	movwf	6
  6031  0294  3001               	movlw	1	; select bank2/3
  6032  0295  0087               	movwf	7
  6033  0296  3F40               	moviw [0]fsr1
  6034  0297  0020               	movlb	0	; select bank0
  6035  0298  00AF               	movwf	??_setSw_Main
  6036  0299  3F41               	moviw [1]fsr1
  6037  029A  00B0               	movwf	??_setSw_Main+1
  6038  029B  3000               	movlw	0
  6039  029C  0230               	subwf	??_setSw_Main+1,w
  6040  029D  304B               	movlw	75
  6041  029E  1903               	skipnz
  6042  029F  022F               	subwf	??_setSw_Main,w
  6043  02A0  1C03               	skipc
  6044  02A1  0008               	return
  6045                           
  6046                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  6047  02A2  0021               	movlb	1	; select bank1
  6048  02A3  0852               	movf	_Sw^(0+128),w
  6049  02A4  3E03               	addlw	3
  6050  02A5  0086               	movwf	6
  6051  02A6  3001               	movlw	1	; select bank2/3
  6052  02A7  0087               	movwf	7
  6053  02A8  3000               	movlw	0
  6054  02A9  3FC0               	movwi [0]fsr1
  6055  02AA  3FC1               	movwi [1]fsr1
  6056                           
  6057                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  6058  02AB  0852               	movf	_Sw^(0+128),w
  6059  02AC  0086               	movwf	6
  6060  02AD  3001               	movlw	1	; select bank2/3
  6061  02AE  0087               	movwf	7
  6062  02AF  1581               	bsf	1,3
  6063                           
  6064                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  6065  02B0  0020               	movlb	0	; select bank0
  6066  02B1  0831               	movf	setSw_Main@sw,w
  6067  02B2  3187  27D8         	fcall	_setDimmerLights_DimmingOn
  6068                           
  6069                           ;Switch_B1.c: 161: }
  6070                           ;Switch_B1.c: 162: } else {
  6071  02B4  0008               	return
  6072  02B5                     l7781:	
  6073                           
  6074                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  6075  02B5  0021               	movlb	1	; select bank1
  6076  02B6  0852               	movf	_Sw^(0+128),w
  6077  02B7  0086               	movwf	6
  6078  02B8  3001               	movlw	1	; select bank2/3
  6079  02B9  0087               	movwf	7
  6080  02BA  1A01               	btfsc	1,4
  6081  02BB  2AF5               	goto	l7795
  6082                           
  6083                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  6084  02BC  0852               	movf	_Sw^(0+128),w
  6085  02BD  3E05               	addlw	5
  6086  02BE  0086               	movwf	6
  6087  02BF  3001               	movlw	1	; select bank2/3
  6088  02C0  0087               	movwf	7
  6089  02C1  3001               	movlw	1
  6090  02C2  0781               	addwf	1,f
  6091  02C3  3141               	addfsr 1,1
  6092  02C4  1803               	skipnc
  6093  02C5  0A81               	incf	1,f
  6094                           
  6095                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  6096  02C6  0852               	movf	_Sw^(0+128),w
  6097  02C7  3E05               	addlw	5
  6098  02C8  0086               	movwf	6
  6099  02C9  3001               	movlw	1	; select bank2/3
  6100  02CA  0087               	movwf	7
  6101  02CB  3F40               	moviw [0]fsr1
  6102  02CC  0020               	movlb	0	; select bank0
  6103  02CD  00AF               	movwf	??_setSw_Main
  6104  02CE  3F41               	moviw [1]fsr1
  6105  02CF  00B0               	movwf	??_setSw_Main+1
  6106  02D0  3000               	movlw	0
  6107  02D1  0230               	subwf	??_setSw_Main+1,w
  6108  02D2  304B               	movlw	75
  6109  02D3  1903               	skipnz
  6110  02D4  022F               	subwf	??_setSw_Main,w
  6111  02D5  1C03               	skipc
  6112  02D6  0008               	return
  6113                           
  6114                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  6115  02D7  0021               	movlb	1	; select bank1
  6116  02D8  0852               	movf	_Sw^(0+128),w
  6117  02D9  3E05               	addlw	5
  6118  02DA  0086               	movwf	6
  6119  02DB  3001               	movlw	1	; select bank2/3
  6120  02DC  0087               	movwf	7
  6121  02DD  3000               	movlw	0
  6122  02DE  3FC0               	movwi [0]fsr1
  6123  02DF  3FC1               	movwi [1]fsr1
  6124                           
  6125                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  6126  02E0  0852               	movf	_Sw^(0+128),w
  6127  02E1  0086               	movwf	6
  6128  02E2  3001               	movlw	1	; select bank2/3
  6129  02E3  0087               	movwf	7
  6130  02E4  1601               	bsf	1,4
  6131                           
  6132                           ;Switch_B1.c: 171: setRF_Learn(1);
  6133  02E5  3001               	movlw	1
  6134  02E6  319C  24E8  3182   	fcall	_setRF_Learn
  6135                           
  6136                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  6137  02E9  0021               	movlb	1	; select bank1
  6138  02EA  1EAF               	btfss	_myMain^(0+128),5
  6139  02EB  0008               	return
  6140                           
  6141                           ;Switch_B1.c: 173: setBuz(2, 100);
  6142  02EC  3064               	movlw	100
  6143  02ED  0020               	movlb	0	; select bank0
  6144  02EE  00A9               	movwf	setBuz@time
  6145  02EF  3000               	movlw	0
  6146  02F0  00AA               	movwf	setBuz@time+1
  6147  02F1  3002               	movlw	2
  6148  02F2  3194  2425         	fcall	_setBuz
  6149                           
  6150                           ;Switch_B1.c: 174: }
  6151                           ;Switch_B1.c: 178: }
  6152                           ;Switch_B1.c: 179: } else {
  6153  02F4  0008               	return
  6154  02F5                     l7795:	
  6155                           
  6156                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  6157  02F5  0021               	movlb	1	; select bank1
  6158  02F6  0852               	movf	_Sw^(0+128),w
  6159  02F7  0086               	movwf	6
  6160  02F8  3001               	movlw	1	; select bank2/3
  6161  02F9  0087               	movwf	7
  6162  02FA  1A81               	btfsc	1,5
  6163  02FB  0008               	return
  6164                           
  6165                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  6166  02FC  0852               	movf	_Sw^(0+128),w
  6167  02FD  3E07               	addlw	7
  6168  02FE  0086               	movwf	6
  6169  02FF  3001               	movlw	1	; select bank2/3
  6170  0300  0087               	movwf	7
  6171  0301  3001               	movlw	1
  6172  0302  0781               	addwf	1,f
  6173  0303  3141               	addfsr 1,1
  6174  0304  1803               	skipnc
  6175  0305  0A81               	incf	1,f
  6176                           
  6177                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  6178  0306  0852               	movf	_Sw^(0+128),w
  6179  0307  3E07               	addlw	7
  6180  0308  0086               	movwf	6
  6181  0309  3001               	movlw	1	; select bank2/3
  6182  030A  0087               	movwf	7
  6183  030B  3F40               	moviw [0]fsr1
  6184  030C  0020               	movlb	0	; select bank0
  6185  030D  00AF               	movwf	??_setSw_Main
  6186  030E  3F41               	moviw [1]fsr1
  6187  030F  00B0               	movwf	??_setSw_Main+1
  6188  0310  3000               	movlw	0
  6189  0311  0230               	subwf	??_setSw_Main+1,w
  6190  0312  3096               	movlw	150
  6191  0313  1903               	skipnz
  6192  0314  022F               	subwf	??_setSw_Main,w
  6193  0315  1C03               	skipc
  6194  0316  0008               	return
  6195                           
  6196                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  6197  0317  0021               	movlb	1	; select bank1
  6198  0318  0852               	movf	_Sw^(0+128),w
  6199  0319  3E07               	addlw	7
  6200  031A  0086               	movwf	6
  6201  031B  3001               	movlw	1	; select bank2/3
  6202  031C  0087               	movwf	7
  6203  031D  3000               	movlw	0
  6204  031E  3FC0               	movwi [0]fsr1
  6205  031F  3FC1               	movwi [1]fsr1
  6206                           
  6207                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  6208  0320  0852               	movf	_Sw^(0+128),w
  6209  0321  0086               	movwf	6
  6210  0322  3001               	movlw	1	; select bank2/3
  6211  0323  0087               	movwf	7
  6212  0324  1681               	bsf	1,5
  6213                           
  6214                           ;Switch_B1.c: 187: setRF_Learn(0);
  6215  0325  3000               	movlw	0
  6216  0326  319C  24E8         	fcall	_setRF_Learn
  6217                           
  6218                           ;Switch_B1.c: 190: }
  6219                           ;Switch_B1.c: 191: }
  6220                           ;Switch_B1.c: 192: }
  6221                           ;Switch_B1.c: 194: }
  6222                           ;Switch_B1.c: 195: }
  6223                           ;Switch_B1.c: 196: } else {
  6224  0328  0008               	return
  6225  0329                     l7805:	
  6226                           
  6227                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6228  0329  0021               	movlb	1	; select bank1
  6229  032A  0852               	movf	_Sw^(0+128),w
  6230  032B  0086               	movwf	6
  6231  032C  3001               	movlw	1	; select bank2/3
  6232  032D  0087               	movwf	7
  6233  032E  1D01               	btfss	1,2
  6234  032F  0008               	return
  6235                           
  6236                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6237  0330  3001               	movlw	1
  6238  0331  0020               	movlb	0	; select bank0
  6239  0332  00AF               	movwf	??_setSw_Main
  6240  0333  0021               	movlb	1	; select bank1
  6241  0334  0852               	movf	_Sw^(0+128),w
  6242  0335  3E02               	addlw	2
  6243  0336  0086               	movwf	6
  6244  0337  3001               	movlw	1	; select bank2/3
  6245  0338  0087               	movwf	7
  6246  0339  0020               	movlb	0	; select bank0
  6247  033A  082F               	movf	??_setSw_Main,w
  6248  033B  0781               	addwf	1,f
  6249                           
  6250                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6251  033C  0021               	movlb	1	; select bank1
  6252  033D  0852               	movf	_Sw^(0+128),w
  6253  033E  3E02               	addlw	2
  6254  033F  0086               	movwf	6
  6255  0340  3001               	movlw	1	; select bank2/3
  6256  0341  0087               	movwf	7
  6257  0342  3003               	movlw	3
  6258  0343  0201               	subwf	1,w
  6259  0344  1C03               	skipc
  6260  0345  0008               	return
  6261                           
  6262                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6263  0346  0852               	movf	_Sw^(0+128),w
  6264  0347  3E02               	addlw	2
  6265  0348  0086               	movwf	6
  6266  0349  3001               	movlw	1	; select bank2/3
  6267  034A  0087               	movwf	7
  6268  034B  0181               	clrf	1
  6269                           
  6270                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6271  034C  0852               	movf	_Sw^(0+128),w
  6272  034D  0086               	movwf	6
  6273  034E  3001               	movlw	1	; select bank2/3
  6274  034F  0087               	movwf	7
  6275  0350  1101               	bcf	1,2
  6276                           
  6277                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6278  0351  0852               	movf	_Sw^(0+128),w
  6279  0352  3E03               	addlw	3
  6280  0353  0086               	movwf	6
  6281  0354  3001               	movlw	1	; select bank2/3
  6282  0355  0087               	movwf	7
  6283  0356  3000               	movlw	0
  6284  0357  3FC0               	movwi [0]fsr1
  6285  0358  3FC1               	movwi [1]fsr1
  6286                           
  6287                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6288  0359  0852               	movf	_Sw^(0+128),w
  6289  035A  0086               	movwf	6
  6290  035B  3001               	movlw	1	; select bank2/3
  6291  035C  0087               	movwf	7
  6292  035D  1181               	bcf	1,3
  6293                           
  6294                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6295  035E  0852               	movf	_Sw^(0+128),w
  6296  035F  0086               	movwf	6
  6297  0360  3001               	movlw	1	; select bank2/3
  6298  0361  0087               	movwf	7
  6299  0362  1201               	bcf	1,4
  6300                           
  6301                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6302  0363  0852               	movf	_Sw^(0+128),w
  6303  0364  0086               	movwf	6
  6304  0365  3001               	movlw	1	; select bank2/3
  6305  0366  0087               	movwf	7
  6306  0367  1281               	bcf	1,5
  6307                           
  6308                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6309  0368  0852               	movf	_Sw^(0+128),w
  6310  0369  3E05               	addlw	5
  6311  036A  0086               	movwf	6
  6312  036B  3001               	movlw	1	; select bank2/3
  6313  036C  0087               	movwf	7
  6314  036D  3000               	movlw	0
  6315  036E  3FC0               	movwi [0]fsr1
  6316  036F  3FC1               	movwi [1]fsr1
  6317                           
  6318                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6319  0370  0852               	movf	_Sw^(0+128),w
  6320  0371  3E07               	addlw	7
  6321  0372  0086               	movwf	6
  6322  0373  3001               	movlw	1	; select bank2/3
  6323  0374  0087               	movwf	7
  6324  0375  3000               	movlw	0
  6325  0376  3FC0               	movwi [0]fsr1
  6326  0377  3FC1               	movwi [1]fsr1
  6327                           
  6328                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6329  0378  0020               	movlb	0	; select bank0
  6330  0379  0831               	movf	setSw_Main@sw,w
  6331  037A  3191  21C0  3182   	fcall	_setDimmerLights_SwOff
  6332                           
  6333                           ;Switch_B1.c: 219: setRF_Learn(0);
  6334  037D  3000               	movlw	0
  6335  037E  319C  24E8         	fcall	_setRF_Learn
  6336                           
  6337                           ;Switch_B1.c: 221: }
  6338                           ;Switch_B1.c: 222: }
  6339                           ;Switch_B1.c: 223: }
  6340                           ;Switch_B1.c: 224: } else {
  6341  0380  0008               	return
  6342  0381                     l2526:	
  6343                           
  6344                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6345  0381  1C2F               	btfss	_myMain^(0+128),0
  6346  0382  0008               	return
  6347                           
  6348                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6349  0383  0852               	movf	_Sw^(0+128),w
  6350  0384  0086               	movwf	6
  6351  0385  3001               	movlw	1	; select bank2/3
  6352  0386  0087               	movwf	7
  6353  0387  1401               	bsf	1,0
  6354  0388  0008               	return
  6355  0389                     __end_of_setSw_Main:	
  6356                           
  6357                           	psect	text15
  6358  1CE8                     __ptext15:	
  6359 ;; *************** function _setRF_Learn *****************
  6360 ;; Defined at:
  6361 ;;		line 33 in file "../src/RF_Control_B1.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  command         1    wreg     unsigned char 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  command         1    1[BANK0 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;		None               void
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;Total ram usage:        2 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    5
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_setSw_Main
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _setRF_Learn
  6391  1CE8                     _setRF_Learn:	
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6395                           ;setRF_Learn@command stored from wreg
  6396  1CE8  0020               	movlb	0	; select bank0
  6397  1CE9  00A1               	movwf	setRF_Learn@command
  6398                           
  6399                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6400  1CEA  0821               	movf	setRF_Learn@command,w
  6401  1CEB  3A01               	xorlw	1
  6402  1CEC  3000               	movlw	0
  6403  1CED  1903               	skipnz
  6404  1CEE  3001               	movlw	1
  6405  1CEF  00A0               	movwf	??_setRF_Learn
  6406  1CF0  0EA0               	swapf	??_setRF_Learn,f
  6407  1CF1  0DA0               	rlf	??_setRF_Learn,f
  6408  1CF2  0DA0               	rlf	??_setRF_Learn,f
  6409  1CF3  0021               	movlb	1	; select bank1
  6410  1CF4  0820               	movf	_RF1^(0+128),w
  6411  1CF5  0020               	movlb	0	; select bank0
  6412  1CF6  0620               	xorwf	??_setRF_Learn,w
  6413  1CF7  39BF               	andlw	-65
  6414  1CF8  0620               	xorwf	??_setRF_Learn,w
  6415  1CF9  0021               	movlb	1	; select bank1
  6416  1CFA  00A0               	movwf	_RF1^(0+128)
  6417  1CFB  0008               	return
  6418  1CFC                     __end_of_setRF_Learn:	
  6419                           
  6420                           	psect	text16
  6421  07D8                     __ptext16:	
  6422 ;; *************** function _setDimmerLights_DimmingOn *****************
  6423 ;; Defined at:
  6424 ;;		line 760 in file "../src/Dimmer_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  sw              1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  sw              1    2[BANK0 ] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;		None               void
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;Total ram usage:        1 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    6
  6445 ;; This function calls:
  6446 ;;		_DimmerLights_SelectPointer
  6447 ;; This function is called by:
  6448 ;;		_setSw_Main
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           
  6453                           ;psect for function _setDimmerLights_DimmingOn
  6454  07D8                     _setDimmerLights_DimmingOn:	
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6458                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6459  07D8  0020               	movlb	0	; select bank0
  6460  07D9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6461                           
  6462                           ;Dimmer_B1.c: 766: DimmerLights_SelectPointer(sw);
  6463  07DA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6464  07DB  319A  22EA  3187   	fcall	_DimmerLights_SelectPointer
  6465                           
  6466                           ;Dimmer_B1.c: 767: if (DimmerLights->Trigger == 0) {
  6467  07DE  0021               	movlb	1	; select bank1
  6468  07DF  084C               	movf	_DimmerLights^(0+128),w
  6469  07E0  0086               	movwf	6
  6470  07E1  3001               	movlw	1	; select bank2/3
  6471  07E2  0087               	movwf	7
  6472  07E3  1881               	btfsc	1,1
  6473  07E4  0008               	return
  6474                           
  6475                           ;Dimmer_B1.c: 768: if (DimmerLights->SwFlag == 1) {
  6476  07E5  084C               	movf	_DimmerLights^(0+128),w
  6477  07E6  0086               	movwf	6
  6478  07E7  3001               	movlw	1	; select bank2/3
  6479  07E8  0087               	movwf	7
  6480  07E9  1C01               	btfss	1,0
  6481  07EA  0008               	return
  6482                           
  6483                           ;Dimmer_B1.c: 769: DimmerLights->Status = 1;
  6484  07EB  0A4C               	incf	_DimmerLights^(0+128),w
  6485  07EC  0086               	movwf	6
  6486  07ED  3001               	movlw	1	; select bank2/3
  6487  07EE  0087               	movwf	7
  6488  07EF  1401               	bsf	1,0
  6489                           
  6490                           ;Dimmer_B1.c: 771: DimmerLights->DimmingSwFlag = 1;
  6491  07F0  084C               	movf	_DimmerLights^(0+128),w
  6492  07F1  0086               	movwf	6
  6493  07F2  3001               	movlw	1	; select bank2/3
  6494  07F3  0087               	movwf	7
  6495  07F4  1581               	bsf	1,3
  6496                           
  6497                           ;Dimmer_B1.c: 772: DimmerLights->DimmingTrigger = 1;
  6498  07F5  084C               	movf	_DimmerLights^(0+128),w
  6499  07F6  0086               	movwf	6
  6500  07F7  3001               	movlw	1	; select bank2/3
  6501  07F8  0087               	movwf	7
  6502  07F9  1601               	bsf	1,4
  6503                           
  6504                           ;Dimmer_B1.c: 773: DimmerLights->DimmingSwitch = 1;
  6505  07FA  084C               	movf	_DimmerLights^(0+128),w
  6506  07FB  0086               	movwf	6
  6507  07FC  3001               	movlw	1	; select bank2/3
  6508  07FD  0087               	movwf	7
  6509  07FE  1681               	bsf	1,5
  6510  07FF  0008               	return
  6511  0800                     __end_of_setDimmerLights_DimmingOn:	
  6512                           
  6513                           	psect	text17
  6514  1C1E                     __ptext17:	
  6515 ;; *************** function _getSw_KeyStatus *****************
  6516 ;; Defined at:
  6517 ;;		line 237 in file "../src/Switch_B1.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  sw              1    wreg     unsigned char 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  sw              1    0[COMMON] unsigned char 
  6522 ;;  status          1    1[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      unsigned char 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;Total ram usage:        3 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_setSw_Main
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           
  6547                           ;psect for function _getSw_KeyStatus
  6548  1C1E                     _getSw_KeyStatus:	
  6549                           
  6550                           ;Switch_B1.c: 238: char status = 0;
  6551                           
  6552                           ;incstack = 0
  6553                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6554  1C1E  0020               	movlb	0	; select bank0
  6555  1C1F  01A1               	clrf	getSw_KeyStatus@status
  6556                           
  6557                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6558  1C20  01A2               	clrf	_getSw_KeyStatus$6461
  6559  1C21  0AA2               	incf	_getSw_KeyStatus$6461,f
  6560  1C22  1F0C               	btfss	12,6	;volatile
  6561  1C23  1A0C               	btfsc	12,4	;volatile
  6562  1C24  2C29               	goto	l7177
  6563  1C25  1C0C               	btfss	12,0	;volatile
  6564  1C26  1B8C               	btfsc	12,7	;volatile
  6565  1C27  2C29               	goto	l7177
  6566  1C28  01A2               	clrf	_getSw_KeyStatus$6461
  6567  1C29                     l7177:	
  6568  1C29  0822               	movf	_getSw_KeyStatus$6461,w
  6569  1C2A  00A0               	movwf	??_getSw_KeyStatus
  6570  1C2B  0820               	movf	??_getSw_KeyStatus,w
  6571  1C2C  00A1               	movwf	getSw_KeyStatus@status
  6572                           
  6573                           ;Switch_B1.c: 275: return status;
  6574  1C2D  0821               	movf	getSw_KeyStatus@status,w
  6575  1C2E  0008               	return
  6576  1C2F                     __end_of_getSw_KeyStatus:	
  6577                           
  6578                           	psect	text18
  6579  1B62                     __ptext18:	
  6580 ;; *************** function _SwPointSelect *****************
  6581 ;; Defined at:
  6582 ;;		line 25 in file "../src/Switch_B1.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  sw              1    wreg     unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  sw              1    1[BANK0 ] unsigned char 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;Total ram usage:        2 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    5
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_setSw_Main
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _SwPointSelect
  6612  1B62                     _SwPointSelect:	
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in _SwPointSelect: [wreg]
  6616                           ;SwPointSelect@sw stored from wreg
  6617  1B62  0020               	movlb	0	; select bank0
  6618  1B63  00A1               	movwf	SwPointSelect@sw
  6619                           
  6620                           ;Switch_B1.c: 28: if (sw == 1) {
  6621  1B64  0821               	movf	SwPointSelect@sw,w
  6622  1B65  3A01               	xorlw	1
  6623  1B66  1D03               	skipz
  6624  1B67  0008               	return
  6625                           
  6626                           ;Switch_B1.c: 29: Sw = &Sw1;
  6627  1B68  30BE               	movlw	_Sw1& (0+255)
  6628  1B69  00A0               	movwf	??_SwPointSelect
  6629  1B6A  0820               	movf	??_SwPointSelect,w
  6630  1B6B  0021               	movlb	1	; select bank1
  6631  1B6C  00D2               	movwf	_Sw^(0+128)
  6632  1B6D  0008               	return
  6633  1B6E                     __end_of_SwPointSelect:	
  6634                           
  6635                           	psect	text19
  6636  1D3B                     __ptext19:	
  6637 ;; *************** function _TouchPower *****************
  6638 ;; Defined at:
  6639 ;;		line 10 in file "../src/Switch_B1.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;		None
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;		None               void
  6646 ;; Registers used:
  6647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:        0 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    6
  6660 ;; This function calls:
  6661 ;;		_Timeout_Counter
  6662 ;;		_set_TimeoutCleared
  6663 ;; This function is called by:
  6664 ;;		_Switch_Main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _TouchPower
  6670  1D3B                     _TouchPower:	
  6671                           
  6672                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6676  1D3B  0021               	movlb	1	; select bank1
  6677  1D3C  1C2F               	btfss	_myMain^(0+128),0
  6678  1D3D  0008               	return
  6679                           
  6680                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6681  1D3E  0020               	movlb	0	; select bank0
  6682  1D3F  180D               	btfsc	13,0	;volatile
  6683  1D40  0008               	return
  6684  1D41  2D47               	goto	l7737
  6685  1D42                     l2506:	
  6686                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6687                           
  6688                           
  6689                           ;Switch_B1.c: 14: RB0 = 1;
  6690  1D42  0020               	movlb	0	; select bank0
  6691  1D43  140D               	bsf	13,0	;volatile
  6692                           
  6693                           ;Switch_B1.c: 15: Timeout_Counter();
  6694  1D44  319D  2526  319D   	fcall	_Timeout_Counter
  6695  1D47                     l7737:	
  6696  1D47  0020               	movlb	0	; select bank0
  6697  1D48  180D               	btfsc	13,0	;volatile
  6698  1D49  2D4D               	goto	l7741
  6699  1D4A  0021               	movlb	1	; select bank1
  6700  1D4B  1D39               	btfss	(_myMain^(0+128)+10),2
  6701  1D4C  2D42               	goto	l2506
  6702  1D4D                     l7741:	
  6703                           
  6704                           ;Switch_B1.c: 16: }
  6705                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6706  1D4D  3188  2000         	fcall	_set_TimeoutCleared
  6707  1D4F  0008               	return
  6708  1D50                     __end_of_TouchPower:	
  6709                           
  6710                           	psect	text20
  6711  0800                     __ptext20:	
  6712 ;; *************** function _set_TimeoutCleared *****************
  6713 ;; Defined at:
  6714 ;;		line 281 in file "../src/Main_B1.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;		None               void
  6721 ;; Registers used:
  6722 ;;		status,2
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    5
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_getAD
  6739 ;;		_TouchPower
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _set_TimeoutCleared
  6745  0800                     _set_TimeoutCleared:	
  6746                           
  6747                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _set_TimeoutCleared: [status,2]
  6751  0800  0021               	movlb	1	; select bank1
  6752  0801  1139               	bcf	(_myMain^(0+128)+10),2
  6753                           
  6754                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6755  0802  01BA               	clrf	(_myMain^(0+128)+11)
  6756  0803  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6757  0804  0008               	return
  6758  0805                     __end_of_set_TimeoutCleared:	
  6759                           
  6760                           	psect	text21
  6761  1D26                     __ptext21:	
  6762 ;; *************** function _Timeout_Counter *****************
  6763 ;; Defined at:
  6764 ;;		line 272 in file "../src/Main_B1.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;		None
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        0 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    5
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_getAD
  6789 ;;		_TouchPower
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           
  6794                           ;psect for function _Timeout_Counter
  6795  1D26                     _Timeout_Counter:	
  6796                           
  6797                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6801  1D26  3001               	movlw	1
  6802  1D27  0021               	movlb	1	; select bank1
  6803  1D28  07BA               	addwf	(_myMain^(0+128)+11),f
  6804  1D29  3000               	movlw	0
  6805  1D2A  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6806                           
  6807                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6808  1D2B  300B               	movlw	11
  6809  1D2C  3EAF               	addlw	_myMain& (0+255)
  6810  1D2D  0086               	movwf	6
  6811  1D2E  0187               	clrf	7
  6812  1D2F  3F40               	moviw [0]fsr1
  6813  1D30  3AA8               	xorlw	168
  6814  1D31  1D03               	skipz
  6815  1D32  2D35               	goto	u6315
  6816  1D33  3F41               	moviw [1]fsr1
  6817  1D34  3A61               	xorlw	97
  6818  1D35                     u6315:	
  6819  1D35  1D03               	skipz
  6820  1D36  0008               	return
  6821                           
  6822                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6823  1D37  01BA               	clrf	(_myMain^(0+128)+11)
  6824  1D38  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6825                           
  6826                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6827  1D39  1539               	bsf	(_myMain^(0+128)+10),2
  6828  1D3A  0008               	return
  6829  1D3B                     __end_of_Timeout_Counter:	
  6830                           
  6831                           	psect	text22
  6832  1000                     __ptext22:	
  6833 ;; *************** function _Switch_Initialization *****************
  6834 ;; Defined at:
  6835 ;;		line 46 in file "../src/Switch_B1.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;		None               void
  6842 ;; Registers used:
  6843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used:    1
  6855 ;; Hardware stack levels required when called:    8
  6856 ;; This function calls:
  6857 ;;		_setSw_Initialization
  6858 ;; This function is called by:
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function _Switch_Initialization
  6865  1000                     _Switch_Initialization:	
  6866                           
  6867                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6868                           
  6869                           ;incstack = 0
  6870                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6871  1000  3001               	movlw	1
  6872  1001  319B  23A8         	fcall	_setSw_Initialization
  6873  1003  0008               	return
  6874  1004                     __end_of_Switch_Initialization:	
  6875                           
  6876                           	psect	text23
  6877  1BA8                     __ptext23:	
  6878 ;; *************** function _setSw_Initialization *****************
  6879 ;; Defined at:
  6880 ;;		line 66 in file "../src/Switch_B1.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  sw              1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  sw              1    4[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;Total ram usage:        1 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    7
  6901 ;; This function calls:
  6902 ;;		_setLED
  6903 ;; This function is called by:
  6904 ;;		_Switch_Initialization
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           
  6909                           ;psect for function _setSw_Initialization
  6910  1BA8                     _setSw_Initialization:	
  6911                           
  6912                           ;incstack = 0
  6913                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6914                           ;setSw_Initialization@sw stored from wreg
  6915  1BA8  0020               	movlb	0	; select bank0
  6916  1BA9  00A4               	movwf	setSw_Initialization@sw
  6917                           
  6918                           ;Switch_B1.c: 68: setLED(sw, 1);
  6919  1BAA  01A2               	clrf	setLED@command
  6920  1BAB  0AA2               	incf	setLED@command,f
  6921  1BAC  0824               	movf	setSw_Initialization@sw,w
  6922  1BAD  3191  21F9  319B   	fcall	_setLED
  6923                           
  6924                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6925  1BB0  0020               	movlb	0	; select bank0
  6926  1BB1  01A2               	clrf	setLED@command
  6927  1BB2  0AA2               	incf	setLED@command,f
  6928  1BB3  0824               	movf	setSw_Initialization@sw,w
  6929  1BB4  3E01               	addlw	1
  6930  1BB5  3191  21F9         	fcall	_setLED
  6931  1BB7  0008               	return
  6932  1BB8                     __end_of_setSw_Initialization:	
  6933                           
  6934                           	psect	text24
  6935  1A21                     __ptext24:	
  6936 ;; *************** function _RF_Main *****************
  6937 ;; Defined at:
  6938 ;;		line 26 in file "../src/RF_Control_B1.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:   12
  6959 ;; This function calls:
  6960 ;;		_setRF_Main
  6961 ;; This function is called by:
  6962 ;;		_main
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _RF_Main
  6968  1A21                     _RF_Main:	
  6969                           
  6970                           ;RF_Control_B1.c: 28: setRF_Main();
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6974  1A21  3185  2564         	fcall	_setRF_Main
  6975  1A23  0008               	return
  6976  1A24                     __end_of_RF_Main:	
  6977                           
  6978                           	psect	text25
  6979  0564                     __ptext25:	
  6980 ;; *************** function _setRF_Main *****************
  6981 ;; Defined at:
  6982 ;;		line 53 in file "../src/RF_Control_B1.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;		None
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  error           1    3[BANK1 ] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;		None               void
  6989 ;; Registers used:
  6990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:   11
  7003 ;; This function calls:
  7004 ;;		_CC2500_PowerOnInitial
  7005 ;;		_CC2500_RxData
  7006 ;;		_CC2500_TxData
  7007 ;;		_CC2500_WriteCommand
  7008 ;;		_RF_RxDisable
  7009 ;;		___lwdiv
  7010 ;;		_getBuz_GO
  7011 ;;		_getRF_KeyStatus
  7012 ;;		_getRxData
  7013 ;; This function is called by:
  7014 ;;		_RF_Main
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function _setRF_Main
  7020  0564                     _setRF_Main:	
  7021                           
  7022                           ;RF_Control_B1.c: 54: char error = 0;
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7026  0564  0021               	movlb	1	; select bank1
  7027  0565  01E9               	clrf	setRF_Main@error^(0+128)
  7028                           
  7029                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7030  0566  1C20               	btfss	_RF1^(0+128),0
  7031  0567  2E35               	goto	l2137
  7032                           
  7033                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7034  0568  319B  23FC  3185   	fcall	_getBuz_GO
  7035  056B  0020               	movlb	0	; select bank0
  7036  056C  0821               	movf	?_getBuz_GO+1,w
  7037  056D  0420               	iorwf	?_getBuz_GO,w
  7038  056E  1D03               	skipz
  7039  056F  2E16               	goto	l8837
  7040                           
  7041                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7042  0570  319C  240D  3185   	fcall	_getRF_KeyStatus
  7043  0573  3A01               	xorlw	1
  7044  0574  3000               	movlw	0
  7045  0575  1903               	skipnz
  7046  0576  3001               	movlw	1
  7047  0577  0021               	movlb	1	; select bank1
  7048  0578  00E8               	movwf	??_setRF_Main^(0+128)
  7049  0579  0CE8               	rrf	??_setRF_Main^(0+128),f
  7050  057A  0CE8               	rrf	??_setRF_Main^(0+128),f
  7051  057B  0820               	movf	_RF1^(0+128),w
  7052  057C  0668               	xorwf	??_setRF_Main^(0+128),w
  7053  057D  397F               	andlw	-129
  7054  057E  0668               	xorwf	??_setRF_Main^(0+128),w
  7055  057F  00A0               	movwf	_RF1^(0+128)
  7056                           
  7057                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7058  0580  1FA0               	btfss	_RF1^(0+128),7
  7059  0581  2D84               	goto	l2141
  7060  0582  1F20               	btfss	_RF1^(0+128),6
  7061  0583  2E16               	goto	l8837
  7062  0584                     l2141:	
  7063                           
  7064                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7065  0584  1D20               	btfss	_RF1^(0+128),2
  7066  0585  2DD5               	goto	l2142
  7067                           
  7068                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7069  0586  1B20               	btfsc	_RF1^(0+128),6
  7070  0587  2DD0               	goto	l8809
  7071                           
  7072                           ;RF_Control_B1.c: 68: RF1.Count++;
  7073  0588  3001               	movlw	1
  7074  0589  07A3               	addwf	(_RF1^(0+128)+3),f
  7075  058A  3000               	movlw	0
  7076  058B  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7077                           
  7078                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7079  058C  3014               	movlw	20
  7080  058D  0020               	movlb	0	; select bank0
  7081  058E  00A0               	movwf	___lwdiv@divisor
  7082  058F  3000               	movlw	0
  7083  0590  00A1               	movwf	___lwdiv@divisor+1
  7084  0591  0021               	movlb	1	; select bank1
  7085  0592  0829               	movf	((_RF1+1)^(0+128)+8),w
  7086  0593  0020               	movlb	0	; select bank0
  7087  0594  01A3               	clrf	___lwdiv@dividend+1
  7088  0595  07A3               	addwf	___lwdiv@dividend+1,f
  7089  0596  0021               	movlb	1	; select bank1
  7090  0597  0828               	movf	(_RF1^(0+128)+8),w
  7091  0598  0020               	movlb	0	; select bank0
  7092  0599  01A2               	clrf	___lwdiv@dividend
  7093  059A  07A2               	addwf	___lwdiv@dividend,f
  7094  059B  3191  2189  3185   	fcall	___lwdiv
  7095  059E  0020               	movlb	0	; select bank0
  7096  059F  0821               	movf	?___lwdiv+1,w
  7097  05A0  0021               	movlb	1	; select bank1
  7098  05A1  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7099  05A2  1D03               	skipz
  7100  05A3  2DA8               	goto	u9215
  7101  05A4  0020               	movlb	0	; select bank0
  7102  05A5  0820               	movf	?___lwdiv,w
  7103  05A6  0021               	movlb	1	; select bank1
  7104  05A7  0223               	subwf	(_RF1^(0+128)+3),w
  7105  05A8                     u9215:	
  7106  05A8  1C03               	skipc
  7107  05A9  2E16               	goto	l8837
  7108                           
  7109                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7110  05AA  3014               	movlw	20
  7111  05AB  0020               	movlb	0	; select bank0
  7112  05AC  00A0               	movwf	___lwdiv@divisor
  7113  05AD  3000               	movlw	0
  7114  05AE  00A1               	movwf	___lwdiv@divisor+1
  7115  05AF  0021               	movlb	1	; select bank1
  7116  05B0  0829               	movf	((_RF1+1)^(0+128)+8),w
  7117  05B1  0020               	movlb	0	; select bank0
  7118  05B2  01A3               	clrf	___lwdiv@dividend+1
  7119  05B3  07A3               	addwf	___lwdiv@dividend+1,f
  7120  05B4  0021               	movlb	1	; select bank1
  7121  05B5  0828               	movf	(_RF1^(0+128)+8),w
  7122  05B6  0020               	movlb	0	; select bank0
  7123  05B7  01A2               	clrf	___lwdiv@dividend
  7124  05B8  07A2               	addwf	___lwdiv@dividend,f
  7125  05B9  3191  2189  3185   	fcall	___lwdiv
  7126  05BC  0020               	movlb	0	; select bank0
  7127  05BD  0821               	movf	?___lwdiv+1,w
  7128  05BE  0021               	movlb	1	; select bank1
  7129  05BF  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7130  05C0  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7131  05C1  0020               	movlb	0	; select bank0
  7132  05C2  0820               	movf	?___lwdiv,w
  7133  05C3  0021               	movlb	1	; select bank1
  7134  05C4  01A3               	clrf	(_RF1^(0+128)+3)
  7135  05C5  07A3               	addwf	(_RF1^(0+128)+3),f
  7136                           
  7137                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7138  05C6  1120               	bcf	_RF1^(0+128),2
  7139                           
  7140                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7141  05C7  01AB               	clrf	(_RF1^(0+128)+11)
  7142  05C8  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7143                           
  7144                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7145  05C9  319B  2399  3185   	fcall	_RF_RxDisable
  7146                           
  7147                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7148  05CC  3188  2049  3185   	fcall	_CC2500_TxData
  7149                           
  7150                           ;RF_Control_B1.c: 77: }
  7151                           ;RF_Control_B1.c: 78: } else {
  7152  05CF  2E16               	goto	l8837
  7153  05D0                     l8809:	
  7154                           
  7155                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7156  05D0  0021               	movlb	1	; select bank1
  7157  05D1  01A3               	clrf	(_RF1^(0+128)+3)
  7158  05D2  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7159                           
  7160                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7161  05D3  1120               	bcf	_RF1^(0+128),2
  7162                           
  7163                           ;RF_Control_B1.c: 81: }
  7164                           ;RF_Control_B1.c: 82: } else {
  7165  05D4  2E16               	goto	l8837
  7166  05D5                     l2142:	
  7167                           
  7168                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7169  05D5  1DA0               	btfss	_RF1^(0+128),3
  7170  05D6  2DE4               	goto	l8823
  7171                           
  7172                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7173  05D7  3197  2795  3185   	fcall	_CC2500_RxData
  7174                           
  7175                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7176  05DA  0021               	movlb	1	; select bank1
  7177  05DB  1CA0               	btfss	_RF1^(0+128),1
  7178  05DC  2E16               	goto	l8837
  7179                           
  7180                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7181  05DD  10A0               	bcf	_RF1^(0+128),1
  7182                           
  7183                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7184  05DE  01AB               	clrf	(_RF1^(0+128)+11)
  7185  05DF  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7186                           
  7187                           ;RF_Control_B1.c: 97: getRxData();
  7188  05E0  3195  2597  3185   	fcall	_getRxData
  7189                           
  7190                           ;RF_Control_B1.c: 100: }
  7191                           ;RF_Control_B1.c: 101: } else {
  7192  05E3  2E16               	goto	l8837
  7193  05E4                     l8823:	
  7194                           
  7195                           ;RF_Control_B1.c: 102: RF1.Count++;
  7196  05E4  3001               	movlw	1
  7197  05E5  0021               	movlb	1	; select bank1
  7198  05E6  07A3               	addwf	(_RF1^(0+128)+3),f
  7199  05E7  3000               	movlw	0
  7200  05E8  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7201                           
  7202                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7203  05E9  3014               	movlw	20
  7204  05EA  0020               	movlb	0	; select bank0
  7205  05EB  00A0               	movwf	___lwdiv@divisor
  7206  05EC  3000               	movlw	0
  7207  05ED  00A1               	movwf	___lwdiv@divisor+1
  7208  05EE  0021               	movlb	1	; select bank1
  7209  05EF  0829               	movf	((_RF1+1)^(0+128)+8),w
  7210  05F0  0020               	movlb	0	; select bank0
  7211  05F1  01A3               	clrf	___lwdiv@dividend+1
  7212  05F2  07A3               	addwf	___lwdiv@dividend+1,f
  7213  05F3  0021               	movlb	1	; select bank1
  7214  05F4  0828               	movf	(_RF1^(0+128)+8),w
  7215  05F5  0020               	movlb	0	; select bank0
  7216  05F6  01A2               	clrf	___lwdiv@dividend
  7217  05F7  07A2               	addwf	___lwdiv@dividend,f
  7218  05F8  3191  2189  3185   	fcall	___lwdiv
  7219  05FB  0020               	movlb	0	; select bank0
  7220  05FC  0821               	movf	?___lwdiv+1,w
  7221  05FD  0021               	movlb	1	; select bank1
  7222  05FE  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7223  05FF  1D03               	skipz
  7224  0600  2E05               	goto	u9245
  7225  0601  0020               	movlb	0	; select bank0
  7226  0602  0820               	movf	?___lwdiv,w
  7227  0603  0021               	movlb	1	; select bank1
  7228  0604  0223               	subwf	(_RF1^(0+128)+3),w
  7229  0605                     u9245:	
  7230  0605  1C03               	skipc
  7231  0606  2E16               	goto	l8837
  7232                           
  7233                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7234  0607  01A3               	clrf	(_RF1^(0+128)+3)
  7235  0608  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7236                           
  7237                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7238  0609  15A0               	bsf	_RF1^(0+128),3
  7239                           
  7240                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7241  060A  3036               	movlw	54
  7242  060B  319E  2612  3185   	fcall	_CC2500_WriteCommand
  7243                           
  7244                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7245  060E  303A               	movlw	58
  7246  060F  319E  2612  3185   	fcall	_CC2500_WriteCommand
  7247                           
  7248                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7249  0612  3034               	movlw	52
  7250  0613  319E  2612  3185   	fcall	_CC2500_WriteCommand
  7251  0616                     l8837:	
  7252                           
  7253                           ;RF_Control_B1.c: 111: }
  7254                           ;RF_Control_B1.c: 112: }
  7255                           ;RF_Control_B1.c: 113: }
  7256                           ;RF_Control_B1.c: 114: }
  7257                           ;RF_Control_B1.c: 115: }
  7258                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7259  0616  3001               	movlw	1
  7260  0617  0021               	movlb	1	; select bank1
  7261  0618  07AB               	addwf	(_RF1^(0+128)+11),f
  7262  0619  3000               	movlw	0
  7263  061A  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7264                           
  7265                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7266  061B  300B               	movlw	11
  7267  061C  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7268  061D  30B9               	movlw	185
  7269  061E  1903               	skipnz
  7270  061F  022B               	subwf	(_RF1^(0+128)+11),w
  7271  0620  1C03               	skipc
  7272  0621  2E2E               	goto	l8851
  7273                           
  7274                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7275  0622  01AB               	clrf	(_RF1^(0+128)+11)
  7276  0623  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7277                           
  7278                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7279  0624  11A0               	bcf	_RF1^(0+128),3
  7280                           
  7281                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7282  0625  10A0               	bcf	_RF1^(0+128),1
  7283                           
  7284                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7285  0626  3036               	movlw	54
  7286  0627  319E  2612  3185   	fcall	_CC2500_WriteCommand
  7287                           
  7288                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7289  062A  303A               	movlw	58
  7290  062B  319E  2612  3185   	fcall	_CC2500_WriteCommand
  7291  062E                     l8851:	
  7292                           
  7293                           ;RF_Control_B1.c: 125: }
  7294                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7295  062E  0021               	movlb	1	; select bank1
  7296  062F  1F21               	btfss	(_RF1^(0+128)+1),6
  7297  0630  0008               	return
  7298                           
  7299                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7300  0631  1321               	bcf	(_RF1^(0+128)+1),6
  7301                           
  7302                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7303  0632  319D  2511         	fcall	_CC2500_PowerOnInitial
  7304                           
  7305                           ;RF_Control_B1.c: 130: }
  7306                           ;RF_Control_B1.c: 132: } else {
  7307  0634  0008               	return
  7308  0635                     l2137:	
  7309                           
  7310                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7311  0635  1C2F               	btfss	_myMain^(0+128),0
  7312  0636  0008               	return
  7313                           
  7314                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7315  0637  1420               	bsf	_RF1^(0+128),0
  7316  0638  0008               	return
  7317  0639                     __end_of_setRF_Main:	
  7318                           
  7319                           	psect	text26
  7320  1597                     __ptext26:	
  7321 ;; *************** function _getRxData *****************
  7322 ;; Defined at:
  7323 ;;		line 227 in file "../src/RF_Control_B1.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;		None
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  error           1    1[BANK1 ] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;Total ram usage:        2 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:   10
  7344 ;; This function calls:
  7345 ;;		_getMain_All_Error_Status
  7346 ;;		_setControl_Lights_Table
  7347 ;;		_setLog_Code
  7348 ;;		_setTxData
  7349 ;; This function is called by:
  7350 ;;		_setRF_Main
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           
  7355                           ;psect for function _getRxData
  7356  1597                     _getRxData:	
  7357                           
  7358                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7362  1597  0023               	movlb	3	; select bank3
  7363  1598  0820               	movf	_RF_Data^(0+384),w
  7364  1599  3AAA               	xorlw	170
  7365  159A  1D03               	skipz
  7366  159B  2DAD               	goto	l7131
  7367  159C  0821               	movf	(_RF_Data^(0+384)+1),w
  7368  159D  3A01               	xorlw	1
  7369  159E  1D03               	skipz
  7370  159F  2DAD               	goto	l7131
  7371                           
  7372                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7373  15A0  3055               	movlw	85
  7374  15A1  0021               	movlb	1	; select bank1
  7375  15A2  00E6               	movwf	??_getRxData^(0+128)
  7376  15A3  086E               	movf	_product^(0+128),w
  7377  15A4  3E02               	addlw	2
  7378  15A5  0086               	movwf	6
  7379  15A6  3001               	movlw	1	; select bank2/3
  7380  15A7  0087               	movwf	7
  7381  15A8  0866               	movf	??_getRxData^(0+128),w
  7382  15A9  0081               	movwf	1
  7383                           
  7384                           ;RF_Control_B1.c: 231: setTxData();
  7385  15AA  318E  2682         	fcall	_setTxData
  7386                           
  7387                           ;RF_Control_B1.c: 235: } else {
  7388  15AC  0008               	return
  7389  15AD                     l7131:	
  7390                           
  7391                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7392  15AD  3000               	movlw	0
  7393  15AE  3190  2083  3195   	fcall	_getMain_All_Error_Status
  7394  15B1  0021               	movlb	1	; select bank1
  7395  15B2  00E6               	movwf	??_getRxData^(0+128)
  7396  15B3  0866               	movf	??_getRxData^(0+128),w
  7397  15B4  00E7               	movwf	getRxData@error^(0+128)
  7398                           
  7399                           ;RF_Control_B1.c: 237: if (error == 0) {
  7400  15B5  08E7               	movf	getRxData@error^(0+128),f
  7401  15B6  1D03               	skipz
  7402  15B7  2DF9               	goto	l2182
  7403                           
  7404                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7405  15B8  1F20               	btfss	_RF1^(0+128),6
  7406  15B9  2DC5               	goto	l7143
  7407                           
  7408                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7409  15BA  0023               	movlb	3	; select bank3
  7410  15BB  08A0               	movf	_RF_Data^(0+384),f
  7411  15BC  1D03               	skipz
  7412  15BD  0008               	return
  7413  15BE  0821               	movf	(_RF_Data^(0+384)+1),w
  7414  15BF  3A64               	xorlw	100
  7415  15C0  1D03               	skipz
  7416  15C1  0008               	return
  7417                           
  7418                           ;RF_Control_B1.c: 241: setLog_Code();
  7419  15C2  3190  20EA         	fcall	_setLog_Code
  7420                           
  7421                           ;RF_Control_B1.c: 242: }
  7422                           ;RF_Control_B1.c: 243: } else {
  7423  15C4  0008               	return
  7424  15C5                     l7143:	
  7425                           
  7426                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7427  15C5  0023               	movlb	3	; select bank3
  7428  15C6  0834               	movf	(_RF_Data^(0+384)+20),w
  7429  15C7  3AD1               	xorlw	209
  7430  15C8  1903               	skipnz
  7431  15C9  2DCE               	goto	l7147
  7432  15CA  0834               	movf	(_RF_Data^(0+384)+20),w
  7433  15CB  3A0A               	xorlw	10
  7434  15CC  1D03               	skipz
  7435  15CD  0008               	return
  7436  15CE                     l7147:	
  7437                           
  7438                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7439  15CE  08A0               	movf	_RF_Data^(0+384),f
  7440  15CF  1D03               	skipz
  7441  15D0  0008               	return
  7442  15D1  0821               	movf	(_RF_Data^(0+384)+1),w
  7443  15D2  3A02               	xorlw	2
  7444  15D3  1D03               	skipz
  7445  15D4  0008               	return
  7446                           
  7447                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7448  15D5  0021               	movlb	1	; select bank1
  7449  15D6  086E               	movf	_product^(0+128),w
  7450  15D7  3E0C               	addlw	12
  7451  15D8  0086               	movwf	6
  7452  15D9  3001               	movlw	1	; select bank2/3
  7453  15DA  0087               	movwf	7
  7454  15DB  0023               	movlb	3	; select bank3
  7455  15DC  082C               	movf	(_RF_Data^(0+384)+12),w
  7456  15DD  0601               	xorwf	1,w
  7457  15DE  1D03               	skipz
  7458  15DF  0008               	return
  7459  15E0  0021               	movlb	1	; select bank1
  7460  15E1  086E               	movf	_product^(0+128),w
  7461  15E2  3E0D               	addlw	13
  7462  15E3  0086               	movwf	6
  7463  15E4  3001               	movlw	1	; select bank2/3
  7464  15E5  0087               	movwf	7
  7465  15E6  0023               	movlb	3	; select bank3
  7466  15E7  082D               	movf	(_RF_Data^(0+384)+13),w
  7467  15E8  0601               	xorwf	1,w
  7468  15E9  1D03               	skipz
  7469  15EA  0008               	return
  7470  15EB  0021               	movlb	1	; select bank1
  7471  15EC  086E               	movf	_product^(0+128),w
  7472  15ED  3E0E               	addlw	14
  7473  15EE  0086               	movwf	6
  7474  15EF  3001               	movlw	1	; select bank2/3
  7475  15F0  0087               	movwf	7
  7476  15F1  0023               	movlb	3	; select bank3
  7477  15F2  082E               	movf	(_RF_Data^(0+384)+14),w
  7478  15F3  0601               	xorwf	1,w
  7479  15F4  1D03               	skipz
  7480  15F5  0008               	return
  7481                           
  7482                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7483  15F6  318A  2206         	fcall	_setControl_Lights_Table
  7484                           
  7485                           ;RF_Control_B1.c: 250: }
  7486                           ;RF_Control_B1.c: 253: }
  7487                           ;RF_Control_B1.c: 264: }
  7488                           ;RF_Control_B1.c: 265: }
  7489                           ;RF_Control_B1.c: 266: } else {
  7490  15F8  0008               	return
  7491  15F9                     l2182:	
  7492                           
  7493                           ;RF_Control_B1.c: 267: __nop();
  7494  15F9  0000               	nop
  7495  15FA  0008               	return
  7496  15FB                     __end_of_getRxData:	
  7497                           
  7498                           	psect	text27
  7499  10EA                     __ptext27:	
  7500 ;; *************** function _setLog_Code *****************
  7501 ;; Defined at:
  7502 ;;		line 273 in file "../src/RF_Control_B1.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;		None
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;		None
  7507 ;; Return value:  Size  Location     Type
  7508 ;;		None               void
  7509 ;; Registers used:
  7510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;Total ram usage:        1 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    7
  7523 ;; This function calls:
  7524 ;;		_setBuz
  7525 ;;		_setMemory_LoopSave
  7526 ;;		_setMemory_Modify
  7527 ;;		_setProductData
  7528 ;; This function is called by:
  7529 ;;		_getRxData
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _setLog_Code
  7535  10EA                     _setLog_Code:	
  7536                           
  7537                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7541  10EA  0021               	movlb	1	; select bank1
  7542  10EB  1320               	bcf	_RF1^(0+128),6
  7543                           
  7544                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7545  10EC  0023               	movlb	3	; select bank3
  7546  10ED  082C               	movf	(_RF_Data^(0+384)+12),w
  7547  10EE  0020               	movlb	0	; select bank0
  7548  10EF  00E5               	movwf	??_setLog_Code
  7549  10F0  0865               	movf	??_setLog_Code,w
  7550  10F1  00E2               	movwf	setProductData@value
  7551  10F2  300C               	movlw	12
  7552  10F3  319A  22F6  3190   	fcall	_setProductData
  7553                           
  7554                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7555  10F6  0023               	movlb	3	; select bank3
  7556  10F7  082D               	movf	(_RF_Data^(0+384)+13),w
  7557  10F8  0020               	movlb	0	; select bank0
  7558  10F9  00E5               	movwf	??_setLog_Code
  7559  10FA  0865               	movf	??_setLog_Code,w
  7560  10FB  00E2               	movwf	setProductData@value
  7561  10FC  300D               	movlw	13
  7562  10FD  319A  22F6  3190   	fcall	_setProductData
  7563                           
  7564                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7565  1100  0023               	movlb	3	; select bank3
  7566  1101  082E               	movf	(_RF_Data^(0+384)+14),w
  7567  1102  0020               	movlb	0	; select bank0
  7568  1103  00E5               	movwf	??_setLog_Code
  7569  1104  0865               	movf	??_setLog_Code,w
  7570  1105  00E2               	movwf	setProductData@value
  7571  1106  300E               	movlw	14
  7572  1107  319A  22F6  3190   	fcall	_setProductData
  7573                           
  7574                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7575  110A  3064               	movlw	100
  7576  110B  0020               	movlb	0	; select bank0
  7577  110C  00A9               	movwf	setBuz@time
  7578  110D  3000               	movlw	0
  7579  110E  00AA               	movwf	setBuz@time+1
  7580  110F  3001               	movlw	1
  7581  1110  3194  2425  3190   	fcall	_setBuz
  7582                           
  7583                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7584  1113  0021               	movlb	1	; select bank1
  7585  1114  1EAF               	btfss	_myMain^(0+128),5
  7586  1115  291A               	goto	l2195
  7587                           
  7588                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7589  1116  3001               	movlw	1
  7590  1117  319C  24C2  3190   	fcall	_setMemory_LoopSave
  7591  111A                     l2195:	
  7592                           
  7593                           ;RF_Control_B1.c: 281: }
  7594                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7595  111A  3001               	movlw	1
  7596  111B  319C  2489         	fcall	_setMemory_Modify
  7597  111D  0008               	return
  7598  111E                     __end_of_setLog_Code:	
  7599                           
  7600                           	psect	text28
  7601  1CC2                     __ptext28:	
  7602 ;; *************** function _setMemory_LoopSave *****************
  7603 ;; Defined at:
  7604 ;;		line 1089 in file "../src/MCU_B1.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  command         1    wreg     unsigned char 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  command         1    1[BANK0 ] unsigned char 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;		None               void
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;Total ram usage:        2 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    5
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_setLog_Code
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _setMemory_LoopSave
  7634  1CC2                     _setMemory_LoopSave:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7638                           ;setMemory_LoopSave@command stored from wreg
  7639  1CC2  0020               	movlb	0	; select bank0
  7640  1CC3  00A1               	movwf	setMemory_LoopSave@command
  7641                           
  7642                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7643  1CC4  0821               	movf	setMemory_LoopSave@command,w
  7644  1CC5  3A01               	xorlw	1
  7645  1CC6  3000               	movlw	0
  7646  1CC7  1903               	skipnz
  7647  1CC8  3001               	movlw	1
  7648  1CC9  00A0               	movwf	??_setMemory_LoopSave
  7649  1CCA  0DA0               	rlf	??_setMemory_LoopSave,f
  7650  1CCB  0DA0               	rlf	??_setMemory_LoopSave,f
  7651  1CCC  0024               	movlb	4	; select bank4
  7652  1CCD  0844               	movf	(_Memory^(0+512)+36),w
  7653  1CCE  0020               	movlb	0	; select bank0
  7654  1CCF  0620               	xorwf	??_setMemory_LoopSave,w
  7655  1CD0  39FB               	andlw	-5
  7656  1CD1  0620               	xorwf	??_setMemory_LoopSave,w
  7657  1CD2  0024               	movlb	4	; select bank4
  7658  1CD3  00C4               	movwf	(_Memory^(0+512)+36)
  7659  1CD4  0008               	return
  7660  1CD5                     __end_of_setMemory_LoopSave:	
  7661                           
  7662                           	psect	text29
  7663  0A06                     __ptext29:	
  7664 ;; *************** function _setControl_Lights_Table *****************
  7665 ;; Defined at:
  7666 ;;		line 286 in file "../src/RF_Control_B1.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;		None               void
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;Total ram usage:        0 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    9
  7687 ;; This function calls:
  7688 ;;		_getDimmerLights_Status
  7689 ;;		_getMain_All_LightsStatus
  7690 ;;		_setCmd_Status
  7691 ;;		_setDimmerLights_SwOff
  7692 ;;		_setDimmerLights_SwOn
  7693 ;;		_setProductData
  7694 ;;		_setRFSW_AdjControl
  7695 ;;		_setRFSW_Control
  7696 ;;		_setRF_AdjControl
  7697 ;;		_setTxData
  7698 ;; This function is called by:
  7699 ;;		_getRxData
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function _setControl_Lights_Table
  7705  0A06                     _setControl_Lights_Table:	
  7706                           
  7707                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7711  0A06  2A6C               	goto	l6733
  7712  0A07                     l6713:	
  7713                           ;RF_Control_B1.c: 290: case 0x00:
  7714                           
  7715                           
  7716                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7717  0A07  319A  22A8  318A   	fcall	_getMain_All_LightsStatus
  7718  0A0A  3A01               	xorlw	1
  7719  0A0B  1D03               	skipz
  7720  0A0C  2A23               	goto	l6721
  7721                           
  7722                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7723  0A0D  3001               	movlw	1
  7724  0A0E  319B  23B8  318A   	fcall	_getDimmerLights_Status
  7725  0A11  3A01               	xorlw	1
  7726  0A12  1D03               	skipz
  7727  0A13  2A1C               	goto	l6719
  7728                           
  7729                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7730  0A14  3001               	movlw	1
  7731  0A15  3191  211E  318A   	fcall	_setDimmerLights_SwOn
  7732                           
  7733                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7734  0A18  3001               	movlw	1
  7735  0A19  3191  21C0  318A   	fcall	_setDimmerLights_SwOff
  7736  0A1C                     l6719:	
  7737                           
  7738                           ;RF_Control_B1.c: 297: }
  7739                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7740  0A1C  0020               	movlb	0	; select bank0
  7741  0A1D  01A0               	clrf	setCmd_Status@cmd
  7742  0A1E  0AA0               	incf	setCmd_Status@cmd,f
  7743  0A1F  3001               	movlw	1
  7744  0A20  319D  25AC         	fcall	_setCmd_Status
  7745                           
  7746                           ;RF_Control_B1.c: 313: } else {
  7747  0A22  0008               	return
  7748  0A23                     l6721:	
  7749                           
  7750                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7751  0A23  0020               	movlb	0	; select bank0
  7752  0A24  01E2               	clrf	setProductData@value
  7753  0A25  3009               	movlw	9
  7754  0A26  319A  22F6  318A   	fcall	_setProductData
  7755                           
  7756                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7757  0A29  0020               	movlb	0	; select bank0
  7758  0A2A  01E2               	clrf	setProductData@value
  7759  0A2B  300B               	movlw	11
  7760  0A2C  319A  22F6  318A   	fcall	_setProductData
  7761                           
  7762                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7763  0A2F  0020               	movlb	0	; select bank0
  7764  0A30  01E2               	clrf	setProductData@value
  7765  0A31  300F               	movlw	15
  7766  0A32  319A  22F6  318A   	fcall	_setProductData
  7767                           
  7768                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7769  0A35  0020               	movlb	0	; select bank0
  7770  0A36  01E2               	clrf	setProductData@value
  7771  0A37  3011               	movlw	17
  7772  0A38  319A  22F6  318A   	fcall	_setProductData
  7773                           
  7774                           ;RF_Control_B1.c: 318: setTxData();
  7775  0A3B  318E  2682         	fcall	_setTxData
  7776                           
  7777                           ;RF_Control_B1.c: 319: }
  7778                           ;RF_Control_B1.c: 320: break;
  7779  0A3D  0008               	return
  7780  0A3E                     l6723:	
  7781                           ;RF_Control_B1.c: 322: case 0x20:
  7782                           
  7783                           
  7784                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7785  0A3E  0020               	movlb	0	; select bank0
  7786  0A3F  01E2               	clrf	setProductData@value
  7787  0A40  3009               	movlw	9
  7788  0A41  319A  22F6  318A   	fcall	_setProductData
  7789                           
  7790                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7791  0A44  0020               	movlb	0	; select bank0
  7792  0A45  01E2               	clrf	setProductData@value
  7793  0A46  300B               	movlw	11
  7794  0A47  319A  22F6  318A   	fcall	_setProductData
  7795                           
  7796                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7797  0A4A  0021               	movlb	1	; select bank1
  7798  0A4B  086E               	movf	_product^(0+128),w
  7799  0A4C  0086               	movwf	6
  7800  0A4D  3001               	movlw	1	; select bank2/3
  7801  0A4E  0087               	movwf	7
  7802  0A4F  3001               	movlw	1	; select bank2/3
  7803  0A50  3F4F               	moviw [15]fsr1
  7804  0A51  0020               	movlb	0	; select bank0
  7805  0A52  00E2               	movwf	setProductData@value
  7806  0A53  300F               	movlw	15
  7807  0A54  319A  22F6  318A   	fcall	_setProductData
  7808                           
  7809                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7810  0A57  0020               	movlb	0	; select bank0
  7811  0A58  01E2               	clrf	setProductData@value
  7812  0A59  3011               	movlw	17
  7813  0A5A  319A  22F6  318A   	fcall	_setProductData
  7814                           
  7815                           ;RF_Control_B1.c: 327: setTxData();
  7816  0A5D  318E  2682         	fcall	_setTxData
  7817                           
  7818                           ;RF_Control_B1.c: 328: break;
  7819  0A5F  0008               	return
  7820  0A60                     l6725:	
  7821                           ;RF_Control_B1.c: 331: case 0x01:
  7822                           
  7823                           
  7824                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7825  0A60  3001               	movlw	1
  7826  0A61  3192  226F         	fcall	_setRFSW_Control
  7827                           
  7828                           ;RF_Control_B1.c: 333: break;
  7829  0A63  0008               	return
  7830  0A64                     l6727:	
  7831                           ;RF_Control_B1.c: 337: case 0x11:
  7832                           
  7833                           
  7834                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7835  0A64  3001               	movlw	1
  7836  0A65  318A  227F         	fcall	_setRFSW_AdjControl
  7837                           
  7838                           ;RF_Control_B1.c: 339: break;
  7839  0A67  0008               	return
  7840  0A68                     l6729:	
  7841                           ;RF_Control_B1.c: 341: case 0xd1:
  7842                           
  7843                           
  7844                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7845  0A68  3001               	movlw	1
  7846  0A69  3190  20B6         	fcall	_setRF_AdjControl
  7847                           
  7848                           ;RF_Control_B1.c: 372: }
  7849                           
  7850                           ;RF_Control_B1.c: 343: break;
  7851  0A6B  0008               	return
  7852  0A6C                     l6733:	
  7853  0A6C  0023               	movlb	3	; select bank3
  7854  0A6D  082F               	movf	(_RF_Data^(0+384)+15),w
  7855                           
  7856                           ; Switch size 1, requested type "space"
  7857                           ; Number of cases is 5, Range of values is 0 to 209
  7858                           ; switch strategies available:
  7859                           ; Name         Instructions Cycles
  7860                           ; simple_byte           16     9 (average)
  7861                           ; jumptable            260     6 (fixed)
  7862                           ;	Chosen strategy is simple_byte
  7863  0A6E  3A00               	xorlw	0	; case 0
  7864  0A6F  1903               	skipnz
  7865  0A70  2A07               	goto	l6713
  7866  0A71  3A01               	xorlw	1	; case 1
  7867  0A72  1903               	skipnz
  7868  0A73  2A60               	goto	l6725
  7869  0A74  3A10               	xorlw	16	; case 17
  7870  0A75  1903               	skipnz
  7871  0A76  2A64               	goto	l6727
  7872  0A77  3A31               	xorlw	49	; case 32
  7873  0A78  1903               	skipnz
  7874  0A79  2A3E               	goto	l6723
  7875  0A7A  3AF1               	xorlw	241	; case 209
  7876  0A7B  1903               	skipnz
  7877  0A7C  2A68               	goto	l6729
  7878  0A7D  2A7E               	goto	l2209
  7879  0A7E                     l2209:	
  7880  0A7E  0008               	return
  7881  0A7F                     __end_of_setControl_Lights_Table:	
  7882                           
  7883                           	psect	text30
  7884  10B6                     __ptext30:	
  7885 ;; *************** function _setRF_AdjControl *****************
  7886 ;; Defined at:
  7887 ;;		line 443 in file "../src/RF_Control_B1.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  sw              1    wreg     unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  sw              1    6[BANK0 ] unsigned char 
  7892 ;;  status          1    5[BANK0 ] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;		None               void
  7895 ;; Registers used:
  7896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;Total ram usage:        3 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    7
  7909 ;; This function calls:
  7910 ;;		_DimmerLights_SelectPointer
  7911 ;;		_getDimmerLights_Status
  7912 ;; This function is called by:
  7913 ;;		_setControl_Lights_Table
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _setRF_AdjControl
  7919  10B6                     _setRF_AdjControl:	
  7920                           
  7921                           ;incstack = 0
  7922                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7923                           ;setRF_AdjControl@sw stored from wreg
  7924  10B6  0020               	movlb	0	; select bank0
  7925  10B7  00A6               	movwf	setRF_AdjControl@sw
  7926                           
  7927                           ;RF_Control_B1.c: 444: char status = 0;
  7928  10B8  01A5               	clrf	setRF_AdjControl@status
  7929                           
  7930                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7931  10B9  0826               	movf	setRF_AdjControl@sw,w
  7932  10BA  319B  23B8  3190   	fcall	_getDimmerLights_Status
  7933  10BD  0020               	movlb	0	; select bank0
  7934  10BE  00A4               	movwf	??_setRF_AdjControl
  7935  10BF  0824               	movf	??_setRF_AdjControl,w
  7936  10C0  00A5               	movwf	setRF_AdjControl@status
  7937                           
  7938                           ;RF_Control_B1.c: 448: if (status == 1) {
  7939  10C1  0825               	movf	setRF_AdjControl@status,w
  7940  10C2  3A01               	xorlw	1
  7941  10C3  1D03               	skipz
  7942  10C4  0008               	return
  7943                           
  7944                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7945  10C5  0021               	movlb	1	; select bank1
  7946  10C6  1822               	btfsc	(_RF1^(0+128)+2),0
  7947  10C7  28DE               	goto	l2228
  7948                           
  7949                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7950  10C8  1422               	bsf	(_RF1^(0+128)+2),0
  7951                           
  7952                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7953  10C9  0020               	movlb	0	; select bank0
  7954  10CA  0826               	movf	setRF_AdjControl@sw,w
  7955  10CB  319A  22EA         	fcall	_DimmerLights_SelectPointer
  7956                           
  7957                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7958  10CD  0021               	movlb	1	; select bank1
  7959  10CE  084C               	movf	_DimmerLights^(0+128),w
  7960  10CF  0086               	movwf	6
  7961  10D0  3001               	movlw	1	; select bank2/3
  7962  10D1  0087               	movwf	7
  7963  10D2  1581               	bsf	1,3
  7964                           
  7965                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7966  10D3  084C               	movf	_DimmerLights^(0+128),w
  7967  10D4  0086               	movwf	6
  7968  10D5  3001               	movlw	1	; select bank2/3
  7969  10D6  0087               	movwf	7
  7970  10D7  1601               	bsf	1,4
  7971                           
  7972                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7973  10D8  084C               	movf	_DimmerLights^(0+128),w
  7974  10D9  0086               	movwf	6
  7975  10DA  3001               	movlw	1	; select bank2/3
  7976  10DB  0087               	movwf	7
  7977  10DC  1681               	bsf	1,5
  7978                           
  7979                           ;RF_Control_B1.c: 457: } else {
  7980  10DD  0008               	return
  7981  10DE                     l2228:	
  7982                           
  7983                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7984  10DE  1022               	bcf	(_RF1^(0+128)+2),0
  7985                           
  7986                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7987  10DF  084C               	movf	_DimmerLights^(0+128),w
  7988  10E0  0086               	movwf	6
  7989  10E1  3001               	movlw	1	; select bank2/3
  7990  10E2  0087               	movwf	7
  7991  10E3  1601               	bsf	1,4
  7992                           
  7993                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7994  10E4  084C               	movf	_DimmerLights^(0+128),w
  7995  10E5  0086               	movwf	6
  7996  10E6  3001               	movlw	1	; select bank2/3
  7997  10E7  0087               	movwf	7
  7998  10E8  1281               	bcf	1,5
  7999  10E9  0008               	return
  8000  10EA                     __end_of_setRF_AdjControl:	
  8001                           
  8002                           	psect	text31
  8003  126F                     __ptext31:	
  8004 ;; *************** function _setRFSW_Control *****************
  8005 ;; Defined at:
  8006 ;;		line 380 in file "../src/RF_Control_B1.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  sw              1    wreg     unsigned char 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  sw              1   79[BANK0 ] unsigned char 
  8011 ;;  status          1   78[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;Total ram usage:        3 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    8
  8028 ;; This function calls:
  8029 ;;		_getDimmerLights_Status
  8030 ;;		_setBuz
  8031 ;;		_setDelayOff_GO
  8032 ;;		_setDimmerLights_SwOff
  8033 ;;		_setDimmerLights_SwOn
  8034 ;;		_setRF_DimmerLights
  8035 ;;		_setTxData
  8036 ;; This function is called by:
  8037 ;;		_setControl_Lights_Table
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _setRFSW_Control
  8043  126F                     _setRFSW_Control:	
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8047                           ;setRFSW_Control@sw stored from wreg
  8048  126F  0020               	movlb	0	; select bank0
  8049  1270  00EF               	movwf	setRFSW_Control@sw
  8050                           
  8051                           ;RF_Control_B1.c: 381: char status = 0;
  8052  1271  01EE               	clrf	setRFSW_Control@status
  8053                           
  8054                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  8055  1272  0023               	movlb	3	; select bank3
  8056  1273  0830               	movf	(_RF_Data^(0+384)+16),w
  8057  1274  3A80               	xorlw	128
  8058  1275  1D03               	skipz
  8059  1276  2AA2               	goto	l6437
  8060                           
  8061                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  8062  1277  0020               	movlb	0	; select bank0
  8063  1278  01E5               	clrf	setDelayOff_GO@command
  8064  1279  0AE5               	incf	setDelayOff_GO@command,f
  8065  127A  0023               	movlb	3	; select bank3
  8066  127B  0831               	movf	(_RF_Data^(0+384)+17),w
  8067  127C  0020               	movlb	0	; select bank0
  8068  127D  00ED               	movwf	??_setRFSW_Control
  8069  127E  086D               	movf	??_setRFSW_Control,w
  8070  127F  00E6               	movwf	setDelayOff_GO@value
  8071  1280  086F               	movf	setRFSW_Control@sw,w
  8072  1281  318C  240C  3192   	fcall	_setDelayOff_GO
  8073                           
  8074                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  8075  1284  0020               	movlb	0	; select bank0
  8076  1285  086F               	movf	setRFSW_Control@sw,w
  8077  1286  319B  23B8  3192   	fcall	_getDimmerLights_Status
  8078  1289  3A01               	xorlw	1
  8079  128A  1D03               	skipz
  8080  128B  2AA2               	goto	l6437
  8081                           
  8082                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  8083  128C  3064               	movlw	100
  8084  128D  0020               	movlb	0	; select bank0
  8085  128E  00A9               	movwf	setBuz@time
  8086  128F  3000               	movlw	0
  8087  1290  00AA               	movwf	setBuz@time+1
  8088  1291  3001               	movlw	1
  8089  1292  3194  2425  3192   	fcall	_setBuz
  8090                           
  8091                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  8092  1295  0020               	movlb	0	; select bank0
  8093  1296  01E5               	clrf	setRF_DimmerLights@on
  8094  1297  0AE5               	incf	setRF_DimmerLights@on,f
  8095  1298  086F               	movf	setRFSW_Control@sw,w
  8096  1299  3196  26C5  3192   	fcall	_setRF_DimmerLights
  8097                           
  8098                           ;RF_Control_B1.c: 388: setTxData();
  8099  129C  318E  2682  3192   	fcall	_setTxData
  8100                           
  8101                           ;RF_Control_B1.c: 389: status = 1;
  8102  129F  0020               	movlb	0	; select bank0
  8103  12A0  01EE               	clrf	setRFSW_Control@status
  8104  12A1  0AEE               	incf	setRFSW_Control@status,f
  8105  12A2                     l6437:	
  8106                           
  8107                           ;RF_Control_B1.c: 390: }
  8108                           ;RF_Control_B1.c: 391: }
  8109                           ;RF_Control_B1.c: 393: if (status == 0) {
  8110  12A2  0020               	movlb	0	; select bank0
  8111  12A3  08EE               	movf	setRFSW_Control@status,f
  8112  12A4  1D03               	skipz
  8113  12A5  0008               	return
  8114                           
  8115                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  8116  12A6  086F               	movf	setRFSW_Control@sw,w
  8117  12A7  3191  211E  3192   	fcall	_setDimmerLights_SwOn
  8118                           
  8119                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  8120  12AA  0020               	movlb	0	; select bank0
  8121  12AB  086F               	movf	setRFSW_Control@sw,w
  8122  12AC  3191  21C0         	fcall	_setDimmerLights_SwOff
  8123  12AE  0008               	return
  8124  12AF                     __end_of_setRFSW_Control:	
  8125                           
  8126                           	psect	text32
  8127  0A7F                     __ptext32:	
  8128 ;; *************** function _setRFSW_AdjControl *****************
  8129 ;; Defined at:
  8130 ;;		line 402 in file "../src/RF_Control_B1.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  sw              1    wreg     unsigned char 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  sw              1   72[BANK0 ] unsigned char 
  8135 ;;  status          1   71[BANK0 ] unsigned char 
  8136 ;; Return value:  Size  Location     Type
  8137 ;;		None               void
  8138 ;; Registers used:
  8139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;Total ram usage:        4 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    8
  8152 ;; This function calls:
  8153 ;;		_getDimmerLights_PercentToValue
  8154 ;;		_getDimmerLights_Status
  8155 ;;		_setDimmerIntr_Dimming_RF
  8156 ;;		_setDimmerIntr_MaxmumValue
  8157 ;;		_setDimmerLights_DimmingRun
  8158 ;;		_setDimmerLights_SwOff
  8159 ;;		_setDimmerLights_SwOn
  8160 ;;		_setMemory_Modify
  8161 ;;		_setProductData
  8162 ;;		_setTxData
  8163 ;; This function is called by:
  8164 ;;		_setControl_Lights_Table
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function _setRFSW_AdjControl
  8170  0A7F                     _setRFSW_AdjControl:	
  8171                           
  8172                           ;incstack = 0
  8173                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8174                           ;setRFSW_AdjControl@sw stored from wreg
  8175  0A7F  0020               	movlb	0	; select bank0
  8176  0A80  00E8               	movwf	setRFSW_AdjControl@sw
  8177                           
  8178                           ;RF_Control_B1.c: 403: char status = 0;
  8179  0A81  01E7               	clrf	setRFSW_AdjControl@status
  8180                           
  8181                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  8182  0A82  0868               	movf	setRFSW_AdjControl@sw,w
  8183  0A83  319B  23B8  318A   	fcall	_getDimmerLights_Status
  8184  0A86  0020               	movlb	0	; select bank0
  8185  0A87  00E5               	movwf	??_setRFSW_AdjControl
  8186  0A88  0865               	movf	??_setRFSW_AdjControl,w
  8187  0A89  00E7               	movwf	setRFSW_AdjControl@status
  8188                           
  8189                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  8190  0A8A  3065               	movlw	101
  8191  0A8B  0023               	movlb	3	; select bank3
  8192  0A8C  0229               	subwf	(_RF_Data^(0+384)+9),w
  8193  0A8D  1C03               	skipc
  8194  0A8E  2A96               	goto	l6449
  8195                           
  8196                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  8197  0A8F  3064               	movlw	100
  8198  0A90  0020               	movlb	0	; select bank0
  8199  0A91  00E5               	movwf	??_setRFSW_AdjControl
  8200  0A92  0865               	movf	??_setRFSW_AdjControl,w
  8201  0A93  0023               	movlb	3	; select bank3
  8202  0A94  00A9               	movwf	(_RF_Data^(0+384)+9)
  8203                           
  8204                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  8205  0A95  2A9B               	goto	l6453
  8206  0A96                     l6449:	
  8207  0A96  08A9               	movf	(_RF_Data^(0+384)+9),f
  8208  0A97  1D03               	skipz
  8209  0A98  2A9B               	goto	l6453
  8210                           
  8211                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  8212  0A99  01A9               	clrf	(_RF_Data^(0+384)+9)
  8213  0A9A  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8214  0A9B                     l6453:	
  8215                           
  8216                           ;RF_Control_B1.c: 411: }
  8217                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  8218  0A9B  0829               	movf	(_RF_Data^(0+384)+9),w
  8219  0A9C  0020               	movlb	0	; select bank0
  8220  0A9D  00E5               	movwf	??_setRFSW_AdjControl
  8221  0A9E  0865               	movf	??_setRFSW_AdjControl,w
  8222  0A9F  00E2               	movwf	setProductData@value
  8223  0AA0  3009               	movlw	9
  8224  0AA1  319A  22F6  318A   	fcall	_setProductData
  8225                           
  8226                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  8227  0AA4  0020               	movlb	0	; select bank0
  8228  0AA5  0868               	movf	setRFSW_AdjControl@sw,w
  8229  0AA6  00E5               	movwf	??_setRFSW_AdjControl
  8230  0AA7  0865               	movf	??_setRFSW_AdjControl,w
  8231  0AA8  00E2               	movwf	setProductData@value
  8232  0AA9  300B               	movlw	11
  8233  0AAA  319A  22F6  318A   	fcall	_setProductData
  8234                           
  8235                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  8236  0AAD  0020               	movlb	0	; select bank0
  8237  0AAE  0868               	movf	setRFSW_AdjControl@sw,w
  8238  0AAF  3E1A               	addlw	26
  8239  0AB0  0021               	movlb	1	; select bank1
  8240  0AB1  076E               	addwf	_product^(0+128),w
  8241  0AB2  0020               	movlb	0	; select bank0
  8242  0AB3  00E5               	movwf	??_setRFSW_AdjControl
  8243  0AB4  0865               	movf	??_setRFSW_AdjControl,w
  8244  0AB5  0086               	movwf	6
  8245  0AB6  3001               	movlw	1	; select bank2/3
  8246  0AB7  0087               	movwf	7
  8247  0AB8  0801               	movf	1,w
  8248  0AB9  00E6               	movwf	??_setRFSW_AdjControl+1
  8249  0ABA  0866               	movf	??_setRFSW_AdjControl+1,w
  8250  0ABB  00E2               	movwf	setProductData@value
  8251  0ABC  3011               	movlw	17
  8252  0ABD  319A  22F6  318A   	fcall	_setProductData
  8253                           
  8254                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8255  0AC0  0023               	movlb	3	; select bank3
  8256  0AC1  0829               	movf	(_RF_Data^(0+384)+9),w
  8257  0AC2  0020               	movlb	0	; select bank0
  8258  0AC3  00E5               	movwf	??_setRFSW_AdjControl
  8259  0AC4  0865               	movf	??_setRFSW_AdjControl,w
  8260  0AC5  00E2               	movwf	setProductData@value
  8261  0AC6  0868               	movf	setRFSW_AdjControl@sw,w
  8262  0AC7  3E14               	addlw	20
  8263  0AC8  319A  22F6  318A   	fcall	_setProductData
  8264                           
  8265                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8266  0ACB  3001               	movlw	1
  8267  0ACC  319C  2489  318A   	fcall	_setMemory_Modify
  8268                           
  8269                           ;RF_Control_B1.c: 427: if (status == 1) {
  8270  0ACF  0020               	movlb	0	; select bank0
  8271  0AD0  0867               	movf	setRFSW_AdjControl@status,w
  8272  0AD1  3A01               	xorlw	1
  8273  0AD2  1D03               	skipz
  8274  0AD3  2AEB               	goto	l6463
  8275                           
  8276                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8277  0AD4  0023               	movlb	3	; select bank3
  8278  0AD5  0829               	movf	(_RF_Data^(0+384)+9),w
  8279  0AD6  3195  25FB  318A   	fcall	_getDimmerLights_PercentToValue
  8280  0AD9  0020               	movlb	0	; select bank0
  8281  0ADA  00E5               	movwf	??_setRFSW_AdjControl
  8282  0ADB  0865               	movf	??_setRFSW_AdjControl,w
  8283  0ADC  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8284  0ADD  0868               	movf	setRFSW_AdjControl@sw,w
  8285  0ADE  319B  2302  318A   	fcall	_setDimmerIntr_MaxmumValue
  8286                           
  8287                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8288  0AE1  0020               	movlb	0	; select bank0
  8289  0AE2  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8290  0AE3  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8291  0AE4  0868               	movf	setRFSW_AdjControl@sw,w
  8292  0AE5  319D  2594  318A   	fcall	_setDimmerIntr_Dimming_RF
  8293                           
  8294                           ;RF_Control_B1.c: 430: setTxData();
  8295  0AE8  318E  2682         	fcall	_setTxData
  8296                           
  8297                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8298  0AEA  0008               	return
  8299  0AEB                     l6463:	
  8300  0AEB  0020               	movlb	0	; select bank0
  8301  0AEC  08E7               	movf	setRFSW_AdjControl@status,f
  8302  0AED  1D03               	skipz
  8303  0AEE  0008               	return
  8304                           
  8305                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8306  0AEF  01A2               	clrf	setDimmerLights_DimmingRun@command
  8307  0AF0  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8308  0AF1  0868               	movf	setRFSW_AdjControl@sw,w
  8309  0AF2  319E  262C  318A   	fcall	_setDimmerLights_DimmingRun
  8310                           
  8311                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8312  0AF5  0020               	movlb	0	; select bank0
  8313  0AF6  0868               	movf	setRFSW_AdjControl@sw,w
  8314  0AF7  3191  211E  318A   	fcall	_setDimmerLights_SwOn
  8315                           
  8316                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8317  0AFA  0020               	movlb	0	; select bank0
  8318  0AFB  0868               	movf	setRFSW_AdjControl@sw,w
  8319  0AFC  3191  21C0         	fcall	_setDimmerLights_SwOff
  8320  0AFE  0008               	return
  8321  0AFF                     __end_of_setRFSW_AdjControl:	
  8322                           
  8323                           	psect	text33
  8324  1E2C                     __ptext33:	
  8325 ;; *************** function _setDimmerLights_DimmingRun *****************
  8326 ;; Defined at:
  8327 ;;		line 1086 in file "../src/Dimmer_B1.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  lights          1    wreg     unsigned char 
  8330 ;;  command         1    2[BANK0 ] unsigned char 
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  lights          1    4[BANK0 ] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;		None               void
  8335 ;; Registers used:
  8336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:        3 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    6
  8349 ;; This function calls:
  8350 ;;		_DimmerLights_SelectPointer
  8351 ;; This function is called by:
  8352 ;;		_setRFSW_AdjControl
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _setDimmerLights_DimmingRun
  8358  1E2C                     _setDimmerLights_DimmingRun:	
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8362                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8363  1E2C  0020               	movlb	0	; select bank0
  8364  1E2D  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8365                           
  8366                           ;Dimmer_B1.c: 1087: DimmerLights_SelectPointer(lights);
  8367  1E2E  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8368  1E2F  319A  22EA         	fcall	_DimmerLights_SelectPointer
  8369                           
  8370                           ;Dimmer_B1.c: 1088: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8371  1E31  0020               	movlb	0	; select bank0
  8372  1E32  0822               	movf	setDimmerLights_DimmingRun@command,w
  8373  1E33  3A01               	xorlw	1
  8374  1E34  3000               	movlw	0
  8375  1E35  1903               	skipnz
  8376  1E36  3001               	movlw	1
  8377  1E37  00A3               	movwf	??_setDimmerLights_DimmingRun
  8378  1E38  0021               	movlb	1	; select bank1
  8379  1E39  0A4C               	incf	_DimmerLights^(0+128),w
  8380  1E3A  0086               	movwf	6
  8381  1E3B  3001               	movlw	1	; select bank2/3
  8382  1E3C  0087               	movwf	7
  8383  1E3D  0020               	movlb	0	; select bank0
  8384  1E3E  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8385  1E3F  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8386  1E40  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8387  1E41  0801               	movf	1,w
  8388  1E42  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8389  1E43  39BF               	andlw	-65
  8390  1E44  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8391  1E45  0081               	movwf	1
  8392  1E46  0008               	return
  8393  1E47                     __end_of_setDimmerLights_DimmingRun:	
  8394                           
  8395                           	psect	text34
  8396  1C0D                     __ptext34:	
  8397 ;; *************** function _getRF_KeyStatus *****************
  8398 ;; Defined at:
  8399 ;;		line 166 in file "../src/RF_Control_B1.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  key             1    1[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      unsigned char 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;Total ram usage:        3 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    5
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_setRF_Main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           
  8428                           ;psect for function _getRF_KeyStatus
  8429  1C0D                     _getRF_KeyStatus:	
  8430                           
  8431                           ;RF_Control_B1.c: 167: char key = 0;
  8432                           
  8433                           ;incstack = 0
  8434                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8435  1C0D  0020               	movlb	0	; select bank0
  8436  1C0E  01A1               	clrf	getRF_KeyStatus@key
  8437                           
  8438                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8439  1C0F  01A2               	clrf	_getRF_KeyStatus$5407
  8440  1C10  0AA2               	incf	_getRF_KeyStatus$5407,f
  8441  1C11  1F0C               	btfss	12,6	;volatile
  8442  1C12  1A0C               	btfsc	12,4	;volatile
  8443  1C13  2C18               	goto	l7111
  8444  1C14  1C0C               	btfss	12,0	;volatile
  8445  1C15  1B8C               	btfsc	12,7	;volatile
  8446  1C16  2C18               	goto	l7111
  8447  1C17  01A2               	clrf	_getRF_KeyStatus$5407
  8448  1C18                     l7111:	
  8449  1C18  0822               	movf	_getRF_KeyStatus$5407,w
  8450  1C19  00A0               	movwf	??_getRF_KeyStatus
  8451  1C1A  0820               	movf	??_getRF_KeyStatus,w
  8452  1C1B  00A1               	movwf	getRF_KeyStatus@key
  8453                           
  8454                           ;RF_Control_B1.c: 179: return key;
  8455  1C1C  0821               	movf	getRF_KeyStatus@key,w
  8456  1C1D  0008               	return
  8457  1C1E                     __end_of_getRF_KeyStatus:	
  8458                           
  8459                           	psect	text35
  8460  1BFC                     __ptext35:	
  8461 ;; *************** function _getBuz_GO *****************
  8462 ;; Defined at:
  8463 ;;		line 82 in file "../src/Buzzer_B1.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;		None
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  i               2    4[BANK0 ] int 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  2    0[BANK0 ] int 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;Total ram usage:        6 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    5
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_setRF_Main
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           
  8492                           ;psect for function _getBuz_GO
  8493  1BFC                     _getBuz_GO:	
  8494                           
  8495                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8496                           
  8497                           ;incstack = 0
  8498                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8499  1BFC  0022               	movlb	2	; select bank2
  8500  1BFD  0C20               	rrf	_Buz1^(0+256),w
  8501  1BFE  3901               	andlw	1
  8502  1BFF  0020               	movlb	0	; select bank0
  8503  1C00  00A2               	movwf	??_getBuz_GO
  8504  1C01  01A3               	clrf	??_getBuz_GO+1
  8505  1C02  0822               	movf	??_getBuz_GO,w
  8506  1C03  00A4               	movwf	getBuz_GO@i
  8507  1C04  0823               	movf	??_getBuz_GO+1,w
  8508  1C05  00A5               	movwf	getBuz_GO@i+1
  8509                           
  8510                           ;Buzzer_B1.c: 84: return i;
  8511  1C06  0825               	movf	getBuz_GO@i+1,w
  8512  1C07  01A1               	clrf	?_getBuz_GO+1
  8513  1C08  07A1               	addwf	?_getBuz_GO+1,f
  8514  1C09  0824               	movf	getBuz_GO@i,w
  8515  1C0A  01A0               	clrf	?_getBuz_GO
  8516  1C0B  07A0               	addwf	?_getBuz_GO,f
  8517  1C0C  0008               	return
  8518  1C0D                     __end_of_getBuz_GO:	
  8519                           
  8520                           	psect	text36
  8521  1B99                     __ptext36:	
  8522 ;; *************** function _RF_RxDisable *****************
  8523 ;; Defined at:
  8524 ;;		line 154 in file "../src/RF_Control_B1.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;		None
  8529 ;; Return value:  Size  Location     Type
  8530 ;;		None               void
  8531 ;; Registers used:
  8532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;Total ram usage:        0 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    7
  8545 ;; This function calls:
  8546 ;;		_CC2500_WriteCommand
  8547 ;; This function is called by:
  8548 ;;		_setRF_Main
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _RF_RxDisable
  8554  1B99                     _RF_RxDisable:	
  8555                           
  8556                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8557                           
  8558                           ;incstack = 0
  8559                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8560  1B99  0021               	movlb	1	; select bank1
  8561  1B9A  18A0               	btfsc	_RF1^(0+128),1
  8562  1B9B  2B9E               	goto	l2167
  8563  1B9C  1DA0               	btfss	_RF1^(0+128),3
  8564  1B9D  0008               	return
  8565  1B9E                     l2167:	
  8566                           
  8567                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8568  1B9E  11A0               	bcf	_RF1^(0+128),3
  8569                           
  8570                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8571  1B9F  10A0               	bcf	_RF1^(0+128),1
  8572                           
  8573                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8574  1BA0  3036               	movlw	54
  8575  1BA1  319E  2612  319B   	fcall	_CC2500_WriteCommand
  8576                           
  8577                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8578  1BA4  303A               	movlw	58
  8579  1BA5  319E  2612         	fcall	_CC2500_WriteCommand
  8580  1BA7  0008               	return
  8581  1BA8                     __end_of_RF_RxDisable:	
  8582                           
  8583                           	psect	text37
  8584  0849                     __ptext37:	
  8585 ;; *************** function _CC2500_TxData *****************
  8586 ;; Defined at:
  8587 ;;		line 32 in file "../src/CC2500_B1.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;		None
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;		None               void
  8594 ;; Registers used:
  8595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;Total ram usage:        2 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    7
  8608 ;; This function calls:
  8609 ;;		_CC2500_WriteByte
  8610 ;;		_CC2500_WriteCommand
  8611 ;;		_RF_Timeout_Counter
  8612 ;;		_setRF_TimeoutCleared
  8613 ;; This function is called by:
  8614 ;;		_setRF_Main
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           
  8619                           ;psect for function _CC2500_TxData
  8620  0849                     _CC2500_TxData:	
  8621                           
  8622                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8623                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8627  0849  3036               	movlw	54
  8628  084A  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8629                           
  8630                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8631  084D  303B               	movlw	59
  8632  084E  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8633                           
  8634                           ;CC2500_B1.c: 38: RC0 = 0;
  8635  0851  0020               	movlb	0	; select bank0
  8636  0852  100E               	bcf	14,0	;volatile
  8637                           
  8638                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8639  0853  307F               	movlw	127
  8640  0854  00A4               	movwf	??_CC2500_TxData
  8641  0855  0824               	movf	??_CC2500_TxData,w
  8642  0856  0021               	movlb	1	; select bank1
  8643  0857  00D1               	movwf	_SPI0Buffer^(0+128)
  8644                           
  8645                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8646  0858  285C               	goto	l8677
  8647  0859                     l8675:	
  8648                           
  8649                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8650  0859  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8651  085C                     l8677:	
  8652  085C  0020               	movlb	0	; select bank0
  8653  085D  1E8E               	btfss	14,5	;volatile
  8654  085E  2862               	goto	l8681
  8655  085F  0021               	movlb	1	; select bank1
  8656  0860  1F21               	btfss	(_RF1^(0+128)+1),6
  8657  0861  2859               	goto	l8675
  8658  0862                     l8681:	
  8659                           
  8660                           ;CC2500_B1.c: 42: };
  8661                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8662  0862  319A  223E  3188   	fcall	_setRF_TimeoutCleared
  8663                           
  8664                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8665  0865  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8666                           
  8667                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8668  0868  0021               	movlb	1	; select bank1
  8669  0869  0854               	movf	_Tx_Length^(0+128),w
  8670  086A  0020               	movlb	0	; select bank0
  8671  086B  00A4               	movwf	??_CC2500_TxData
  8672  086C  0824               	movf	??_CC2500_TxData,w
  8673  086D  0021               	movlb	1	; select bank1
  8674  086E  00D1               	movwf	_SPI0Buffer^(0+128)
  8675                           
  8676                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8677  086F  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8678                           
  8679                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8680  0872  0020               	movlb	0	; select bank0
  8681  0873  01A5               	clrf	CC2500_TxData@loop_e
  8682  0874                     l8695:	
  8683  0874  0021               	movlb	1	; select bank1
  8684  0875  0854               	movf	_Tx_Length^(0+128),w
  8685  0876  0020               	movlb	0	; select bank0
  8686  0877  0225               	subwf	CC2500_TxData@loop_e,w
  8687  0878  1803               	btfsc	3,0
  8688  0879  288D               	goto	l235
  8689                           
  8690                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8691  087A  0825               	movf	CC2500_TxData@loop_e,w
  8692  087B  3EA0               	addlw	_RF_Data& (0+255)
  8693  087C  0086               	movwf	6
  8694  087D  3001               	movlw	1	; select bank3/4
  8695  087E  0087               	movwf	7
  8696  087F  0801               	movf	1,w
  8697  0880  00A4               	movwf	??_CC2500_TxData
  8698  0881  0824               	movf	??_CC2500_TxData,w
  8699  0882  0021               	movlb	1	; select bank1
  8700  0883  00D1               	movwf	_SPI0Buffer^(0+128)
  8701                           
  8702                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8703  0884  319D  25C5  3188   	fcall	_CC2500_WriteByte
  8704  0887  3001               	movlw	1
  8705  0888  0020               	movlb	0	; select bank0
  8706  0889  00A4               	movwf	??_CC2500_TxData
  8707  088A  0824               	movf	??_CC2500_TxData,w
  8708  088B  07A5               	addwf	CC2500_TxData@loop_e,f
  8709  088C  2874               	goto	l8695
  8710  088D                     l235:	
  8711                           
  8712                           ;CC2500_B1.c: 51: }
  8713                           ;CC2500_B1.c: 52: RC0 = 1;
  8714  088D  140E               	bsf	14,0	;volatile
  8715                           
  8716                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8717  088E  3035               	movlw	53
  8718  088F  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8719                           
  8720                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8721  0892  2896               	goto	l8701
  8722  0893                     l8699:	
  8723                           
  8724                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8725  0893  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8726  0896                     l8701:	
  8727  0896  0020               	movlb	0	; select bank0
  8728  0897  188E               	btfsc	14,1	;volatile
  8729  0898  289C               	goto	l8705
  8730  0899  0021               	movlb	1	; select bank1
  8731  089A  1F21               	btfss	(_RF1^(0+128)+1),6
  8732  089B  2893               	goto	l8699
  8733  089C                     l8705:	
  8734                           
  8735                           ;CC2500_B1.c: 56: };
  8736                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8737  089C  319A  223E  3188   	fcall	_setRF_TimeoutCleared
  8738                           
  8739                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8740  089F  28A3               	goto	l8709
  8741  08A0                     l8707:	
  8742                           
  8743                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8744  08A0  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  8745  08A3                     l8709:	
  8746  08A3  0020               	movlb	0	; select bank0
  8747  08A4  1C8E               	btfss	14,1	;volatile
  8748  08A5  28A9               	goto	l8713
  8749  08A6  0021               	movlb	1	; select bank1
  8750  08A7  1F21               	btfss	(_RF1^(0+128)+1),6
  8751  08A8  28A0               	goto	l8707
  8752  08A9                     l8713:	
  8753                           
  8754                           ;CC2500_B1.c: 61: };
  8755                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8756  08A9  319A  223E  3188   	fcall	_setRF_TimeoutCleared
  8757                           
  8758                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8759  08AC  3036               	movlw	54
  8760  08AD  319E  2612  3188   	fcall	_CC2500_WriteCommand
  8761                           
  8762                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8763  08B0  303B               	movlw	59
  8764  08B1  319E  2612         	fcall	_CC2500_WriteCommand
  8765                           
  8766                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8767  08B3  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8768  08B4  0008               	return
  8769  08B5                     __end_of_CC2500_TxData:	
  8770                           
  8771                           	psect	text38
  8772  1795                     __ptext38:	
  8773 ;; *************** function _CC2500_RxData *****************
  8774 ;; Defined at:
  8775 ;;		line 73 in file "../src/CC2500_B1.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8780 ;; Return value:  Size  Location     Type
  8781 ;;		None               void
  8782 ;; Registers used:
  8783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;Total ram usage:        2 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    7
  8796 ;; This function calls:
  8797 ;;		_CC2500_ReadByte
  8798 ;;		_CC2500_ReadStatus
  8799 ;;		_CC2500_WriteByte
  8800 ;;		_CC2500_WriteCommand
  8801 ;;		_RF_Timeout_Counter
  8802 ;;		_setRF_TimeoutCleared
  8803 ;; This function is called by:
  8804 ;;		_setRF_Main
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _CC2500_RxData
  8810  1795                     _CC2500_RxData:	
  8811                           
  8812                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8813                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8814                           
  8815                           ;incstack = 0
  8816                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8817  1795  0020               	movlb	0	; select bank0
  8818  1796  188E               	btfsc	14,1	;volatile
  8819  1797  0008               	return
  8820                           
  8821                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8822  1798  303B               	movlw	59
  8823  1799  319F  27DB  3197   	fcall	_CC2500_ReadStatus
  8824                           
  8825                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8826  179C  0021               	movlb	1	; select bank1
  8827  179D  0857               	movf	_s_data^(0+128),w
  8828  179E  1903               	btfsc	3,2
  8829  179F  0008               	return
  8830                           
  8831                           ;CC2500_B1.c: 90: RC0 = 0;
  8832  17A0  0020               	movlb	0	; select bank0
  8833  17A1  100E               	bcf	14,0	;volatile
  8834                           
  8835                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8836  17A2  30FF               	movlw	255
  8837  17A3  00A4               	movwf	??_CC2500_RxData
  8838  17A4  0824               	movf	??_CC2500_RxData,w
  8839  17A5  0021               	movlb	1	; select bank1
  8840  17A6  00D1               	movwf	_SPI0Buffer^(0+128)
  8841                           
  8842                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8843  17A7  2FAB               	goto	l8733
  8844  17A8                     l8731:	
  8845                           
  8846                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8847  17A8  319C  24FC  3197   	fcall	_RF_Timeout_Counter
  8848  17AB                     l8733:	
  8849  17AB  0020               	movlb	0	; select bank0
  8850  17AC  1E8E               	btfss	14,5	;volatile
  8851  17AD  2FB1               	goto	l8737
  8852  17AE  0021               	movlb	1	; select bank1
  8853  17AF  1F21               	btfss	(_RF1^(0+128)+1),6
  8854  17B0  2FA8               	goto	l8731
  8855  17B1                     l8737:	
  8856                           
  8857                           ;CC2500_B1.c: 95: };
  8858                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8859  17B1  319A  223E  3197   	fcall	_setRF_TimeoutCleared
  8860                           
  8861                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8862  17B4  319D  25C5  3197   	fcall	_CC2500_WriteByte
  8863                           
  8864                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8865  17B7  319E  269A  3197   	fcall	_CC2500_ReadByte
  8866                           
  8867                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8868  17BA  0021               	movlb	1	; select bank1
  8869  17BB  0851               	movf	_SPI0Buffer^(0+128),w
  8870  17BC  0020               	movlb	0	; select bank0
  8871  17BD  00A4               	movwf	??_CC2500_RxData
  8872  17BE  0824               	movf	??_CC2500_RxData,w
  8873  17BF  0021               	movlb	1	; select bank1
  8874  17C0  00D0               	movwf	_Rx_Length^(0+128)
  8875                           
  8876                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8877  17C1  0020               	movlb	0	; select bank0
  8878  17C2  01A5               	clrf	CC2500_RxData@loop_f
  8879  17C3                     l8753:	
  8880  17C3  0021               	movlb	1	; select bank1
  8881  17C4  0850               	movf	_Rx_Length^(0+128),w
  8882  17C5  0020               	movlb	0	; select bank0
  8883  17C6  0225               	subwf	CC2500_RxData@loop_f,w
  8884  17C7  1803               	btfsc	3,0
  8885  17C8  2FDC               	goto	l8755
  8886                           
  8887                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8888  17C9  319E  269A  3197   	fcall	_CC2500_ReadByte
  8889                           
  8890                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8891  17CC  0021               	movlb	1	; select bank1
  8892  17CD  0851               	movf	_SPI0Buffer^(0+128),w
  8893  17CE  0020               	movlb	0	; select bank0
  8894  17CF  00A4               	movwf	??_CC2500_RxData
  8895  17D0  0825               	movf	CC2500_RxData@loop_f,w
  8896  17D1  3EA0               	addlw	_RF_Data& (0+255)
  8897  17D2  0086               	movwf	6
  8898  17D3  3001               	movlw	1	; select bank3/4
  8899  17D4  0087               	movwf	7
  8900  17D5  0824               	movf	??_CC2500_RxData,w
  8901  17D6  0081               	movwf	1
  8902  17D7  3001               	movlw	1
  8903  17D8  00A4               	movwf	??_CC2500_RxData
  8904  17D9  0824               	movf	??_CC2500_RxData,w
  8905  17DA  07A5               	addwf	CC2500_RxData@loop_f,f
  8906  17DB  2FC3               	goto	l8753
  8907  17DC                     l8755:	
  8908                           
  8909                           ;CC2500_B1.c: 104: }
  8910                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8911  17DC  319E  269A  3197   	fcall	_CC2500_ReadByte
  8912                           
  8913                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8914  17DF  0021               	movlb	1	; select bank1
  8915  17E0  0851               	movf	_SPI0Buffer^(0+128),w
  8916  17E1  0020               	movlb	0	; select bank0
  8917  17E2  00A4               	movwf	??_CC2500_RxData
  8918  17E3  0824               	movf	??_CC2500_RxData,w
  8919  17E4  0021               	movlb	1	; select bank1
  8920  17E5  00CF               	movwf	_RSSI^(0+128)
  8921                           
  8922                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8923  17E6  319E  269A  3197   	fcall	_CC2500_ReadByte
  8924                           
  8925                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8926  17E9  0021               	movlb	1	; select bank1
  8927  17EA  0851               	movf	_SPI0Buffer^(0+128),w
  8928  17EB  0020               	movlb	0	; select bank0
  8929  17EC  00A4               	movwf	??_CC2500_RxData
  8930  17ED  0824               	movf	??_CC2500_RxData,w
  8931  17EE  0021               	movlb	1	; select bank1
  8932  17EF  00C8               	movwf	_CRC^(0+128)
  8933                           
  8934                           ;CC2500_B1.c: 109: RC0 = 1;
  8935  17F0  0020               	movlb	0	; select bank0
  8936  17F1  140E               	bsf	14,0	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8939  17F2  0021               	movlb	1	; select bank1
  8940  17F3  1BC8               	btfsc	_CRC^(0+128),7
  8941                           
  8942                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8943  17F4  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8944                           
  8945                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8946  17F5  11A0               	bcf	_RF1^(0+128),3
  8947                           
  8948                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8949  17F6  14A0               	bsf	_RF1^(0+128),1
  8950                           
  8951                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8952  17F7  3036               	movlw	54
  8953  17F8  319E  2612  3197   	fcall	_CC2500_WriteCommand
  8954                           
  8955                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8956  17FB  303A               	movlw	58
  8957  17FC  319E  2612         	fcall	_CC2500_WriteCommand
  8958  17FE  0021               	movlb	1	; select bank1
  8959  17FF  0008               	return
  8960  1800                     __end_of_CC2500_RxData:	
  8961                           
  8962                           	psect	text39
  8963  1FDB                     __ptext39:	
  8964 ;; *************** function _CC2500_ReadStatus *****************
  8965 ;; Defined at:
  8966 ;;		line 308 in file "../src/CC2500_B1.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  status_addr     1    wreg     unsigned char 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;		None               void
  8973 ;; Registers used:
  8974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;Total ram usage:        2 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    6
  8987 ;; This function calls:
  8988 ;;		_CC2500_ReadByte
  8989 ;;		_CC2500_WriteByte
  8990 ;;		_RF_Timeout_Counter
  8991 ;;		_setRF_TimeoutCleared
  8992 ;; This function is called by:
  8993 ;;		_CC2500_RxData
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _CC2500_ReadStatus
  8999  1FDB                     _CC2500_ReadStatus:	
  9000                           
  9001                           ;incstack = 0
  9002                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9003                           ;CC2500_ReadStatus@status_addr stored from wreg
  9004  1FDB  0020               	movlb	0	; select bank0
  9005  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9006                           
  9007                           ;CC2500_B1.c: 309: RC0 = 0;
  9008  1FDD  100E               	bcf	14,0	;volatile
  9009                           
  9010                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9011  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9012  1FDF  3EC0               	addlw	192
  9013  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  9014  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  9015  1FE2  0021               	movlb	1	; select bank1
  9016  1FE3  00D1               	movwf	_SPI0Buffer^(0+128)
  9017                           
  9018                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9019  1FE4  2FE8               	goto	l8583
  9020  1FE5                     l8581:	
  9021                           
  9022                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9023  1FE5  319C  24FC  319F   	fcall	_RF_Timeout_Counter
  9024  1FE8                     l8583:	
  9025  1FE8  0020               	movlb	0	; select bank0
  9026  1FE9  1E8E               	btfss	14,5	;volatile
  9027  1FEA  2FEE               	goto	l8587
  9028  1FEB  0021               	movlb	1	; select bank1
  9029  1FEC  1F21               	btfss	(_RF1^(0+128)+1),6
  9030  1FED  2FE5               	goto	l8581
  9031  1FEE                     l8587:	
  9032                           
  9033                           ;CC2500_B1.c: 314: };
  9034                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9035  1FEE  319A  223E  319F   	fcall	_setRF_TimeoutCleared
  9036                           
  9037                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9038  1FF1  319D  25C5  319F   	fcall	_CC2500_WriteByte
  9039                           
  9040                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9041  1FF4  319E  269A         	fcall	_CC2500_ReadByte
  9042                           
  9043                           ;CC2500_B1.c: 319: RC0 = 1;
  9044  1FF6  0020               	movlb	0	; select bank0
  9045  1FF7  140E               	bsf	14,0	;volatile
  9046                           
  9047                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9048  1FF8  0021               	movlb	1	; select bank1
  9049  1FF9  0851               	movf	_SPI0Buffer^(0+128),w
  9050  1FFA  0020               	movlb	0	; select bank0
  9051  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  9052  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  9053  1FFD  0021               	movlb	1	; select bank1
  9054  1FFE  00D7               	movwf	_s_data^(0+128)
  9055  1FFF  0008               	return
  9056  2000                     __end_of_CC2500_ReadStatus:	
  9057                           
  9058                           	psect	text40
  9059  1E9A                     __ptext40:	
  9060 ;; *************** function _CC2500_ReadByte *****************
  9061 ;; Defined at:
  9062 ;;		line 242 in file "../src/CC2500_B1.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;		None               void
  9069 ;; Registers used:
  9070 ;;		wreg, status,2, status,0
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:        2 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    5
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_CC2500_RxData
  9087 ;;		_CC2500_ReadStatus
  9088 ;;		_CC2500_ReadREG
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function _CC2500_ReadByte
  9094  1E9A                     _CC2500_ReadByte:	
  9095                           
  9096                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9097                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9098                           
  9099                           ;incstack = 0
  9100                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9101  1E9A  0020               	movlb	0	; select bank0
  9102  1E9B  01A1               	clrf	CC2500_ReadByte@loop_b
  9103  1E9C                     L3:	
  9104  1E9C  3008               	movlw	8
  9105  1E9D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9106  1E9E  1803               	btfsc	3,0
  9107  1E9F  0008               	return
  9108                           
  9109                           ;CC2500_B1.c: 245: RC3 = 1;
  9110  1EA0  158E               	bsf	14,3	;volatile
  9111                           
  9112                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9113  1EA1  1003               	clrc
  9114  1EA2  0021               	movlb	1	; select bank1
  9115  1EA3  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9116                           
  9117                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9118  1EA4  0020               	movlb	0	; select bank0
  9119  1EA5  1E8E               	btfss	14,5	;volatile
  9120  1EA6  2EAA               	goto	l8553
  9121                           
  9122                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9123  1EA7  0021               	movlb	1	; select bank1
  9124  1EA8  1451               	bsf	_SPI0Buffer^(0+128),0
  9125  1EA9  2EB0               	goto	l8555
  9126  1EAA                     l8553:	
  9127                           
  9128                           ;CC2500_B1.c: 249: else
  9129                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9130  1EAA  30FE               	movlw	254
  9131  1EAB  0020               	movlb	0	; select bank0
  9132  1EAC  00A0               	movwf	??_CC2500_ReadByte
  9133  1EAD  0820               	movf	??_CC2500_ReadByte,w
  9134  1EAE  0021               	movlb	1	; select bank1
  9135  1EAF  05D1               	andwf	_SPI0Buffer^(0+128),f
  9136  1EB0                     l8555:	
  9137                           
  9138                           ;CC2500_B1.c: 251: RC3 = 0;
  9139  1EB0  0020               	movlb	0	; select bank0
  9140  1EB1  118E               	bcf	14,3	;volatile
  9141  1EB2  3001               	movlw	1
  9142  1EB3  00A0               	movwf	??_CC2500_ReadByte
  9143  1EB4  0820               	movf	??_CC2500_ReadByte,w
  9144  1EB5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9145  1EB6  2E9C               	goto	L3
  9146  1EB7                     __end_of_CC2500_ReadByte:	
  9147                           
  9148                           	psect	text41
  9149  1D11                     __ptext41:	
  9150 ;; *************** function _CC2500_PowerOnInitial *****************
  9151 ;; Defined at:
  9152 ;;		line 126 in file "../src/CC2500_B1.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;		None
  9155 ;; Auto vars:     Size  Location     Type
  9156 ;;		None
  9157 ;; Return value:  Size  Location     Type
  9158 ;;		None               void
  9159 ;; Registers used:
  9160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;Total ram usage:        0 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    8
  9173 ;; This function calls:
  9174 ;;		_CC2500_ClearRXFIFO
  9175 ;;		_CC2500_ClearTXFIFO
  9176 ;;		_CC2500_FrequencyCabr
  9177 ;;		_CC2500_InitPATable
  9178 ;;		_CC2500_InitSetREG
  9179 ;;		_CC2500_PowerRST
  9180 ;;		_CC2500_SIDLEMode
  9181 ;; This function is called by:
  9182 ;;		_main
  9183 ;;		_setRF_Main
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           
  9188                           ;psect for function _CC2500_PowerOnInitial
  9189  1D11                     _CC2500_PowerOnInitial:	
  9190                           
  9191                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9192                           
  9193                           ;incstack = 0
  9194                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9195  1D11  3188  2005  319D   	fcall	_CC2500_PowerRST
  9196                           
  9197                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9198  1D14  3190  202A  319D   	fcall	_CC2500_InitSetREG
  9199                           
  9200                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9201  1D17  319E  26F4  319D   	fcall	_CC2500_InitPATable
  9202                           
  9203                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9204  1D1A  319A  2246  319D   	fcall	_CC2500_ClearTXFIFO
  9205                           
  9206                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9207  1D1D  319A  2242  319D   	fcall	_CC2500_ClearRXFIFO
  9208                           
  9209                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9210  1D20  319B  2356  319D   	fcall	_CC2500_FrequencyCabr
  9211                           
  9212                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9213  1D23  319A  224A         	fcall	_CC2500_SIDLEMode
  9214  1D25  0008               	return
  9215  1D26                     __end_of_CC2500_PowerOnInitial:	
  9216                           
  9217                           	psect	text42
  9218  1A4A                     __ptext42:	
  9219 ;; *************** function _CC2500_SIDLEMode *****************
  9220 ;; Defined at:
  9221 ;;		line 216 in file "../src/CC2500_B1.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;		None
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;		None
  9226 ;; Return value:  Size  Location     Type
  9227 ;;		None               void
  9228 ;; Registers used:
  9229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;Total ram usage:        0 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:    7
  9242 ;; This function calls:
  9243 ;;		_CC2500_WriteCommand
  9244 ;; This function is called by:
  9245 ;;		_CC2500_PowerOnInitial
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           
  9250                           ;psect for function _CC2500_SIDLEMode
  9251  1A4A                     _CC2500_SIDLEMode:	
  9252                           
  9253                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9257  1A4A  3036               	movlw	54
  9258  1A4B  319E  2612         	fcall	_CC2500_WriteCommand
  9259  1A4D  0008               	return
  9260  1A4E                     __end_of_CC2500_SIDLEMode:	
  9261                           
  9262                           	psect	text43
  9263  0805                     __ptext43:	
  9264 ;; *************** function _CC2500_PowerRST *****************
  9265 ;; Defined at:
  9266 ;;		line 139 in file "../src/CC2500_B1.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        1 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    6
  9287 ;; This function calls:
  9288 ;;		_CC2500_WriteByte
  9289 ;;		_DelayTime_1us
  9290 ;;		_RF_Timeout_Counter
  9291 ;;		_setRF_TimeoutCleared
  9292 ;; This function is called by:
  9293 ;;		_CC2500_PowerOnInitial
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           
  9298                           ;psect for function _CC2500_PowerRST
  9299  0805                     _CC2500_PowerRST:	
  9300                           
  9301                           ;CC2500_B1.c: 140: RC3 = 0;
  9302                           
  9303                           ;incstack = 0
  9304                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9305  0805  0020               	movlb	0	; select bank0
  9306  0806  118E               	bcf	14,3	;volatile
  9307                           
  9308                           ;CC2500_B1.c: 141: RC4 = 0;
  9309  0807  120E               	bcf	14,4	;volatile
  9310                           
  9311                           ;CC2500_B1.c: 142: RC0 = 1;
  9312  0808  140E               	bsf	14,0	;volatile
  9313                           
  9314                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9315  0809  300A               	movlw	10
  9316  080A  00A0               	movwf	DelayTime_1us@count
  9317  080B  3000               	movlw	0
  9318  080C  00A1               	movwf	DelayTime_1us@count+1
  9319  080D  3190  2004  3188   	fcall	_DelayTime_1us
  9320                           
  9321                           ;CC2500_B1.c: 144: RC0 = 0;
  9322  0810  0020               	movlb	0	; select bank0
  9323  0811  100E               	bcf	14,0	;volatile
  9324                           
  9325                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9326  0812  300A               	movlw	10
  9327  0813  00A0               	movwf	DelayTime_1us@count
  9328  0814  3000               	movlw	0
  9329  0815  00A1               	movwf	DelayTime_1us@count+1
  9330  0816  3190  2004  3188   	fcall	_DelayTime_1us
  9331                           
  9332                           ;CC2500_B1.c: 146: RC0 = 1;
  9333  0819  0020               	movlb	0	; select bank0
  9334  081A  140E               	bsf	14,0	;volatile
  9335                           
  9336                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9337  081B  3028               	movlw	40
  9338  081C  00A0               	movwf	DelayTime_1us@count
  9339  081D  3000               	movlw	0
  9340  081E  00A1               	movwf	DelayTime_1us@count+1
  9341  081F  3190  2004  3188   	fcall	_DelayTime_1us
  9342                           
  9343                           ;CC2500_B1.c: 148: RC0 = 0;
  9344  0822  0020               	movlb	0	; select bank0
  9345  0823  100E               	bcf	14,0	;volatile
  9346                           
  9347                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9348  0824  3030               	movlw	48
  9349  0825  00A6               	movwf	??_CC2500_PowerRST
  9350  0826  0826               	movf	??_CC2500_PowerRST,w
  9351  0827  0021               	movlb	1	; select bank1
  9352  0828  00D1               	movwf	_SPI0Buffer^(0+128)
  9353                           
  9354                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9355  0829  282D               	goto	l8611
  9356  082A                     l8609:	
  9357                           
  9358                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9359  082A  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  9360  082D                     l8611:	
  9361  082D  0020               	movlb	0	; select bank0
  9362  082E  1E8E               	btfss	14,5	;volatile
  9363  082F  2833               	goto	l8615
  9364  0830  0021               	movlb	1	; select bank1
  9365  0831  1F21               	btfss	(_RF1^(0+128)+1),6
  9366  0832  282A               	goto	l8609
  9367  0833                     l8615:	
  9368                           
  9369                           ;CC2500_B1.c: 152: };
  9370                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9371  0833  319A  223E  3188   	fcall	_setRF_TimeoutCleared
  9372                           
  9373                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9374  0836  319D  25C5  3188   	fcall	_CC2500_WriteByte
  9375                           
  9376                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9377  0839  283D               	goto	l8621
  9378  083A                     l8619:	
  9379                           
  9380                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9381  083A  319C  24FC  3188   	fcall	_RF_Timeout_Counter
  9382  083D                     l8621:	
  9383  083D  0020               	movlb	0	; select bank0
  9384  083E  1E8E               	btfss	14,5	;volatile
  9385  083F  2843               	goto	l8625
  9386  0840  0021               	movlb	1	; select bank1
  9387  0841  1F21               	btfss	(_RF1^(0+128)+1),6
  9388  0842  283A               	goto	l8619
  9389  0843                     l8625:	
  9390                           
  9391                           ;CC2500_B1.c: 157: };
  9392                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9393  0843  319A  223E         	fcall	_setRF_TimeoutCleared
  9394                           
  9395                           ;CC2500_B1.c: 159: RC4 = 0;
  9396  0845  0020               	movlb	0	; select bank0
  9397  0846  120E               	bcf	14,4	;volatile
  9398                           
  9399                           ;CC2500_B1.c: 160: RC0 = 1;
  9400  0847  140E               	bsf	14,0	;volatile
  9401  0848  0008               	return
  9402  0849                     __end_of_CC2500_PowerRST:	
  9403                           
  9404                           	psect	text44
  9405  102A                     __ptext44:	
  9406 ;; *************** function _CC2500_InitSetREG *****************
  9407 ;; Defined at:
  9408 ;;		line 166 in file "../src/CC2500_B1.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9413 ;;  temp2           1    7[BANK0 ] unsigned char 
  9414 ;;  temp1           1    6[BANK0 ] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;		None               void
  9417 ;; Registers used:
  9418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;Total ram usage:        4 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    7
  9431 ;; This function calls:
  9432 ;;		_CC2500_WriteREG
  9433 ;; This function is called by:
  9434 ;;		_CC2500_PowerOnInitial
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           
  9439                           ;psect for function _CC2500_InitSetREG
  9440  102A                     _CC2500_InitSetREG:	
  9441                           
  9442                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9443                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9444                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9448  102A  0020               	movlb	0	; select bank0
  9449  102B  01A8               	clrf	CC2500_InitSetREG@loop_c
  9450  102C                     L4:	
  9451  102C  302F               	movlw	47
  9452  102D  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9453  102E  1803               	btfsc	3,0
  9454  102F  0008               	return
  9455                           
  9456                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9457  1030  0828               	movf	CC2500_InitSetREG@loop_c,w
  9458  1031  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9459  1032  0084               	movwf	4
  9460  1033  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9461  1034  1803               	skipnc
  9462  1035  3E01               	addlw	1
  9463  1036  0085               	movwf	5
  9464  1037  0800               	movf	0,w	;code access
  9465  1038  00A5               	movwf	??_CC2500_InitSetREG
  9466  1039  0825               	movf	??_CC2500_InitSetREG,w
  9467  103A  00A6               	movwf	CC2500_InitSetREG@temp1
  9468                           
  9469                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9470  103B  0828               	movf	CC2500_InitSetREG@loop_c,w
  9471  103C  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9472  103D  0084               	movwf	4
  9473  103E  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9474  103F  1803               	skipnc
  9475  1040  3E01               	addlw	1
  9476  1041  0085               	movwf	5
  9477  1042  0800               	movf	0,w	;code access
  9478  1043  00A5               	movwf	??_CC2500_InitSetREG
  9479  1044  0825               	movf	??_CC2500_InitSetREG,w
  9480  1045  00A7               	movwf	CC2500_InitSetREG@temp2
  9481                           
  9482                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9483  1046  0827               	movf	CC2500_InitSetREG@temp2,w
  9484  1047  00A5               	movwf	??_CC2500_InitSetREG
  9485  1048  0825               	movf	??_CC2500_InitSetREG,w
  9486  1049  00A2               	movwf	CC2500_WriteREG@value
  9487  104A  0826               	movf	CC2500_InitSetREG@temp1,w
  9488  104B  319F  27B8  3190   	fcall	_CC2500_WriteREG
  9489  104E  3001               	movlw	1
  9490  104F  0020               	movlb	0	; select bank0
  9491  1050  00A5               	movwf	??_CC2500_InitSetREG
  9492  1051  0825               	movf	??_CC2500_InitSetREG,w
  9493  1052  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9494  1053  282C               	goto	L4
  9495  1054                     __end_of_CC2500_InitSetREG:	
  9496                           
  9497                           	psect	text45
  9498  1EF4                     __ptext45:	
  9499 ;; *************** function _CC2500_InitPATable *****************
  9500 ;; Defined at:
  9501 ;;		line 181 in file "../src/CC2500_B1.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;		None
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9506 ;;  temp            1    6[BANK0 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;Total ram usage:        3 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    7
  9523 ;; This function calls:
  9524 ;;		_CC2500_WriteREG
  9525 ;; This function is called by:
  9526 ;;		_CC2500_PowerOnInitial
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _CC2500_InitPATable
  9532  1EF4                     _CC2500_InitPATable:	
  9533                           
  9534                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9535                           ;CC2500_B1.c: 183: unsigned char temp;
  9536                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9540  1EF4  0020               	movlb	0	; select bank0
  9541  1EF5  01A7               	clrf	CC2500_InitPATable@loop_d
  9542  1EF6                     L5:	
  9543  1EF6  3008               	movlw	8
  9544  1EF7  0227               	subwf	CC2500_InitPATable@loop_d,w
  9545  1EF8  1803               	btfsc	3,0
  9546  1EF9  0008               	return
  9547                           
  9548                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9549  1EFA  0827               	movf	CC2500_InitPATable@loop_d,w
  9550  1EFB  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9551  1EFC  0084               	movwf	4
  9552  1EFD  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9553  1EFE  1803               	skipnc
  9554  1EFF  3E01               	addlw	1
  9555  1F00  0085               	movwf	5
  9556  1F01  0800               	movf	0,w	;code access
  9557  1F02  00A5               	movwf	??_CC2500_InitPATable
  9558  1F03  0825               	movf	??_CC2500_InitPATable,w
  9559  1F04  00A6               	movwf	CC2500_InitPATable@temp
  9560                           
  9561                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9562  1F05  0826               	movf	CC2500_InitPATable@temp,w
  9563  1F06  00A5               	movwf	??_CC2500_InitPATable
  9564  1F07  0825               	movf	??_CC2500_InitPATable,w
  9565  1F08  00A2               	movwf	CC2500_WriteREG@value
  9566  1F09  303E               	movlw	62
  9567  1F0A  319F  27B8  319E   	fcall	_CC2500_WriteREG
  9568  1F0D  3001               	movlw	1
  9569  1F0E  0020               	movlb	0	; select bank0
  9570  1F0F  00A5               	movwf	??_CC2500_InitPATable
  9571  1F10  0825               	movf	??_CC2500_InitPATable,w
  9572  1F11  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9573  1F12  2EF6               	goto	L5
  9574  1F13                     __end_of_CC2500_InitPATable:	
  9575                           
  9576                           	psect	text46
  9577  1FB8                     __ptext46:	
  9578 ;; *************** function _CC2500_WriteREG *****************
  9579 ;; Defined at:
  9580 ;;		line 258 in file "../src/CC2500_B1.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;  w_addr          1    wreg     unsigned char 
  9583 ;;  value           1    2[BANK0 ] unsigned char 
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9586 ;; Return value:  Size  Location     Type
  9587 ;;		None               void
  9588 ;; Registers used:
  9589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        3 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    6
  9602 ;; This function calls:
  9603 ;;		_CC2500_WriteByte
  9604 ;;		_RF_Timeout_Counter
  9605 ;;		_setRF_TimeoutCleared
  9606 ;; This function is called by:
  9607 ;;		_CC2500_InitSetREG
  9608 ;;		_CC2500_InitPATable
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function _CC2500_WriteREG
  9614  1FB8                     _CC2500_WriteREG:	
  9615                           
  9616                           ;incstack = 0
  9617                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9618                           ;CC2500_WriteREG@w_addr stored from wreg
  9619  1FB8  0020               	movlb	0	; select bank0
  9620  1FB9  00A4               	movwf	CC2500_WriteREG@w_addr
  9621                           
  9622                           ;CC2500_B1.c: 259: RC0 = 0;
  9623  1FBA  100E               	bcf	14,0	;volatile
  9624                           
  9625                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9626  1FBB  0824               	movf	CC2500_WriteREG@w_addr,w
  9627  1FBC  00A3               	movwf	??_CC2500_WriteREG
  9628  1FBD  0823               	movf	??_CC2500_WriteREG,w
  9629  1FBE  0021               	movlb	1	; select bank1
  9630  1FBF  00D1               	movwf	_SPI0Buffer^(0+128)
  9631                           
  9632                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9633  1FC0  2FC4               	goto	l8565
  9634  1FC1                     l8563:	
  9635                           
  9636                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9637  1FC1  319C  24FC  319F   	fcall	_RF_Timeout_Counter
  9638  1FC4                     l8565:	
  9639  1FC4  0020               	movlb	0	; select bank0
  9640  1FC5  1E8E               	btfss	14,5	;volatile
  9641  1FC6  2FCA               	goto	l8569
  9642  1FC7  0021               	movlb	1	; select bank1
  9643  1FC8  1F21               	btfss	(_RF1^(0+128)+1),6
  9644  1FC9  2FC1               	goto	l8563
  9645  1FCA                     l8569:	
  9646                           
  9647                           ;CC2500_B1.c: 263: };
  9648                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9649  1FCA  319A  223E  319F   	fcall	_setRF_TimeoutCleared
  9650                           
  9651                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9652  1FCD  319D  25C5  319F   	fcall	_CC2500_WriteByte
  9653                           
  9654                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9655  1FD0  0020               	movlb	0	; select bank0
  9656  1FD1  0822               	movf	CC2500_WriteREG@value,w
  9657  1FD2  00A3               	movwf	??_CC2500_WriteREG
  9658  1FD3  0823               	movf	??_CC2500_WriteREG,w
  9659  1FD4  0021               	movlb	1	; select bank1
  9660  1FD5  00D1               	movwf	_SPI0Buffer^(0+128)
  9661                           
  9662                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9663  1FD6  319D  25C5         	fcall	_CC2500_WriteByte
  9664                           
  9665                           ;CC2500_B1.c: 269: RC0 = 1;
  9666  1FD8  0020               	movlb	0	; select bank0
  9667  1FD9  140E               	bsf	14,0	;volatile
  9668  1FDA  0008               	return
  9669  1FDB                     __end_of_CC2500_WriteREG:	
  9670                           
  9671                           	psect	text47
  9672  1B56                     __ptext47:	
  9673 ;; *************** function _CC2500_FrequencyCabr *****************
  9674 ;; Defined at:
  9675 ;;		line 208 in file "../src/CC2500_B1.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;		None
  9680 ;; Return value:  Size  Location     Type
  9681 ;;		None               void
  9682 ;; Registers used:
  9683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;Total ram usage:        0 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    7
  9696 ;; This function calls:
  9697 ;;		_CC2500_WriteCommand
  9698 ;;		_DelayTime_1us
  9699 ;; This function is called by:
  9700 ;;		_CC2500_PowerOnInitial
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           
  9705                           ;psect for function _CC2500_FrequencyCabr
  9706  1B56                     _CC2500_FrequencyCabr:	
  9707                           
  9708                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9709                           
  9710                           ;incstack = 0
  9711                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9712  1B56  3033               	movlw	51
  9713  1B57  319E  2612  319B   	fcall	_CC2500_WriteCommand
  9714                           
  9715                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9716  1B5A  30E8               	movlw	232
  9717  1B5B  0020               	movlb	0	; select bank0
  9718  1B5C  00A0               	movwf	DelayTime_1us@count
  9719  1B5D  3003               	movlw	3
  9720  1B5E  00A1               	movwf	DelayTime_1us@count+1
  9721  1B5F  3190  2004         	fcall	_DelayTime_1us
  9722  1B61  0008               	return
  9723  1B62                     __end_of_CC2500_FrequencyCabr:	
  9724                           
  9725                           	psect	text48
  9726  1004                     __ptext48:	
  9727 ;; *************** function _DelayTime_1us *****************
  9728 ;; Defined at:
  9729 ;;		line 327 in file "../src/CC2500_B1.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;  count           2    0[BANK0 ] int 
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  j               2    4[BANK0 ] unsigned int 
  9734 ;;  i               2    2[BANK0 ] unsigned int 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;		None               void
  9737 ;; Registers used:
  9738 ;;		wreg, status,2
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9744 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;Total ram usage:        6 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    5
  9751 ;; This function calls:
  9752 ;;		Nothing
  9753 ;; This function is called by:
  9754 ;;		_CC2500_PowerRST
  9755 ;;		_CC2500_FrequencyCabr
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function _DelayTime_1us
  9761  1004                     _DelayTime_1us:	
  9762                           
  9763                           ;CC2500_B1.c: 328: unsigned int i, j;
  9764                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9768  1004  3001               	movlw	1
  9769  1005  0020               	movlb	0	; select bank0
  9770  1006  00A2               	movwf	DelayTime_1us@i
  9771  1007  3000               	movlw	0
  9772  1008  00A3               	movwf	DelayTime_1us@i+1
  9773  1009                     l347:	
  9774  1009  0821               	movf	DelayTime_1us@count+1,w
  9775  100A  0223               	subwf	DelayTime_1us@i+1,w
  9776  100B  1D03               	skipz
  9777  100C  280F               	goto	u5515
  9778  100D  0820               	movf	DelayTime_1us@count,w
  9779  100E  0222               	subwf	DelayTime_1us@i,w
  9780  100F                     u5515:	
  9781  100F  1803               	btfsc	3,0
  9782  1010  0008               	return
  9783                           
  9784                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9785  1011  01A4               	clrf	DelayTime_1us@j
  9786  1012  01A5               	clrf	DelayTime_1us@j+1
  9787  1013  3000               	movlw	0
  9788  1014  0225               	subwf	DelayTime_1us@j+1,w
  9789  1015  3002               	movlw	2
  9790  1016  1903               	skipnz
  9791  1017  0224               	subwf	DelayTime_1us@j,w
  9792  1018  1803               	btfsc	3,0
  9793  1019  2825               	goto	l6383
  9794  101A                     l6381:	
  9795  101A  3001               	movlw	1
  9796  101B  07A4               	addwf	DelayTime_1us@j,f
  9797  101C  3000               	movlw	0
  9798  101D  3DA5               	addwfc	DelayTime_1us@j+1,f
  9799  101E  3000               	movlw	0
  9800  101F  0225               	subwf	DelayTime_1us@j+1,w
  9801  1020  3002               	movlw	2
  9802  1021  1903               	skipnz
  9803  1022  0224               	subwf	DelayTime_1us@j,w
  9804  1023  1C03               	skipc
  9805  1024  281A               	goto	l6381
  9806  1025                     l6383:	
  9807  1025  3001               	movlw	1
  9808  1026  07A2               	addwf	DelayTime_1us@i,f
  9809  1027  3000               	movlw	0
  9810  1028  3DA3               	addwfc	DelayTime_1us@i+1,f
  9811  1029  2809               	goto	l347
  9812  102A                     __end_of_DelayTime_1us:	
  9813                           
  9814                           	psect	text49
  9815  1A46                     __ptext49:	
  9816 ;; *************** function _CC2500_ClearTXFIFO *****************
  9817 ;; Defined at:
  9818 ;;		line 194 in file "../src/CC2500_B1.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;		None               void
  9825 ;; Registers used:
  9826 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    7
  9839 ;; This function calls:
  9840 ;;		_CC2500_WriteCommand
  9841 ;; This function is called by:
  9842 ;;		_CC2500_PowerOnInitial
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _CC2500_ClearTXFIFO
  9848  1A46                     _CC2500_ClearTXFIFO:	
  9849                           
  9850                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9851                           
  9852                           ;incstack = 0
  9853                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9854  1A46  303B               	movlw	59
  9855  1A47  319E  2612         	fcall	_CC2500_WriteCommand
  9856  1A49  0008               	return
  9857  1A4A                     __end_of_CC2500_ClearTXFIFO:	
  9858                           
  9859                           	psect	text50
  9860  1A42                     __ptext50:	
  9861 ;; *************** function _CC2500_ClearRXFIFO *****************
  9862 ;; Defined at:
  9863 ;;		line 201 in file "../src/CC2500_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;		None               void
  9870 ;; Registers used:
  9871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        0 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    7
  9884 ;; This function calls:
  9885 ;;		_CC2500_WriteCommand
  9886 ;; This function is called by:
  9887 ;;		_CC2500_PowerOnInitial
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _CC2500_ClearRXFIFO
  9893  1A42                     _CC2500_ClearRXFIFO:	
  9894                           
  9895                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9899  1A42  303A               	movlw	58
  9900  1A43  319E  2612         	fcall	_CC2500_WriteCommand
  9901  1A45  0008               	return
  9902  1A46                     __end_of_CC2500_ClearRXFIFO:	
  9903                           
  9904                           	psect	text51
  9905  1E12                     __ptext51:	
  9906 ;; *************** function _CC2500_WriteCommand *****************
  9907 ;; Defined at:
  9908 ;;		line 292 in file "../src/CC2500_B1.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  command         1    wreg     unsigned char 
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  command         1    3[BANK0 ] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        2 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    6
  9929 ;; This function calls:
  9930 ;;		_CC2500_WriteByte
  9931 ;;		_RF_Timeout_Counter
  9932 ;;		_setRF_TimeoutCleared
  9933 ;; This function is called by:
  9934 ;;		_CC2500_TxData
  9935 ;;		_CC2500_RxData
  9936 ;;		_CC2500_ClearTXFIFO
  9937 ;;		_CC2500_ClearRXFIFO
  9938 ;;		_CC2500_FrequencyCabr
  9939 ;;		_CC2500_SIDLEMode
  9940 ;;		_setRF_Main
  9941 ;;		_RF_RxDisable
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           
  9946                           ;psect for function _CC2500_WriteCommand
  9947  1E12                     _CC2500_WriteCommand:	
  9948                           
  9949                           ;incstack = 0
  9950                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9951                           ;CC2500_WriteCommand@command stored from wreg
  9952  1E12  0020               	movlb	0	; select bank0
  9953  1E13  00A3               	movwf	CC2500_WriteCommand@command
  9954                           
  9955                           ;CC2500_B1.c: 293: RC0 = 0;
  9956  1E14  100E               	bcf	14,0	;volatile
  9957                           
  9958                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9959  1E15  0823               	movf	CC2500_WriteCommand@command,w
  9960  1E16  00A2               	movwf	??_CC2500_WriteCommand
  9961  1E17  0822               	movf	??_CC2500_WriteCommand,w
  9962  1E18  0021               	movlb	1	; select bank1
  9963  1E19  00D1               	movwf	_SPI0Buffer^(0+128)
  9964                           
  9965                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9966  1E1A  2E1E               	goto	l8531
  9967  1E1B                     l8529:	
  9968                           
  9969                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9970  1E1B  319C  24FC  319E   	fcall	_RF_Timeout_Counter
  9971  1E1E                     l8531:	
  9972  1E1E  0020               	movlb	0	; select bank0
  9973  1E1F  1E8E               	btfss	14,5	;volatile
  9974  1E20  2E24               	goto	l8535
  9975  1E21  0021               	movlb	1	; select bank1
  9976  1E22  1F21               	btfss	(_RF1^(0+128)+1),6
  9977  1E23  2E1B               	goto	l8529
  9978  1E24                     l8535:	
  9979                           
  9980                           ;CC2500_B1.c: 298: };
  9981                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9982  1E24  319A  223E  319E   	fcall	_setRF_TimeoutCleared
  9983                           
  9984                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9985  1E27  319D  25C5         	fcall	_CC2500_WriteByte
  9986                           
  9987                           ;CC2500_B1.c: 302: RC0 = 1;
  9988  1E29  0020               	movlb	0	; select bank0
  9989  1E2A  140E               	bsf	14,0	;volatile
  9990  1E2B  0008               	return
  9991  1E2C                     __end_of_CC2500_WriteCommand:	
  9992                           
  9993                           	psect	text52
  9994  1A3E                     __ptext52:	
  9995 ;; *************** function _setRF_TimeoutCleared *****************
  9996 ;; Defined at:
  9997 ;;		line 149 in file "../src/RF_Control_B1.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;		None
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;		None
 10002 ;; Return value:  Size  Location     Type
 10003 ;;		None               void
 10004 ;; Registers used:
 10005 ;;		status,2
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;Total ram usage:        0 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    5
 10018 ;; This function calls:
 10019 ;;		Nothing
 10020 ;; This function is called by:
 10021 ;;		_CC2500_TxData
 10022 ;;		_CC2500_RxData
 10023 ;;		_CC2500_PowerRST
 10024 ;;		_CC2500_WriteREG
 10025 ;;		_CC2500_WriteCommand
 10026 ;;		_CC2500_ReadStatus
 10027 ;;		_CC2500_ReadREG
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _setRF_TimeoutCleared
 10033  1A3E                     _setRF_TimeoutCleared:	
 10034                           
 10035                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10039  1A3E  0021               	movlb	1	; select bank1
 10040  1A3F  01AD               	clrf	(_RF1^(0+128)+13)
 10041  1A40  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10042  1A41  0008               	return
 10043  1A42                     __end_of_setRF_TimeoutCleared:	
 10044                           
 10045                           	psect	text53
 10046  1CFC                     __ptext53:	
 10047 ;; *************** function _RF_Timeout_Counter *****************
 10048 ;; Defined at:
 10049 ;;		line 141 in file "../src/RF_Control_B1.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;		None
 10054 ;; Return value:  Size  Location     Type
 10055 ;;		None               void
 10056 ;; Registers used:
 10057 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;Total ram usage:        0 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    5
 10070 ;; This function calls:
 10071 ;;		Nothing
 10072 ;; This function is called by:
 10073 ;;		_CC2500_TxData
 10074 ;;		_CC2500_RxData
 10075 ;;		_CC2500_PowerRST
 10076 ;;		_CC2500_WriteREG
 10077 ;;		_CC2500_WriteCommand
 10078 ;;		_CC2500_ReadStatus
 10079 ;;		_CC2500_ReadREG
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _RF_Timeout_Counter
 10085  1CFC                     _RF_Timeout_Counter:	
 10086                           
 10087                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10088                           
 10089                           ;incstack = 0
 10090                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10091  1CFC  3001               	movlw	1
 10092  1CFD  0021               	movlb	1	; select bank1
 10093  1CFE  07AD               	addwf	(_RF1^(0+128)+13),f
 10094  1CFF  3000               	movlw	0
 10095  1D00  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10096                           
 10097                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10098  1D01  300D               	movlw	13
 10099  1D02  3EA0               	addlw	_RF1& (0+255)
 10100  1D03  0086               	movwf	6
 10101  1D04  0187               	clrf	7
 10102  1D05  3F40               	moviw [0]fsr1
 10103  1D06  3AA8               	xorlw	168
 10104  1D07  1D03               	skipz
 10105  1D08  2D0B               	goto	u8795
 10106  1D09  3F41               	moviw [1]fsr1
 10107  1D0A  3A61               	xorlw	97
 10108  1D0B                     u8795:	
 10109  1D0B  1D03               	skipz
 10110  1D0C  0008               	return
 10111                           
 10112                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10113  1D0D  01AD               	clrf	(_RF1^(0+128)+13)
 10114  1D0E  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10115                           
 10116                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10117  1D0F  1721               	bsf	(_RF1^(0+128)+1),6
 10118  1D10  0008               	return
 10119  1D11                     __end_of_RF_Timeout_Counter:	
 10120                           
 10121                           	psect	text54
 10122  1DC5                     __ptext54:	
 10123 ;; *************** function _CC2500_WriteByte *****************
 10124 ;; Defined at:
 10125 ;;		line 226 in file "../src/CC2500_B1.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10130 ;; Return value:  Size  Location     Type
 10131 ;;		None               void
 10132 ;; Registers used:
 10133 ;;		wreg, status,2, status,0
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;Total ram usage:        2 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:    5
 10146 ;; This function calls:
 10147 ;;		Nothing
 10148 ;; This function is called by:
 10149 ;;		_CC2500_TxData
 10150 ;;		_CC2500_RxData
 10151 ;;		_CC2500_PowerRST
 10152 ;;		_CC2500_WriteREG
 10153 ;;		_CC2500_WriteCommand
 10154 ;;		_CC2500_ReadStatus
 10155 ;;		_CC2500_ReadREG
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _CC2500_WriteByte
 10161  1DC5                     _CC2500_WriteByte:	
 10162                           
 10163                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10164                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10168  1DC5  0020               	movlb	0	; select bank0
 10169  1DC6  01A1               	clrf	CC2500_WriteByte@loop_a
 10170  1DC7                     L6:	
 10171  1DC7  3008               	movlw	8
 10172  1DC8  0221               	subwf	CC2500_WriteByte@loop_a,w
 10173  1DC9  1803               	btfsc	3,0
 10174  1DCA  0008               	return
 10175                           
 10176                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10177  1DCB  0021               	movlb	1	; select bank1
 10178  1DCC  1FD1               	btfss	_SPI0Buffer^(0+128),7
 10179  1DCD  2DD1               	goto	l303
 10180                           
 10181                           ;CC2500_B1.c: 230: RC4 = 1;
 10182  1DCE  0020               	movlb	0	; select bank0
 10183  1DCF  160E               	bsf	14,4	;volatile
 10184  1DD0  2DD3               	goto	l304
 10185  1DD1                     l303:	
 10186                           
 10187                           ;CC2500_B1.c: 231: else
 10188                           ;CC2500_B1.c: 232: RC4 = 0;
 10189  1DD1  0020               	movlb	0	; select bank0
 10190  1DD2  120E               	bcf	14,4	;volatile
 10191  1DD3                     l304:	
 10192                           
 10193                           ;CC2500_B1.c: 233: RC3 = 1;
 10194  1DD3  158E               	bsf	14,3	;volatile
 10195                           
 10196                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10197  1DD4  1003               	clrc
 10198  1DD5  0021               	movlb	1	; select bank1
 10199  1DD6  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10200                           
 10201                           ;CC2500_B1.c: 235: RC3 = 0;
 10202  1DD7  0020               	movlb	0	; select bank0
 10203  1DD8  118E               	bcf	14,3	;volatile
 10204  1DD9  3001               	movlw	1
 10205  1DDA  00A0               	movwf	??_CC2500_WriteByte
 10206  1DDB  0820               	movf	??_CC2500_WriteByte,w
 10207  1DDC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10208  1DDD  2DC7               	goto	L6
 10209  1DDE                     __end_of_CC2500_WriteByte:	
 10210                           
 10211                           	psect	text55
 10212  1A1E                     __ptext55:	
 10213 ;; *************** function _RF_Initialization *****************
 10214 ;; Defined at:
 10215 ;;		line 9 in file "../src/RF_Control_B1.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;		None
 10220 ;; Return value:  Size  Location     Type
 10221 ;;		None               void
 10222 ;; Registers used:
 10223 ;;		wreg, status,2, status,0, pclath, cstack
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;Total ram usage:        0 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    6
 10236 ;; This function calls:
 10237 ;;		_setRF_Initialization
 10238 ;; This function is called by:
 10239 ;;		_main
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           
 10244                           ;psect for function _RF_Initialization
 10245  1A1E                     _RF_Initialization:	
 10246                           
 10247                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10248                           
 10249                           ;incstack = 0
 10250                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10251  1A1E  319A  22D3         	fcall	_setRF_Initialization
 10252  1A20  0008               	return
 10253  1A21                     __end_of_RF_Initialization:	
 10254                           
 10255                           	psect	text56
 10256  1AD3                     __ptext56:	
 10257 ;; *************** function _setRF_Initialization *****************
 10258 ;; Defined at:
 10259 ;;		line 17 in file "../src/RF_Control_B1.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;		None
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;		None
 10264 ;; Return value:  Size  Location     Type
 10265 ;;		None               void
 10266 ;; Registers used:
 10267 ;;		wreg
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;Total ram usage:        1 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:    5
 10280 ;; This function calls:
 10281 ;;		Nothing
 10282 ;; This function is called by:
 10283 ;;		_RF_Initialization
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           
 10288                           ;psect for function _setRF_Initialization
 10289  1AD3                     _setRF_Initialization:	
 10290                           
 10291                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10292                           
 10293                           ;incstack = 0
 10294                           ; Regs used in _setRF_Initialization: [wreg]
 10295  1AD3  3015               	movlw	21
 10296  1AD4  0020               	movlb	0	; select bank0
 10297  1AD5  00A0               	movwf	??_setRF_Initialization
 10298  1AD6  0820               	movf	??_setRF_Initialization,w
 10299  1AD7  0021               	movlb	1	; select bank1
 10300  1AD8  00D4               	movwf	_Tx_Length^(0+128)
 10301                           
 10302                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10303  1AD9  30C8               	movlw	200
 10304  1ADA  00A8               	movwf	(_RF1^(0+128)+8)
 10305  1ADB  3000               	movlw	0
 10306  1ADC  00A9               	movwf	(_RF1^(0+128)+9)
 10307  1ADD  0008               	return
 10308  1ADE                     __end_of_setRF_Initialization:	
 10309                           
 10310                           	psect	text57
 10311  1C65                     __ptext57:	
 10312 ;; *************** function _Mcu_Initialization *****************
 10313 ;; Defined at:
 10314 ;;		line 30 in file "../src/MCU_B1.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;		None
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;		None
 10319 ;; Return value:  Size  Location     Type
 10320 ;;		None               void
 10321 ;; Registers used:
 10322 ;;		wreg, status,2, status,0, pclath, cstack
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;Total ram usage:        0 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    6
 10335 ;; This function calls:
 10336 ;;		_ADC_Set
 10337 ;;		_Fosc_Set
 10338 ;;		_IOC_Set
 10339 ;;		_IO_Set
 10340 ;;		_TMR1_Set
 10341 ;;		_WDT_Set
 10342 ;; This function is called by:
 10343 ;;		_main
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           
 10348                           ;psect for function _Mcu_Initialization
 10349  1C65                     _Mcu_Initialization:	
 10350                           
 10351                           ;MCU_B1.c: 32: Fosc_Set();
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10355  1C65  319A  223A  319C   	fcall	_Fosc_Set
 10356                           
 10357                           ;MCU_B1.c: 34: IO_Set();
 10358  1C68  319D  25F8  319C   	fcall	_IO_Set
 10359                           
 10360                           ;MCU_B1.c: 36: ;;
 10361                           ;MCU_B1.c: 38: TMR1_Set();
 10362  1C6B  319B  233E  319C   	fcall	_TMR1_Set
 10363                           
 10364                           ;MCU_B1.c: 40: ADC_Set();
 10365  1C6E  319A  2267  319C   	fcall	_ADC_Set
 10366                           
 10367                           ;MCU_B1.c: 42: ;;
 10368                           ;MCU_B1.c: 44: ;;
 10369                           ;MCU_B1.c: 46: IOC_Set();
 10370  1C71  319A  22C8  319C   	fcall	_IOC_Set
 10371                           
 10372                           ;MCU_B1.c: 48: ;;
 10373                           ;MCU_B1.c: 50: ;;
 10374                           ;MCU_B1.c: 52: WDT_Set();
 10375  1C74  319B  234A         	fcall	_WDT_Set
 10376  1C76  0008               	return
 10377  1C77                     __end_of_Mcu_Initialization:	
 10378                           
 10379                           	psect	text58
 10380  1B4A                     __ptext58:	
 10381 ;; *************** function _WDT_Set *****************
 10382 ;; Defined at:
 10383 ;;		line 1102 in file "../src/MCU_B1.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;		None
 10388 ;; Return value:  Size  Location     Type
 10389 ;;		None               void
 10390 ;; Registers used:
 10391 ;;		wreg
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        1 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    5
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_Mcu_Initialization
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _WDT_Set
 10413  1B4A                     _WDT_Set:	
 10414                           
 10415                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _WDT_Set: [wreg]
 10419  1B4A  3017               	movlw	23
 10420  1B4B  0021               	movlb	1	; select bank1
 10421  1B4C  0097               	movwf	23	;volatile
 10422                           
 10423                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10424  1B4D  0022               	movlb	2	; select bank2
 10425  1B4E  1436               	bsf	_WDT^(0+256),0
 10426                           
 10427                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10428  1B4F  300A               	movlw	10
 10429  1B50  0020               	movlb	0	; select bank0
 10430  1B51  00A0               	movwf	??_WDT_Set
 10431  1B52  0820               	movf	??_WDT_Set,w
 10432  1B53  0022               	movlb	2	; select bank2
 10433  1B54  00B7               	movwf	(_WDT^(0+256)+1)
 10434  1B55  0008               	return
 10435  1B56                     __end_of_WDT_Set:	
 10436                           
 10437                           	psect	text59
 10438  1B3E                     __ptext59:	
 10439 ;; *************** function _TMR1_Set *****************
 10440 ;; Defined at:
 10441 ;;		line 226 in file "../src/MCU_B1.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;		None               void
 10448 ;; Registers used:
 10449 ;;		wreg
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    5
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_Mcu_Initialization
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _TMR1_Set
 10471  1B3E                     _TMR1_Set:	
 10472                           
 10473                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _TMR1_Set: [wreg]
 10477  1B3E  3041               	movlw	65
 10478  1B3F  0020               	movlb	0	; select bank0
 10479  1B40  0098               	movwf	24	;volatile
 10480                           
 10481                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10482  1B41  30FA               	movlw	250
 10483  1B42  0097               	movwf	23	;volatile
 10484                           
 10485                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10486  1B43  3038               	movlw	56
 10487  1B44  0096               	movwf	22	;volatile
 10488                           
 10489                           ;MCU_B1.c: 230: TMR1IE = 1;
 10490  1B45  0021               	movlb	1	; select bank1
 10491  1B46  1411               	bsf	17,0	;volatile
 10492                           
 10493                           ;MCU_B1.c: 231: PEIE = 1;
 10494  1B47  170B               	bsf	11,6	;volatile
 10495                           
 10496                           ;MCU_B1.c: 232: GIE = 1;
 10497  1B48  178B               	bsf	11,7	;volatile
 10498  1B49  0008               	return
 10499  1B4A                     __end_of_TMR1_Set:	
 10500                           
 10501                           	psect	text60
 10502  1DF8                     __ptext60:	
 10503 ;; *************** function _IO_Set *****************
 10504 ;; Defined at:
 10505 ;;		line 60 in file "../src/MCU_B1.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, status,2
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    5
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_Mcu_Initialization
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function _IO_Set
 10535  1DF8                     _IO_Set:	
 10536                           
 10537                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10538                           
 10539                           ;incstack = 0
 10540                           ; Regs used in _IO_Set: [wreg+status,2]
 10541  1DF8  30F7               	movlw	247
 10542  1DF9  0021               	movlb	1	; select bank1
 10543  1DFA  008C               	movwf	12	;volatile
 10544                           
 10545                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10546  1DFB  3004               	movlw	4
 10547  1DFC  008D               	movwf	13	;volatile
 10548                           
 10549                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10550  1DFD  3026               	movlw	38
 10551  1DFE  008E               	movwf	14	;volatile
 10552                           
 10553                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10554  1DFF  0022               	movlb	2	; select bank2
 10555  1E00  018C               	clrf	12	;volatile
 10556                           
 10557                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10558  1E01  018D               	clrf	13	;volatile
 10559                           
 10560                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10561  1E02  018E               	clrf	14	;volatile
 10562                           
 10563                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10564  1E03  300E               	movlw	14
 10565  1E04  0023               	movlb	3	; select bank3
 10566  1E05  008C               	movwf	12	;volatile
 10567                           
 10568                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10569  1E06  018D               	clrf	13	;volatile
 10570                           
 10571                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10572  1E07  018E               	clrf	14	;volatile
 10573                           
 10574                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10575  1E08  30F7               	movlw	247
 10576  1E09  0020               	movlb	0	; select bank0
 10577  1E0A  008C               	movwf	12	;volatile
 10578                           
 10579                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10580  1E0B  3004               	movlw	4
 10581  1E0C  008D               	movwf	13	;volatile
 10582                           
 10583                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10584  1E0D  3026               	movlw	38
 10585  1E0E  008E               	movwf	14	;volatile
 10586                           
 10587                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10588  1E0F  0024               	movlb	4	; select bank4
 10589  1E10  018D               	clrf	13	;volatile
 10590  1E11  0008               	return
 10591  1E12                     __end_of_IO_Set:	
 10592                           
 10593                           	psect	text61
 10594  1AC8                     __ptext61:	
 10595 ;; *************** function _IOC_Set *****************
 10596 ;; Defined at:
 10597 ;;		line 380 in file "../src/MCU_B1.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;		None
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;		None
 10602 ;; Return value:  Size  Location     Type
 10603 ;;		None               void
 10604 ;; Registers used:
 10605 ;;		wreg, status,2
 10606 ;; Tracked objects:
 10607 ;;		On entry : 0/0
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;Total ram usage:        0 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    5
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_Mcu_Initialization
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _IOC_Set
 10627  1AC8                     _IOC_Set:	
 10628                           
 10629                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _IOC_Set: [wreg+status,2]
 10633  1AC8  3004               	movlw	4
 10634  1AC9  0027               	movlb	7	; select bank7
 10635  1ACA  0094               	movwf	20	;volatile
 10636                           
 10637                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10638  1ACB  3004               	movlw	4
 10639  1ACC  0095               	movwf	21	;volatile
 10640                           
 10641                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10642  1ACD  0196               	clrf	22	;volatile
 10643                           
 10644                           ;MCU_B1.c: 387: IOCIE = 1;
 10645  1ACE  158B               	bsf	11,3	;volatile
 10646                           
 10647                           ;MCU_B1.c: 388: IOCIF = 0;
 10648  1ACF  100B               	bcf	11,0	;volatile
 10649                           
 10650                           ;MCU_B1.c: 389: PEIE = 1;
 10651  1AD0  170B               	bsf	11,6	;volatile
 10652                           
 10653                           ;MCU_B1.c: 390: GIE = 1;
 10654  1AD1  178B               	bsf	11,7	;volatile
 10655  1AD2  0008               	return
 10656  1AD3                     __end_of_IOC_Set:	
 10657                           
 10658                           	psect	text62
 10659  1A3A                     __ptext62:	
 10660 ;; *************** function _Fosc_Set *****************
 10661 ;; Defined at:
 10662 ;;		line 56 in file "../src/MCU_B1.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;		None
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;		None
 10667 ;; Return value:  Size  Location     Type
 10668 ;;		None               void
 10669 ;; Registers used:
 10670 ;;		wreg
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;Total ram usage:        0 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; Hardware stack levels required when called:    5
 10683 ;; This function calls:
 10684 ;;		Nothing
 10685 ;; This function is called by:
 10686 ;;		_Mcu_Initialization
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           
 10691                           ;psect for function _Fosc_Set
 10692  1A3A                     _Fosc_Set:	
 10693                           
 10694                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in _Fosc_Set: [wreg]
 10698  1A3A  3078               	movlw	120
 10699  1A3B  0021               	movlb	1	; select bank1
 10700  1A3C  0099               	movwf	25	;volatile
 10701  1A3D  0008               	return
 10702  1A3E                     __end_of_Fosc_Set:	
 10703                           
 10704                           	psect	text63
 10705  1A67                     __ptext63:	
 10706 ;; *************** function _ADC_Set *****************
 10707 ;; Defined at:
 10708 ;;		line 427 in file "../src/MCU_B1.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;		None               void
 10715 ;; Registers used:
 10716 ;;		wreg
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;Total ram usage:        0 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    5
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_Mcu_Initialization
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _ADC_Set
 10738  1A67                     _ADC_Set:	
 10739                           
 10740                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10741                           
 10742                           ;incstack = 0
 10743                           ; Regs used in _ADC_Set: [wreg]
 10744  1A67  30F3               	movlw	243
 10745  1A68  0021               	movlb	1	; select bank1
 10746  1A69  009E               	movwf	30	;volatile
 10747                           
 10748                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10749  1A6A  30C1               	movlw	193
 10750  1A6B  0022               	movlb	2	; select bank2
 10751  1A6C  0097               	movwf	23	;volatile
 10752  1A6D  0008               	return
 10753  1A6E                     __end_of_ADC_Set:	
 10754                           
 10755                           	psect	text64
 10756  0053                     __ptext64:	
 10757 ;; *************** function _Load_Main *****************
 10758 ;; Defined at:
 10759 ;;		line 40 in file "../src/OverLoad_B1.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;		None
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  i               2   16[BANK0 ] int 
 10764 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10765 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10766 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10767 ;;  error           1   12[BANK0 ] unsigned char 
 10768 ;; Return value:  Size  Location     Type
 10769 ;;		None               void
 10770 ;; Registers used:
 10771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;Total ram usage:       10 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    6
 10784 ;; This function calls:
 10785 ;;		___lwdiv
 10786 ;;		___wmul
 10787 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10788 ;;		_getDimmer_LoadGO
 10789 ;;		_getDimmer_Load_Status
 10790 ;;		_getMain_All_Error_Status
 10791 ;;		_getMain_All_LightsStatus
 10792 ;;		_getMain_Lights_Count
 10793 ;;		_setLoad_AH_AL_Restore
 10794 ;; This function is called by:
 10795 ;;		_main
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function _Load_Main
 10801  0053                     _Load_Main:	
 10802                           
 10803                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10804                           
 10805                           ;incstack = 0
 10806                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10807  0053  3000               	movlw	0
 10808  0054  3190  2083  3180   	fcall	_getMain_All_Error_Status
 10809  0057  0020               	movlb	0	; select bank0
 10810  0058  00A8               	movwf	??_Load_Main
 10811  0059  0828               	movf	??_Load_Main,w
 10812  005A  00AC               	movwf	Load_Main@error
 10813                           
 10814                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10815  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10816  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10817  005D  01AF               	clrf	Load_Main@LightsCount
 10818                           
 10819                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10820  005E  0022               	movlb	2	; select bank2
 10821  005F  1C38               	btfss	_Load^(0+256),0
 10822  0060  29FF               	goto	l1624
 10823                           
 10824                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10825  0061  319A  22A8  3180   	fcall	_getMain_All_LightsStatus
 10826  0064  3800               	iorlw	0
 10827  0065  1D03               	skipz
 10828  0066  2869               	goto	l8125
 10829                           
 10830                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10831  0067  0022               	movlb	2	; select bank2
 10832  0068  288A               	goto	l8143
 10833  0069                     l8125:	
 10834                           ;OverLoad_B1.c: 47: } else {
 10835                           
 10836                           
 10837                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10838  0069  0020               	movlb	0	; select bank0
 10839  006A  08AC               	movf	Load_Main@error,f
 10840  006B  1D03               	skipz
 10841  006C  2887               	goto	l1627
 10842  006D  319C  24AF  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10843  0070  3800               	iorlw	0
 10844  0071  1D03               	skipz
 10845  0072  2887               	goto	l1627
 10846                           
 10847                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10848  0073  0022               	movlb	2	; select bank2
 10849  0074  14B8               	bsf	_Load^(0+256),1
 10850                           
 10851                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10852  0075  319A  227D  3180   	fcall	_getDimmer_LoadGO
 10853  0078  3A01               	xorlw	1
 10854  0079  1D03               	skipz
 10855  007A  2882               	goto	l1628
 10856                           
 10857                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10858  007B  0022               	movlb	2	; select bank2
 10859  007C  1DB8               	btfss	_Load^(0+256),3
 10860  007D  1BB8               	btfsc	_Load^(0+256),7
 10861  007E  288B               	goto	l1626
 10862                           
 10863                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10864  007F  15B8               	bsf	_Load^(0+256),3
 10865                           
 10866                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10867  0080  01DD               	clrf	(_Load^(0+256)+37)
 10868                           
 10869                           ;OverLoad_B1.c: 57: }
 10870                           ;OverLoad_B1.c: 58: } else {
 10871  0081  288B               	goto	l1626
 10872  0082                     l1628:	
 10873                           
 10874                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10875  0082  0022               	movlb	2	; select bank2
 10876  0083  1FB8               	btfss	_Load^(0+256),7
 10877  0084  288B               	goto	l1626
 10878                           
 10879                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10880  0085  13B8               	bcf	_Load^(0+256),7
 10881                           
 10882                           ;OverLoad_B1.c: 61: }
 10883                           ;OverLoad_B1.c: 62: }
 10884                           ;OverLoad_B1.c: 63: } else {
 10885  0086  288B               	goto	l1626
 10886  0087                     l1627:	
 10887                           
 10888                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10889  0087  0022               	movlb	2	; select bank2
 10890  0088  1CB8               	btfss	_Load^(0+256),1
 10891  0089  288B               	goto	l1626
 10892  008A                     l8143:	
 10893                           
 10894                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10895  008A  10B8               	bcf	_Load^(0+256),1
 10896  008B                     l1626:	
 10897                           
 10898                           ;OverLoad_B1.c: 66: }
 10899                           ;OverLoad_B1.c: 67: }
 10900                           ;OverLoad_B1.c: 89: }
 10901                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10902  008B  1CB8               	btfss	_Load^(0+256),1
 10903  008C  29DB               	goto	l1634
 10904                           
 10905                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10906  008D  1538               	bsf	_Load^(0+256),2
 10907                           
 10908                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10909  008E  1E38               	btfss	_Load^(0+256),4
 10910  008F  29D9               	goto	l1635
 10911                           
 10912                           ;OverLoad_B1.c: 96: Load.Time++;
 10913  0090  3001               	movlw	1
 10914  0091  07B9               	addwf	(_Load^(0+256)+1),f
 10915  0092  3000               	movlw	0
 10916  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 10917                           
 10918                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10919  0094  3000               	movlw	0
 10920  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 10921  0096  3002               	movlw	2
 10922  0097  1903               	skipnz
 10923  0098  0239               	subwf	(_Load^(0+256)+1),w
 10924  0099  1C03               	skipc
 10925  009A  0008               	return
 10926                           
 10927                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10928  009B  01B9               	clrf	(_Load^(0+256)+1)
 10929  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 10930                           
 10931                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10932  009D  1238               	bcf	_Load^(0+256),4
 10933                           
 10934                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10935  009E  3001               	movlw	1
 10936  009F  0020               	movlb	0	; select bank0
 10937  00A0  00B0               	movwf	Load_Main@i
 10938  00A1  3000               	movlw	0
 10939  00A2  00B1               	movwf	Load_Main@i+1
 10940  00A3  0831               	movf	Load_Main@i+1,w
 10941  00A4  3A80               	xorlw	128
 10942  00A5  00A8               	movwf	??_Load_Main
 10943  00A6  3080               	movlw	128
 10944  00A7  0228               	subwf	??_Load_Main,w
 10945  00A8  1D03               	skipz
 10946  00A9  28AC               	goto	u8355
 10947  00AA  3004               	movlw	4
 10948  00AB  0230               	subwf	Load_Main@i,w
 10949  00AC                     u8355:	
 10950  00AC  1803               	btfsc	3,0
 10951  00AD  28E0               	goto	l8165
 10952  00AE                     l8159:	
 10953                           
 10954                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10955  00AE  0020               	movlb	0	; select bank0
 10956  00AF  3530               	lslf	Load_Main@i,w
 10957  00B0  3E43               	addlw	(_Load+11)& (0+255)
 10958  00B1  0086               	movwf	6
 10959  00B2  3001               	movlw	1	; select bank2/3
 10960  00B3  0087               	movwf	7
 10961  00B4  3F40               	moviw [0]fsr1
 10962  00B5  00A8               	movwf	??_Load_Main
 10963  00B6  3F41               	moviw [1]fsr1
 10964  00B7  00A9               	movwf	??_Load_Main+1
 10965  00B8  0828               	movf	??_Load_Main,w
 10966  00B9  0022               	movlb	2	; select bank2
 10967  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 10968  00BB  0020               	movlb	0	; select bank0
 10969  00BC  0829               	movf	??_Load_Main+1,w
 10970  00BD  0022               	movlb	2	; select bank2
 10971  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 10972                           
 10973                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10974  00BF  0020               	movlb	0	; select bank0
 10975  00C0  3530               	lslf	Load_Main@i,w
 10976  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 10977  00C2  0086               	movwf	6
 10978  00C3  3001               	movlw	1	; select bank2/3
 10979  00C4  0087               	movwf	7
 10980  00C5  3F40               	moviw [0]fsr1
 10981  00C6  00A8               	movwf	??_Load_Main
 10982  00C7  3F41               	moviw [1]fsr1
 10983  00C8  00A9               	movwf	??_Load_Main+1
 10984  00C9  0828               	movf	??_Load_Main,w
 10985  00CA  0022               	movlb	2	; select bank2
 10986  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 10987  00CC  0020               	movlb	0	; select bank0
 10988  00CD  0829               	movf	??_Load_Main+1,w
 10989  00CE  0022               	movlb	2	; select bank2
 10990  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 10991  00D0  3001               	movlw	1
 10992  00D1  0020               	movlb	0	; select bank0
 10993  00D2  07B0               	addwf	Load_Main@i,f
 10994  00D3  3000               	movlw	0
 10995  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10996  00D5  0831               	movf	Load_Main@i+1,w
 10997  00D6  3A80               	xorlw	128
 10998  00D7  00A8               	movwf	??_Load_Main
 10999  00D8  3080               	movlw	128
 11000  00D9  0228               	subwf	??_Load_Main,w
 11001  00DA  1D03               	skipz
 11002  00DB  28DE               	goto	u8365
 11003  00DC  3004               	movlw	4
 11004  00DD  0230               	subwf	Load_Main@i,w
 11005  00DE                     u8365:	
 11006  00DE  1C03               	skipc
 11007  00DF  28AE               	goto	l8159
 11008  00E0                     l8165:	
 11009                           
 11010                           ;OverLoad_B1.c: 104: }
 11011                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11012  00E0  3003               	movlw	3
 11013  00E1  0020               	movlb	0	; select bank0
 11014  00E2  00A0               	movwf	___lwdiv@divisor
 11015  00E3  3000               	movlw	0
 11016  00E4  00A1               	movwf	___lwdiv@divisor+1
 11017  00E5  0022               	movlb	2	; select bank2
 11018  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11019  00E7  0020               	movlb	0	; select bank0
 11020  00E8  01A3               	clrf	___lwdiv@dividend+1
 11021  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11022  00EA  0022               	movlb	2	; select bank2
 11023  00EB  083D               	movf	(_Load^(0+256)+5),w
 11024  00EC  0020               	movlb	0	; select bank0
 11025  00ED  01A2               	clrf	___lwdiv@dividend
 11026  00EE  07A2               	addwf	___lwdiv@dividend,f
 11027  00EF  3191  2189  3180   	fcall	___lwdiv
 11028  00F2  0020               	movlb	0	; select bank0
 11029  00F3  0821               	movf	?___lwdiv+1,w
 11030  00F4  0022               	movlb	2	; select bank2
 11031  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11032  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11033  00F7  0020               	movlb	0	; select bank0
 11034  00F8  0820               	movf	?___lwdiv,w
 11035  00F9  0022               	movlb	2	; select bank2
 11036  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11037  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11038                           
 11039                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11040  00FC  3003               	movlw	3
 11041  00FD  0020               	movlb	0	; select bank0
 11042  00FE  00A0               	movwf	___lwdiv@divisor
 11043  00FF  3000               	movlw	0
 11044  0100  00A1               	movwf	___lwdiv@divisor+1
 11045  0101  0022               	movlb	2	; select bank2
 11046  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11047  0103  0020               	movlb	0	; select bank0
 11048  0104  01A3               	clrf	___lwdiv@dividend+1
 11049  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11050  0106  0022               	movlb	2	; select bank2
 11051  0107  083F               	movf	(_Load^(0+256)+7),w
 11052  0108  0020               	movlb	0	; select bank0
 11053  0109  01A2               	clrf	___lwdiv@dividend
 11054  010A  07A2               	addwf	___lwdiv@dividend,f
 11055  010B  3191  2189  3180   	fcall	___lwdiv
 11056  010E  0020               	movlb	0	; select bank0
 11057  010F  0821               	movf	?___lwdiv+1,w
 11058  0110  0022               	movlb	2	; select bank2
 11059  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11060  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11061  0113  0020               	movlb	0	; select bank0
 11062  0114  0820               	movf	?___lwdiv,w
 11063  0115  0022               	movlb	2	; select bank2
 11064  0116  01BF               	clrf	(_Load^(0+256)+7)
 11065  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11066                           
 11067                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11068  0118  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11069                           
 11070                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11071  011B  0022               	movlb	2	; select bank2
 11072  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11073  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11074  011E  1D03               	skipz
 11075  011F  2922               	goto	u8375
 11076  0120  083F               	movf	(_Load^(0+256)+7),w
 11077  0121  023D               	subwf	(_Load^(0+256)+5),w
 11078  0122                     u8375:	
 11079  0122  1C03               	skipc
 11080  0123  0008               	return
 11081                           
 11082                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11083  0124  3005               	movlw	5
 11084  0125  3E38               	addlw	_Load& (0+255)
 11085  0126  0086               	movwf	6
 11086  0127  3001               	movlw	1	; select bank2/3
 11087  0128  0087               	movwf	7
 11088  0129  093F               	comf	(_Load^(0+256)+7),w
 11089  012A  0020               	movlb	0	; select bank0
 11090  012B  00A8               	movwf	??_Load_Main
 11091  012C  0022               	movlb	2	; select bank2
 11092  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11093  012E  0020               	movlb	0	; select bank0
 11094  012F  00A9               	movwf	??_Load_Main+1
 11095  0130  0AA8               	incf	??_Load_Main,f
 11096  0131  1903               	skipnz
 11097  0132  0AA9               	incf	??_Load_Main+1,f
 11098  0133  3F40               	moviw [0]fsr1
 11099  0134  0728               	addwf	??_Load_Main,w
 11100  0135  0022               	movlb	2	; select bank2
 11101  0136  00D7               	movwf	(_Load^(0+256)+31)
 11102  0137  3F41               	moviw [1]fsr1
 11103  0138  0020               	movlb	0	; select bank0
 11104  0139  3D29               	addwfc	??_Load_Main+1,w
 11105  013A  0022               	movlb	2	; select bank2
 11106  013B  00D8               	movwf	(_Load^(0+256)+32)
 11107                           
 11108                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11109  013C  01BD               	clrf	(_Load^(0+256)+5)
 11110  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11111                           
 11112                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11113  013E  01BF               	clrf	(_Load^(0+256)+7)
 11114  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11115                           
 11116                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11117  0140  1DB8               	btfss	_Load^(0+256),3
 11118  0141  299B               	goto	l8205
 11119                           
 11120                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11121  0142  3002               	movlw	2
 11122  0143  025D               	subwf	(_Load^(0+256)+37),w
 11123  0144  1803               	skipnc
 11124  0145  299B               	goto	l8205
 11125                           
 11126                           ;OverLoad_B1.c: 117: Load.Count++;
 11127  0146  3001               	movlw	1
 11128  0147  0020               	movlb	0	; select bank0
 11129  0148  00A8               	movwf	??_Load_Main
 11130  0149  0828               	movf	??_Load_Main,w
 11131  014A  0022               	movlb	2	; select bank2
 11132  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11133                           
 11134                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11135  014C  319A  2285  3180   	fcall	_getDimmer_Load_Status
 11136  014F  0020               	movlb	0	; select bank0
 11137  0150  00A8               	movwf	??_Load_Main
 11138  0151  0828               	movf	??_Load_Main,w
 11139  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11140                           
 11141                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11142  0153  319A  22BD  3180   	fcall	_getMain_Lights_Count
 11143  0156  0020               	movlb	0	; select bank0
 11144  0157  00A8               	movwf	??_Load_Main
 11145  0158  0828               	movf	??_Load_Main,w
 11146  0159  00AF               	movwf	Load_Main@LightsCount
 11147                           
 11148                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11149  015A  0022               	movlb	2	; select bank2
 11150  015B  085D               	movf	(_Load^(0+256)+37),w
 11151  015C  3A01               	xorlw	1
 11152  015D  1D03               	skipz
 11153  015E  2963               	goto	l8191
 11154                           
 11155                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11156  015F  3014               	movlw	20
 11157  0160  00DB               	movwf	(_Load^(0+256)+35)
 11158  0161  3005               	movlw	5
 11159  0162  2970               	goto	L7
 11160  0163                     l8191:	
 11161                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11162                           
 11163  0163  085D               	movf	(_Load^(0+256)+37),w
 11164  0164  3A02               	xorlw	2
 11165  0165  1D03               	skipz
 11166  0166  299B               	goto	l8205
 11167                           
 11168                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11169  0167  0020               	movlb	0	; select bank0
 11170  0168  082F               	movf	Load_Main@LightsCount,w
 11171  0169  3A01               	xorlw	1
 11172  016A  1D03               	skipz
 11173  016B  2972               	goto	l8197
 11174                           
 11175                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11176  016C  3075               	movlw	117
 11177  016D  0022               	movlb	2	; select bank2
 11178  016E  00DB               	movwf	(_Load^(0+256)+35)
 11179  016F  3000               	movlw	0
 11180  0170                     L7:	
 11181  0170  00DC               	movwf	(_Load^(0+256)+36)
 11182                           
 11183                           ;OverLoad_B1.c: 132: } else {
 11184  0171  299B               	goto	l8205
 11185  0172                     l8197:	
 11186                           
 11187                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11188  0172  0020               	movlb	0	; select bank0
 11189  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11190  0174  1D03               	skipz
 11191  0175  298F               	goto	l8201
 11192                           
 11193                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11194  0176  082F               	movf	Load_Main@LightsCount,w
 11195  0177  00A8               	movwf	??_Load_Main
 11196  0178  01A9               	clrf	??_Load_Main+1
 11197  0179  0828               	movf	??_Load_Main,w
 11198  017A  00A0               	movwf	___wmul@multiplier
 11199  017B  0829               	movf	??_Load_Main+1,w
 11200  017C  00A1               	movwf	___wmul@multiplier+1
 11201  017D  3075               	movlw	117
 11202  017E  00A2               	movwf	___wmul@multiplicand
 11203  017F  3000               	movlw	0
 11204  0180  00A3               	movwf	___wmul@multiplicand+1
 11205  0181  319E  26B7  3180   	fcall	___wmul
 11206  0184  0020               	movlb	0	; select bank0
 11207  0185  0821               	movf	?___wmul+1,w
 11208  0186  0022               	movlb	2	; select bank2
 11209  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11210  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11211  0189  0020               	movlb	0	; select bank0
 11212  018A  0820               	movf	?___wmul,w
 11213  018B  0022               	movlb	2	; select bank2
 11214  018C  01DB               	clrf	(_Load^(0+256)+35)
 11215  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11216                           
 11217                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11218  018E  299B               	goto	l8205
 11219  018F                     l8201:	
 11220  018F  0020               	movlb	0	; select bank0
 11221  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11222  0191  3A01               	xorlw	1
 11223  0192  1D03               	skipz
 11224  0193  299B               	goto	l8205
 11225                           
 11226                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11227  0194  0022               	movlb	2	; select bank2
 11228  0195  0841               	movf	(_Load^(0+256)+9),w
 11229  0196  3E75               	addlw	117
 11230  0197  00DB               	movwf	(_Load^(0+256)+35)
 11231  0198  3000               	movlw	0
 11232  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11233  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11234  019B                     l8205:	
 11235                           
 11236                           ;OverLoad_B1.c: 137: }
 11237                           ;OverLoad_B1.c: 138: }
 11238                           ;OverLoad_B1.c: 139: }
 11239                           ;OverLoad_B1.c: 140: }
 11240                           ;OverLoad_B1.c: 141: }
 11241                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11242  019B  0022               	movlb	2	; select bank2
 11243  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11244  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11245  019E  1D03               	skipz
 11246  019F  29A2               	goto	u8455
 11247  01A0  085B               	movf	(_Load^(0+256)+35),w
 11248  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11249  01A2                     u8455:	
 11250  01A2  1C03               	skipc
 11251  01A3  29C1               	goto	l8221
 11252                           
 11253                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11254  01A4  0020               	movlb	0	; select bank0
 11255  01A5  082F               	movf	Load_Main@LightsCount,w
 11256  01A6  3A01               	xorlw	1
 11257  01A7  1903               	skipnz
 11258  01A8  29AB               	goto	l8211
 11259  01A9  3003               	movlw	3
 11260  01AA  29AC               	goto	L8
 11261  01AB                     l8211:	
 11262  01AB  3002               	movlw	2
 11263  01AC                     L8:	
 11264  01AC  00AA               	movwf	_Load_Main$3984
 11265  01AD  3000               	movlw	0
 11266  01AE  00AB               	movwf	_Load_Main$3984+1
 11267  01AF  082A               	movf	_Load_Main$3984,w
 11268  01B0  00A8               	movwf	??_Load_Main
 11269  01B1  0828               	movf	??_Load_Main,w
 11270  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11271                           
 11272                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11273  01B3  3001               	movlw	1
 11274  01B4  00A8               	movwf	??_Load_Main
 11275  01B5  0828               	movf	??_Load_Main,w
 11276  01B6  0022               	movlb	2	; select bank2
 11277  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11278                           
 11279                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11280  01B8  085E               	movf	(_Load^(0+256)+38),w
 11281  01B9  0020               	movlb	0	; select bank0
 11282  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11283  01BB  1803               	skipnc
 11284  01BC  0008               	return
 11285                           
 11286                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11287  01BD  0022               	movlb	2	; select bank2
 11288  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11289                           
 11290                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11291  01BF  16B8               	bsf	_Load^(0+256),5
 11292                           
 11293                           ;OverLoad_B1.c: 170: }
 11294                           ;OverLoad_B1.c: 171: } else {
 11295  01C0  0008               	return
 11296  01C1                     l8221:	
 11297                           
 11298                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11299  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11300                           
 11301                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11302  01C2  1DB8               	btfss	_Load^(0+256),3
 11303  01C3  0008               	return
 11304                           
 11305                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11306  01C4  3001               	movlw	1
 11307  01C5  0020               	movlb	0	; select bank0
 11308  01C6  00A8               	movwf	??_Load_Main
 11309  01C7  0828               	movf	??_Load_Main,w
 11310  01C8  0022               	movlb	2	; select bank2
 11311  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11312                           
 11313                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11314  01CA  3003               	movlw	3
 11315  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11316  01CC  1C03               	skipc
 11317  01CD  0008               	return
 11318                           
 11319                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11320  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11321                           
 11322                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11323  01CF  17B8               	bsf	_Load^(0+256),7
 11324                           
 11325                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11326  01D0  11B8               	bcf	_Load^(0+256),3
 11327                           
 11328                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11329  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11330                           
 11331                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11332  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11333  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11334  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11335  01D5  0857               	movf	(_Load^(0+256)+31),w
 11336  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11337  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11338                           
 11339                           ;OverLoad_B1.c: 184: }
 11340                           ;OverLoad_B1.c: 185: }
 11341                           ;OverLoad_B1.c: 208: }
 11342                           ;OverLoad_B1.c: 209: }
 11343                           ;OverLoad_B1.c: 210: }
 11344                           ;OverLoad_B1.c: 211: } else {
 11345  01D8  0008               	return
 11346  01D9                     l1635:	
 11347                           
 11348                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11349  01D9  1638               	bsf	_Load^(0+256),4
 11350                           
 11351                           ;OverLoad_B1.c: 213: }
 11352                           ;OverLoad_B1.c: 214: } else {
 11353  01DA  0008               	return
 11354  01DB                     l1634:	
 11355                           
 11356                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11357  01DB  1D38               	btfss	_Load^(0+256),2
 11358  01DC  29EE               	goto	l8257
 11359                           
 11360                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11361  01DD  1138               	bcf	_Load^(0+256),2
 11362                           
 11363                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11364  01DE  1238               	bcf	_Load^(0+256),4
 11365                           
 11366                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11367  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11368  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11369                           
 11370                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11371  01E1  319E  267E  3180   	fcall	_setLoad_AH_AL_Restore
 11372                           
 11373                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11374  01E4  0022               	movlb	2	; select bank2
 11375  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11376                           
 11377                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11378  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11379                           
 11380                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11381  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11382  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11383                           
 11384                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11385  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11386  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11387                           
 11388                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11389  01EB  11B8               	bcf	_Load^(0+256),3
 11390                           
 11391                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11392  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11393                           
 11394                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11395  01ED  13B8               	bcf	_Load^(0+256),7
 11396  01EE                     l8257:	
 11397                           
 11398                           ;OverLoad_B1.c: 257: }
 11399                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11400  01EE  1EB8               	btfss	_Load^(0+256),5
 11401  01EF  0008               	return
 11402                           
 11403                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11404  01F0  3001               	movlw	1
 11405  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11406  01F2  3000               	movlw	0
 11407  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11408                           
 11409                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11410  01F4  3001               	movlw	1
 11411  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11412  01F6  30F4               	movlw	244
 11413  01F7  1903               	skipnz
 11414  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11415  01F9  1C03               	skipc
 11416  01FA  0008               	return
 11417                           
 11418                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11419  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11420  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11421                           
 11422                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11423  01FD  12B8               	bcf	_Load^(0+256),5
 11424                           
 11425                           ;OverLoad_B1.c: 263: }
 11426                           ;OverLoad_B1.c: 264: }
 11427                           ;OverLoad_B1.c: 265: }
 11428                           ;OverLoad_B1.c: 266: } else {
 11429  01FE  0008               	return
 11430  01FF                     l1624:	
 11431                           
 11432                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11433  01FF  0021               	movlb	1	; select bank1
 11434  0200  1C2F               	btfss	_myMain^(0+128),0
 11435  0201  0008               	return
 11436                           
 11437                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11438  0202  0022               	movlb	2	; select bank2
 11439  0203  1438               	bsf	_Load^(0+256),0
 11440  0204  0008               	return
 11441  0205                     __end_of_Load_Main:	
 11442                           
 11443                           	psect	text65
 11444  1ABD                     __ptext65:	
 11445 ;; *************** function _getMain_Lights_Count *****************
 11446 ;; Defined at:
 11447 ;;		line 459 in file "../src/Main_B1.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;		None
 11450 ;; Auto vars:     Size  Location     Type
 11451 ;;  status1         1    1[BANK0 ] unsigned char 
 11452 ;;  count           1    0[BANK0 ] unsigned char 
 11453 ;; Return value:  Size  Location     Type
 11454 ;;                  1    wreg      unsigned char 
 11455 ;; Registers used:
 11456 ;;		wreg, status,2
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;Total ram usage:        2 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    5
 11469 ;; This function calls:
 11470 ;;		Nothing
 11471 ;; This function is called by:
 11472 ;;		_Load_Main
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           
 11477                           ;psect for function _getMain_Lights_Count
 11478  1ABD                     _getMain_Lights_Count:	
 11479                           
 11480                           ;Main_B1.c: 460: char count = 0;
 11481                           
 11482                           ;incstack = 0
 11483                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11484  1ABD  0020               	movlb	0	; select bank0
 11485  1ABE  01A0               	clrf	getMain_Lights_Count@count
 11486                           
 11487                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11488  1ABF  3000               	movlw	0
 11489  1AC0  0021               	movlb	1	; select bank1
 11490  1AC1  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11491  1AC2  3001               	movlw	1
 11492  1AC3  0020               	movlb	0	; select bank0
 11493  1AC4  00A1               	movwf	getMain_Lights_Count@status1
 11494                           
 11495                           ;Main_B1.c: 487: return count = status1;
 11496  1AC5  0821               	movf	getMain_Lights_Count@status1,w
 11497  1AC6  00A0               	movwf	getMain_Lights_Count@count
 11498  1AC7  0008               	return
 11499  1AC8                     __end_of_getMain_Lights_Count:	
 11500                           
 11501                           	psect	text66
 11502  1A85                     __ptext66:	
 11503 ;; *************** function _getDimmer_Load_Status *****************
 11504 ;; Defined at:
 11505 ;;		line 1158 in file "../src/Dimmer_B1.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  status          1    0[BANK0 ] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  1    wreg      unsigned char 
 11512 ;; Registers used:
 11513 ;;		wreg, status,2
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        1 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    5
 11526 ;; This function calls:
 11527 ;;		Nothing
 11528 ;; This function is called by:
 11529 ;;		_Load_Main
 11530 ;; This function uses a non-reentrant model
 11531 ;;
 11532                           
 11533                           
 11534                           ;psect for function _getDimmer_Load_Status
 11535  1A85                     _getDimmer_Load_Status:	
 11536                           
 11537                           ;Dimmer_B1.c: 1159: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11538                           
 11539                           ;incstack = 0
 11540                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11541  1A85  3000               	movlw	0
 11542  1A86  0022               	movlb	2	; select bank2
 11543  1A87  192C               	btfsc	_Dimmer^(0+256),2
 11544  1A88  3001               	movlw	1
 11545  1A89  0020               	movlb	0	; select bank0
 11546  1A8A  00A0               	movwf	getDimmer_Load_Status@status
 11547                           
 11548                           ;Dimmer_B1.c: 1160: return status;
 11549  1A8B  0820               	movf	getDimmer_Load_Status@status,w
 11550  1A8C  0008               	return
 11551  1A8D                     __end_of_getDimmer_Load_Status:	
 11552                           
 11553                           	psect	text67
 11554  1A7D                     __ptext67:	
 11555 ;; *************** function _getDimmer_LoadGO *****************
 11556 ;; Defined at:
 11557 ;;		line 1152 in file "../src/Dimmer_B1.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;		None
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;                  1    wreg      unsigned char 
 11564 ;; Registers used:
 11565 ;;		wreg, status,2
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;Total ram usage:        1 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    5
 11578 ;; This function calls:
 11579 ;;		Nothing
 11580 ;; This function is called by:
 11581 ;;		_Load_Main
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           
 11586                           ;psect for function _getDimmer_LoadGO
 11587  1A7D                     _getDimmer_LoadGO:	
 11588                           
 11589                           ;Dimmer_B1.c: 1153: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11590                           
 11591                           ;incstack = 0
 11592                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11593  1A7D  3000               	movlw	0
 11594  1A7E  0022               	movlb	2	; select bank2
 11595  1A7F  18AC               	btfsc	_Dimmer^(0+256),1
 11596  1A80  3001               	movlw	1
 11597  1A81  0020               	movlb	0	; select bank0
 11598  1A82  00A0               	movwf	getDimmer_LoadGO@loadgo
 11599                           
 11600                           ;Dimmer_B1.c: 1154: return loadgo;
 11601  1A83  0820               	movf	getDimmer_LoadGO@loadgo,w
 11602  1A84  0008               	return
 11603  1A85                     __end_of_getDimmer_LoadGO:	
 11604                           
 11605                           	psect	text68
 11606  1CAF                     __ptext68:	
 11607 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11608 ;; Defined at:
 11609 ;;		line 286 in file "../src/Dimmer_B1.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;		None
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  status          1    0[BANK0 ] unsigned char 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;                  1    wreg      unsigned char 
 11616 ;; Registers used:
 11617 ;;		wreg, status,2, status,0
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;Total ram usage:        1 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:    5
 11630 ;; This function calls:
 11631 ;;		Nothing
 11632 ;; This function is called by:
 11633 ;;		_Load_Main
 11634 ;; This function uses a non-reentrant model
 11635 ;;
 11636                           
 11637                           
 11638                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11639  1CAF                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11640                           
 11641                           ;Dimmer_B1.c: 287: char status = 0;
 11642                           
 11643                           ;incstack = 0
 11644                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11645  1CAF  0020               	movlb	0	; select bank0
 11646  1CB0  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11647                           
 11648                           ;Dimmer_B1.c: 298: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11649  1CB1  3000               	movlw	0
 11650  1CB2  0021               	movlb	1	; select bank1
 11651  1CB3  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11652  1CB4  3001               	movlw	1
 11653  1CB5  0020               	movlb	0	; select bank0
 11654  1CB6  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11655                           
 11656                           ;Dimmer_B1.c: 302: if (status == 0) {
 11657  1CB7  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11658  1CB8  1D03               	skipz
 11659  1CB9  2CC0               	goto	l7267
 11660                           
 11661                           ;Dimmer_B1.c: 312: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11662  1CBA  3000               	movlw	0
 11663  1CBB  0021               	movlb	1	; select bank1
 11664  1CBC  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11665  1CBD  3001               	movlw	1
 11666  1CBE  0020               	movlb	0	; select bank0
 11667  1CBF  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11668  1CC0                     l7267:	
 11669                           
 11670                           ;Dimmer_B1.c: 314: }
 11671                           ;Dimmer_B1.c: 316: return status;
 11672  1CC0  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11673  1CC1  0008               	return
 11674  1CC2                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11675                           
 11676                           	psect	text69
 11677  1EB7                     __ptext69:	
 11678 ;; *************** function ___wmul *****************
 11679 ;; Defined at:
 11680 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11683 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  product         2    4[BANK0 ] unsigned int 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  2    0[BANK0 ] unsigned int 
 11688 ;; Registers used:
 11689 ;;		wreg, status,2, status,0
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11695 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;Total ram usage:        6 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    5
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		_Load_Main
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           
 11710                           ;psect for function ___wmul
 11711  1EB7                     ___wmul:	
 11712                           
 11713                           ;incstack = 0
 11714                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11715  1EB7  0020               	movlb	0	; select bank0
 11716  1EB8  01A4               	clrf	___wmul@product
 11717  1EB9  01A5               	clrf	___wmul@product+1
 11718  1EBA                     l7835:	
 11719  1EBA  1C20               	btfss	___wmul@multiplier,0
 11720  1EBB  2EC0               	goto	l2710
 11721  1EBC  0822               	movf	___wmul@multiplicand,w
 11722  1EBD  07A4               	addwf	___wmul@product,f
 11723  1EBE  0823               	movf	___wmul@multiplicand+1,w
 11724  1EBF  3DA5               	addwfc	___wmul@product+1,f
 11725  1EC0                     l2710:	
 11726  1EC0  3001               	movlw	1
 11727  1EC1                     u7735:	
 11728  1EC1  35A2               	lslf	___wmul@multiplicand,f
 11729  1EC2  0DA3               	rlf	___wmul@multiplicand+1,f
 11730  1EC3  0B89               	decfsz	9,f
 11731  1EC4  2EC1               	goto	u7735
 11732  1EC5  3001               	movlw	1
 11733  1EC6                     u7745:	
 11734  1EC6  36A1               	lsrf	___wmul@multiplier+1,f
 11735  1EC7  0CA0               	rrf	___wmul@multiplier,f
 11736  1EC8  0B89               	decfsz	9,f
 11737  1EC9  2EC6               	goto	u7745
 11738  1ECA  0821               	movf	___wmul@multiplier+1,w
 11739  1ECB  0420               	iorwf	___wmul@multiplier,w
 11740  1ECC  1D03               	skipz
 11741  1ECD  2EBA               	goto	l7835
 11742  1ECE  0825               	movf	___wmul@product+1,w
 11743  1ECF  01A1               	clrf	?___wmul+1
 11744  1ED0  07A1               	addwf	?___wmul+1,f
 11745  1ED1  0824               	movf	___wmul@product,w
 11746  1ED2  01A0               	clrf	?___wmul
 11747  1ED3  07A0               	addwf	?___wmul,f
 11748  1ED4  0008               	return
 11749  1ED5                     __end_of___wmul:	
 11750                           
 11751                           	psect	text70
 11752  1189                     __ptext70:	
 11753 ;; *************** function ___lwdiv *****************
 11754 ;; Defined at:
 11755 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;  divisor         2    0[BANK0 ] unsigned int 
 11758 ;;  dividend        2    2[BANK0 ] unsigned int 
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;  quotient        2    5[BANK0 ] unsigned int 
 11761 ;;  counter         1    7[BANK0 ] unsigned char 
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  2    0[BANK0 ] unsigned int 
 11764 ;; Registers used:
 11765 ;;		wreg, status,2, status,0
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        8 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    5
 11778 ;; This function calls:
 11779 ;;		Nothing
 11780 ;; This function is called by:
 11781 ;;		_Load_Main
 11782 ;;		_setTemp_Main
 11783 ;;		_setRF_Main
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function ___lwdiv
 11789  1189                     ___lwdiv:	
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11793  1189  0020               	movlb	0	; select bank0
 11794  118A  01A5               	clrf	___lwdiv@quotient
 11795  118B  01A6               	clrf	___lwdiv@quotient+1
 11796  118C  0821               	movf	___lwdiv@divisor+1,w
 11797  118D  0420               	iorwf	___lwdiv@divisor,w
 11798  118E  1903               	skipnz
 11799  118F  29B9               	goto	l7205
 11800  1190  01A7               	clrf	___lwdiv@counter
 11801  1191  0AA7               	incf	___lwdiv@counter,f
 11802  1192                     l7193:	
 11803  1192  1BA1               	btfsc	___lwdiv@divisor+1,7
 11804  1193  299E               	goto	l7195
 11805  1194  3001               	movlw	1
 11806  1195                     u6615:	
 11807  1195  35A0               	lslf	___lwdiv@divisor,f
 11808  1196  0DA1               	rlf	___lwdiv@divisor+1,f
 11809  1197  0B89               	decfsz	9,f
 11810  1198  2995               	goto	u6615
 11811  1199  3001               	movlw	1
 11812  119A  00A4               	movwf	??___lwdiv
 11813  119B  0824               	movf	??___lwdiv,w
 11814  119C  07A7               	addwf	___lwdiv@counter,f
 11815  119D  2992               	goto	l7193
 11816  119E                     l7195:	
 11817  119E  3001               	movlw	1
 11818  119F                     u6635:	
 11819  119F  35A5               	lslf	___lwdiv@quotient,f
 11820  11A0  0DA6               	rlf	___lwdiv@quotient+1,f
 11821  11A1  0B89               	decfsz	9,f
 11822  11A2  299F               	goto	u6635
 11823  11A3  0821               	movf	___lwdiv@divisor+1,w
 11824  11A4  0223               	subwf	___lwdiv@dividend+1,w
 11825  11A5  1D03               	skipz
 11826  11A6  29A9               	goto	u6645
 11827  11A7  0820               	movf	___lwdiv@divisor,w
 11828  11A8  0222               	subwf	___lwdiv@dividend,w
 11829  11A9                     u6645:	
 11830  11A9  1C03               	skipc
 11831  11AA  29B0               	goto	l7201
 11832  11AB  0820               	movf	___lwdiv@divisor,w
 11833  11AC  02A2               	subwf	___lwdiv@dividend,f
 11834  11AD  0821               	movf	___lwdiv@divisor+1,w
 11835  11AE  3BA3               	subwfb	___lwdiv@dividend+1,f
 11836  11AF  1425               	bsf	___lwdiv@quotient,0
 11837  11B0                     l7201:	
 11838  11B0  3001               	movlw	1
 11839  11B1                     u6655:	
 11840  11B1  36A1               	lsrf	___lwdiv@divisor+1,f
 11841  11B2  0CA0               	rrf	___lwdiv@divisor,f
 11842  11B3  0B89               	decfsz	9,f
 11843  11B4  29B1               	goto	u6655
 11844  11B5  3001               	movlw	1
 11845  11B6  02A7               	subwf	___lwdiv@counter,f
 11846  11B7  1D03               	btfss	3,2
 11847  11B8  299E               	goto	l7195
 11848  11B9                     l7205:	
 11849  11B9  0826               	movf	___lwdiv@quotient+1,w
 11850  11BA  01A1               	clrf	?___lwdiv+1
 11851  11BB  07A1               	addwf	?___lwdiv+1,f
 11852  11BC  0825               	movf	___lwdiv@quotient,w
 11853  11BD  01A0               	clrf	?___lwdiv
 11854  11BE  07A0               	addwf	?___lwdiv,f
 11855  11BF  0008               	return
 11856  11C0                     __end_of___lwdiv:	
 11857                           
 11858                           	psect	text71
 11859  1A1B                     __ptext71:	
 11860 ;; *************** function _Load_Initialization *****************
 11861 ;; Defined at:
 11862 ;;		line 9 in file "../src/OverLoad_B1.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;		None
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;		None
 11867 ;; Return value:  Size  Location     Type
 11868 ;;		None               void
 11869 ;; Registers used:
 11870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11871 ;; Tracked objects:
 11872 ;;		On entry : 0/0
 11873 ;;		On exit  : 0/0
 11874 ;;		Unchanged: 0/0
 11875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;Total ram usage:        0 bytes
 11881 ;; Hardware stack levels used:    1
 11882 ;; Hardware stack levels required when called:    6
 11883 ;; This function calls:
 11884 ;;		_setLoad_AH_AL_Restore
 11885 ;; This function is called by:
 11886 ;;		_main
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           
 11891                           ;psect for function _Load_Initialization
 11892  1A1B                     _Load_Initialization:	
 11893                           
 11894                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11895                           
 11896                           ;incstack = 0
 11897                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11898  1A1B  319E  267E         	fcall	_setLoad_AH_AL_Restore
 11899  1A1D  0008               	return
 11900  1A1E                     __end_of_Load_Initialization:	
 11901                           
 11902                           	psect	text72
 11903  1E7E                     __ptext72:	
 11904 ;; *************** function _setLoad_AH_AL_Restore *****************
 11905 ;; Defined at:
 11906 ;;		line 294 in file "../src/OverLoad_B1.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;		None
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  i               1    1[BANK0 ] unsigned char 
 11911 ;; Return value:  Size  Location     Type
 11912 ;;		None               void
 11913 ;; Registers used:
 11914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11915 ;; Tracked objects:
 11916 ;;		On entry : 0/0
 11917 ;;		On exit  : 0/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;Total ram usage:        2 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    5
 11927 ;; This function calls:
 11928 ;;		Nothing
 11929 ;; This function is called by:
 11930 ;;		_Load_Initialization
 11931 ;;		_Load_Main
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           
 11936                           ;psect for function _setLoad_AH_AL_Restore
 11937  1E7E                     _setLoad_AH_AL_Restore:	
 11938                           
 11939                           ;OverLoad_B1.c: 295: char i;
 11940                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11944  1E7E  0020               	movlb	0	; select bank0
 11945  1E7F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11946  1E80                     L9:	
 11947  1E80  3005               	movlw	5
 11948  1E81  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11949  1E82  1803               	btfsc	3,0
 11950  1E83  0008               	return
 11951                           
 11952                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11953  1E84  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11954  1E85  3E43               	addlw	(_Load+11)& (0+255)
 11955  1E86  0086               	movwf	6
 11956  1E87  3001               	movlw	1	; select bank2/3
 11957  1E88  0087               	movwf	7
 11958  1E89  3000               	movlw	0
 11959  1E8A  3FC0               	movwi [0]fsr1
 11960  1E8B  3FC1               	movwi [1]fsr1
 11961                           
 11962                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11963  1E8C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11964  1E8D  3E4D               	addlw	(_Load+21)& (0+255)
 11965  1E8E  0086               	movwf	6
 11966  1E8F  3001               	movlw	1	; select bank2/3
 11967  1E90  0087               	movwf	7
 11968  1E91  30FF               	movlw	255
 11969  1E92  3FC0               	movwi [0]fsr1
 11970  1E93  30FF               	movlw	255
 11971  1E94  3FC1               	movwi [1]fsr1
 11972  1E95  3001               	movlw	1
 11973  1E96  00A0               	movwf	??_setLoad_AH_AL_Restore
 11974  1E97  0820               	movf	??_setLoad_AH_AL_Restore,w
 11975  1E98  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11976  1E99  2E80               	goto	L9
 11977  1E9A                     __end_of_setLoad_AH_AL_Restore:	
 11978                           
 11979                           	psect	text73
 11980  1A36                     __ptext73:	
 11981 ;; *************** function _LED_Main *****************
 11982 ;; Defined at:
 11983 ;;		line 47 in file "../src/LED_B1.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;		None
 11986 ;; Auto vars:     Size  Location     Type
 11987 ;;		None
 11988 ;; Return value:  Size  Location     Type
 11989 ;;		None               void
 11990 ;; Registers used:
 11991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11992 ;; Tracked objects:
 11993 ;;		On entry : 0/0
 11994 ;;		On exit  : 0/0
 11995 ;;		Unchanged: 0/0
 11996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;Total ram usage:        0 bytes
 12002 ;; Hardware stack levels used:    1
 12003 ;; Hardware stack levels required when called:    7
 12004 ;; This function calls:
 12005 ;;		_setLED_Main
 12006 ;; This function is called by:
 12007 ;;		_main
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           
 12012                           ;psect for function _LED_Main
 12013  1A36                     _LED_Main:	
 12014                           
 12015                           ;LED_B1.c: 67: setLED_Main(99);
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12019  1A36  3063               	movlw	99
 12020  1A37  3191  2153         	fcall	_setLED_Main
 12021  1A39  0008               	return
 12022  1A3A                     __end_of_LED_Main:	
 12023                           
 12024                           	psect	text74
 12025  1153                     __ptext74:	
 12026 ;; *************** function _setLED_Main *****************
 12027 ;; Defined at:
 12028 ;;		line 229 in file "../src/LED_B1.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;  led             1    wreg     unsigned char 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  led             1    4[BANK0 ] unsigned char 
 12033 ;; Return value:  Size  Location     Type
 12034 ;;		None               void
 12035 ;; Registers used:
 12036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;Total ram usage:        3 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; Hardware stack levels required when called:    6
 12049 ;; This function calls:
 12050 ;;		_LedPointSelect
 12051 ;; This function is called by:
 12052 ;;		_LED_Main
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           
 12057                           ;psect for function _setLED_Main
 12058  1153                     _setLED_Main:	
 12059                           
 12060                           ;incstack = 0
 12061                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12062                           ;setLED_Main@led stored from wreg
 12063  1153  0020               	movlb	0	; select bank0
 12064  1154  00A4               	movwf	setLED_Main@led
 12065                           
 12066                           ;LED_B1.c: 230: LedPointSelect(led);
 12067  1155  0824               	movf	setLED_Main@led,w
 12068  1156  319B  231A  3191   	fcall	_LedPointSelect
 12069                           
 12070                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12071  1159  0021               	movlb	1	; select bank1
 12072  115A  084D               	movf	_LED^(0+128),w
 12073  115B  0086               	movwf	6
 12074  115C  3001               	movlw	1	; select bank2/3
 12075  115D  0087               	movwf	7
 12076  115E  1C81               	btfss	1,1
 12077  115F  0008               	return
 12078                           
 12079                           ;LED_B1.c: 232: LED->Time++;
 12080  1160  0A4D               	incf	_LED^(0+128),w
 12081  1161  0086               	movwf	6
 12082  1162  3001               	movlw	1	; select bank2/3
 12083  1163  0087               	movwf	7
 12084  1164  3001               	movlw	1
 12085  1165  0781               	addwf	1,f
 12086  1166  3141               	addfsr 1,1
 12087  1167  1803               	skipnc
 12088  1168  0A81               	incf	1,f
 12089                           
 12090                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12091  1169  0A4D               	incf	_LED^(0+128),w
 12092  116A  0086               	movwf	6
 12093  116B  3001               	movlw	1	; select bank2/3
 12094  116C  0087               	movwf	7
 12095  116D  3F40               	moviw [0]fsr1
 12096  116E  0020               	movlb	0	; select bank0
 12097  116F  00A2               	movwf	??_setLED_Main
 12098  1170  3F41               	moviw [1]fsr1
 12099  1171  00A3               	movwf	??_setLED_Main+1
 12100  1172  3000               	movlw	0
 12101  1173  0223               	subwf	??_setLED_Main+1,w
 12102  1174  3019               	movlw	25
 12103  1175  1903               	skipnz
 12104  1176  0222               	subwf	??_setLED_Main,w
 12105  1177  1C03               	skipc
 12106  1178  0008               	return
 12107                           
 12108                           ;LED_B1.c: 234: LED->Time = 0;
 12109  1179  0021               	movlb	1	; select bank1
 12110  117A  0A4D               	incf	_LED^(0+128),w
 12111  117B  0086               	movwf	6
 12112  117C  3001               	movlw	1	; select bank2/3
 12113  117D  0087               	movwf	7
 12114  117E  3000               	movlw	0
 12115  117F  3FC0               	movwi [0]fsr1
 12116  1180  3FC1               	movwi [1]fsr1
 12117                           
 12118                           ;LED_B1.c: 252: if (led == 99) {
 12119  1181  0020               	movlb	0	; select bank0
 12120  1182  0824               	movf	setLED_Main@led,w
 12121  1183  3A63               	xorlw	99
 12122  1184  1D03               	skipz
 12123  1185  0008               	return
 12124                           
 12125                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12126  1186  3020               	movlw	32
 12127  1187  068D               	xorwf	13,f
 12128  1188  0008               	return
 12129  1189                     __end_of_setLED_Main:	
 12130                           
 12131                           	psect	text75
 12132  1A32                     __ptext75:	
 12133 ;; *************** function _LED_Initialization *****************
 12134 ;; Defined at:
 12135 ;;		line 31 in file "../src/LED_B1.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;		None               void
 12142 ;; Registers used:
 12143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    8
 12156 ;; This function calls:
 12157 ;;		_setLED_Initialization
 12158 ;; This function is called by:
 12159 ;;		_main
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _LED_Initialization
 12165  1A32                     _LED_Initialization:	
 12166                           
 12167                           ;LED_B1.c: 42: setLED_Initialization(99);
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12171  1A32  3063               	movlw	99
 12172  1A33  319C  2453         	fcall	_setLED_Initialization
 12173  1A35  0008               	return
 12174  1A36                     __end_of_LED_Initialization:	
 12175                           
 12176                           	psect	text76
 12177  1C53                     __ptext76:	
 12178 ;; *************** function _setLED_Initialization *****************
 12179 ;; Defined at:
 12180 ;;		line 74 in file "../src/LED_B1.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;  led             1    wreg     unsigned char 
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  led             1    4[BANK0 ] unsigned char 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;		None               void
 12187 ;; Registers used:
 12188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;Total ram usage:        1 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    7
 12201 ;; This function calls:
 12202 ;;		_LedPointSelect
 12203 ;;		_setLED
 12204 ;; This function is called by:
 12205 ;;		_LED_Initialization
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _setLED_Initialization
 12211  1C53                     _setLED_Initialization:	
 12212                           
 12213                           ;incstack = 0
 12214                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12215                           ;setLED_Initialization@led stored from wreg
 12216  1C53  0020               	movlb	0	; select bank0
 12217  1C54  00A4               	movwf	setLED_Initialization@led
 12218                           
 12219                           ;LED_B1.c: 75: LedPointSelect(led);
 12220  1C55  0824               	movf	setLED_Initialization@led,w
 12221  1C56  319B  231A  319C   	fcall	_LedPointSelect
 12222                           
 12223                           ;LED_B1.c: 76: LED->Enable = 1;
 12224  1C59  0021               	movlb	1	; select bank1
 12225  1C5A  084D               	movf	_LED^(0+128),w
 12226  1C5B  0086               	movwf	6
 12227  1C5C  3001               	movlw	1	; select bank2/3
 12228  1C5D  0087               	movwf	7
 12229  1C5E  1401               	bsf	1,0
 12230                           
 12231                           ;LED_B1.c: 77: setLED(led, 0);
 12232  1C5F  0020               	movlb	0	; select bank0
 12233  1C60  01A2               	clrf	setLED@command
 12234  1C61  0824               	movf	setLED_Initialization@led,w
 12235  1C62  3191  21F9         	fcall	_setLED
 12236  1C64  0008               	return
 12237  1C65                     __end_of_setLED_Initialization:	
 12238                           
 12239                           	psect	text77
 12240  12AF                     __ptext77:	
 12241 ;; *************** function _Flash_Memory_Main *****************
 12242 ;; Defined at:
 12243 ;;		line 976 in file "../src/MCU_B1.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;		None
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12248 ;; Return value:  Size  Location     Type
 12249 ;;		None               void
 12250 ;; Registers used:
 12251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12252 ;; Tracked objects:
 12253 ;;		On entry : 0/0
 12254 ;;		On exit  : 0/0
 12255 ;;		Unchanged: 0/0
 12256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;Total ram usage:        3 bytes
 12262 ;; Hardware stack levels used:    1
 12263 ;; Hardware stack levels required when called:    8
 12264 ;; This function calls:
 12265 ;;		_Flash_Memory_Modify
 12266 ;;		_getAll_Sw_KeyStatus
 12267 ;;		_getMain_All_LightsStatus
 12268 ;; This function is called by:
 12269 ;;		_main
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           
 12274                           ;psect for function _Flash_Memory_Main
 12275  12AF                     _Flash_Memory_Main:	
 12276                           
 12277                           ;MCU_B1.c: 977: char key_Status = 0;
 12278                           
 12279                           ;incstack = 0
 12280                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12281  12AF  0020               	movlb	0	; select bank0
 12282  12B0  01A7               	clrf	Flash_Memory_Main@key_Status
 12283                           
 12284                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12285  12B1  319B  23EB  3192   	fcall	_getAll_Sw_KeyStatus
 12286  12B4  0020               	movlb	0	; select bank0
 12287  12B5  00A6               	movwf	??_Flash_Memory_Main
 12288  12B6  0826               	movf	??_Flash_Memory_Main,w
 12289  12B7  00A7               	movwf	Flash_Memory_Main@key_Status
 12290                           
 12291                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12292  12B8  0024               	movlb	4	; select bank4
 12293  12B9  1C44               	btfss	(_Memory^(0+512)+36),0
 12294  12BA  0008               	return
 12295                           
 12296                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12297  12BB  0020               	movlb	0	; select bank0
 12298  12BC  01A8               	clrf	_Flash_Memory_Main$3147
 12299  12BD  319A  22A8  3192   	fcall	_getMain_All_LightsStatus
 12300  12C0  3800               	iorlw	0
 12301  12C1  1D03               	skipz
 12302  12C2  2AC9               	goto	l7963
 12303  12C3  0020               	movlb	0	; select bank0
 12304  12C4  08A7               	movf	Flash_Memory_Main@key_Status,f
 12305  12C5  1D03               	skipz
 12306  12C6  2AC9               	goto	l7963
 12307  12C7  01A8               	clrf	_Flash_Memory_Main$3147
 12308  12C8  0AA8               	incf	_Flash_Memory_Main$3147,f
 12309  12C9                     l7963:	
 12310  12C9  0020               	movlb	0	; select bank0
 12311  12CA  0828               	movf	_Flash_Memory_Main$3147,w
 12312  12CB  0024               	movlb	4	; select bank4
 12313  12CC  10C4               	bcf	(_Memory^(0+512)+36),1
 12314  12CD  1D03               	skipz
 12315  12CE  14C4               	bsf	(_Memory^(0+512)+36),1
 12316                           
 12317                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12318  12CF  1CC4               	btfss	(_Memory^(0+512)+36),1
 12319  12D0  2AEA               	goto	l1244
 12320                           
 12321                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12322  12D1  15C4               	bsf	(_Memory^(0+512)+36),3
 12323                           
 12324                           ;MCU_B1.c: 985: Memory.Time++;
 12325  12D2  3001               	movlw	1
 12326  12D3  07C2               	addwf	(_Memory^(0+512)+34),f
 12327  12D4  3000               	movlw	0
 12328  12D5  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12329                           
 12330                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12331  12D6  3022               	movlw	34
 12332  12D7  3E20               	addlw	_Memory& (0+255)
 12333  12D8  0086               	movwf	6
 12334  12D9  3002               	movlw	2	; select bank4/5
 12335  12DA  0087               	movwf	7
 12336  12DB  3F40               	moviw [0]fsr1
 12337  12DC  3A0A               	xorlw	10
 12338  12DD  1D03               	skipz
 12339  12DE  2AE1               	goto	u7975
 12340  12DF  3F41               	moviw [1]fsr1
 12341  12E0  3A00               	xorlw	0
 12342  12E1                     u7975:	
 12343  12E1  1D03               	skipz
 12344  12E2  0008               	return
 12345                           
 12346                           ;MCU_B1.c: 987: Memory.Time = 0;
 12347  12E3  01C2               	clrf	(_Memory^(0+512)+34)
 12348  12E4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12349                           
 12350                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12351  12E5  1044               	bcf	(_Memory^(0+512)+36),0
 12352                           
 12353                           ;MCU_B1.c: 989: Memory.GO = 0;
 12354  12E6  10C4               	bcf	(_Memory^(0+512)+36),1
 12355                           
 12356                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12357  12E7  318A  22FF         	fcall	_Flash_Memory_Modify
 12358                           
 12359                           ;MCU_B1.c: 991: }
 12360                           ;MCU_B1.c: 992: } else {
 12361  12E9  0008               	return
 12362  12EA                     l1244:	
 12363                           
 12364                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12365  12EA  1DC4               	btfss	(_Memory^(0+512)+36),3
 12366  12EB  0008               	return
 12367                           
 12368                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12369  12EC  11C4               	bcf	(_Memory^(0+512)+36),3
 12370                           
 12371                           ;MCU_B1.c: 995: Memory.Time = 0;
 12372  12ED  01C2               	clrf	(_Memory^(0+512)+34)
 12373  12EE  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12374  12EF  0008               	return
 12375  12F0                     __end_of_Flash_Memory_Main:	
 12376                           
 12377                           	psect	text78
 12378  1BEB                     __ptext78:	
 12379 ;; *************** function _getAll_Sw_KeyStatus *****************
 12380 ;; Defined at:
 12381 ;;		line 278 in file "../src/Switch_B1.c"
 12382 ;; Parameters:    Size  Location     Type
 12383 ;;		None
 12384 ;; Auto vars:     Size  Location     Type
 12385 ;;  status          1    1[BANK0 ] unsigned char 
 12386 ;; Return value:  Size  Location     Type
 12387 ;;                  1    wreg      unsigned char 
 12388 ;; Registers used:
 12389 ;;		wreg, status,2
 12390 ;; Tracked objects:
 12391 ;;		On entry : 0/0
 12392 ;;		On exit  : 0/0
 12393 ;;		Unchanged: 0/0
 12394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12399 ;;Total ram usage:        3 bytes
 12400 ;; Hardware stack levels used:    1
 12401 ;; Hardware stack levels required when called:    5
 12402 ;; This function calls:
 12403 ;;		Nothing
 12404 ;; This function is called by:
 12405 ;;		_Flash_Memory_Main
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           
 12410                           ;psect for function _getAll_Sw_KeyStatus
 12411  1BEB                     _getAll_Sw_KeyStatus:	
 12412                           
 12413                           ;Switch_B1.c: 279: char status = 0;
 12414                           
 12415                           ;incstack = 0
 12416                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12417  1BEB  0020               	movlb	0	; select bank0
 12418  1BEC  01A1               	clrf	getAll_Sw_KeyStatus@status
 12419                           
 12420                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12421  1BED  01A2               	clrf	_getAll_Sw_KeyStatus$6464
 12422  1BEE  0AA2               	incf	_getAll_Sw_KeyStatus$6464,f
 12423  1BEF  1F0C               	btfss	12,6	;volatile
 12424  1BF0  1A0C               	btfsc	12,4	;volatile
 12425  1BF1  2BF6               	goto	l7515
 12426  1BF2  1C0C               	btfss	12,0	;volatile
 12427  1BF3  1B8C               	btfsc	12,7	;volatile
 12428  1BF4  2BF6               	goto	l7515
 12429  1BF5  01A2               	clrf	_getAll_Sw_KeyStatus$6464
 12430  1BF6                     l7515:	
 12431  1BF6  0822               	movf	_getAll_Sw_KeyStatus$6464,w
 12432  1BF7  00A0               	movwf	??_getAll_Sw_KeyStatus
 12433  1BF8  0820               	movf	??_getAll_Sw_KeyStatus,w
 12434  1BF9  00A1               	movwf	getAll_Sw_KeyStatus@status
 12435                           
 12436                           ;Switch_B1.c: 302: return status;
 12437  1BFA  0821               	movf	getAll_Sw_KeyStatus@status,w
 12438  1BFB  0008               	return
 12439  1BFC                     __end_of_getAll_Sw_KeyStatus:	
 12440                           
 12441                           	psect	text79
 12442  0AFF                     __ptext79:	
 12443 ;; *************** function _Flash_Memory_Modify *****************
 12444 ;; Defined at:
 12445 ;;		line 1053 in file "../src/MCU_B1.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;		None
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  i               1    5[BANK0 ] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;		None               void
 12452 ;; Registers used:
 12453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;Total ram usage:        2 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    7
 12466 ;; This function calls:
 12467 ;;		_Flash_Memory_Erasing
 12468 ;;		_Flash_Memory_Read
 12469 ;;		_Flash_Memory_Write
 12470 ;;		_setMemory_Data
 12471 ;; This function is called by:
 12472 ;;		_Flash_Memory_Main
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _Flash_Memory_Modify
 12478  0AFF                     _Flash_Memory_Modify:	
 12479                           
 12480                           ;MCU_B1.c: 1054: char i = 0;
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12484  0AFF  0020               	movlb	0	; select bank0
 12485  0B00  01A5               	clrf	Flash_Memory_Modify@i
 12486                           
 12487                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12488  0B01  01A5               	clrf	Flash_Memory_Modify@i
 12489  0B02  3020               	movlw	32
 12490  0B03  0225               	subwf	Flash_Memory_Modify@i,w
 12491  0B04  1803               	btfsc	3,0
 12492  0B05  2B1B               	goto	l7533
 12493  0B06                     l7527:	
 12494                           
 12495                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12496  0B06  0825               	movf	Flash_Memory_Modify@i,w
 12497  0B07  319D  25DE  318A   	fcall	_Flash_Memory_Read
 12498  0B0A  0020               	movlb	0	; select bank0
 12499  0B0B  00A4               	movwf	??_Flash_Memory_Modify
 12500  0B0C  0825               	movf	Flash_Memory_Modify@i,w
 12501  0B0D  3E20               	addlw	_Memory& (0+255)
 12502  0B0E  0086               	movwf	6
 12503  0B0F  3002               	movlw	2	; select bank4/5
 12504  0B10  0087               	movwf	7
 12505  0B11  0824               	movf	??_Flash_Memory_Modify,w
 12506  0B12  0081               	movwf	1
 12507  0B13  3001               	movlw	1
 12508  0B14  00A4               	movwf	??_Flash_Memory_Modify
 12509  0B15  0824               	movf	??_Flash_Memory_Modify,w
 12510  0B16  07A5               	addwf	Flash_Memory_Modify@i,f
 12511  0B17  3020               	movlw	32
 12512  0B18  0225               	subwf	Flash_Memory_Modify@i,w
 12513  0B19  1C03               	skipc
 12514  0B1A  2B06               	goto	l7527
 12515  0B1B                     l7533:	
 12516                           
 12517                           ;MCU_B1.c: 1057: }
 12518                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12519  0B1B  0021               	movlb	1	; select bank1
 12520  0B1C  086E               	movf	_product^(0+128),w
 12521  0B1D  0086               	movwf	6
 12522  0B1E  3001               	movlw	1	; select bank2/3
 12523  0B1F  0087               	movwf	7
 12524  0B20  3001               	movlw	1	; select bank2/3
 12525  0B21  3F4C               	moviw [12]fsr1
 12526  0B22  0020               	movlb	0	; select bank0
 12527  0B23  00A0               	movwf	setMemory_Data@data
 12528  0B24  3000               	movlw	0
 12529  0B25  319B  2326  318A   	fcall	_setMemory_Data
 12530                           
 12531                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12532  0B28  0021               	movlb	1	; select bank1
 12533  0B29  086E               	movf	_product^(0+128),w
 12534  0B2A  0086               	movwf	6
 12535  0B2B  3001               	movlw	1	; select bank2/3
 12536  0B2C  0087               	movwf	7
 12537  0B2D  3001               	movlw	1	; select bank2/3
 12538  0B2E  3F4D               	moviw [13]fsr1
 12539  0B2F  0020               	movlb	0	; select bank0
 12540  0B30  00A0               	movwf	setMemory_Data@data
 12541  0B31  3001               	movlw	1
 12542  0B32  319B  2326  318A   	fcall	_setMemory_Data
 12543                           
 12544                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12545  0B35  0021               	movlb	1	; select bank1
 12546  0B36  086E               	movf	_product^(0+128),w
 12547  0B37  0086               	movwf	6
 12548  0B38  3001               	movlw	1	; select bank2/3
 12549  0B39  0087               	movwf	7
 12550  0B3A  3001               	movlw	1	; select bank2/3
 12551  0B3B  3F4E               	moviw [14]fsr1
 12552  0B3C  0020               	movlb	0	; select bank0
 12553  0B3D  00A0               	movwf	setMemory_Data@data
 12554  0B3E  3002               	movlw	2
 12555  0B3F  319B  2326  318A   	fcall	_setMemory_Data
 12556                           
 12557                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12558  0B42  0021               	movlb	1	; select bank1
 12559  0B43  086E               	movf	_product^(0+128),w
 12560  0B44  0086               	movwf	6
 12561  0B45  3001               	movlw	1	; select bank2/3
 12562  0B46  0087               	movwf	7
 12563  0B47  3001               	movlw	1	; select bank2/3
 12564  0B48  3F55               	moviw [21]fsr1
 12565  0B49  0020               	movlb	0	; select bank0
 12566  0B4A  00A0               	movwf	setMemory_Data@data
 12567  0B4B  3003               	movlw	3
 12568  0B4C  319B  2326  318A   	fcall	_setMemory_Data
 12569                           
 12570                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12571  0B4F  0021               	movlb	1	; select bank1
 12572  0B50  086E               	movf	_product^(0+128),w
 12573  0B51  0086               	movwf	6
 12574  0B52  3001               	movlw	1	; select bank2/3
 12575  0B53  0087               	movwf	7
 12576  0B54  3001               	movlw	1	; select bank2/3
 12577  0B55  3F56               	moviw [22]fsr1
 12578  0B56  0020               	movlb	0	; select bank0
 12579  0B57  00A0               	movwf	setMemory_Data@data
 12580  0B58  3004               	movlw	4
 12581  0B59  319B  2326  318A   	fcall	_setMemory_Data
 12582                           
 12583                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12584  0B5C  0021               	movlb	1	; select bank1
 12585  0B5D  086E               	movf	_product^(0+128),w
 12586  0B5E  0086               	movwf	6
 12587  0B5F  3001               	movlw	1	; select bank2/3
 12588  0B60  0087               	movwf	7
 12589  0B61  3001               	movlw	1	; select bank2/3
 12590  0B62  3F57               	moviw [23]fsr1
 12591  0B63  0020               	movlb	0	; select bank0
 12592  0B64  00A0               	movwf	setMemory_Data@data
 12593  0B65  3005               	movlw	5
 12594  0B66  319B  2326  318A   	fcall	_setMemory_Data
 12595                           
 12596                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12597  0B69  0021               	movlb	1	; select bank1
 12598  0B6A  1EB9               	btfss	(_myMain^(0+128)+10),5
 12599  0B6B  2B76               	goto	l7541
 12600                           
 12601                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12602  0B6C  12B9               	bcf	(_myMain^(0+128)+10),5
 12603                           
 12604                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12605  0B6D  30AA               	movlw	170
 12606  0B6E  0020               	movlb	0	; select bank0
 12607  0B6F  00A4               	movwf	??_Flash_Memory_Modify
 12608  0B70  0824               	movf	??_Flash_Memory_Modify,w
 12609  0B71  00A0               	movwf	setMemory_Data@data
 12610  0B72  301E               	movlw	30
 12611  0B73  319B  2326  318A   	fcall	_setMemory_Data
 12612  0B76                     l7541:	
 12613                           
 12614                           ;MCU_B1.c: 1068: }
 12615                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12616  0B76  0024               	movlb	4	; select bank4
 12617  0B77  1D44               	btfss	(_Memory^(0+512)+36),2
 12618  0B78  2B7D               	goto	l1268
 12619                           
 12620                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12621  0B79  1144               	bcf	(_Memory^(0+512)+36),2
 12622                           
 12623                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12624  0B7A  0021               	movlb	1	; select bank1
 12625  0B7B  11AF               	bcf	_myMain^(0+128),3
 12626                           
 12627                           ;MCU_B1.c: 1073: myMain.First = 0;
 12628  0B7C  12AF               	bcf	_myMain^(0+128),5
 12629  0B7D                     l1268:	
 12630                           
 12631                           ;MCU_B1.c: 1075: }
 12632                           ;MCU_B1.c: 1076: GIE = 0;
 12633  0B7D  138B               	bcf	11,7	;volatile
 12634                           
 12635                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12636  0B7E  319B  2332  318A   	fcall	_Flash_Memory_Erasing
 12637                           
 12638                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12639  0B81  3190  2054         	fcall	_Flash_Memory_Write
 12640                           
 12641                           ;MCU_B1.c: 1079: GIE = 1;
 12642  0B83  178B               	bsf	11,7	;volatile
 12643  0B84  0008               	return
 12644  0B85                     __end_of_Flash_Memory_Modify:	
 12645                           
 12646                           	psect	text80
 12647  1B32                     __ptext80:	
 12648 ;; *************** function _Flash_Memory_Erasing *****************
 12649 ;; Defined at:
 12650 ;;		line 1042 in file "../src/MCU_B1.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;		None
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;		None
 12655 ;; Return value:  Size  Location     Type
 12656 ;;		None               void
 12657 ;; Registers used:
 12658 ;;		wreg, status,2, status,0, pclath, cstack
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        0 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    6
 12671 ;; This function calls:
 12672 ;;		_Flash_Memory_Unlock
 12673 ;; This function is called by:
 12674 ;;		_Flash_Memory_Modify
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           
 12679                           ;psect for function _Flash_Memory_Erasing
 12680  1B32                     _Flash_Memory_Erasing:	
 12681                           
 12682                           ;MCU_B1.c: 1043: CFGS = 0;
 12683                           
 12684                           ;incstack = 0
 12685                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12686  1B32  0023               	movlb	3	; select bank3
 12687  1B33  1315               	bcf	21,6	;volatile
 12688                           
 12689                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12690  1B34  3030               	movlw	48
 12691  1B35  0092               	movwf	18	;volatile
 12692                           
 12693                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12694  1B36  0191               	clrf	17	;volatile
 12695                           
 12696                           ;MCU_B1.c: 1046: FREE = 1;
 12697  1B37  1615               	bsf	21,4	;volatile
 12698                           
 12699                           ;MCU_B1.c: 1047: WREN = 1;
 12700  1B38  1515               	bsf	21,2	;volatile
 12701                           
 12702                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12703  1B39  319A  229F         	fcall	_Flash_Memory_Unlock
 12704                           
 12705                           ;MCU_B1.c: 1049: WREN = 0;
 12706  1B3B  0023               	movlb	3	; select bank3
 12707  1B3C  1115               	bcf	21,2	;volatile
 12708  1B3D  0008               	return
 12709  1B3E                     __end_of_Flash_Memory_Erasing:	
 12710                           
 12711                           	psect	text81
 12712  070E                     __ptext81:	
 12713 ;; *************** function _Flash_Memory_Initialization *****************
 12714 ;; Defined at:
 12715 ;;		line 932 in file "../src/MCU_B1.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;		None
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  value           1    5[BANK0 ] unsigned char 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;		None               void
 12722 ;; Registers used:
 12723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;Total ram usage:        2 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    7
 12736 ;; This function calls:
 12737 ;;		_Flash_Memory_Read
 12738 ;;		_Flash_Memory_Write
 12739 ;;		_setMemory_Data
 12740 ;; This function is called by:
 12741 ;;		_main
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           
 12746                           ;psect for function _Flash_Memory_Initialization
 12747  070E                     _Flash_Memory_Initialization:	
 12748                           
 12749                           ;MCU_B1.c: 933: char value = 0;
 12750                           
 12751                           ;incstack = 0
 12752                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12753  070E  0020               	movlb	0	; select bank0
 12754  070F  01A5               	clrf	Flash_Memory_Initialization@value
 12755                           
 12756                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12757  0710  301F               	movlw	31
 12758  0711  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12759  0714  3AAA               	xorlw	170
 12760  0715  1D03               	skipz
 12761  0716  2F90               	goto	l7937
 12762                           
 12763                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12764  0717  3000               	movlw	0
 12765  0718  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12766  071B  0020               	movlb	0	; select bank0
 12767  071C  00A4               	movwf	??_Flash_Memory_Initialization
 12768  071D  0021               	movlb	1	; select bank1
 12769  071E  086E               	movf	_product^(0+128),w
 12770  071F  3E0C               	addlw	12
 12771  0720  0086               	movwf	6
 12772  0721  3001               	movlw	1	; select bank2/3
 12773  0722  0087               	movwf	7
 12774  0723  0020               	movlb	0	; select bank0
 12775  0724  0824               	movf	??_Flash_Memory_Initialization,w
 12776  0725  0081               	movwf	1
 12777                           
 12778                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12779  0726  3001               	movlw	1
 12780  0727  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12781  072A  0020               	movlb	0	; select bank0
 12782  072B  00A4               	movwf	??_Flash_Memory_Initialization
 12783  072C  0021               	movlb	1	; select bank1
 12784  072D  086E               	movf	_product^(0+128),w
 12785  072E  3E0D               	addlw	13
 12786  072F  0086               	movwf	6
 12787  0730  3001               	movlw	1	; select bank2/3
 12788  0731  0087               	movwf	7
 12789  0732  0020               	movlb	0	; select bank0
 12790  0733  0824               	movf	??_Flash_Memory_Initialization,w
 12791  0734  0081               	movwf	1
 12792                           
 12793                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12794  0735  3002               	movlw	2
 12795  0736  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12796  0739  0020               	movlb	0	; select bank0
 12797  073A  00A4               	movwf	??_Flash_Memory_Initialization
 12798  073B  0021               	movlb	1	; select bank1
 12799  073C  086E               	movf	_product^(0+128),w
 12800  073D  3E0E               	addlw	14
 12801  073E  0086               	movwf	6
 12802  073F  3001               	movlw	1	; select bank2/3
 12803  0740  0087               	movwf	7
 12804  0741  0020               	movlb	0	; select bank0
 12805  0742  0824               	movf	??_Flash_Memory_Initialization,w
 12806  0743  0081               	movwf	1
 12807                           
 12808                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12809  0744  3003               	movlw	3
 12810  0745  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12811  0748  0020               	movlb	0	; select bank0
 12812  0749  00A4               	movwf	??_Flash_Memory_Initialization
 12813  074A  0021               	movlb	1	; select bank1
 12814  074B  086E               	movf	_product^(0+128),w
 12815  074C  3E15               	addlw	21
 12816  074D  0086               	movwf	6
 12817  074E  3001               	movlw	1	; select bank2/3
 12818  074F  0087               	movwf	7
 12819  0750  0020               	movlb	0	; select bank0
 12820  0751  0824               	movf	??_Flash_Memory_Initialization,w
 12821  0752  0081               	movwf	1
 12822                           
 12823                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12824  0753  3004               	movlw	4
 12825  0754  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12826  0757  0020               	movlb	0	; select bank0
 12827  0758  00A4               	movwf	??_Flash_Memory_Initialization
 12828  0759  0021               	movlb	1	; select bank1
 12829  075A  086E               	movf	_product^(0+128),w
 12830  075B  3E16               	addlw	22
 12831  075C  0086               	movwf	6
 12832  075D  3001               	movlw	1	; select bank2/3
 12833  075E  0087               	movwf	7
 12834  075F  0020               	movlb	0	; select bank0
 12835  0760  0824               	movf	??_Flash_Memory_Initialization,w
 12836  0761  0081               	movwf	1
 12837                           
 12838                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12839  0762  3005               	movlw	5
 12840  0763  319D  25DE  3187   	fcall	_Flash_Memory_Read
 12841  0766  0020               	movlb	0	; select bank0
 12842  0767  00A4               	movwf	??_Flash_Memory_Initialization
 12843  0768  0021               	movlb	1	; select bank1
 12844  0769  086E               	movf	_product^(0+128),w
 12845  076A  3E17               	addlw	23
 12846  076B  0086               	movwf	6
 12847  076C  3001               	movlw	1	; select bank2/3
 12848  076D  0087               	movwf	7
 12849  076E  0020               	movlb	0	; select bank0
 12850  076F  0824               	movf	??_Flash_Memory_Initialization,w
 12851  0770  0081               	movwf	1
 12852                           
 12853                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12854  0771  0021               	movlb	1	; select bank1
 12855  0772  086E               	movf	_product^(0+128),w
 12856  0773  3E0C               	addlw	12
 12857  0774  0086               	movwf	6
 12858  0775  3001               	movlw	1	; select bank2/3
 12859  0776  0087               	movwf	7
 12860  0777  0801               	movf	1,w
 12861  0778  3AFF               	xorlw	255
 12862  0779  1D03               	skipz
 12863  077A  0008               	return
 12864  077B  086E               	movf	_product^(0+128),w
 12865  077C  3E0D               	addlw	13
 12866  077D  0086               	movwf	6
 12867  077E  3001               	movlw	1	; select bank2/3
 12868  077F  0087               	movwf	7
 12869  0780  0801               	movf	1,w
 12870  0781  3AFF               	xorlw	255
 12871  0782  1D03               	skipz
 12872  0783  0008               	return
 12873  0784  086E               	movf	_product^(0+128),w
 12874  0785  3E0E               	addlw	14
 12875  0786  0086               	movwf	6
 12876  0787  3001               	movlw	1	; select bank2/3
 12877  0788  0087               	movwf	7
 12878  0789  0801               	movf	1,w
 12879  078A  3AFF               	xorlw	255
 12880  078B  1D03               	skipz
 12881  078C  0008               	return
 12882                           
 12883                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12884  078D  15AF               	bsf	_myMain^(0+128),3
 12885                           
 12886                           ;MCU_B1.c: 951: myMain.First = 1;
 12887  078E  16AF               	bsf	_myMain^(0+128),5
 12888                           
 12889                           ;MCU_B1.c: 952: }
 12890                           ;MCU_B1.c: 953: } else {
 12891  078F  0008               	return
 12892  0790                     l7937:	
 12893                           
 12894                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12895  0790  30FF               	movlw	255
 12896  0791  0020               	movlb	0	; select bank0
 12897  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12898  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12899  0794  00A0               	movwf	setMemory_Data@data
 12900  0795  3000               	movlw	0
 12901  0796  319B  2326  3187   	fcall	_setMemory_Data
 12902                           
 12903                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12904  0799  30FF               	movlw	255
 12905  079A  0020               	movlb	0	; select bank0
 12906  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12907  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12908  079D  00A0               	movwf	setMemory_Data@data
 12909  079E  3001               	movlw	1
 12910  079F  319B  2326  3187   	fcall	_setMemory_Data
 12911                           
 12912                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12913  07A2  30FF               	movlw	255
 12914  07A3  0020               	movlb	0	; select bank0
 12915  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 12916  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 12917  07A6  00A0               	movwf	setMemory_Data@data
 12918  07A7  3002               	movlw	2
 12919  07A8  319B  2326  3187   	fcall	_setMemory_Data
 12920                           
 12921                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12922  07AB  30FF               	movlw	255
 12923  07AC  0020               	movlb	0	; select bank0
 12924  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 12925  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 12926  07AF  00A0               	movwf	setMemory_Data@data
 12927  07B0  3003               	movlw	3
 12928  07B1  319B  2326  3187   	fcall	_setMemory_Data
 12929                           
 12930                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12931  07B4  30FF               	movlw	255
 12932  07B5  0020               	movlb	0	; select bank0
 12933  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 12934  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 12935  07B8  00A0               	movwf	setMemory_Data@data
 12936  07B9  3004               	movlw	4
 12937  07BA  319B  2326  3187   	fcall	_setMemory_Data
 12938                           
 12939                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12940  07BD  30FF               	movlw	255
 12941  07BE  0020               	movlb	0	; select bank0
 12942  07BF  00A4               	movwf	??_Flash_Memory_Initialization
 12943  07C0  0824               	movf	??_Flash_Memory_Initialization,w
 12944  07C1  00A0               	movwf	setMemory_Data@data
 12945  07C2  3005               	movlw	5
 12946  07C3  319B  2326  3187   	fcall	_setMemory_Data
 12947                           
 12948                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12949  07C6  30AA               	movlw	170
 12950  07C7  0020               	movlb	0	; select bank0
 12951  07C8  00A4               	movwf	??_Flash_Memory_Initialization
 12952  07C9  0824               	movf	??_Flash_Memory_Initialization,w
 12953  07CA  00A0               	movwf	setMemory_Data@data
 12954  07CB  301F               	movlw	31
 12955  07CC  319B  2326  3187   	fcall	_setMemory_Data
 12956                           
 12957                           ;MCU_B1.c: 966: GIE = 0;
 12958  07CF  138B               	bcf	11,7	;volatile
 12959                           
 12960                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12961  07D0  3190  2054         	fcall	_Flash_Memory_Write
 12962                           
 12963                           ;MCU_B1.c: 968: GIE = 1;
 12964  07D2  178B               	bsf	11,7	;volatile
 12965                           
 12966                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12967  07D3  0021               	movlb	1	; select bank1
 12968  07D4  15AF               	bsf	_myMain^(0+128),3
 12969                           
 12970                           ;MCU_B1.c: 970: myMain.First = 1;
 12971  07D5  16AF               	bsf	_myMain^(0+128),5
 12972                           
 12973                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12974  07D6  1639               	bsf	(_myMain^(0+128)+10),4
 12975  07D7  0008               	return
 12976  07D8                     __end_of_Flash_Memory_Initialization:	
 12977                           
 12978                           	psect	text82
 12979  1B26                     __ptext82:	
 12980 ;; *************** function _setMemory_Data *****************
 12981 ;; Defined at:
 12982 ;;		line 1094 in file "../src/MCU_B1.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  address         1    wreg     unsigned char 
 12985 ;;  data            1    0[BANK0 ] unsigned char 
 12986 ;; Auto vars:     Size  Location     Type
 12987 ;;  address         1    2[BANK0 ] unsigned char 
 12988 ;; Return value:  Size  Location     Type
 12989 ;;		None               void
 12990 ;; Registers used:
 12991 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12992 ;; Tracked objects:
 12993 ;;		On entry : 0/0
 12994 ;;		On exit  : 0/0
 12995 ;;		Unchanged: 0/0
 12996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12997 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;Total ram usage:        3 bytes
 13002 ;; Hardware stack levels used:    1
 13003 ;; Hardware stack levels required when called:    5
 13004 ;; This function calls:
 13005 ;;		Nothing
 13006 ;; This function is called by:
 13007 ;;		_Flash_Memory_Initialization
 13008 ;;		_Flash_Memory_Modify
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012                           
 13013                           ;psect for function _setMemory_Data
 13014  1B26                     _setMemory_Data:	
 13015                           
 13016                           ;incstack = 0
 13017                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13018                           ;setMemory_Data@address stored from wreg
 13019  1B26  0020               	movlb	0	; select bank0
 13020  1B27  00A2               	movwf	setMemory_Data@address
 13021                           
 13022                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13023  1B28  0820               	movf	setMemory_Data@data,w
 13024  1B29  00A1               	movwf	??_setMemory_Data
 13025  1B2A  0822               	movf	setMemory_Data@address,w
 13026  1B2B  3E20               	addlw	_Memory& (0+255)
 13027  1B2C  0086               	movwf	6
 13028  1B2D  3002               	movlw	2	; select bank4/5
 13029  1B2E  0087               	movwf	7
 13030  1B2F  0821               	movf	??_setMemory_Data,w
 13031  1B30  0081               	movwf	1
 13032  1B31  0008               	return
 13033  1B32                     __end_of_setMemory_Data:	
 13034                           
 13035                           	psect	text83
 13036  1054                     __ptext83:	
 13037 ;; *************** function _Flash_Memory_Write *****************
 13038 ;; Defined at:
 13039 ;;		line 1023 in file "../src/MCU_B1.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;		None
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;  i               1    1[BANK0 ] unsigned char 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;		None               void
 13046 ;; Registers used:
 13047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;Total ram usage:        2 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    6
 13060 ;; This function calls:
 13061 ;;		_Flash_Memory_Unlock
 13062 ;; This function is called by:
 13063 ;;		_Flash_Memory_Initialization
 13064 ;;		_Flash_Memory_Modify
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function _Flash_Memory_Write
 13070  1054                     _Flash_Memory_Write:	
 13071                           
 13072                           ;MCU_B1.c: 1024: char i = 0;
 13073                           
 13074                           ;incstack = 0
 13075                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13076  1054  0020               	movlb	0	; select bank0
 13077  1055  01A1               	clrf	Flash_Memory_Write@i
 13078                           
 13079                           ;MCU_B1.c: 1025: CFGS = 0;
 13080  1056  0023               	movlb	3	; select bank3
 13081  1057  1315               	bcf	21,6	;volatile
 13082                           
 13083                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13084  1058  3030               	movlw	48
 13085  1059  0092               	movwf	18	;volatile
 13086                           
 13087                           ;MCU_B1.c: 1027: PMDATH = 0;
 13088  105A  0194               	clrf	20	;volatile
 13089                           
 13090                           ;MCU_B1.c: 1028: FREE = 0;
 13091  105B  1215               	bcf	21,4	;volatile
 13092                           
 13093                           ;MCU_B1.c: 1029: LWLO = 1;
 13094  105C  1695               	bsf	21,5	;volatile
 13095                           
 13096                           ;MCU_B1.c: 1030: WREN = 1;
 13097  105D  1515               	bsf	21,2	;volatile
 13098                           
 13099                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13100  105E  0020               	movlb	0	; select bank0
 13101  105F  01A1               	clrf	Flash_Memory_Write@i
 13102  1060  3020               	movlw	32
 13103  1061  0221               	subwf	Flash_Memory_Write@i,w
 13104  1062  1803               	btfsc	3,0
 13105  1063  287C               	goto	l1258
 13106  1064                     l7055:	
 13107                           
 13108                           ;MCU_B1.c: 1032: PMADRL = i;
 13109  1064  0821               	movf	Flash_Memory_Write@i,w
 13110  1065  0023               	movlb	3	; select bank3
 13111  1066  0091               	movwf	17	;volatile
 13112                           
 13113                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13114  1067  0020               	movlb	0	; select bank0
 13115  1068  0821               	movf	Flash_Memory_Write@i,w
 13116  1069  3E20               	addlw	_Memory& (0+255)
 13117  106A  0086               	movwf	6
 13118  106B  3002               	movlw	2	; select bank4/5
 13119  106C  0087               	movwf	7
 13120  106D  0801               	movf	1,w
 13121  106E  0023               	movlb	3	; select bank3
 13122  106F  0093               	movwf	19	;volatile
 13123                           
 13124                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13125  1070  319A  229F  3190   	fcall	_Flash_Memory_Unlock
 13126  1073  3001               	movlw	1
 13127  1074  0020               	movlb	0	; select bank0
 13128  1075  00A0               	movwf	??_Flash_Memory_Write
 13129  1076  0820               	movf	??_Flash_Memory_Write,w
 13130  1077  07A1               	addwf	Flash_Memory_Write@i,f
 13131  1078  3020               	movlw	32
 13132  1079  0221               	subwf	Flash_Memory_Write@i,w
 13133  107A  1C03               	skipc
 13134  107B  2864               	goto	l7055
 13135  107C                     l1258:	
 13136                           
 13137                           ;MCU_B1.c: 1035: }
 13138                           ;MCU_B1.c: 1036: LWLO = 0;
 13139  107C  0023               	movlb	3	; select bank3
 13140  107D  1295               	bcf	21,5	;volatile
 13141                           
 13142                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13143  107E  319A  229F         	fcall	_Flash_Memory_Unlock
 13144                           
 13145                           ;MCU_B1.c: 1038: WREN = 0;
 13146  1080  0023               	movlb	3	; select bank3
 13147  1081  1115               	bcf	21,2	;volatile
 13148  1082  0008               	return
 13149  1083                     __end_of_Flash_Memory_Write:	
 13150                           
 13151                           	psect	text84
 13152  1A9F                     __ptext84:	
 13153 ;; *************** function _Flash_Memory_Unlock *****************
 13154 ;; Defined at:
 13155 ;;		line 1002 in file "../src/MCU_B1.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;		None
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;		None
 13160 ;; Return value:  Size  Location     Type
 13161 ;;		None               void
 13162 ;; Registers used:
 13163 ;;		wreg
 13164 ;; Tracked objects:
 13165 ;;		On entry : 0/0
 13166 ;;		On exit  : 0/0
 13167 ;;		Unchanged: 0/0
 13168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;Total ram usage:        0 bytes
 13174 ;; Hardware stack levels used:    1
 13175 ;; Hardware stack levels required when called:    5
 13176 ;; This function calls:
 13177 ;;		Nothing
 13178 ;; This function is called by:
 13179 ;;		_Flash_Memory_Write
 13180 ;;		_Flash_Memory_Erasing
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           
 13185                           ;psect for function _Flash_Memory_Unlock
 13186  1A9F                     _Flash_Memory_Unlock:	
 13187                           
 13188                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13189                           
 13190                           ;incstack = 0
 13191                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13192  1A9F  3055               	movlw	85
 13193  1AA0  0023               	movlb	3	; select bank3
 13194  1AA1  0096               	movwf	22	;volatile
 13195                           
 13196                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13197  1AA2  30AA               	movlw	170
 13198  1AA3  0096               	movwf	22	;volatile
 13199                           
 13200                           ;MCU_B1.c: 1005: WR = 1;
 13201  1AA4  1495               	bsf	21,1	;volatile
 13202                           
 13203                           ;MCU_B1.c: 1006: __nop();
 13204  1AA5  0000               	nop
 13205                           
 13206                           ;MCU_B1.c: 1007: __nop();
 13207  1AA6  0000               	nop
 13208  1AA7  0008               	return
 13209  1AA8                     __end_of_Flash_Memory_Unlock:	
 13210                           
 13211                           	psect	text85
 13212  1DDE                     __ptext85:	
 13213 ;; *************** function _Flash_Memory_Read *****************
 13214 ;; Defined at:
 13215 ;;		line 1011 in file "../src/MCU_B1.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;  address         1    wreg     unsigned char 
 13218 ;; Auto vars:     Size  Location     Type
 13219 ;;  address         1    2[BANK0 ] unsigned char 
 13220 ;;  ret             1    3[BANK0 ] unsigned char 
 13221 ;;  i               1    1[BANK0 ] unsigned char 
 13222 ;; Return value:  Size  Location     Type
 13223 ;;                  1    wreg      unsigned char 
 13224 ;; Registers used:
 13225 ;;		wreg, status,2
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;Total ram usage:        4 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    5
 13238 ;; This function calls:
 13239 ;;		Nothing
 13240 ;; This function is called by:
 13241 ;;		_Flash_Memory_Initialization
 13242 ;;		_Flash_Memory_Modify
 13243 ;; This function uses a non-reentrant model
 13244 ;;
 13245                           
 13246                           
 13247                           ;psect for function _Flash_Memory_Read
 13248  1DDE                     _Flash_Memory_Read:	
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13252                           ;Flash_Memory_Read@address stored from wreg
 13253  1DDE  0020               	movlb	0	; select bank0
 13254  1DDF  00A2               	movwf	Flash_Memory_Read@address
 13255                           
 13256                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13257  1DE0  01A1               	clrf	Flash_Memory_Read@i
 13258  1DE1  01A3               	clrf	Flash_Memory_Read@ret
 13259                           
 13260                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13261  1DE2  3030               	movlw	48
 13262  1DE3  0023               	movlb	3	; select bank3
 13263  1DE4  0092               	movwf	18	;volatile
 13264                           
 13265                           ;MCU_B1.c: 1014: PMADRL = address;
 13266  1DE5  0020               	movlb	0	; select bank0
 13267  1DE6  0822               	movf	Flash_Memory_Read@address,w
 13268  1DE7  0023               	movlb	3	; select bank3
 13269  1DE8  0091               	movwf	17	;volatile
 13270                           
 13271                           ;MCU_B1.c: 1015: CFGS = 0;
 13272  1DE9  1315               	bcf	21,6	;volatile
 13273                           
 13274                           ;MCU_B1.c: 1016: RD = 1;
 13275  1DEA  1415               	bsf	21,0	;volatile
 13276                           
 13277                           ;MCU_B1.c: 1017: i = PMDATH;
 13278  1DEB  0814               	movf	20,w	;volatile
 13279  1DEC  0020               	movlb	0	; select bank0
 13280  1DED  00A0               	movwf	??_Flash_Memory_Read
 13281  1DEE  0820               	movf	??_Flash_Memory_Read,w
 13282  1DEF  00A1               	movwf	Flash_Memory_Read@i
 13283                           
 13284                           ;MCU_B1.c: 1018: ret = PMDATL;
 13285  1DF0  0023               	movlb	3	; select bank3
 13286  1DF1  0813               	movf	19,w	;volatile
 13287  1DF2  0020               	movlb	0	; select bank0
 13288  1DF3  00A0               	movwf	??_Flash_Memory_Read
 13289  1DF4  0820               	movf	??_Flash_Memory_Read,w
 13290  1DF5  00A3               	movwf	Flash_Memory_Read@ret
 13291                           
 13292                           ;MCU_B1.c: 1019: return ret;
 13293  1DF6  0823               	movf	Flash_Memory_Read@ret,w
 13294  1DF7  0008               	return
 13295  1DF8                     __end_of_Flash_Memory_Read:	
 13296                           
 13297                           	psect	text86
 13298  0639                     __ptext86:	
 13299 ;; *************** function _Exception_Main *****************
 13300 ;; Defined at:
 13301 ;;		line 499 in file "../src/Main_B1.c"
 13302 ;; Parameters:    Size  Location     Type
 13303 ;;		None
 13304 ;; Auto vars:     Size  Location     Type
 13305 ;;  i               2   18[BANK0 ] int 
 13306 ;;  i               2   16[BANK0 ] int 
 13307 ;;  lights          1   21[BANK0 ] unsigned char 
 13308 ;;  error           1   20[BANK0 ] unsigned char 
 13309 ;;  count           1   15[BANK0 ] unsigned char 
 13310 ;;  status          1   14[BANK0 ] unsigned char 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;		None               void
 13313 ;; Registers used:
 13314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13323 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;Total ram usage:        9 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; Hardware stack levels required when called:    7
 13327 ;; This function calls:
 13328 ;;		_getDimmerLights_Line
 13329 ;;		_getDimmerLights_Status
 13330 ;;		_getMain_All_Error_Status
 13331 ;;		_getMain_All_LightsStatus
 13332 ;;		_setBuz
 13333 ;;		_setDimmerLights_SwOff
 13334 ;;		_setLED
 13335 ;; This function is called by:
 13336 ;;		_main
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           
 13341                           ;psect for function _Exception_Main
 13342  0639                     _Exception_Main:	
 13343                           
 13344                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13345                           
 13346                           ;incstack = 0
 13347                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13348  0639  3000               	movlw	0
 13349  063A  3190  2083  3186   	fcall	_getMain_All_Error_Status
 13350  063D  0020               	movlb	0	; select bank0
 13351  063E  00AD               	movwf	??_Exception_Main
 13352  063F  082D               	movf	??_Exception_Main,w
 13353  0640  00B4               	movwf	Exception_Main@error
 13354                           
 13355                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13356  0641  01B5               	clrf	Exception_Main@lights
 13357  0642  01AF               	clrf	Exception_Main@count
 13358  0643  0AAF               	incf	Exception_Main@count,f
 13359                           
 13360                           ;Main_B1.c: 502: char status = 0;
 13361  0644  01AE               	clrf	Exception_Main@status
 13362                           
 13363                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13364  0645  0021               	movlb	1	; select bank1
 13365  0646  1DB9               	btfss	(_myMain^(0+128)+10),3
 13366  0647  2E57               	goto	l8287
 13367                           
 13368                           ;Main_B1.c: 505: if (error == 0) {
 13369  0648  0020               	movlb	0	; select bank0
 13370  0649  08B4               	movf	Exception_Main@error,f
 13371  064A  1D03               	skipz
 13372  064B  0008               	return
 13373                           
 13374                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13375  064C  0021               	movlb	1	; select bank1
 13376  064D  11B9               	bcf	(_myMain^(0+128)+10),3
 13377                           
 13378                           ;Main_B1.c: 509: setLED(99, 10);
 13379  064E  300A               	movlw	10
 13380  064F  0020               	movlb	0	; select bank0
 13381  0650  00AD               	movwf	??_Exception_Main
 13382  0651  082D               	movf	??_Exception_Main,w
 13383  0652  00A2               	movwf	setLED@command
 13384  0653  3063               	movlw	99
 13385  0654  3191  21F9         	fcall	_setLED
 13386                           
 13387                           ;Main_B1.c: 522: }
 13388                           ;Main_B1.c: 523: } else {
 13389  0656  0008               	return
 13390  0657                     l8287:	
 13391                           
 13392                           ;Main_B1.c: 524: if (error != 0) {
 13393  0657  0020               	movlb	0	; select bank0
 13394  0658  0834               	movf	Exception_Main@error,w
 13395  0659  1903               	btfsc	3,2
 13396  065A  0008               	return
 13397                           
 13398                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13399  065B  0021               	movlb	1	; select bank1
 13400  065C  15B9               	bsf	(_myMain^(0+128)+10),3
 13401                           
 13402                           ;Main_B1.c: 527: setLED(99, 11);
 13403  065D  300B               	movlw	11
 13404  065E  0020               	movlb	0	; select bank0
 13405  065F  00AD               	movwf	??_Exception_Main
 13406  0660  082D               	movf	??_Exception_Main,w
 13407  0661  00A2               	movwf	setLED@command
 13408  0662  3063               	movlw	99
 13409  0663  3191  21F9  3186   	fcall	_setLED
 13410                           
 13411                           ;Main_B1.c: 538: switch (error) {
 13412  0666  2F03               	goto	l8335
 13413  0667                     l8293:	
 13414                           ;Main_B1.c: 539: case 2:
 13415                           
 13416                           
 13417                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13418  0667  319A  22A8  3186   	fcall	_getMain_All_LightsStatus
 13419  066A  3A01               	xorlw	1
 13420  066B  1D03               	skipz
 13421  066C  2E76               	goto	l8297
 13422                           
 13423                           ;Main_B1.c: 547: setBuz(10, 300);
 13424  066D  302C               	movlw	44
 13425  066E  0020               	movlb	0	; select bank0
 13426  066F  00A9               	movwf	setBuz@time
 13427  0670  3001               	movlw	1
 13428  0671  00AA               	movwf	setBuz@time+1
 13429  0672  300A               	movlw	10
 13430  0673  3194  2425  3186   	fcall	_setBuz
 13431  0676                     l8297:	
 13432                           
 13433                           ;Main_B1.c: 548: }
 13434                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13435  0676  0020               	movlb	0	; select bank0
 13436  0677  01B0               	clrf	Exception_Main@i
 13437  0678  01B1               	clrf	Exception_Main@i+1
 13438  0679                     l8307:	
 13439  0679  0831               	movf	Exception_Main@i+1,w
 13440  067A  3A80               	xorlw	128
 13441  067B  00AD               	movwf	??_Exception_Main
 13442  067C  3080               	movlw	128
 13443  067D  022D               	subwf	??_Exception_Main,w
 13444  067E  1D03               	skipz
 13445  067F  2E82               	goto	u8595
 13446  0680  082F               	movf	Exception_Main@count,w
 13447  0681  0230               	subwf	Exception_Main@i,w
 13448  0682                     u8595:	
 13449  0682  1803               	btfsc	3,0
 13450  0683  2EA4               	goto	u8590
 13451                           
 13452                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13453  0684  0020               	movlb	0	; select bank0
 13454  0685  0830               	movf	Exception_Main@i,w
 13455  0686  3E01               	addlw	1
 13456  0687  319B  23B8  3186   	fcall	_getDimmerLights_Status
 13457  068A  3A01               	xorlw	1
 13458  068B  1D03               	skipz
 13459  068C  2E9E               	goto	l8305
 13460                           
 13461                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13462  068D  0021               	movlb	1	; select bank1
 13463  068E  084C               	movf	_DimmerLights^(0+128),w
 13464  068F  0086               	movwf	6
 13465  0690  3001               	movlw	1	; select bank2/3
 13466  0691  0087               	movwf	7
 13467  0692  1401               	bsf	1,0
 13468                           
 13469                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13470  0693  0A4C               	incf	_DimmerLights^(0+128),w
 13471  0694  0086               	movwf	6
 13472  0695  3001               	movlw	1	; select bank2/3
 13473  0696  0087               	movwf	7
 13474  0697  1001               	bcf	1,0
 13475                           
 13476                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13477  0698  0020               	movlb	0	; select bank0
 13478  0699  0830               	movf	Exception_Main@i,w
 13479  069A  3E01               	addlw	1
 13480  069B  3191  21C0  3186   	fcall	_setDimmerLights_SwOff
 13481  069E                     l8305:	
 13482  069E  3001               	movlw	1
 13483  069F  0020               	movlb	0	; select bank0
 13484  06A0  07B0               	addwf	Exception_Main@i,f
 13485  06A1  3000               	movlw	0
 13486  06A2  3DB1               	addwfc	Exception_Main@i+1,f
 13487  06A3  2E79               	goto	l8307
 13488  06A4                     u8590:	
 13489  06A4  0020               	movlb	0	; select bank0
 13490  06A5  0008               	return
 13491  06A6                     l8309:	
 13492                           ;Main_B1.c: 561: case 3:
 13493                           
 13494                           ;Main_B1.c: 556: }
 13495                           ;Main_B1.c: 557: }
 13496                           ;Main_B1.c: 560: break;
 13497                           
 13498                           
 13499                           ;Main_B1.c: 563: setBuz(5, 300);
 13500  06A6  302C               	movlw	44
 13501  06A7  0020               	movlb	0	; select bank0
 13502  06A8  00A9               	movwf	setBuz@time
 13503  06A9  3001               	movlw	1
 13504  06AA  00AA               	movwf	setBuz@time+1
 13505  06AB  3005               	movlw	5
 13506  06AC  3194  2425  3186   	fcall	_setBuz
 13507                           
 13508                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13509  06AF  319A  22B2  3186   	fcall	_getDimmerLights_Line
 13510  06B2  0020               	movlb	0	; select bank0
 13511  06B3  00AD               	movwf	??_Exception_Main
 13512  06B4  082D               	movf	??_Exception_Main,w
 13513  06B5  00B5               	movwf	Exception_Main@lights
 13514                           
 13515                           ;Main_B1.c: 565: if (lights == 0) {
 13516  06B6  08B5               	movf	Exception_Main@lights,f
 13517  06B7  1D03               	skipz
 13518  06B8  2EE8               	goto	l8327
 13519                           
 13520                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13521  06B9  01B2               	clrf	Exception_Main@i_3621
 13522  06BA  01B3               	clrf	Exception_Main@i_3621+1
 13523  06BB                     l8325:	
 13524  06BB  0833               	movf	Exception_Main@i_3621+1,w
 13525  06BC  3A80               	xorlw	128
 13526  06BD  00AD               	movwf	??_Exception_Main
 13527  06BE  3080               	movlw	128
 13528  06BF  022D               	subwf	??_Exception_Main,w
 13529  06C0  1D03               	skipz
 13530  06C1  2EC4               	goto	u8625
 13531  06C2  082F               	movf	Exception_Main@count,w
 13532  06C3  0232               	subwf	Exception_Main@i_3621,w
 13533  06C4                     u8625:	
 13534  06C4  1803               	btfsc	3,0
 13535  06C5  2EE6               	goto	u8620
 13536                           
 13537                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13538  06C6  0020               	movlb	0	; select bank0
 13539  06C7  0832               	movf	Exception_Main@i_3621,w
 13540  06C8  3E01               	addlw	1
 13541  06C9  319B  23B8  3186   	fcall	_getDimmerLights_Status
 13542  06CC  3A01               	xorlw	1
 13543  06CD  1D03               	skipz
 13544  06CE  2EE0               	goto	l8323
 13545                           
 13546                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13547  06CF  0021               	movlb	1	; select bank1
 13548  06D0  084C               	movf	_DimmerLights^(0+128),w
 13549  06D1  0086               	movwf	6
 13550  06D2  3001               	movlw	1	; select bank2/3
 13551  06D3  0087               	movwf	7
 13552  06D4  1401               	bsf	1,0
 13553                           
 13554                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13555  06D5  0A4C               	incf	_DimmerLights^(0+128),w
 13556  06D6  0086               	movwf	6
 13557  06D7  3001               	movlw	1	; select bank2/3
 13558  06D8  0087               	movwf	7
 13559  06D9  1001               	bcf	1,0
 13560                           
 13561                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13562  06DA  0020               	movlb	0	; select bank0
 13563  06DB  0832               	movf	Exception_Main@i_3621,w
 13564  06DC  3E01               	addlw	1
 13565  06DD  3191  21C0  3186   	fcall	_setDimmerLights_SwOff
 13566  06E0                     l8323:	
 13567  06E0  3001               	movlw	1
 13568  06E1  0020               	movlb	0	; select bank0
 13569  06E2  07B2               	addwf	Exception_Main@i_3621,f
 13570  06E3  3000               	movlw	0
 13571  06E4  3DB3               	addwfc	Exception_Main@i_3621+1,f
 13572  06E5  2EBB               	goto	l8325
 13573  06E6                     u8620:	
 13574  06E6  0020               	movlb	0	; select bank0
 13575  06E7  0008               	return
 13576  06E8                     l8327:	
 13577                           ;Main_B1.c: 573: }
 13578                           ;Main_B1.c: 574: }
 13579                           ;Main_B1.c: 575: } else {
 13580                           
 13581                           
 13582                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13583  06E8  0020               	movlb	0	; select bank0
 13584  06E9  0835               	movf	Exception_Main@lights,w
 13585  06EA  319B  23B8  3186   	fcall	_getDimmerLights_Status
 13586  06ED  3A01               	xorlw	1
 13587  06EE  1903               	btfsc	3,2
 13588  06EF  2EF2               	goto	l8329
 13589  06F0  0020               	movlb	0	; select bank0
 13590  06F1  0008               	return
 13591  06F2                     l8329:	
 13592                           
 13593                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13594  06F2  0021               	movlb	1	; select bank1
 13595  06F3  084C               	movf	_DimmerLights^(0+128),w
 13596  06F4  0086               	movwf	6
 13597  06F5  3001               	movlw	1	; select bank2/3
 13598  06F6  0087               	movwf	7
 13599  06F7  1401               	bsf	1,0
 13600                           
 13601                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13602  06F8  0A4C               	incf	_DimmerLights^(0+128),w
 13603  06F9  0086               	movwf	6
 13604  06FA  3001               	movlw	1	; select bank2/3
 13605  06FB  0087               	movwf	7
 13606  06FC  1001               	bcf	1,0
 13607                           
 13608                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13609  06FD  0020               	movlb	0	; select bank0
 13610  06FE  0835               	movf	Exception_Main@lights,w
 13611  06FF  3191  21C0         	fcall	_setDimmerLights_SwOff
 13612  0701  0020               	movlb	0	; select bank0
 13613  0702  0008               	return
 13614  0703                     l8335:	
 13615                           ;Main_B1.c: 586: }
 13616                           
 13617                           ;Main_B1.c: 582: }
 13618                           ;Main_B1.c: 583: }
 13619                           ;Main_B1.c: 585: break;
 13620                           
 13621  0703  0020               	movlb	0	; select bank0
 13622  0704  0834               	movf	Exception_Main@error,w
 13623                           
 13624                           ; Switch size 1, requested type "space"
 13625                           ; Number of cases is 2, Range of values is 2 to 3
 13626                           ; switch strategies available:
 13627                           ; Name         Instructions Cycles
 13628                           ; simple_byte            7     4 (average)
 13629                           ; direct_byte           13     9 (fixed)
 13630                           ; jumptable            263     9 (fixed)
 13631                           ;	Chosen strategy is simple_byte
 13632  0705  3A02               	xorlw	2	; case 2
 13633  0706  1903               	skipnz
 13634  0707  2E67               	goto	l8293
 13635  0708  3A01               	xorlw	1	; case 3
 13636  0709  1903               	skipnz
 13637  070A  2EA6               	goto	l8309
 13638  070B  2F0D               	goto	l1502
 13639  070C  0008               	return
 13640  070D                     l1502:	
 13641  070D  0008               	return
 13642  070E                     __end_of_Exception_Main:	
 13643                           
 13644                           	psect	text87
 13645  1AB2                     __ptext87:	
 13646 ;; *************** function _getDimmerLights_Line *****************
 13647 ;; Defined at:
 13648 ;;		line 1052 in file "../src/Dimmer_B1.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;		None
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;  line            1    0[BANK0 ] unsigned char 
 13653 ;; Return value:  Size  Location     Type
 13654 ;;                  1    wreg      unsigned char 
 13655 ;; Registers used:
 13656 ;;		wreg, status,2
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;Total ram usage:        1 bytes
 13667 ;; Hardware stack levels used:    1
 13668 ;; Hardware stack levels required when called:    5
 13669 ;; This function calls:
 13670 ;;		Nothing
 13671 ;; This function is called by:
 13672 ;;		_Exception_Main
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function _getDimmerLights_Line
 13678  1AB2                     _getDimmerLights_Line:	
 13679                           
 13680                           ;Dimmer_B1.c: 1053: char line = 0;
 13681                           
 13682                           ;incstack = 0
 13683                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13684  1AB2  0020               	movlb	0	; select bank0
 13685  1AB3  01A0               	clrf	getDimmerLights_Line@line
 13686                           
 13687                           ;Dimmer_B1.c: 1055: if (DimmerLights1.Line == 1) {
 13688  1AB4  0022               	movlb	2	; select bank2
 13689  1AB5  1CE1               	btfss	(_DimmerLights1^(0+256)+1),1
 13690  1AB6  2ABA               	goto	l7305
 13691                           
 13692                           ;Dimmer_B1.c: 1056: line = 1;
 13693  1AB7  0020               	movlb	0	; select bank0
 13694  1AB8  01A0               	clrf	getDimmerLights_Line@line
 13695  1AB9  0AA0               	incf	getDimmerLights_Line@line,f
 13696  1ABA                     l7305:	
 13697                           
 13698                           ;Dimmer_B1.c: 1057: }
 13699                           ;Dimmer_B1.c: 1069: return line;
 13700  1ABA  0020               	movlb	0	; select bank0
 13701  1ABB  0820               	movf	getDimmerLights_Line@line,w
 13702  1ABC  0008               	return
 13703  1ABD                     __end_of_getDimmerLights_Line:	
 13704                           
 13705                           	psect	text88
 13706  1E62                     __ptext88:	
 13707 ;; *************** function _DimmerLights_Main *****************
 13708 ;; Defined at:
 13709 ;;		line 781 in file "../src/Dimmer_B1.c"
 13710 ;; Parameters:    Size  Location     Type
 13711 ;;		None
 13712 ;; Auto vars:     Size  Location     Type
 13713 ;;		None
 13714 ;; Return value:  Size  Location     Type
 13715 ;;		None               void
 13716 ;; Registers used:
 13717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13718 ;; Tracked objects:
 13719 ;;		On entry : 0/0
 13720 ;;		On exit  : 0/0
 13721 ;;		Unchanged: 0/0
 13722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;Total ram usage:        0 bytes
 13728 ;; Hardware stack levels used:    1
 13729 ;; Hardware stack levels required when called:   10
 13730 ;; This function calls:
 13731 ;;		_getLoad_OK
 13732 ;;		_getMain_All_Error_Status
 13733 ;;		_getMain_All_LightsStatus
 13734 ;;		_setDimmerLights_Main
 13735 ;; This function is called by:
 13736 ;;		_main
 13737 ;; This function uses a non-reentrant model
 13738 ;;
 13739                           
 13740                           
 13741                           ;psect for function _DimmerLights_Main
 13742  1E62                     _DimmerLights_Main:	
 13743                           
 13744                           ;Dimmer_B1.c: 784: if (Dimmer.LoadGO == 1) {
 13745                           
 13746                           ;incstack = 0
 13747                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13748  1E62  0022               	movlb	2	; select bank2
 13749  1E63  1CAC               	btfss	_Dimmer^(0+256),1
 13750  1E64  2E7A               	goto	l7891
 13751                           
 13752                           ;Dimmer_B1.c: 785: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13753  1E65  319A  2275  319E   	fcall	_getLoad_OK
 13754  1E68  3A01               	xorlw	1
 13755  1E69  1903               	skipnz
 13756  1E6A  2E78               	goto	l758
 13757  1E6B  3000               	movlw	0
 13758  1E6C  3190  2083  319E   	fcall	_getMain_All_Error_Status
 13759  1E6F  3800               	iorlw	0
 13760  1E70  1D03               	skipz
 13761  1E71  2E78               	goto	l758
 13762  1E72  319A  22A8  319E   	fcall	_getMain_All_LightsStatus
 13763  1E75  3800               	iorlw	0
 13764  1E76  1D03               	skipz
 13765  1E77  2E7A               	goto	l7891
 13766  1E78                     l758:	
 13767                           
 13768                           ;Dimmer_B1.c: 786: Dimmer.LoadGO = 0;
 13769  1E78  0022               	movlb	2	; select bank2
 13770  1E79  10AC               	bcf	_Dimmer^(0+256),1
 13771  1E7A                     l7891:	
 13772                           
 13773                           ;Dimmer_B1.c: 787: }
 13774                           ;Dimmer_B1.c: 788: }
 13775                           ;Dimmer_B1.c: 792: setDimmerLights_Main(1);
 13776  1E7A  3001               	movlw	1
 13777  1E7B  3197  272A         	fcall	_setDimmerLights_Main
 13778  1E7D  0008               	return
 13779  1E7E                     __end_of_DimmerLights_Main:	
 13780                           
 13781                           	psect	text89
 13782  172A                     __ptext89:	
 13783 ;; *************** function _setDimmerLights_Main *****************
 13784 ;; Defined at:
 13785 ;;		line 810 in file "../src/Dimmer_B1.c"
 13786 ;; Parameters:    Size  Location     Type
 13787 ;;  lights          1    wreg     unsigned char 
 13788 ;; Auto vars:     Size  Location     Type
 13789 ;;  lights          1    1[BANK1 ] unsigned char 
 13790 ;; Return value:  Size  Location     Type
 13791 ;;		None               void
 13792 ;; Registers used:
 13793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13794 ;; Tracked objects:
 13795 ;;		On entry : 0/0
 13796 ;;		On exit  : 0/0
 13797 ;;		Unchanged: 0/0
 13798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;Total ram usage:        1 bytes
 13804 ;; Hardware stack levels used:    1
 13805 ;; Hardware stack levels required when called:    9
 13806 ;; This function calls:
 13807 ;;		_DimmerLights_SelectPointer
 13808 ;;		_getDimmerLights_Allow_Condition
 13809 ;;		_getMain_All_LightsStatus
 13810 ;;		_setDimmerLights_Dimming
 13811 ;;		_setDimmerLights_OnOff
 13812 ;; This function is called by:
 13813 ;;		_DimmerLights_Main
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           
 13818                           ;psect for function _setDimmerLights_Main
 13819  172A                     _setDimmerLights_Main:	
 13820                           
 13821                           ;incstack = 0
 13822                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13823                           ;setDimmerLights_Main@lights stored from wreg
 13824  172A  0021               	movlb	1	; select bank1
 13825  172B  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13826                           
 13827                           ;Dimmer_B1.c: 812: DimmerLights_SelectPointer(lights);
 13828  172C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13829  172D  319A  22EA  3197   	fcall	_DimmerLights_SelectPointer
 13830                           
 13831                           ;Dimmer_B1.c: 813: if (DimmerLights->Trigger == 1) {
 13832  1730  0021               	movlb	1	; select bank1
 13833  1731  084C               	movf	_DimmerLights^(0+128),w
 13834  1732  0086               	movwf	6
 13835  1733  3001               	movlw	1	; select bank2/3
 13836  1734  0087               	movwf	7
 13837  1735  1C81               	btfss	1,1
 13838  1736  2F59               	goto	l7283
 13839                           
 13840                           ;Dimmer_B1.c: 814: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13841  1737  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13842  1738  319D  2550  3197   	fcall	_getDimmerLights_Allow_Condition
 13843  173B  3800               	iorlw	0
 13844  173C  1D03               	skipz
 13845  173D  0008               	return
 13846                           
 13847                           ;Dimmer_B1.c: 815: DimmerLights->Trigger = 0;
 13848  173E  0021               	movlb	1	; select bank1
 13849  173F  084C               	movf	_DimmerLights^(0+128),w
 13850  1740  0086               	movwf	6
 13851  1741  3001               	movlw	1	; select bank2/3
 13852  1742  0087               	movwf	7
 13853  1743  1081               	bcf	1,1
 13854                           
 13855                           ;Dimmer_B1.c: 816: if (DimmerLights->Switch == 1) {
 13856  1744  084C               	movf	_DimmerLights^(0+128),w
 13857  1745  0086               	movwf	6
 13858  1746  3001               	movlw	1	; select bank2/3
 13859  1747  0087               	movwf	7
 13860  1748  1D01               	btfss	1,2
 13861  1749  2F52               	goto	l7281
 13862                           
 13863                           ;Dimmer_B1.c: 817: setDimmerLights_OnOff(lights, 1);
 13864  174A  0020               	movlb	0	; select bank0
 13865  174B  01ED               	clrf	setDimmerLights_OnOff@command
 13866  174C  0AED               	incf	setDimmerLights_OnOff@command,f
 13867  174D  0021               	movlb	1	; select bank1
 13868  174E  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13869  174F  318F  273D         	fcall	_setDimmerLights_OnOff
 13870                           
 13871                           ;Dimmer_B1.c: 818: } else {
 13872  1751  0008               	return
 13873  1752                     l7281:	
 13874                           
 13875                           ;Dimmer_B1.c: 819: setDimmerLights_OnOff(lights, 0);
 13876  1752  0020               	movlb	0	; select bank0
 13877  1753  01ED               	clrf	setDimmerLights_OnOff@command
 13878  1754  0021               	movlb	1	; select bank1
 13879  1755  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13880  1756  318F  273D         	fcall	_setDimmerLights_OnOff
 13881                           
 13882                           ;Dimmer_B1.c: 820: }
 13883                           ;Dimmer_B1.c: 821: }
 13884                           ;Dimmer_B1.c: 822: } else {
 13885  1758  0008               	return
 13886  1759                     l7283:	
 13887                           
 13888                           ;Dimmer_B1.c: 823: if (getMain_All_LightsStatus() == 1) {
 13889  1759  319A  22A8  3197   	fcall	_getMain_All_LightsStatus
 13890  175C  3A01               	xorlw	1
 13891  175D  1D03               	skipz
 13892  175E  2F88               	goto	l7295
 13893                           
 13894                           ;Dimmer_B1.c: 824: if (DimmerLights->DimmingTrigger == 1) {
 13895  175F  0021               	movlb	1	; select bank1
 13896  1760  084C               	movf	_DimmerLights^(0+128),w
 13897  1761  0086               	movwf	6
 13898  1762  3001               	movlw	1	; select bank2/3
 13899  1763  0087               	movwf	7
 13900  1764  1E01               	btfss	1,4
 13901  1765  0008               	return
 13902                           
 13903                           ;Dimmer_B1.c: 825: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13904  1766  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13905  1767  319D  2550  3197   	fcall	_getDimmerLights_Allow_Condition
 13906  176A  3800               	iorlw	0
 13907  176B  1D03               	skipz
 13908  176C  0008               	return
 13909                           
 13910                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13911  176D  0021               	movlb	1	; select bank1
 13912  176E  084C               	movf	_DimmerLights^(0+128),w
 13913  176F  0086               	movwf	6
 13914  1770  3001               	movlw	1	; select bank2/3
 13915  1771  0087               	movwf	7
 13916  1772  1201               	bcf	1,4
 13917                           
 13918                           ;Dimmer_B1.c: 827: if (DimmerLights->DimmingSwitch == 1) {
 13919  1773  084C               	movf	_DimmerLights^(0+128),w
 13920  1774  0086               	movwf	6
 13921  1775  3001               	movlw	1	; select bank2/3
 13922  1776  0087               	movwf	7
 13923  1777  1E81               	btfss	1,5
 13924  1778  2F81               	goto	l7293
 13925                           
 13926                           ;Dimmer_B1.c: 828: setDimmerLights_Dimming(lights, 1);
 13927  1779  0020               	movlb	0	; select bank0
 13928  177A  01EA               	clrf	setDimmerLights_Dimming@status
 13929  177B  0AEA               	incf	setDimmerLights_Dimming@status,f
 13930  177C  0021               	movlb	1	; select bank1
 13931  177D  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13932  177E  3193  23CF         	fcall	_setDimmerLights_Dimming
 13933                           
 13934                           ;Dimmer_B1.c: 829: } else {
 13935  1780  0008               	return
 13936  1781                     l7293:	
 13937                           
 13938                           ;Dimmer_B1.c: 830: setDimmerLights_Dimming(lights, 0);
 13939  1781  0020               	movlb	0	; select bank0
 13940  1782  01EA               	clrf	setDimmerLights_Dimming@status
 13941  1783  0021               	movlb	1	; select bank1
 13942  1784  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13943  1785  3193  23CF         	fcall	_setDimmerLights_Dimming
 13944                           
 13945                           ;Dimmer_B1.c: 831: }
 13946                           ;Dimmer_B1.c: 832: }
 13947                           ;Dimmer_B1.c: 833: }
 13948                           ;Dimmer_B1.c: 834: } else {
 13949  1787  0008               	return
 13950  1788                     l7295:	
 13951                           
 13952                           ;Dimmer_B1.c: 835: if (DimmerLights->DimmingTrigger == 1) {
 13953  1788  0021               	movlb	1	; select bank1
 13954  1789  084C               	movf	_DimmerLights^(0+128),w
 13955  178A  0086               	movwf	6
 13956  178B  3001               	movlw	1	; select bank2/3
 13957  178C  0087               	movwf	7
 13958  178D  1E01               	btfss	1,4
 13959  178E  0008               	return
 13960                           
 13961                           ;Dimmer_B1.c: 836: DimmerLights->DimmingTrigger = 0;
 13962  178F  084C               	movf	_DimmerLights^(0+128),w
 13963  1790  0086               	movwf	6
 13964  1791  3001               	movlw	1	; select bank2/3
 13965  1792  0087               	movwf	7
 13966  1793  1201               	bcf	1,4
 13967  1794  0008               	return
 13968  1795                     __end_of_setDimmerLights_Main:	
 13969                           
 13970                           	psect	text90
 13971  0F3D                     __ptext90:	
 13972 ;; *************** function _setDimmerLights_OnOff *****************
 13973 ;; Defined at:
 13974 ;;		line 844 in file "../src/Dimmer_B1.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;  lights          1    wreg     unsigned char 
 13977 ;;  command         1   77[BANK0 ] unsigned char 
 13978 ;; Auto vars:     Size  Location     Type
 13979 ;;  lights          1    0[BANK1 ] unsigned char 
 13980 ;; Return value:  Size  Location     Type
 13981 ;;		None               void
 13982 ;; Registers used:
 13983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13984 ;; Tracked objects:
 13985 ;;		On entry : 0/0
 13986 ;;		On exit  : 0/0
 13987 ;;		Unchanged: 0/0
 13988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;Total ram usage:        4 bytes
 13994 ;; Hardware stack levels used:    1
 13995 ;; Hardware stack levels required when called:    8
 13996 ;; This function calls:
 13997 ;;		_getCmd_Status
 13998 ;;		_getDelayOff_GO
 13999 ;;		_getDimmerLights_PercentToValue
 14000 ;;		_getMain_All_LightsStatus
 14001 ;;		_setCmd_Status
 14002 ;;		_setDelayOff_GO
 14003 ;;		_setDimmerIntr_ControlStatus
 14004 ;;		_setDimmerIntr_DimmingValue
 14005 ;;		_setDimmerIntr_Dimming_RF
 14006 ;;		_setDimmerIntr_MaxmumValue
 14007 ;;		_setDimmerLights_Line
 14008 ;;		_setLED
 14009 ;;		_setProductData
 14010 ;;		_setRF_DimmerLights
 14011 ;;		_setTxData
 14012 ;; This function is called by:
 14013 ;;		_setDimmerLights_Main
 14014 ;; This function uses a non-reentrant model
 14015 ;;
 14016                           
 14017                           
 14018                           ;psect for function _setDimmerLights_OnOff
 14019  0F3D                     _setDimmerLights_OnOff:	
 14020                           
 14021                           ;incstack = 0
 14022                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14023                           ;setDimmerLights_OnOff@lights stored from wreg
 14024  0F3D  0021               	movlb	1	; select bank1
 14025  0F3E  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14026                           
 14027                           ;Dimmer_B1.c: 846: if (command == 1) {
 14028  0F3F  0020               	movlb	0	; select bank0
 14029  0F40  086D               	movf	setDimmerLights_OnOff@command,w
 14030  0F41  3A01               	xorlw	1
 14031  0F42  1D03               	skipz
 14032  0F43  2FA2               	goto	l6951
 14033                           
 14034                           ;Dimmer_B1.c: 847: setDimmerIntr_ControlStatus(lights, 1);
 14035  0F44  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14036  0F45  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14037  0F46  0021               	movlb	1	; select bank1
 14038  0F47  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14039  0F48  319D  257C  318F   	fcall	_setDimmerIntr_ControlStatus
 14040                           
 14041                           ;Dimmer_B1.c: 850: Dimmer.Load_Status = 1;
 14042  0F4B  0022               	movlb	2	; select bank2
 14043  0F4C  152C               	bsf	_Dimmer^(0+256),2
 14044                           
 14045                           ;Dimmer_B1.c: 851: setDimmerLights_Line(lights);
 14046  0F4D  0021               	movlb	1	; select bank1
 14047  0F4E  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14048  0F4F  319B  23C9  318F   	fcall	_setDimmerLights_Line
 14049                           
 14050                           ;Dimmer_B1.c: 857: setLED(lights, 0);
 14051  0F52  0020               	movlb	0	; select bank0
 14052  0F53  01A2               	clrf	setLED@command
 14053  0F54  0021               	movlb	1	; select bank1
 14054  0F55  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14055  0F56  3191  21F9  318F   	fcall	_setLED
 14056                           
 14057                           ;Dimmer_B1.c: 858: ;;
 14058                           ;Dimmer_B1.c: 878: if (DimmerLights->DimmingRun == 1) {
 14059  0F59  0021               	movlb	1	; select bank1
 14060  0F5A  0A4C               	incf	_DimmerLights^(0+128),w
 14061  0F5B  0086               	movwf	6
 14062  0F5C  3001               	movlw	1	; select bank2/3
 14063  0F5D  0087               	movwf	7
 14064  0F5E  1F01               	btfss	1,6
 14065  0F5F  2F84               	goto	l6943
 14066                           
 14067                           ;Dimmer_B1.c: 879: DimmerLights->DimmingRun = 0;
 14068  0F60  0A4C               	incf	_DimmerLights^(0+128),w
 14069  0F61  0086               	movwf	6
 14070  0F62  3001               	movlw	1	; select bank2/3
 14071  0F63  0087               	movwf	7
 14072  0F64  1301               	bcf	1,6
 14073                           
 14074                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14075  0F65  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14076  0F66  3E14               	addlw	20
 14077  0F67  076E               	addwf	_product^(0+128),w
 14078  0F68  0020               	movlb	0	; select bank0
 14079  0F69  00EE               	movwf	??_setDimmerLights_OnOff
 14080  0F6A  086E               	movf	??_setDimmerLights_OnOff,w
 14081  0F6B  0086               	movwf	6
 14082  0F6C  3001               	movlw	1	; select bank2/3
 14083  0F6D  0087               	movwf	7
 14084  0F6E  0801               	movf	1,w
 14085  0F6F  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14086  0F72  0020               	movlb	0	; select bank0
 14087  0F73  00EF               	movwf	??_setDimmerLights_OnOff+1
 14088  0F74  086F               	movf	??_setDimmerLights_OnOff+1,w
 14089  0F75  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14090  0F76  0021               	movlb	1	; select bank1
 14091  0F77  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14092  0F78  319B  2302  318F   	fcall	_setDimmerIntr_MaxmumValue
 14093                           
 14094                           ;Dimmer_B1.c: 881: setDimmerIntr_Dimming_RF(lights, 1);
 14095  0F7B  0020               	movlb	0	; select bank0
 14096  0F7C  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14097  0F7D  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14098  0F7E  0021               	movlb	1	; select bank1
 14099  0F7F  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14100  0F80  319D  2594  318F   	fcall	_setDimmerIntr_Dimming_RF
 14101                           
 14102                           ;Dimmer_B1.c: 882: } else {
 14103  0F83  2F9B               	goto	l6945
 14104  0F84                     l6943:	
 14105                           
 14106                           ;Dimmer_B1.c: 883: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14107  0F84  0021               	movlb	1	; select bank1
 14108  0F85  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14109  0F86  3E14               	addlw	20
 14110  0F87  076E               	addwf	_product^(0+128),w
 14111  0F88  0020               	movlb	0	; select bank0
 14112  0F89  00EE               	movwf	??_setDimmerLights_OnOff
 14113  0F8A  086E               	movf	??_setDimmerLights_OnOff,w
 14114  0F8B  0086               	movwf	6
 14115  0F8C  3001               	movlw	1	; select bank2/3
 14116  0F8D  0087               	movwf	7
 14117  0F8E  0801               	movf	1,w
 14118  0F8F  3195  25FB  318F   	fcall	_getDimmerLights_PercentToValue
 14119  0F92  0020               	movlb	0	; select bank0
 14120  0F93  00EF               	movwf	??_setDimmerLights_OnOff+1
 14121  0F94  086F               	movf	??_setDimmerLights_OnOff+1,w
 14122  0F95  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14123  0F96  0021               	movlb	1	; select bank1
 14124  0F97  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14125  0F98  319B  230E  318F   	fcall	_setDimmerIntr_DimmingValue
 14126  0F9B                     l6945:	
 14127                           
 14128                           ;Dimmer_B1.c: 886: }
 14129                           ;Dimmer_B1.c: 888: if (lights == 1) {
 14130  0F9B  0021               	movlb	1	; select bank1
 14131  0F9C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14132  0F9D  3A01               	xorlw	1
 14133  0F9E  1D03               	skipz
 14134  0F9F  2FD1               	goto	l6965
 14135                           
 14136                           ;Dimmer_B1.c: 890: DimmerIntr1.TuneGO = 1;
 14137  0FA0  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14138                           
 14139                           ;Dimmer_B1.c: 896: }
 14140                           ;Dimmer_B1.c: 902: } else if (command == 0) {
 14141                           
 14142                           ;Dimmer_B1.c: 892: } else if (lights == 2) {
 14143  0FA1  2FD1               	goto	l6965
 14144  0FA2                     l6951:	
 14145  0FA2  0020               	movlb	0	; select bank0
 14146  0FA3  08ED               	movf	setDimmerLights_OnOff@command,f
 14147  0FA4  1D03               	skipz
 14148  0FA5  2FD1               	goto	l6965
 14149                           
 14150                           ;Dimmer_B1.c: 903: setDimmerIntr_ControlStatus(lights, 0);
 14151  0FA6  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14152  0FA7  0021               	movlb	1	; select bank1
 14153  0FA8  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14154  0FA9  319D  257C  318F   	fcall	_setDimmerIntr_ControlStatus
 14155                           
 14156                           ;Dimmer_B1.c: 905: Dimmer.Load_Status = 0;
 14157  0FAC  0022               	movlb	2	; select bank2
 14158  0FAD  112C               	bcf	_Dimmer^(0+256),2
 14159                           
 14160                           ;Dimmer_B1.c: 906: setDimmerLights_Line(0);
 14161  0FAE  3000               	movlw	0
 14162  0FAF  319B  23C9  318F   	fcall	_setDimmerLights_Line
 14163                           
 14164                           ;Dimmer_B1.c: 910: if (getDelayOff_GO(lights) == 1) {
 14165  0FB2  0021               	movlb	1	; select bank1
 14166  0FB3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14167  0FB4  319B  23DA  318F   	fcall	_getDelayOff_GO
 14168  0FB7  3A01               	xorlw	1
 14169  0FB8  1D03               	skipz
 14170  0FB9  2FC2               	goto	l785
 14171                           
 14172                           ;Dimmer_B1.c: 911: setDelayOff_GO(lights, 0, 0);
 14173  0FBA  0020               	movlb	0	; select bank0
 14174  0FBB  01E5               	clrf	setDelayOff_GO@command
 14175  0FBC  01E6               	clrf	setDelayOff_GO@value
 14176  0FBD  0021               	movlb	1	; select bank1
 14177  0FBE  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14178  0FBF  318C  240C  318F   	fcall	_setDelayOff_GO
 14179  0FC2                     l785:	
 14180                           
 14181                           ;Dimmer_B1.c: 912: }
 14182                           ;Dimmer_B1.c: 917: setLED(lights, 1);
 14183  0FC2  0020               	movlb	0	; select bank0
 14184  0FC3  01A2               	clrf	setLED@command
 14185  0FC4  0AA2               	incf	setLED@command,f
 14186  0FC5  0021               	movlb	1	; select bank1
 14187  0FC6  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14188  0FC7  3191  21F9  318F   	fcall	_setLED
 14189                           
 14190                           ;Dimmer_B1.c: 918: ;;
 14191                           ;Dimmer_B1.c: 922: if (lights == 1) {
 14192  0FCA  0021               	movlb	1	; select bank1
 14193  0FCB  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14194  0FCC  3A01               	xorlw	1
 14195  0FCD  1D03               	skipz
 14196  0FCE  2FD1               	goto	l6965
 14197                           
 14198                           ;Dimmer_B1.c: 923: RB1 = 0;
 14199  0FCF  0020               	movlb	0	; select bank0
 14200  0FD0  108D               	bcf	13,1	;volatile
 14201  0FD1                     l6965:	
 14202                           
 14203                           ;Dimmer_B1.c: 925: }
 14204                           ;Dimmer_B1.c: 936: }
 14205                           ;Dimmer_B1.c: 939: setRF_DimmerLights(lights, command);
 14206  0FD1  0020               	movlb	0	; select bank0
 14207  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14208  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14209  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14210  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14211  0FD6  0021               	movlb	1	; select bank1
 14212  0FD7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14213  0FD8  3196  26C5  318F   	fcall	_setRF_DimmerLights
 14214                           
 14215                           ;Dimmer_B1.c: 941: if (getCmd_Status(1) == 1) {
 14216  0FDB  3001               	movlw	1
 14217  0FDC  319C  242F  318F   	fcall	_getCmd_Status
 14218  0FDF  3A01               	xorlw	1
 14219  0FE0  1D03               	skipz
 14220  0FE1  2FFD               	goto	l6979
 14221                           
 14222                           ;Dimmer_B1.c: 942: if (getMain_All_LightsStatus() == 0) {
 14223  0FE2  319A  22A8  318F   	fcall	_getMain_All_LightsStatus
 14224  0FE5  3800               	iorlw	0
 14225  0FE6  1D03               	skipz
 14226  0FE7  0008               	return
 14227                           
 14228                           ;Dimmer_B1.c: 943: setCmd_Status(1, 0);
 14229  0FE8  0020               	movlb	0	; select bank0
 14230  0FE9  01A0               	clrf	setCmd_Status@cmd
 14231  0FEA  3001               	movlw	1
 14232  0FEB  319D  25AC  318F   	fcall	_setCmd_Status
 14233                           
 14234                           ;Dimmer_B1.c: 944: setProductData(11, 0);
 14235  0FEE  0020               	movlb	0	; select bank0
 14236  0FEF  01E2               	clrf	setProductData@value
 14237  0FF0  300B               	movlw	11
 14238  0FF1  319A  22F6  318F   	fcall	_setProductData
 14239                           
 14240                           ;Dimmer_B1.c: 945: setProductData(17, 0);
 14241  0FF4  0020               	movlb	0	; select bank0
 14242  0FF5  01E2               	clrf	setProductData@value
 14243  0FF6  3011               	movlw	17
 14244  0FF7  319A  22F6  318F   	fcall	_setProductData
 14245                           
 14246                           ;Dimmer_B1.c: 946: setTxData();
 14247  0FFA  318E  2682         	fcall	_setTxData
 14248                           
 14249                           ;Dimmer_B1.c: 947: }
 14250                           ;Dimmer_B1.c: 948: } else {
 14251  0FFC  0008               	return
 14252  0FFD                     l6979:	
 14253                           
 14254                           ;Dimmer_B1.c: 949: setTxData();
 14255  0FFD  318E  2682         	fcall	_setTxData
 14256  0FFF  0008               	return
 14257  1000                     __end_of_setDimmerLights_OnOff:	
 14258                           
 14259                           	psect	text91
 14260  11F9                     __ptext91:	
 14261 ;; *************** function _setLED *****************
 14262 ;; Defined at:
 14263 ;;		line 81 in file "../src/LED_B1.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;  led             1    wreg     unsigned char 
 14266 ;;  command         1    2[BANK0 ] unsigned char 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  led             1    3[BANK0 ] unsigned char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;		None               void
 14271 ;; Registers used:
 14272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14278 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;Total ram usage:        2 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    6
 14285 ;; This function calls:
 14286 ;;		_LedPointSelect
 14287 ;; This function is called by:
 14288 ;;		_setDimmerLights_OnOff
 14289 ;;		_setLED_Initialization
 14290 ;;		_Exception_Main
 14291 ;;		_setSw_Initialization
 14292 ;; This function uses a non-reentrant model
 14293 ;;
 14294                           
 14295                           
 14296                           ;psect for function _setLED
 14297  11F9                     _setLED:	
 14298                           
 14299                           ;incstack = 0
 14300                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14301                           ;setLED@led stored from wreg
 14302  11F9  0020               	movlb	0	; select bank0
 14303  11FA  00A3               	movwf	setLED@led
 14304                           
 14305                           ;LED_B1.c: 82: LedPointSelect(led);
 14306  11FB  0823               	movf	setLED@led,w
 14307  11FC  319B  231A  3191   	fcall	_LedPointSelect
 14308                           
 14309                           ;LED_B1.c: 83: if (command == 0) {
 14310  11FF  0020               	movlb	0	; select bank0
 14311  1200  08A2               	movf	setLED@command,f
 14312  1201  1D03               	skipz
 14313  1202  2A08               	goto	l6661
 14314                           
 14315                           ;LED_B1.c: 112: if (led == 99) {
 14316  1203  0823               	movf	setLED@led,w
 14317  1204  3A63               	xorlw	99
 14318  1205  1D03               	skipz
 14319  1206  2A08               	goto	l6661
 14320                           
 14321                           ;LED_B1.c: 116: RB5 = 1;
 14322  1207  168D               	bsf	13,5	;volatile
 14323  1208                     l6661:	
 14324                           
 14325                           ;LED_B1.c: 118: }
 14326                           ;LED_B1.c: 120: }
 14327                           ;LED_B1.c: 121: if (command == 1) {
 14328  1208  0822               	movf	setLED@command,w
 14329  1209  3A01               	xorlw	1
 14330  120A  1D03               	skipz
 14331  120B  2A11               	goto	l6667
 14332                           
 14333                           ;LED_B1.c: 150: if (led == 99) {
 14334  120C  0823               	movf	setLED@led,w
 14335  120D  3A63               	xorlw	99
 14336  120E  1D03               	skipz
 14337  120F  2A11               	goto	l6667
 14338                           
 14339                           ;LED_B1.c: 154: RB5 = 0;
 14340  1210  128D               	bcf	13,5	;volatile
 14341  1211                     l6667:	
 14342                           
 14343                           ;LED_B1.c: 156: }
 14344                           ;LED_B1.c: 158: }
 14345                           ;LED_B1.c: 159: if (command == 10) {
 14346  1211  0822               	movf	setLED@command,w
 14347  1212  3A0A               	xorlw	10
 14348  1213  1D03               	skipz
 14349  1214  2A27               	goto	l6675
 14350                           
 14351                           ;LED_B1.c: 160: LED->GO = 0;
 14352  1215  0021               	movlb	1	; select bank1
 14353  1216  084D               	movf	_LED^(0+128),w
 14354  1217  0086               	movwf	6
 14355  1218  3001               	movlw	1	; select bank2/3
 14356  1219  0087               	movwf	7
 14357  121A  1081               	bcf	1,1
 14358                           
 14359                           ;LED_B1.c: 161: LED->Time = 0;
 14360  121B  0A4D               	incf	_LED^(0+128),w
 14361  121C  0086               	movwf	6
 14362  121D  3001               	movlw	1	; select bank2/3
 14363  121E  0087               	movwf	7
 14364  121F  3000               	movlw	0
 14365  1220  3FC0               	movwi [0]fsr1
 14366  1221  3FC1               	movwi [1]fsr1
 14367                           
 14368                           ;LED_B1.c: 190: if (led == 99) {
 14369  1222  0020               	movlb	0	; select bank0
 14370  1223  0823               	movf	setLED@led,w
 14371  1224  3A63               	xorlw	99
 14372  1225  1903               	btfsc	3,2
 14373                           
 14374                           ;LED_B1.c: 194: RB5 = 1;
 14375  1226  168D               	bsf	13,5	;volatile
 14376  1227                     l6675:	
 14377                           
 14378                           ;LED_B1.c: 196: }
 14379                           ;LED_B1.c: 198: }
 14380                           ;LED_B1.c: 199: if (command == 11) {
 14381  1227  0822               	movf	setLED@command,w
 14382  1228  3A0B               	xorlw	11
 14383  1229  1D03               	skipz
 14384  122A  0008               	return
 14385                           
 14386                           ;LED_B1.c: 200: LED->GO = 1;
 14387  122B  0021               	movlb	1	; select bank1
 14388  122C  084D               	movf	_LED^(0+128),w
 14389  122D  0086               	movwf	6
 14390  122E  3001               	movlw	1	; select bank2/3
 14391  122F  0087               	movwf	7
 14392  1230  1481               	bsf	1,1
 14393  1231  0008               	return
 14394  1232                     __end_of_setLED:	
 14395                           
 14396                           	psect	text92
 14397  1B1A                     __ptext92:	
 14398 ;; *************** function _LedPointSelect *****************
 14399 ;; Defined at:
 14400 ;;		line 7 in file "../src/LED_B1.c"
 14401 ;; Parameters:    Size  Location     Type
 14402 ;;  led             1    wreg     unsigned char 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;  led             1    1[BANK0 ] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;		None               void
 14407 ;; Registers used:
 14408 ;;		wreg
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:        2 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    5
 14421 ;; This function calls:
 14422 ;;		Nothing
 14423 ;; This function is called by:
 14424 ;;		_setLED_Initialization
 14425 ;;		_setLED
 14426 ;;		_setLED_Main
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           
 14431                           ;psect for function _LedPointSelect
 14432  1B1A                     _LedPointSelect:	
 14433                           
 14434                           ;incstack = 0
 14435                           ; Regs used in _LedPointSelect: [wreg]
 14436                           ;LedPointSelect@led stored from wreg
 14437  1B1A  0020               	movlb	0	; select bank0
 14438  1B1B  00A1               	movwf	LedPointSelect@led
 14439                           
 14440                           ;LED_B1.c: 24: if (led == 99) {
 14441  1B1C  0821               	movf	LedPointSelect@led,w
 14442  1B1D  3A63               	xorlw	99
 14443  1B1E  1D03               	skipz
 14444  1B1F  0008               	return
 14445                           
 14446                           ;LED_B1.c: 25: LED = &VarErrLED;
 14447  1B20  3068               	movlw	_VarErrLED& (0+255)
 14448  1B21  00A0               	movwf	??_LedPointSelect
 14449  1B22  0820               	movf	??_LedPointSelect,w
 14450  1B23  0021               	movlb	1	; select bank1
 14451  1B24  00CD               	movwf	_LED^(0+128)
 14452  1B25  0008               	return
 14453  1B26                     __end_of_LedPointSelect:	
 14454                           
 14455                           	psect	text93
 14456  1D94                     __ptext93:	
 14457 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14458 ;; Defined at:
 14459 ;;		line 228 in file "../src/Dimmer_B1.c"
 14460 ;; Parameters:    Size  Location     Type
 14461 ;;  lights          1    wreg     unsigned char 
 14462 ;;  command         1    0[BANK0 ] unsigned char 
 14463 ;; Auto vars:     Size  Location     Type
 14464 ;;  lights          1    2[BANK0 ] unsigned char 
 14465 ;; Return value:  Size  Location     Type
 14466 ;;		None               void
 14467 ;; Registers used:
 14468 ;;		wreg, status,2, status,0
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14474 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;Total ram usage:        3 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; Hardware stack levels required when called:    5
 14481 ;; This function calls:
 14482 ;;		Nothing
 14483 ;; This function is called by:
 14484 ;;		_setDimmerLights_OnOff
 14485 ;;		_setRFSW_AdjControl
 14486 ;; This function uses a non-reentrant model
 14487 ;;
 14488                           
 14489                           
 14490                           ;psect for function _setDimmerIntr_Dimming_RF
 14491  1D94                     _setDimmerIntr_Dimming_RF:	
 14492                           
 14493                           ;incstack = 0
 14494                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14495                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14496  1D94  0020               	movlb	0	; select bank0
 14497  1D95  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14498                           
 14499                           ;Dimmer_B1.c: 230: if (lights == 1) {
 14500  1D96  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14501  1D97  3A01               	xorlw	1
 14502  1D98  1D03               	skipz
 14503  1D99  0008               	return
 14504                           
 14505                           ;Dimmer_B1.c: 231: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14506  1D9A  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14507  1D9B  3A01               	xorlw	1
 14508  1D9C  3000               	movlw	0
 14509  1D9D  1903               	skipnz
 14510  1D9E  3001               	movlw	1
 14511  1D9F  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14512  1DA0  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14513  1DA1  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14514  1DA2  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14515  1DA3  0021               	movlb	1	; select bank1
 14516  1DA4  083C               	movf	_DimmerIntr1^(0+128),w
 14517  1DA5  0020               	movlb	0	; select bank0
 14518  1DA6  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14519  1DA7  39BF               	andlw	-65
 14520  1DA8  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14521  1DA9  0021               	movlb	1	; select bank1
 14522  1DAA  00BC               	movwf	_DimmerIntr1^(0+128)
 14523  1DAB  0008               	return
 14524  1DAC                     __end_of_setDimmerIntr_Dimming_RF:	
 14525                           
 14526                           	psect	text94
 14527  1B0E                     __ptext94:	
 14528 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14529 ;; Defined at:
 14530 ;;		line 93 in file "../src/Dimmer_B1.c"
 14531 ;; Parameters:    Size  Location     Type
 14532 ;;  lights          1    wreg     unsigned char 
 14533 ;;  value           1   66[BANK0 ] unsigned char 
 14534 ;; Auto vars:     Size  Location     Type
 14535 ;;  lights          1   68[BANK0 ] unsigned char 
 14536 ;; Return value:  Size  Location     Type
 14537 ;;		None               void
 14538 ;; Registers used:
 14539 ;;		wreg
 14540 ;; Tracked objects:
 14541 ;;		On entry : 0/0
 14542 ;;		On exit  : 0/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14545 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;Total ram usage:        3 bytes
 14550 ;; Hardware stack levels used:    1
 14551 ;; Hardware stack levels required when called:    5
 14552 ;; This function calls:
 14553 ;;		Nothing
 14554 ;; This function is called by:
 14555 ;;		_setDimmerLights_OnOff
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           
 14560                           ;psect for function _setDimmerIntr_DimmingValue
 14561  1B0E                     _setDimmerIntr_DimmingValue:	
 14562                           
 14563                           ;incstack = 0
 14564                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14565                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14566  1B0E  0020               	movlb	0	; select bank0
 14567  1B0F  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14568                           
 14569                           ;Dimmer_B1.c: 95: if (lights == 1) {
 14570  1B10  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14571  1B11  3A01               	xorlw	1
 14572  1B12  1D03               	skipz
 14573  1B13  0008               	return
 14574                           
 14575                           ;Dimmer_B1.c: 96: DimmerIntr1.DimmingValue = value;
 14576  1B14  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14577  1B15  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14578  1B16  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14579  1B17  0021               	movlb	1	; select bank1
 14580  1B18  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14581  1B19  0008               	return
 14582  1B1A                     __end_of_setDimmerIntr_DimmingValue:	
 14583                           
 14584                           	psect	text95
 14585  1D7C                     __ptext95:	
 14586 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14587 ;; Defined at:
 14588 ;;		line 75 in file "../src/Dimmer_B1.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  lights          1    wreg     unsigned char 
 14591 ;;  command         1    0[BANK0 ] unsigned char 
 14592 ;; Auto vars:     Size  Location     Type
 14593 ;;  lights          1    2[BANK0 ] unsigned char 
 14594 ;; Return value:  Size  Location     Type
 14595 ;;		None               void
 14596 ;; Registers used:
 14597 ;;		wreg, status,2, status,0
 14598 ;; Tracked objects:
 14599 ;;		On entry : 0/0
 14600 ;;		On exit  : 0/0
 14601 ;;		Unchanged: 0/0
 14602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14603 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;Total ram usage:        3 bytes
 14608 ;; Hardware stack levels used:    1
 14609 ;; Hardware stack levels required when called:    5
 14610 ;; This function calls:
 14611 ;;		Nothing
 14612 ;; This function is called by:
 14613 ;;		_setDimmerLights_OnOff
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _setDimmerIntr_ControlStatus
 14619  1D7C                     _setDimmerIntr_ControlStatus:	
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14623                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14624  1D7C  0020               	movlb	0	; select bank0
 14625  1D7D  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14626                           
 14627                           ;Dimmer_B1.c: 77: if (lights == 1) {
 14628  1D7E  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14629  1D7F  3A01               	xorlw	1
 14630  1D80  1D03               	skipz
 14631  1D81  0008               	return
 14632                           
 14633                           ;Dimmer_B1.c: 78: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14634  1D82  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14635  1D83  3A01               	xorlw	1
 14636  1D84  3000               	movlw	0
 14637  1D85  1903               	skipnz
 14638  1D86  3001               	movlw	1
 14639  1D87  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14640  1D88  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14641  1D89  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14642  1D8A  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14643  1D8B  0021               	movlb	1	; select bank1
 14644  1D8C  083C               	movf	_DimmerIntr1^(0+128),w
 14645  1D8D  0020               	movlb	0	; select bank0
 14646  1D8E  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14647  1D8F  39F7               	andlw	-9
 14648  1D90  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14649  1D91  0021               	movlb	1	; select bank1
 14650  1D92  00BC               	movwf	_DimmerIntr1^(0+128)
 14651  1D93  0008               	return
 14652  1D94                     __end_of_setDimmerIntr_ControlStatus:	
 14653                           
 14654                           	psect	text96
 14655  0C0C                     __ptext96:	
 14656 ;; *************** function _setDelayOff_GO *****************
 14657 ;; Defined at:
 14658 ;;		line 87 in file "../src/DelayOff_B1.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  sw              1    wreg     unsigned char 
 14661 ;;  command         1   69[BANK0 ] unsigned char 
 14662 ;;  value           1   70[BANK0 ] unsigned char 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;  sw              1   76[BANK0 ] unsigned char 
 14665 ;;  k               1   75[BANK0 ] unsigned char 
 14666 ;;  j               1   74[BANK0 ] unsigned char 
 14667 ;;  i               1   73[BANK0 ] unsigned char 
 14668 ;; Return value:  Size  Location     Type
 14669 ;;		None               void
 14670 ;; Registers used:
 14671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14672 ;; Tracked objects:
 14673 ;;		On entry : 0/0
 14674 ;;		On exit  : 0/0
 14675 ;;		Unchanged: 0/0
 14676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14677 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;Total ram usage:        8 bytes
 14682 ;; Hardware stack levels used:    1
 14683 ;; Hardware stack levels required when called:    6
 14684 ;; This function calls:
 14685 ;;		_DelayOffPointSelect
 14686 ;;		___bmul
 14687 ;;		_setProductData
 14688 ;; This function is called by:
 14689 ;;		_setDimmerLights_OnOff
 14690 ;;		_setRFSW_Control
 14691 ;; This function uses a non-reentrant model
 14692 ;;
 14693                           
 14694                           
 14695                           ;psect for function _setDelayOff_GO
 14696  0C0C                     _setDelayOff_GO:	
 14697                           
 14698                           ;incstack = 0
 14699                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14700                           ;setDelayOff_GO@sw stored from wreg
 14701  0C0C  0020               	movlb	0	; select bank0
 14702  0C0D  00EC               	movwf	setDelayOff_GO@sw
 14703                           
 14704                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14705  0C0E  086C               	movf	setDelayOff_GO@sw,w
 14706  0C0F  319A  22DE  318C   	fcall	_DelayOffPointSelect
 14707                           
 14708                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14709  0C12  0020               	movlb	0	; select bank0
 14710  0C13  0865               	movf	setDelayOff_GO@command,w
 14711  0C14  3A01               	xorlw	1
 14712  0C15  3000               	movlw	0
 14713  0C16  1903               	skipnz
 14714  0C17  3001               	movlw	1
 14715  0C18  00E7               	movwf	??_setDelayOff_GO
 14716  0C19  0021               	movlb	1	; select bank1
 14717  0C1A  084A               	movf	_DelayOff^(0+128),w
 14718  0C1B  0086               	movwf	6
 14719  0C1C  3001               	movlw	1	; select bank2/3
 14720  0C1D  0087               	movwf	7
 14721  0C1E  0020               	movlb	0	; select bank0
 14722  0C1F  0DE7               	rlf	??_setDelayOff_GO,f
 14723  0C20  0801               	movf	1,w
 14724  0C21  0667               	xorwf	??_setDelayOff_GO,w
 14725  0C22  39FD               	andlw	-3
 14726  0C23  0667               	xorwf	??_setDelayOff_GO,w
 14727  0C24  0081               	movwf	1
 14728                           
 14729                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14730  0C25  0021               	movlb	1	; select bank1
 14731  0C26  084A               	movf	_DelayOff^(0+128),w
 14732  0C27  3E02               	addlw	2
 14733  0C28  0086               	movwf	6
 14734  0C29  3001               	movlw	1	; select bank2/3
 14735  0C2A  0087               	movwf	7
 14736  0C2B  3000               	movlw	0
 14737  0C2C  3FC0               	movwi [0]fsr1
 14738  0C2D  3FC1               	movwi [1]fsr1
 14739                           
 14740                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14741  0C2E  084A               	movf	_DelayOff^(0+128),w
 14742  0C2F  3E04               	addlw	4
 14743  0C30  0086               	movwf	6
 14744  0C31  3001               	movlw	1	; select bank2/3
 14745  0C32  0087               	movwf	7
 14746  0C33  0181               	clrf	1
 14747                           
 14748                           ;DelayOff_B1.c: 94: if (command == 1) {
 14749  0C34  0020               	movlb	0	; select bank0
 14750  0C35  0865               	movf	setDelayOff_GO@command,w
 14751  0C36  3A01               	xorlw	1
 14752  0C37  1D03               	skipz
 14753  0C38  2C8E               	goto	l6249
 14754                           
 14755                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14756  0C39  3005               	movlw	5
 14757  0C3A  00E7               	movwf	??_setDelayOff_GO
 14758  0C3B  0867               	movf	??_setDelayOff_GO,w
 14759  0C3C  00E9               	movwf	setDelayOff_GO@i
 14760  0C3D  01EA               	clrf	setDelayOff_GO@j
 14761  0C3E  01EB               	clrf	setDelayOff_GO@k
 14762                           
 14763                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14764  0C3F  300F               	movlw	15
 14765  0C40  0566               	andwf	setDelayOff_GO@value,w
 14766  0C41  00E7               	movwf	??_setDelayOff_GO
 14767  0C42  0867               	movf	??_setDelayOff_GO,w
 14768  0C43  3A05               	xorlw	5
 14769  0C44  1903               	skipnz
 14770  0C45  2C4A               	goto	l6235
 14771  0C46  0866               	movf	setDelayOff_GO@value,w
 14772  0C47  390F               	andlw	15
 14773  0C48  1D03               	btfss	3,2
 14774  0C49  2C7A               	goto	l6245
 14775  0C4A                     l6235:	
 14776  0C4A  3031               	movlw	49
 14777  0C4B  0266               	subwf	setDelayOff_GO@value,w
 14778  0C4C  1803               	skipnc
 14779  0C4D  2C7A               	goto	l6245
 14780                           
 14781                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14782  0C4E  0866               	movf	setDelayOff_GO@value,w
 14783  0C4F  390F               	andlw	15
 14784  0C50  00E7               	movwf	??_setDelayOff_GO
 14785  0C51  0867               	movf	??_setDelayOff_GO,w
 14786  0C52  00EA               	movwf	setDelayOff_GO@j
 14787                           
 14788                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14789  0C53  0866               	movf	setDelayOff_GO@value,w
 14790  0C54  00E7               	movwf	??_setDelayOff_GO
 14791  0C55  3004               	movlw	4
 14792  0C56                     u5375:	
 14793  0C56  36E7               	lsrf	??_setDelayOff_GO,f
 14794  0C57  0B89               	decfsz	9,f
 14795  0C58  2C56               	goto	u5375
 14796  0C59  0867               	movf	??_setDelayOff_GO,w
 14797  0C5A  390F               	andlw	15
 14798  0C5B  00E8               	movwf	??_setDelayOff_GO+1
 14799  0C5C  0868               	movf	??_setDelayOff_GO+1,w
 14800  0C5D  00EB               	movwf	setDelayOff_GO@k
 14801                           
 14802                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14803  0C5E  300A               	movlw	10
 14804  0C5F  00E7               	movwf	??_setDelayOff_GO
 14805  0C60  0867               	movf	??_setDelayOff_GO,w
 14806  0C61  00A0               	movwf	___bmul@multiplicand
 14807  0C62  086B               	movf	setDelayOff_GO@k,w
 14808  0C63  319C  2441  318C   	fcall	___bmul
 14809  0C66  0020               	movlb	0	; select bank0
 14810  0C67  076A               	addwf	setDelayOff_GO@j,w
 14811  0C68  00E8               	movwf	??_setDelayOff_GO+1
 14812  0C69  0021               	movlb	1	; select bank1
 14813  0C6A  0A4A               	incf	_DelayOff^(0+128),w
 14814  0C6B  0086               	movwf	6
 14815  0C6C  3001               	movlw	1	; select bank2/3
 14816  0C6D  0087               	movwf	7
 14817  0C6E  0020               	movlb	0	; select bank0
 14818  0C6F  0868               	movf	??_setDelayOff_GO+1,w
 14819  0C70  0081               	movwf	1
 14820                           
 14821                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14822  0C71  0866               	movf	setDelayOff_GO@value,w
 14823  0C72  00E7               	movwf	??_setDelayOff_GO
 14824  0C73  0867               	movf	??_setDelayOff_GO,w
 14825  0C74  00E2               	movwf	setProductData@value
 14826  0C75  086C               	movf	setDelayOff_GO@sw,w
 14827  0C76  3E1A               	addlw	26
 14828  0C77  319A  22F6         	fcall	_setProductData
 14829                           
 14830                           ;DelayOff_B1.c: 103: } else {
 14831  0C79  0008               	return
 14832  0C7A                     l6245:	
 14833                           
 14834                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14835  0C7A  3005               	movlw	5
 14836  0C7B  0020               	movlb	0	; select bank0
 14837  0C7C  00E7               	movwf	??_setDelayOff_GO
 14838  0C7D  0021               	movlb	1	; select bank1
 14839  0C7E  0A4A               	incf	_DelayOff^(0+128),w
 14840  0C7F  0086               	movwf	6
 14841  0C80  3001               	movlw	1	; select bank2/3
 14842  0C81  0087               	movwf	7
 14843  0C82  0020               	movlb	0	; select bank0
 14844  0C83  0867               	movf	??_setDelayOff_GO,w
 14845  0C84  0081               	movwf	1
 14846                           
 14847                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14848  0C85  3005               	movlw	5
 14849  0C86  00E7               	movwf	??_setDelayOff_GO
 14850  0C87  0867               	movf	??_setDelayOff_GO,w
 14851  0C88  00E2               	movwf	setProductData@value
 14852  0C89  086C               	movf	setDelayOff_GO@sw,w
 14853  0C8A  3E1A               	addlw	26
 14854  0C8B  319A  22F6         	fcall	_setProductData
 14855                           
 14856                           ;DelayOff_B1.c: 106: }
 14857                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14858  0C8D  0008               	return
 14859  0C8E                     l6249:	
 14860  0C8E  0020               	movlb	0	; select bank0
 14861  0C8F  08E5               	movf	setDelayOff_GO@command,f
 14862  0C90  1D03               	skipz
 14863  0C91  0008               	return
 14864                           
 14865                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14866  0C92  01E2               	clrf	setProductData@value
 14867  0C93  086C               	movf	setDelayOff_GO@sw,w
 14868  0C94  3E1A               	addlw	26
 14869  0C95  319A  22F6         	fcall	_setProductData
 14870  0C97  0008               	return
 14871  0C98                     __end_of_setDelayOff_GO:	
 14872                           
 14873                           	psect	text97
 14874  1C41                     __ptext97:	
 14875 ;; *************** function ___bmul *****************
 14876 ;; Defined at:
 14877 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14878 ;; Parameters:    Size  Location     Type
 14879 ;;  multiplier      1    wreg     unsigned char 
 14880 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14883 ;;  product         1    2[BANK0 ] unsigned char 
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  1    wreg      unsigned char 
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;Total ram usage:        4 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    5
 14900 ;; This function calls:
 14901 ;;		Nothing
 14902 ;; This function is called by:
 14903 ;;		_setDelayOff_GO
 14904 ;;		_DelayTimejudge
 14905 ;; This function uses a non-reentrant model
 14906 ;;
 14907                           
 14908                           
 14909                           ;psect for function ___bmul
 14910  1C41                     ___bmul:	
 14911                           
 14912                           ;incstack = 0
 14913                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14914                           ;___bmul@multiplier stored from wreg
 14915  1C41  0020               	movlb	0	; select bank0
 14916  1C42  00A3               	movwf	___bmul@multiplier
 14917  1C43  01A2               	clrf	___bmul@product
 14918  1C44                     l5913:	
 14919  1C44  1C23               	btfss	___bmul@multiplier,0
 14920  1C45  2C4A               	goto	l5917
 14921  1C46  0820               	movf	___bmul@multiplicand,w
 14922  1C47  00A1               	movwf	??___bmul
 14923  1C48  0821               	movf	??___bmul,w
 14924  1C49  07A2               	addwf	___bmul@product,f
 14925  1C4A                     l5917:	
 14926  1C4A  1003               	clrc
 14927  1C4B  0DA0               	rlf	___bmul@multiplicand,f
 14928  1C4C  1003               	clrc
 14929  1C4D  0CA3               	rrf	___bmul@multiplier,f
 14930  1C4E  08A3               	movf	___bmul@multiplier,f
 14931  1C4F  1D03               	skipz
 14932  1C50  2C44               	goto	l5913
 14933  1C51  0822               	movf	___bmul@product,w
 14934  1C52  0008               	return
 14935  1C53                     __end_of___bmul:	
 14936                           
 14937                           	psect	text98
 14938  1DAC                     __ptext98:	
 14939 ;; *************** function _setCmd_Status *****************
 14940 ;; Defined at:
 14941 ;;		line 651 in file "../src/Main_B1.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  number          1    wreg     unsigned char 
 14944 ;;  cmd             1    0[BANK0 ] unsigned char 
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;  number          1    2[BANK0 ] unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;		None               void
 14949 ;; Registers used:
 14950 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14960 ;;Total ram usage:        3 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    5
 14963 ;; This function calls:
 14964 ;;		Nothing
 14965 ;; This function is called by:
 14966 ;;		_setDimmerLights_OnOff
 14967 ;;		_setControl_Lights_Table
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           
 14972                           ;psect for function _setCmd_Status
 14973  1DAC                     _setCmd_Status:	
 14974                           
 14975                           ;incstack = 0
 14976                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14977                           ;setCmd_Status@number stored from wreg
 14978  1DAC  0020               	movlb	0	; select bank0
 14979  1DAD  00A2               	movwf	setCmd_Status@number
 14980                           
 14981                           ;Main_B1.c: 652: switch (number) {
 14982  1DAE  2DBE               	goto	l6415
 14983  1DAF                     l6411:	
 14984                           ;Main_B1.c: 653: case 1:
 14985                           
 14986                           
 14987                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14988  1DAF  0820               	movf	setCmd_Status@cmd,w
 14989  1DB0  3A01               	xorlw	1
 14990  1DB1  3000               	movlw	0
 14991  1DB2  1903               	skipnz
 14992  1DB3  3001               	movlw	1
 14993  1DB4  00A1               	movwf	??_setCmd_Status
 14994  1DB5  0021               	movlb	1	; select bank1
 14995  1DB6  0849               	movf	_Cmd^(0+128),w
 14996  1DB7  0020               	movlb	0	; select bank0
 14997  1DB8  0621               	xorwf	??_setCmd_Status,w
 14998  1DB9  39FE               	andlw	-2
 14999  1DBA  0621               	xorwf	??_setCmd_Status,w
 15000  1DBB  0021               	movlb	1	; select bank1
 15001  1DBC  00C9               	movwf	_Cmd^(0+128)
 15002                           
 15003                           ;Main_B1.c: 656: }
 15004                           
 15005                           ;Main_B1.c: 655: break;
 15006  1DBD  0008               	return
 15007  1DBE                     l6415:	
 15008  1DBE  0020               	movlb	0	; select bank0
 15009  1DBF  0822               	movf	setCmd_Status@number,w
 15010                           
 15011                           ; Switch size 1, requested type "space"
 15012                           ; Number of cases is 1, Range of values is 1 to 1
 15013                           ; switch strategies available:
 15014                           ; Name         Instructions Cycles
 15015                           ; simple_byte            4     3 (average)
 15016                           ; direct_byte           11     9 (fixed)
 15017                           ; jumptable            263     9 (fixed)
 15018                           ;	Chosen strategy is simple_byte
 15019  1DC0  3A01               	xorlw	1	; case 1
 15020  1DC1  1903               	skipnz
 15021  1DC2  2DAF               	goto	l6411
 15022  1DC3  2DC4               	goto	l1511
 15023  1DC4                     l1511:	
 15024  1DC4  0008               	return
 15025  1DC5                     __end_of_setCmd_Status:	
 15026                           
 15027                           	psect	text99
 15028  1AA8                     __ptext99:	
 15029 ;; *************** function _getMain_All_LightsStatus *****************
 15030 ;; Defined at:
 15031 ;;		line 373 in file "../src/Main_B1.c"
 15032 ;; Parameters:    Size  Location     Type
 15033 ;;		None
 15034 ;; Auto vars:     Size  Location     Type
 15035 ;;  status          1    0[BANK0 ] unsigned char 
 15036 ;; Return value:  Size  Location     Type
 15037 ;;                  1    wreg      unsigned char 
 15038 ;; Registers used:
 15039 ;;		wreg, status,2
 15040 ;; Tracked objects:
 15041 ;;		On entry : 0/0
 15042 ;;		On exit  : 0/0
 15043 ;;		Unchanged: 0/0
 15044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;Total ram usage:        1 bytes
 15050 ;; Hardware stack levels used:    1
 15051 ;; Hardware stack levels required when called:    5
 15052 ;; This function calls:
 15053 ;;		Nothing
 15054 ;; This function is called by:
 15055 ;;		_DimmerLights_Main
 15056 ;;		_setDimmerLights_Main
 15057 ;;		_setDimmerLights_OnOff
 15058 ;;		_Flash_Memory_Main
 15059 ;;		_Exception_Main
 15060 ;;		_Load_Main
 15061 ;;		_setTemp_Main
 15062 ;;		_setControl_Lights_Table
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           
 15067                           ;psect for function _getMain_All_LightsStatus
 15068  1AA8                     _getMain_All_LightsStatus:	
 15069                           
 15070                           ;Main_B1.c: 374: char status = 0;
 15071                           
 15072                           ;incstack = 0
 15073                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15074  1AA8  0020               	movlb	0	; select bank0
 15075  1AA9  01A0               	clrf	getMain_All_LightsStatus@status
 15076                           
 15077                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15078  1AAA  3000               	movlw	0
 15079  1AAB  0022               	movlb	2	; select bank2
 15080  1AAC  1861               	btfsc	(_DimmerLights1^(0+256)+1),0
 15081  1AAD  3001               	movlw	1
 15082  1AAE  0020               	movlb	0	; select bank0
 15083  1AAF  00A0               	movwf	getMain_All_LightsStatus@status
 15084                           
 15085                           ;Main_B1.c: 420: return status;
 15086  1AB0  0820               	movf	getMain_All_LightsStatus@status,w
 15087  1AB1  0008               	return
 15088  1AB2                     __end_of_getMain_All_LightsStatus:	
 15089                           
 15090                           	psect	text100
 15091  1BDA                     __ptext100:	
 15092 ;; *************** function _getDelayOff_GO *****************
 15093 ;; Defined at:
 15094 ;;		line 114 in file "../src/DelayOff_B1.c"
 15095 ;; Parameters:    Size  Location     Type
 15096 ;;  sw              1    wreg     unsigned char 
 15097 ;; Auto vars:     Size  Location     Type
 15098 ;;  sw              1    2[BANK0 ] unsigned char 
 15099 ;;  go              1    3[BANK0 ] unsigned char 
 15100 ;; Return value:  Size  Location     Type
 15101 ;;                  1    wreg      unsigned char 
 15102 ;; Registers used:
 15103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15104 ;; Tracked objects:
 15105 ;;		On entry : 0/0
 15106 ;;		On exit  : 0/0
 15107 ;;		Unchanged: 0/0
 15108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;Total ram usage:        2 bytes
 15114 ;; Hardware stack levels used:    1
 15115 ;; Hardware stack levels required when called:    6
 15116 ;; This function calls:
 15117 ;;		_DelayOffPointSelect
 15118 ;; This function is called by:
 15119 ;;		_setDimmerLights_OnOff
 15120 ;; This function uses a non-reentrant model
 15121 ;;
 15122                           
 15123                           
 15124                           ;psect for function _getDelayOff_GO
 15125  1BDA                     _getDelayOff_GO:	
 15126                           
 15127                           ;incstack = 0
 15128                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15129                           ;getDelayOff_GO@sw stored from wreg
 15130  1BDA  0020               	movlb	0	; select bank0
 15131  1BDB  00A2               	movwf	getDelayOff_GO@sw
 15132                           
 15133                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15134  1BDC  0822               	movf	getDelayOff_GO@sw,w
 15135  1BDD  319A  22DE         	fcall	_DelayOffPointSelect
 15136                           
 15137                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15138  1BDF  0021               	movlb	1	; select bank1
 15139  1BE0  084A               	movf	_DelayOff^(0+128),w
 15140  1BE1  0086               	movwf	6
 15141  1BE2  3001               	movlw	1	; select bank2/3
 15142  1BE3  0087               	movwf	7
 15143  1BE4  3000               	movlw	0
 15144  1BE5  1881               	btfsc	1,1
 15145  1BE6  3001               	movlw	1
 15146  1BE7  0020               	movlb	0	; select bank0
 15147  1BE8  00A3               	movwf	getDelayOff_GO@go
 15148                           
 15149                           ;DelayOff_B1.c: 117: return go;
 15150  1BE9  0823               	movf	getDelayOff_GO@go,w
 15151  1BEA  0008               	return
 15152  1BEB                     __end_of_getDelayOff_GO:	
 15153                           
 15154                           	psect	text101
 15155  1C2F                     __ptext101:	
 15156 ;; *************** function _getCmd_Status *****************
 15157 ;; Defined at:
 15158 ;;		line 659 in file "../src/Main_B1.c"
 15159 ;; Parameters:    Size  Location     Type
 15160 ;;  number          1    wreg     unsigned char 
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;  number          1    0[BANK0 ] unsigned char 
 15163 ;;  cmd             1    1[BANK0 ] unsigned char 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      unsigned char 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;Total ram usage:        2 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    5
 15180 ;; This function calls:
 15181 ;;		Nothing
 15182 ;; This function is called by:
 15183 ;;		_setDimmerLights_OnOff
 15184 ;; This function uses a non-reentrant model
 15185 ;;
 15186                           
 15187                           
 15188                           ;psect for function _getCmd_Status
 15189  1C2F                     _getCmd_Status:	
 15190                           
 15191                           ;incstack = 0
 15192                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15193                           ;getCmd_Status@number stored from wreg
 15194  1C2F  0020               	movlb	0	; select bank0
 15195  1C30  00A0               	movwf	getCmd_Status@number
 15196                           
 15197                           ;Main_B1.c: 660: char cmd = 0;
 15198  1C31  01A1               	clrf	getCmd_Status@cmd
 15199                           
 15200                           ;Main_B1.c: 661: switch (number) {
 15201  1C32  2C3A               	goto	l6685
 15202  1C33                     l6681:	
 15203                           ;Main_B1.c: 662: case 1:
 15204                           
 15205                           
 15206                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15207  1C33  3000               	movlw	0
 15208  1C34  0021               	movlb	1	; select bank1
 15209  1C35  1849               	btfsc	_Cmd^(0+128),0
 15210  1C36  3001               	movlw	1
 15211  1C37  0020               	movlb	0	; select bank0
 15212  1C38  00A1               	movwf	getCmd_Status@cmd
 15213                           
 15214                           ;Main_B1.c: 665: }
 15215                           
 15216                           ;Main_B1.c: 664: break;
 15217  1C39  2C3F               	goto	l6687
 15218  1C3A                     l6685:	
 15219  1C3A  0820               	movf	getCmd_Status@number,w
 15220                           
 15221                           ; Switch size 1, requested type "space"
 15222                           ; Number of cases is 1, Range of values is 1 to 1
 15223                           ; switch strategies available:
 15224                           ; Name         Instructions Cycles
 15225                           ; simple_byte            4     3 (average)
 15226                           ; direct_byte           11     9 (fixed)
 15227                           ; jumptable            263     9 (fixed)
 15228                           ;	Chosen strategy is simple_byte
 15229  1C3B  3A01               	xorlw	1	; case 1
 15230  1C3C  1903               	skipnz
 15231  1C3D  2C33               	goto	l6681
 15232  1C3E  2C3F               	goto	l6687
 15233  1C3F                     l6687:	
 15234                           
 15235                           ;Main_B1.c: 666: return cmd;
 15236  1C3F  0821               	movf	getCmd_Status@cmd,w
 15237  1C40  0008               	return
 15238  1C41                     __end_of_getCmd_Status:	
 15239                           
 15240                           	psect	text102
 15241  13CF                     __ptext102:	
 15242 ;; *************** function _setDimmerLights_Dimming *****************
 15243 ;; Defined at:
 15244 ;;		line 955 in file "../src/Dimmer_B1.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;  lights          1    wreg     unsigned char 
 15247 ;;  status          1   74[BANK0 ] unsigned char 
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;  lights          1   77[BANK0 ] unsigned char 
 15250 ;;  value           1   76[BANK0 ] unsigned char 
 15251 ;; Return value:  Size  Location     Type
 15252 ;;		None               void
 15253 ;; Registers used:
 15254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15260 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;Total ram usage:        4 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    8
 15267 ;; This function calls:
 15268 ;;		_getDimmerIntr_DimmingValue
 15269 ;;		_getDimmerLights_ValueToPercent
 15270 ;;		_setBuz
 15271 ;;		_setDimmerIntr_Dimming_Sw
 15272 ;;		_setDimmerIntr_MaxmumValue
 15273 ;;		_setDimmerLights_Line
 15274 ;;		_setMemory_Modify
 15275 ;;		_setProductData
 15276 ;;		_setRF_DimmerLights
 15277 ;;		_setRF_TransceiveGO
 15278 ;;		_setTxData
 15279 ;; This function is called by:
 15280 ;;		_setDimmerLights_Main
 15281 ;; This function uses a non-reentrant model
 15282 ;;
 15283                           
 15284                           
 15285                           ;psect for function _setDimmerLights_Dimming
 15286  13CF                     _setDimmerLights_Dimming:	
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15290                           ;setDimmerLights_Dimming@lights stored from wreg
 15291  13CF  0020               	movlb	0	; select bank0
 15292  13D0  00ED               	movwf	setDimmerLights_Dimming@lights
 15293                           
 15294                           ;Dimmer_B1.c: 956: if (status == 1) {
 15295  13D1  086A               	movf	setDimmerLights_Dimming@status,w
 15296  13D2  3A01               	xorlw	1
 15297  13D3  1D03               	skipz
 15298  13D4  2BE8               	goto	l6985
 15299                           
 15300                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 1);
 15301  13D5  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15302  13D6  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15303  13D7  086D               	movf	setDimmerLights_Dimming@lights,w
 15304  13D8  319D  2566  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15305                           
 15306                           ;Dimmer_B1.c: 960: setRF_TransceiveGO(0);
 15307  13DB  3000               	movlw	0
 15308  13DC  319C  249C  3193   	fcall	_setRF_TransceiveGO
 15309                           
 15310                           ;Dimmer_B1.c: 962: setBuz(1, 100);
 15311  13DF  3064               	movlw	100
 15312  13E0  0020               	movlb	0	; select bank0
 15313  13E1  00A9               	movwf	setBuz@time
 15314  13E2  3000               	movlw	0
 15315  13E3  00AA               	movwf	setBuz@time+1
 15316  13E4  3001               	movlw	1
 15317  13E5  3194  2425         	fcall	_setBuz
 15318                           
 15319                           ;Dimmer_B1.c: 963: } else if (status == 0) {
 15320  13E7  0008               	return
 15321  13E8                     l6985:	
 15322  13E8  0020               	movlb	0	; select bank0
 15323  13E9  08EA               	movf	setDimmerLights_Dimming@status,f
 15324  13EA  1D03               	skipz
 15325  13EB  0008               	return
 15326                           
 15327                           ;Dimmer_B1.c: 964: setDimmerIntr_Dimming_Sw(lights, 0);
 15328  13EC  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15329  13ED  086D               	movf	setDimmerLights_Dimming@lights,w
 15330  13EE  319D  2566  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15331                           
 15332                           ;Dimmer_B1.c: 967: Dimmer.Load_Status = 0;
 15333  13F1  0022               	movlb	2	; select bank2
 15334  13F2  112C               	bcf	_Dimmer^(0+256),2
 15335                           
 15336                           ;Dimmer_B1.c: 968: setDimmerLights_Line(lights);
 15337  13F3  0020               	movlb	0	; select bank0
 15338  13F4  086D               	movf	setDimmerLights_Dimming@lights,w
 15339  13F5  319B  23C9  3193   	fcall	_setDimmerLights_Line
 15340                           
 15341                           ;Dimmer_B1.c: 970: char value = getDimmerIntr_DimmingValue(lights);
 15342  13F8  0020               	movlb	0	; select bank0
 15343  13F9  086D               	movf	setDimmerLights_Dimming@lights,w
 15344  13FA  319B  238A  3193   	fcall	_getDimmerIntr_DimmingValue
 15345  13FD  0020               	movlb	0	; select bank0
 15346  13FE  00EB               	movwf	??_setDimmerLights_Dimming
 15347  13FF  086B               	movf	??_setDimmerLights_Dimming,w
 15348  1400  00EC               	movwf	setDimmerLights_Dimming@value
 15349                           
 15350                           ;Dimmer_B1.c: 971: setDimmerIntr_MaxmumValue(lights, value);
 15351  1401  086C               	movf	setDimmerLights_Dimming@value,w
 15352  1402  00EB               	movwf	??_setDimmerLights_Dimming
 15353  1403  086B               	movf	??_setDimmerLights_Dimming,w
 15354  1404  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15355  1405  086D               	movf	setDimmerLights_Dimming@lights,w
 15356  1406  319B  2302  3193   	fcall	_setDimmerIntr_MaxmumValue
 15357                           
 15358                           ;Dimmer_B1.c: 972: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15359  1409  0020               	movlb	0	; select bank0
 15360  140A  086C               	movf	setDimmerLights_Dimming@value,w
 15361  140B  3196  2660  3193   	fcall	_getDimmerLights_ValueToPercent
 15362  140E  0020               	movlb	0	; select bank0
 15363  140F  00EB               	movwf	??_setDimmerLights_Dimming
 15364  1410  086B               	movf	??_setDimmerLights_Dimming,w
 15365  1411  00E2               	movwf	setProductData@value
 15366  1412  086D               	movf	setDimmerLights_Dimming@lights,w
 15367  1413  3E14               	addlw	20
 15368  1414  319A  22F6  3193   	fcall	_setProductData
 15369                           
 15370                           ;Dimmer_B1.c: 979: setMemory_Modify(1);
 15371  1417  3001               	movlw	1
 15372  1418  319C  2489  3193   	fcall	_setMemory_Modify
 15373                           
 15374                           ;Dimmer_B1.c: 983: setRF_DimmerLights(lights, 1);
 15375  141B  0020               	movlb	0	; select bank0
 15376  141C  01E5               	clrf	setRF_DimmerLights@on
 15377  141D  0AE5               	incf	setRF_DimmerLights@on,f
 15378  141E  086D               	movf	setDimmerLights_Dimming@lights,w
 15379  141F  3196  26C5  3193   	fcall	_setRF_DimmerLights
 15380                           
 15381                           ;Dimmer_B1.c: 984: setTxData();
 15382  1422  318E  2682         	fcall	_setTxData
 15383  1424  0008               	return
 15384  1425                     __end_of_setDimmerLights_Dimming:	
 15385                           
 15386                           	psect	text103
 15387  0E82                     __ptext103:	
 15388 ;; *************** function _setTxData *****************
 15389 ;; Defined at:
 15390 ;;		line 183 in file "../src/RF_Control_B1.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;		None
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  i               1    0        unsigned char 
 15395 ;; Return value:  Size  Location     Type
 15396 ;;		None               void
 15397 ;; Registers used:
 15398 ;;		wreg, fsr1l, fsr1h, status,2
 15399 ;; Tracked objects:
 15400 ;;		On entry : 0/0
 15401 ;;		On exit  : 0/0
 15402 ;;		Unchanged: 0/0
 15403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;Total ram usage:        1 bytes
 15409 ;; Hardware stack levels used:    1
 15410 ;; Hardware stack levels required when called:    5
 15411 ;; This function calls:
 15412 ;;		Nothing
 15413 ;; This function is called by:
 15414 ;;		_setDimmerLights_OnOff
 15415 ;;		_setDimmerLights_Dimming
 15416 ;;		_my_MainTimer
 15417 ;;		_getRxData
 15418 ;;		_setControl_Lights_Table
 15419 ;;		_setRFSW_Control
 15420 ;;		_setRFSW_AdjControl
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           
 15425                           ;psect for function _setTxData
 15426  0E82                     _setTxData:	
 15427                           
 15428                           ;RF_Control_B1.c: 184: char i;
 15429                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15430                           
 15431                           ;incstack = 0
 15432                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15433  0E82  0021               	movlb	1	; select bank1
 15434  0E83  1C20               	btfss	_RF1^(0+128),0
 15435  0E84  0008               	return
 15436                           
 15437                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15438  0E85  1520               	bsf	_RF1^(0+128),2
 15439                           
 15440                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15441  0E86  01A3               	clrf	(_RF1^(0+128)+3)
 15442  0E87  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15443                           
 15444                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15445  0E88  3063               	movlw	99
 15446  0E89  0020               	movlb	0	; select bank0
 15447  0E8A  00A0               	movwf	??_setTxData
 15448  0E8B  0820               	movf	??_setTxData,w
 15449  0E8C  0023               	movlb	3	; select bank3
 15450  0E8D  00A0               	movwf	_RF_Data^(0+384)
 15451                           
 15452                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15453  0E8E  3002               	movlw	2
 15454  0E8F  0020               	movlb	0	; select bank0
 15455  0E90  00A0               	movwf	??_setTxData
 15456  0E91  0820               	movf	??_setTxData,w
 15457  0E92  0023               	movlb	3	; select bank3
 15458  0E93  00A1               	movwf	(_RF_Data^(0+384)+1)
 15459                           
 15460                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15461  0E94  0021               	movlb	1	; select bank1
 15462  0E95  086E               	movf	_product^(0+128),w
 15463  0E96  0086               	movwf	6
 15464  0E97  3001               	movlw	1	; select bank2/3
 15465  0E98  0087               	movwf	7
 15466  0E99  3001               	movlw	1	; select bank2/3
 15467  0E9A  3F42               	moviw [2]fsr1
 15468  0E9B  0023               	movlb	3	; select bank3
 15469  0E9C  00A2               	movwf	(_RF_Data^(0+384)+2)
 15470                           
 15471                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15472  0E9D  0021               	movlb	1	; select bank1
 15473  0E9E  086E               	movf	_product^(0+128),w
 15474  0E9F  0086               	movwf	6
 15475  0EA0  3001               	movlw	1	; select bank2/3
 15476  0EA1  0087               	movwf	7
 15477  0EA2  3001               	movlw	1	; select bank2/3
 15478  0EA3  3F43               	moviw [3]fsr1
 15479  0EA4  0023               	movlb	3	; select bank3
 15480  0EA5  00A3               	movwf	(_RF_Data^(0+384)+3)
 15481                           
 15482                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15483  0EA6  0021               	movlb	1	; select bank1
 15484  0EA7  086E               	movf	_product^(0+128),w
 15485  0EA8  0086               	movwf	6
 15486  0EA9  3001               	movlw	1	; select bank2/3
 15487  0EAA  0087               	movwf	7
 15488  0EAB  3001               	movlw	1	; select bank2/3
 15489  0EAC  3F44               	moviw [4]fsr1
 15490  0EAD  0023               	movlb	3	; select bank3
 15491  0EAE  00A4               	movwf	(_RF_Data^(0+384)+4)
 15492                           
 15493                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15494  0EAF  0021               	movlb	1	; select bank1
 15495  0EB0  086E               	movf	_product^(0+128),w
 15496  0EB1  0086               	movwf	6
 15497  0EB2  3001               	movlw	1	; select bank2/3
 15498  0EB3  0087               	movwf	7
 15499  0EB4  3001               	movlw	1	; select bank2/3
 15500  0EB5  3F45               	moviw [5]fsr1
 15501  0EB6  0023               	movlb	3	; select bank3
 15502  0EB7  00A5               	movwf	(_RF_Data^(0+384)+5)
 15503                           
 15504                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15505  0EB8  0021               	movlb	1	; select bank1
 15506  0EB9  086E               	movf	_product^(0+128),w
 15507  0EBA  0086               	movwf	6
 15508  0EBB  3001               	movlw	1	; select bank2/3
 15509  0EBC  0087               	movwf	7
 15510  0EBD  3001               	movlw	1	; select bank2/3
 15511  0EBE  3F46               	moviw [6]fsr1
 15512  0EBF  0023               	movlb	3	; select bank3
 15513  0EC0  00A6               	movwf	(_RF_Data^(0+384)+6)
 15514                           
 15515                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15516  0EC1  0021               	movlb	1	; select bank1
 15517  0EC2  086E               	movf	_product^(0+128),w
 15518  0EC3  0086               	movwf	6
 15519  0EC4  3001               	movlw	1	; select bank2/3
 15520  0EC5  0087               	movwf	7
 15521  0EC6  3001               	movlw	1	; select bank2/3
 15522  0EC7  3F47               	moviw [7]fsr1
 15523  0EC8  0023               	movlb	3	; select bank3
 15524  0EC9  00A7               	movwf	(_RF_Data^(0+384)+7)
 15525                           
 15526                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15527  0ECA  0021               	movlb	1	; select bank1
 15528  0ECB  086E               	movf	_product^(0+128),w
 15529  0ECC  0086               	movwf	6
 15530  0ECD  3001               	movlw	1	; select bank2/3
 15531  0ECE  0087               	movwf	7
 15532  0ECF  3001               	movlw	1	; select bank2/3
 15533  0ED0  3F48               	moviw [8]fsr1
 15534  0ED1  0023               	movlb	3	; select bank3
 15535  0ED2  00A8               	movwf	(_RF_Data^(0+384)+8)
 15536                           
 15537                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15538  0ED3  0021               	movlb	1	; select bank1
 15539  0ED4  086E               	movf	_product^(0+128),w
 15540  0ED5  0086               	movwf	6
 15541  0ED6  3001               	movlw	1	; select bank2/3
 15542  0ED7  0087               	movwf	7
 15543  0ED8  3001               	movlw	1	; select bank2/3
 15544  0ED9  3F49               	moviw [9]fsr1
 15545  0EDA  0023               	movlb	3	; select bank3
 15546  0EDB  00A9               	movwf	(_RF_Data^(0+384)+9)
 15547                           
 15548                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15549  0EDC  0021               	movlb	1	; select bank1
 15550  0EDD  086E               	movf	_product^(0+128),w
 15551  0EDE  0086               	movwf	6
 15552  0EDF  3001               	movlw	1	; select bank2/3
 15553  0EE0  0087               	movwf	7
 15554  0EE1  3001               	movlw	1	; select bank2/3
 15555  0EE2  3F4A               	moviw [10]fsr1
 15556  0EE3  0023               	movlb	3	; select bank3
 15557  0EE4  00AA               	movwf	(_RF_Data^(0+384)+10)
 15558                           
 15559                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15560  0EE5  0021               	movlb	1	; select bank1
 15561  0EE6  086E               	movf	_product^(0+128),w
 15562  0EE7  0086               	movwf	6
 15563  0EE8  3001               	movlw	1	; select bank2/3
 15564  0EE9  0087               	movwf	7
 15565  0EEA  3001               	movlw	1	; select bank2/3
 15566  0EEB  3F4B               	moviw [11]fsr1
 15567  0EEC  0023               	movlb	3	; select bank3
 15568  0EED  00AB               	movwf	(_RF_Data^(0+384)+11)
 15569                           
 15570                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15571  0EEE  0021               	movlb	1	; select bank1
 15572  0EEF  086E               	movf	_product^(0+128),w
 15573  0EF0  0086               	movwf	6
 15574  0EF1  3001               	movlw	1	; select bank2/3
 15575  0EF2  0087               	movwf	7
 15576  0EF3  3001               	movlw	1	; select bank2/3
 15577  0EF4  3F4C               	moviw [12]fsr1
 15578  0EF5  0023               	movlb	3	; select bank3
 15579  0EF6  00AC               	movwf	(_RF_Data^(0+384)+12)
 15580                           
 15581                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15582  0EF7  0021               	movlb	1	; select bank1
 15583  0EF8  086E               	movf	_product^(0+128),w
 15584  0EF9  0086               	movwf	6
 15585  0EFA  3001               	movlw	1	; select bank2/3
 15586  0EFB  0087               	movwf	7
 15587  0EFC  3001               	movlw	1	; select bank2/3
 15588  0EFD  3F4D               	moviw [13]fsr1
 15589  0EFE  0023               	movlb	3	; select bank3
 15590  0EFF  00AD               	movwf	(_RF_Data^(0+384)+13)
 15591                           
 15592                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15593  0F00  0021               	movlb	1	; select bank1
 15594  0F01  086E               	movf	_product^(0+128),w
 15595  0F02  0086               	movwf	6
 15596  0F03  3001               	movlw	1	; select bank2/3
 15597  0F04  0087               	movwf	7
 15598  0F05  3001               	movlw	1	; select bank2/3
 15599  0F06  3F4E               	moviw [14]fsr1
 15600  0F07  0023               	movlb	3	; select bank3
 15601  0F08  00AE               	movwf	(_RF_Data^(0+384)+14)
 15602                           
 15603                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15604  0F09  0021               	movlb	1	; select bank1
 15605  0F0A  086E               	movf	_product^(0+128),w
 15606  0F0B  0086               	movwf	6
 15607  0F0C  3001               	movlw	1	; select bank2/3
 15608  0F0D  0087               	movwf	7
 15609  0F0E  3001               	movlw	1	; select bank2/3
 15610  0F0F  3F4F               	moviw [15]fsr1
 15611  0F10  0023               	movlb	3	; select bank3
 15612  0F11  00AF               	movwf	(_RF_Data^(0+384)+15)
 15613                           
 15614                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15615  0F12  0021               	movlb	1	; select bank1
 15616  0F13  086E               	movf	_product^(0+128),w
 15617  0F14  0086               	movwf	6
 15618  0F15  3001               	movlw	1	; select bank2/3
 15619  0F16  0087               	movwf	7
 15620  0F17  3001               	movlw	1	; select bank2/3
 15621  0F18  3F50               	moviw [16]fsr1
 15622  0F19  0023               	movlb	3	; select bank3
 15623  0F1A  00B0               	movwf	(_RF_Data^(0+384)+16)
 15624                           
 15625                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15626  0F1B  0021               	movlb	1	; select bank1
 15627  0F1C  086E               	movf	_product^(0+128),w
 15628  0F1D  0086               	movwf	6
 15629  0F1E  3001               	movlw	1	; select bank2/3
 15630  0F1F  0087               	movwf	7
 15631  0F20  3001               	movlw	1	; select bank2/3
 15632  0F21  3F51               	moviw [17]fsr1
 15633  0F22  0023               	movlb	3	; select bank3
 15634  0F23  00B1               	movwf	(_RF_Data^(0+384)+17)
 15635                           
 15636                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15637  0F24  0021               	movlb	1	; select bank1
 15638  0F25  086E               	movf	_product^(0+128),w
 15639  0F26  0086               	movwf	6
 15640  0F27  3001               	movlw	1	; select bank2/3
 15641  0F28  0087               	movwf	7
 15642  0F29  3001               	movlw	1	; select bank2/3
 15643  0F2A  3F52               	moviw [18]fsr1
 15644  0F2B  0023               	movlb	3	; select bank3
 15645  0F2C  00B2               	movwf	(_RF_Data^(0+384)+18)
 15646                           
 15647                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15648  0F2D  0021               	movlb	1	; select bank1
 15649  0F2E  086E               	movf	_product^(0+128),w
 15650  0F2F  0086               	movwf	6
 15651  0F30  3001               	movlw	1	; select bank2/3
 15652  0F31  0087               	movwf	7
 15653  0F32  3001               	movlw	1	; select bank2/3
 15654  0F33  3F53               	moviw [19]fsr1
 15655  0F34  0023               	movlb	3	; select bank3
 15656  0F35  00B3               	movwf	(_RF_Data^(0+384)+19)
 15657                           
 15658                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15659  0F36  30D1               	movlw	209
 15660  0F37  0020               	movlb	0	; select bank0
 15661  0F38  00A0               	movwf	??_setTxData
 15662  0F39  0820               	movf	??_setTxData,w
 15663  0F3A  0023               	movlb	3	; select bank3
 15664  0F3B  00B4               	movwf	(_RF_Data^(0+384)+20)
 15665  0F3C  0008               	return
 15666  0F3D                     __end_of_setTxData:	
 15667                           
 15668                           	psect	text104
 15669  1C9C                     __ptext104:	
 15670 ;; *************** function _setRF_TransceiveGO *****************
 15671 ;; Defined at:
 15672 ;;		line 505 in file "../src/RF_Control_B1.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  command         1    wreg     unsigned char 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  command         1    1[BANK0 ] unsigned char 
 15677 ;; Return value:  Size  Location     Type
 15678 ;;		None               void
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;Total ram usage:        2 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    5
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_setDimmerLights_Dimming
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           
 15701                           ;psect for function _setRF_TransceiveGO
 15702  1C9C                     _setRF_TransceiveGO:	
 15703                           
 15704                           ;incstack = 0
 15705                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15706                           ;setRF_TransceiveGO@command stored from wreg
 15707  1C9C  0020               	movlb	0	; select bank0
 15708  1C9D  00A1               	movwf	setRF_TransceiveGO@command
 15709                           
 15710                           ;RF_Control_B1.c: 506: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15711  1C9E  0821               	movf	setRF_TransceiveGO@command,w
 15712  1C9F  3A01               	xorlw	1
 15713  1CA0  3000               	movlw	0
 15714  1CA1  1903               	skipnz
 15715  1CA2  3001               	movlw	1
 15716  1CA3  00A0               	movwf	??_setRF_TransceiveGO
 15717  1CA4  0DA0               	rlf	??_setRF_TransceiveGO,f
 15718  1CA5  0DA0               	rlf	??_setRF_TransceiveGO,f
 15719  1CA6  0021               	movlb	1	; select bank1
 15720  1CA7  0820               	movf	_RF1^(0+128),w
 15721  1CA8  0020               	movlb	0	; select bank0
 15722  1CA9  0620               	xorwf	??_setRF_TransceiveGO,w
 15723  1CAA  39FB               	andlw	-5
 15724  1CAB  0620               	xorwf	??_setRF_TransceiveGO,w
 15725  1CAC  0021               	movlb	1	; select bank1
 15726  1CAD  00A0               	movwf	_RF1^(0+128)
 15727  1CAE  0008               	return
 15728  1CAF                     __end_of_setRF_TransceiveGO:	
 15729                           
 15730                           	psect	text105
 15731  16C5                     __ptext105:	
 15732 ;; *************** function _setRF_DimmerLights *****************
 15733 ;; Defined at:
 15734 ;;		line 490 in file "../src/RF_Control_B1.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;  lights          1    wreg     unsigned char 
 15737 ;;  on              1   69[BANK0 ] unsigned char 
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;  lights          1   73[BANK0 ] unsigned char 
 15740 ;;  status          1   72[BANK0 ] unsigned char 
 15741 ;; Return value:  Size  Location     Type
 15742 ;;		None               void
 15743 ;; Registers used:
 15744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15745 ;; Tracked objects:
 15746 ;;		On entry : 0/0
 15747 ;;		On exit  : 0/0
 15748 ;;		Unchanged: 0/0
 15749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15750 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;Total ram usage:        5 bytes
 15755 ;; Hardware stack levels used:    1
 15756 ;; Hardware stack levels required when called:    6
 15757 ;; This function calls:
 15758 ;;		_setProductData
 15759 ;; This function is called by:
 15760 ;;		_setDimmerLights_OnOff
 15761 ;;		_setDimmerLights_Dimming
 15762 ;;		_setRFSW_Control
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           
 15767                           ;psect for function _setRF_DimmerLights
 15768  16C5                     _setRF_DimmerLights:	
 15769                           
 15770                           ;incstack = 0
 15771                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15772                           ;setRF_DimmerLights@lights stored from wreg
 15773  16C5  0020               	movlb	0	; select bank0
 15774  16C6  00E9               	movwf	setRF_DimmerLights@lights
 15775                           
 15776                           ;RF_Control_B1.c: 491: char status = 1;
 15777  16C7  01E8               	clrf	setRF_DimmerLights@status
 15778  16C8  0AE8               	incf	setRF_DimmerLights@status,f
 15779                           
 15780                           ;RF_Control_B1.c: 492: status <<= (lights - 1);
 15781  16C9  0869               	movf	setRF_DimmerLights@lights,w
 15782  16CA  3EFF               	addlw	-1
 15783  16CB  0A89               	incf	9,f
 15784  16CC  2ECF               	goto	u5410
 15785  16CD                     u5415:	
 15786  16CD  1003               	clrc
 15787  16CE  0DE8               	rlf	setRF_DimmerLights@status,f
 15788  16CF                     u5410:	
 15789  16CF  3EFF               	addlw	-1
 15790  16D0  1D03               	skipz
 15791  16D1  2ECD               	goto	u5415
 15792                           
 15793                           ;RF_Control_B1.c: 493: setProductData(11, lights);
 15794  16D2  0869               	movf	setRF_DimmerLights@lights,w
 15795  16D3  00E6               	movwf	??_setRF_DimmerLights
 15796  16D4  0866               	movf	??_setRF_DimmerLights,w
 15797  16D5  00E2               	movwf	setProductData@value
 15798  16D6  300B               	movlw	11
 15799  16D7  319A  22F6  3196   	fcall	_setProductData
 15800                           
 15801                           ;RF_Control_B1.c: 494: setProductData(17, product->Data[26 + lights]);
 15802  16DA  0020               	movlb	0	; select bank0
 15803  16DB  0869               	movf	setRF_DimmerLights@lights,w
 15804  16DC  3E1A               	addlw	26
 15805  16DD  0021               	movlb	1	; select bank1
 15806  16DE  076E               	addwf	_product^(0+128),w
 15807  16DF  0020               	movlb	0	; select bank0
 15808  16E0  00E6               	movwf	??_setRF_DimmerLights
 15809  16E1  0866               	movf	??_setRF_DimmerLights,w
 15810  16E2  0086               	movwf	6
 15811  16E3  3001               	movlw	1	; select bank2/3
 15812  16E4  0087               	movwf	7
 15813  16E5  0801               	movf	1,w
 15814  16E6  00E7               	movwf	??_setRF_DimmerLights+1
 15815  16E7  0867               	movf	??_setRF_DimmerLights+1,w
 15816  16E8  00E2               	movwf	setProductData@value
 15817  16E9  3011               	movlw	17
 15818  16EA  319A  22F6  3196   	fcall	_setProductData
 15819                           
 15820                           ;RF_Control_B1.c: 495: if (on == 1) {
 15821  16ED  0020               	movlb	0	; select bank0
 15822  16EE  0865               	movf	setRF_DimmerLights@on,w
 15823  16EF  3A01               	xorlw	1
 15824  16F0  1D03               	skipz
 15825  16F1  2F14               	goto	l6285
 15826                           
 15827                           ;RF_Control_B1.c: 496: setProductData(9, product->Data[20 + lights]);
 15828  16F2  0869               	movf	setRF_DimmerLights@lights,w
 15829  16F3  3E14               	addlw	20
 15830  16F4  0021               	movlb	1	; select bank1
 15831  16F5  076E               	addwf	_product^(0+128),w
 15832  16F6  0020               	movlb	0	; select bank0
 15833  16F7  00E6               	movwf	??_setRF_DimmerLights
 15834  16F8  0866               	movf	??_setRF_DimmerLights,w
 15835  16F9  0086               	movwf	6
 15836  16FA  3001               	movlw	1	; select bank2/3
 15837  16FB  0087               	movwf	7
 15838  16FC  0801               	movf	1,w
 15839  16FD  00E7               	movwf	??_setRF_DimmerLights+1
 15840  16FE  0867               	movf	??_setRF_DimmerLights+1,w
 15841  16FF  00E2               	movwf	setProductData@value
 15842  1700  3009               	movlw	9
 15843  1701  319A  22F6  3196   	fcall	_setProductData
 15844                           
 15845                           ;RF_Control_B1.c: 497: setProductData(15, (product->Data[15] | status));
 15846  1704  0021               	movlb	1	; select bank1
 15847  1705  086E               	movf	_product^(0+128),w
 15848  1706  3E0F               	addlw	15
 15849  1707  0086               	movwf	6
 15850  1708  3001               	movlw	1	; select bank2/3
 15851  1709  0087               	movwf	7
 15852  170A  0801               	movf	1,w
 15853  170B  0020               	movlb	0	; select bank0
 15854  170C  0468               	iorwf	setRF_DimmerLights@status,w
 15855  170D  00E6               	movwf	??_setRF_DimmerLights
 15856  170E  0866               	movf	??_setRF_DimmerLights,w
 15857  170F  00E2               	movwf	setProductData@value
 15858  1710  300F               	movlw	15
 15859  1711  319A  22F6         	fcall	_setProductData
 15860                           
 15861                           ;RF_Control_B1.c: 498: } else {
 15862  1713  0008               	return
 15863  1714                     l6285:	
 15864                           
 15865                           ;RF_Control_B1.c: 499: setProductData(9, 0x00);
 15866  1714  0020               	movlb	0	; select bank0
 15867  1715  01E2               	clrf	setProductData@value
 15868  1716  3009               	movlw	9
 15869  1717  319A  22F6  3196   	fcall	_setProductData
 15870                           
 15871                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 15872  171A  0021               	movlb	1	; select bank1
 15873  171B  086E               	movf	_product^(0+128),w
 15874  171C  3E0F               	addlw	15
 15875  171D  0086               	movwf	6
 15876  171E  3001               	movlw	1	; select bank2/3
 15877  171F  0087               	movwf	7
 15878  1720  0020               	movlb	0	; select bank0
 15879  1721  0968               	comf	setRF_DimmerLights@status,w
 15880  1722  0501               	andwf	1,w
 15881  1723  00E6               	movwf	??_setRF_DimmerLights
 15882  1724  0866               	movf	??_setRF_DimmerLights,w
 15883  1725  00E2               	movwf	setProductData@value
 15884  1726  300F               	movlw	15
 15885  1727  319A  22F6         	fcall	_setProductData
 15886  1729  0008               	return
 15887  172A                     __end_of_setRF_DimmerLights:	
 15888                           
 15889                           	psect	text106
 15890  1BC9                     __ptext106:	
 15891 ;; *************** function _setDimmerLights_Line *****************
 15892 ;; Defined at:
 15893 ;;		line 1029 in file "../src/Dimmer_B1.c"
 15894 ;; Parameters:    Size  Location     Type
 15895 ;;  lights          1    wreg     unsigned char 
 15896 ;; Auto vars:     Size  Location     Type
 15897 ;;  lights          1    0[BANK0 ] unsigned char 
 15898 ;; Return value:  Size  Location     Type
 15899 ;;		None               void
 15900 ;; Registers used:
 15901 ;;		wreg
 15902 ;; Tracked objects:
 15903 ;;		On entry : 0/0
 15904 ;;		On exit  : 0/0
 15905 ;;		Unchanged: 0/0
 15906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;Total ram usage:        1 bytes
 15912 ;; Hardware stack levels used:    1
 15913 ;; Hardware stack levels required when called:    5
 15914 ;; This function calls:
 15915 ;;		Nothing
 15916 ;; This function is called by:
 15917 ;;		_setDimmerLights_OnOff
 15918 ;;		_setDimmerLights_Dimming
 15919 ;; This function uses a non-reentrant model
 15920 ;;
 15921                           
 15922                           
 15923                           ;psect for function _setDimmerLights_Line
 15924  1BC9                     _setDimmerLights_Line:	
 15925                           
 15926                           ;incstack = 0
 15927                           ; Regs used in _setDimmerLights_Line: [wreg]
 15928                           ;setDimmerLights_Line@lights stored from wreg
 15929  1BC9  0020               	movlb	0	; select bank0
 15930  1BCA  00A0               	movwf	setDimmerLights_Line@lights
 15931                           
 15932                           ;Dimmer_B1.c: 1030: Dimmer.LoadGO = 1;
 15933  1BCB  0022               	movlb	2	; select bank2
 15934  1BCC  14AC               	bsf	_Dimmer^(0+256),1
 15935                           
 15936                           ;Dimmer_B1.c: 1032: DimmerLights1.Line = 0;
 15937  1BCD  10E1               	bcf	(_DimmerLights1^(0+256)+1),1
 15938                           
 15939                           ;Dimmer_B1.c: 1033: if (lights == 1 && lights != 0) {
 15940  1BCE  0020               	movlb	0	; select bank0
 15941  1BCF  0820               	movf	setDimmerLights_Line@lights,w
 15942  1BD0  3A01               	xorlw	1
 15943  1BD1  1D03               	skipz
 15944  1BD2  0008               	return
 15945  1BD3  0820               	movf	setDimmerLights_Line@lights,w
 15946  1BD4  1903               	btfsc	3,2
 15947  1BD5  0008               	return
 15948                           
 15949                           ;Dimmer_B1.c: 1034: DimmerLights1.Line = 1;
 15950  1BD6  0022               	movlb	2	; select bank2
 15951  1BD7  14E1               	bsf	(_DimmerLights1^(0+256)+1),1
 15952  1BD8  0020               	movlb	0	; select bank0
 15953  1BD9  0008               	return
 15954  1BDA                     __end_of_setDimmerLights_Line:	
 15955                           
 15956                           	psect	text107
 15957  1B02                     __ptext107:	
 15958 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15959 ;; Defined at:
 15960 ;;		line 133 in file "../src/Dimmer_B1.c"
 15961 ;; Parameters:    Size  Location     Type
 15962 ;;  lights          1    wreg     unsigned char 
 15963 ;;  value           1   66[BANK0 ] unsigned char 
 15964 ;; Auto vars:     Size  Location     Type
 15965 ;;  lights          1   68[BANK0 ] unsigned char 
 15966 ;; Return value:  Size  Location     Type
 15967 ;;		None               void
 15968 ;; Registers used:
 15969 ;;		wreg
 15970 ;; Tracked objects:
 15971 ;;		On entry : 0/0
 15972 ;;		On exit  : 0/0
 15973 ;;		Unchanged: 0/0
 15974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15975 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;Total ram usage:        3 bytes
 15980 ;; Hardware stack levels used:    1
 15981 ;; Hardware stack levels required when called:    5
 15982 ;; This function calls:
 15983 ;;		Nothing
 15984 ;; This function is called by:
 15985 ;;		_setDimmerLights_OnOff
 15986 ;;		_setDimmerLights_Dimming
 15987 ;;		_setRFSW_AdjControl
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           
 15992                           ;psect for function _setDimmerIntr_MaxmumValue
 15993  1B02                     _setDimmerIntr_MaxmumValue:	
 15994                           
 15995                           ;incstack = 0
 15996                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15997                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15998  1B02  0020               	movlb	0	; select bank0
 15999  1B03  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16000                           
 16001                           ;Dimmer_B1.c: 135: if (lights == 1) {
 16002  1B04  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16003  1B05  3A01               	xorlw	1
 16004  1B06  1D03               	skipz
 16005  1B07  0008               	return
 16006                           
 16007                           ;Dimmer_B1.c: 136: DimmerIntr1.MaxmumValue = value;
 16008  1B08  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16009  1B09  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16010  1B0A  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16011  1B0B  0021               	movlb	1	; select bank1
 16012  1B0C  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16013  1B0D  0008               	return
 16014  1B0E                     __end_of_setDimmerIntr_MaxmumValue:	
 16015                           
 16016                           	psect	text108
 16017  1D66                     __ptext108:	
 16018 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16019 ;; Defined at:
 16020 ;;		line 210 in file "../src/Dimmer_B1.c"
 16021 ;; Parameters:    Size  Location     Type
 16022 ;;  lights          1    wreg     unsigned char 
 16023 ;;  command         1    0[BANK0 ] unsigned char 
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;  lights          1    2[BANK0 ] unsigned char 
 16026 ;; Return value:  Size  Location     Type
 16027 ;;		None               void
 16028 ;; Registers used:
 16029 ;;		wreg, status,2, status,0
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16035 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;Total ram usage:        3 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:    5
 16042 ;; This function calls:
 16043 ;;		Nothing
 16044 ;; This function is called by:
 16045 ;;		_setDimmerLights_Dimming
 16046 ;; This function uses a non-reentrant model
 16047 ;;
 16048                           
 16049                           
 16050                           ;psect for function _setDimmerIntr_Dimming_Sw
 16051  1D66                     _setDimmerIntr_Dimming_Sw:	
 16052                           
 16053                           ;incstack = 0
 16054                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16055                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16056  1D66  0020               	movlb	0	; select bank0
 16057  1D67  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16058                           
 16059                           ;Dimmer_B1.c: 212: if (lights == 1) {
 16060  1D68  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16061  1D69  3A01               	xorlw	1
 16062  1D6A  1D03               	skipz
 16063  1D6B  0008               	return
 16064                           
 16065                           ;Dimmer_B1.c: 213: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16066  1D6C  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16067  1D6D  3A01               	xorlw	1
 16068  1D6E  3000               	movlw	0
 16069  1D6F  1903               	skipnz
 16070  1D70  3001               	movlw	1
 16071  1D71  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16072  1D72  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16073  1D73  0021               	movlb	1	; select bank1
 16074  1D74  083C               	movf	_DimmerIntr1^(0+128),w
 16075  1D75  0020               	movlb	0	; select bank0
 16076  1D76  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16077  1D77  39EF               	andlw	-17
 16078  1D78  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16079  1D79  0021               	movlb	1	; select bank1
 16080  1D7A  00BC               	movwf	_DimmerIntr1^(0+128)
 16081  1D7B  0008               	return
 16082  1D7C                     __end_of_setDimmerIntr_Dimming_Sw:	
 16083                           
 16084                           	psect	text109
 16085  1B8A                     __ptext109:	
 16086 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16087 ;; Defined at:
 16088 ;;		line 111 in file "../src/Dimmer_B1.c"
 16089 ;; Parameters:    Size  Location     Type
 16090 ;;  lights          1    wreg     unsigned char 
 16091 ;; Auto vars:     Size  Location     Type
 16092 ;;  lights          1    1[BANK0 ] unsigned char 
 16093 ;;  value           1    2[BANK0 ] unsigned char 
 16094 ;; Return value:  Size  Location     Type
 16095 ;;                  1    wreg      unsigned char 
 16096 ;; Registers used:
 16097 ;;		wreg, status,2
 16098 ;; Tracked objects:
 16099 ;;		On entry : 0/0
 16100 ;;		On exit  : 0/0
 16101 ;;		Unchanged: 0/0
 16102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;Total ram usage:        3 bytes
 16108 ;; Hardware stack levels used:    1
 16109 ;; Hardware stack levels required when called:    5
 16110 ;; This function calls:
 16111 ;;		Nothing
 16112 ;; This function is called by:
 16113 ;;		_setDimmerLights_Dimming
 16114 ;; This function uses a non-reentrant model
 16115 ;;
 16116                           
 16117                           
 16118                           ;psect for function _getDimmerIntr_DimmingValue
 16119  1B8A                     _getDimmerIntr_DimmingValue:	
 16120                           
 16121                           ;incstack = 0
 16122                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16123                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16124  1B8A  0020               	movlb	0	; select bank0
 16125  1B8B  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16126                           
 16127                           ;Dimmer_B1.c: 112: char value = 0;
 16128  1B8C  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16129                           
 16130                           ;Dimmer_B1.c: 114: if (lights == 1) {
 16131  1B8D  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16132  1B8E  3A01               	xorlw	1
 16133  1B8F  1D03               	skipz
 16134  1B90  2B97               	goto	l689
 16135                           
 16136                           ;Dimmer_B1.c: 115: value = DimmerIntr1.DimmingValue;
 16137  1B91  0021               	movlb	1	; select bank1
 16138  1B92  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16139  1B93  0020               	movlb	0	; select bank0
 16140  1B94  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16141  1B95  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16142  1B96  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16143  1B97                     l689:	
 16144                           
 16145                           ;Dimmer_B1.c: 116: }
 16146                           ;Dimmer_B1.c: 128: return value;
 16147  1B97  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16148  1B98  0008               	return
 16149  1B99                     __end_of_getDimmerIntr_DimmingValue:	
 16150                           
 16151                           	psect	text110
 16152  1D50                     __ptext110:	
 16153 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16154 ;; Defined at:
 16155 ;;		line 990 in file "../src/Dimmer_B1.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;  lights          1    wreg     unsigned char 
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;  lights          1    0[COMMON] unsigned char 
 16160 ;;  allow           1    2[BANK0 ] unsigned char 
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  1    wreg      unsigned char 
 16163 ;; Registers used:
 16164 ;;		wreg, status,2, pclath, cstack
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;Total ram usage:        3 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    6
 16177 ;; This function calls:
 16178 ;;		_getLoad_OK
 16179 ;; This function is called by:
 16180 ;;		_setDimmerLights_Main
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           
 16185                           ;psect for function _getDimmerLights_Allow_Condition
 16186  1D50                     _getDimmerLights_Allow_Condition:	
 16187                           
 16188                           ;Dimmer_B1.c: 991: char allow = 0;
 16189                           
 16190                           ;incstack = 0
 16191                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16192  1D50  0020               	movlb	0	; select bank0
 16193  1D51  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16194                           
 16195                           ;Dimmer_B1.c: 997: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16196  1D52  01A3               	clrf	_getDimmerLights_Allow_Condition$2279
 16197  1D53  0AA3               	incf	_getDimmerLights_Allow_Condition$2279,f
 16198  1D54  319A  2275  319D   	fcall	_getLoad_OK
 16199  1D57  3800               	iorlw	0
 16200  1D58  1D03               	skipz
 16201  1D59  2D5F               	goto	l6921
 16202  1D5A  0022               	movlb	2	; select bank2
 16203  1D5B  18AC               	btfsc	_Dimmer^(0+256),1
 16204  1D5C  2D5F               	goto	l6921
 16205  1D5D  0020               	movlb	0	; select bank0
 16206  1D5E  01A3               	clrf	_getDimmerLights_Allow_Condition$2279
 16207  1D5F                     l6921:	
 16208  1D5F  0020               	movlb	0	; select bank0
 16209  1D60  0823               	movf	_getDimmerLights_Allow_Condition$2279,w
 16210  1D61  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16211  1D62  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16212  1D63  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16213                           
 16214                           ;Dimmer_B1.c: 1024: return allow;
 16215  1D64  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16216  1D65  0008               	return
 16217  1D66                     __end_of_getDimmerLights_Allow_Condition:	
 16218                           
 16219                           	psect	text111
 16220  1A75                     __ptext111:	
 16221 ;; *************** function _getLoad_OK *****************
 16222 ;; Defined at:
 16223 ;;		line 274 in file "../src/OverLoad_B1.c"
 16224 ;; Parameters:    Size  Location     Type
 16225 ;;		None
 16226 ;; Auto vars:     Size  Location     Type
 16227 ;;  ok              1    0[BANK0 ] unsigned char 
 16228 ;; Return value:  Size  Location     Type
 16229 ;;                  1    wreg      unsigned char 
 16230 ;; Registers used:
 16231 ;;		wreg, status,2
 16232 ;; Tracked objects:
 16233 ;;		On entry : 0/0
 16234 ;;		On exit  : 0/0
 16235 ;;		Unchanged: 0/0
 16236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16241 ;;Total ram usage:        1 bytes
 16242 ;; Hardware stack levels used:    1
 16243 ;; Hardware stack levels required when called:    5
 16244 ;; This function calls:
 16245 ;;		Nothing
 16246 ;; This function is called by:
 16247 ;;		_DimmerLights_Main
 16248 ;;		_getDimmerLights_Allow_Condition
 16249 ;; This function uses a non-reentrant model
 16250 ;;
 16251                           
 16252                           
 16253                           ;psect for function _getLoad_OK
 16254  1A75                     _getLoad_OK:	
 16255                           
 16256                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16257                           
 16258                           ;incstack = 0
 16259                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16260  1A75  3000               	movlw	0
 16261  1A76  0022               	movlb	2	; select bank2
 16262  1A77  1BB8               	btfsc	_Load^(0+256),7
 16263  1A78  3001               	movlw	1
 16264  1A79  0020               	movlb	0	; select bank0
 16265  1A7A  00A0               	movwf	getLoad_OK@ok
 16266                           
 16267                           ;OverLoad_B1.c: 276: return ok;
 16268  1A7B  0820               	movf	getLoad_OK@ok,w
 16269  1A7C  0008               	return
 16270  1A7D                     __end_of_getLoad_OK:	
 16271                           
 16272                           	psect	text112
 16273  1083                     __ptext112:	
 16274 ;; *************** function _getMain_All_Error_Status *****************
 16275 ;; Defined at:
 16276 ;;		line 424 in file "../src/Main_B1.c"
 16277 ;; Parameters:    Size  Location     Type
 16278 ;;  command         1    wreg     unsigned char 
 16279 ;; Auto vars:     Size  Location     Type
 16280 ;;  command         1    5[BANK0 ] unsigned char 
 16281 ;;  status          1    6[BANK0 ] unsigned char 
 16282 ;; Return value:  Size  Location     Type
 16283 ;;                  1    wreg      unsigned char 
 16284 ;; Registers used:
 16285 ;;		wreg, status,2, status,0
 16286 ;; Tracked objects:
 16287 ;;		On entry : 0/0
 16288 ;;		On exit  : 0/0
 16289 ;;		Unchanged: 0/0
 16290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;Total ram usage:        7 bytes
 16296 ;; Hardware stack levels used:    1
 16297 ;; Hardware stack levels required when called:    5
 16298 ;; This function calls:
 16299 ;;		Nothing
 16300 ;; This function is called by:
 16301 ;;		_DimmerLights_Main
 16302 ;;		_Exception_Main
 16303 ;;		_Load_Main
 16304 ;;		_setTemp_Main
 16305 ;;		_getRxData
 16306 ;;		_setSw_Main
 16307 ;; This function uses a non-reentrant model
 16308 ;;
 16309                           
 16310                           
 16311                           ;psect for function _getMain_All_Error_Status
 16312  1083                     _getMain_All_Error_Status:	
 16313                           
 16314                           ;incstack = 0
 16315                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16316                           ;getMain_All_Error_Status@command stored from wreg
 16317  1083  0020               	movlb	0	; select bank0
 16318  1084  00A5               	movwf	getMain_All_Error_Status@command
 16319                           
 16320                           ;Main_B1.c: 425: char status = 0;
 16321  1085  01A6               	clrf	getMain_All_Error_Status@status
 16322                           
 16323                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16324  1086  08A6               	movf	getMain_All_Error_Status@status,f
 16325  1087  1D03               	skipz
 16326  1088  289D               	goto	l6633
 16327  1089  0825               	movf	getMain_All_Error_Status@command,w
 16328  108A  3A02               	xorlw	2
 16329  108B  1903               	skipnz
 16330  108C  289D               	goto	l6633
 16331                           
 16332                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16333  108D  0021               	movlb	1	; select bank1
 16334  108E  18D8               	btfsc	_Temp^(0+128),1
 16335  108F  2894               	goto	l6631
 16336  1090  0020               	movlb	0	; select bank0
 16337  1091  01A1               	clrf	_getMain_All_Error_Status$3609
 16338  1092  01A2               	clrf	_getMain_All_Error_Status$3609+1
 16339  1093  2899               	goto	l1470
 16340  1094                     l6631:	
 16341  1094  3002               	movlw	2
 16342  1095  0020               	movlb	0	; select bank0
 16343  1096  00A1               	movwf	_getMain_All_Error_Status$3609
 16344  1097  3000               	movlw	0
 16345  1098  00A2               	movwf	_getMain_All_Error_Status$3609+1
 16346  1099                     l1470:	
 16347  1099  0821               	movf	_getMain_All_Error_Status$3609,w
 16348  109A  00A0               	movwf	??_getMain_All_Error_Status
 16349  109B  0820               	movf	??_getMain_All_Error_Status,w
 16350  109C  00A6               	movwf	getMain_All_Error_Status@status
 16351  109D                     l6633:	
 16352                           
 16353                           ;Main_B1.c: 438: }
 16354                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16355  109D  08A6               	movf	getMain_All_Error_Status@status,f
 16356  109E  1D03               	skipz
 16357  109F  28B4               	goto	l1471
 16358  10A0  0825               	movf	getMain_All_Error_Status@command,w
 16359  10A1  3A03               	xorlw	3
 16360  10A2  1903               	skipnz
 16361  10A3  28B4               	goto	l1471
 16362                           
 16363                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16364  10A4  0022               	movlb	2	; select bank2
 16365  10A5  1AB8               	btfsc	_Load^(0+256),5
 16366  10A6  28AB               	goto	l6641
 16367  10A7  0020               	movlb	0	; select bank0
 16368  10A8  01A3               	clrf	_getMain_All_Error_Status$3610
 16369  10A9  01A4               	clrf	_getMain_All_Error_Status$3610+1
 16370  10AA  28B0               	goto	l1475
 16371  10AB                     l6641:	
 16372  10AB  3003               	movlw	3
 16373  10AC  0020               	movlb	0	; select bank0
 16374  10AD  00A3               	movwf	_getMain_All_Error_Status$3610
 16375  10AE  3000               	movlw	0
 16376  10AF  00A4               	movwf	_getMain_All_Error_Status$3610+1
 16377  10B0                     l1475:	
 16378  10B0  0823               	movf	_getMain_All_Error_Status$3610,w
 16379  10B1  00A0               	movwf	??_getMain_All_Error_Status
 16380  10B2  0820               	movf	??_getMain_All_Error_Status,w
 16381  10B3  00A6               	movwf	getMain_All_Error_Status@status
 16382  10B4                     l1471:	
 16383                           
 16384                           ;Main_B1.c: 445: }
 16385                           ;Main_B1.c: 455: return status;
 16386  10B4  0826               	movf	getMain_All_Error_Status@status,w
 16387  10B5  0008               	return
 16388  10B6                     __end_of_getMain_All_Error_Status:	
 16389                           
 16390                           	psect	text113
 16391  1A60                     __ptext113:	
 16392 ;; *************** function _DimmerLights_Initialization *****************
 16393 ;; Defined at:
 16394 ;;		line 641 in file "../src/Dimmer_B1.c"
 16395 ;; Parameters:    Size  Location     Type
 16396 ;;		None
 16397 ;; Auto vars:     Size  Location     Type
 16398 ;;		None
 16399 ;; Return value:  Size  Location     Type
 16400 ;;		None               void
 16401 ;; Registers used:
 16402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16403 ;; Tracked objects:
 16404 ;;		On entry : 0/0
 16405 ;;		On exit  : 0/0
 16406 ;;		Unchanged: 0/0
 16407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;Total ram usage:        0 bytes
 16413 ;; Hardware stack levels used:    1
 16414 ;; Hardware stack levels required when called:    9
 16415 ;; This function calls:
 16416 ;;		_DimmerIntr_Initialization
 16417 ;;		_setDimmerLights_Initialization
 16418 ;; This function is called by:
 16419 ;;		_main
 16420 ;; This function uses a non-reentrant model
 16421 ;;
 16422                           
 16423                           
 16424                           ;psect for function _DimmerLights_Initialization
 16425  1A60                     _DimmerLights_Initialization:	
 16426                           
 16427                           ;Dimmer_B1.c: 643: setDimmerLights_Initialization(1);
 16428                           
 16429                           ;incstack = 0
 16430                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16431  1A60  3001               	movlw	1
 16432  1A61  319A  2216  319A   	fcall	_setDimmerLights_Initialization
 16433                           
 16434                           ;Dimmer_B1.c: 653: DimmerIntr_Initialization();
 16435  1A64  3194  24D9         	fcall	_DimmerIntr_Initialization
 16436  1A66  0008               	return
 16437  1A67                     __end_of_DimmerLights_Initialization:	
 16438                           
 16439                           	psect	text114
 16440  1A16                     __ptext114:	
 16441 ;; *************** function _setDimmerLights_Initialization *****************
 16442 ;; Defined at:
 16443 ;;		line 657 in file "../src/Dimmer_B1.c"
 16444 ;; Parameters:    Size  Location     Type
 16445 ;;  lights          1    wreg     unsigned char 
 16446 ;; Auto vars:     Size  Location     Type
 16447 ;;  lights          1    0[COMMON] unsigned char 
 16448 ;; Return value:  Size  Location     Type
 16449 ;;		None               void
 16450 ;; Registers used:
 16451 ;;		wreg
 16452 ;; Tracked objects:
 16453 ;;		On entry : 0/0
 16454 ;;		On exit  : 0/0
 16455 ;;		Unchanged: 0/0
 16456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;Total ram usage:        0 bytes
 16462 ;; Hardware stack levels used:    1
 16463 ;; Hardware stack levels required when called:    5
 16464 ;; This function calls:
 16465 ;;		Nothing
 16466 ;; This function is called by:
 16467 ;;		_DimmerLights_Initialization
 16468 ;; This function uses a non-reentrant model
 16469 ;;
 16470                           
 16471                           
 16472                           ;psect for function _setDimmerLights_Initialization
 16473  1A16                     _setDimmerLights_Initialization:	
 16474                           
 16475                           ;incstack = 0
 16476                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16477  1A16  0008               	return
 16478  1A17                     __end_of_setDimmerLights_Initialization:	
 16479                           
 16480                           	psect	text115
 16481  14D9                     __ptext115:	
 16482 ;; *************** function _DimmerIntr_Initialization *****************
 16483 ;; Defined at:
 16484 ;;		line 7 in file "../src/Dimmer_B1.c"
 16485 ;; Parameters:    Size  Location     Type
 16486 ;;		None
 16487 ;; Auto vars:     Size  Location     Type
 16488 ;;		None
 16489 ;; Return value:  Size  Location     Type
 16490 ;;		None               void
 16491 ;; Registers used:
 16492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;Total ram usage:        2 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    8
 16505 ;; This function calls:
 16506 ;;		_Division
 16507 ;;		_getDimmerLights_PercentToValue
 16508 ;;		_getDimmerLights_ValueToPercent
 16509 ;;		_setMemory_Modify
 16510 ;; This function is called by:
 16511 ;;		_DimmerLights_Initialization
 16512 ;; This function uses a non-reentrant model
 16513 ;;
 16514                           
 16515                           
 16516                           ;psect for function _DimmerIntr_Initialization
 16517  14D9                     _DimmerIntr_Initialization:	
 16518                           
 16519                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16520                           
 16521                           ;incstack = 0
 16522                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16523  14D9  3007               	movlw	7
 16524  14DA  0020               	movlb	0	; select bank0
 16525  14DB  00E2               	movwf	??_DimmerIntr_Initialization
 16526  14DC  0862               	movf	??_DimmerIntr_Initialization,w
 16527  14DD  0021               	movlb	1	; select bank1
 16528  14DE  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16529                           
 16530                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(84*0.6));
 16531  14DF  3032               	movlw	50
 16532  14E0  0020               	movlb	0	; select bank0
 16533  14E1  00E2               	movwf	??_DimmerIntr_Initialization
 16534  14E2  0862               	movf	??_DimmerIntr_Initialization,w
 16535  14E3  0021               	movlb	1	; select bank1
 16536  14E4  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16537                           
 16538                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16539  14E5  3006               	movlw	6
 16540  14E6  0020               	movlb	0	; select bank0
 16541  14E7  00E2               	movwf	??_DimmerIntr_Initialization
 16542  14E8  0862               	movf	??_DimmerIntr_Initialization,w
 16543  14E9  0021               	movlb	1	; select bank1
 16544  14EA  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16545                           
 16546                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16547  14EB  1E39               	btfss	(_myMain^(0+128)+10),4
 16548  14EC  2CFC               	goto	l676
 16549                           
 16550                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(84*0.6)));
 16551  14ED  3032               	movlw	50
 16552  14EE  3196  2660  3194   	fcall	_getDimmerLights_ValueToPercent
 16553  14F1  0020               	movlb	0	; select bank0
 16554  14F2  00E2               	movwf	??_DimmerIntr_Initialization
 16555  14F3  0021               	movlb	1	; select bank1
 16556  14F4  086E               	movf	_product^(0+128),w
 16557  14F5  3E15               	addlw	21
 16558  14F6  0086               	movwf	6
 16559  14F7  3001               	movlw	1	; select bank2/3
 16560  14F8  0087               	movwf	7
 16561  14F9  0020               	movlb	0	; select bank0
 16562  14FA  0862               	movf	??_DimmerIntr_Initialization,w
 16563  14FB  0081               	movwf	1
 16564  14FC                     l676:	
 16565                           
 16566                           ;Dimmer_B1.c: 18: }
 16567                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16568  14FC  0021               	movlb	1	; select bank1
 16569  14FD  086E               	movf	_product^(0+128),w
 16570  14FE  3E15               	addlw	21
 16571  14FF  0086               	movwf	6
 16572  1500  3001               	movlw	1	; select bank2/3
 16573  1501  0087               	movwf	7
 16574  1502  0801               	movf	1,w
 16575  1503  3195  25FB  3194   	fcall	_getDimmerLights_PercentToValue
 16576  1506  0020               	movlb	0	; select bank0
 16577  1507  00E2               	movwf	??_DimmerIntr_Initialization
 16578  1508  0862               	movf	??_DimmerIntr_Initialization,w
 16579  1509  0021               	movlb	1	; select bank1
 16580  150A  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16581                           
 16582                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue2 = Division(((char)(84*0.6)), 2);
 16583  150B  3002               	movlw	2
 16584  150C  0020               	movlb	0	; select bank0
 16585  150D  00E2               	movwf	??_DimmerIntr_Initialization
 16586  150E  0862               	movf	??_DimmerIntr_Initialization,w
 16587  150F  00A5               	movwf	Division@num
 16588  1510  3032               	movlw	50
 16589  1511  319B  237B  3194   	fcall	_Division
 16590  1514  0020               	movlb	0	; select bank0
 16591  1515  00E3               	movwf	??_DimmerIntr_Initialization+1
 16592  1516  0863               	movf	??_DimmerIntr_Initialization+1,w
 16593  1517  0021               	movlb	1	; select bank1
 16594  1518  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16595                           
 16596                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(84*0.6
      +                          )));
 16597  1519  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16598  151A  3E0A               	addlw	10
 16599  151B  0020               	movlb	0	; select bank0
 16600  151C  00E2               	movwf	??_DimmerIntr_Initialization
 16601  151D  0862               	movf	??_DimmerIntr_Initialization,w
 16602  151E  0021               	movlb	1	; select bank1
 16603  151F  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16604                           
 16605                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16606  1520  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16607  1521  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16608  1522  0020               	movlb	0	; select bank0
 16609  1523  00E2               	movwf	??_DimmerIntr_Initialization
 16610  1524  0862               	movf	??_DimmerIntr_Initialization,w
 16611  1525  0021               	movlb	1	; select bank1
 16612  1526  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16613                           
 16614                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16615  1527  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16616  1528  3E01               	addlw	1
 16617  1529  0020               	movlb	0	; select bank0
 16618  152A  00E2               	movwf	??_DimmerIntr_Initialization
 16619  152B  0862               	movf	??_DimmerIntr_Initialization,w
 16620  152C  0021               	movlb	1	; select bank1
 16621  152D  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16622                           
 16623                           ;Dimmer_B1.c: 67: if (myMain.InitDimmer == 1) {
 16624  152E  1E39               	btfss	(_myMain^(0+128)+10),4
 16625  152F  0008               	return
 16626                           
 16627                           ;Dimmer_B1.c: 68: myMain.InitDimmer = 0;
 16628  1530  1239               	bcf	(_myMain^(0+128)+10),4
 16629                           
 16630                           ;Dimmer_B1.c: 69: myMain.SaveDimmer = 1;
 16631  1531  16B9               	bsf	(_myMain^(0+128)+10),5
 16632                           
 16633                           ;Dimmer_B1.c: 70: setMemory_Modify(1);
 16634  1532  3001               	movlw	1
 16635  1533  319C  2489         	fcall	_setMemory_Modify
 16636  1535  0008               	return
 16637  1536                     __end_of_DimmerIntr_Initialization:	
 16638                           
 16639                           	psect	text116
 16640  1C89                     __ptext116:	
 16641 ;; *************** function _setMemory_Modify *****************
 16642 ;; Defined at:
 16643 ;;		line 1083 in file "../src/MCU_B1.c"
 16644 ;; Parameters:    Size  Location     Type
 16645 ;;  command         1    wreg     unsigned char 
 16646 ;; Auto vars:     Size  Location     Type
 16647 ;;  command         1    1[BANK0 ] unsigned char 
 16648 ;; Return value:  Size  Location     Type
 16649 ;;		None               void
 16650 ;; Registers used:
 16651 ;;		wreg, status,2, status,0
 16652 ;; Tracked objects:
 16653 ;;		On entry : 0/0
 16654 ;;		On exit  : 0/0
 16655 ;;		Unchanged: 0/0
 16656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;Total ram usage:        2 bytes
 16662 ;; Hardware stack levels used:    1
 16663 ;; Hardware stack levels required when called:    5
 16664 ;; This function calls:
 16665 ;;		Nothing
 16666 ;; This function is called by:
 16667 ;;		_DimmerIntr_Initialization
 16668 ;;		_setDimmerLights_Dimming
 16669 ;;		_setLog_Code
 16670 ;;		_setRFSW_AdjControl
 16671 ;; This function uses a non-reentrant model
 16672 ;;
 16673                           
 16674                           
 16675                           ;psect for function _setMemory_Modify
 16676  1C89                     _setMemory_Modify:	
 16677                           
 16678                           ;incstack = 0
 16679                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16680                           ;setMemory_Modify@command stored from wreg
 16681  1C89  0020               	movlb	0	; select bank0
 16682  1C8A  00A1               	movwf	setMemory_Modify@command
 16683                           
 16684                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16685  1C8B  0821               	movf	setMemory_Modify@command,w
 16686  1C8C  3A01               	xorlw	1
 16687  1C8D  3000               	movlw	0
 16688  1C8E  1903               	skipnz
 16689  1C8F  3001               	movlw	1
 16690  1C90  00A0               	movwf	??_setMemory_Modify
 16691  1C91  0024               	movlb	4	; select bank4
 16692  1C92  0844               	movf	(_Memory^(0+512)+36),w
 16693  1C93  0020               	movlb	0	; select bank0
 16694  1C94  0620               	xorwf	??_setMemory_Modify,w
 16695  1C95  39FE               	andlw	-2
 16696  1C96  0620               	xorwf	??_setMemory_Modify,w
 16697  1C97  0024               	movlb	4	; select bank4
 16698  1C98  00C4               	movwf	(_Memory^(0+512)+36)
 16699                           
 16700                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16701  1C99  01C2               	clrf	(_Memory^(0+512)+34)
 16702  1C9A  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16703  1C9B  0008               	return
 16704  1C9C                     __end_of_setMemory_Modify:	
 16705                           
 16706                           	psect	text117
 16707  1660                     __ptext117:	
 16708 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16709 ;; Defined at:
 16710 ;;		line 1129 in file "../src/Dimmer_B1.c"
 16711 ;; Parameters:    Size  Location     Type
 16712 ;;  value           1    wreg     unsigned char 
 16713 ;; Auto vars:     Size  Location     Type
 16714 ;;  value           1   62[BANK0 ] unsigned char 
 16715 ;;  i               3   63[BANK0 ] float 
 16716 ;; Return value:  Size  Location     Type
 16717 ;;                  1    wreg      unsigned char 
 16718 ;; Registers used:
 16719 ;;		wreg, status,2, status,0, pclath, cstack
 16720 ;; Tracked objects:
 16721 ;;		On entry : 0/0
 16722 ;;		On exit  : 0/0
 16723 ;;		Unchanged: 0/0
 16724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;Total ram usage:        6 bytes
 16730 ;; Hardware stack levels used:    1
 16731 ;; Hardware stack levels required when called:    7
 16732 ;; This function calls:
 16733 ;;		___awtoft
 16734 ;;		___ftadd
 16735 ;;		___ftdiv
 16736 ;;		___ftneg
 16737 ;;		___fttol
 16738 ;; This function is called by:
 16739 ;;		_DimmerIntr_Initialization
 16740 ;;		_setDimmerLights_Dimming
 16741 ;; This function uses a non-reentrant model
 16742 ;;
 16743                           
 16744                           
 16745                           ;psect for function _getDimmerLights_ValueToPercent
 16746  1660                     _getDimmerLights_ValueToPercent:	
 16747                           
 16748                           ;incstack = 0
 16749                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16750                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16751  1660  0020               	movlb	0	; select bank0
 16752  1661  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16753                           
 16754                           ;Dimmer_B1.c: 1137: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16755  1662  3000               	movlw	0
 16756  1663  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16757  1664  3030               	movlw	48
 16758  1665  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16759  1666  3042               	movlw	66
 16760  1667  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16761                           
 16762                           ;Dimmer_B1.c: 1138: i /= 100;
 16763  1668  3000               	movlw	0
 16764  1669  00AE               	movwf	___ftdiv@f2
 16765  166A  30C8               	movlw	200
 16766  166B  00AF               	movwf	___ftdiv@f2+1
 16767  166C  3042               	movlw	66
 16768  166D  00B0               	movwf	___ftdiv@f2+2
 16769  166E  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16770  166F  00B1               	movwf	___ftdiv@f1
 16771  1670  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16772  1671  00B2               	movwf	___ftdiv@f1+1
 16773  1672  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16774  1673  00B3               	movwf	___ftdiv@f1+2
 16775  1674  318D  2525  3196   	fcall	___ftdiv
 16776  1677  0020               	movlb	0	; select bank0
 16777  1678  082E               	movf	?___ftdiv,w
 16778  1679  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16779  167A  082F               	movf	?___ftdiv+1,w
 16780  167B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16781  167C  0830               	movf	?___ftdiv+2,w
 16782  167D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16783                           
 16784                           ;Dimmer_B1.c: 1140: return (char) (100 - ((((char)(84*0.6)) - value) / i));
 16785  167E  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16786  167F  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16787  1680  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16788  1681  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16789  1682  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16790  1683  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16791  1684  1903               	skipnz
 16792  1685  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16793  1686  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16794  1687  3E32               	addlw	50
 16795  1688  00A8               	movwf	___awtoft@c
 16796  1689  3000               	movlw	0
 16797  168A  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16798  168B  00A9               	movwf	___awtoft@c+1
 16799  168C  319F  2796  3196   	fcall	___awtoft
 16800  168F  0020               	movlb	0	; select bank0
 16801  1690  0828               	movf	?___awtoft,w
 16802  1691  00B1               	movwf	___ftdiv@f1
 16803  1692  0829               	movf	?___awtoft+1,w
 16804  1693  00B2               	movwf	___ftdiv@f1+1
 16805  1694  082A               	movf	?___awtoft+2,w
 16806  1695  00B3               	movwf	___ftdiv@f1+2
 16807  1696  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16808  1697  00AE               	movwf	___ftdiv@f2
 16809  1698  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16810  1699  00AF               	movwf	___ftdiv@f2+1
 16811  169A  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16812  169B  00B0               	movwf	___ftdiv@f2+2
 16813  169C  318D  2525  3196   	fcall	___ftdiv
 16814  169F  0020               	movlb	0	; select bank0
 16815  16A0  082E               	movf	?___ftdiv,w
 16816  16A1  00BE               	movwf	___ftneg@f1
 16817  16A2  082F               	movf	?___ftdiv+1,w
 16818  16A3  00BF               	movwf	___ftneg@f1+1
 16819  16A4  0830               	movf	?___ftdiv+2,w
 16820  16A5  00C0               	movwf	___ftneg@f1+2
 16821  16A6  319A  2296  3196   	fcall	___ftneg
 16822  16A9  0020               	movlb	0	; select bank0
 16823  16AA  083E               	movf	?___ftneg,w
 16824  16AB  00C4               	movwf	___ftadd@f2
 16825  16AC  083F               	movf	?___ftneg+1,w
 16826  16AD  00C5               	movwf	___ftadd@f2+1
 16827  16AE  0840               	movf	?___ftneg+2,w
 16828  16AF  00C6               	movwf	___ftadd@f2+2
 16829  16B0  3000               	movlw	0
 16830  16B1  00C1               	movwf	___ftadd@f1
 16831  16B2  30C8               	movlw	200
 16832  16B3  00C2               	movwf	___ftadd@f1+1
 16833  16B4  3042               	movlw	66
 16834  16B5  00C3               	movwf	___ftadd@f1+2
 16835  16B6  3183  2389  3196   	fcall	___ftadd
 16836  16B9  0020               	movlb	0	; select bank0
 16837  16BA  0841               	movf	?___ftadd,w
 16838  16BB  00CE               	movwf	___fttol@f1
 16839  16BC  0842               	movf	?___ftadd+1,w
 16840  16BD  00CF               	movwf	___fttol@f1+1
 16841  16BE  0843               	movf	?___ftadd+2,w
 16842  16BF  00D0               	movwf	___fttol@f1+2
 16843  16C0  318B  2385         	fcall	___fttol
 16844  16C2  0020               	movlb	0	; select bank0
 16845  16C3  084E               	movf	?___fttol,w
 16846  16C4  0008               	return
 16847  16C5                     __end_of_getDimmerLights_ValueToPercent:	
 16848                           
 16849                           	psect	text118
 16850  15FB                     __ptext118:	
 16851 ;; *************** function _getDimmerLights_PercentToValue *****************
 16852 ;; Defined at:
 16853 ;;		line 1113 in file "../src/Dimmer_B1.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  value           1    wreg     unsigned char 
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;  value           1   62[BANK0 ] unsigned char 
 16858 ;;  i               3   63[BANK0 ] float 
 16859 ;; Return value:  Size  Location     Type
 16860 ;;                  1    wreg      unsigned char 
 16861 ;; Registers used:
 16862 ;;		wreg, status,2, status,0, pclath, cstack
 16863 ;; Tracked objects:
 16864 ;;		On entry : 0/0
 16865 ;;		On exit  : 0/0
 16866 ;;		Unchanged: 0/0
 16867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;Total ram usage:        6 bytes
 16873 ;; Hardware stack levels used:    1
 16874 ;; Hardware stack levels required when called:    7
 16875 ;; This function calls:
 16876 ;;		___awtoft
 16877 ;;		___ftadd
 16878 ;;		___ftdiv
 16879 ;;		___ftmul
 16880 ;;		___ftneg
 16881 ;;		___fttol
 16882 ;; This function is called by:
 16883 ;;		_DimmerIntr_Initialization
 16884 ;;		_setDimmerLights_OnOff
 16885 ;;		_setRFSW_AdjControl
 16886 ;; This function uses a non-reentrant model
 16887 ;;
 16888                           
 16889                           
 16890                           ;psect for function _getDimmerLights_PercentToValue
 16891  15FB                     _getDimmerLights_PercentToValue:	
 16892                           
 16893                           ;incstack = 0
 16894                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16895                           ;getDimmerLights_PercentToValue@value stored from wreg
 16896  15FB  0020               	movlb	0	; select bank0
 16897  15FC  00DE               	movwf	getDimmerLights_PercentToValue@value
 16898                           
 16899                           ;Dimmer_B1.c: 1121: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16900  15FD  3000               	movlw	0
 16901  15FE  00DF               	movwf	getDimmerLights_PercentToValue@i
 16902  15FF  3030               	movlw	48
 16903  1600  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16904  1601  3042               	movlw	66
 16905  1602  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16906                           
 16907                           ;Dimmer_B1.c: 1122: i /= 100;
 16908  1603  3000               	movlw	0
 16909  1604  00AE               	movwf	___ftdiv@f2
 16910  1605  30C8               	movlw	200
 16911  1606  00AF               	movwf	___ftdiv@f2+1
 16912  1607  3042               	movlw	66
 16913  1608  00B0               	movwf	___ftdiv@f2+2
 16914  1609  085F               	movf	getDimmerLights_PercentToValue@i,w
 16915  160A  00B1               	movwf	___ftdiv@f1
 16916  160B  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16917  160C  00B2               	movwf	___ftdiv@f1+1
 16918  160D  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16919  160E  00B3               	movwf	___ftdiv@f1+2
 16920  160F  318D  2525  3195   	fcall	___ftdiv
 16921  1612  0020               	movlb	0	; select bank0
 16922  1613  082E               	movf	?___ftdiv,w
 16923  1614  00DF               	movwf	getDimmerLights_PercentToValue@i
 16924  1615  082F               	movf	?___ftdiv+1,w
 16925  1616  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16926  1617  0830               	movf	?___ftdiv+2,w
 16927  1618  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16928                           
 16929                           ;Dimmer_B1.c: 1124: return (char) (((char)(84*0.6)) - ((100 - value) * i));
 16930  1619  085E               	movf	getDimmerLights_PercentToValue@value,w
 16931  161A  00DC               	movwf	??_getDimmerLights_PercentToValue
 16932  161B  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16933  161C  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16934  161D  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16935  161E  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16936  161F  1903               	skipnz
 16937  1620  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16938  1621  085C               	movf	??_getDimmerLights_PercentToValue,w
 16939  1622  3E64               	addlw	100
 16940  1623  00A8               	movwf	___awtoft@c
 16941  1624  3000               	movlw	0
 16942  1625  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16943  1626  00A9               	movwf	___awtoft@c+1
 16944  1627  319F  2796  3195   	fcall	___awtoft
 16945  162A  0020               	movlb	0	; select bank0
 16946  162B  0828               	movf	?___awtoft,w
 16947  162C  00B1               	movwf	___ftmul@f2
 16948  162D  0829               	movf	?___awtoft+1,w
 16949  162E  00B2               	movwf	___ftmul@f2+1
 16950  162F  082A               	movf	?___awtoft+2,w
 16951  1630  00B3               	movwf	___ftmul@f2+2
 16952  1631  085F               	movf	getDimmerLights_PercentToValue@i,w
 16953  1632  00AE               	movwf	___ftmul@f1
 16954  1633  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16955  1634  00AF               	movwf	___ftmul@f1+1
 16956  1635  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16957  1636  00B0               	movwf	___ftmul@f1+2
 16958  1637  318D  25CE  3195   	fcall	___ftmul
 16959  163A  0020               	movlb	0	; select bank0
 16960  163B  082E               	movf	?___ftmul,w
 16961  163C  00BE               	movwf	___ftneg@f1
 16962  163D  082F               	movf	?___ftmul+1,w
 16963  163E  00BF               	movwf	___ftneg@f1+1
 16964  163F  0830               	movf	?___ftmul+2,w
 16965  1640  00C0               	movwf	___ftneg@f1+2
 16966  1641  319A  2296  3195   	fcall	___ftneg
 16967  1644  0020               	movlb	0	; select bank0
 16968  1645  083E               	movf	?___ftneg,w
 16969  1646  00C4               	movwf	___ftadd@f2
 16970  1647  083F               	movf	?___ftneg+1,w
 16971  1648  00C5               	movwf	___ftadd@f2+1
 16972  1649  0840               	movf	?___ftneg+2,w
 16973  164A  00C6               	movwf	___ftadd@f2+2
 16974  164B  3000               	movlw	0
 16975  164C  00C1               	movwf	___ftadd@f1
 16976  164D  3048               	movlw	72
 16977  164E  00C2               	movwf	___ftadd@f1+1
 16978  164F  3042               	movlw	66
 16979  1650  00C3               	movwf	___ftadd@f1+2
 16980  1651  3183  2389  3195   	fcall	___ftadd
 16981  1654  0020               	movlb	0	; select bank0
 16982  1655  0841               	movf	?___ftadd,w
 16983  1656  00CE               	movwf	___fttol@f1
 16984  1657  0842               	movf	?___ftadd+1,w
 16985  1658  00CF               	movwf	___fttol@f1+1
 16986  1659  0843               	movf	?___ftadd+2,w
 16987  165A  00D0               	movwf	___fttol@f1+2
 16988  165B  318B  2385         	fcall	___fttol
 16989  165D  0020               	movlb	0	; select bank0
 16990  165E  084E               	movf	?___fttol,w
 16991  165F  0008               	return
 16992  1660                     __end_of_getDimmerLights_PercentToValue:	
 16993                           
 16994                           	psect	text119
 16995  0B85                     __ptext119:	
 16996 ;; *************** function ___fttol *****************
 16997 ;; Defined at:
 16998 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16999 ;; Parameters:    Size  Location     Type
 17000 ;;  f1              3   46[BANK0 ] float 
 17001 ;; Auto vars:     Size  Location     Type
 17002 ;;  lval            4   55[BANK0 ] unsigned long 
 17003 ;;  exp1            1   59[BANK0 ] unsigned char 
 17004 ;;  sign1           1   54[BANK0 ] unsigned char 
 17005 ;; Return value:  Size  Location     Type
 17006 ;;                  4   46[BANK0 ] long 
 17007 ;; Registers used:
 17008 ;;		wreg, status,2, status,0
 17009 ;; Tracked objects:
 17010 ;;		On entry : 0/0
 17011 ;;		On exit  : 0/0
 17012 ;;		Unchanged: 0/0
 17013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17014 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17015 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17016 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17017 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17018 ;;Total ram usage:       14 bytes
 17019 ;; Hardware stack levels used:    1
 17020 ;; Hardware stack levels required when called:    5
 17021 ;; This function calls:
 17022 ;;		Nothing
 17023 ;; This function is called by:
 17024 ;;		_getDimmerLights_PercentToValue
 17025 ;;		_getDimmerLights_ValueToPercent
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           
 17030                           ;psect for function ___fttol
 17031  0B85                     ___fttol:	
 17032                           
 17033                           ;incstack = 0
 17034                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17035  0B85  0020               	movlb	0	; select bank0
 17036  0B86  084E               	movf	___fttol@f1,w
 17037  0B87  00D2               	movwf	??___fttol
 17038  0B88  084F               	movf	___fttol@f1+1,w
 17039  0B89  00D3               	movwf	??___fttol+1
 17040  0B8A  0850               	movf	___fttol@f1+2,w
 17041  0B8B  00D4               	movwf	??___fttol+2
 17042  0B8C  1003               	clrc
 17043  0B8D  0D53               	rlf	??___fttol+1,w
 17044  0B8E  0D54               	rlf	??___fttol+2,w
 17045  0B8F  00D5               	movwf	??___fttol+3
 17046  0B90  0855               	movf	??___fttol+3,w
 17047  0B91  00DB               	movwf	___fttol@exp1
 17048  0B92  08DB               	movf	___fttol@exp1,f
 17049  0B93  1D03               	skipz
 17050  0B94  2B9E               	goto	l6117
 17051  0B95  3000               	movlw	0
 17052  0B96  00D1               	movwf	?___fttol+3
 17053  0B97  3000               	movlw	0
 17054  0B98  00D0               	movwf	?___fttol+2
 17055  0B99  3000               	movlw	0
 17056  0B9A  00CF               	movwf	?___fttol+1
 17057  0B9B  3000               	movlw	0
 17058  0B9C  00CE               	movwf	?___fttol
 17059  0B9D  0008               	return
 17060  0B9E                     l6117:	
 17061  0B9E  084E               	movf	___fttol@f1,w
 17062  0B9F  00D2               	movwf	??___fttol
 17063  0BA0  084F               	movf	___fttol@f1+1,w
 17064  0BA1  00D3               	movwf	??___fttol+1
 17065  0BA2  0850               	movf	___fttol@f1+2,w
 17066  0BA3  00D4               	movwf	??___fttol+2
 17067  0BA4  3017               	movlw	23
 17068  0BA5                     u5155:	
 17069  0BA5  36D4               	lsrf	??___fttol+2,f
 17070  0BA6  0CD3               	rrf	??___fttol+1,f
 17071  0BA7  0CD2               	rrf	??___fttol,f
 17072  0BA8  0B89               	decfsz	9,f
 17073  0BA9  2BA5               	goto	u5155
 17074  0BAA  0852               	movf	??___fttol,w
 17075  0BAB  00D5               	movwf	??___fttol+3
 17076  0BAC  0855               	movf	??___fttol+3,w
 17077  0BAD  00D6               	movwf	___fttol@sign1
 17078  0BAE  17CF               	bsf	___fttol@f1+1,7
 17079  0BAF  30FF               	movlw	255
 17080  0BB0  05CE               	andwf	___fttol@f1,f
 17081  0BB1  30FF               	movlw	255
 17082  0BB2  05CF               	andwf	___fttol@f1+1,f
 17083  0BB3  3000               	movlw	0
 17084  0BB4  05D0               	andwf	___fttol@f1+2,f
 17085  0BB5  084E               	movf	___fttol@f1,w
 17086  0BB6  00D7               	movwf	___fttol@lval
 17087  0BB7  084F               	movf	___fttol@f1+1,w
 17088  0BB8  00D8               	movwf	___fttol@lval+1
 17089  0BB9  0850               	movf	___fttol@f1+2,w
 17090  0BBA  00D9               	movwf	___fttol@lval+2
 17091  0BBB  01DA               	clrf	___fttol@lval+3
 17092  0BBC  308E               	movlw	142
 17093  0BBD  02DB               	subwf	___fttol@exp1,f
 17094  0BBE  1FDB               	btfss	___fttol@exp1,7
 17095  0BBF  2BDC               	goto	l6137
 17096  0BC0  085B               	movf	___fttol@exp1,w
 17097  0BC1  3A80               	xorlw	128
 17098  0BC2  3E8F               	addlw	143
 17099  0BC3  1803               	skipnc
 17100  0BC4  2BCE               	goto	l6135
 17101  0BC5  3000               	movlw	0
 17102  0BC6  00D1               	movwf	?___fttol+3
 17103  0BC7  3000               	movlw	0
 17104  0BC8  00D0               	movwf	?___fttol+2
 17105  0BC9  3000               	movlw	0
 17106  0BCA  00CF               	movwf	?___fttol+1
 17107  0BCB  3000               	movlw	0
 17108  0BCC  00CE               	movwf	?___fttol
 17109  0BCD  0008               	return
 17110  0BCE                     l6135:	
 17111  0BCE  3001               	movlw	1
 17112  0BCF                     u5185:	
 17113  0BCF  36DA               	lsrf	___fttol@lval+3,f
 17114  0BD0  0CD9               	rrf	___fttol@lval+2,f
 17115  0BD1  0CD8               	rrf	___fttol@lval+1,f
 17116  0BD2  0CD7               	rrf	___fttol@lval,f
 17117  0BD3  0B89               	decfsz	9,f
 17118  0BD4  2BCF               	goto	u5185
 17119  0BD5  3001               	movlw	1
 17120  0BD6  00D2               	movwf	??___fttol
 17121  0BD7  0852               	movf	??___fttol,w
 17122  0BD8  07DB               	addwf	___fttol@exp1,f
 17123  0BD9  1903               	btfsc	3,2
 17124  0BDA  2BF5               	goto	l6147
 17125  0BDB  2BCE               	goto	l6135
 17126  0BDC                     l6137:	
 17127  0BDC  3018               	movlw	24
 17128  0BDD  025B               	subwf	___fttol@exp1,w
 17129  0BDE  1C03               	skipc
 17130  0BDF  2BF2               	goto	l6145
 17131  0BE0  3000               	movlw	0
 17132  0BE1  00D1               	movwf	?___fttol+3
 17133  0BE2  3000               	movlw	0
 17134  0BE3  00D0               	movwf	?___fttol+2
 17135  0BE4  3000               	movlw	0
 17136  0BE5  00CF               	movwf	?___fttol+1
 17137  0BE6  3000               	movlw	0
 17138  0BE7  00CE               	movwf	?___fttol
 17139  0BE8  0008               	return
 17140  0BE9                     l6143:	
 17141  0BE9  3001               	movlw	1
 17142  0BEA                     u5215:	
 17143  0BEA  35D7               	lslf	___fttol@lval,f
 17144  0BEB  0DD8               	rlf	___fttol@lval+1,f
 17145  0BEC  0DD9               	rlf	___fttol@lval+2,f
 17146  0BED  0DDA               	rlf	___fttol@lval+3,f
 17147  0BEE  0B89               	decfsz	9,f
 17148  0BEF  2BEA               	goto	u5215
 17149  0BF0  3001               	movlw	1
 17150  0BF1  02DB               	subwf	___fttol@exp1,f
 17151  0BF2                     l6145:	
 17152  0BF2  08DB               	movf	___fttol@exp1,f
 17153  0BF3  1D03               	skipz
 17154  0BF4  2BE9               	goto	l6143
 17155  0BF5                     l6147:	
 17156  0BF5  0856               	movf	___fttol@sign1,w
 17157  0BF6  1903               	btfsc	3,2
 17158  0BF7  2C03               	goto	l6151
 17159  0BF8  09D7               	comf	___fttol@lval,f
 17160  0BF9  09D8               	comf	___fttol@lval+1,f
 17161  0BFA  09D9               	comf	___fttol@lval+2,f
 17162  0BFB  09DA               	comf	___fttol@lval+3,f
 17163  0BFC  0AD7               	incf	___fttol@lval,f
 17164  0BFD  1903               	skipnz
 17165  0BFE  0AD8               	incf	___fttol@lval+1,f
 17166  0BFF  1903               	skipnz
 17167  0C00  0AD9               	incf	___fttol@lval+2,f
 17168  0C01  1903               	skipnz
 17169  0C02  0ADA               	incf	___fttol@lval+3,f
 17170  0C03                     l6151:	
 17171  0C03  085A               	movf	___fttol@lval+3,w
 17172  0C04  00D1               	movwf	?___fttol+3
 17173  0C05  0859               	movf	___fttol@lval+2,w
 17174  0C06  00D0               	movwf	?___fttol+2
 17175  0C07  0858               	movf	___fttol@lval+1,w
 17176  0C08  00CF               	movwf	?___fttol+1
 17177  0C09  0857               	movf	___fttol@lval,w
 17178  0C0A  00CE               	movwf	?___fttol
 17179  0C0B  0008               	return
 17180  0C0C                     __end_of___fttol:	
 17181                           
 17182                           	psect	text120
 17183  1A96                     __ptext120:	
 17184 ;; *************** function ___ftneg *****************
 17185 ;; Defined at:
 17186 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17187 ;; Parameters:    Size  Location     Type
 17188 ;;  f1              3   30[BANK0 ] float 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;		None
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  3   30[BANK0 ] float 
 17193 ;; Registers used:
 17194 ;;		wreg
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17200 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;Total ram usage:        3 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; Hardware stack levels required when called:    5
 17207 ;; This function calls:
 17208 ;;		Nothing
 17209 ;; This function is called by:
 17210 ;;		_getDimmerLights_PercentToValue
 17211 ;;		_getDimmerLights_ValueToPercent
 17212 ;; This function uses a non-reentrant model
 17213 ;;
 17214                           
 17215                           
 17216                           ;psect for function ___ftneg
 17217  1A96                     ___ftneg:	
 17218                           
 17219                           ;incstack = 0
 17220                           ; Regs used in ___ftneg: [wreg]
 17221  1A96  0020               	movlb	0	; select bank0
 17222  1A97  0840               	movf	___ftneg@f1+2,w
 17223  1A98  043F               	iorwf	___ftneg@f1+1,w
 17224  1A99  043E               	iorwf	___ftneg@f1,w
 17225  1A9A  1903               	skipnz
 17226  1A9B  0008               	return
 17227  1A9C  3080               	movlw	128
 17228  1A9D  06C0               	xorwf	___ftneg@f1+2,f
 17229  1A9E  0008               	return
 17230  1A9F                     __end_of___ftneg:	
 17231                           
 17232                           	psect	text121
 17233  0DCE                     __ptext121:	
 17234 ;; *************** function ___ftmul *****************
 17235 ;; Defined at:
 17236 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17237 ;; Parameters:    Size  Location     Type
 17238 ;;  f1              3   14[BANK0 ] float 
 17239 ;;  f2              3   17[BANK0 ] float 
 17240 ;; Auto vars:     Size  Location     Type
 17241 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17242 ;;  sign            1   29[BANK0 ] unsigned char 
 17243 ;;  cntr            1   28[BANK0 ] unsigned char 
 17244 ;;  exp             1   24[BANK0 ] unsigned char 
 17245 ;; Return value:  Size  Location     Type
 17246 ;;                  3   14[BANK0 ] float 
 17247 ;; Registers used:
 17248 ;;		wreg, status,2, status,0, pclath, cstack
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17254 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17255 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17257 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;Total ram usage:       16 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; Hardware stack levels required when called:    6
 17261 ;; This function calls:
 17262 ;;		___ftpack
 17263 ;; This function is called by:
 17264 ;;		_getDimmerLights_PercentToValue
 17265 ;; This function uses a non-reentrant model
 17266 ;;
 17267                           
 17268                           
 17269                           ;psect for function ___ftmul
 17270  0DCE                     ___ftmul:	
 17271                           
 17272                           ;incstack = 0
 17273                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17274  0DCE  0020               	movlb	0	; select bank0
 17275  0DCF  082E               	movf	___ftmul@f1,w
 17276  0DD0  00B4               	movwf	??___ftmul
 17277  0DD1  082F               	movf	___ftmul@f1+1,w
 17278  0DD2  00B5               	movwf	??___ftmul+1
 17279  0DD3  0830               	movf	___ftmul@f1+2,w
 17280  0DD4  00B6               	movwf	??___ftmul+2
 17281  0DD5  1003               	clrc
 17282  0DD6  0D35               	rlf	??___ftmul+1,w
 17283  0DD7  0D36               	rlf	??___ftmul+2,w
 17284  0DD8  00B7               	movwf	??___ftmul+3
 17285  0DD9  0837               	movf	??___ftmul+3,w
 17286  0DDA  00B8               	movwf	___ftmul@exp
 17287  0DDB  08B8               	movf	___ftmul@exp,f
 17288  0DDC  1D03               	skipz
 17289  0DDD  2DE5               	goto	l6059
 17290  0DDE  3000               	movlw	0
 17291  0DDF  00AE               	movwf	?___ftmul
 17292  0DE0  3000               	movlw	0
 17293  0DE1  00AF               	movwf	?___ftmul+1
 17294  0DE2  3000               	movlw	0
 17295  0DE3  00B0               	movwf	?___ftmul+2
 17296  0DE4  0008               	return
 17297  0DE5                     l6059:	
 17298  0DE5  0831               	movf	___ftmul@f2,w
 17299  0DE6  00B4               	movwf	??___ftmul
 17300  0DE7  0832               	movf	___ftmul@f2+1,w
 17301  0DE8  00B5               	movwf	??___ftmul+1
 17302  0DE9  0833               	movf	___ftmul@f2+2,w
 17303  0DEA  00B6               	movwf	??___ftmul+2
 17304  0DEB  1003               	clrc
 17305  0DEC  0D35               	rlf	??___ftmul+1,w
 17306  0DED  0D36               	rlf	??___ftmul+2,w
 17307  0DEE  00B7               	movwf	??___ftmul+3
 17308  0DEF  0837               	movf	??___ftmul+3,w
 17309  0DF0  00BD               	movwf	___ftmul@sign
 17310  0DF1  08BD               	movf	___ftmul@sign,f
 17311  0DF2  1D03               	skipz
 17312  0DF3  2DFB               	goto	l6065
 17313  0DF4  3000               	movlw	0
 17314  0DF5  00AE               	movwf	?___ftmul
 17315  0DF6  3000               	movlw	0
 17316  0DF7  00AF               	movwf	?___ftmul+1
 17317  0DF8  3000               	movlw	0
 17318  0DF9  00B0               	movwf	?___ftmul+2
 17319  0DFA  0008               	return
 17320  0DFB                     l6065:	
 17321  0DFB  083D               	movf	___ftmul@sign,w
 17322  0DFC  3E7B               	addlw	123
 17323  0DFD  00B4               	movwf	??___ftmul
 17324  0DFE  0834               	movf	??___ftmul,w
 17325  0DFF  07B8               	addwf	___ftmul@exp,f
 17326  0E00  082E               	movf	___ftmul@f1,w
 17327  0E01  00B4               	movwf	??___ftmul
 17328  0E02  082F               	movf	___ftmul@f1+1,w
 17329  0E03  00B5               	movwf	??___ftmul+1
 17330  0E04  0830               	movf	___ftmul@f1+2,w
 17331  0E05  00B6               	movwf	??___ftmul+2
 17332  0E06  3010               	movlw	16
 17333  0E07                     u5035:	
 17334  0E07  36B6               	lsrf	??___ftmul+2,f
 17335  0E08  0CB5               	rrf	??___ftmul+1,f
 17336  0E09  0CB4               	rrf	??___ftmul,f
 17337  0E0A  0B89               	decfsz	9,f
 17338  0E0B  2E07               	goto	u5035
 17339  0E0C  0834               	movf	??___ftmul,w
 17340  0E0D  00B7               	movwf	??___ftmul+3
 17341  0E0E  0837               	movf	??___ftmul+3,w
 17342  0E0F  00BD               	movwf	___ftmul@sign
 17343  0E10  0831               	movf	___ftmul@f2,w
 17344  0E11  00B4               	movwf	??___ftmul
 17345  0E12  0832               	movf	___ftmul@f2+1,w
 17346  0E13  00B5               	movwf	??___ftmul+1
 17347  0E14  0833               	movf	___ftmul@f2+2,w
 17348  0E15  00B6               	movwf	??___ftmul+2
 17349  0E16  3010               	movlw	16
 17350  0E17                     u5045:	
 17351  0E17  36B6               	lsrf	??___ftmul+2,f
 17352  0E18  0CB5               	rrf	??___ftmul+1,f
 17353  0E19  0CB4               	rrf	??___ftmul,f
 17354  0E1A  0B89               	decfsz	9,f
 17355  0E1B  2E17               	goto	u5045
 17356  0E1C  0834               	movf	??___ftmul,w
 17357  0E1D  00B7               	movwf	??___ftmul+3
 17358  0E1E  0837               	movf	??___ftmul+3,w
 17359  0E1F  06BD               	xorwf	___ftmul@sign,f
 17360  0E20  3080               	movlw	128
 17361  0E21  00B4               	movwf	??___ftmul
 17362  0E22  0834               	movf	??___ftmul,w
 17363  0E23  05BD               	andwf	___ftmul@sign,f
 17364  0E24  17AF               	bsf	___ftmul@f1+1,7
 17365  0E25  17B2               	bsf	___ftmul@f2+1,7
 17366  0E26  30FF               	movlw	255
 17367  0E27  05B1               	andwf	___ftmul@f2,f
 17368  0E28  30FF               	movlw	255
 17369  0E29  05B2               	andwf	___ftmul@f2+1,f
 17370  0E2A  3000               	movlw	0
 17371  0E2B  05B3               	andwf	___ftmul@f2+2,f
 17372  0E2C  3000               	movlw	0
 17373  0E2D  00B9               	movwf	___ftmul@f3_as_product
 17374  0E2E  3000               	movlw	0
 17375  0E2F  00BA               	movwf	___ftmul@f3_as_product+1
 17376  0E30  3000               	movlw	0
 17377  0E31  00BB               	movwf	___ftmul@f3_as_product+2
 17378  0E32  3007               	movlw	7
 17379  0E33  00B4               	movwf	??___ftmul
 17380  0E34  0834               	movf	??___ftmul,w
 17381  0E35  00BC               	movwf	___ftmul@cntr
 17382  0E36                     l6077:	
 17383  0E36  1C2E               	btfss	___ftmul@f1,0
 17384  0E37  2E3E               	goto	l6081
 17385  0E38  0831               	movf	___ftmul@f2,w
 17386  0E39  07B9               	addwf	___ftmul@f3_as_product,f
 17387  0E3A  0832               	movf	___ftmul@f2+1,w
 17388  0E3B  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17389  0E3C  0833               	movf	___ftmul@f2+2,w
 17390  0E3D  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17391  0E3E                     l6081:	
 17392  0E3E  3001               	movlw	1
 17393  0E3F                     u5065:	
 17394  0E3F  36B0               	lsrf	___ftmul@f1+2,f
 17395  0E40  0CAF               	rrf	___ftmul@f1+1,f
 17396  0E41  0CAE               	rrf	___ftmul@f1,f
 17397  0E42  0B89               	decfsz	9,f
 17398  0E43  2E3F               	goto	u5065
 17399  0E44  3001               	movlw	1
 17400  0E45                     u5075:	
 17401  0E45  35B1               	lslf	___ftmul@f2,f
 17402  0E46  0DB2               	rlf	___ftmul@f2+1,f
 17403  0E47  0DB3               	rlf	___ftmul@f2+2,f
 17404  0E48  0B89               	decfsz	9,f
 17405  0E49  2E45               	goto	u5075
 17406  0E4A  3001               	movlw	1
 17407  0E4B  02BC               	subwf	___ftmul@cntr,f
 17408  0E4C  1D03               	btfss	3,2
 17409  0E4D  2E36               	goto	l6077
 17410  0E4E  3009               	movlw	9
 17411  0E4F  00B4               	movwf	??___ftmul
 17412  0E50  0834               	movf	??___ftmul,w
 17413  0E51  00BC               	movwf	___ftmul@cntr
 17414  0E52                     l6089:	
 17415  0E52  1C2E               	btfss	___ftmul@f1,0
 17416  0E53  2E5A               	goto	l6093
 17417  0E54  0831               	movf	___ftmul@f2,w
 17418  0E55  07B9               	addwf	___ftmul@f3_as_product,f
 17419  0E56  0832               	movf	___ftmul@f2+1,w
 17420  0E57  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17421  0E58  0833               	movf	___ftmul@f2+2,w
 17422  0E59  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17423  0E5A                     l6093:	
 17424  0E5A  3001               	movlw	1
 17425  0E5B                     u5105:	
 17426  0E5B  36B0               	lsrf	___ftmul@f1+2,f
 17427  0E5C  0CAF               	rrf	___ftmul@f1+1,f
 17428  0E5D  0CAE               	rrf	___ftmul@f1,f
 17429  0E5E  0B89               	decfsz	9,f
 17430  0E5F  2E5B               	goto	u5105
 17431  0E60  3001               	movlw	1
 17432  0E61                     u5115:	
 17433  0E61  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17434  0E62  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17435  0E63  0CB9               	rrf	___ftmul@f3_as_product,f
 17436  0E64  0B89               	decfsz	9,f
 17437  0E65  2E61               	goto	u5115
 17438  0E66  3001               	movlw	1
 17439  0E67  02BC               	subwf	___ftmul@cntr,f
 17440  0E68  1D03               	btfss	3,2
 17441  0E69  2E52               	goto	l6089
 17442  0E6A  0839               	movf	___ftmul@f3_as_product,w
 17443  0E6B  00A0               	movwf	___ftpack@arg
 17444  0E6C  083A               	movf	___ftmul@f3_as_product+1,w
 17445  0E6D  00A1               	movwf	___ftpack@arg+1
 17446  0E6E  083B               	movf	___ftmul@f3_as_product+2,w
 17447  0E6F  00A2               	movwf	___ftpack@arg+2
 17448  0E70  0838               	movf	___ftmul@exp,w
 17449  0E71  00B4               	movwf	??___ftmul
 17450  0E72  0834               	movf	??___ftmul,w
 17451  0E73  00A3               	movwf	___ftpack@exp
 17452  0E74  083D               	movf	___ftmul@sign,w
 17453  0E75  00B5               	movwf	??___ftmul+1
 17454  0E76  0835               	movf	??___ftmul+1,w
 17455  0E77  00A4               	movwf	___ftpack@sign
 17456  0E78  3195  2536         	fcall	___ftpack
 17457  0E7A  0020               	movlb	0	; select bank0
 17458  0E7B  0820               	movf	?___ftpack,w
 17459  0E7C  00AE               	movwf	?___ftmul
 17460  0E7D  0821               	movf	?___ftpack+1,w
 17461  0E7E  00AF               	movwf	?___ftmul+1
 17462  0E7F  0822               	movf	?___ftpack+2,w
 17463  0E80  00B0               	movwf	?___ftmul+2
 17464  0E81  0008               	return
 17465  0E82                     __end_of___ftmul:	
 17466                           
 17467                           	psect	text122
 17468  0D25                     __ptext122:	
 17469 ;; *************** function ___ftdiv *****************
 17470 ;; Defined at:
 17471 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17472 ;; Parameters:    Size  Location     Type
 17473 ;;  f2              3   14[BANK0 ] float 
 17474 ;;  f1              3   17[BANK0 ] float 
 17475 ;; Auto vars:     Size  Location     Type
 17476 ;;  f3              3   25[BANK0 ] float 
 17477 ;;  sign            1   29[BANK0 ] unsigned char 
 17478 ;;  exp             1   28[BANK0 ] unsigned char 
 17479 ;;  cntr            1   24[BANK0 ] unsigned char 
 17480 ;; Return value:  Size  Location     Type
 17481 ;;                  3   14[BANK0 ] float 
 17482 ;; Registers used:
 17483 ;;		wreg, status,2, status,0, pclath, cstack
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17489 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17490 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17491 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;Total ram usage:       16 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:    6
 17496 ;; This function calls:
 17497 ;;		___ftpack
 17498 ;; This function is called by:
 17499 ;;		_getDimmerLights_PercentToValue
 17500 ;;		_getDimmerLights_ValueToPercent
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           
 17505                           ;psect for function ___ftdiv
 17506  0D25                     ___ftdiv:	
 17507                           
 17508                           ;incstack = 0
 17509                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17510  0D25  0020               	movlb	0	; select bank0
 17511  0D26  0831               	movf	___ftdiv@f1,w
 17512  0D27  00B4               	movwf	??___ftdiv
 17513  0D28  0832               	movf	___ftdiv@f1+1,w
 17514  0D29  00B5               	movwf	??___ftdiv+1
 17515  0D2A  0833               	movf	___ftdiv@f1+2,w
 17516  0D2B  00B6               	movwf	??___ftdiv+2
 17517  0D2C  1003               	clrc
 17518  0D2D  0D35               	rlf	??___ftdiv+1,w
 17519  0D2E  0D36               	rlf	??___ftdiv+2,w
 17520  0D2F  00B7               	movwf	??___ftdiv+3
 17521  0D30  0837               	movf	??___ftdiv+3,w
 17522  0D31  00BC               	movwf	___ftdiv@exp
 17523  0D32  08BC               	movf	___ftdiv@exp,f
 17524  0D33  1D03               	skipz
 17525  0D34  2D3C               	goto	l6017
 17526  0D35  3000               	movlw	0
 17527  0D36  00AE               	movwf	?___ftdiv
 17528  0D37  3000               	movlw	0
 17529  0D38  00AF               	movwf	?___ftdiv+1
 17530  0D39  3000               	movlw	0
 17531  0D3A  00B0               	movwf	?___ftdiv+2
 17532  0D3B  0008               	return
 17533  0D3C                     l6017:	
 17534  0D3C  082E               	movf	___ftdiv@f2,w
 17535  0D3D  00B4               	movwf	??___ftdiv
 17536  0D3E  082F               	movf	___ftdiv@f2+1,w
 17537  0D3F  00B5               	movwf	??___ftdiv+1
 17538  0D40  0830               	movf	___ftdiv@f2+2,w
 17539  0D41  00B6               	movwf	??___ftdiv+2
 17540  0D42  1003               	clrc
 17541  0D43  0D35               	rlf	??___ftdiv+1,w
 17542  0D44  0D36               	rlf	??___ftdiv+2,w
 17543  0D45  00B7               	movwf	??___ftdiv+3
 17544  0D46  0837               	movf	??___ftdiv+3,w
 17545  0D47  00BD               	movwf	___ftdiv@sign
 17546  0D48  08BD               	movf	___ftdiv@sign,f
 17547  0D49  1D03               	skipz
 17548  0D4A  2D52               	goto	l6023
 17549  0D4B  3000               	movlw	0
 17550  0D4C  00AE               	movwf	?___ftdiv
 17551  0D4D  3000               	movlw	0
 17552  0D4E  00AF               	movwf	?___ftdiv+1
 17553  0D4F  3000               	movlw	0
 17554  0D50  00B0               	movwf	?___ftdiv+2
 17555  0D51  0008               	return
 17556  0D52                     l6023:	
 17557  0D52  3000               	movlw	0
 17558  0D53  00B9               	movwf	___ftdiv@f3
 17559  0D54  3000               	movlw	0
 17560  0D55  00BA               	movwf	___ftdiv@f3+1
 17561  0D56  3000               	movlw	0
 17562  0D57  00BB               	movwf	___ftdiv@f3+2
 17563  0D58  3089               	movlw	137
 17564  0D59  073D               	addwf	___ftdiv@sign,w
 17565  0D5A  00B4               	movwf	??___ftdiv
 17566  0D5B  0834               	movf	??___ftdiv,w
 17567  0D5C  02BC               	subwf	___ftdiv@exp,f
 17568  0D5D  0831               	movf	___ftdiv@f1,w
 17569  0D5E  00B4               	movwf	??___ftdiv
 17570  0D5F  0832               	movf	___ftdiv@f1+1,w
 17571  0D60  00B5               	movwf	??___ftdiv+1
 17572  0D61  0833               	movf	___ftdiv@f1+2,w
 17573  0D62  00B6               	movwf	??___ftdiv+2
 17574  0D63  3010               	movlw	16
 17575  0D64                     u4955:	
 17576  0D64  36B6               	lsrf	??___ftdiv+2,f
 17577  0D65  0CB5               	rrf	??___ftdiv+1,f
 17578  0D66  0CB4               	rrf	??___ftdiv,f
 17579  0D67  0B89               	decfsz	9,f
 17580  0D68  2D64               	goto	u4955
 17581  0D69  0834               	movf	??___ftdiv,w
 17582  0D6A  00B7               	movwf	??___ftdiv+3
 17583  0D6B  0837               	movf	??___ftdiv+3,w
 17584  0D6C  00BD               	movwf	___ftdiv@sign
 17585  0D6D  082E               	movf	___ftdiv@f2,w
 17586  0D6E  00B4               	movwf	??___ftdiv
 17587  0D6F  082F               	movf	___ftdiv@f2+1,w
 17588  0D70  00B5               	movwf	??___ftdiv+1
 17589  0D71  0830               	movf	___ftdiv@f2+2,w
 17590  0D72  00B6               	movwf	??___ftdiv+2
 17591  0D73  3010               	movlw	16
 17592  0D74                     u4965:	
 17593  0D74  36B6               	lsrf	??___ftdiv+2,f
 17594  0D75  0CB5               	rrf	??___ftdiv+1,f
 17595  0D76  0CB4               	rrf	??___ftdiv,f
 17596  0D77  0B89               	decfsz	9,f
 17597  0D78  2D74               	goto	u4965
 17598  0D79  0834               	movf	??___ftdiv,w
 17599  0D7A  00B7               	movwf	??___ftdiv+3
 17600  0D7B  0837               	movf	??___ftdiv+3,w
 17601  0D7C  06BD               	xorwf	___ftdiv@sign,f
 17602  0D7D  3080               	movlw	128
 17603  0D7E  00B4               	movwf	??___ftdiv
 17604  0D7F  0834               	movf	??___ftdiv,w
 17605  0D80  05BD               	andwf	___ftdiv@sign,f
 17606  0D81  17B2               	bsf	___ftdiv@f1+1,7
 17607  0D82  30FF               	movlw	255
 17608  0D83  05B1               	andwf	___ftdiv@f1,f
 17609  0D84  30FF               	movlw	255
 17610  0D85  05B2               	andwf	___ftdiv@f1+1,f
 17611  0D86  3000               	movlw	0
 17612  0D87  05B3               	andwf	___ftdiv@f1+2,f
 17613  0D88  17AF               	bsf	___ftdiv@f2+1,7
 17614  0D89  30FF               	movlw	255
 17615  0D8A  05AE               	andwf	___ftdiv@f2,f
 17616  0D8B  30FF               	movlw	255
 17617  0D8C  05AF               	andwf	___ftdiv@f2+1,f
 17618  0D8D  3000               	movlw	0
 17619  0D8E  05B0               	andwf	___ftdiv@f2+2,f
 17620  0D8F  3018               	movlw	24
 17621  0D90  00B4               	movwf	??___ftdiv
 17622  0D91  0834               	movf	??___ftdiv,w
 17623  0D92  00B8               	movwf	___ftdiv@cntr
 17624  0D93                     l6037:	
 17625  0D93  3001               	movlw	1
 17626  0D94                     u4975:	
 17627  0D94  35B9               	lslf	___ftdiv@f3,f
 17628  0D95  0DBA               	rlf	___ftdiv@f3+1,f
 17629  0D96  0DBB               	rlf	___ftdiv@f3+2,f
 17630  0D97  0B89               	decfsz	9,f
 17631  0D98  2D94               	goto	u4975
 17632  0D99  0830               	movf	___ftdiv@f2+2,w
 17633  0D9A  0233               	subwf	___ftdiv@f1+2,w
 17634  0D9B  1D03               	skipz
 17635  0D9C  2DA3               	goto	u4985
 17636  0D9D  082F               	movf	___ftdiv@f2+1,w
 17637  0D9E  0232               	subwf	___ftdiv@f1+1,w
 17638  0D9F  1D03               	skipz
 17639  0DA0  2DA3               	goto	u4985
 17640  0DA1  082E               	movf	___ftdiv@f2,w
 17641  0DA2  0231               	subwf	___ftdiv@f1,w
 17642  0DA3                     u4985:	
 17643  0DA3  1C03               	skipc
 17644  0DA4  2DAC               	goto	l6045
 17645  0DA5  082E               	movf	___ftdiv@f2,w
 17646  0DA6  02B1               	subwf	___ftdiv@f1,f
 17647  0DA7  082F               	movf	___ftdiv@f2+1,w
 17648  0DA8  3BB2               	subwfb	___ftdiv@f1+1,f
 17649  0DA9  0830               	movf	___ftdiv@f2+2,w
 17650  0DAA  3BB3               	subwfb	___ftdiv@f1+2,f
 17651  0DAB  1439               	bsf	___ftdiv@f3,0
 17652  0DAC                     l6045:	
 17653  0DAC  3001               	movlw	1
 17654  0DAD                     u4995:	
 17655  0DAD  35B1               	lslf	___ftdiv@f1,f
 17656  0DAE  0DB2               	rlf	___ftdiv@f1+1,f
 17657  0DAF  0DB3               	rlf	___ftdiv@f1+2,f
 17658  0DB0  0B89               	decfsz	9,f
 17659  0DB1  2DAD               	goto	u4995
 17660  0DB2  3001               	movlw	1
 17661  0DB3  02B8               	subwf	___ftdiv@cntr,f
 17662  0DB4  1D03               	btfss	3,2
 17663  0DB5  2D93               	goto	l6037
 17664  0DB6  0839               	movf	___ftdiv@f3,w
 17665  0DB7  00A0               	movwf	___ftpack@arg
 17666  0DB8  083A               	movf	___ftdiv@f3+1,w
 17667  0DB9  00A1               	movwf	___ftpack@arg+1
 17668  0DBA  083B               	movf	___ftdiv@f3+2,w
 17669  0DBB  00A2               	movwf	___ftpack@arg+2
 17670  0DBC  083C               	movf	___ftdiv@exp,w
 17671  0DBD  00B4               	movwf	??___ftdiv
 17672  0DBE  0834               	movf	??___ftdiv,w
 17673  0DBF  00A3               	movwf	___ftpack@exp
 17674  0DC0  083D               	movf	___ftdiv@sign,w
 17675  0DC1  00B5               	movwf	??___ftdiv+1
 17676  0DC2  0835               	movf	??___ftdiv+1,w
 17677  0DC3  00A4               	movwf	___ftpack@sign
 17678  0DC4  3195  2536         	fcall	___ftpack
 17679  0DC6  0020               	movlb	0	; select bank0
 17680  0DC7  0820               	movf	?___ftpack,w
 17681  0DC8  00AE               	movwf	?___ftdiv
 17682  0DC9  0821               	movf	?___ftpack+1,w
 17683  0DCA  00AF               	movwf	?___ftdiv+1
 17684  0DCB  0822               	movf	?___ftpack+2,w
 17685  0DCC  00B0               	movwf	?___ftdiv+2
 17686  0DCD  0008               	return
 17687  0DCE                     __end_of___ftdiv:	
 17688                           
 17689                           	psect	text123
 17690  0389                     __ptext123:	
 17691 ;; *************** function ___ftadd *****************
 17692 ;; Defined at:
 17693 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17694 ;; Parameters:    Size  Location     Type
 17695 ;;  f1              3   33[BANK0 ] float 
 17696 ;;  f2              3   36[BANK0 ] float 
 17697 ;; Auto vars:     Size  Location     Type
 17698 ;;  exp1            1   45[BANK0 ] unsigned char 
 17699 ;;  exp2            1   44[BANK0 ] unsigned char 
 17700 ;;  sign            1   43[BANK0 ] unsigned char 
 17701 ;; Return value:  Size  Location     Type
 17702 ;;                  3   33[BANK0 ] float 
 17703 ;; Registers used:
 17704 ;;		wreg, status,2, status,0, pclath, cstack
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17710 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;Total ram usage:       13 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    6
 17717 ;; This function calls:
 17718 ;;		___ftpack
 17719 ;; This function is called by:
 17720 ;;		_getDimmerLights_PercentToValue
 17721 ;;		_getDimmerLights_ValueToPercent
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           
 17726                           ;psect for function ___ftadd
 17727  0389                     ___ftadd:	
 17728                           
 17729                           ;incstack = 0
 17730                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17731  0389  0020               	movlb	0	; select bank0
 17732  038A  0841               	movf	___ftadd@f1,w
 17733  038B  00C7               	movwf	??___ftadd
 17734  038C  0842               	movf	___ftadd@f1+1,w
 17735  038D  00C8               	movwf	??___ftadd+1
 17736  038E  0843               	movf	___ftadd@f1+2,w
 17737  038F  00C9               	movwf	??___ftadd+2
 17738  0390  1003               	clrc
 17739  0391  0D48               	rlf	??___ftadd+1,w
 17740  0392  0D49               	rlf	??___ftadd+2,w
 17741  0393  00CA               	movwf	??___ftadd+3
 17742  0394  084A               	movf	??___ftadd+3,w
 17743  0395  00CD               	movwf	___ftadd@exp1
 17744  0396  0844               	movf	___ftadd@f2,w
 17745  0397  00C7               	movwf	??___ftadd
 17746  0398  0845               	movf	___ftadd@f2+1,w
 17747  0399  00C8               	movwf	??___ftadd+1
 17748  039A  0846               	movf	___ftadd@f2+2,w
 17749  039B  00C9               	movwf	??___ftadd+2
 17750  039C  1003               	clrc
 17751  039D  0D48               	rlf	??___ftadd+1,w
 17752  039E  0D49               	rlf	??___ftadd+2,w
 17753  039F  00CA               	movwf	??___ftadd+3
 17754  03A0  084A               	movf	??___ftadd+3,w
 17755  03A1  00CC               	movwf	___ftadd@exp2
 17756  03A2  084D               	movf	___ftadd@exp1,w
 17757  03A3  1903               	btfsc	3,2
 17758  03A4  2BB1               	goto	l5947
 17759  03A5  084C               	movf	___ftadd@exp2,w
 17760  03A6  024D               	subwf	___ftadd@exp1,w
 17761  03A7  1803               	skipnc
 17762  03A8  2BB8               	goto	l5951
 17763  03A9  034D               	decf	___ftadd@exp1,w
 17764  03AA  3AFF               	xorlw	255
 17765  03AB  074C               	addwf	___ftadd@exp2,w
 17766  03AC  00C7               	movwf	??___ftadd
 17767  03AD  3019               	movlw	25
 17768  03AE  0247               	subwf	??___ftadd,w
 17769  03AF  1C03               	skipc
 17770  03B0  2BB8               	goto	l5951
 17771  03B1                     l5947:	
 17772  03B1  0844               	movf	___ftadd@f2,w
 17773  03B2  00C1               	movwf	?___ftadd
 17774  03B3  0845               	movf	___ftadd@f2+1,w
 17775  03B4  00C2               	movwf	?___ftadd+1
 17776  03B5  0846               	movf	___ftadd@f2+2,w
 17777  03B6  00C3               	movwf	?___ftadd+2
 17778  03B7  0008               	return
 17779  03B8                     l5951:	
 17780  03B8  084C               	movf	___ftadd@exp2,w
 17781  03B9  1903               	btfsc	3,2
 17782  03BA  0008               	return
 17783  03BB  084D               	movf	___ftadd@exp1,w
 17784  03BC  024C               	subwf	___ftadd@exp2,w
 17785  03BD  1803               	skipnc
 17786  03BE  2BC7               	goto	l5957
 17787  03BF  034C               	decf	___ftadd@exp2,w
 17788  03C0  3AFF               	xorlw	255
 17789  03C1  074D               	addwf	___ftadd@exp1,w
 17790  03C2  00C7               	movwf	??___ftadd
 17791  03C3  3019               	movlw	25
 17792  03C4  0247               	subwf	??___ftadd,w
 17793  03C5  1803               	btfsc	3,0
 17794  03C6  0008               	return
 17795  03C7                     l5957:	
 17796  03C7  3006               	movlw	6
 17797  03C8  00C7               	movwf	??___ftadd
 17798  03C9  0847               	movf	??___ftadd,w
 17799  03CA  00CB               	movwf	___ftadd@sign
 17800  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17801  03CC  17CB               	bsf	___ftadd@sign,7
 17802  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17803  03CE  174B               	bsf	___ftadd@sign,6
 17804  03CF  17C2               	bsf	___ftadd@f1+1,7
 17805  03D0  30FF               	movlw	255
 17806  03D1  05C1               	andwf	___ftadd@f1,f
 17807  03D2  30FF               	movlw	255
 17808  03D3  05C2               	andwf	___ftadd@f1+1,f
 17809  03D4  3000               	movlw	0
 17810  03D5  05C3               	andwf	___ftadd@f1+2,f
 17811  03D6  17C5               	bsf	___ftadd@f2+1,7
 17812  03D7  30FF               	movlw	255
 17813  03D8  05C4               	andwf	___ftadd@f2,f
 17814  03D9  30FF               	movlw	255
 17815  03DA  05C5               	andwf	___ftadd@f2+1,f
 17816  03DB  3000               	movlw	0
 17817  03DC  05C6               	andwf	___ftadd@f2+2,f
 17818  03DD  084C               	movf	___ftadd@exp2,w
 17819  03DE  024D               	subwf	___ftadd@exp1,w
 17820  03DF  1803               	skipnc
 17821  03E0  2C03               	goto	l5979
 17822  03E1                     l5969:	
 17823  03E1  3001               	movlw	1
 17824  03E2                     u4795:	
 17825  03E2  35C4               	lslf	___ftadd@f2,f
 17826  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17827  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17828  03E5  0B89               	decfsz	9,f
 17829  03E6  2BE2               	goto	u4795
 17830  03E7  3001               	movlw	1
 17831  03E8  02CC               	subwf	___ftadd@exp2,f
 17832  03E9  084C               	movf	___ftadd@exp2,w
 17833  03EA  064D               	xorwf	___ftadd@exp1,w
 17834  03EB  1903               	skipnz
 17835  03EC  2BFE               	goto	l5977
 17836  03ED  3001               	movlw	1
 17837  03EE  02CB               	subwf	___ftadd@sign,f
 17838  03EF  084B               	movf	___ftadd@sign,w
 17839  03F0  3907               	andlw	7
 17840  03F1  1903               	btfsc	3,2
 17841  03F2  2BFE               	goto	l5977
 17842  03F3  2BE1               	goto	l5969
 17843  03F4                     l5975:	
 17844  03F4  3001               	movlw	1
 17845  03F5                     u4825:	
 17846  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17847  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17848  03F7  0CC1               	rrf	___ftadd@f1,f
 17849  03F8  0B89               	decfsz	9,f
 17850  03F9  2BF5               	goto	u4825
 17851  03FA  3001               	movlw	1
 17852  03FB  00C7               	movwf	??___ftadd
 17853  03FC  0847               	movf	??___ftadd,w
 17854  03FD  07CD               	addwf	___ftadd@exp1,f
 17855  03FE                     l5977:	
 17856  03FE  084D               	movf	___ftadd@exp1,w
 17857  03FF  064C               	xorwf	___ftadd@exp2,w
 17858  0400  1903               	btfsc	3,2
 17859  0401  2C28               	goto	l2900
 17860  0402  2BF4               	goto	l5975
 17861  0403                     l5979:	
 17862  0403  084D               	movf	___ftadd@exp1,w
 17863  0404  024C               	subwf	___ftadd@exp2,w
 17864  0405  1803               	skipnc
 17865  0406  2C28               	goto	l2900
 17866  0407                     l5981:	
 17867  0407  3001               	movlw	1
 17868  0408                     u4855:	
 17869  0408  35C1               	lslf	___ftadd@f1,f
 17870  0409  0DC2               	rlf	___ftadd@f1+1,f
 17871  040A  0DC3               	rlf	___ftadd@f1+2,f
 17872  040B  0B89               	decfsz	9,f
 17873  040C  2C08               	goto	u4855
 17874  040D  3001               	movlw	1
 17875  040E  02CD               	subwf	___ftadd@exp1,f
 17876  040F  084C               	movf	___ftadd@exp2,w
 17877  0410  064D               	xorwf	___ftadd@exp1,w
 17878  0411  1903               	skipnz
 17879  0412  2C24               	goto	l5989
 17880  0413  3001               	movlw	1
 17881  0414  02CB               	subwf	___ftadd@sign,f
 17882  0415  084B               	movf	___ftadd@sign,w
 17883  0416  3907               	andlw	7
 17884  0417  1903               	btfsc	3,2
 17885  0418  2C24               	goto	l5989
 17886  0419  2C07               	goto	l5981
 17887  041A                     l5987:	
 17888  041A  3001               	movlw	1
 17889  041B                     u4885:	
 17890  041B  36C6               	lsrf	___ftadd@f2+2,f
 17891  041C  0CC5               	rrf	___ftadd@f2+1,f
 17892  041D  0CC4               	rrf	___ftadd@f2,f
 17893  041E  0B89               	decfsz	9,f
 17894  041F  2C1B               	goto	u4885
 17895  0420  3001               	movlw	1
 17896  0421  00C7               	movwf	??___ftadd
 17897  0422  0847               	movf	??___ftadd,w
 17898  0423  07CC               	addwf	___ftadd@exp2,f
 17899  0424                     l5989:	
 17900  0424  084D               	movf	___ftadd@exp1,w
 17901  0425  064C               	xorwf	___ftadd@exp2,w
 17902  0426  1D03               	skipz
 17903  0427  2C1A               	goto	l5987
 17904  0428                     l2900:	
 17905  0428  1FCB               	btfss	___ftadd@sign,7
 17906  0429  2C3A               	goto	l5993
 17907  042A  30FF               	movlw	255
 17908  042B  06C1               	xorwf	___ftadd@f1,f
 17909  042C  30FF               	movlw	255
 17910  042D  06C2               	xorwf	___ftadd@f1+1,f
 17911  042E  30FF               	movlw	255
 17912  042F  06C3               	xorwf	___ftadd@f1+2,f
 17913  0430  3001               	movlw	1
 17914  0431  07C1               	addwf	___ftadd@f1,f
 17915  0432  3000               	movlw	0
 17916  0433  1803               	skipnc
 17917  0434  3001               	movlw	1
 17918  0435  07C2               	addwf	___ftadd@f1+1,f
 17919  0436  3000               	movlw	0
 17920  0437  1803               	skipnc
 17921  0438  3001               	movlw	1
 17922  0439  07C3               	addwf	___ftadd@f1+2,f
 17923  043A                     l5993:	
 17924  043A  1F4B               	btfss	___ftadd@sign,6
 17925  043B  2C4C               	goto	l5997
 17926  043C  30FF               	movlw	255
 17927  043D  06C4               	xorwf	___ftadd@f2,f
 17928  043E  30FF               	movlw	255
 17929  043F  06C5               	xorwf	___ftadd@f2+1,f
 17930  0440  30FF               	movlw	255
 17931  0441  06C6               	xorwf	___ftadd@f2+2,f
 17932  0442  3001               	movlw	1
 17933  0443  07C4               	addwf	___ftadd@f2,f
 17934  0444  3000               	movlw	0
 17935  0445  1803               	skipnc
 17936  0446  3001               	movlw	1
 17937  0447  07C5               	addwf	___ftadd@f2+1,f
 17938  0448  3000               	movlw	0
 17939  0449  1803               	skipnc
 17940  044A  3001               	movlw	1
 17941  044B  07C6               	addwf	___ftadd@f2+2,f
 17942  044C                     l5997:	
 17943  044C  01CB               	clrf	___ftadd@sign
 17944  044D  0841               	movf	___ftadd@f1,w
 17945  044E  07C4               	addwf	___ftadd@f2,f
 17946  044F  0842               	movf	___ftadd@f1+1,w
 17947  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17948  0451  0843               	movf	___ftadd@f1+2,w
 17949  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17950  0453  1FC6               	btfss	___ftadd@f2+2,7
 17951  0454  2C67               	goto	l6007
 17952  0455  30FF               	movlw	255
 17953  0456  06C4               	xorwf	___ftadd@f2,f
 17954  0457  30FF               	movlw	255
 17955  0458  06C5               	xorwf	___ftadd@f2+1,f
 17956  0459  30FF               	movlw	255
 17957  045A  06C6               	xorwf	___ftadd@f2+2,f
 17958  045B  3001               	movlw	1
 17959  045C  07C4               	addwf	___ftadd@f2,f
 17960  045D  3000               	movlw	0
 17961  045E  1803               	skipnc
 17962  045F  3001               	movlw	1
 17963  0460  07C5               	addwf	___ftadd@f2+1,f
 17964  0461  3000               	movlw	0
 17965  0462  1803               	skipnc
 17966  0463  3001               	movlw	1
 17967  0464  07C6               	addwf	___ftadd@f2+2,f
 17968  0465  01CB               	clrf	___ftadd@sign
 17969  0466  0ACB               	incf	___ftadd@sign,f
 17970  0467                     l6007:	
 17971  0467  0844               	movf	___ftadd@f2,w
 17972  0468  00A0               	movwf	___ftpack@arg
 17973  0469  0845               	movf	___ftadd@f2+1,w
 17974  046A  00A1               	movwf	___ftpack@arg+1
 17975  046B  0846               	movf	___ftadd@f2+2,w
 17976  046C  00A2               	movwf	___ftpack@arg+2
 17977  046D  084D               	movf	___ftadd@exp1,w
 17978  046E  00C7               	movwf	??___ftadd
 17979  046F  0847               	movf	??___ftadd,w
 17980  0470  00A3               	movwf	___ftpack@exp
 17981  0471  084B               	movf	___ftadd@sign,w
 17982  0472  00C8               	movwf	??___ftadd+1
 17983  0473  0848               	movf	??___ftadd+1,w
 17984  0474  00A4               	movwf	___ftpack@sign
 17985  0475  3195  2536         	fcall	___ftpack
 17986  0477  0020               	movlb	0	; select bank0
 17987  0478  0820               	movf	?___ftpack,w
 17988  0479  00C1               	movwf	?___ftadd
 17989  047A  0821               	movf	?___ftpack+1,w
 17990  047B  00C2               	movwf	?___ftadd+1
 17991  047C  0822               	movf	?___ftpack+2,w
 17992  047D  00C3               	movwf	?___ftadd+2
 17993  047E  0008               	return
 17994  047F                     __end_of___ftadd:	
 17995                           
 17996                           	psect	text124
 17997  1F96                     __ptext124:	
 17998 ;; *************** function ___awtoft *****************
 17999 ;; Defined at:
 18000 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  c               2    8[BANK0 ] int 
 18003 ;; Auto vars:     Size  Location     Type
 18004 ;;  sign            1   13[BANK0 ] unsigned char 
 18005 ;; Return value:  Size  Location     Type
 18006 ;;                  3    8[BANK0 ] float 
 18007 ;; Registers used:
 18008 ;;		wreg, status,2, status,0, pclath, cstack
 18009 ;; Tracked objects:
 18010 ;;		On entry : 0/0
 18011 ;;		On exit  : 0/0
 18012 ;;		Unchanged: 0/0
 18013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18014 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;Total ram usage:        6 bytes
 18019 ;; Hardware stack levels used:    1
 18020 ;; Hardware stack levels required when called:    6
 18021 ;; This function calls:
 18022 ;;		___ftpack
 18023 ;; This function is called by:
 18024 ;;		_getDimmerLights_PercentToValue
 18025 ;;		_getDimmerLights_ValueToPercent
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           
 18030                           ;psect for function ___awtoft
 18031  1F96                     ___awtoft:	
 18032                           
 18033                           ;incstack = 0
 18034                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18035  1F96  0020               	movlb	0	; select bank0
 18036  1F97  01AD               	clrf	___awtoft@sign
 18037  1F98  1FA9               	btfss	___awtoft@c+1,7
 18038  1F99  2FA1               	goto	l5935
 18039  1F9A  09A8               	comf	___awtoft@c,f
 18040  1F9B  09A9               	comf	___awtoft@c+1,f
 18041  1F9C  0AA8               	incf	___awtoft@c,f
 18042  1F9D  1903               	skipnz
 18043  1F9E  0AA9               	incf	___awtoft@c+1,f
 18044  1F9F  01AD               	clrf	___awtoft@sign
 18045  1FA0  0AAD               	incf	___awtoft@sign,f
 18046  1FA1                     l5935:	
 18047  1FA1  0828               	movf	___awtoft@c,w
 18048  1FA2  00A0               	movwf	___ftpack@arg
 18049  1FA3  0829               	movf	___awtoft@c+1,w
 18050  1FA4  00A1               	movwf	___ftpack@arg+1
 18051  1FA5  01A2               	clrf	___ftpack@arg+2
 18052  1FA6  308E               	movlw	142
 18053  1FA7  00AB               	movwf	??___awtoft
 18054  1FA8  082B               	movf	??___awtoft,w
 18055  1FA9  00A3               	movwf	___ftpack@exp
 18056  1FAA  082D               	movf	___awtoft@sign,w
 18057  1FAB  00AC               	movwf	??___awtoft+1
 18058  1FAC  082C               	movf	??___awtoft+1,w
 18059  1FAD  00A4               	movwf	___ftpack@sign
 18060  1FAE  3195  2536         	fcall	___ftpack
 18061  1FB0  0020               	movlb	0	; select bank0
 18062  1FB1  0820               	movf	?___ftpack,w
 18063  1FB2  00A8               	movwf	?___awtoft
 18064  1FB3  0821               	movf	?___ftpack+1,w
 18065  1FB4  00A9               	movwf	?___awtoft+1
 18066  1FB5  0822               	movf	?___ftpack+2,w
 18067  1FB6  00AA               	movwf	?___awtoft+2
 18068  1FB7  0008               	return
 18069  1FB8                     __end_of___awtoft:	
 18070                           
 18071                           	psect	text125
 18072  1536                     __ptext125:	
 18073 ;; *************** function ___ftpack *****************
 18074 ;; Defined at:
 18075 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18076 ;; Parameters:    Size  Location     Type
 18077 ;;  arg             3    0[BANK0 ] unsigned um
 18078 ;;  exp             1    3[BANK0 ] unsigned char 
 18079 ;;  sign            1    4[BANK0 ] unsigned char 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;		None
 18082 ;; Return value:  Size  Location     Type
 18083 ;;                  3    0[BANK0 ] float 
 18084 ;; Registers used:
 18085 ;;		wreg, status,2, status,0
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18091 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18095 ;;Total ram usage:        8 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    5
 18098 ;; This function calls:
 18099 ;;		Nothing
 18100 ;; This function is called by:
 18101 ;;		___awtoft
 18102 ;;		___ftadd
 18103 ;;		___ftdiv
 18104 ;;		___ftmul
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           
 18109                           ;psect for function ___ftpack
 18110  1536                     ___ftpack:	
 18111                           
 18112                           ;incstack = 0
 18113                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18114  1536  0020               	movlb	0	; select bank0
 18115  1537  0823               	movf	___ftpack@exp,w
 18116  1538  1903               	btfsc	3,2
 18117  1539  2D3F               	goto	l5803
 18118  153A  0822               	movf	___ftpack@arg+2,w
 18119  153B  0421               	iorwf	___ftpack@arg+1,w
 18120  153C  0420               	iorwf	___ftpack@arg,w
 18121  153D  1D03               	skipz
 18122  153E  2D50               	goto	l5809
 18123  153F                     l5803:	
 18124  153F  3000               	movlw	0
 18125  1540  00A0               	movwf	?___ftpack
 18126  1541  3000               	movlw	0
 18127  1542  00A1               	movwf	?___ftpack+1
 18128  1543  3000               	movlw	0
 18129  1544  00A2               	movwf	?___ftpack+2
 18130  1545  0008               	return
 18131  1546                     l5807:	
 18132  1546  3001               	movlw	1
 18133  1547  00A5               	movwf	??___ftpack
 18134  1548  0825               	movf	??___ftpack,w
 18135  1549  07A3               	addwf	___ftpack@exp,f
 18136  154A  3001               	movlw	1
 18137  154B                     u4425:	
 18138  154B  36A2               	lsrf	___ftpack@arg+2,f
 18139  154C  0CA1               	rrf	___ftpack@arg+1,f
 18140  154D  0CA0               	rrf	___ftpack@arg,f
 18141  154E  0B89               	decfsz	9,f
 18142  154F  2D4B               	goto	u4425
 18143  1550                     l5809:	
 18144  1550  30FE               	movlw	254
 18145  1551  0522               	andwf	___ftpack@arg+2,w
 18146  1552  1903               	btfsc	3,2
 18147  1553  2D69               	goto	l2871
 18148  1554  2D46               	goto	l5807
 18149  1555                     l5811:	
 18150  1555  3001               	movlw	1
 18151  1556  00A5               	movwf	??___ftpack
 18152  1557  0825               	movf	??___ftpack,w
 18153  1558  07A3               	addwf	___ftpack@exp,f
 18154  1559  3001               	movlw	1
 18155  155A  07A0               	addwf	___ftpack@arg,f
 18156  155B  3000               	movlw	0
 18157  155C  1803               	skipnc
 18158  155D  3001               	movlw	1
 18159  155E  07A1               	addwf	___ftpack@arg+1,f
 18160  155F  3000               	movlw	0
 18161  1560  1803               	skipnc
 18162  1561  3001               	movlw	1
 18163  1562  07A2               	addwf	___ftpack@arg+2,f
 18164  1563  3001               	movlw	1
 18165  1564                     u4445:	
 18166  1564  36A2               	lsrf	___ftpack@arg+2,f
 18167  1565  0CA1               	rrf	___ftpack@arg+1,f
 18168  1566  0CA0               	rrf	___ftpack@arg,f
 18169  1567  0B89               	decfsz	9,f
 18170  1568  2D64               	goto	u4445
 18171  1569                     l2871:	
 18172  1569  30FF               	movlw	255
 18173  156A  0522               	andwf	___ftpack@arg+2,w
 18174  156B  1903               	btfsc	3,2
 18175  156C  2D76               	goto	l5819
 18176  156D  2D55               	goto	l5811
 18177  156E                     l5817:	
 18178  156E  3001               	movlw	1
 18179  156F  02A3               	subwf	___ftpack@exp,f
 18180  1570  3001               	movlw	1
 18181  1571                     u4465:	
 18182  1571  35A0               	lslf	___ftpack@arg,f
 18183  1572  0DA1               	rlf	___ftpack@arg+1,f
 18184  1573  0DA2               	rlf	___ftpack@arg+2,f
 18185  1574  0B89               	decfsz	9,f
 18186  1575  2D71               	goto	u4465
 18187  1576                     l5819:	
 18188  1576  1FA1               	btfss	___ftpack@arg+1,7
 18189  1577  2D6E               	goto	l5817
 18190  1578  1823               	btfsc	___ftpack@exp,0
 18191  1579  2D80               	goto	l2877
 18192  157A  30FF               	movlw	255
 18193  157B  05A0               	andwf	___ftpack@arg,f
 18194  157C  307F               	movlw	127
 18195  157D  05A1               	andwf	___ftpack@arg+1,f
 18196  157E  30FF               	movlw	255
 18197  157F  05A2               	andwf	___ftpack@arg+2,f
 18198  1580                     l2877:	
 18199  1580  1003               	clrc
 18200  1581  0CA3               	rrf	___ftpack@exp,f
 18201  1582  0823               	movf	___ftpack@exp,w
 18202  1583  00A5               	movwf	??___ftpack
 18203  1584  01A6               	clrf	??___ftpack+1
 18204  1585  01A7               	clrf	??___ftpack+2
 18205  1586  3010               	movlw	16
 18206  1587                     u4495:	
 18207  1587  35A5               	lslf	??___ftpack,f
 18208  1588  0DA6               	rlf	??___ftpack+1,f
 18209  1589  0DA7               	rlf	??___ftpack+2,f
 18210  158A  0B89               	decfsz	9,f
 18211  158B  2D87               	goto	u4495
 18212  158C  0825               	movf	??___ftpack,w
 18213  158D  04A0               	iorwf	___ftpack@arg,f
 18214  158E  0826               	movf	??___ftpack+1,w
 18215  158F  04A1               	iorwf	___ftpack@arg+1,f
 18216  1590  0827               	movf	??___ftpack+2,w
 18217  1591  04A2               	iorwf	___ftpack@arg+2,f
 18218  1592  0824               	movf	___ftpack@sign,w
 18219  1593  1903               	btfsc	3,2
 18220  1594  0008               	return
 18221  1595  17A2               	bsf	___ftpack@arg+2,7
 18222  1596  0008               	return
 18223  1597                     __end_of___ftpack:	
 18224                           
 18225                           	psect	text126
 18226  1B7B                     __ptext126:	
 18227 ;; *************** function _Division *****************
 18228 ;; Defined at:
 18229 ;;		line 1382 in file "../src/Dimmer_B1.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;  value           1    wreg     unsigned char 
 18232 ;;  num             1    5[BANK0 ] unsigned char 
 18233 ;; Auto vars:     Size  Location     Type
 18234 ;;  value           1    8[BANK0 ] unsigned char 
 18235 ;;  result          1    9[BANK0 ] unsigned char 
 18236 ;; Return value:  Size  Location     Type
 18237 ;;                  1    wreg      unsigned char 
 18238 ;; Registers used:
 18239 ;;		wreg, status,2, status,0, pclath, cstack
 18240 ;; Tracked objects:
 18241 ;;		On entry : 0/0
 18242 ;;		On exit  : 0/0
 18243 ;;		Unchanged: 0/0
 18244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18245 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;Total ram usage:        5 bytes
 18250 ;; Hardware stack levels used:    1
 18251 ;; Hardware stack levels required when called:    6
 18252 ;; This function calls:
 18253 ;;		___lbdiv
 18254 ;; This function is called by:
 18255 ;;		_DimmerIntr_Initialization
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           
 18260                           ;psect for function _Division
 18261  1B7B                     _Division:	
 18262                           
 18263                           ;incstack = 0
 18264                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18265                           ;Division@value stored from wreg
 18266  1B7B  0020               	movlb	0	; select bank0
 18267  1B7C  00A8               	movwf	Division@value
 18268                           
 18269                           ;Dimmer_B1.c: 1383: char result = (char) (value / num);
 18270  1B7D  0825               	movf	Division@num,w
 18271  1B7E  00A6               	movwf	??_Division
 18272  1B7F  0826               	movf	??_Division,w
 18273  1B80  00A0               	movwf	___lbdiv@divisor
 18274  1B81  0828               	movf	Division@value,w
 18275  1B82  319F  2774         	fcall	___lbdiv
 18276  1B84  0020               	movlb	0	; select bank0
 18277  1B85  00A7               	movwf	??_Division+1
 18278  1B86  0827               	movf	??_Division+1,w
 18279  1B87  00A9               	movwf	Division@result
 18280                           
 18281                           ;Dimmer_B1.c: 1384: return result;
 18282  1B88  0829               	movf	Division@result,w
 18283  1B89  0008               	return
 18284  1B8A                     __end_of_Division:	
 18285                           
 18286                           	psect	text127
 18287  1F74                     __ptext127:	
 18288 ;; *************** function ___lbdiv *****************
 18289 ;; Defined at:
 18290 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18291 ;; Parameters:    Size  Location     Type
 18292 ;;  dividend        1    wreg     unsigned char 
 18293 ;;  divisor         1    0[BANK0 ] unsigned char 
 18294 ;; Auto vars:     Size  Location     Type
 18295 ;;  dividend        1    2[BANK0 ] unsigned char 
 18296 ;;  quotient        1    4[BANK0 ] unsigned char 
 18297 ;;  counter         1    3[BANK0 ] unsigned char 
 18298 ;; Return value:  Size  Location     Type
 18299 ;;                  1    wreg      unsigned char 
 18300 ;; Registers used:
 18301 ;;		wreg, status,2, status,0
 18302 ;; Tracked objects:
 18303 ;;		On entry : 0/0
 18304 ;;		On exit  : 0/0
 18305 ;;		Unchanged: 0/0
 18306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18307 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18311 ;;Total ram usage:        5 bytes
 18312 ;; Hardware stack levels used:    1
 18313 ;; Hardware stack levels required when called:    5
 18314 ;; This function calls:
 18315 ;;		Nothing
 18316 ;; This function is called by:
 18317 ;;		_Division
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           
 18322                           ;psect for function ___lbdiv
 18323  1F74                     ___lbdiv:	
 18324                           
 18325                           ;incstack = 0
 18326                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18327                           ;___lbdiv@dividend stored from wreg
 18328  1F74  0020               	movlb	0	; select bank0
 18329  1F75  00A2               	movwf	___lbdiv@dividend
 18330  1F76  01A4               	clrf	___lbdiv@quotient
 18331  1F77  0820               	movf	___lbdiv@divisor,w
 18332  1F78  1903               	btfsc	3,2
 18333  1F79  2F94               	goto	l6757
 18334  1F7A  01A3               	clrf	___lbdiv@counter
 18335  1F7B  0AA3               	incf	___lbdiv@counter,f
 18336  1F7C                     l6745:	
 18337  1F7C  1BA0               	btfsc	___lbdiv@divisor,7
 18338  1F7D  2F85               	goto	l6747
 18339  1F7E  1003               	clrc
 18340  1F7F  0DA0               	rlf	___lbdiv@divisor,f
 18341  1F80  3001               	movlw	1
 18342  1F81  00A1               	movwf	??___lbdiv
 18343  1F82  0821               	movf	??___lbdiv,w
 18344  1F83  07A3               	addwf	___lbdiv@counter,f
 18345  1F84  2F7C               	goto	l6745
 18346  1F85                     l6747:	
 18347  1F85  1003               	clrc
 18348  1F86  0DA4               	rlf	___lbdiv@quotient,f
 18349  1F87  0820               	movf	___lbdiv@divisor,w
 18350  1F88  0222               	subwf	___lbdiv@dividend,w
 18351  1F89  1C03               	skipc
 18352  1F8A  2F8F               	goto	L10
 18353  1F8B  0820               	movf	___lbdiv@divisor,w
 18354  1F8C  02A2               	subwf	___lbdiv@dividend,f
 18355  1F8D  1424               	bsf	___lbdiv@quotient,0
 18356  1F8E  1003               	clrc
 18357  1F8F                     L10:	
 18358  1F8F  0CA0               	rrf	___lbdiv@divisor,f
 18359  1F90  3001               	movlw	1
 18360  1F91  02A3               	subwf	___lbdiv@counter,f
 18361  1F92  1D03               	btfss	3,2
 18362  1F93  2F85               	goto	l6747
 18363  1F94                     l6757:	
 18364  1F94  0824               	movf	___lbdiv@quotient,w
 18365  1F95  0008               	return
 18366  1F96                     __end_of___lbdiv:	
 18367                           
 18368                           	psect	text128
 18369  1A2E                     __ptext128:	
 18370 ;; *************** function _DelayOff_Main *****************
 18371 ;; Defined at:
 18372 ;;		line 41 in file "../src/DelayOff_B1.c"
 18373 ;; Parameters:    Size  Location     Type
 18374 ;;		None
 18375 ;; Auto vars:     Size  Location     Type
 18376 ;;		None
 18377 ;; Return value:  Size  Location     Type
 18378 ;;		None               void
 18379 ;; Registers used:
 18380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18381 ;; Tracked objects:
 18382 ;;		On entry : 0/0
 18383 ;;		On exit  : 0/0
 18384 ;;		Unchanged: 0/0
 18385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18390 ;;Total ram usage:        0 bytes
 18391 ;; Hardware stack levels used:    1
 18392 ;; Hardware stack levels required when called:    9
 18393 ;; This function calls:
 18394 ;;		_DlyOff_Main
 18395 ;; This function is called by:
 18396 ;;		_main
 18397 ;; This function uses a non-reentrant model
 18398 ;;
 18399                           
 18400                           
 18401                           ;psect for function _DelayOff_Main
 18402  1A2E                     _DelayOff_Main:	
 18403                           
 18404                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18405                           
 18406                           ;incstack = 0
 18407                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18408  1A2E  3001               	movlw	1
 18409  1A2F  3188  20B5         	fcall	_DlyOff_Main
 18410  1A31  0008               	return
 18411  1A32                     __end_of_DelayOff_Main:	
 18412                           
 18413                           	psect	text129
 18414  08B5                     __ptext129:	
 18415 ;; *************** function _DlyOff_Main *****************
 18416 ;; Defined at:
 18417 ;;		line 61 in file "../src/DelayOff_B1.c"
 18418 ;; Parameters:    Size  Location     Type
 18419 ;;  sw              1    wreg     unsigned char 
 18420 ;; Auto vars:     Size  Location     Type
 18421 ;;  sw              1   71[BANK0 ] unsigned char 
 18422 ;; Return value:  Size  Location     Type
 18423 ;;		None               void
 18424 ;; Registers used:
 18425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18426 ;; Tracked objects:
 18427 ;;		On entry : 0/0
 18428 ;;		On exit  : 0/0
 18429 ;;		Unchanged: 0/0
 18430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;Total ram usage:        3 bytes
 18436 ;; Hardware stack levels used:    1
 18437 ;; Hardware stack levels required when called:    8
 18438 ;; This function calls:
 18439 ;;		_DelayOffPointSelect
 18440 ;;		_getDimmerLights_Status
 18441 ;;		_setDimmerLights_SwOff
 18442 ;;		_setDimmerLights_SwOn
 18443 ;;		_setProductData
 18444 ;; This function is called by:
 18445 ;;		_DelayOff_Main
 18446 ;; This function uses a non-reentrant model
 18447 ;;
 18448                           
 18449                           
 18450                           ;psect for function _DlyOff_Main
 18451  08B5                     _DlyOff_Main:	
 18452                           
 18453                           ;incstack = 0
 18454                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18455                           ;DlyOff_Main@sw stored from wreg
 18456  08B5  0020               	movlb	0	; select bank0
 18457  08B6  00E7               	movwf	DlyOff_Main@sw
 18458                           
 18459                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18460  08B7  0867               	movf	DlyOff_Main@sw,w
 18461  08B8  319A  22DE  3188   	fcall	_DelayOffPointSelect
 18462                           
 18463                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18464  08BB  0021               	movlb	1	; select bank1
 18465  08BC  084A               	movf	_DelayOff^(0+128),w
 18466  08BD  0086               	movwf	6
 18467  08BE  3001               	movlw	1	; select bank2/3
 18468  08BF  0087               	movwf	7
 18469  08C0  1C81               	btfss	1,1
 18470  08C1  0008               	return
 18471                           
 18472                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18473  08C2  084A               	movf	_DelayOff^(0+128),w
 18474  08C3  3E02               	addlw	2
 18475  08C4  0086               	movwf	6
 18476  08C5  3001               	movlw	1	; select bank2/3
 18477  08C6  0087               	movwf	7
 18478  08C7  3001               	movlw	1
 18479  08C8  0781               	addwf	1,f
 18480  08C9  3141               	addfsr 1,1
 18481  08CA  1803               	skipnc
 18482  08CB  0A81               	incf	1,f
 18483                           
 18484                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18485  08CC  084A               	movf	_DelayOff^(0+128),w
 18486  08CD  3E02               	addlw	2
 18487  08CE  0086               	movwf	6
 18488  08CF  3001               	movlw	1	; select bank2/3
 18489  08D0  0087               	movwf	7
 18490  08D1  3F40               	moviw [0]fsr1
 18491  08D2  0020               	movlb	0	; select bank0
 18492  08D3  00E5               	movwf	??_DlyOff_Main
 18493  08D4  3F41               	moviw [1]fsr1
 18494  08D5  00E6               	movwf	??_DlyOff_Main+1
 18495  08D6  300B               	movlw	11
 18496  08D7  0266               	subwf	??_DlyOff_Main+1,w
 18497  08D8  30B8               	movlw	184
 18498  08D9  1903               	skipnz
 18499  08DA  0265               	subwf	??_DlyOff_Main,w
 18500  08DB  1C03               	skipc
 18501  08DC  0008               	return
 18502                           
 18503                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18504  08DD  0021               	movlb	1	; select bank1
 18505  08DE  084A               	movf	_DelayOff^(0+128),w
 18506  08DF  3E02               	addlw	2
 18507  08E0  0086               	movwf	6
 18508  08E1  3001               	movlw	1	; select bank2/3
 18509  08E2  0087               	movwf	7
 18510  08E3  3000               	movlw	0
 18511  08E4  3FC0               	movwi [0]fsr1
 18512  08E5  3FC1               	movwi [1]fsr1
 18513                           
 18514                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18515  08E6  3001               	movlw	1
 18516  08E7  0020               	movlb	0	; select bank0
 18517  08E8  00E5               	movwf	??_DlyOff_Main
 18518  08E9  0021               	movlb	1	; select bank1
 18519  08EA  084A               	movf	_DelayOff^(0+128),w
 18520  08EB  3E04               	addlw	4
 18521  08EC  0086               	movwf	6
 18522  08ED  3001               	movlw	1	; select bank2/3
 18523  08EE  0087               	movwf	7
 18524  08EF  0020               	movlb	0	; select bank0
 18525  08F0  0865               	movf	??_DlyOff_Main,w
 18526  08F1  0781               	addwf	1,f
 18527                           
 18528                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18529  08F2  0021               	movlb	1	; select bank1
 18530  08F3  084A               	movf	_DelayOff^(0+128),w
 18531  08F4  3E04               	addlw	4
 18532  08F5  0086               	movwf	6
 18533  08F6  3001               	movlw	1	; select bank2/3
 18534  08F7  0087               	movwf	7
 18535  08F8  0A4A               	incf	_DelayOff^(0+128),w
 18536  08F9  0084               	movwf	4
 18537  08FA  3001               	movlw	1	; select bank2/3
 18538  08FB  0085               	movwf	5
 18539  08FC  0800               	movf	0,w
 18540  08FD  0201               	subwf	1,w
 18541  08FE  1C03               	skipc
 18542  08FF  0008               	return
 18543                           
 18544                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18545  0900  084A               	movf	_DelayOff^(0+128),w
 18546  0901  3E04               	addlw	4
 18547  0902  0086               	movwf	6
 18548  0903  3001               	movlw	1	; select bank2/3
 18549  0904  0087               	movwf	7
 18550  0905  0181               	clrf	1
 18551                           
 18552                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18553  0906  084A               	movf	_DelayOff^(0+128),w
 18554  0907  0086               	movwf	6
 18555  0908  3001               	movlw	1	; select bank2/3
 18556  0909  0087               	movwf	7
 18557  090A  1081               	bcf	1,1
 18558                           
 18559                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18560  090B  0020               	movlb	0	; select bank0
 18561  090C  0867               	movf	DlyOff_Main@sw,w
 18562  090D  319B  23B8  3188   	fcall	_getDimmerLights_Status
 18563  0910  3A01               	xorlw	1
 18564  0911  1D03               	skipz
 18565  0912  291D               	goto	l531
 18566                           
 18567                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18568  0913  0020               	movlb	0	; select bank0
 18569  0914  0867               	movf	DlyOff_Main@sw,w
 18570  0915  3191  211E  3188   	fcall	_setDimmerLights_SwOn
 18571                           
 18572                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18573  0918  0020               	movlb	0	; select bank0
 18574  0919  0867               	movf	DlyOff_Main@sw,w
 18575  091A  3191  21C0  3188   	fcall	_setDimmerLights_SwOff
 18576  091D                     l531:	
 18577                           
 18578                           ;DelayOff_B1.c: 78: }
 18579                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18580  091D  0020               	movlb	0	; select bank0
 18581  091E  01E2               	clrf	setProductData@value
 18582  091F  0867               	movf	DlyOff_Main@sw,w
 18583  0920  3E1A               	addlw	26
 18584  0921  319A  22F6         	fcall	_setProductData
 18585  0923  0008               	return
 18586  0924                     __end_of_DlyOff_Main:	
 18587                           
 18588                           	psect	text130
 18589  1AF6                     __ptext130:	
 18590 ;; *************** function _setProductData *****************
 18591 ;; Defined at:
 18592 ;;		line 645 in file "../src/Main_B1.c"
 18593 ;; Parameters:    Size  Location     Type
 18594 ;;  address         1    wreg     unsigned char 
 18595 ;;  value           1   66[BANK0 ] unsigned char 
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  address         1   68[BANK0 ] unsigned char 
 18598 ;; Return value:  Size  Location     Type
 18599 ;;		None               void
 18600 ;; Registers used:
 18601 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18602 ;; Tracked objects:
 18603 ;;		On entry : 0/0
 18604 ;;		On exit  : 0/0
 18605 ;;		Unchanged: 0/0
 18606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18607 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18608 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;Total ram usage:        3 bytes
 18612 ;; Hardware stack levels used:    1
 18613 ;; Hardware stack levels required when called:    5
 18614 ;; This function calls:
 18615 ;;		Nothing
 18616 ;; This function is called by:
 18617 ;;		_DlyOff_Main
 18618 ;;		_setDelayOff_GO
 18619 ;;		_setDimmerLights_OnOff
 18620 ;;		_setDimmerLights_Dimming
 18621 ;;		_setTemp_Main
 18622 ;;		_setLog_Code
 18623 ;;		_setControl_Lights_Table
 18624 ;;		_setRFSW_AdjControl
 18625 ;;		_setRF_DimmerLights
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           
 18630                           ;psect for function _setProductData
 18631  1AF6                     _setProductData:	
 18632                           
 18633                           ;incstack = 0
 18634                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18635                           ;setProductData@address stored from wreg
 18636  1AF6  0020               	movlb	0	; select bank0
 18637  1AF7  00E4               	movwf	setProductData@address
 18638                           
 18639                           ;Main_B1.c: 646: _product.Data[address] = value;
 18640  1AF8  0862               	movf	setProductData@value,w
 18641  1AF9  00E3               	movwf	??_setProductData
 18642  1AFA  0864               	movf	setProductData@address,w
 18643  1AFB  3ECC               	addlw	__product& (0+255)
 18644  1AFC  0086               	movwf	6
 18645  1AFD  3001               	movlw	1	; select bank3/4
 18646  1AFE  0087               	movwf	7
 18647  1AFF  0863               	movf	??_setProductData,w
 18648  1B00  0081               	movwf	1
 18649  1B01  0008               	return
 18650  1B02                     __end_of_setProductData:	
 18651                           
 18652                           	psect	text131
 18653  111E                     __ptext131:	
 18654 ;; *************** function _setDimmerLights_SwOn *****************
 18655 ;; Defined at:
 18656 ;;		line 697 in file "../src/Dimmer_B1.c"
 18657 ;; Parameters:    Size  Location     Type
 18658 ;;  sw              1    wreg     unsigned char 
 18659 ;; Auto vars:     Size  Location     Type
 18660 ;;  sw              1   13[BANK0 ] unsigned char 
 18661 ;;  idle            1   14[BANK0 ] unsigned char 
 18662 ;; Return value:  Size  Location     Type
 18663 ;;		None               void
 18664 ;; Registers used:
 18665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18666 ;; Tracked objects:
 18667 ;;		On entry : 0/0
 18668 ;;		On exit  : 0/0
 18669 ;;		Unchanged: 0/0
 18670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18675 ;;Total ram usage:        2 bytes
 18676 ;; Hardware stack levels used:    1
 18677 ;; Hardware stack levels required when called:    7
 18678 ;; This function calls:
 18679 ;;		_DimmerLights_SelectPointer
 18680 ;;		_setBuz
 18681 ;; This function is called by:
 18682 ;;		_DlyOff_Main
 18683 ;;		_setControl_Lights_Table
 18684 ;;		_setRFSW_Control
 18685 ;;		_setRFSW_AdjControl
 18686 ;;		_setSw_Main
 18687 ;; This function uses a non-reentrant model
 18688 ;;
 18689                           
 18690                           
 18691                           ;psect for function _setDimmerLights_SwOn
 18692  111E                     _setDimmerLights_SwOn:	
 18693                           
 18694                           ;incstack = 0
 18695                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18696                           ;setDimmerLights_SwOn@sw stored from wreg
 18697  111E  0020               	movlb	0	; select bank0
 18698  111F  00AD               	movwf	setDimmerLights_SwOn@sw
 18699                           
 18700                           ;Dimmer_B1.c: 698: char idle = 0;
 18701  1120  01AE               	clrf	setDimmerLights_SwOn@idle
 18702                           
 18703                           ;Dimmer_B1.c: 723: DimmerLights_SelectPointer(sw);
 18704  1121  082D               	movf	setDimmerLights_SwOn@sw,w
 18705  1122  319A  22EA  3191   	fcall	_DimmerLights_SelectPointer
 18706                           
 18707                           ;Dimmer_B1.c: 724: if (idle == 0) {
 18708  1125  0020               	movlb	0	; select bank0
 18709  1126  08AE               	movf	setDimmerLights_SwOn@idle,f
 18710  1127  1D03               	skipz
 18711  1128  0008               	return
 18712                           
 18713                           ;Dimmer_B1.c: 726: DimmerLights->SwFlag = 1;
 18714  1129  0021               	movlb	1	; select bank1
 18715  112A  084C               	movf	_DimmerLights^(0+128),w
 18716  112B  0086               	movwf	6
 18717  112C  3001               	movlw	1	; select bank2/3
 18718  112D  0087               	movwf	7
 18719  112E  1401               	bsf	1,0
 18720                           
 18721                           ;Dimmer_B1.c: 727: if (DimmerLights->Status == 0) {
 18722  112F  0A4C               	incf	_DimmerLights^(0+128),w
 18723  1130  0086               	movwf	6
 18724  1131  3001               	movlw	1	; select bank2/3
 18725  1132  0087               	movwf	7
 18726  1133  1801               	btfsc	1,0
 18727  1134  2945               	goto	l6199
 18728                           
 18729                           ;Dimmer_B1.c: 728: DimmerLights->Status = 1;
 18730  1135  0A4C               	incf	_DimmerLights^(0+128),w
 18731  1136  0086               	movwf	6
 18732  1137  3001               	movlw	1	; select bank2/3
 18733  1138  0087               	movwf	7
 18734  1139  1401               	bsf	1,0
 18735                           
 18736                           ;Dimmer_B1.c: 729: DimmerLights->Trigger = 1;
 18737  113A  084C               	movf	_DimmerLights^(0+128),w
 18738  113B  0086               	movwf	6
 18739  113C  3001               	movlw	1	; select bank2/3
 18740  113D  0087               	movwf	7
 18741  113E  1481               	bsf	1,1
 18742                           
 18743                           ;Dimmer_B1.c: 730: DimmerLights->Switch = 1;
 18744  113F  084C               	movf	_DimmerLights^(0+128),w
 18745  1140  0086               	movwf	6
 18746  1141  3001               	movlw	1	; select bank2/3
 18747  1142  0087               	movwf	7
 18748  1143  1501               	bsf	1,2
 18749                           
 18750                           ;Dimmer_B1.c: 731: } else {
 18751  1144  294A               	goto	l6201
 18752  1145                     l6199:	
 18753                           
 18754                           ;Dimmer_B1.c: 732: DimmerLights->Status = 0;
 18755  1145  0A4C               	incf	_DimmerLights^(0+128),w
 18756  1146  0086               	movwf	6
 18757  1147  3001               	movlw	1	; select bank2/3
 18758  1148  0087               	movwf	7
 18759  1149  1001               	bcf	1,0
 18760  114A                     l6201:	
 18761                           
 18762                           ;Dimmer_B1.c: 733: }
 18763                           ;Dimmer_B1.c: 734: setBuz(1, 100);
 18764  114A  3064               	movlw	100
 18765  114B  0020               	movlb	0	; select bank0
 18766  114C  00A9               	movwf	setBuz@time
 18767  114D  3000               	movlw	0
 18768  114E  00AA               	movwf	setBuz@time+1
 18769  114F  3001               	movlw	1
 18770  1150  3194  2425         	fcall	_setBuz
 18771  1152  0008               	return
 18772  1153                     __end_of_setDimmerLights_SwOn:	
 18773                           
 18774                           	psect	text132
 18775  1425                     __ptext132:	
 18776 ;; *************** function _setBuz *****************
 18777 ;; Defined at:
 18778 ;;		line 22 in file "../src/Buzzer_B1.c"
 18779 ;; Parameters:    Size  Location     Type
 18780 ;;  count           1    wreg     unsigned char 
 18781 ;;  time            2    9[BANK0 ] int 
 18782 ;; Auto vars:     Size  Location     Type
 18783 ;;  count           1   12[BANK0 ] unsigned char 
 18784 ;; Return value:  Size  Location     Type
 18785 ;;		None               void
 18786 ;; Registers used:
 18787 ;;		wreg, status,2, status,0, pclath, cstack
 18788 ;; Tracked objects:
 18789 ;;		On entry : 0/0
 18790 ;;		On exit  : 0/0
 18791 ;;		Unchanged: 0/0
 18792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18793 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18797 ;;Total ram usage:        4 bytes
 18798 ;; Hardware stack levels used:    1
 18799 ;; Hardware stack levels required when called:    6
 18800 ;; This function calls:
 18801 ;;		___awdiv
 18802 ;; This function is called by:
 18803 ;;		_setDimmerLights_SwOn
 18804 ;;		_setDimmerLights_Dimming
 18805 ;;		_my_MainTimer
 18806 ;;		_Exception_Main
 18807 ;;		_setTemp_Main
 18808 ;;		_setLog_Code
 18809 ;;		_setRFSW_Control
 18810 ;;		_setSw_Main
 18811 ;; This function uses a non-reentrant model
 18812 ;;
 18813                           
 18814                           
 18815                           ;psect for function _setBuz
 18816  1425                     _setBuz:	
 18817                           
 18818                           ;incstack = 0
 18819                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18820                           ;setBuz@count stored from wreg
 18821  1425  0020               	movlb	0	; select bank0
 18822  1426  00AC               	movwf	setBuz@count
 18823                           
 18824                           ;Buzzer_B1.c: 23: time /= 20;
 18825  1427  3014               	movlw	20
 18826  1428  00A0               	movwf	___awdiv@divisor
 18827  1429  3000               	movlw	0
 18828  142A  00A1               	movwf	___awdiv@divisor+1
 18829  142B  082A               	movf	setBuz@time+1,w
 18830  142C  01A3               	clrf	___awdiv@dividend+1
 18831  142D  07A3               	addwf	___awdiv@dividend+1,f
 18832  142E  0829               	movf	setBuz@time,w
 18833  142F  01A2               	clrf	___awdiv@dividend
 18834  1430  07A2               	addwf	___awdiv@dividend,f
 18835  1431  3193  237B  3194   	fcall	___awdiv
 18836  1434  0020               	movlb	0	; select bank0
 18837  1435  0821               	movf	?___awdiv+1,w
 18838  1436  01AA               	clrf	setBuz@time+1
 18839  1437  07AA               	addwf	setBuz@time+1,f
 18840  1438  0820               	movf	?___awdiv,w
 18841  1439  01A9               	clrf	setBuz@time
 18842  143A  07A9               	addwf	setBuz@time,f
 18843                           
 18844                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18845  143B  0022               	movlb	2	; select bank2
 18846  143C  1C20               	btfss	_Buz1^(0+256),0
 18847  143D  0008               	return
 18848                           
 18849                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18850  143E  18A0               	btfsc	_Buz1^(0+256),1
 18851  143F  2C56               	goto	l86
 18852                           
 18853                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18854  1440  14A0               	bsf	_Buz1^(0+256),1
 18855                           
 18856                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18857  1441  01A1               	clrf	(_Buz1^(0+256)+1)
 18858  1442  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18859                           
 18860                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18861  1443  0020               	movlb	0	; select bank0
 18862  1444  082C               	movf	setBuz@count,w
 18863  1445  00AB               	movwf	??_setBuz
 18864  1446  082B               	movf	??_setBuz,w
 18865  1447  0022               	movlb	2	; select bank2
 18866  1448  00A3               	movwf	(_Buz1^(0+256)+3)
 18867                           
 18868                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18869  1449  0020               	movlb	0	; select bank0
 18870  144A  082A               	movf	setBuz@time+1,w
 18871  144B  0022               	movlb	2	; select bank2
 18872  144C  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18873  144D  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18874  144E  0020               	movlb	0	; select bank0
 18875  144F  0829               	movf	setBuz@time,w
 18876  1450  0022               	movlb	2	; select bank2
 18877  1451  01A6               	clrf	(_Buz1^(0+256)+6)
 18878  1452  07A6               	addwf	(_Buz1^(0+256)+6),f
 18879                           
 18880                           ;Buzzer_B1.c: 30: RB3 = 1;
 18881  1453  0020               	movlb	0	; select bank0
 18882  1454  158D               	bsf	13,3	;volatile
 18883                           
 18884                           ;Buzzer_B1.c: 31: } else {
 18885  1455  0008               	return
 18886  1456                     l86:	
 18887                           
 18888                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18889  1456  19A0               	btfsc	_Buz1^(0+256),3
 18890  1457  2C6A               	goto	l88
 18891                           
 18892                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18893  1458  15A0               	bsf	_Buz1^(0+256),3
 18894                           
 18895                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18896  1459  0020               	movlb	0	; select bank0
 18897  145A  082C               	movf	setBuz@count,w
 18898  145B  00AB               	movwf	??_setBuz
 18899  145C  082B               	movf	??_setBuz,w
 18900  145D  0022               	movlb	2	; select bank2
 18901  145E  00A4               	movwf	(_Buz1^(0+256)+4)
 18902                           
 18903                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18904  145F  0020               	movlb	0	; select bank0
 18905  1460  082A               	movf	setBuz@time+1,w
 18906  1461  0022               	movlb	2	; select bank2
 18907  1462  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18908  1463  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18909  1464  0020               	movlb	0	; select bank0
 18910  1465  0829               	movf	setBuz@time,w
 18911  1466  0022               	movlb	2	; select bank2
 18912  1467  01A8               	clrf	(_Buz1^(0+256)+8)
 18913  1468  07A8               	addwf	(_Buz1^(0+256)+8),f
 18914                           
 18915                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18916  1469  0008               	return
 18917  146A                     l88:	
 18918  146A  1A20               	btfsc	_Buz1^(0+256),4
 18919  146B  0008               	return
 18920                           
 18921                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18922  146C  1620               	bsf	_Buz1^(0+256),4
 18923                           
 18924                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18925  146D  0020               	movlb	0	; select bank0
 18926  146E  082C               	movf	setBuz@count,w
 18927  146F  00AB               	movwf	??_setBuz
 18928  1470  082B               	movf	??_setBuz,w
 18929  1471  0022               	movlb	2	; select bank2
 18930  1472  00A5               	movwf	(_Buz1^(0+256)+5)
 18931                           
 18932                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18933  1473  0020               	movlb	0	; select bank0
 18934  1474  082A               	movf	setBuz@time+1,w
 18935  1475  0022               	movlb	2	; select bank2
 18936  1476  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18937  1477  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18938  1478  0020               	movlb	0	; select bank0
 18939  1479  0829               	movf	setBuz@time,w
 18940  147A  0022               	movlb	2	; select bank2
 18941  147B  01AA               	clrf	(_Buz1^(0+256)+10)
 18942  147C  07AA               	addwf	(_Buz1^(0+256)+10),f
 18943  147D  0008               	return
 18944  147E                     __end_of_setBuz:	
 18945                           
 18946                           	psect	text133
 18947  137B                     __ptext133:	
 18948 ;; *************** function ___awdiv *****************
 18949 ;; Defined at:
 18950 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18951 ;; Parameters:    Size  Location     Type
 18952 ;;  divisor         2    0[BANK0 ] int 
 18953 ;;  dividend        2    2[BANK0 ] int 
 18954 ;; Auto vars:     Size  Location     Type
 18955 ;;  quotient        2    7[BANK0 ] int 
 18956 ;;  sign            1    6[BANK0 ] unsigned char 
 18957 ;;  counter         1    5[BANK0 ] unsigned char 
 18958 ;; Return value:  Size  Location     Type
 18959 ;;                  2    0[BANK0 ] int 
 18960 ;; Registers used:
 18961 ;;		wreg, status,2, status,0
 18962 ;; Tracked objects:
 18963 ;;		On entry : 0/0
 18964 ;;		On exit  : 0/0
 18965 ;;		Unchanged: 0/0
 18966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18970 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18971 ;;Total ram usage:        9 bytes
 18972 ;; Hardware stack levels used:    1
 18973 ;; Hardware stack levels required when called:    5
 18974 ;; This function calls:
 18975 ;;		Nothing
 18976 ;; This function is called by:
 18977 ;;		_setBuz
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           
 18982                           ;psect for function ___awdiv
 18983  137B                     ___awdiv:	
 18984                           
 18985                           ;incstack = 0
 18986                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18987  137B  0020               	movlb	0	; select bank0
 18988  137C  01A6               	clrf	___awdiv@sign
 18989  137D  1FA1               	btfss	___awdiv@divisor+1,7
 18990  137E  2B86               	goto	l5837
 18991  137F  09A0               	comf	___awdiv@divisor,f
 18992  1380  09A1               	comf	___awdiv@divisor+1,f
 18993  1381  0AA0               	incf	___awdiv@divisor,f
 18994  1382  1903               	skipnz
 18995  1383  0AA1               	incf	___awdiv@divisor+1,f
 18996  1384  01A6               	clrf	___awdiv@sign
 18997  1385  0AA6               	incf	___awdiv@sign,f
 18998  1386                     l5837:	
 18999  1386  1FA3               	btfss	___awdiv@dividend+1,7
 19000  1387  2B91               	goto	l5843
 19001  1388  09A2               	comf	___awdiv@dividend,f
 19002  1389  09A3               	comf	___awdiv@dividend+1,f
 19003  138A  0AA2               	incf	___awdiv@dividend,f
 19004  138B  1903               	skipnz
 19005  138C  0AA3               	incf	___awdiv@dividend+1,f
 19006  138D  3001               	movlw	1
 19007  138E  00A4               	movwf	??___awdiv
 19008  138F  0824               	movf	??___awdiv,w
 19009  1390  06A6               	xorwf	___awdiv@sign,f
 19010  1391                     l5843:	
 19011  1391  01A7               	clrf	___awdiv@quotient
 19012  1392  01A8               	clrf	___awdiv@quotient+1
 19013  1393  0821               	movf	___awdiv@divisor+1,w
 19014  1394  0420               	iorwf	___awdiv@divisor,w
 19015  1395  1903               	skipnz
 19016  1396  2BC0               	goto	l5865
 19017  1397  01A5               	clrf	___awdiv@counter
 19018  1398  0AA5               	incf	___awdiv@counter,f
 19019  1399                     l5853:	
 19020  1399  1BA1               	btfsc	___awdiv@divisor+1,7
 19021  139A  2BA5               	goto	l5855
 19022  139B  3001               	movlw	1
 19023  139C                     u4545:	
 19024  139C  35A0               	lslf	___awdiv@divisor,f
 19025  139D  0DA1               	rlf	___awdiv@divisor+1,f
 19026  139E  0B89               	decfsz	9,f
 19027  139F  2B9C               	goto	u4545
 19028  13A0  3001               	movlw	1
 19029  13A1  00A4               	movwf	??___awdiv
 19030  13A2  0824               	movf	??___awdiv,w
 19031  13A3  07A5               	addwf	___awdiv@counter,f
 19032  13A4  2B99               	goto	l5853
 19033  13A5                     l5855:	
 19034  13A5  3001               	movlw	1
 19035  13A6                     u4565:	
 19036  13A6  35A7               	lslf	___awdiv@quotient,f
 19037  13A7  0DA8               	rlf	___awdiv@quotient+1,f
 19038  13A8  0B89               	decfsz	9,f
 19039  13A9  2BA6               	goto	u4565
 19040  13AA  0821               	movf	___awdiv@divisor+1,w
 19041  13AB  0223               	subwf	___awdiv@dividend+1,w
 19042  13AC  1D03               	skipz
 19043  13AD  2BB0               	goto	u4575
 19044  13AE  0820               	movf	___awdiv@divisor,w
 19045  13AF  0222               	subwf	___awdiv@dividend,w
 19046  13B0                     u4575:	
 19047  13B0  1C03               	skipc
 19048  13B1  2BB7               	goto	l5861
 19049  13B2  0820               	movf	___awdiv@divisor,w
 19050  13B3  02A2               	subwf	___awdiv@dividend,f
 19051  13B4  0821               	movf	___awdiv@divisor+1,w
 19052  13B5  3BA3               	subwfb	___awdiv@dividend+1,f
 19053  13B6  1427               	bsf	___awdiv@quotient,0
 19054  13B7                     l5861:	
 19055  13B7  3001               	movlw	1
 19056  13B8                     u4585:	
 19057  13B8  36A1               	lsrf	___awdiv@divisor+1,f
 19058  13B9  0CA0               	rrf	___awdiv@divisor,f
 19059  13BA  0B89               	decfsz	9,f
 19060  13BB  2BB8               	goto	u4585
 19061  13BC  3001               	movlw	1
 19062  13BD  02A5               	subwf	___awdiv@counter,f
 19063  13BE  1D03               	btfss	3,2
 19064  13BF  2BA5               	goto	l5855
 19065  13C0                     l5865:	
 19066  13C0  0826               	movf	___awdiv@sign,w
 19067  13C1  1903               	btfsc	3,2
 19068  13C2  2BC8               	goto	l5869
 19069  13C3  09A7               	comf	___awdiv@quotient,f
 19070  13C4  09A8               	comf	___awdiv@quotient+1,f
 19071  13C5  0AA7               	incf	___awdiv@quotient,f
 19072  13C6  1903               	skipnz
 19073  13C7  0AA8               	incf	___awdiv@quotient+1,f
 19074  13C8                     l5869:	
 19075  13C8  0828               	movf	___awdiv@quotient+1,w
 19076  13C9  01A1               	clrf	?___awdiv+1
 19077  13CA  07A1               	addwf	?___awdiv+1,f
 19078  13CB  0827               	movf	___awdiv@quotient,w
 19079  13CC  01A0               	clrf	?___awdiv
 19080  13CD  07A0               	addwf	?___awdiv,f
 19081  13CE  0008               	return
 19082  13CF                     __end_of___awdiv:	
 19083                           
 19084                           	psect	text134
 19085  11C0                     __ptext134:	
 19086 ;; *************** function _setDimmerLights_SwOff *****************
 19087 ;; Defined at:
 19088 ;;		line 739 in file "../src/Dimmer_B1.c"
 19089 ;; Parameters:    Size  Location     Type
 19090 ;;  sw              1    wreg     unsigned char 
 19091 ;; Auto vars:     Size  Location     Type
 19092 ;;  sw              1    2[BANK0 ] unsigned char 
 19093 ;; Return value:  Size  Location     Type
 19094 ;;		None               void
 19095 ;; Registers used:
 19096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19097 ;; Tracked objects:
 19098 ;;		On entry : 0/0
 19099 ;;		On exit  : 0/0
 19100 ;;		Unchanged: 0/0
 19101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19106 ;;Total ram usage:        1 bytes
 19107 ;; Hardware stack levels used:    1
 19108 ;; Hardware stack levels required when called:    6
 19109 ;; This function calls:
 19110 ;;		_DimmerLights_SelectPointer
 19111 ;; This function is called by:
 19112 ;;		_DlyOff_Main
 19113 ;;		_Exception_Main
 19114 ;;		_setControl_Lights_Table
 19115 ;;		_setRFSW_Control
 19116 ;;		_setRFSW_AdjControl
 19117 ;;		_setSw_Main
 19118 ;; This function uses a non-reentrant model
 19119 ;;
 19120                           
 19121                           
 19122                           ;psect for function _setDimmerLights_SwOff
 19123  11C0                     _setDimmerLights_SwOff:	
 19124                           
 19125                           ;incstack = 0
 19126                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19127                           ;setDimmerLights_SwOff@sw stored from wreg
 19128  11C0  0020               	movlb	0	; select bank0
 19129  11C1  00A2               	movwf	setDimmerLights_SwOff@sw
 19130                           
 19131                           ;Dimmer_B1.c: 740: DimmerLights_SelectPointer(sw);
 19132  11C2  0822               	movf	setDimmerLights_SwOff@sw,w
 19133  11C3  319A  22EA  3191   	fcall	_DimmerLights_SelectPointer
 19134                           
 19135                           ;Dimmer_B1.c: 742: if (DimmerLights->SwFlag == 1) {
 19136  11C6  0021               	movlb	1	; select bank1
 19137  11C7  084C               	movf	_DimmerLights^(0+128),w
 19138  11C8  0086               	movwf	6
 19139  11C9  3001               	movlw	1	; select bank2/3
 19140  11CA  0087               	movwf	7
 19141  11CB  1C01               	btfss	1,0
 19142  11CC  0008               	return
 19143                           
 19144                           ;Dimmer_B1.c: 743: DimmerLights->SwFlag = 0;
 19145  11CD  084C               	movf	_DimmerLights^(0+128),w
 19146  11CE  0086               	movwf	6
 19147  11CF  3001               	movlw	1	; select bank2/3
 19148  11D0  0087               	movwf	7
 19149  11D1  1001               	bcf	1,0
 19150                           
 19151                           ;Dimmer_B1.c: 744: if (DimmerLights->Status == 1) {
 19152  11D2  0A4C               	incf	_DimmerLights^(0+128),w
 19153  11D3  0086               	movwf	6
 19154  11D4  3001               	movlw	1	; select bank2/3
 19155  11D5  0087               	movwf	7
 19156  11D6  1C01               	btfss	1,0
 19157  11D7  29EE               	goto	l6213
 19158                           
 19159                           ;Dimmer_B1.c: 745: if (DimmerLights->DimmingSwFlag == 1) {
 19160  11D8  084C               	movf	_DimmerLights^(0+128),w
 19161  11D9  0086               	movwf	6
 19162  11DA  3001               	movlw	1	; select bank2/3
 19163  11DB  0087               	movwf	7
 19164  11DC  1D81               	btfss	1,3
 19165  11DD  0008               	return
 19166                           
 19167                           ;Dimmer_B1.c: 746: DimmerLights->DimmingSwFlag = 0;
 19168  11DE  084C               	movf	_DimmerLights^(0+128),w
 19169  11DF  0086               	movwf	6
 19170  11E0  3001               	movlw	1	; select bank2/3
 19171  11E1  0087               	movwf	7
 19172  11E2  1181               	bcf	1,3
 19173                           
 19174                           ;Dimmer_B1.c: 748: DimmerLights->DimmingTrigger = 1;
 19175  11E3  084C               	movf	_DimmerLights^(0+128),w
 19176  11E4  0086               	movwf	6
 19177  11E5  3001               	movlw	1	; select bank2/3
 19178  11E6  0087               	movwf	7
 19179  11E7  1601               	bsf	1,4
 19180                           
 19181                           ;Dimmer_B1.c: 749: DimmerLights->DimmingSwitch = 0;
 19182  11E8  084C               	movf	_DimmerLights^(0+128),w
 19183  11E9  0086               	movwf	6
 19184  11EA  3001               	movlw	1	; select bank2/3
 19185  11EB  0087               	movwf	7
 19186  11EC  1281               	bcf	1,5
 19187                           
 19188                           ;Dimmer_B1.c: 750: }
 19189                           ;Dimmer_B1.c: 751: } else {
 19190  11ED  0008               	return
 19191  11EE                     l6213:	
 19192                           
 19193                           ;Dimmer_B1.c: 753: DimmerLights->Trigger = 1;
 19194  11EE  084C               	movf	_DimmerLights^(0+128),w
 19195  11EF  0086               	movwf	6
 19196  11F0  3001               	movlw	1	; select bank2/3
 19197  11F1  0087               	movwf	7
 19198  11F2  1481               	bsf	1,1
 19199                           
 19200                           ;Dimmer_B1.c: 754: DimmerLights->Switch = 0;
 19201  11F3  084C               	movf	_DimmerLights^(0+128),w
 19202  11F4  0086               	movwf	6
 19203  11F5  3001               	movlw	1	; select bank2/3
 19204  11F6  0087               	movwf	7
 19205  11F7  1101               	bcf	1,2
 19206  11F8  0008               	return
 19207  11F9                     __end_of_setDimmerLights_SwOff:	
 19208                           
 19209                           	psect	text135
 19210  1BB8                     __ptext135:	
 19211 ;; *************** function _getDimmerLights_Status *****************
 19212 ;; Defined at:
 19213 ;;		line 1080 in file "../src/Dimmer_B1.c"
 19214 ;; Parameters:    Size  Location     Type
 19215 ;;  lights          1    wreg     unsigned char 
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;  lights          1    2[BANK0 ] unsigned char 
 19218 ;;  status          1    3[BANK0 ] unsigned char 
 19219 ;; Return value:  Size  Location     Type
 19220 ;;                  1    wreg      unsigned char 
 19221 ;; Registers used:
 19222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19223 ;; Tracked objects:
 19224 ;;		On entry : 0/0
 19225 ;;		On exit  : 0/0
 19226 ;;		Unchanged: 0/0
 19227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;Total ram usage:        2 bytes
 19233 ;; Hardware stack levels used:    1
 19234 ;; Hardware stack levels required when called:    6
 19235 ;; This function calls:
 19236 ;;		_DimmerLights_SelectPointer
 19237 ;; This function is called by:
 19238 ;;		_DlyOff_Main
 19239 ;;		_Exception_Main
 19240 ;;		_setControl_Lights_Table
 19241 ;;		_setRFSW_Control
 19242 ;;		_setRFSW_AdjControl
 19243 ;;		_setRF_AdjControl
 19244 ;; This function uses a non-reentrant model
 19245 ;;
 19246                           
 19247                           
 19248                           ;psect for function _getDimmerLights_Status
 19249  1BB8                     _getDimmerLights_Status:	
 19250                           
 19251                           ;incstack = 0
 19252                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19253                           ;getDimmerLights_Status@lights stored from wreg
 19254  1BB8  0020               	movlb	0	; select bank0
 19255  1BB9  00A2               	movwf	getDimmerLights_Status@lights
 19256                           
 19257                           ;Dimmer_B1.c: 1081: DimmerLights_SelectPointer(lights);
 19258  1BBA  0822               	movf	getDimmerLights_Status@lights,w
 19259  1BBB  319A  22EA         	fcall	_DimmerLights_SelectPointer
 19260                           
 19261                           ;Dimmer_B1.c: 1082: char status = DimmerLights->Status == 1 ? 1 : 0;
 19262  1BBD  0021               	movlb	1	; select bank1
 19263  1BBE  0A4C               	incf	_DimmerLights^(0+128),w
 19264  1BBF  0086               	movwf	6
 19265  1BC0  3001               	movlw	1	; select bank2/3
 19266  1BC1  0087               	movwf	7
 19267  1BC2  3000               	movlw	0
 19268  1BC3  1801               	btfsc	1,0
 19269  1BC4  3001               	movlw	1
 19270  1BC5  0020               	movlb	0	; select bank0
 19271  1BC6  00A3               	movwf	getDimmerLights_Status@status
 19272                           
 19273                           ;Dimmer_B1.c: 1083: return status;
 19274  1BC7  0823               	movf	getDimmerLights_Status@status,w
 19275  1BC8  0008               	return
 19276  1BC9                     __end_of_getDimmerLights_Status:	
 19277                           
 19278                           	psect	text136
 19279  1AEA                     __ptext136:	
 19280 ;; *************** function _DimmerLights_SelectPointer *****************
 19281 ;; Defined at:
 19282 ;;		line 620 in file "../src/Dimmer_B1.c"
 19283 ;; Parameters:    Size  Location     Type
 19284 ;;  lights          1    wreg     unsigned char 
 19285 ;; Auto vars:     Size  Location     Type
 19286 ;;  lights          1    1[BANK0 ] unsigned char 
 19287 ;; Return value:  Size  Location     Type
 19288 ;;		None               void
 19289 ;; Registers used:
 19290 ;;		wreg
 19291 ;; Tracked objects:
 19292 ;;		On entry : 0/0
 19293 ;;		On exit  : 0/0
 19294 ;;		Unchanged: 0/0
 19295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;Total ram usage:        2 bytes
 19301 ;; Hardware stack levels used:    1
 19302 ;; Hardware stack levels required when called:    5
 19303 ;; This function calls:
 19304 ;;		Nothing
 19305 ;; This function is called by:
 19306 ;;		_setDimmerLights_SwOn
 19307 ;;		_setDimmerLights_SwOff
 19308 ;;		_setDimmerLights_DimmingOn
 19309 ;;		_setDimmerLights_Main
 19310 ;;		_getDimmerLights_Status
 19311 ;;		_setDimmerLights_DimmingRun
 19312 ;;		_setRF_AdjControl
 19313 ;;		_setDimmerLights_Status
 19314 ;; This function uses a non-reentrant model
 19315 ;;
 19316                           
 19317                           
 19318                           ;psect for function _DimmerLights_SelectPointer
 19319  1AEA                     _DimmerLights_SelectPointer:	
 19320                           
 19321                           ;incstack = 0
 19322                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19323                           ;DimmerLights_SelectPointer@lights stored from wreg
 19324  1AEA  0020               	movlb	0	; select bank0
 19325  1AEB  00A1               	movwf	DimmerLights_SelectPointer@lights
 19326                           
 19327                           ;Dimmer_B1.c: 622: if (lights == 1) {
 19328  1AEC  0821               	movf	DimmerLights_SelectPointer@lights,w
 19329  1AED  3A01               	xorlw	1
 19330  1AEE  1D03               	skipz
 19331  1AEF  0008               	return
 19332                           
 19333                           ;Dimmer_B1.c: 623: DimmerLights = &DimmerLights1;
 19334  1AF0  3060               	movlw	_DimmerLights1& (0+255)
 19335  1AF1  00A0               	movwf	??_DimmerLights_SelectPointer
 19336  1AF2  0820               	movf	??_DimmerLights_SelectPointer,w
 19337  1AF3  0021               	movlb	1	; select bank1
 19338  1AF4  00CC               	movwf	_DimmerLights^(0+128)
 19339  1AF5  0008               	return
 19340  1AF6                     __end_of_DimmerLights_SelectPointer:	
 19341                           
 19342                           	psect	text137
 19343  1A2A                     __ptext137:	
 19344 ;; *************** function _DelayOff_Initialization *****************
 19345 ;; Defined at:
 19346 ;;		line 26 in file "../src/DelayOff_B1.c"
 19347 ;; Parameters:    Size  Location     Type
 19348 ;;		None
 19349 ;; Auto vars:     Size  Location     Type
 19350 ;;		None
 19351 ;; Return value:  Size  Location     Type
 19352 ;;		None               void
 19353 ;; Registers used:
 19354 ;;		wreg, status,2, status,0, pclath, cstack
 19355 ;; Tracked objects:
 19356 ;;		On entry : 0/0
 19357 ;;		On exit  : 0/0
 19358 ;;		Unchanged: 0/0
 19359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19364 ;;Total ram usage:        0 bytes
 19365 ;; Hardware stack levels used:    1
 19366 ;; Hardware stack levels required when called:    7
 19367 ;; This function calls:
 19368 ;;		_DlyOff_Initialization
 19369 ;; This function is called by:
 19370 ;;		_main
 19371 ;; This function uses a non-reentrant model
 19372 ;;
 19373                           
 19374                           
 19375                           ;psect for function _DelayOff_Initialization
 19376  1A2A                     _DelayOff_Initialization:	
 19377                           
 19378                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19379                           
 19380                           ;incstack = 0
 19381                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19382  1A2A  3001               	movlw	1
 19383  1A2B  319A  224E         	fcall	_DlyOff_Initialization
 19384  1A2D  0008               	return
 19385  1A2E                     __end_of_DelayOff_Initialization:	
 19386                           
 19387                           	psect	text138
 19388  1A4E                     __ptext138:	
 19389 ;; *************** function _DlyOff_Initialization *****************
 19390 ;; Defined at:
 19391 ;;		line 56 in file "../src/DelayOff_B1.c"
 19392 ;; Parameters:    Size  Location     Type
 19393 ;;  sw              1    wreg     unsigned char 
 19394 ;; Auto vars:     Size  Location     Type
 19395 ;;  sw              1    2[BANK0 ] unsigned char 
 19396 ;; Return value:  Size  Location     Type
 19397 ;;		None               void
 19398 ;; Registers used:
 19399 ;;		wreg, status,2, status,0, pclath, cstack
 19400 ;; Tracked objects:
 19401 ;;		On entry : 0/0
 19402 ;;		On exit  : 0/0
 19403 ;;		Unchanged: 0/0
 19404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19409 ;;Total ram usage:        1 bytes
 19410 ;; Hardware stack levels used:    1
 19411 ;; Hardware stack levels required when called:    6
 19412 ;; This function calls:
 19413 ;;		_DelayOffPointSelect
 19414 ;; This function is called by:
 19415 ;;		_DelayOff_Initialization
 19416 ;; This function uses a non-reentrant model
 19417 ;;
 19418                           
 19419                           
 19420                           ;psect for function _DlyOff_Initialization
 19421  1A4E                     _DlyOff_Initialization:	
 19422                           
 19423                           ;incstack = 0
 19424                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19425                           ;DlyOff_Initialization@sw stored from wreg
 19426  1A4E  0020               	movlb	0	; select bank0
 19427  1A4F  00A2               	movwf	DlyOff_Initialization@sw
 19428                           
 19429                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19430  1A50  0822               	movf	DlyOff_Initialization@sw,w
 19431  1A51  319A  22DE         	fcall	_DelayOffPointSelect
 19432  1A53  0008               	return
 19433  1A54                     __end_of_DlyOff_Initialization:	
 19434                           
 19435                           	psect	text139
 19436  1ADE                     __ptext139:	
 19437 ;; *************** function _DelayOffPointSelect *****************
 19438 ;; Defined at:
 19439 ;;		line 7 in file "../src/DelayOff_B1.c"
 19440 ;; Parameters:    Size  Location     Type
 19441 ;;  sw              1    wreg     unsigned char 
 19442 ;; Auto vars:     Size  Location     Type
 19443 ;;  sw              1    1[BANK0 ] unsigned char 
 19444 ;; Return value:  Size  Location     Type
 19445 ;;		None               void
 19446 ;; Registers used:
 19447 ;;		wreg
 19448 ;; Tracked objects:
 19449 ;;		On entry : 0/0
 19450 ;;		On exit  : 0/0
 19451 ;;		Unchanged: 0/0
 19452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19457 ;;Total ram usage:        2 bytes
 19458 ;; Hardware stack levels used:    1
 19459 ;; Hardware stack levels required when called:    5
 19460 ;; This function calls:
 19461 ;;		Nothing
 19462 ;; This function is called by:
 19463 ;;		_DlyOff_Initialization
 19464 ;;		_DlyOff_Main
 19465 ;;		_setDelayOff_GO
 19466 ;;		_getDelayOff_GO
 19467 ;; This function uses a non-reentrant model
 19468 ;;
 19469                           
 19470                           
 19471                           ;psect for function _DelayOffPointSelect
 19472  1ADE                     _DelayOffPointSelect:	
 19473                           
 19474                           ;incstack = 0
 19475                           ; Regs used in _DelayOffPointSelect: [wreg]
 19476                           ;DelayOffPointSelect@sw stored from wreg
 19477  1ADE  0020               	movlb	0	; select bank0
 19478  1ADF  00A1               	movwf	DelayOffPointSelect@sw
 19479                           
 19480                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19481  1AE0  0821               	movf	DelayOffPointSelect@sw,w
 19482  1AE1  3A01               	xorlw	1
 19483  1AE2  1D03               	skipz
 19484  1AE3  0008               	return
 19485                           
 19486                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19487  1AE4  30C7               	movlw	_DlySw1& (0+255)
 19488  1AE5  00A0               	movwf	??_DelayOffPointSelect
 19489  1AE6  0820               	movf	??_DelayOffPointSelect,w
 19490  1AE7  0021               	movlb	1	; select bank1
 19491  1AE8  00CA               	movwf	_DelayOff^(0+128)
 19492  1AE9  0008               	return
 19493  1AEA                     __end_of_DelayOffPointSelect:	
 19494                           
 19495                           	psect	text140
 19496  1331                     __ptext140:	
 19497 ;; *************** function _Buzzer_Main *****************
 19498 ;; Defined at:
 19499 ;;		line 46 in file "../src/Buzzer_B1.c"
 19500 ;; Parameters:    Size  Location     Type
 19501 ;;		None
 19502 ;; Auto vars:     Size  Location     Type
 19503 ;;		None
 19504 ;; Return value:  Size  Location     Type
 19505 ;;		None               void
 19506 ;; Registers used:
 19507 ;;		wreg, status,2, status,0
 19508 ;; Tracked objects:
 19509 ;;		On entry : 0/0
 19510 ;;		On exit  : 0/0
 19511 ;;		Unchanged: 0/0
 19512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19517 ;;Total ram usage:        1 bytes
 19518 ;; Hardware stack levels used:    1
 19519 ;; Hardware stack levels required when called:    5
 19520 ;; This function calls:
 19521 ;;		Nothing
 19522 ;; This function is called by:
 19523 ;;		_main
 19524 ;; This function uses a non-reentrant model
 19525 ;;
 19526                           
 19527                           
 19528                           ;psect for function _Buzzer_Main
 19529  1331                     _Buzzer_Main:	
 19530                           
 19531                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19532                           
 19533                           ;incstack = 0
 19534                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19535  1331  0022               	movlb	2	; select bank2
 19536  1332  1CA0               	btfss	_Buz1^(0+256),1
 19537  1333  0008               	return
 19538                           
 19539                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19540  1334  3001               	movlw	1
 19541  1335  07A1               	addwf	(_Buz1^(0+256)+1),f
 19542  1336  3000               	movlw	0
 19543  1337  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19544                           
 19545                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19546  1338  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19547  1339  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19548  133A  1D03               	skipz
 19549  133B  2B3E               	goto	u7775
 19550  133C  0826               	movf	(_Buz1^(0+256)+6),w
 19551  133D  0221               	subwf	(_Buz1^(0+256)+1),w
 19552  133E                     u7775:	
 19553  133E  1C03               	skipc
 19554  133F  0008               	return
 19555                           
 19556                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19557  1340  01A1               	clrf	(_Buz1^(0+256)+1)
 19558  1341  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19559                           
 19560                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19561  1342  12A0               	bcf	_Buz1^(0+256),5
 19562  1343  0020               	movlb	0	; select bank0
 19563  1344  1D8D               	btfss	13,3	;volatile
 19564  1345  2B48               	goto	l7855
 19565  1346  0022               	movlb	2	; select bank2
 19566  1347  16A0               	bsf	_Buz1^(0+256),5
 19567  1348                     l7855:	
 19568                           
 19569                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19570  1348  0022               	movlb	2	; select bank2
 19571  1349  1AA0               	btfsc	_Buz1^(0+256),5
 19572  134A  2B74               	goto	l96
 19573                           
 19574                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19575  134B  08A3               	movf	(_Buz1^(0+256)+3),f
 19576  134C  1D03               	skipz
 19577  134D  2B70               	goto	l97
 19578                           
 19579                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19580  134E  1DA0               	btfss	_Buz1^(0+256),3
 19581  134F  2B5E               	goto	l98
 19582                           
 19583                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19584  1350  11A0               	bcf	_Buz1^(0+256),3
 19585                           
 19586                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19587  1351  0824               	movf	(_Buz1^(0+256)+4),w
 19588  1352  0020               	movlb	0	; select bank0
 19589  1353  00A0               	movwf	??_Buzzer_Main
 19590  1354  0820               	movf	??_Buzzer_Main,w
 19591  1355  0022               	movlb	2	; select bank2
 19592  1356  00A3               	movwf	(_Buz1^(0+256)+3)
 19593                           
 19594                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19595  1357  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19596  1358  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19597  1359  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19598  135A  0828               	movf	(_Buz1^(0+256)+8),w
 19599  135B  01A6               	clrf	(_Buz1^(0+256)+6)
 19600  135C  07A6               	addwf	(_Buz1^(0+256)+6),f
 19601                           
 19602                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19603  135D  0008               	return
 19604  135E                     l98:	
 19605  135E  1E20               	btfss	_Buz1^(0+256),4
 19606  135F  2B6E               	goto	l100
 19607                           
 19608                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19609  1360  1220               	bcf	_Buz1^(0+256),4
 19610                           
 19611                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19612  1361  0825               	movf	(_Buz1^(0+256)+5),w
 19613  1362  0020               	movlb	0	; select bank0
 19614  1363  00A0               	movwf	??_Buzzer_Main
 19615  1364  0820               	movf	??_Buzzer_Main,w
 19616  1365  0022               	movlb	2	; select bank2
 19617  1366  00A3               	movwf	(_Buz1^(0+256)+3)
 19618                           
 19619                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19620  1367  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19621  1368  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19622  1369  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19623  136A  082A               	movf	(_Buz1^(0+256)+10),w
 19624  136B  01A6               	clrf	(_Buz1^(0+256)+6)
 19625  136C  07A6               	addwf	(_Buz1^(0+256)+6),f
 19626                           
 19627                           ;Buzzer_B1.c: 62: } else {
 19628  136D  0008               	return
 19629  136E                     l100:	
 19630                           
 19631                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19632  136E  10A0               	bcf	_Buz1^(0+256),1
 19633                           
 19634                           ;Buzzer_B1.c: 64: }
 19635                           ;Buzzer_B1.c: 65: } else {
 19636  136F  0008               	return
 19637  1370                     l97:	
 19638                           
 19639                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19640  1370  16A0               	bsf	_Buz1^(0+256),5
 19641                           
 19642                           ;Buzzer_B1.c: 68: RB3 = 1;
 19643  1371  0020               	movlb	0	; select bank0
 19644  1372  158D               	bsf	13,3	;volatile
 19645                           
 19646                           ;Buzzer_B1.c: 69: }
 19647                           ;Buzzer_B1.c: 70: } else {
 19648  1373  0008               	return
 19649  1374                     l96:	
 19650                           
 19651                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19652  1374  12A0               	bcf	_Buz1^(0+256),5
 19653                           
 19654                           ;Buzzer_B1.c: 73: RB3 = 0;
 19655  1375  0020               	movlb	0	; select bank0
 19656  1376  118D               	bcf	13,3	;volatile
 19657                           
 19658                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19659  1377  3001               	movlw	1
 19660  1378  0022               	movlb	2	; select bank2
 19661  1379  02A3               	subwf	(_Buz1^(0+256)+3),f
 19662  137A  0008               	return
 19663  137B                     __end_of_Buzzer_Main:	
 19664                           
 19665                           	psect	text141
 19666  1A18                     __ptext141:	
 19667 ;; *************** function _Buzzer_Initialization *****************
 19668 ;; Defined at:
 19669 ;;		line 11 in file "../src/Buzzer_B1.c"
 19670 ;; Parameters:    Size  Location     Type
 19671 ;;		None
 19672 ;; Auto vars:     Size  Location     Type
 19673 ;;		None
 19674 ;; Return value:  Size  Location     Type
 19675 ;;		None               void
 19676 ;; Registers used:
 19677 ;;		None
 19678 ;; Tracked objects:
 19679 ;;		On entry : 0/0
 19680 ;;		On exit  : 0/0
 19681 ;;		Unchanged: 0/0
 19682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;Total ram usage:        0 bytes
 19688 ;; Hardware stack levels used:    1
 19689 ;; Hardware stack levels required when called:    5
 19690 ;; This function calls:
 19691 ;;		Nothing
 19692 ;; This function is called by:
 19693 ;;		_main
 19694 ;; This function uses a non-reentrant model
 19695 ;;
 19696                           
 19697                           
 19698                           ;psect for function _Buzzer_Initialization
 19699  1A18                     _Buzzer_Initialization:	
 19700                           
 19701                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19702                           
 19703                           ;incstack = 0
 19704                           ; Regs used in _Buzzer_Initialization: []
 19705  1A18  0022               	movlb	2	; select bank2
 19706  1A19  1420               	bsf	_Buz1^(0+256),0
 19707  1A1A  0008               	return
 19708  1A1B                     __end_of_Buzzer_Initialization:	
 19709                           
 19710                           	psect	intentry
 19711  0004                     __pintentry:	
 19712 ;; *************** function _ISR *****************
 19713 ;; Defined at:
 19714 ;;		line 116 in file "../src/MCU_B1.c"
 19715 ;; Parameters:    Size  Location     Type
 19716 ;;		None
 19717 ;; Auto vars:     Size  Location     Type
 19718 ;;		None
 19719 ;; Return value:  Size  Location     Type
 19720 ;;		None               void
 19721 ;; Registers used:
 19722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19723 ;; Tracked objects:
 19724 ;;		On entry : 0/0
 19725 ;;		On exit  : 0/0
 19726 ;;		Unchanged: 0/0
 19727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19731 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19732 ;;Total ram usage:        1 bytes
 19733 ;; Hardware stack levels used:    1
 19734 ;; Hardware stack levels required when called:    4
 19735 ;; This function calls:
 19736 ;;		_IOC_ISR
 19737 ;;		_TMR1_ISR
 19738 ;; This function is called by:
 19739 ;;		Interrupt level 1
 19740 ;; This function uses a non-reentrant model
 19741 ;;
 19742                           
 19743  0004                     _ISR:	
 19744                           
 19745                           ;incstack = 0
 19746                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19747  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19748  0005  3180               	pagesel	$
 19749  0006  0020               	movlb	0	; select bank0
 19750  0007  087F               	movf	127,w
 19751  0008  00FC               	movwf	??_ISR
 19752                           
 19753                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19754  0009  0021               	movlb	1	; select bank1
 19755  000A  1C11               	btfss	17,0	;volatile
 19756  000B  2812               	goto	i1l8421
 19757  000C  0020               	movlb	0	; select bank0
 19758  000D  1C11               	btfss	17,0	;volatile
 19759  000E  2812               	goto	i1l8421
 19760                           
 19761                           ;MCU_B1.c: 126: TMR1_ISR();
 19762  000F  319E  26D5  3180   	fcall	_TMR1_ISR
 19763  0012                     i1l8421:	
 19764                           
 19765                           ;MCU_B1.c: 127: }
 19766                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19767  0012  198B               	btfsc	11,3	;volatile
 19768  0013  1C0B               	btfss	11,0	;volatile
 19769  0014  281A               	goto	i1l1207
 19770  0015  0027               	movlb	7	; select bank7
 19771  0016  1D16               	btfss	22,2	;volatile
 19772  0017  281A               	goto	i1l1207
 19773                           
 19774                           ;MCU_B1.c: 139: IOC_ISR();
 19775  0018  319A  228D         	fcall	_IOC_ISR
 19776  001A                     i1l1207:	
 19777                           ;MCU_B1.c: 140: }
 19778                           ;MCU_B1.c: 148: return;
 19779                           
 19780  001A  087C               	movf	??_ISR,w
 19781  001B  0020               	movlb	0	; select bank0
 19782  001C  00FF               	movwf	127
 19783  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19784  001E  0009               	retfie
 19785  001F                     __end_of_ISR:	
 19786                           
 19787                           	psect	text143
 19788  1ED5                     __ptext143:	
 19789 ;; *************** function _TMR1_ISR *****************
 19790 ;; Defined at:
 19791 ;;		line 236 in file "../src/MCU_B1.c"
 19792 ;; Parameters:    Size  Location     Type
 19793 ;;		None
 19794 ;; Auto vars:     Size  Location     Type
 19795 ;;		None
 19796 ;; Return value:  Size  Location     Type
 19797 ;;		None               void
 19798 ;; Registers used:
 19799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19800 ;; Tracked objects:
 19801 ;;		On entry : 0/0
 19802 ;;		On exit  : 0/0
 19803 ;;		Unchanged: 0/0
 19804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19809 ;;Total ram usage:        0 bytes
 19810 ;; Hardware stack levels used:    1
 19811 ;; Hardware stack levels required when called:    1
 19812 ;; This function calls:
 19813 ;;		_DimmerLights_TMR_1
 19814 ;; This function is called by:
 19815 ;;		_ISR
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           
 19820                           ;psect for function _TMR1_ISR
 19821  1ED5                     _TMR1_ISR:	
 19822                           
 19823                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19824                           
 19825                           ;incstack = 0
 19826                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19827  1ED5  3189  2124  319E   	fcall	_DimmerLights_TMR_1
 19828                           
 19829                           ;MCU_B1.c: 268: Timer1.Count++;
 19830  1ED8  3001               	movlw	1
 19831  1ED9  0022               	movlb	2	; select bank2
 19832  1EDA  07B2               	addwf	(_Timer1^(0+256)+1),f
 19833  1EDB  3000               	movlw	0
 19834  1EDC  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19835                           
 19836                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19837  1EDD  3001               	movlw	1
 19838  1EDE  3E31               	addlw	_Timer1& (0+255)
 19839  1EDF  0086               	movwf	6
 19840  1EE0  3001               	movlw	1	; select bank2/3
 19841  1EE1  0087               	movwf	7
 19842  1EE2  3F40               	moviw [0]fsr1
 19843  1EE3  3AC8               	xorlw	200
 19844  1EE4  1D03               	skipz
 19845  1EE5  2EE8               	goto	u787_25
 19846  1EE6  3F41               	moviw [1]fsr1
 19847  1EE7  3A00               	xorlw	0
 19848  1EE8                     u787_25:	
 19849  1EE8  1D03               	skipz
 19850  1EE9  2EED               	goto	i1l7909
 19851                           
 19852                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19853  1EEA  01B2               	clrf	(_Timer1^(0+256)+1)
 19854  1EEB  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19855                           
 19856                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19857  1EEC  1431               	bsf	_Timer1^(0+256),0
 19858  1EED                     i1l7909:	
 19859                           
 19860                           ;MCU_B1.c: 272: }
 19861                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19862  1EED  30FA               	movlw	250
 19863  1EEE  0020               	movlb	0	; select bank0
 19864  1EEF  0097               	movwf	23	;volatile
 19865                           
 19866                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19867  1EF0  3038               	movlw	56
 19868  1EF1  0096               	movwf	22	;volatile
 19869                           
 19870                           ;MCU_B1.c: 276: TMR1IF = 0;
 19871  1EF2  1011               	bcf	17,0	;volatile
 19872  1EF3  0008               	return
 19873  1EF4                     __end_of_TMR1_ISR:	
 19874                           
 19875                           	psect	text144
 19876  0924                     __ptext144:	
 19877 ;; *************** function _DimmerLights_TMR_1 *****************
 19878 ;; Defined at:
 19879 ;;		line 1387 in file "../src/Dimmer_B1.c"
 19880 ;; Parameters:    Size  Location     Type
 19881 ;;		None
 19882 ;; Auto vars:     Size  Location     Type
 19883 ;;		None
 19884 ;; Return value:  Size  Location     Type
 19885 ;;		None               void
 19886 ;; Registers used:
 19887 ;;		wreg, status,2, status,0
 19888 ;; Tracked objects:
 19889 ;;		On entry : 0/0
 19890 ;;		On exit  : 0/0
 19891 ;;		Unchanged: 0/0
 19892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19896 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19897 ;;Total ram usage:        1 bytes
 19898 ;; Hardware stack levels used:    1
 19899 ;; This function calls:
 19900 ;;		Nothing
 19901 ;; This function is called by:
 19902 ;;		_TMR1_ISR
 19903 ;; This function uses a non-reentrant model
 19904 ;;
 19905                           
 19906                           
 19907                           ;psect for function _DimmerLights_TMR_1
 19908  0924                     _DimmerLights_TMR_1:	
 19909                           
 19910                           ;Dimmer_B1.c: 1389: if (DimmerIntr1.Start == 1) {
 19911                           
 19912                           ;incstack = 0
 19913                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19914  0924  0021               	movlb	1	; select bank1
 19915  0925  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19916  0926  2949               	goto	i1l842
 19917                           
 19918                           ;Dimmer_B1.c: 1390: DimmerIntr1.Count++;
 19919  0927  3001               	movlw	1
 19920  0928  00F0               	movwf	??_DimmerLights_TMR_1
 19921  0929  0870               	movf	??_DimmerLights_TMR_1,w
 19922  092A  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19923                           
 19924                           ;Dimmer_B1.c: 1392: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19925  092B  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19926  092C  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19927  092D  1D03               	skipz
 19928  092E  2931               	goto	i1l7331
 19929                           
 19930                           ;Dimmer_B1.c: 1393: DimmerIntr1.Count = 0;
 19931  092F  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19932                           
 19933                           ;Dimmer_B1.c: 1394: DimmerIntr1.Start = 0;
 19934  0930  113C               	bcf	_DimmerIntr1^(0+128),2
 19935  0931                     i1l7331:	
 19936                           
 19937                           ;Dimmer_B1.c: 1395: }
 19938                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19939  0931  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19940  0932  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19941  0933  1903               	btfsc	3,2
 19942                           
 19943                           ;Dimmer_B1.c: 1410: if (DimmerIntr1.ControlStatus == 1) {
 19944  0934  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19945  0935  2938               	goto	i1l7337
 19946                           
 19947                           ;Dimmer_B1.c: 1411: RB1 = 0;
 19948  0936  0020               	movlb	0	; select bank0
 19949  0937  108D               	bcf	13,1	;volatile
 19950  0938                     i1l7337:	
 19951                           
 19952                           ;Dimmer_B1.c: 1412: }
 19953                           ;Dimmer_B1.c: 1413: }
 19954                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19955  0938  0021               	movlb	1	; select bank1
 19956  0939  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19957  093A  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19958  093B  1903               	btfsc	3,2
 19959                           
 19960                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 19961  093C  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19962  093D  2940               	goto	i1l7343
 19963                           
 19964                           ;Dimmer_B1.c: 1418: RB1 = 1;
 19965  093E  0020               	movlb	0	; select bank0
 19966  093F  148D               	bsf	13,1	;volatile
 19967  0940                     i1l7343:	
 19968                           
 19969                           ;Dimmer_B1.c: 1419: }
 19970                           ;Dimmer_B1.c: 1420: }
 19971                           ;Dimmer_B1.c: 1423: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19972  0940  0021               	movlb	1	; select bank1
 19973  0941  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19974  0942  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19975  0943  1903               	btfsc	3,2
 19976                           
 19977                           ;Dimmer_B1.c: 1424: if (DimmerIntr1.ControlStatus == 1) {
 19978  0944  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19979  0945  295A               	goto	i1l850
 19980                           
 19981                           ;Dimmer_B1.c: 1425: RB1 = 0;
 19982  0946  0020               	movlb	0	; select bank0
 19983  0947  108D               	bcf	13,1	;volatile
 19984                           
 19985                           ;Dimmer_B1.c: 1426: }
 19986                           ;Dimmer_B1.c: 1429: }
 19987                           ;Dimmer_B1.c: 1431: } else {
 19988  0948  295A               	goto	i1l850
 19989  0949                     i1l842:	
 19990                           
 19991                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.GO == 1) {
 19992  0949  1C3C               	btfss	_DimmerIntr1^(0+128),0
 19993  094A  295A               	goto	i1l850
 19994                           
 19995                           ;Dimmer_B1.c: 1433: DimmerIntr1.Count++;
 19996  094B  3001               	movlw	1
 19997  094C  00F0               	movwf	??_DimmerLights_TMR_1
 19998  094D  0870               	movf	??_DimmerLights_TMR_1,w
 19999  094E  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20000                           
 20001                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.Count == 6) {
 20002  094F  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20003  0950  3A06               	xorlw	6
 20004  0951  1D03               	skipz
 20005  0952  295A               	goto	i1l850
 20006                           
 20007                           ;Dimmer_B1.c: 1435: DimmerIntr1.Count = 0;
 20008  0953  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20009                           
 20010                           ;Dimmer_B1.c: 1436: DimmerIntr1.GO = 0;
 20011  0954  103C               	bcf	_DimmerIntr1^(0+128),0
 20012                           
 20013                           ;Dimmer_B1.c: 1437: DimmerIntr1.Start = 1;
 20014  0955  153C               	bsf	_DimmerIntr1^(0+128),2
 20015                           
 20016                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.ControlStatus == 1) {
 20017  0956  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20018  0957  295A               	goto	i1l850
 20019                           
 20020                           ;Dimmer_B1.c: 1440: RB1 = 1;
 20021  0958  0020               	movlb	0	; select bank0
 20022  0959  148D               	bsf	13,1	;volatile
 20023  095A                     i1l850:	
 20024                           
 20025                           ;Dimmer_B1.c: 1441: }
 20026                           ;Dimmer_B1.c: 1442: }
 20027                           ;Dimmer_B1.c: 1443: }
 20028                           ;Dimmer_B1.c: 1444: }
 20029                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Tune == 1) {
 20030  095A  0021               	movlb	1	; select bank1
 20031  095B  1CBC               	btfss	_DimmerIntr1^(0+128),1
 20032  095C  0008               	return
 20033                           
 20034                           ;Dimmer_B1.c: 1447: DimmerIntr1.Tune = 0;
 20035  095D  10BC               	bcf	_DimmerIntr1^(0+128),1
 20036                           
 20037                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneTime++;
 20038  095E  3001               	movlw	1
 20039  095F  00F0               	movwf	??_DimmerLights_TMR_1
 20040  0960  0870               	movf	??_DimmerLights_TMR_1,w
 20041  0961  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 20042                           
 20043                           ;Dimmer_B1.c: 1449: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20044  0962  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 20045  0963  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 20046  0964  1C03               	skipc
 20047  0965  0008               	return
 20048                           
 20049                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneTime = 0;
 20050  0966  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 20051                           
 20052                           ;Dimmer_B1.c: 1451: DimmerIntr1.TuneGO = 1;
 20053  0967  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 20054                           
 20055                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.Dimming_Sw == 1) {
 20056  0968  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20057  0969  2980               	goto	i1l856
 20058                           
 20059                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.Dimming_Status == 0) {
 20060  096A  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 20061  096B  2977               	goto	i1l7381
 20062                           
 20063                           ;Dimmer_B1.c: 1454: if (DimmerIntr1.DimmingValue < ((char)(84*0.6))) {
 20064  096C  3032               	movlw	50
 20065  096D  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20066  096E  1803               	skipnc
 20067  096F  2975               	goto	i1l858
 20068                           
 20069                           ;Dimmer_B1.c: 1455: DimmerIntr1.DimmingValue++;
 20070  0970  3001               	movlw	1
 20071  0971  00F0               	movwf	??_DimmerLights_TMR_1
 20072  0972  0870               	movf	??_DimmerLights_TMR_1,w
 20073  0973  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20074                           
 20075                           ;Dimmer_B1.c: 1456: } else {
 20076  0974  0008               	return
 20077  0975                     i1l858:	
 20078                           
 20079                           ;Dimmer_B1.c: 1457: DimmerIntr1.Dimming_Status = 1;
 20080  0975  16BC               	bsf	_DimmerIntr1^(0+128),5
 20081                           
 20082                           ;Dimmer_B1.c: 1458: }
 20083                           ;Dimmer_B1.c: 1459: } else {
 20084  0976  0008               	return
 20085  0977                     i1l7381:	
 20086                           
 20087                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 20088  0977  3007               	movlw	7
 20089  0978  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20090  0979  1C03               	skipc
 20091  097A  297E               	goto	i1l861
 20092                           
 20093                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue--;
 20094  097B  3001               	movlw	1
 20095  097C  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20096                           
 20097                           ;Dimmer_B1.c: 1462: } else {
 20098  097D  0008               	return
 20099  097E                     i1l861:	
 20100                           
 20101                           ;Dimmer_B1.c: 1463: DimmerIntr1.Dimming_Status = 0;
 20102  097E  12BC               	bcf	_DimmerIntr1^(0+128),5
 20103                           
 20104                           ;Dimmer_B1.c: 1464: }
 20105                           ;Dimmer_B1.c: 1465: }
 20106                           ;Dimmer_B1.c: 1466: } else if (DimmerIntr1.Dimming_RF == 1) {
 20107  097F  0008               	return
 20108  0980                     i1l856:	
 20109  0980  1F3C               	btfss	_DimmerIntr1^(0+128),6
 20110  0981  0008               	return
 20111                           
 20112                           ;Dimmer_B1.c: 1467: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20113  0982  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 20114  0983  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 20115  0984  1803               	skipnc
 20116  0985  298B               	goto	i1l7389
 20117                           
 20118                           ;Dimmer_B1.c: 1468: DimmerIntr1.DimmingValue++;
 20119  0986  3001               	movlw	1
 20120  0987  00F0               	movwf	??_DimmerLights_TMR_1
 20121  0988  0870               	movf	??_DimmerLights_TMR_1,w
 20122  0989  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 20123                           
 20124                           ;Dimmer_B1.c: 1469: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20125  098A  0008               	return
 20126  098B                     i1l7389:	
 20127  098B  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20128  098C  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 20129  098D  1803               	skipnc
 20130  098E  2992               	goto	i1l867
 20131                           
 20132                           ;Dimmer_B1.c: 1470: DimmerIntr1.DimmingValue--;
 20133  098F  3001               	movlw	1
 20134  0990  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 20135                           
 20136                           ;Dimmer_B1.c: 1471: } else {
 20137  0991  0008               	return
 20138  0992                     i1l867:	
 20139                           
 20140                           ;Dimmer_B1.c: 1472: DimmerIntr1.Dimming_RF = 0;
 20141  0992  133C               	bcf	_DimmerIntr1^(0+128),6
 20142  0993  0008               	return
 20143  0994                     __end_of_DimmerLights_TMR_1:	
 20144                           
 20145                           	psect	text145
 20146  1A8D                     __ptext145:	
 20147 ;; *************** function _IOC_ISR *****************
 20148 ;; Defined at:
 20149 ;;		line 395 in file "../src/MCU_B1.c"
 20150 ;; Parameters:    Size  Location     Type
 20151 ;;		None
 20152 ;; Auto vars:     Size  Location     Type
 20153 ;;		None
 20154 ;; Return value:  Size  Location     Type
 20155 ;;		None               void
 20156 ;; Registers used:
 20157 ;;		wreg, status,2, status,0, pclath, cstack
 20158 ;; Tracked objects:
 20159 ;;		On entry : 0/0
 20160 ;;		On exit  : 0/0
 20161 ;;		Unchanged: 0/0
 20162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20167 ;;Total ram usage:        0 bytes
 20168 ;; Hardware stack levels used:    1
 20169 ;; Hardware stack levels required when called:    3
 20170 ;; This function calls:
 20171 ;;		_DimmerLights_IOC_1
 20172 ;; This function is called by:
 20173 ;;		_ISR
 20174 ;; This function uses a non-reentrant model
 20175 ;;
 20176                           
 20177                           
 20178                           ;psect for function _IOC_ISR
 20179  1A8D                     _IOC_ISR:	
 20180                           
 20181                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20182                           
 20183                           ;incstack = 0
 20184                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20185  1A8D  0021               	movlb	1	; select bank1
 20186  1A8E  1C2F               	btfss	_myMain^(0+128),0
 20187  1A8F  2A92               	goto	i1l7919
 20188                           
 20189                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20190  1A90  3192  2232         	fcall	_DimmerLights_IOC_1
 20191  1A92                     i1l7919:	
 20192                           
 20193                           ;MCU_B1.c: 416: }
 20194                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20195  1A92  0027               	movlb	7	; select bank7
 20196  1A93  1116               	bcf	22,2	;volatile
 20197                           
 20198                           ;MCU_B1.c: 419: IOCIF = 0;
 20199  1A94  100B               	bcf	11,0	;volatile
 20200  1A95  0008               	return
 20201  1A96                     __end_of_IOC_ISR:	
 20202                           
 20203                           	psect	text146
 20204  1232                     __ptext146:	
 20205 ;; *************** function _DimmerLights_IOC_1 *****************
 20206 ;; Defined at:
 20207 ;;		line 1479 in file "../src/Dimmer_B1.c"
 20208 ;; Parameters:    Size  Location     Type
 20209 ;;		None
 20210 ;; Auto vars:     Size  Location     Type
 20211 ;;		None
 20212 ;; Return value:  Size  Location     Type
 20213 ;;		None               void
 20214 ;; Registers used:
 20215 ;;		wreg, status,2, status,0, pclath, cstack
 20216 ;; Tracked objects:
 20217 ;;		On entry : 0/0
 20218 ;;		On exit  : 0/0
 20219 ;;		Unchanged: 0/0
 20220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20224 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20225 ;;Total ram usage:        2 bytes
 20226 ;; Hardware stack levels used:    1
 20227 ;; Hardware stack levels required when called:    2
 20228 ;; This function calls:
 20229 ;;		i1_Division
 20230 ;; This function is called by:
 20231 ;;		_IOC_ISR
 20232 ;; This function uses a non-reentrant model
 20233 ;;
 20234                           
 20235                           
 20236                           ;psect for function _DimmerLights_IOC_1
 20237  1232                     _DimmerLights_IOC_1:	
 20238                           
 20239                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20240                           
 20241                           ;incstack = 0
 20242                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20243  1232  0021               	movlb	1	; select bank1
 20244  1233  193C               	btfsc	_DimmerIntr1^(0+128),2
 20245  1234  0008               	return
 20246  1235  183C               	btfsc	_DimmerIntr1^(0+128),0
 20247  1236  0008               	return
 20248                           
 20249                           ;Dimmer_B1.c: 1495: if (RB2 != DimmerIntr1.Status) {
 20250  1237  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20251  1238  0C89               	rrf	9,f
 20252  1239  3901               	andlw	1
 20253  123A  00FA               	movwf	??_DimmerLights_IOC_1
 20254  123B  3000               	movlw	0
 20255  123C  0020               	movlb	0	; select bank0
 20256  123D  190D               	btfsc	13,2	;volatile
 20257  123E  3001               	movlw	1
 20258  123F  067A               	xorwf	??_DimmerLights_IOC_1,w
 20259  1240  1903               	skipnz
 20260  1241  0008               	return
 20261                           
 20262                           ;Dimmer_B1.c: 1498: DimmerIntr1.Count = 0;
 20263  1242  0021               	movlb	1	; select bank1
 20264  1243  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20265                           
 20266                           ;Dimmer_B1.c: 1499: DimmerIntr1.GO = 1;
 20267  1244  143C               	bsf	_DimmerIntr1^(0+128),0
 20268                           
 20269                           ;Dimmer_B1.c: 1501: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20270  1245  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20271  1246  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20272                           
 20273                           ;Dimmer_B1.c: 1502: DimmerIntr1.Tune = 1;
 20274  1247  14BC               	bsf	_DimmerIntr1^(0+128),1
 20275                           
 20276                           ;Dimmer_B1.c: 1503: }
 20277                           ;Dimmer_B1.c: 1505: if (DimmerIntr1.TuneGO == 1) {
 20278  1248  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20279  1249  2A68               	goto	i1l7417
 20280                           
 20281                           ;Dimmer_B1.c: 1506: DimmerIntr1.TuneGO = 0;
 20282  124A  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20283                           
 20284                           ;Dimmer_B1.c: 1509: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20285  124B  3002               	movlw	2
 20286  124C  00FA               	movwf	??_DimmerLights_IOC_1
 20287  124D  087A               	movf	??_DimmerLights_IOC_1,w
 20288  124E  00F5               	movwf	i1Division@num
 20289  124F  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20290  1250  319B  236E  3192   	fcall	i1_Division
 20291  1253  00FB               	movwf	??_DimmerLights_IOC_1+1
 20292  1254  087B               	movf	??_DimmerLights_IOC_1+1,w
 20293  1255  0021               	movlb	1	; select bank1
 20294  1256  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20295                           
 20296                           ;Dimmer_B1.c: 1510: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20297  1257  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20298  1258  3AFF               	xorlw	255
 20299  1259  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20300  125A  3E3C               	addlw	60
 20301  125B  00FA               	movwf	??_DimmerLights_IOC_1
 20302  125C  087A               	movf	??_DimmerLights_IOC_1,w
 20303  125D  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20304                           
 20305                           ;Dimmer_B1.c: 1511: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20306  125E  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20307  125F  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20308  1260  00FA               	movwf	??_DimmerLights_IOC_1
 20309  1261  087A               	movf	??_DimmerLights_IOC_1,w
 20310  1262  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20311                           
 20312                           ;Dimmer_B1.c: 1512: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20313  1263  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20314  1264  3E01               	addlw	1
 20315  1265  00FA               	movwf	??_DimmerLights_IOC_1
 20316  1266  087A               	movf	??_DimmerLights_IOC_1,w
 20317  1267  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20318  1268                     i1l7417:	
 20319                           
 20320                           ;Dimmer_B1.c: 1513: }
 20321                           ;Dimmer_B1.c: 1519: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20322  1268  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20323  1269  0020               	movlb	0	; select bank0
 20324  126A  1D0D               	btfss	13,2	;volatile
 20325  126B  0008               	return
 20326  126C  0021               	movlb	1	; select bank1
 20327  126D  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20328  126E  0008               	return
 20329  126F                     __end_of_DimmerLights_IOC_1:	
 20330                           
 20331                           	psect	text147
 20332  1B6E                     __ptext147:	
 20333 ;; *************** function i1_Division *****************
 20334 ;; Defined at:
 20335 ;;		line 1382 in file "../src/Dimmer_B1.c"
 20336 ;; Parameters:    Size  Location     Type
 20337 ;;  value           1    wreg     unsigned char 
 20338 ;;  num             1    5[COMMON] unsigned char 
 20339 ;; Auto vars:     Size  Location     Type
 20340 ;;  value           1    8[COMMON] unsigned char 
 20341 ;;  Division        1    9[COMMON] unsigned char 
 20342 ;; Return value:  Size  Location     Type
 20343 ;;                  1    wreg      unsigned char 
 20344 ;; Registers used:
 20345 ;;		wreg, status,2, status,0, pclath, cstack
 20346 ;; Tracked objects:
 20347 ;;		On entry : 0/0
 20348 ;;		On exit  : 0/0
 20349 ;;		Unchanged: 0/0
 20350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20351 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20354 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20355 ;;Total ram usage:        5 bytes
 20356 ;; Hardware stack levels used:    1
 20357 ;; Hardware stack levels required when called:    1
 20358 ;; This function calls:
 20359 ;;		i1___lbdiv
 20360 ;; This function is called by:
 20361 ;;		_DimmerLights_IOC_1
 20362 ;; This function uses a non-reentrant model
 20363 ;;
 20364                           
 20365                           
 20366                           ;psect for function i1_Division
 20367  1B6E                     i1_Division:	
 20368                           
 20369                           ;incstack = 0
 20370                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20371                           ;i1Division@value stored from wreg
 20372  1B6E  00F8               	movwf	i1Division@value
 20373                           
 20374                           ;Dimmer_B1.c: 1383: char result = (char) (value / num);
 20375  1B6F  0875               	movf	i1Division@num,w
 20376  1B70  00F6               	movwf	??i1_Division
 20377  1B71  0876               	movf	??i1_Division,w
 20378  1B72  00F0               	movwf	i1___lbdiv@divisor
 20379  1B73  0878               	movf	i1Division@value,w
 20380  1B74  319F  2753         	fcall	i1___lbdiv
 20381  1B76  00F7               	movwf	??i1_Division+1
 20382  1B77  0877               	movf	??i1_Division+1,w
 20383  1B78  00F9               	movwf	i1Division@result
 20384                           
 20385                           ;Dimmer_B1.c: 1384: return result;
 20386  1B79  0879               	movf	i1Division@result,w
 20387  1B7A  0008               	return
 20388  1B7B                     __end_ofi1_Division:	
 20389                           
 20390                           	psect	text148
 20391  1F53                     __ptext148:	
 20392 ;; *************** function i1___lbdiv *****************
 20393 ;; Defined at:
 20394 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20395 ;; Parameters:    Size  Location     Type
 20396 ;;  dividend        1    wreg     unsigned char 
 20397 ;;  divisor         1    0[COMMON] unsigned char 
 20398 ;; Auto vars:     Size  Location     Type
 20399 ;;  dividend        1    2[COMMON] unsigned char 
 20400 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20401 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20402 ;; Return value:  Size  Location     Type
 20403 ;;                  1    wreg      unsigned char 
 20404 ;; Registers used:
 20405 ;;		wreg, status,2, status,0
 20406 ;; Tracked objects:
 20407 ;;		On entry : 0/0
 20408 ;;		On exit  : 0/0
 20409 ;;		Unchanged: 0/0
 20410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20411 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20412 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20414 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20415 ;;Total ram usage:        5 bytes
 20416 ;; Hardware stack levels used:    1
 20417 ;; This function calls:
 20418 ;;		Nothing
 20419 ;; This function is called by:
 20420 ;;		i1_Division
 20421 ;; This function uses a non-reentrant model
 20422 ;;
 20423                           
 20424                           
 20425                           ;psect for function i1___lbdiv
 20426  1F53                     i1___lbdiv:	
 20427                           
 20428                           ;incstack = 0
 20429                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20430                           ;i1___lbdiv@dividend stored from wreg
 20431  1F53  00F2               	movwf	i1___lbdiv@dividend
 20432  1F54  01F4               	clrf	i1___lbdiv@quotient
 20433  1F55  0870               	movf	i1___lbdiv@divisor,w
 20434  1F56  1903               	btfsc	3,2
 20435  1F57  2F72               	goto	i1l6783
 20436  1F58  01F3               	clrf	i1___lbdiv@counter
 20437  1F59  0AF3               	incf	i1___lbdiv@counter,f
 20438  1F5A                     i1l6771:	
 20439  1F5A  1BF0               	btfsc	i1___lbdiv@divisor,7
 20440  1F5B  2F63               	goto	i1l6773
 20441  1F5C  1003               	clrc
 20442  1F5D  0DF0               	rlf	i1___lbdiv@divisor,f
 20443  1F5E  3001               	movlw	1
 20444  1F5F  00F1               	movwf	??i1___lbdiv
 20445  1F60  0871               	movf	??i1___lbdiv,w
 20446  1F61  07F3               	addwf	i1___lbdiv@counter,f
 20447  1F62  2F5A               	goto	i1l6771
 20448  1F63                     i1l6773:	
 20449  1F63  1003               	clrc
 20450  1F64  0DF4               	rlf	i1___lbdiv@quotient,f
 20451  1F65  0870               	movf	i1___lbdiv@divisor,w
 20452  1F66  0272               	subwf	i1___lbdiv@dividend,w
 20453  1F67  1C03               	skipc
 20454  1F68  2F6D               	goto	L11
 20455  1F69  0870               	movf	i1___lbdiv@divisor,w
 20456  1F6A  02F2               	subwf	i1___lbdiv@dividend,f
 20457  1F6B  1474               	bsf	i1___lbdiv@quotient,0
 20458  1F6C  1003               	clrc
 20459  1F6D                     L11:	
 20460  1F6D  0CF0               	rrf	i1___lbdiv@divisor,f
 20461  1F6E  3001               	movlw	1
 20462  1F6F  02F3               	subwf	i1___lbdiv@counter,f
 20463  1F70  1D03               	btfss	3,2
 20464  1F71  2F63               	goto	i1l6773
 20465  1F72                     i1l6783:	
 20466  1F72  0874               	movf	i1___lbdiv@quotient,w
 20467  1F73  0008               	return
 20468  1F74                     __end_ofi1___lbdiv:	
 20469  007E                     btemp	set	126	;btemp
 20470  007E                     pic14e$flags	set	126
 20471  007E                     wtemp	set	126
 20472  007E                     wtemp0	set	126
 20473  0080                     wtemp1	set	128
 20474  0082                     wtemp2	set	130
 20475  0084                     wtemp3	set	132
 20476  0086                     wtemp4	set	134
 20477  0088                     wtemp5	set	136
 20478  007F                     wtemp6	set	127
 20479  007E                     ttemp	set	126
 20480  007E                     ttemp0	set	126
 20481  0081                     ttemp1	set	129
 20482  0084                     ttemp2	set	132
 20483  0087                     ttemp3	set	135
 20484  007F                     ttemp4	set	127
 20485  007E                     ltemp	set	126
 20486  007E                     ltemp0	set	126
 20487  0082                     ltemp1	set	130
 20488  0086                     ltemp2	set	134
 20489  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      76
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  150354
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6037
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6037
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3386
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3386
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45011
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   45011
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40437
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4370
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35883
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0     157
                                              4 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10370
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20606
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2892
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48917
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48709
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27938
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3875
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20500
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3315
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4636
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4636
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2892
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1501
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Mar 12 10:08:39 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1DC5                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 1456  
                                      l96 1374                                        l88 146A  
                                      l97 1370                                        l98 135E  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FDB  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D2                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1AB2  
                  __end_of_setDelayOff_GO 0C98                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 172A  
                    _setDimmerLights_Line 1BC9                              ___ftadd@sign 004B  
                                     l100 136E                                       l303 1DD1  
                                     l304 1DD3                                       l235 088D  
                    _setDimmerLights_SwOn 111E                                       l531 091D  
                                     l347 1009                                       l676 14FC  
                                     l758 1E78                                       l689 1B97  
                                     l785 0FC2                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1DDE                     _Buzzer_Initialization 1A18  
                         __end_of_ADC_Set 1A6E                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1D94               _setDimmerIntr_ControlStatus 1D7C  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1A96  
                   _setDimmerLights_OnOff 0F3D          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1244 12EA                                      l2141 0584  
                                    l1502 070D                                      l2142 05D5  
                                    l1511 1DC4                                      l2209 0A7E  
                                    l2137 0635                                      l1258 107C  
                                    l1268 0B7D                                      l2228 10DE  
                                    l1470 1099                                      l2182 15F9  
                                    l1471 10B4                                      l2167 1B9E  
                                    l1447 132F                                      l1624 01FF  
                                    l1634 01DB                                      l1626 008B  
                                    l2506 1D42                                      l1802 04A1  
                                    l1475 10B0                                      l1635 01D9  
                                    l1627 0087                                      l2195 111A  
                                    l1628 0082                           __end_of_IOC_Set 1AD3  
                                    l2710 1EC0                                      l2526 0381  
                                    l2528 024D                                      l2900 0428  
                                    l6007 0467                                      l6023 0D52  
                                    l6201 114A                                      l6017 0D3C  
                                    l1796 0560                                      l6213 11EE  
                                    l6045 0DAC                                      l6037 0D93  
                                    l6117 0B9E                                      l2871 1569  
                                    l6151 0C03                                      l6143 0BE9  
                                    l6135 0BCE                                      l7111 1C18  
                                    l6081 0E3E                                      l6065 0DFB  
                                    l6145 0BF2                                      l6137 0BDC  
                                    l7201 11B0                                      l6059 0DE5  
                                    l6147 0BF5                                      l6411 1DAF  
                                    l6235 0C4A                                      l7131 15AD  
                                    l2877 1580                                      l6093 0E5A  
                                    l6077 0E36                                      l6245 0C7A  
                                    l7205 11B9                            _Load_Main$3984 002A  
                                    l6415 1DBE                                      l7055 1064  
                                    l7143 15C5                                      l6089 0E52  
                                    l6249 0C8E                                      l7305 1ABA  
                                    l8201 018F                                      l8025 09D2  
                                    l8017 09B3                                      l5811 1555  
                                    l5803 153F                                      l8211 01AB  
                                    l7147 15CE                     _setDimmerLights_SwOff 11C0  
                                    l6285 1714                                      l8221 01C1  
                                    l8205 019B                                      l8125 0069  
                                    l6381 101A                                      l6453 0A9B  
                                    l6437 12A2                                      l8045 0A01  
                                    l8029 09DA                                      l8061 0CC9  
                                    l6199 1145                                      l5807 1546  
                                    l6631 1094                                      l8143 008A  
                                    l6383 1025                                      l6463 0AEB  
                                    l5817 156E                                      l5809 1550  
                                    l6641 10AB                                      l6633 109D  
                                    l5913 1C44                                      l7281 1752  
                                    l8305 069E                                      l7193 1192  
                                    l6449 0A96                                      l6721 0A23  
                                    l6713 0A07                                      l7177 1C29  
                                    l8073 0D0E                                      l8065 0CE0  
                                    l5843 1391                                      l5819 1576  
                                    l7283 1759                                      l8323 06E0  
                                    l8307 0679                                      l7515 1BF6  
                                    l7195 119E                                      l7267 1CC0  
                                    l6723 0A3E                                      l8091 130A  
                                    l5861 13B7                                      l5853 1399  
                                    l5837 1386                                      l5917 1C4A  
                                    l6661 1208                                      l7293 1781  
                                    l8325 06BB                                      l8309 06A6  
                                    l7541 0B76                                      l7533 0B1B  
                                    l8165 00E0                                      l6725 0A60  
                                    l6733 0A6C                                      l8069 0CF7  
                                    l5855 13A5                                      l5935 1FA1  
                                    l5951 03B8                                      l7295 1788  
                                    l8327 06E8                                      l8335 0703  
                                    l7527 0B06                                      l8191 0163  
                                    l8159 00AE                                      l6727 0A64  
                                    l6719 0A1C                                      l5865 13C0  
                                    l6745 1F7C                                      l6921 1D5F  
                                    l6681 1C33                                      l8329 06F2  
                                    l8257 01EE                                      l6729 0A68  
                                    l6747 1F85                                      l5947 03B1  
                                    l6675 1227                                      l6667 1211  
                                    l8531 1E1E                                      l8611 082D  
                                    l7627 0525                                      l7491 1F21  
                                    l8099 1318                                      l5869 13C8  
                                    l6757 1F94                                      l5981 0407  
                                    l5957 03C7                                      l6685 1C3A  
                                    l8293 0667                                      l8197 0172  
                                    l8621 083D                                      l8701 0896  
                                    l7741 1D4D                                      l7805 0329  
                                    l7637 053A                                      l5975 03F4  
                                    l6687 1C3F                                      l6943 0F84  
                                    l6951 0FA2                                      l8287 0657  
                                    l8535 1E24                                      l8615 0833  
                                    l7639 053C                                      l7495 1F26  
                                    l5993 043A                                      l5977 03FE  
                                    l5969 03E1                                      l6945 0F9B  
                                    l8297 0676                                      l8529 1E1B  
                                    l8625 0843                                      l8609 082A  
                                    l8553 1EAA                                      l8713 08A9  
                                    l8705 089C                                      l7737 1D47  
                                    l7489 1F1E                                      l5987 041A  
                                    l5979 0403                                      l7835 1EBA  
                                    l8563 1FC1                                      l8619 083A  
                                    l8555 1EB0                                      l8731 17A8  
                                    l8707 08A0                                      l7771 0280  
                                    l7755 0237                                      l7595 04B3  
                                    l5997 044C                                      l5989 0424  
                                    l6965 0FD1                                      l8565 1FC4  
                                    l8581 1FE5                                      l8733 17AB  
                                    l8709 08A3                                      l7781 02B5  
                                    l7589 04A4                                      l7597 04B6  
                                    l8901 14A2                     _myMain_Initialization 1CD5  
                                    l7855 1348                                      l8583 1FE8  
                                    l8823 05E4                                      l6985 13E8  
                                    l7937 0790                                      l8569 1FCA  
                                    l8753 17C3                                      l8737 17B1  
                                    l8681 0862                                      l8809 05D0  
                                    l8905 14AD                                      l6979 0FFD  
                                    l7891 1E7A                                      l7963 12C9  
                                    l8587 1FEE                                      l8755 17DC  
                                    l8675 0859                                      l8851 062E  
                                    l7795 02F5                                      l8677 085C  
                                    l8837 0616                                      l8695 0874  
                                    _CFGS 0CAE                                      l8699 0893  
                            __CFG_WDTE$ON 0000                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5105 0E5B  
                                    u5115 0E61                                      u5035 0E07  
                                    u5045 0E17                                      u5215 0BEA  
                                    u4425 154B                                      u5065 0E3F  
                                    u5410 16CF                                      u5075 0E45  
                                    u5155 0BA5                                      _PEIE 005E  
                                    u4445 1564                                      u5415 16CD  
                                    u4545 139C                                      u4465 1571  
                                    u5185 0BCF                                      u5515 100F  
                                    u6315 1D35                                      u4565 13A6  
                                    u4575 13B0                                      u4495 1587  
                                    u5375 0C56                                      u4585 13B8  
                                    u4825 03F5                                      u6345 1E53  
                                    u8035 09C2                                      u7325 04F7  
                                    u4855 0408                                      u6615 1195  
                                    u8135 0CBC                                      u8215 1327  
                                    u7345 050E                                      u8145 0CD3  
                                    u4795 03E2                                      u4955 0D64  
                                    u6635 119F                                      u8155 0CEA  
                                    u4885 041B                                      u4965 0D74  
                                    u6645 11A9                                      u7365 052C  
                                    u8085 09F1                                      u8165 0D01  
                                    u4975 0D94                                      u6655 11B1  
                                    u9215 05A8                                      u8175 0D18  
                                    u4985 0DA3                                      u4995 0DAD  
                                    u8355 00AC                                      u8620 06E6  
                                    u8365 00DE                                      u9245 0605  
                                    u7735 1EC1                                      u8455 01A2  
                                    u8375 0122                                      u8625 06C4  
                                    u7745 1EC6                                      u8590 06A4  
                                    u7775 133E                                      u8595 0682  
                                    u7975 12E1                                      u8795 1D0B  
                                    _LWLO 0CAD                                      _RSSI 00CF  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E47                _setDimmerLights_DimmingRun 1E2C  
                                    _Buz1 0120                                      _Load 0138  
                                    _Temp 00D8                                      _main 147E  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0924  
                         __end_of_RF_Main 1A24                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B56  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0AFF  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2279 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D66  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1D50                    _getDimmerLights_Status 1BB8  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1A3A  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CB  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 13CF  
                         __end_of___lbdiv 1F96                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DCE                           __end_of___ftneg 1A9F  
                         __end_of___ftmul 0E82                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0C0C  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 11C0  
                                   i1l850 095A                                     i1l842 0949  
                                   i1l861 097E                                     i1l856 0980  
                                   i1l858 0975                                     i1l867 0992  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1D3B                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 16C5   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1660                                     _Light 00CE  
                         i1Division@value 0078                          __end_of_TMR1_ISR 1EF4  
                             ?i1_Division 0075                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1B4A  
                                   _getAD 1F13                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1C89  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1AC8                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1C65                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1BEB                        _setRF_DimmerLights 16C5  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1B8A  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 14D9  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 1A3E  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 0639  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 1BA8                                    ??_main 0070  
                           ___fttol@sign1 0056                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0062  
            ??_DimmerLights_SelectPointer 0020                   _setControl_Lights_Table 0A06  
                          _setMemory_Data 1B26                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 0778  
      setDimmerIntr_ControlStatus@command 0020                   _setDimmerLights_Dimming 13CF  
                               ??_IOC_ISR 007C                                 ??_IOC_Set 0020  
                             _DimmerIntr1 00BC                  _getMain_All_LightsStatus 1AA8  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1CFC  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08B5                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1A85                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1FB8                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1597                  _getMain_All_Error_Status 1083  
                                  _IOCBF2 1CB2                                    i1l1207 001A  
                                  i1l7331 0931                                    i1l7343 0940  
                                  i1l7417 1268                                    i1l7337 0938  
                                  i1l7381 0977                                    i1l8421 0012  
                                  i1l6771 1F5A                                    i1l6773 1F63  
                                  i1l7389 098B                                    i1l6783 1F72  
                                  i1l7909 1EED                                    i1l7919 1A92  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1DF8                                    u787_25 1EE8  
                                  _WDTCON 0097                      Exception_Main@i_3621 0032  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D26                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 10B6  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C41                __end_of_Mcu_Initialization 1C77  
                     __end_of_Buzzer_Main 137B                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1C41                    __end_of_Exception_Main 070E  
                    Exception_Main@lights 0035                                    ___wmul 1EB7  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D6                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CC2  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1CAF                                    _s_data 00D7  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 11F9  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1B32                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1425  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1A1E          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1DAC          __end_of_setDimmerIntr_Dimming_Sw 1D7C  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1F74  
               _setDimmerLights_DimmingOn 07D8                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CD5  
             getMain_Lights_Count@status1 0021               __size_of_DimmerLights_IOC_1 003D  
                   __end_of_SwPointSelect 1B6E               __size_of_DimmerLights_TMR_1 0070  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1D3B  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5407 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK3 1F33                             __end_of_getAD 1F33  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 1A32                           _getSw_KeyStatus 1C1E  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0024                          ___lbdiv@quotient 0024  
                    _getMain_Lights_Count 1ABD                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0205         setDimmerIntr_ControlStatus@lights 0022  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1B02  
              __end_of_set_TimeoutCleared 0805           setDimmerIntr_MaxmumValue@lights 0064  
                      __size_of_getRxData 0064                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1AF6  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1A24  
                      ??_CC2500_WriteByte 0020                                 ?_Division 0025  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1331  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 1A2A                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1A2A  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CC                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 147E  
                          _getDelayOff_GO 1BDA                       _CC2500_WriteCommand 1E12  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 1536  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0994                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1A75                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1A67  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 0C98  
      __end_of_DimmerLights_SelectPointer 1AF6                _DimmerLights_SelectPointer 1AEA  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1ADE  
                      _setRFSW_AdjControl 0A7F                    __end_of_setProductData 1B02  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 1A8D  
                                 _IOC_Set 1AC8                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                              ??i1_Division 0076  
                       _Flash_Memory_Main 12AF                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1DDE                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1A21  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0026                                   _WDT_Set 1B4A  
         __end_of_setControl_Lights_Table 0A7F                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1425  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1B62                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1C0D  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1BEB            __end_of_getDimmerLights_Status 1BC9  
                       __end_of_getRxData 15FB                   __end_of_getSw_KeyStatus 1C2F  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 137B                                   ___lbdiv 1F74  
                                 ___ftadd 0389                                   ___ftdiv 0D25  
                                 ___ftneg 1A96                           __size_of___wmul 001E  
                                 ___ftmul 0DCE                                   ___fttol 0B85  
                     __end_of_Switch_Main 1A75                        __end_ofi1_Division 1B7B  
                                 ___lwdiv 1189                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1C0D  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 12F0  
                                 __ptext2 1CD5                                   __ptext3 0C98  
                                 __ptext4 0994                                   __ptext5 1F13  
                                 __ptext6 1C77                                   __ptext7 0002  
                                 __ptext8 1A27                                   __ptext9 047F  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 12F0                 __end_of_Flash_Memory_Read 1DF8  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0564  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1A2E  
                __end_of_setRF_AdjControl 10EA                         _DimmerLights_Main 1E62  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1A54  
              __end_of_CC2500_ClearRXFIFO 1A46                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1A4A                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1B1A                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1ADE  
                                 clrloop0 1A5B            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1004                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 102A  
                           _DelayTime_1us 1004                         __end_of_setTxData 0F3D  
              __end_of_Flash_Memory_Write 1083        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1A54                __end_of_setRF_TransceiveGO 1CAF  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1A55  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 1FDB  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C53  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 1795  
                           _CC2500_TxData 0849                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0AFF                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1DAC  
                     _Flash_Memory_Unlock 1A9F                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1E7E                        _Mcu_Initialization 1C65  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 1A42                      __end_of_my_MainTimer 1331  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B26                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F53  
               __end_of_CC2500_InitSetREG 1054                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 2000  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 0800                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E12  
                    _setRF_Initialization 1AD3                        _setMemory_LoopSave 1CC2  
                             _Switch_Main 1A6E                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C1E  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D11               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1BFC  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C53       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1ED5  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1232  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 147E  
              __end_of_DimmerLights_IOC_1 126F                      _CC2500_FrequencyCabr 1B56  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 126F                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0994                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A7D                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1F13  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0564  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1660  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 15FB  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 0800         __end_of_setDimmerIntr_MaxmumValue 1B0E  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 008D  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A27                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1AB2                                 _Tx_Length 00D4  
                             __pdataBANK3 01CC                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 10B6  
                        _CC2500_SIDLEMode 1A4A                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1C89                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 14D9                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0160  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E9A                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 00E7               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A3E                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C2F  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 1A17                                 _getBuz_GO 1BFC  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 07D8  
             _Flash_Memory_Initialization 070E                                  ?___awdiv 0020  
                               __ptext100 1BDA                                 __ptext101 1C2F  
                                ?___lbdiv 0020                                 __ptext110 1D50  
                               __ptext102 13CF                                 __ptext111 1A75  
                               __ptext103 0E82                                 __ptext120 1A96  
                               __ptext112 1083                                 __ptext104 1C9C  
                               __ptext121 0DCE                                 __ptext113 1A60  
                               __ptext105 16C5                                 __ptext130 1AF6  
                               __ptext122 0D25                                 __ptext114 1A16  
                               __ptext106 1BC9                                 __ptext131 111E  
                               __ptext123 0389                                 __ptext115 14D9  
                               __ptext107 1B02                                 __ptext140 1331  
                               __ptext132 1425                                 __ptext124 1F96  
                               __ptext116 1C89                                 __ptext108 1D66  
                               __ptext141 1A18                                 __ptext133 137B  
                               __ptext125 1536                                 __ptext117 1660  
                               __ptext109 1B8A                                  ?___ftadd 0041  
                               __ptext134 11C0                                 __ptext126 1B7B  
                               __ptext118 15FB                                 __ptext143 1ED5  
                               __ptext135 1BB8                                 __ptext127 1F74  
                               __ptext119 0B85                                 __ptext144 0924  
                               __ptext136 1AEA                                 __ptext128 1A2E  
                               __ptext145 1A8D                                 __ptext137 1A2A  
                               __ptext129 08B5                                 __ptext146 1232  
                               __ptext138 1A4E                                 __ptext147 1B6E  
                               __ptext139 1ADE                                 __ptext148 1F53  
                               _getRxData 1597                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 0041  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 12AF  
                        ??_setProductData 0063                   _setOverTemp_ADV_Restore 1E47  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A1B                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1D50  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1B99              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1B8A                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C3                         ?_setRF_AdjControl 0070  
                               _r_address 00D5             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 11F9              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1CE8                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1B62  
                     __end_of_setLED_Main 1189                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A27  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1A36                           SwPointSelect@sw 0021  
                               clear_ram0 1A5A                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 12F0  
                               _setTxData 0E82       __end_of_DimmerLights_Initialization 1A67  
             _DimmerLights_Initialization 1A60                    _Flash_Memory_Main$3147 0028  
                      _CC2500_ClearRXFIFO 1A42                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1A46                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CFC  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1054                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1ED5  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B3E  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C9C                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1BA8                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E2C                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1C77                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00E5                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CA  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1B3E  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 111E  
                   _DlyOff_Initialization 1A4E         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1B7B  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D94               setDimmerLights_OnOff@lights 00E6  
                _setDimmerIntr_Dimming_Sw 1D66                                  _Fosc_Set 1A3A  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0A06                        __end_of_getLoad_OK 1A7D  
                   _Switch_Initialization 1000         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0D25  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1DC5                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D3                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3610 0023  
           _getMain_All_Error_Status$3609 0021                  __end_of_getDimmer_LoadGO 1A85  
                     _Load_Initialization 1A1B          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 047F  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1F96                          ??_LedPointSelect 0020  
                                ___ftpack 1536             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1153                __end_of_setRF_DimmerLights 172A  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1A8D                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1E47  
                                __ptext11 1A24                                  __ptext20 0800  
                                __ptext12 1A17                                  __ptext21 1D26  
                                __ptext13 1A6E                                  __ptext30 10B6  
                                __ptext22 1000                                  __ptext14 0205  
                                __ptext31 126F                                  __ptext23 1BA8  
                                __ptext15 1CE8                                  __ptext40 1E9A  
                                __ptext32 0A7F                                  __ptext24 1A21  
                                __ptext16 07D8                                  __ptext41 1D11  
                                __ptext33 1E2C                                  __ptext25 0564  
                                __ptext17 1C1E                                  __ptext50 1A42  
                                __ptext42 1A4A                                  __ptext34 1C0D  
                                __ptext26 1597                                  __ptext18 1B62  
                                __ptext51 1E12                                  __ptext43 0805  
                                __ptext35 1BFC                                  __ptext27 10EA  
                                __ptext19 1D3B                                  __ptext60 1DF8  
                                __ptext52 1A3E                                  __ptext44 102A  
                                __ptext36 1B99                                  __ptext28 1CC2  
                                __ptext61 1AC8                                  __ptext53 1CFC  
                                __ptext45 1EF4                                  __ptext37 0849  
                                __ptext29 0A06                                  __ptext70 1189  
                                __ptext62 1A3A                                  __ptext54 1DC5  
                                __ptext46 1FB8                                  __ptext38 1795  
                                __ptext71 1A1B                                  __ptext63 1A67  
                                __ptext55 1A1E                                  __ptext47 1B56  
                                __ptext39 1FDB                                  __ptext80 1B32  
                                __ptext72 1E7E                                  __ptext64 0053  
                                __ptext56 1AD3                                  __ptext48 1004  
                                __ptext81 070E                                  __ptext73 1A36  
                                __ptext65 1ABD                                  __ptext57 1C65  
                                __ptext49 1A46                                  __ptext90 0F3D  
                                __ptext82 1B26                                  __ptext74 1153  
                                __ptext66 1A85                                  __ptext58 1B4A  
                                __ptext91 11F9                                  __ptext83 1054  
                                __ptext75 1A32                                  __ptext67 1A7D  
                                __ptext59 1B3E                                  __ptext92 1B1A  
                                __ptext84 1A9F                                  __ptext76 1C53  
                                __ptext68 1CAF                                  __ptext93 1D94  
                                __ptext85 1DDE                                  __ptext77 12AF  
                                __ptext69 1EB7                                  __ptext94 1B0E  
                                __ptext86 0639                                  __ptext78 1BEB  
                                __ptext95 1D7C                                  __ptext87 1AB2  
                                __ptext79 0AFF                                  __ptext96 0C0C  
                                __ptext88 1E62                                  __ptext97 1C41  
                                __ptext89 172A                                  __ptext98 1DAC  
                                __ptext99 1AA8                                  __product 01CC  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1ABD              __end_of_setDimmerLights_Main 1795  
            __end_of_setDimmerLights_Line 1BDA                        _DimmerLights_IOC_1 1232  
            __end_of_setDimmerLights_SwOn 1153                              ??_setSw_Main 002F  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1CE8        __size_of_DimmerIntr_Initialization 005D  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 0924  
                __end_of_CC2500_SIDLEMode 1A4E                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1AEA                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1E9A  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1EF4  
                __end_of_setMemory_Modify 1C9C                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0639                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E6  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D11  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6464 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6461 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 0805  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1B1A                _setDimmerIntr_DimmingValue 1B0E  
             __end_of_Flash_Memory_Modify 0B85              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 10EA               __end_of_Flash_Memory_Unlock 1AA8  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1FB8  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029           __end_of_setOverTemp_ADV_Restore 1E62  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0020  
              setDimmerLights_Line@lights 0020                   setDimmerLights_SwOff@sw 0022  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0069                           setDelayOff_GO@j 006A  
                         setDelayOff_GO@k 006B                   ??_CC2500_PowerOnInitial 0029  
                   setTemp_Main@SafeValue 0068    __end_of_setDimmerLights_Initialization 1A17  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1A16  
              ?_setDimmerIntr_MaxmumValue 0062                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                         getLoad_AD@ADRES 0029                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1A1E                               getLoad_AD@i 002B  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B32                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D1                   __size_of_Exception_Main 00D5  
                           Division@value 0028           __end_of_DelayOff_Initialization 1A2E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1A32  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C0C               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0079          __size_of_setDimmerLights_Dimming 0056  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00CA  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                              i1_Division 1B6E                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 102A                   __end_of_CC2500_ReadByte 1EB7  
            __end_of_setSw_Initialization 1BB8                           _Timeout_Counter 1D26  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1B99          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 1A36            __end_of_setTemp_Initialization 1A18  
                             Division@num 0025                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 1A21                 __size_of_setRF_AdjControl 0034  
                   __end_of_CC2500_RxData 1800                     __end_of_CC2500_TxData 08B5  
                   _setLoad_AH_AL_Restore 1E7E                   __end_of_CC2500_PowerRST 0849  
